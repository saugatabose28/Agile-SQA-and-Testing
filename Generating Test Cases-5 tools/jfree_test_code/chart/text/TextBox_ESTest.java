/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:03:00 GMT 2023
 */

package org.jfree.chart.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.util.UnitType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextBox_ESTest extends TextBox_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1178.28693468048)).when(size2D0).getHeight();
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn("K").when(textBlock0).toString();
      doReturn(size2D0).when(textBlock0).calculateDimensions(any(java.awt.Graphics2D.class));
      TextBox textBox0 = new TextBox(textBlock0);
      Paint paint0 = textBox0.getBackgroundPaint();
      textBox0.setOutlinePaint(paint0);
      textBox0.setShadowPaint(paint0);
      textBox0.equals("x\"}{fNkA=^C!TA`h");
      Paint paint1 = textBox0.getShadowPaint();
      textBox0.equals("x\"}{fNkA=^C!TA`h");
      textBox0.setShadowPaint(paint1);
      textBox0.getTextBlock();
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      textBox0.setInteriorGap(rectangleInsets0);
      textBox0.setShadowXOffset(369.99653527296);
      textBox0.setInteriorGap(rectangleInsets0);
      TextBox textBox1 = new TextBox(textBlock0);
      textBox0.equals(textBox1);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textBox0.getOutlinePaint();
      textBox1.getHeight(graphics2D0);
      textBox0.getShadowPaint();
      textBox1.setShadowYOffset(369.99653527296);
      textBox1.getShadowYOffset();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      Paint paint0 = textBox0.getBackgroundPaint();
      textBox0.setBackgroundPaint(paint0);
      textBox0.getBackgroundPaint();
      Paint paint1 = textBox0.getShadowPaint();
      TextBox textBox1 = new TextBox();
      textBox0.equals(textBox1);
      textBox0.getTextBlock();
      textBox0.setInteriorGap((RectangleInsets) null);
      textBox0.setTextBlock((TextBlock) null);
      textBox0.getTextBlock();
      textBox1.setBackgroundPaint(paint1);
      textBox1.equals(textBox0);
      TextBox textBox2 = new TextBox((TextBlock) null);
      textBox0.equals(textBox2);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textBox0.getInteriorGap();
      textBox2.getOutlinePaint();
      // Undeclared exception!
      try { 
        textBox2.getHeight(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      TextBox textBox0 = new TextBox(textBlock0);
      textBox0.getShadowPaint();
      textBox0.getShadowPaint();
      Stroke stroke0 = textBox0.getOutlineStroke();
      textBox0.setOutlineStroke(stroke0);
      textBox0.getShadowXOffset();
      Paint paint0 = textBox0.getOutlinePaint();
      textBox0.equals(stroke0);
      textBox0.getInteriorGap();
      TextBox textBox1 = new TextBox("[D*ZSM::Nl?:#~XWc|");
      textBox0.equals(textBox1);
      textBox1.getOutlinePaint();
      textBox0.setShadowYOffset(1856.0);
      textBox1.setOutlinePaint(paint0);
      textBox1.equals(textBox0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextBox textBox0 = new TextBox((TextBlock) null);
      Paint paint0 = textBox0.getOutlinePaint();
      textBox0.setShadowPaint(paint0);
      textBox0.setOutlinePaint(paint0);
      textBox0.equals((Object) null);
      textBox0.setOutlinePaint(paint0);
      textBox0.getInteriorGap();
      textBox0.getBackgroundPaint();
      textBox0.setShadowPaint(paint0);
      textBox0.equals(textBox0);
      textBox0.getShadowPaint();
      textBox0.setShadowYOffset(0.0);
      textBox0.getOutlinePaint();
      textBox0.setTextBlock((TextBlock) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      // Undeclared exception!
      try { 
        textBox0.draw(graphics2D0, 2.0F, 0.0F, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextBox textBox0 = new TextBox("");
      textBox0.setBackgroundPaint((Paint) null);
      textBox0.setBackgroundPaint((Paint) null);
      textBox0.setShadowPaint((Paint) null);
      textBox0.getShadowPaint();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      textBox0.hashCode();
      textBox0.getInteriorGap();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      TextBox textBox0 = new TextBox(textBlock0);
      Stroke stroke0 = textBox0.getOutlineStroke();
      textBox0.setOutlineStroke(stroke0);
      Stroke stroke1 = textBox0.getOutlineStroke();
      textBox0.setOutlineStroke(stroke1);
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(size2D0).getHeight();
      doReturn(0.0, 0.0).when(size2D0).getWidth();
      TextBlock textBlock1 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn(size2D0, (Size2D) null, (Size2D) null, (Size2D) null).when(textBlock1).calculateDimensions(any(java.awt.Graphics2D.class));
      textBox0.setTextBlock(textBlock1);
      textBox0.equals(stroke0);
      textBox0.setBackgroundPaint((Paint) null);
      textBox0.hashCode();
      textBox0.getBackgroundPaint();
      textBox0.getOutlinePaint();
      textBox0.getOutlinePaint();
      Paint paint0 = textBox0.getOutlinePaint();
      textBox0.equals((Object) null);
      textBox0.hashCode();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textBox0.getHeight(graphics2D0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textBox0.getHeight(graphics2D1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      textBox0.draw(graphics2D2, (-399.171F), (-399.171F), rectangleAnchor0);
      textBox0.getInteriorGap();
      textBox0.equals(paint0);
      textBox0.getInteriorGap();
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.TOP_LEFT;
      textBox0.draw(graphics2D3, (-399.171F), 0.0F, rectangleAnchor1);
      textBox0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn("").when(textBlock0).toString();
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      TextBox textBox1 = new TextBox((String) null);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotNull(textBox1);
      
      textBox1.hashCode();
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox0);
      
      textBox0.setShadowXOffset(3.1275856988590487);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.1275856988590487, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.1275856988590487, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      boolean boolean0 = textBox0.equals(textBox1);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.1275856988590487, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      assertFalse(boolean0);
      
      Color color0 = (Color)textBox0.getBackgroundPaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.1275856988590487, textBox0.getShadowXOffset(), 0.01);
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertNotNull(color0);
      
      TextBox textBox2 = new TextBox((String) null);
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertFalse(textBox2.equals((Object)textBox0));
      assertTrue(textBox2.equals((Object)textBox1));
      assertNotNull(textBox2);
      
      textBox2.hashCode();
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertFalse(textBox2.equals((Object)textBox0));
      assertTrue(textBox2.equals((Object)textBox1));
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      
      BasicStroke basicStroke0 = (BasicStroke)textBox2.getOutlineStroke();
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertFalse(textBox2.equals((Object)textBox0));
      assertTrue(textBox2.equals((Object)textBox1));
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      assertNotNull(basicStroke0);
      
      textBox1.setOutlineStroke(basicStroke0);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertTrue(textBox1.equals((Object)textBox2));
      assertFalse(textBox1.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox0));
      assertTrue(textBox2.equals((Object)textBox1));
      assertNotSame(textBox1, textBox2);
      assertNotSame(textBox1, textBox0);
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      
      textBox0.setShadowYOffset(3.1275856988590487);
      assertEquals(3.1275856988590487, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.1275856988590487, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox0.equals((Object)textBox2));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox0, textBox2);
      
      RectangleInsets rectangleInsets0 = textBox1.getInteriorGap();
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertTrue(textBox1.equals((Object)textBox2));
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox2);
      assertNotSame(textBox1, textBox0);
      assertNotNull(rectangleInsets0);
      
      textBox2.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertTrue(textBox1.equals((Object)textBox2));
      assertFalse(textBox1.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox0));
      assertTrue(textBox2.equals((Object)textBox1));
      assertNotSame(textBox1, textBox2);
      assertNotSame(textBox1, textBox0);
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      
      textBox2.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertTrue(textBox1.equals((Object)textBox2));
      assertFalse(textBox1.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox0));
      assertTrue(textBox2.equals((Object)textBox1));
      assertNotSame(textBox1, textBox2);
      assertNotSame(textBox1, textBox0);
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      
      textBox2.setShadowXOffset(0.0);
      assertEquals(0.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertFalse(textBox2.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox1));
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      
      Color color1 = (Color)textBox2.getShadowPaint();
      assertEquals(1, color1.getTransparency());
      assertEquals((-8355712), color1.getRGB());
      assertEquals(128, color1.getGreen());
      assertEquals(128, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(128, color1.getRed());
      assertEquals(0.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertFalse(color1.equals((Object)color0));
      assertFalse(textBox2.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox1));
      assertNotSame(color1, color0);
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      assertNotNull(color1);
      
      textBox0.setShadowYOffset(3.1275856988590487);
      assertEquals(3.1275856988590487, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.1275856988590487, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox0.equals((Object)textBox2));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox0, textBox2);
      
      textBox1.setOutlinePaint(color1);
      assertEquals(1, color1.getTransparency());
      assertEquals((-8355712), color1.getRGB());
      assertEquals(128, color1.getGreen());
      assertEquals(128, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(128, color1.getRed());
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertFalse(color1.equals((Object)color0));
      assertFalse(textBox1.equals((Object)textBox2));
      assertFalse(textBox1.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox1));
      assertNotSame(color1, color0);
      assertNotSame(textBox1, textBox2);
      assertNotSame(textBox1, textBox0);
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      
      Color color2 = (Color)textBox2.getBackgroundPaint();
      assertEquals(255, color2.getGreen());
      assertEquals(192, color2.getBlue());
      assertEquals(255, color2.getAlpha());
      assertEquals((-64), color2.getRGB());
      assertEquals(255, color2.getRed());
      assertEquals(1, color2.getTransparency());
      assertEquals(0.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertFalse(color2.equals((Object)color1));
      assertTrue(color2.equals((Object)color0));
      assertFalse(textBox2.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox1));
      assertNotSame(color2, color0);
      assertNotSame(color2, color1);
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      assertNotNull(color2);
      
      double double0 = textBox0.getShadowYOffset();
      assertEquals(3.1275856988590487, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.1275856988590487, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox0.equals((Object)textBox2));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox0, textBox2);
      assertEquals(3.1275856988590487, double0, 0.01);
      
      TextBlock textBlock1 = textBox0.getTextBlock();
      assertEquals(3.1275856988590487, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.1275856988590487, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox0.equals((Object)textBox2));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox0, textBox2);
      assertSame(textBlock1, textBlock0);
      assertNotNull(textBlock1);
      
      textBox1.setTextBlock(textBlock1);
      assertEquals(3.1275856988590487, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.1275856988590487, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox0.equals((Object)textBox2));
      assertFalse(textBox1.equals((Object)textBox2));
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox0, textBox2);
      assertNotSame(textBox1, textBox2);
      assertNotSame(textBox1, textBox0);
      assertSame(textBlock1, textBlock0);
      
      textBox2.setOutlineStroke(basicStroke0);
      assertEquals(0.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertFalse(textBox2.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox1));
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      
      TextBlock textBlock2 = textBox2.getTextBlock();
      assertEquals(0.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertFalse(textBox2.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox1));
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      assertNull(textBlock2);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textBox2.getHeight(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      TextBox textBox1 = new TextBox();
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertTrue(textBox1.equals((Object)textBox0));
      assertNotNull(textBox1);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertTrue(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertNotNull(rectangleInsets0);
      
      textBox1.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertTrue(textBox0.equals((Object)textBox1));
      assertTrue(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      
      textBox1.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertTrue(textBox0.equals((Object)textBox1));
      assertTrue(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      
      RectangleInsets rectangleInsets1 = textBox1.getInteriorGap();
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertTrue(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox0);
      assertSame(rectangleInsets1, rectangleInsets0);
      assertNotNull(rectangleInsets1);
      
      boolean boolean0 = textBox0.equals(rectangleInsets1);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertTrue(textBox0.equals((Object)textBox1));
      assertTrue(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      assertSame(rectangleInsets1, rectangleInsets0);
      assertFalse(boolean0);
      
      textBox0.setInteriorGap(rectangleInsets1);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertTrue(textBox0.equals((Object)textBox1));
      assertTrue(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      assertSame(rectangleInsets1, rectangleInsets0);
      
      textBox0.setOutlineStroke((Stroke) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      double double0 = textBox1.getShadowXOffset();
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox0);
      assertEquals(2.0, double0, 0.01);
      
      TextBox textBox2 = new TextBox();
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertFalse(textBox2.equals((Object)textBox0));
      assertTrue(textBox2.equals((Object)textBox1));
      assertNotNull(textBox2);
      
      boolean boolean1 = textBox0.equals(textBox2);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox2));
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox2.equals((Object)textBox0));
      assertTrue(textBox2.equals((Object)textBox1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(textBox0, textBox2);
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      assertFalse(boolean1);
      
      textBox2.hashCode();
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertFalse(textBox2.equals((Object)textBox0));
      assertTrue(textBox2.equals((Object)textBox1));
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      textBox2.setTextBlock(textBlock0);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertFalse(textBox2.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox1));
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      TextBox textBox1 = new TextBox((TextBlock) null);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotNull(textBox1);
      
      textBox1.setShadowXOffset(330.937);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(330.937, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox0);
      
      boolean boolean0 = textBox0.equals(textBox1);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(330.937, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      assertFalse(boolean0);
      
      textBox0.setBackgroundPaint((Paint) null);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertNotNull(rectangleInsets0);
      
      Color color0 = (Color)textBox0.getOutlinePaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertNotNull(color0);
      
      RectangleInsets rectangleInsets1 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertSame(rectangleInsets1, rectangleInsets0);
      assertNotNull(rectangleInsets1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertNotNull(rectangleInsets0);
      
      Color color0 = (Color)textBox0.getOutlinePaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      textBox0.setShadowPaint(color0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      
      textBox0.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      textBox0.setShadowPaint(color0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      
      BasicStroke basicStroke0 = (BasicStroke)textBox0.getOutlineStroke();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      textBox0.setOutlineStroke(basicStroke0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      BasicStroke basicStroke1 = (BasicStroke)textBox0.getOutlineStroke();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      double double0 = textBox0.getShadowYOffset();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, double0, 0.01);
      
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      TextBlock textBlock1 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(textBlock1).toString();
      doReturn(size2D0).when(textBlock1).calculateDimensions(any(java.awt.Graphics2D.class));
      TextBlock textBlock2 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      textBox0.setTextBlock(textBlock2);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      textBox0.setTextBlock(textBlock1);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      TextBlock textBlock3 = textBox0.getTextBlock();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertFalse(textBlock3.equals((Object)textBlock0));
      assertFalse(textBlock3.equals((Object)textBlock2));
      assertSame(textBlock3, textBlock1);
      assertNotSame(textBlock3, textBlock0);
      assertNotSame(textBlock3, textBlock2);
      assertNotNull(textBlock3);
      
      textBox0.setOutlinePaint((Paint) null);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      TextBlock textBlock4 = textBox0.getTextBlock();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertFalse(textBlock4.equals((Object)textBlock2));
      assertFalse(textBlock4.equals((Object)textBlock0));
      assertSame(textBlock4, textBlock3);
      assertNotSame(textBlock4, textBlock2);
      assertSame(textBlock4, textBlock1);
      assertNotSame(textBlock4, textBlock0);
      assertNotNull(textBlock4);
      
      textBox0.setShadowYOffset(0.0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      
      Color color1 = (Color)textBox0.getBackgroundPaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(255, color1.getGreen());
      assertEquals(192, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals((-64), color1.getRGB());
      assertEquals(255, color1.getRed());
      assertFalse(color1.equals((Object)color0));
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      textBox0.draw(graphics2D0, 0.0F, (-1.0F), rectangleAnchor0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      
      Paint paint0 = textBox0.getOutlinePaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      assertNull(paint0);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn(size2D0).when(textBlock0).calculateDimensions(any(java.awt.Graphics2D.class));
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertNotNull(rectangleInsets0);
      
      textBox0.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      
      Color color0 = (Color)textBox0.getBackgroundPaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      TextBox textBox1 = new TextBox();
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotNull(textBox1);
      
      BasicStroke basicStroke0 = (BasicStroke)textBox1.getOutlineStroke();
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox0);
      assertNotNull(basicStroke0);
      
      textBox0.setOutlineStroke(basicStroke0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      double double0 = textBox0.getHeight(graphics2D0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertEquals(2.0, double0, 0.01);
      
      TextBlock textBlock1 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      textBox0.setTextBlock(textBlock1);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn(size2D0).when(textBlock0).calculateDimensions(any(java.awt.Graphics2D.class));
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      textBox0.draw(graphics2D0, 349.78F, 349.78F, rectangleAnchor0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      Color color0 = (Color)textBox0.getBackgroundPaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      double double0 = textBox0.getShadowYOffset();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextBlock textBlock0 = null;
      TextBox textBox0 = new TextBox((TextBlock) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      textBox0.setTextBlock((TextBlock) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)textBox0.getOutlineStroke();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      textBox0.setOutlineStroke(basicStroke0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      
      textBox0.setShadowYOffset(0.0);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      textBox0.setShadowXOffset((-1724.26077324));
      assertEquals((-1724.26077324), textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      
      TextBox textBox1 = new TextBox();
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotNull(textBox1);
      
      Color color0 = (Color)textBox1.getBackgroundPaint();
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox0);
      assertNotNull(color0);
      
      textBox0.setBackgroundPaint(color0);
      assertEquals((-1724.26077324), textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      
      textBox1.setShadowPaint(color0);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox0);
      
      textBox0.setShadowYOffset((-1724.26077324));
      assertEquals((-1724.26077324), textBox0.getShadowYOffset(), 0.01);
      assertEquals((-1724.26077324), textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      double double0 = textBox0.getShadowXOffset();
      assertEquals((-1724.26077324), textBox0.getShadowYOffset(), 0.01);
      assertEquals((-1724.26077324), textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertEquals((-1724.26077324), double0, 0.01);
      
      textBox0.hashCode();
      assertEquals((-1724.26077324), textBox0.getShadowYOffset(), 0.01);
      assertEquals((-1724.26077324), textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textBox0.setShadowXOffset(1.0);
      assertEquals((-1724.26077324), textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      float float0 = (-294.53864F);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      // Undeclared exception!
      try { 
        textBox0.draw(graphics2D0, (-294.53864F), (-294.53864F), rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextBox textBox0 = new TextBox("");
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertNotNull(rectangleInsets0);
      
      textBox0.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      
      Color color0 = (Color)textBox0.getShadowPaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      assertNotNull(color0);
      
      textBox0.setShadowPaint(color0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      
      boolean boolean0 = textBox0.equals((Object) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(boolean0);
      
      Paint paint0 = null;
      textBox0.setBackgroundPaint((Paint) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      RectangleInsets rectangleInsets1 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(3.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets1.getLeft(), 0.01);
      assertSame(rectangleInsets1, rectangleInsets0);
      assertNotNull(rectangleInsets1);
      
      textBox0.setShadowPaint((Paint) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      double double0 = textBox0.getShadowYOffset();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, double0, 0.01);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      boolean boolean1 = textBox0.equals("");
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        textBox0.getHeight(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      textBox0.setShadowYOffset(2.0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      textBox0.setShadowPaint((Paint) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotNull(rectangleInsets0);
      
      boolean boolean0 = textBox0.equals((Object) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(boolean0);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = (Color)textBox0.getShadowPaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertNotNull(color0);
      
      textBox0.setShadowYOffset(0.0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn((Size2D) null).when(textBlock0).calculateDimensions(any(java.awt.Graphics2D.class));
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertNotNull(rectangleInsets0);
      
      textBox0.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      
      textBox0.setTextBlock(textBlock0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)textBox0.getOutlineStroke();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      textBox0.setOutlineStroke(basicStroke0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      double double0 = textBox0.getShadowYOffset();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      BasicStroke basicStroke1 = (BasicStroke)textBox0.getOutlineStroke();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textBox0.getHeight(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      boolean boolean0 = textBox0.equals("");
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(boolean0);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertNotNull(rectangleInsets0);
      
      textBox0.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      
      Color color0 = (Color)textBox0.getBackgroundPaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(255, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertNotNull(color0);
      
      textBox0.setShadowPaint(color0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(255, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      
      TextBox textBox1 = new TextBox("P9FTDZz)DJ");
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotNull(textBox1);
      
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      textBox1.setTextBlock(textBlock0);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox0);
      
      boolean boolean1 = textBox0.equals(textBox1);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox1.equals((Object)textBox0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      assertFalse(boolean1);
      
      TextBlock textBlock1 = textBox0.getTextBlock();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertNull(textBlock1);
      
      textBox0.setShadowXOffset(0.0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      double double0 = textBox0.getShadowXOffset();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertEquals(0.0, double0, 0.01);
      
      textBox0.setShadowYOffset(0.0);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      textBox0.setShadowXOffset(2.0);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextBox textBox0 = new TextBox("");
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertNotNull(rectangleInsets0);
      
      textBox0.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      
      textBox0.setOutlineStroke((Stroke) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      double double0 = textBox0.getShadowYOffset();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, double0, 0.01);
      
      Color color0 = (Color)textBox0.getShadowPaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertNotNull(color0);
      
      textBox0.setOutlinePaint(color0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      
      double double1 = textBox0.getShadowYOffset();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(2.0, double1, 0.01);
      
      boolean boolean0 = textBox0.equals(color0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertFalse(boolean0);
      
      double double2 = textBox0.getShadowXOffset();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(2.0, double2, 0.01);
      
      TextBlock textBlock0 = textBox0.getTextBlock();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBlock0);
      
      Color color1 = (Color)textBox0.getOutlinePaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-8355712), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals(128, color1.getGreen());
      assertEquals(128, color1.getBlue());
      assertEquals(128, color1.getRed());
      assertSame(color1, color0);
      assertNotNull(color1);
      
      Stroke stroke0 = textBox0.getOutlineStroke();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNull(stroke0);
      
      textBox0.setOutlineStroke((Stroke) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      TextBlock textBlock1 = textBox0.getTextBlock();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertSame(textBlock1, textBlock0);
      assertNotNull(textBlock1);
      
      TextBlock textBlock2 = textBox0.getTextBlock();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertSame(textBlock2, textBlock1);
      assertSame(textBlock2, textBlock0);
      assertNotNull(textBlock2);
      
      textBox0.setShadowXOffset(2.0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      RectangleInsets rectangleInsets1 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets1.getRight(), 0.01);
      assertSame(rectangleInsets1, rectangleInsets0);
      assertNotNull(rectangleInsets1);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      textBox0.setShadowXOffset(2.0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      textBox0.setOutlineStroke((Stroke) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      textBox0.setBackgroundPaint((Paint) null);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn((Size2D) null).when(textBlock0).calculateDimensions(any(java.awt.Graphics2D.class));
      textBox0.setTextBlock(textBlock0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      Paint paint0 = textBox0.getBackgroundPaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNull(paint0);
      
      textBox0.setBackgroundPaint((Paint) null);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      Paint paint1 = textBox0.getBackgroundPaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNull(paint1);
      
      textBox0.setOutlinePaint((Paint) null);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      double double0 = textBox0.getShadowYOffset();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, double0, 0.01);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      textBox0.setShadowPaint((Paint) null);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textBox0.getHeight(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextBox textBox0 = new TextBox("");
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      textBox0.setBackgroundPaint((Paint) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      textBox0.setShadowXOffset((-126.187946));
      assertEquals((-126.187946), textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      textBox0.setBackgroundPaint((Paint) null);
      assertEquals((-126.187946), textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      textBox0.setOutlinePaint((Paint) null);
      assertEquals((-126.187946), textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      Color color0 = (Color)textBox0.getShadowPaint();
      assertEquals((-126.187946), textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertNotNull(color0);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      textBox0.hashCode();
      assertEquals((-126.187946), textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals((-126.187946), textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertNotNull(rectangleInsets0);
      
      Color color1 = (Color)textBox0.getShadowPaint();
      assertEquals((-126.187946), textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(128, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals((-8355712), color1.getRGB());
      assertEquals(128, color1.getBlue());
      assertEquals(128, color1.getRed());
      assertSame(color1, color0);
      assertNotNull(color1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = (Color)textBox0.getOutlinePaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      textBox0.setShadowPaint(color0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      
      textBox0.setShadowPaint(color0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      
      BasicStroke basicStroke0 = (BasicStroke)textBox0.getOutlineStroke();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      textBox0.setOutlineStroke(basicStroke0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertNotNull(rectangleInsets0);
      
      textBox0.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      
      BasicStroke basicStroke1 = (BasicStroke)textBox0.getOutlineStroke();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      textBox0.setShadowYOffset(0.0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      textBox0.setShadowXOffset(597.209231664837);
      assertEquals(597.209231664837, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(597.209231664837, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertNotNull(rectangleInsets0);
      
      double double0 = textBox0.getShadowYOffset();
      assertEquals(597.209231664837, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, double0, 0.01);
      
      Color color0 = (Color)textBox0.getBackgroundPaint();
      assertEquals(597.209231664837, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      textBox0.setBackgroundPaint(color0);
      assertEquals(597.209231664837, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getRed());
      
      textBox0.setShadowXOffset((-3372.3));
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-3372.3), textBox0.getShadowXOffset(), 0.01);
      
      textBox0.setShadowXOffset((-44.73));
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-44.73), textBox0.getShadowXOffset(), 0.01);
      
      Color color1 = (Color)textBox0.getShadowPaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-44.73), textBox0.getShadowXOffset(), 0.01);
      assertEquals((-8355712), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(128, color1.getRed());
      assertEquals(128, color1.getBlue());
      assertEquals(128, color1.getGreen());
      assertFalse(color1.equals((Object)color0));
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      textBox0.setShadowXOffset(0.0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      
      boolean boolean0 = textBox0.equals(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertFalse(boolean0);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      
      textBox0.setShadowXOffset(0.0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      
      RectangleInsets rectangleInsets1 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(3.0, rectangleInsets1.getLeft(), 0.01);
      assertSame(rectangleInsets1, rectangleInsets0);
      assertNotNull(rectangleInsets1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textBox0.getHeight(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextBox textBox0 = new TextBox("d7=ks");
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      double double0 = textBox0.getShadowXOffset();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      double double0 = (-289.0);
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertNotNull(rectangleInsets0);
      
      textBox0.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      
      Color color0 = (Color)textBox0.getShadowPaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertNotNull(color0);
      
      textBox0.setShadowPaint(color0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      
      textBox0.setShadowXOffset((-289.0));
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-289.0), textBox0.getShadowXOffset(), 0.01);
      
      textBox0.setOutlinePaint(color0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-289.0), textBox0.getShadowXOffset(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      
      TextBlock textBlock0 = textBox0.getTextBlock();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-289.0), textBox0.getShadowXOffset(), 0.01);
      assertNull(textBlock0);
      
      textBox0.setOutlinePaint(color0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-289.0), textBox0.getShadowXOffset(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      
      TextBox textBox1 = new TextBox();
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotNull(textBox1);
      
      boolean boolean0 = textBox0.equals(textBox1);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-289.0), textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      assertFalse(boolean0);
      
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try { 
        textBox1.getHeight((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextBox textBox0 = new TextBox((TextBlock) null);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextBox textBox0 = new TextBox((TextBlock) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      TextBox textBox1 = new TextBox();
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertTrue(textBox1.equals((Object)textBox0));
      assertNotNull(textBox1);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertTrue(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertNotNull(rectangleInsets0);
      
      textBox1.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertTrue(textBox0.equals((Object)textBox1));
      assertTrue(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      
      BasicStroke basicStroke0 = (BasicStroke)textBox1.getOutlineStroke();
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertTrue(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox0);
      assertNotNull(basicStroke0);
      
      textBox0.setOutlineStroke(basicStroke0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertTrue(textBox0.equals((Object)textBox1));
      assertTrue(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      
      RectangleInsets rectangleInsets1 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertTrue(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertSame(rectangleInsets1, rectangleInsets0);
      assertNotNull(rectangleInsets1);
      
      textBox0.setInteriorGap(rectangleInsets1);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertTrue(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertSame(rectangleInsets1, rectangleInsets0);
      
      textBox0.setTextBlock((TextBlock) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertTrue(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      BasicStroke basicStroke1 = (BasicStroke)textBox0.getOutlineStroke();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertTrue(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      textBox1.setShadowYOffset((-921.2898418522261));
      assertEquals((-921.2898418522261), textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox0);
      
      textBox1.setShadowXOffset(1.0);
      assertEquals((-921.2898418522261), textBox1.getShadowYOffset(), 0.01);
      assertEquals(1.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox0);
      
      double double0 = textBox0.getShadowYOffset();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertEquals(2.0, double0, 0.01);
      
      textBox1.setInteriorGap(rectangleInsets1);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-921.2898418522261), textBox1.getShadowYOffset(), 0.01);
      assertEquals(1.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      assertSame(rectangleInsets1, rectangleInsets0);
      
      Color color0 = (Color)textBox1.getShadowPaint();
      assertEquals((-921.2898418522261), textBox1.getShadowYOffset(), 0.01);
      assertEquals(1.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox0);
      assertNotNull(color0);
      
      textBox0.setShadowYOffset((-921.2898418522261));
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-921.2898418522261), textBox0.getShadowYOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      textBox1.setOutlinePaint(color0);
      assertEquals((-921.2898418522261), textBox1.getShadowYOffset(), 0.01);
      assertEquals(1.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox0);
      
      double double1 = textBox1.getShadowYOffset();
      assertEquals((-921.2898418522261), textBox1.getShadowYOffset(), 0.01);
      assertEquals(1.0, textBox1.getShadowXOffset(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox1, textBox0);
      assertEquals((-921.2898418522261), double1, 0.01);
      
      double double2 = textBox1.getShadowYOffset();
      assertEquals((-921.2898418522261), textBox1.getShadowYOffset(), 0.01);
      assertEquals(1.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotSame(textBox1, textBox0);
      assertEquals((-921.2898418522261), double2, 0.01);
      
      double double3 = textBox1.getShadowXOffset();
      assertEquals((-921.2898418522261), textBox1.getShadowYOffset(), 0.01);
      assertEquals(1.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotSame(textBox1, textBox0);
      assertEquals(1.0, double3, 0.01);
      
      boolean boolean0 = textBox1.equals(basicStroke1);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-921.2898418522261), textBox0.getShadowYOffset(), 0.01);
      assertEquals((-921.2898418522261), textBox1.getShadowYOffset(), 0.01);
      assertEquals(1.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      assertSame(basicStroke1, basicStroke0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextBox textBox0 = new TextBox("b:- ");
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn((Size2D) null).when(textBlock0).calculateDimensions(any(java.awt.Graphics2D.class));
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      // Undeclared exception!
      try { 
        textBox0.draw(graphics2D0, 1871.12F, 1.0F, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = (Color)textBox0.getShadowPaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertNotNull(color0);
      
      textBox0.setOutlinePaint(color0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextBox textBox0 = new TextBox("RELATIVE");
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      double double0 = textBox0.getShadowYOffset();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, double0, 0.01);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertNotNull(rectangleInsets0);
      
      textBox0.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextBox textBox0 = new TextBox((TextBlock) null);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      BasicStroke basicStroke0 = (BasicStroke)textBox0.getOutlineStroke();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      textBox0.setOutlineStroke(basicStroke0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      
      textBox0.setShadowYOffset((-123.35508514119));
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-123.35508514119), textBox0.getShadowYOffset(), 0.01);
      
      textBox0.setTextBlock((TextBlock) null);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-123.35508514119), textBox0.getShadowYOffset(), 0.01);
      
      Color color0 = (Color)textBox0.getBackgroundPaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals((-123.35508514119), textBox0.getShadowYOffset(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      BasicStroke basicStroke0 = (BasicStroke)textBox0.getOutlineStroke();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      textBox0.setOutlineStroke(basicStroke0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Color color0 = (Color)textBox0.getOutlinePaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      textBox0.setShadowPaint(color0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      // Undeclared exception!
      try { 
        textBox0.draw(graphics2D0, 2091.03F, 2091.03F, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(textBlock0).toString();
      doReturn((Size2D) null).when(textBlock0).calculateDimensions(any(java.awt.Graphics2D.class));
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      double double0 = 176.5599338023;
      textBox0.setShadowXOffset(176.5599338023);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(176.5599338023, textBox0.getShadowXOffset(), 0.01);
      
      TextBlock textBlock1 = textBox0.getTextBlock();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(176.5599338023, textBox0.getShadowXOffset(), 0.01);
      assertSame(textBlock1, textBlock0);
      assertNotNull(textBlock1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textBox0.getHeight(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextBox textBox0 = new TextBox((String) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      Graphics2D graphics2D0 = null;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertNotNull(rectangleInsets0);
      
      textBox0.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      
      // Undeclared exception!
      try { 
        textBox0.draw((Graphics2D) null, (-1.0F), (-1164.5847F), rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextBox textBox0 = new TextBox(",r=");
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = (Color)textBox0.getOutlinePaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertNotNull(color0);
      
      textBox0.setShadowPaint(color0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      
      Color color1 = (Color)textBox0.getShadowPaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertSame(color1, color0);
      assertNotNull(color1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn((Size2D) null).when(textBlock0).calculateDimensions(any(java.awt.Graphics2D.class));
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textBox0.getHeight(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextBox textBox0 = new TextBox("");
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      textBox0.setInteriorGap((RectangleInsets) null);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      textBox0.setShadowXOffset(3.0);
      assertEquals(3.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn((Size2D) null).when(textBlock0).calculateDimensions(any(java.awt.Graphics2D.class));
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = (Color)textBox0.getShadowPaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertNotNull(color0);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotNull(rectangleInsets0);
      
      textBox0.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      
      TextBlock textBlock1 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      TextBox textBox1 = new TextBox(textBlock1);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotNull(textBox1);
      
      TextBlock textBlock2 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      TextBox textBox2 = new TextBox(textBlock2);
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertFalse(textBox2.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox1));
      assertNotNull(textBox2);
      
      boolean boolean0 = textBox1.equals(textBox2);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox2));
      assertFalse(textBox1.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox1));
      assertNotSame(textBox1, textBox2);
      assertNotSame(textBox1, textBox0);
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      assertFalse(boolean0);
      
      boolean boolean1 = textBox0.equals(textBox1);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox2));
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox1.equals((Object)textBox2));
      assertFalse(textBox1.equals((Object)textBox0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(textBox0, textBox2);
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox2);
      assertNotSame(textBox1, textBox0);
      assertFalse(boolean1);
      
      textBox2.hashCode();
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertFalse(textBox2.equals((Object)textBox0));
      assertFalse(textBox2.equals((Object)textBox1));
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      
      TextBlock textBlock3 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      TextBox textBox3 = new TextBox(textBlock3);
      assertEquals(2.0, textBox3.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox3.getShadowYOffset(), 0.01);
      assertFalse(textBox3.equals((Object)textBox1));
      assertFalse(textBox3.equals((Object)textBox2));
      assertFalse(textBox3.equals((Object)textBox0));
      assertNotNull(textBox3);
      
      TextBlock textBlock4 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      TextBox textBox4 = new TextBox(textBlock4);
      assertEquals(2.0, textBox4.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox4.getShadowXOffset(), 0.01);
      assertFalse(textBox4.equals((Object)textBox1));
      assertFalse(textBox4.equals((Object)textBox0));
      assertFalse(textBox4.equals((Object)textBox3));
      assertFalse(textBox4.equals((Object)textBox2));
      assertNotNull(textBox4);
      
      textBox4.setShadowXOffset(2346.935180051512);
      assertEquals(2346.935180051512, textBox4.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox4.getShadowYOffset(), 0.01);
      assertFalse(textBox4.equals((Object)textBox1));
      assertFalse(textBox4.equals((Object)textBox0));
      assertFalse(textBox4.equals((Object)textBox3));
      assertFalse(textBox4.equals((Object)textBox2));
      assertNotSame(textBox4, textBox1);
      assertNotSame(textBox4, textBox0);
      assertNotSame(textBox4, textBox3);
      assertNotSame(textBox4, textBox2);
      
      textBox3.setShadowYOffset((-417.10319014661));
      assertEquals((-417.10319014661), textBox3.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox3.getShadowXOffset(), 0.01);
      assertFalse(textBox3.equals((Object)textBox1));
      assertFalse(textBox3.equals((Object)textBox4));
      assertFalse(textBox3.equals((Object)textBox2));
      assertFalse(textBox3.equals((Object)textBox0));
      assertNotSame(textBox3, textBox1);
      assertNotSame(textBox3, textBox4);
      assertNotSame(textBox3, textBox2);
      assertNotSame(textBox3, textBox0);
      
      boolean boolean2 = textBox3.equals(textBox4);
      assertEquals((-417.10319014661), textBox3.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox3.getShadowXOffset(), 0.01);
      assertEquals(2346.935180051512, textBox4.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox4.getShadowYOffset(), 0.01);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(textBox3.equals((Object)textBox1));
      assertFalse(textBox3.equals((Object)textBox4));
      assertFalse(textBox3.equals((Object)textBox2));
      assertFalse(textBox3.equals((Object)textBox0));
      assertFalse(textBox4.equals((Object)textBox1));
      assertFalse(textBox4.equals((Object)textBox0));
      assertFalse(textBox4.equals((Object)textBox3));
      assertFalse(textBox4.equals((Object)textBox2));
      assertNotSame(textBox3, textBox1);
      assertNotSame(textBox3, textBox4);
      assertNotSame(textBox3, textBox2);
      assertNotSame(textBox3, textBox0);
      assertNotSame(textBox4, textBox1);
      assertNotSame(textBox4, textBox0);
      assertNotSame(textBox4, textBox3);
      assertNotSame(textBox4, textBox2);
      assertFalse(boolean2);
      
      boolean boolean3 = textBox0.equals(textBox3);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-417.10319014661), textBox3.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox3.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox2));
      assertFalse(textBox0.equals((Object)textBox3));
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox0.equals((Object)textBox4));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(textBox3.equals((Object)textBox1));
      assertFalse(textBox3.equals((Object)textBox4));
      assertFalse(textBox3.equals((Object)textBox2));
      assertFalse(textBox3.equals((Object)textBox0));
      assertNotSame(textBox0, textBox2);
      assertNotSame(textBox0, textBox3);
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox0, textBox4);
      assertNotSame(textBox3, textBox1);
      assertNotSame(textBox3, textBox4);
      assertNotSame(textBox3, textBox2);
      assertNotSame(textBox3, textBox0);
      assertFalse(boolean3);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textBox0.getHeight(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = (Color)textBox0.getShadowPaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      assertNotNull(color0);
      
      textBox0.setBackgroundPaint(color0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      
      Color color1 = (Color)textBox0.getShadowPaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals((-8355712), color1.getRGB());
      assertEquals(128, color1.getRed());
      assertEquals(128, color1.getGreen());
      assertEquals(128, color1.getBlue());
      assertSame(color1, color0);
      assertNotNull(color1);
      
      BasicStroke basicStroke0 = (BasicStroke)textBox0.getOutlineStroke();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      textBox0.setOutlineStroke(basicStroke0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      double double0 = textBox0.getShadowXOffset();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, double0, 0.01);
      
      Color color2 = (Color)textBox0.getOutlinePaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(255, color2.getAlpha());
      assertEquals(0, color2.getRed());
      assertEquals(0, color2.getGreen());
      assertEquals(0, color2.getBlue());
      assertEquals(1, color2.getTransparency());
      assertEquals((-16777216), color2.getRGB());
      assertFalse(color2.equals((Object)color1));
      assertFalse(color2.equals((Object)color0));
      assertNotSame(color2, color1);
      assertNotSame(color2, color0);
      assertNotNull(color2);
      
      boolean boolean0 = textBox0.equals(basicStroke0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertFalse(boolean0);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertNotNull(rectangleInsets0);
      
      TextBox textBox1 = new TextBox("[D*ZSM::Nl?:#~XWc|");
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotNull(textBox1);
      
      boolean boolean1 = textBox0.equals(textBox1);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox1.equals((Object)textBox0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      assertFalse(boolean1);
      
      Color color3 = (Color)textBox1.getOutlinePaint();
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(0, color3.getBlue());
      assertEquals(255, color3.getAlpha());
      assertEquals(0, color3.getGreen());
      assertEquals(1, color3.getTransparency());
      assertEquals((-16777216), color3.getRGB());
      assertEquals(0, color3.getRed());
      assertFalse(textBox1.equals((Object)textBox0));
      assertFalse(color3.equals((Object)color1));
      assertFalse(color3.equals((Object)color0));
      assertNotSame(textBox1, textBox0);
      assertNotSame(color3, color1);
      assertSame(color3, color2);
      assertNotSame(color3, color0);
      assertNotNull(color3);
      
      textBox0.setShadowYOffset(1856.0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1856.0, textBox0.getShadowYOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      textBox1.setOutlinePaint(color2);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1856.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(255, color2.getAlpha());
      assertEquals(0, color2.getRed());
      assertEquals(0, color2.getGreen());
      assertEquals(0, color2.getBlue());
      assertEquals(1, color2.getTransparency());
      assertEquals((-16777216), color2.getRGB());
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(color2.equals((Object)color1));
      assertFalse(color2.equals((Object)color0));
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(color2, color1);
      assertSame(color2, color3);
      assertNotSame(color2, color0);
      assertNotSame(textBox1, textBox0);
      
      TextBox textBox2 = new TextBox();
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertFalse(textBox2.equals((Object)textBox1));
      assertFalse(textBox2.equals((Object)textBox0));
      assertNotNull(textBox2);
      
      boolean boolean2 = textBox1.equals(textBox2);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertFalse(textBox2.equals((Object)textBox1));
      assertFalse(textBox2.equals((Object)textBox0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(textBox1.equals((Object)textBox0));
      assertFalse(textBox1.equals((Object)textBox2));
      assertNotSame(textBox2, textBox1);
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox1, textBox0);
      assertNotSame(textBox1, textBox2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextBox textBox0 = new TextBox("");
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      textBox0.setBackgroundPaint((Paint) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      textBox0.setBackgroundPaint((Paint) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      Color color0 = (Color)textBox0.getShadowPaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertNotNull(rectangleInsets0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextBox textBox0 = new TextBox("org.jfree.chart.text.TextBox");
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      textBox0.setShadowXOffset(2.0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0, (FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      float float0 = 0.0F;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      // Undeclared exception!
      try { 
        textBox0.draw(graphics2D0, 0.0F, 0.0F, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(330.937).when(size2D0).getHeight();
      doReturn(1.0).when(size2D0).getWidth();
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn(size2D0).when(textBlock0).calculateDimensions(any(java.awt.Graphics2D.class));
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = (Color)textBox0.getBackgroundPaint();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      textBox0.setOutlinePaint(color0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getRed());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      textBox0.draw(graphics2D0, (-1226.0F), (-1226.0F), rectangleAnchor0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      textBox0.setShadowXOffset(0.0);
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      textBox0.setBackgroundPaint(color0);
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getRed());
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertNotNull(rectangleInsets0);
      
      TextBlock textBlock1 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn((Size2D) null).when(textBlock1).calculateDimensions(any(java.awt.Graphics2D.class));
      textBox0.setTextBlock(textBlock1);
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      double double0 = textBox0.getShadowXOffset();
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      textBox0.hashCode();
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      RectangleInsets rectangleInsets1 = textBox0.getInteriorGap();
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertSame(rectangleInsets1, rectangleInsets0);
      assertNotNull(rectangleInsets1);
      
      textBox0.setInteriorGap(rectangleInsets1);
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertSame(rectangleInsets1, rectangleInsets0);
      
      Color color1 = (Color)textBox0.getBackgroundPaint();
      assertEquals(255, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals((-64), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(192, color1.getBlue());
      assertEquals(255, color1.getGreen());
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertSame(color1, color0);
      assertNotNull(color1);
      
      double double1 = textBox0.getShadowYOffset();
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.0, double1, 0.01);
      
      RectangleInsets rectangleInsets2 = textBox0.getInteriorGap();
      assertEquals(0.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.0, rectangleInsets2.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets2.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets2.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets2.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets2.getUnitType());
      assertSame(rectangleInsets2, rectangleInsets0);
      assertSame(rectangleInsets2, rectangleInsets1);
      assertNotNull(rectangleInsets2);
      
      textBox0.setShadowXOffset(1.0);
      assertEquals(1.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      textBox0.setShadowXOffset((-904.985446));
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-904.985446), textBox0.getShadowXOffset(), 0.01);
      
      textBox0.setShadowYOffset(2.0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-904.985446), textBox0.getShadowXOffset(), 0.01);
      
      RectangleInsets rectangleInsets3 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals((-904.985446), textBox0.getShadowXOffset(), 0.01);
      assertEquals(1.0, rectangleInsets3.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets3.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets3.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets3.getUnitType());
      assertEquals(3.0, rectangleInsets3.getLeft(), 0.01);
      assertSame(rectangleInsets3, rectangleInsets2);
      assertSame(rectangleInsets3, rectangleInsets0);
      assertSame(rectangleInsets3, rectangleInsets1);
      assertNotNull(rectangleInsets3);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textBox0.getHeight(graphics2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = (Color)textBox0.getBackgroundPaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      textBox0.setBackgroundPaint(color0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getRed());
      
      Color color1 = (Color)textBox0.getBackgroundPaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(255, color1.getRed());
      assertEquals(255, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals((-64), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(192, color1.getBlue());
      assertSame(color1, color0);
      assertNotNull(color1);
      
      Color color2 = (Color)textBox0.getShadowPaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(128, color2.getBlue());
      assertEquals(255, color2.getAlpha());
      assertEquals(1, color2.getTransparency());
      assertEquals(128, color2.getGreen());
      assertEquals((-8355712), color2.getRGB());
      assertEquals(128, color2.getRed());
      assertFalse(color2.equals((Object)color0));
      assertFalse(color2.equals((Object)color1));
      assertNotSame(color2, color0);
      assertNotSame(color2, color1);
      assertNotNull(color2);
      
      TextBox textBox1 = new TextBox();
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertTrue(textBox1.equals((Object)textBox0));
      assertNotNull(textBox1);
      
      boolean boolean0 = textBox0.equals(textBox1);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertTrue(textBox0.equals((Object)textBox1));
      assertTrue(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      assertTrue(boolean0);
      
      TextBlock textBlock0 = textBox0.getTextBlock();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertTrue(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertNull(textBlock0);
      
      textBox0.setInteriorGap((RectangleInsets) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      textBox0.setTextBlock((TextBlock) null);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      
      TextBlock textBlock1 = textBox0.getTextBlock();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertNotSame(textBox0, textBox1);
      assertNull(textBlock1);
      
      boolean boolean1 = textBox1.equals(textBox0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox1.equals((Object)textBox0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      assertFalse(boolean1);
      
      TextBox textBox2 = new TextBox((TextBlock) null);
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertFalse(textBox2.equals((Object)textBox0));
      assertTrue(textBox2.equals((Object)textBox1));
      assertNotNull(textBox2);
      
      boolean boolean2 = textBox0.equals(textBox2);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox2.getShadowYOffset(), 0.01);
      assertFalse(textBox0.equals((Object)textBox2));
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox2.equals((Object)textBox0));
      assertTrue(textBox2.equals((Object)textBox1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(textBox0, textBox2);
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox2, textBox0);
      assertNotSame(textBox2, textBox1);
      assertFalse(boolean2);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textBox2.getHeight(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      TextBlock textBlock1 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      TextBlock textBlock2 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      TextBox textBox0 = new TextBox(textBlock2);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      textBox0.hashCode();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextBlock textBlock0 = mock(TextBlock.class, new ViolatedAssumptionAnswer());
      doReturn("K").when(textBlock0).toString();
      doReturn((Size2D) null).when(textBlock0).calculateDimensions(any(java.awt.Graphics2D.class));
      TextBox textBox0 = new TextBox(textBlock0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      Color color0 = (Color)textBox0.getBackgroundPaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertNotNull(color0);
      
      textBox0.setOutlinePaint(color0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getGreen());
      
      textBox0.setShadowPaint(color0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getGreen());
      
      boolean boolean0 = textBox0.equals("x\"}{fNkA=^C!TA`h");
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(boolean0);
      
      Color color1 = (Color)textBox0.getShadowPaint();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(255, color1.getGreen());
      assertEquals(192, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals((-64), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertSame(color1, color0);
      assertNotNull(color1);
      
      boolean boolean1 = textBox0.equals("x\"}{fNkA=^C!TA`h");
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      textBox0.setShadowPaint(color1);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(255, color1.getGreen());
      assertEquals(192, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals((-64), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertSame(color1, color0);
      
      TextBlock textBlock1 = textBox0.getTextBlock();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertSame(textBlock1, textBlock0);
      assertNotNull(textBlock1);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertNotNull(rectangleInsets0);
      
      textBox0.setInteriorGap(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      
      double double0 = 369.99653527296;
      textBox0.setShadowXOffset(369.99653527296);
      assertEquals(369.99653527296, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      textBox0.setInteriorGap(rectangleInsets0);
      assertEquals(369.99653527296, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      
      TextBox textBox1 = new TextBox(textBlock0);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotNull(textBox1);
      
      boolean boolean2 = textBox0.equals(textBox1);
      assertEquals(369.99653527296, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox1.getShadowXOffset(), 0.01);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(textBox0.equals((Object)textBox1));
      assertFalse(textBox1.equals((Object)textBox0));
      assertNotSame(textBox0, textBox1);
      assertNotSame(textBox1, textBox0);
      assertFalse(boolean2);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textBox1.getHeight(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextBox textBox0 = new TextBox((TextBlock) null);
      Stroke stroke0 = textBox0.getOutlineStroke();
      textBox0.setOutlineStroke(stroke0);
      Paint paint0 = textBox0.getOutlinePaint();
      textBox0.setShadowPaint(paint0);
      textBox0.setOutlinePaint(paint0);
      textBox0.equals((Object) null);
      textBox0.setOutlinePaint(paint0);
      textBox0.getInteriorGap();
      textBox0.getBackgroundPaint();
      textBox0.setShadowPaint(paint0);
      TextBox textBox1 = new TextBox((String) null);
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      textBox1.setInteriorGap(rectangleInsets0);
      textBox0.equals(textBox1);
      textBox1.getShadowPaint();
      textBox0.setShadowYOffset(0.0);
      textBox0.getOutlinePaint();
      textBox0.setTextBlock((TextBlock) null);
      textBox0.setOutlineStroke(stroke0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      // Undeclared exception!
      try { 
        textBox0.draw(graphics2D0, 2.0F, 0.0F, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextBox", e);
      }
  }
}
