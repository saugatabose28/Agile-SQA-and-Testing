/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:04:09 GMT 2023
 */

package org.jfree.chart.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.font.FontRenderContext;
import java.awt.font.LineMetrics;
import java.awt.geom.AffineTransform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.text.TextUtils;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.ui.TextAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextFragment_ESTest extends TextFragment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("3M3v:S\"");
      boolean boolean0 = true;
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((LineMetrics) null).when(fontMetrics0).getLineMetrics(anyString() , any(java.awt.Graphics.class));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(textAnchor0).isBottom();
      doReturn(false).when(textAnchor0).isHalfAscent();
      doReturn(false).when(textAnchor0).isTop();
      doReturn(false).when(textAnchor0).isVerticalCenter();
      // Undeclared exception!
      try { 
        textFragment0.calculateBaselineOffset(graphics2D0, textAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      TextFragment textFragment0 = new TextFragment("Iu9Uj_C5 /CcXzi@", font0, color0);
      textFragment0.getBaselineOffset();
      LineMetrics lineMetrics0 = mock(LineMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(lineMetrics0).getAscent();
      doReturn(0.0F).when(lineMetrics0).getDescent();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(lineMetrics0).when(fontMetrics0).getLineMetrics(anyString() , any(java.awt.Graphics.class));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(textAnchor0).isHalfAscent();
      doReturn(false).when(textAnchor0).isTop();
      doReturn(true).when(textAnchor0).isVerticalCenter();
      textFragment0.getFont();
      textFragment0.calculateBaselineOffset(graphics2D0, textAnchor0);
      textFragment0.getText();
      textFragment0.hashCode();
      textFragment0.getText();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("u>");
      LineMetrics lineMetrics0 = mock(LineMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(2941.507F).when(lineMetrics0).getAscent();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(lineMetrics0).when(fontMetrics0).getLineMetrics(anyString() , any(java.awt.Graphics.class));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(textAnchor0).isTop();
      textFragment0.getPaint();
      textFragment0.getText();
      textFragment0.calculateBaselineOffset(graphics2D0, textAnchor0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      TextUtils.setUseDrawRotatedStringWorkaround(false);
      LineMetrics lineMetrics1 = mock(LineMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(lineMetrics1).getAscent();
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(lineMetrics1).when(fontMetrics1).getLineMetrics(anyString() , any(java.awt.Graphics.class));
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics1).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(textAnchor1).isTop();
      textFragment0.calculateBaselineOffset(graphics2D1, textAnchor1);
      TextUtils.setUseFontMetricsGetStringBounds(false);
      textFragment0.getBaselineOffset();
      textFragment0.getBaselineOffset();
      textFragment0.getPaint();
      FontMetrics fontMetrics2 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics2).getAscent();
      doReturn(0).when(fontMetrics2).getHeight();
      doReturn(0).when(fontMetrics2).stringWidth(anyString());
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(textFragment0.DEFAULT_FONT, (Font) null).when(graphics2D2).getFont();
      doReturn(fontMetrics2).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      doReturn(fontRenderContext0).when(graphics2D2).getFontRenderContext();
      TextAnchor textAnchor2 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(textAnchor2).isBaseline();
      doReturn(false).when(textAnchor2).isBottom();
      doReturn(false).when(textAnchor2).isHalfAscent();
      doReturn(false).when(textAnchor2).isHorizontalCenter();
      doReturn(false).when(textAnchor2).isRight();
      doReturn(false).when(textAnchor2).isTop();
      doReturn(false).when(textAnchor2).isVerticalCenter();
      textFragment0.draw(graphics2D2, 0.0F, 0.0F, textAnchor2, 0.0F, 0.0F, 0.0F);
      textFragment0.getText();
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D3).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        textFragment0.calculateDimensions(graphics2D3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("u>");
      LineMetrics lineMetrics0 = mock(LineMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-537.0F)).when(lineMetrics0).getAscent();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(lineMetrics0).when(fontMetrics0).getLineMetrics(anyString() , any(java.awt.Graphics.class));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(textAnchor0).isTop();
      textFragment0.getPaint();
      textFragment0.getText();
      textFragment0.calculateBaselineOffset(graphics2D0, textAnchor0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      TextUtils.setUseDrawRotatedStringWorkaround(false);
      LineMetrics lineMetrics1 = mock(LineMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(lineMetrics1).getAscent();
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(lineMetrics1).when(fontMetrics1).getLineMetrics(anyString() , any(java.awt.Graphics.class));
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics1).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(textAnchor1).isTop();
      textFragment0.calculateBaselineOffset(graphics2D1, textAnchor1);
      TextUtils.setUseFontMetricsGetStringBounds(false);
      textFragment0.getBaselineOffset();
      textFragment0.getBaselineOffset();
      textFragment0.getPaint();
      FontMetrics fontMetrics2 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics2).getAscent();
      doReturn(0).when(fontMetrics2).getHeight();
      doReturn(0).when(fontMetrics2).stringWidth(anyString());
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(textFragment0.DEFAULT_FONT, (Font) null).when(graphics2D2).getFont();
      doReturn(fontMetrics2).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      doReturn(fontRenderContext0).when(graphics2D2).getFontRenderContext();
      TextAnchor textAnchor2 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(textAnchor2).isBaseline();
      doReturn(false).when(textAnchor2).isBottom();
      doReturn(false).when(textAnchor2).isHalfAscent();
      doReturn(false).when(textAnchor2).isHorizontalCenter();
      doReturn(false).when(textAnchor2).isRight();
      doReturn(false).when(textAnchor2).isTop();
      doReturn(false).when(textAnchor2).isVerticalCenter();
      textFragment0.draw(graphics2D2, 0.0F, 0.0F, textAnchor2, 0.0F, 0.0F, 0.0F);
      textFragment0.getText();
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D3).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        textFragment0.calculateDimensions(graphics2D3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("u>");
      LineMetrics lineMetrics0 = mock(LineMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(lineMetrics0).getAscent();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(lineMetrics0).when(fontMetrics0).getLineMetrics(anyString() , any(java.awt.Graphics.class));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(textAnchor0).isHalfAscent();
      doReturn(false).when(textAnchor0).isTop();
      textFragment0.getPaint();
      textFragment0.getText();
      textFragment0.calculateBaselineOffset(graphics2D0, textAnchor0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      TextUtils.setUseDrawRotatedStringWorkaround(false);
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((LineMetrics) null).when(fontMetrics1).getLineMetrics(anyString() , any(java.awt.Graphics.class));
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics1).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(textAnchor1).isBottom();
      doReturn(false).when(textAnchor1).isHalfAscent();
      doReturn(false).when(textAnchor1).isTop();
      doReturn(false).when(textAnchor1).isVerticalCenter();
      textFragment0.calculateBaselineOffset(graphics2D1, textAnchor1);
      TextUtils.setUseFontMetricsGetStringBounds(false);
      textFragment0.getBaselineOffset();
      textFragment0.getBaselineOffset();
      textFragment0.getPaint();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Font) null).when(graphics2D2).getFont();
      doReturn((FontMetrics) null).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      doReturn((FontRenderContext) null).when(graphics2D2).getFontRenderContext();
      TextAnchor textAnchor2 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textFragment0.draw(graphics2D2, 0.0F, 0.0F, textAnchor2, 0.0F, 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      TextFragment textFragment0 = new TextFragment("...", font0);
      Paint paint0 = textFragment0.getPaint();
      textFragment0.getText();
      textFragment0.getPaint();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-1955029927)).when(fontMetrics0).getAscent();
      doReturn(3785).when(fontMetrics0).getHeight();
      doReturn((-1955029927)).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      textFragment0.calculateDimensions(graphics2D0);
      TextFragment textFragment1 = new TextFragment("Size2D[width=", font0, paint0, (-2484.88F));
      textFragment0.equals(textFragment1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      TextFragment textFragment0 = new TextFragment("...", font0);
      Paint paint0 = textFragment0.getPaint();
      textFragment0.getText();
      textFragment0.getPaint();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-1610612734)).when(fontMetrics0).getAscent();
      doReturn((-1610612734)).when(fontMetrics0).getHeight();
      doReturn(2930).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      textFragment0.calculateDimensions(graphics2D0);
      TextFragment textFragment1 = new TextFragment("Size2D[width=", font0, paint0, (-2484.88F));
      textFragment0.equals(textFragment1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      TextFragment textFragment0 = new TextFragment("G[sb=TT", font0, color0);
      textFragment0.getBaselineOffset();
      textFragment0.hashCode();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      doReturn((AffineTransform) null).when(fontRenderContext0).getTransform();
      doReturn(false).when(fontRenderContext0).isTransformed();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(font0, (Font) null).when(graphics2D0).getFont();
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      doReturn(fontRenderContext0, (FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      doReturn((AffineTransform) null).when(graphics2D0).getTransform();
      LineMetrics lineMetrics0 = mock(LineMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(lineMetrics0).getAscent();
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(lineMetrics0).when(fontMetrics1).getLineMetrics(anyString() , any(java.awt.Graphics.class));
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics1).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(textAnchor0).isTop();
      textFragment0.getFont();
      textFragment0.calculateBaselineOffset(graphics2D1, textAnchor0);
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(textAnchor1).isBaseline();
      doReturn(false).when(textAnchor1).isBottom();
      doReturn(false).when(textAnchor1).isHalfAscent();
      doReturn(false).when(textAnchor1).isHorizontalCenter();
      doReturn(false).when(textAnchor1).isRight();
      doReturn(false).when(textAnchor1).isTop();
      doReturn(false).when(textAnchor1).isVerticalCenter();
      // Undeclared exception!
      try { 
        textFragment0.draw(graphics2D0, 0.0F, (-1.0F), textAnchor1, 0.0F, 0.0F, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      TextFragment textFragment0 = new TextFragment("...", font0);
      Paint paint0 = textFragment0.getPaint();
      textFragment0.getText();
      textFragment0.getPaint();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      textFragment0.calculateDimensions(graphics2D0);
      TextFragment textFragment1 = new TextFragment("Size2D[width=", font0, paint0, (-2484.88F));
      textFragment0.equals(textFragment1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      TextFragment textFragment0 = new TextFragment("ABCxyz", font0, color0);
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      textFragment0.hashCode();
      textFragment0.calculateDimensions(graphics2D0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      TextFragment textFragment0 = new TextFragment("(seWs", font0, color0, (-666.5084F));
      textFragment0.getBaselineOffset();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      TextFragment textFragment0 = null;
      try {
        textFragment0 = new TextFragment((String) null, font0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      TextFragment textFragment0 = new TextFragment("8IsjSu^m0", font0, color0, 1.0F);
      textFragment0.hashCode();
      TextUtils.setDrawStringsWithFontAttributes(true);
      textFragment0.getBaselineOffset();
      textFragment0.getBaselineOffset();
      textFragment0.hashCode();
      textFragment0.getPaint();
      textFragment0.getBaselineOffset();
      textFragment0.getFont();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      TextFragment textFragment0 = null;
      try {
        textFragment0 = new TextFragment(",w.tMss<)L._RS", font0, (Paint) null, 2830.6807F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("v&KR+'|SiD");
      textFragment0.getText();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      TextFragment textFragment0 = new TextFragment("", font0);
      textFragment0.getText();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("lazR=<%O`|-&[4.hA");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Font) null).when(graphics2D0).getFont();
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      doReturn((FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textFragment0.draw(graphics2D0, 980.48914F, 0.0F, textAnchor0, 0.0F, 0.0F, 980.48914F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      TextFragment textFragment0 = null;
      try {
        textFragment0 = new TextFragment("dk~R}1Es fjWWqEa", (Font) null, color0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextFragment textFragment0 = null;
      try {
        textFragment0 = new TextFragment("TextAnchor.HALF_ASCENT_RIGHT", (Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("Serif");
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(textFragment0.DEFAULT_FONT).when(graphics2D0).getFont();
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      doReturn(fontRenderContext0).when(graphics2D0).getFontRenderContext();
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(textAnchor0).isBaseline();
      doReturn(false).when(textAnchor0).isBottom();
      doReturn(false).when(textAnchor0).isHalfAscent();
      doReturn(false).when(textAnchor0).isHorizontalCenter();
      doReturn(false).when(textAnchor0).isRight();
      doReturn(false).when(textAnchor0).isTop();
      doReturn(false).when(textAnchor0).isVerticalCenter();
      textFragment0.draw(graphics2D0, 0.0F, 0.0F, textAnchor0, 1711.6766F, 0.0F, 0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextFragment textFragment0 = null;
      try {
        textFragment0 = new TextFragment((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "TFNNEWU.=Eol";
      Font font0 = TextFragment.DEFAULT_FONT;
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(12, font0.getSize());
      assertEquals("Serif", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertNotNull(font0);
      
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      TextFragment textFragment0 = new TextFragment("TFNNEWU.=Eol", font0, color0, (-686.3528F));
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(12, font0.getSize());
      assertEquals("Serif", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals((-686.3528F), textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("TFNNEWU.=Eol", textFragment0.getText());
      assertNotNull(textFragment0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Font) null).when(graphics2D0).getFont();
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      doReturn((FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      float float0 = (-1.0F);
      // Undeclared exception!
      try { 
        textFragment0.draw(graphics2D0, (-686.3528F), (-686.3528F), textAnchor0, 1.0F, (-1.0F), (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("M|[|7wlm;l!6x^M#='");
      assertEquals("M|[|7wlm;l!6x^M#='", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertNotNull(textFragment0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Font) null).when(graphics2D0).getFont();
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      doReturn((FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textFragment0.draw(graphics2D0, 0.0F, 0.0F, textAnchor0, (-654.33F), 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertNotNull(font0);
      
      TextFragment textFragment0 = new TextFragment("", font0);
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertEquals("", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertNotNull(textFragment0);
      
      TextUtils.setUseFontMetricsGetStringBounds(true);
      Color color0 = (Color)textFragment0.getPaint();
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertEquals("", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      float float0 = textFragment0.getBaselineOffset();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertEquals("", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      
      float float1 = textFragment0.getBaselineOffset();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertEquals("", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals(float1, float0, 0.01F);
      
      Graphics2D graphics2D0 = null;
      TextAnchor textAnchor0 = null;
      float float2 = (-1982.9493F);
      // Undeclared exception!
      try { 
        textFragment0.draw((Graphics2D) null, (-1445.67F), 0.0F, (TextAnchor) null, 1464.8016F, (-1982.9493F), 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "F-/ER2%V2pr>ogFg$-n";
      Font font0 = TextFragment.DEFAULT_FONT;
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertFalse(font0.isItalic());
      assertNotNull(font0);
      
      TextFragment textFragment0 = null;
      try {
        textFragment0 = new TextFragment("F-/ER2%V2pr>ogFg$-n", font0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertNotNull(font0);
      
      TextFragment textFragment0 = null;
      try {
        textFragment0 = new TextFragment("", font0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertNotNull(font0);
      
      TextFragment textFragment0 = new TextFragment("Size2D[width=", font0);
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("Size2D[width=", textFragment0.getText());
      assertNotNull(textFragment0);
      
      Font font1 = textFragment0.getFont();
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("Size2D[width=", textFragment0.getText());
      assertEquals(12, font1.getSize());
      assertEquals("Serif", font1.getName());
      assertTrue(font1.isPlain());
      assertEquals(0, font1.getStyle());
      assertFalse(font1.isItalic());
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.isBold());
      assertEquals(12.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isTransformed());
      assertNotNull(font1);
      assertSame(font0, font1);
      assertSame(font1, font0);
      
      boolean boolean0 = textFragment0.equals(font1);
      assertFalse(boolean0);
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("Size2D[width=", textFragment0.getText());
      assertEquals(12, font1.getSize());
      assertEquals("Serif", font1.getName());
      assertTrue(font1.isPlain());
      assertEquals(0, font1.getStyle());
      assertFalse(font1.isItalic());
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.isBold());
      assertEquals(12.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isTransformed());
      assertSame(font0, font1);
      assertSame(font1, font0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("Null 'paint' argument.");
      assertEquals("Null 'paint' argument.", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertNotNull(textFragment0);
      
      float float0 = textFragment0.getBaselineOffset();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("Null 'paint' argument.", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      
      Color color0 = (Color)textFragment0.getPaint();
      assertEquals("Null 'paint' argument.", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        textFragment0.calculateDimensions(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertNotNull(font0);
      
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      TextFragment textFragment0 = new TextFragment("TextAnchor.TOP_LEFT", font0, color0);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("TextAnchor.TOP_LEFT", textFragment0.getText());
      assertNotNull(textFragment0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        textFragment0.calculateDimensions(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("");
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("", textFragment0.getText());
      assertNotNull(textFragment0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textFragment0.calculateBaselineOffset(graphics2D0, textAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertNotNull(font0);
      
      TextFragment textFragment0 = new TextFragment("", font0);
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("", textFragment0.getText());
      assertNotNull(textFragment0);
      
      boolean boolean0 = textFragment0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("", textFragment0.getText());
      
      TextUtils.setUseDrawRotatedStringWorkaround(false);
      Color color0 = (Color)textFragment0.getPaint();
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("", textFragment0.getText());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      TextUtils.setDrawStringsWithFontAttributes(true);
      // Undeclared exception!
      try { 
        textFragment0.calculateBaselineOffset(graphics2D0, textAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertEquals("Serif", font0.getName());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertNotNull(font0);
      
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      TextFragment textFragment0 = new TextFragment("org.jfree.chart.ui.Size2D", font0, color0);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertEquals("Serif", font0.getName());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals("org.jfree.chart.ui.Size2D", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertNotNull(textFragment0);
      
      Color color1 = (Color)textFragment0.getPaint();
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertEquals("Serif", font0.getName());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals("org.jfree.chart.ui.Size2D", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertNotNull(color1);
      assertSame(color0, color1);
      assertSame(color1, color0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("ua`=X[,_a@e&6ho b<4");
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertNotNull(textFragment0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        textFragment0.calculateDimensions(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertNotNull(font0);
      
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      TextFragment textFragment0 = new TextFragment("&SU$$LC", font0, color0);
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals("&SU$$LC", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertNotNull(textFragment0);
      
      // Undeclared exception!
      try { 
        textFragment0.calculateDimensions((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("EZ-19>N?Lsq87Y~[0");
      assertEquals("EZ-19>N?Lsq87Y~[0", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertNotNull(textFragment0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("3M3v:S\"");
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("3M3v:S\"", textFragment0.getText());
      assertNotNull(textFragment0);
      
      boolean boolean0 = true;
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((LineMetrics) null).when(fontMetrics0).getLineMetrics(anyString() , any(java.awt.Graphics.class));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(textAnchor0).isBottom();
      doReturn(false).when(textAnchor0).isHalfAscent();
      doReturn(false).when(textAnchor0).isTop();
      doReturn(false).when(textAnchor0).isVerticalCenter();
      float float0 = textFragment0.calculateBaselineOffset(graphics2D0, textAnchor0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("3M3v:S\"", textFragment0.getText());
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Font) null).when(graphics2D1).getFont();
      doReturn((FontMetrics) null).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      doReturn((FontRenderContext) null).when(graphics2D1).getFontRenderContext();
      TextUtils.setUseDrawRotatedStringWorkaround(true);
      float float1 = 1698.0781F;
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textFragment0.draw(graphics2D1, 1698.0781F, 1698.0781F, textAnchor1, 1698.0781F, 1698.0781F, 1698.0781F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals(12, font0.getSize());
      assertEquals("Serif", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertNotNull(font0);
      
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      float float0 = 2.0F;
      TextFragment textFragment0 = new TextFragment("@D", font0, color0, 2.0F);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals(12, font0.getSize());
      assertEquals("Serif", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals("@D", textFragment0.getText());
      assertEquals(2.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertNotNull(textFragment0);
      
      TextFragment textFragment1 = new TextFragment("@D", font0, color0);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals(12, font0.getSize());
      assertEquals("Serif", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(0.0F, textFragment1.getBaselineOffset(), 0.01F);
      assertEquals("@D", textFragment1.getText());
      assertNotNull(textFragment1);
      assertTrue(textFragment1.equals((Object)textFragment0));
      
      boolean boolean0 = textFragment0.equals(textFragment1);
      assertTrue(boolean0);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals(12, font0.getSize());
      assertEquals("Serif", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals("@D", textFragment0.getText());
      assertEquals(2.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals(0.0F, textFragment1.getBaselineOffset(), 0.01F);
      assertEquals("@D", textFragment1.getText());
      assertNotSame(textFragment0, textFragment1);
      assertNotSame(textFragment1, textFragment0);
      assertTrue(textFragment0.equals((Object)textFragment1));
      assertTrue(textFragment1.equals((Object)textFragment0));
      
      TextFragment textFragment2 = new TextFragment("@D", textFragment0.DEFAULT_FONT, color0);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals(12, font0.getSize());
      assertEquals("Serif", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals("@D", textFragment0.getText());
      assertEquals(2.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("@D", textFragment2.getText());
      assertEquals(0.0F, textFragment2.getBaselineOffset(), 0.01F);
      assertNotNull(textFragment2);
      assertTrue(textFragment0.equals((Object)textFragment1));
      assertTrue(textFragment2.equals((Object)textFragment0));
      assertTrue(textFragment2.equals((Object)textFragment1));
      
      TextUtils.setUseDrawRotatedStringWorkaround(true);
      boolean boolean1 = textFragment0.equals(textFragment2);
      assertTrue(boolean1);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals(12, font0.getSize());
      assertEquals("Serif", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals("@D", textFragment0.getText());
      assertEquals(2.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("@D", textFragment2.getText());
      assertEquals(0.0F, textFragment2.getBaselineOffset(), 0.01F);
      assertNotSame(textFragment0, textFragment2);
      assertNotSame(textFragment0, textFragment1);
      assertNotSame(textFragment2, textFragment1);
      assertNotSame(textFragment2, textFragment0);
      assertTrue(textFragment0.equals((Object)textFragment2));
      assertTrue(textFragment0.equals((Object)textFragment1));
      assertTrue(textFragment2.equals((Object)textFragment0));
      assertTrue(textFragment2.equals((Object)textFragment1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = textFragment1.equals(font0);
      assertFalse(boolean2);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals(12, font0.getSize());
      assertEquals("Serif", font0.getName());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(0.0F, textFragment1.getBaselineOffset(), 0.01F);
      assertEquals("@D", textFragment1.getText());
      assertNotSame(textFragment1, textFragment0);
      assertNotSame(textFragment1, textFragment2);
      assertTrue(textFragment1.equals((Object)textFragment2));
      assertTrue(textFragment1.equals((Object)textFragment0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textFragment1.calculateBaselineOffset(graphics2D0, textAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertNotNull(font0);
      
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      TextFragment textFragment0 = new TextFragment("", font0, color0);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals("", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertNotNull(textFragment0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      textFragment0.draw(graphics2D0, 1.0F, (-607.38F), textAnchor0, (-86.9721F), (-1738.3038F), 1.0F);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals("", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      
      textFragment0.hashCode();
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals("", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      
      String string0 = textFragment0.getText();
      assertEquals("", string0);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals("", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertNotNull(string0);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        textFragment0.calculateDimensions(graphics2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertNotNull(font0);
      
      TextFragment textFragment0 = new TextFragment("...", font0);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("...", textFragment0.getText());
      assertNotNull(textFragment0);
      
      Color color0 = (Color)textFragment0.getPaint();
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("...", textFragment0.getText());
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      String string0 = textFragment0.getText();
      assertEquals("...", string0);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("...", textFragment0.getText());
      assertNotNull(string0);
      
      Color color1 = (Color)textFragment0.getPaint();
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("...", textFragment0.getText());
      assertEquals(0, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getBlue());
      assertNotNull(color1);
      assertSame(color1, color0);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      Size2D size2D0 = textFragment0.calculateDimensions(graphics2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("...", textFragment0.getText());
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      
      TextFragment textFragment1 = new TextFragment("Size2D[width=", font0, color0, (-2484.88F));
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("...", textFragment0.getText());
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals("Size2D[width=", textFragment1.getText());
      assertEquals((-2484.88F), textFragment1.getBaselineOffset(), 0.01F);
      assertNotNull(textFragment1);
      assertFalse(textFragment1.equals((Object)textFragment0));
      
      boolean boolean0 = textFragment0.equals(textFragment1);
      assertFalse(boolean0);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals("Serif", font0.getName());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("...", textFragment0.getText());
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals("Size2D[width=", textFragment1.getText());
      assertEquals((-2484.88F), textFragment1.getBaselineOffset(), 0.01F);
      assertNotSame(textFragment0, textFragment1);
      assertSame(color0, color1);
      assertNotSame(textFragment1, textFragment0);
      assertFalse(textFragment0.equals((Object)textFragment1));
      assertFalse(textFragment1.equals((Object)textFragment0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertNotNull(font0);
      
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      TextFragment textFragment0 = null;
      try {
        textFragment0 = new TextFragment((String) null, font0, color0, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertNotNull(font0);
      
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      TextFragment textFragment0 = new TextFragment("Iu9Uj_C5 /CcXzi@", font0, color0);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("Iu9Uj_C5 /CcXzi@", textFragment0.getText());
      assertNotNull(textFragment0);
      
      float float0 = textFragment0.getBaselineOffset();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("Iu9Uj_C5 /CcXzi@", textFragment0.getText());
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((LineMetrics) null).when(fontMetrics0).getLineMetrics(anyString() , any(java.awt.Graphics.class));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(textAnchor0).isBottom();
      doReturn(false).when(textAnchor0).isHalfAscent();
      doReturn(false).when(textAnchor0).isTop();
      doReturn(false).when(textAnchor0).isVerticalCenter();
      Font font1 = textFragment0.getFont();
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("Iu9Uj_C5 /CcXzi@", textFragment0.getText());
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isBold());
      assertFalse(font1.isTransformed());
      assertEquals("Serif", font1.getName());
      assertEquals(12.0F, font1.getSize2D(), 0.01F);
      assertEquals(12, font1.getSize());
      assertFalse(font1.isItalic());
      assertTrue(font1.isPlain());
      assertEquals(0, font1.getStyle());
      assertNotNull(font1);
      assertSame(font0, font1);
      assertSame(font1, font0);
      
      float float1 = textFragment0.calculateBaselineOffset(graphics2D0, textAnchor0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("Iu9Uj_C5 /CcXzi@", textFragment0.getText());
      assertSame(font0, font1);
      assertEquals(float1, float0, 0.01F);
      
      String string0 = textFragment0.getText();
      assertEquals("Iu9Uj_C5 /CcXzi@", string0);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("Iu9Uj_C5 /CcXzi@", textFragment0.getText());
      assertNotNull(string0);
      assertSame(font0, font1);
      
      textFragment0.hashCode();
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("Iu9Uj_C5 /CcXzi@", textFragment0.getText());
      assertSame(font0, font1);
      
      String string1 = textFragment0.getText();
      assertEquals("Iu9Uj_C5 /CcXzi@", string1);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("Iu9Uj_C5 /CcXzi@", textFragment0.getText());
      assertNotNull(string1);
      assertSame(font0, font1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertNotNull(font0);
      
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      TextFragment textFragment0 = new TextFragment("G[sb=TT", font0, color0);
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("G[sb=TT", textFragment0.getText());
      assertNotNull(textFragment0);
      
      float float0 = textFragment0.getBaselineOffset();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("G[sb=TT", textFragment0.getText());
      
      textFragment0.hashCode();
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("G[sb=TT", textFragment0.getText());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Font) null).when(graphics2D0).getFont();
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      doReturn((FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((LineMetrics) null).when(fontMetrics0).getLineMetrics(anyString() , any(java.awt.Graphics.class));
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(textAnchor0).isBottom();
      doReturn(false).when(textAnchor0).isHalfAscent();
      doReturn(false).when(textAnchor0).isTop();
      doReturn(false).when(textAnchor0).isVerticalCenter();
      float float1 = textFragment0.calculateBaselineOffset(graphics2D1, textAnchor0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Serif", font0.getName());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals("G[sb=TT", textFragment0.getText());
      assertEquals(float1, float0, 0.01F);
      
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textFragment0.draw(graphics2D0, 0.0F, (-1.0F), textAnchor1, 0.0F, 0.0F, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      TextFragment textFragment0 = new TextFragment("", font0);
      textFragment0.hashCode();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textFragment0.draw(graphics2D0, 0.0F, 1.0F, (TextAnchor) null, 0.0F, (-898.205F), 0.0);
      textFragment0.hashCode();
      float float0 = textFragment0.getBaselineOffset();
      assertEquals(0.0F, float0, 0.01F);
      
      textFragment0.getFont();
      textFragment0.getFont();
      textFragment0.hashCode();
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextFragment textFragment0 = new TextFragment("u>");
      LineMetrics lineMetrics0 = mock(LineMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-1109.36F)).when(lineMetrics0).getAscent();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(lineMetrics0).when(fontMetrics0).getLineMetrics(anyString() , any(java.awt.Graphics.class));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(textAnchor0).isTop();
      textFragment0.getPaint();
      textFragment0.getText();
      textFragment0.calculateBaselineOffset(graphics2D0, textAnchor0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      TextUtils.setUseDrawRotatedStringWorkaround(false);
      LineMetrics lineMetrics1 = mock(LineMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(lineMetrics1).getAscent();
      doReturn(0.0F).when(lineMetrics1).getDescent();
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(lineMetrics1).when(fontMetrics1).getLineMetrics(anyString() , any(java.awt.Graphics.class));
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics1).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(textAnchor1).isHalfAscent();
      doReturn(false).when(textAnchor1).isTop();
      doReturn(true).when(textAnchor1).isVerticalCenter();
      textFragment0.calculateBaselineOffset(graphics2D1, textAnchor1);
      TextUtils.setUseFontMetricsGetStringBounds(false);
      textFragment0.getBaselineOffset();
      textFragment0.getBaselineOffset();
      textFragment0.getPaint();
      textFragment0.getPaint();
      Font font0 = TextFragment.DEFAULT_FONT;
      FontMetrics fontMetrics2 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics2).getAscent();
      doReturn(0).when(fontMetrics2).getHeight();
      doReturn(0).when(fontMetrics2).stringWidth(anyString());
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(font0, (Font) null).when(graphics2D2).getFont();
      doReturn(fontMetrics2).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      doReturn(fontRenderContext0).when(graphics2D2).getFontRenderContext();
      TextAnchor textAnchor2 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(textAnchor2).isBaseline();
      doReturn(false).when(textAnchor2).isBottom();
      doReturn(false).when(textAnchor2).isHalfAscent();
      doReturn(false).when(textAnchor2).isHorizontalCenter();
      doReturn(false).when(textAnchor2).isRight();
      doReturn(false).when(textAnchor2).isTop();
      doReturn(false).when(textAnchor2).isVerticalCenter();
      // Undeclared exception!
      try { 
        textFragment0.draw(graphics2D2, 0.0F, 0.0F, textAnchor2, 0.0F, 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }
}
