/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:36:12 GMT 2023
 */

package org.jfree.chart.urls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.urls.StandardPieURLGenerator;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardPieURLGenerator_ESTest extends StandardPieURLGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = null;
      try {
        standardPieURLGenerator0 = new StandardPieURLGenerator("=gUx", (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'categoryParamName' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = null;
      try {
        standardPieURLGenerator0 = new StandardPieURLGenerator((String) null, "org.jfree.data.general.DefaultPieDatasetTest");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = null;
      try {
        standardPieURLGenerator0 = new StandardPieURLGenerator((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("id", "id", "id");
      StandardPieURLGenerator standardPieURLGenerator1 = new StandardPieURLGenerator("id", "id", "id");
      boolean boolean0 = standardPieURLGenerator0.equals(standardPieURLGenerator1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("id", "id", "id");
      StandardPieURLGenerator standardPieURLGenerator1 = new StandardPieURLGenerator("id", "id");
      boolean boolean0 = standardPieURLGenerator0.equals(standardPieURLGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("A-ek4l wwm:zWF:");
      StandardPieURLGenerator standardPieURLGenerator1 = new StandardPieURLGenerator("6E0sK]=ly*", "A-ek4l wwm:zWF:?A-ek4l wwm:zWF:=java.lang.String%400000000006&amp;pieIndex=-530");
      boolean boolean0 = standardPieURLGenerator0.equals(standardPieURLGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("A-ek4l wwm:zWF:");
      StandardPieURLGenerator standardPieURLGenerator1 = new StandardPieURLGenerator("A-ek4l wwm:zWF:", "A-ek4l wwm:zWF:");
      boolean boolean0 = standardPieURLGenerator0.equals(standardPieURLGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("h%O^T5`63S-^?+=<");
      boolean boolean0 = standardPieURLGenerator0.equals(standardPieURLGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator();
      Object object0 = new Object();
      boolean boolean0 = standardPieURLGenerator0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("J94hIHK", "[=^(w|r>_mJ[X", (String) null);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      String string0 = standardPieURLGenerator0.generateURL(defaultKeyedValuesDataset0, "[=^(w|r>_mJ[X", 3);
      assertEquals("J94hIHK?[=^(w|r>_mJ[X=java.lang.String%400000000005", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("h%O^T5`63S-^?+=<");
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      String string0 = standardPieURLGenerator0.generateURL(defaultKeyedValuesDataset0, "h%O^T5`63S-^?+=<", 2855);
      assertEquals("h%O^T5`63S-^?+=<&amp;category=java.lang.String%400000000005&amp;pieIndex=2855", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      // Undeclared exception!
      try { 
        standardPieURLGenerator0.generateURL(defaultKeyedValuesDataset0, (Comparable) null, (-104));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
