/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:32:04 GMT 2023
 */

package org.jfree.chart.urls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeriesURLGenerator_ESTest extends TimeSeriesURLGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "seriesParameterName", "", "");
      assertEquals("", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("seriesParameterName", timeSeriesURLGenerator0.getPrefix());
      assertEquals("", timeSeriesURLGenerator0.getItemParameterName());
      assertNotNull(timeSeriesURLGenerator0);
      
      String string0 = timeSeriesURLGenerator0.getItemParameterName();
      assertEquals("", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("seriesParameterName", timeSeriesURLGenerator0.getPrefix());
      assertEquals("", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("", string0);
      assertNotNull(string0);
      
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset3 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset4 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<MockDateFormat> comparable0 = (Comparable<MockDateFormat>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "!7]s+_8+='r'k", "E\"SlNa9=,P:&6", "!7]s+_8+='r'k");
      assertEquals("!7]s+_8+='r'k", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("E\"SlNa9=,P:&6", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("!7]s+_8+='r'k", timeSeriesURLGenerator0.getPrefix());
      assertNotNull(timeSeriesURLGenerator0);
      
      TimeSeriesURLGenerator timeSeriesURLGenerator1 = new TimeSeriesURLGenerator();
      assertEquals("item", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator1.getPrefix());
      assertEquals("series", timeSeriesURLGenerator1.getSeriesParameterName());
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(timeSeriesURLGenerator1);
      
      // Undeclared exception!
      try { 
        timeSeriesURLGenerator0.equals(timeSeriesURLGenerator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.urls.TimeSeriesURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertNotNull(timeSeriesURLGenerator0);
      
      Comparable<MockSimpleDateFormat> comparable0 = (Comparable<MockSimpleDateFormat>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0).when(xYDataset0).getSeriesKey(anyInt());
      doReturn(1.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      String string0 = timeSeriesURLGenerator0.generateURL(xYDataset0, 0, 1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", string0);
      assertNotNull(string0);
      
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM").when(xYDataset1).getSeriesKey(anyInt());
      doReturn((double)1).when(xYDataset1).getXValue(anyInt() , anyInt());
      String string1 = timeSeriesURLGenerator0.generateURL(xYDataset1, 0, 0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html?series=java.lang.String%400000000003&amp;item=1%2F1%2F70+12%3A00+AM", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = timeSeriesURLGenerator0.equals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM");
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertFalse(boolean0);
      
      boolean boolean1 = timeSeriesURLGenerator0.equals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM");
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = timeSeriesURLGenerator0.getItemParameterName();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("item", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = timeSeriesURLGenerator0.getSeriesParameterName();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = timeSeriesURLGenerator0.getItemParameterName();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("item", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = timeSeriesURLGenerator0.getItemParameterName();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("item", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("item").when(xYDataset2).getSeriesKey(anyInt());
      doReturn(3114.0).when(xYDataset2).getXValue(anyInt() , anyInt());
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      String string6 = timeSeriesURLGenerator0.generateURL(xYDataset2, 0, 3);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html?series=java.lang.String%400000000004&amp;item=1%2F1%2F70+12%3A00+AM", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = timeSeriesURLGenerator0.getPrefix();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = timeSeriesURLGenerator0.getItemParameterName();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("item", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      
      boolean boolean2 = timeSeriesURLGenerator0.equals("index.html?series=java.lang.String%400000000003&amp;item=1%2F1%2F70+12%3A00+AM");
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      SimpleDateFormat simpleDateFormat1 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(simpleDateFormat1, simpleDateFormat0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toPattern());
      assertTrue(simpleDateFormat1.isLenient());
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat1);
      
      String string9 = timeSeriesURLGenerator0.getSeriesParameterName();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      
      SimpleDateFormat simpleDateFormat2 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(simpleDateFormat2, simpleDateFormat0);
      assertNotSame(simpleDateFormat2, simpleDateFormat1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertTrue(simpleDateFormat2.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat2.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat2.toLocalizedPattern());
      assertTrue(simpleDateFormat2.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat2.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat2);
      
      String string10 = timeSeriesURLGenerator0.getItemParameterName();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("item", string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertNotNull(string10);
      
      String string11 = timeSeriesURLGenerator0.getPrefix();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", string11);
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string4));
      assertNotNull(string11);
      
      TimeSeriesURLGenerator timeSeriesURLGenerator1 = new TimeSeriesURLGenerator(simpleDateFormat1, ")Mpskgb8Idz#yL,", "item", "");
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toPattern());
      assertTrue(simpleDateFormat1.isLenient());
      assertEquals("item", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals(")Mpskgb8Idz#yL,", timeSeriesURLGenerator1.getPrefix());
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat2));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(timeSeriesURLGenerator1);
      
      boolean boolean3 = timeSeriesURLGenerator0.equals(timeSeriesURLGenerator0);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertTrue(boolean3);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        timeSeriesURLGenerator1.generateURL((XYDataset) null, 3, 29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.urls.TimeSeriesURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "=HQZ<Eo-ks-5^&", "", "key");
      assertEquals("=HQZ<Eo-ks-5^&", timeSeriesURLGenerator0.getPrefix());
      assertEquals("key", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("", timeSeriesURLGenerator0.getSeriesParameterName());
      assertNotNull(timeSeriesURLGenerator0);
      
      String string0 = timeSeriesURLGenerator0.getSeriesParameterName();
      assertEquals("=HQZ<Eo-ks-5^&", timeSeriesURLGenerator0.getPrefix());
      assertEquals("key", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = timeSeriesURLGenerator0.getItemParameterName();
      assertEquals("=HQZ<Eo-ks-5^&", timeSeriesURLGenerator0.getPrefix());
      assertEquals("key", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("key", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        timeSeriesURLGenerator0.getDateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.urls.TimeSeriesURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertNotNull(timeSeriesURLGenerator0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0).when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
      
      String string0 = timeSeriesURLGenerator0.generateURL(xYDataset0, 2448, 2448);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", string0);
      assertNotNull(string0);
      
      String string1 = timeSeriesURLGenerator0.getPrefix();
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("index.html", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TimeSeriesURLGenerator timeSeriesURLGenerator1 = new TimeSeriesURLGenerator(simpleDateFormat0, "index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", "R@$rSuAJ#~6<4M+]0", "N= 3pb*u}_p7_aMER.");
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("N= 3pb*u}_p7_aMER.", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(timeSeriesURLGenerator1);
      
      boolean boolean0 = timeSeriesURLGenerator0.equals(timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("N= 3pb*u}_p7_aMER.", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertFalse(boolean0);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      
      String string2 = timeSeriesURLGenerator1.getSeriesParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("N= 3pb*u}_p7_aMER.", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("R@$rSuAJ#~6<4M+]0", string2);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      SimpleDateFormat simpleDateFormat1 = (SimpleDateFormat)timeSeriesURLGenerator1.getDateFormat();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertNotSame(simpleDateFormat1, simpleDateFormat0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("N= 3pb*u}_p7_aMER.", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toPattern());
      assertTrue(simpleDateFormat1.isLenient());
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat1);
      
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("N= 3pb*u}_p7_aMER.").when(xYDataset1).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset1).getXValue(anyInt() , anyInt());
      SimpleDateFormat simpleDateFormat2 = (SimpleDateFormat)timeSeriesURLGenerator1.getDateFormat();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat0, simpleDateFormat2);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertNotSame(simpleDateFormat2, simpleDateFormat0);
      assertNotSame(simpleDateFormat2, simpleDateFormat1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("N= 3pb*u}_p7_aMER.", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("M/d/yy h:mm a", simpleDateFormat2.toPattern());
      assertTrue(simpleDateFormat2.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat2.toLocalizedPattern());
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertTrue(simpleDateFormat2.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat2.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat2);
      
      String string3 = timeSeriesURLGenerator0.generateURL(xYDataset1, 1104, (-1));
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("index.html?series=java.lang.String%400000000004&amp;item=1%2F1%2F70+12%3A00+AM", string3);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      SimpleDateFormat simpleDateFormat3 = (SimpleDateFormat)timeSeriesURLGenerator1.getDateFormat();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat0, simpleDateFormat3);
      assertNotSame(simpleDateFormat0, simpleDateFormat2);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertNotSame(simpleDateFormat3, simpleDateFormat0);
      assertNotSame(simpleDateFormat3, simpleDateFormat1);
      assertNotSame(simpleDateFormat3, simpleDateFormat2);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("N= 3pb*u}_p7_aMER.", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toPattern());
      assertTrue(simpleDateFormat3.isLenient());
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat3);
      
      String string4 = timeSeriesURLGenerator0.getItemParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", string4);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = timeSeriesURLGenerator0.getPrefix();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("index.html", string5);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = timeSeriesURLGenerator1.getItemParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat0, simpleDateFormat3);
      assertNotSame(simpleDateFormat0, simpleDateFormat2);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("N= 3pb*u}_p7_aMER.", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("N= 3pb*u}_p7_aMER.", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat3));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(string6);
      
      SimpleDateFormat simpleDateFormat4 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat4, simpleDateFormat0);
      assertNotSame(simpleDateFormat4, simpleDateFormat1);
      assertNotSame(simpleDateFormat4, simpleDateFormat2);
      assertNotSame(simpleDateFormat4, simpleDateFormat3);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("M/d/yy h:mm a", simpleDateFormat4.toPattern());
      assertTrue(simpleDateFormat4.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat4.toLocalizedPattern());
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat3));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat4);
      
      SimpleDateFormat simpleDateFormat5 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat5, simpleDateFormat1);
      assertNotSame(simpleDateFormat5, simpleDateFormat2);
      assertNotSame(simpleDateFormat5, simpleDateFormat3);
      assertNotSame(simpleDateFormat5, simpleDateFormat0);
      assertNotSame(simpleDateFormat5, simpleDateFormat4);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat5.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat5.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat5.toPattern());
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat3));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat4));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat2));
      assertNotNull(simpleDateFormat5);
      
      String string7 = timeSeriesURLGenerator0.getItemParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", string7);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = timeSeriesURLGenerator1.getPrefix();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat0, simpleDateFormat3);
      assertNotSame(simpleDateFormat0, simpleDateFormat2);
      assertNotSame(simpleDateFormat0, simpleDateFormat4);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(simpleDateFormat0, simpleDateFormat5);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("N= 3pb*u}_p7_aMER.", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", string8);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat5));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat3));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat4));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(string8);
      
      String string9 = timeSeriesURLGenerator0.getItemParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", string9);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      
      String string10 = timeSeriesURLGenerator0.getSeriesParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", string10);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertNotNull(string10);
      
      Comparable<DateFormat> comparable1 = (Comparable<DateFormat>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(comparable1).when(xYDataset2).getSeriesKey(anyInt());
      doReturn(1534.770370023109).when(xYDataset2).getXValue(anyInt() , anyInt());
      String string11 = timeSeriesURLGenerator1.generateURL(xYDataset2, 0, (-2398));
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat0, simpleDateFormat3);
      assertNotSame(simpleDateFormat0, simpleDateFormat2);
      assertNotSame(simpleDateFormat0, simpleDateFormat4);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(simpleDateFormat0, simpleDateFormat5);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("N= 3pb*u}_p7_aMER.", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM&amp;R@$rSuAJ#~6<4M+]0=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000005&amp;N= 3pb*u}_p7_aMER.=1%2F1%2F70+12%3A00+AM", string11);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat5));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat3));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat4));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertNotNull(string11);
      
      String string12 = timeSeriesURLGenerator0.getSeriesParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", string12);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string9));
      assertNotNull(string12);
      
      XYDataset xYDataset3 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("index.html").when(xYDataset3).getSeriesKey(anyInt());
      doReturn((double)1104).when(xYDataset3).getXValue(anyInt() , anyInt());
      String string13 = timeSeriesURLGenerator1.generateURL(xYDataset3, (-718), (-1778));
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat0, simpleDateFormat3);
      assertNotSame(simpleDateFormat0, simpleDateFormat2);
      assertNotSame(simpleDateFormat0, simpleDateFormat4);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(simpleDateFormat0, simpleDateFormat5);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("N= 3pb*u}_p7_aMER.", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM&amp;R@$rSuAJ#~6<4M+]0=java.lang.String%400000000006&amp;N= 3pb*u}_p7_aMER.=1%2F1%2F70+12%3A00+AM", string13);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat5));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat3));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat4));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string6));
      assertNotNull(string13);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "Receiving events from a series that does not belong to this collection.";
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn("Receiving events from a series that does not belong to this collection.").when(dateFormat0).clone();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = null;
      try {
        timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "", "", "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.text.DateFormat
         //
         verifyException("org.jfree.chart.urls.TimeSeriesURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertNotNull(timeSeriesURLGenerator0);
      
      Comparable<Integer> comparable0 = (Comparable<Integer>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0).when(xYDataset0).getSeriesKey(anyInt());
      doReturn(Double.NaN).when(xYDataset0).getXValue(anyInt() , anyInt());
      String string0 = timeSeriesURLGenerator0.generateURL(xYDataset0, 0, (-1204));
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", string0);
      assertNotNull(string0);
      
      String string1 = timeSeriesURLGenerator0.getPrefix();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertNotNull(timeSeriesURLGenerator0);
      
      String string0 = timeSeriesURLGenerator0.getSeriesParameterName();
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("series", string0);
      assertNotNull(string0);
      
      boolean boolean0 = timeSeriesURLGenerator0.equals("series");
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertFalse(boolean0);
      
      String string1 = timeSeriesURLGenerator0.getSeriesParameterName();
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("series", string1);
      assertNotNull(string1);
      
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
      
      TimeSeriesURLGenerator timeSeriesURLGenerator1 = new TimeSeriesURLGenerator(dateFormat0, "", "", "]}Y<`B|OvN&`GO1,)");
      assertEquals("", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("", timeSeriesURLGenerator1.getPrefix());
      assertEquals("]}Y<`B|OvN&`GO1,)", timeSeriesURLGenerator1.getItemParameterName());
      assertNotNull(timeSeriesURLGenerator1);
      
      boolean boolean1 = timeSeriesURLGenerator0.equals(timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("", timeSeriesURLGenerator1.getPrefix());
      assertEquals("]}Y<`B|OvN&`GO1,)", timeSeriesURLGenerator1.getItemParameterName());
      assertFalse(boolean1);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(boolean1 == boolean0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      int int0 = 0;
      // Undeclared exception!
      try { 
        timeSeriesURLGenerator1.generateURL(xYDataset0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.urls.TimeSeriesURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "", "", "he6S MP3YY41$s4y(z");
      assertEquals("", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("", timeSeriesURLGenerator0.getPrefix());
      assertEquals("he6S MP3YY41$s4y(z", timeSeriesURLGenerator0.getItemParameterName());
      assertNotNull(timeSeriesURLGenerator0);
      
      String string0 = timeSeriesURLGenerator0.getPrefix();
      assertEquals("", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("", timeSeriesURLGenerator0.getPrefix());
      assertEquals("he6S MP3YY41$s4y(z", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertNotNull(timeSeriesURLGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset1).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset1).getXValue(anyInt() , anyInt());
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
      
      SimpleDateFormat simpleDateFormat1 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(simpleDateFormat1, simpleDateFormat0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toPattern());
      assertTrue(simpleDateFormat1.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toLocalizedPattern());
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat1);
      
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset2).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset2).getXValue(anyInt() , anyInt());
      String string0 = timeSeriesURLGenerator0.generateURL(xYDataset2, 3109, 0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", string0);
      assertNotNull(string0);
      
      String string1 = timeSeriesURLGenerator0.generateURL(xYDataset1, 1916, 0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = timeSeriesURLGenerator0.generateURL(xYDataset0, 0, 1916);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      SimpleDateFormat simpleDateFormat2 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(simpleDateFormat2, simpleDateFormat1);
      assertNotSame(simpleDateFormat2, simpleDateFormat0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertTrue(simpleDateFormat2.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat2.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat2.toPattern());
      assertTrue(simpleDateFormat2.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat2.equals((Object)simpleDateFormat1));
      assertNotNull(simpleDateFormat2);
      
      boolean boolean0 = timeSeriesURLGenerator0.equals(simpleDateFormat0);
      assertNotSame(simpleDateFormat0, simpleDateFormat2);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertFalse(boolean0);
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat1));
      
      SimpleDateFormat simpleDateFormat3 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(simpleDateFormat3, simpleDateFormat0);
      assertNotSame(simpleDateFormat3, simpleDateFormat1);
      assertNotSame(simpleDateFormat3, simpleDateFormat2);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toLocalizedPattern());
      assertTrue(simpleDateFormat3.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toPattern());
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat1));
      assertNotNull(simpleDateFormat3);
      
      TimeSeriesURLGenerator timeSeriesURLGenerator1 = new TimeSeriesURLGenerator(simpleDateFormat3, "index.html?item=1%2F1%2F70+12%3A00+AM", "index.html?item=1%2F1%2F70+12%3A00+AM", "E\"SlNa9=,P:&6");
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toLocalizedPattern());
      assertTrue(simpleDateFormat3.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toPattern());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("E\"SlNa9=,P:&6", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(timeSeriesURLGenerator1);
      
      boolean boolean1 = timeSeriesURLGenerator0.equals(timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat3, simpleDateFormat0);
      assertNotSame(simpleDateFormat3, simpleDateFormat1);
      assertNotSame(simpleDateFormat3, simpleDateFormat2);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toLocalizedPattern());
      assertTrue(simpleDateFormat3.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toPattern());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("E\"SlNa9=,P:&6", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertFalse(boolean1);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertTrue(boolean1 == boolean0);
      
      XYDataset xYDataset3 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset3).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset3).getXValue(anyInt() , anyInt());
      XYDataset xYDataset4 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset4).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset4).getXValue(anyInt() , anyInt());
      String string3 = timeSeriesURLGenerator1.generateURL(xYDataset4, 0, 1770);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat3, simpleDateFormat0);
      assertNotSame(simpleDateFormat3, simpleDateFormat1);
      assertNotSame(simpleDateFormat3, simpleDateFormat2);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toLocalizedPattern());
      assertTrue(simpleDateFormat3.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toPattern());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("E\"SlNa9=,P:&6", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM&amp;E\"SlNa9=,P:&6=1%2F1%2F70+12%3A00+AM", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(string3);
      
      String string4 = timeSeriesURLGenerator0.generateURL(xYDataset3, 1916, 1770);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", string4);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      XYDataset xYDataset5 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset5).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset5).getXValue(anyInt() , anyInt());
      String string5 = timeSeriesURLGenerator1.generateURL(xYDataset5, 0, 3109);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat3, simpleDateFormat0);
      assertNotSame(simpleDateFormat3, simpleDateFormat1);
      assertNotSame(simpleDateFormat3, simpleDateFormat2);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toLocalizedPattern());
      assertTrue(simpleDateFormat3.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toPattern());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("E\"SlNa9=,P:&6", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM&amp;E\"SlNa9=,P:&6=1%2F1%2F70+12%3A00+AM", string5);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(string5);
      
      SimpleDateFormat simpleDateFormat4 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat4, simpleDateFormat2);
      assertNotSame(simpleDateFormat4, simpleDateFormat0);
      assertNotSame(simpleDateFormat4, simpleDateFormat3);
      assertNotSame(simpleDateFormat4, simpleDateFormat1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat4.toPattern());
      assertTrue(simpleDateFormat4.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat4.toLocalizedPattern());
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat3));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat4);
      
      boolean boolean2 = timeSeriesURLGenerator0.equals((Object) null);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertFalse(boolean2);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      XYDataset xYDataset6 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset6).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset6).getXValue(anyInt() , anyInt());
      String string6 = timeSeriesURLGenerator0.generateURL(xYDataset6, 0, 1444);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", string6);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = timeSeriesURLGenerator0.getSeriesParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("series", string7);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      SimpleDateFormat simpleDateFormat5 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat5, simpleDateFormat1);
      assertNotSame(simpleDateFormat5, simpleDateFormat3);
      assertNotSame(simpleDateFormat5, simpleDateFormat4);
      assertNotSame(simpleDateFormat5, simpleDateFormat2);
      assertNotSame(simpleDateFormat5, simpleDateFormat0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertTrue(simpleDateFormat5.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat5.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat5.toLocalizedPattern());
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat3));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat4));
      assertNotNull(simpleDateFormat5);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertNotNull(timeSeriesURLGenerator0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      XYDataset xYDataset0 = null;
      int int0 = 3727;
      int int1 = 0;
      SimpleDateFormat simpleDateFormat1 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(simpleDateFormat1, simpleDateFormat0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat1.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toPattern());
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat1);
      
      String string0 = timeSeriesURLGenerator0.getPrefix();
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("index.html", string0);
      assertNotNull(string0);
      
      String string1 = timeSeriesURLGenerator0.getSeriesParameterName();
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = timeSeriesURLGenerator0.equals(simpleDateFormat0);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertFalse(boolean0);
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat1));
      
      // Undeclared exception!
      try { 
        timeSeriesURLGenerator0.generateURL((XYDataset) null, (-1935414842), 3727);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.urls.TimeSeriesURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertNotNull(timeSeriesURLGenerator0);
      
      String string0 = timeSeriesURLGenerator0.getSeriesParameterName();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", string0);
      assertNotNull(string0);
      
      String string1 = timeSeriesURLGenerator0.getSeriesParameterName();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", string1);
      assertNotNull(string1);
      
      String string2 = timeSeriesURLGenerator0.getItemParameterName();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("item", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      TimeSeriesURLGenerator timeSeriesURLGenerator1 = new TimeSeriesURLGenerator();
      assertEquals("item", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator1.getPrefix());
      assertTrue(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(timeSeriesURLGenerator1);
      
      boolean boolean0 = timeSeriesURLGenerator0.equals(timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("item", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator1.getPrefix());
      assertTrue(boolean0);
      assertTrue(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertTrue(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertNotNull(simpleDateFormat0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = null;
      try {
        timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "", "", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'itemParameterName' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "org.jfree.data.general.AbstractSeriesDataset", "org.jfree.data.general.AbstractSeriesDataset", "3u2o");
      assertEquals("3u2o", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("org.jfree.data.general.AbstractSeriesDataset", timeSeriesURLGenerator0.getPrefix());
      assertEquals("org.jfree.data.general.AbstractSeriesDataset", timeSeriesURLGenerator0.getSeriesParameterName());
      assertNotNull(timeSeriesURLGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        timeSeriesURLGenerator0.generateURL(xYDataset0, (-59), (-1452));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.urls.TimeSeriesURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "The 'data' array must contain two arrays with equal length.", "NOID", "NOID");
      assertEquals("NOID", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("The 'data' array must contain two arrays with equal length.", timeSeriesURLGenerator0.getPrefix());
      assertEquals("NOID", timeSeriesURLGenerator0.getItemParameterName());
      assertNotNull(timeSeriesURLGenerator0);
      
      // Undeclared exception!
      try { 
        timeSeriesURLGenerator0.getDateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.urls.TimeSeriesURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertNotNull(timeSeriesURLGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      String string0 = timeSeriesURLGenerator0.generateURL(xYDataset0, 0, 0);
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertNotNull(timeSeriesURLGenerator0);
      
      String string0 = timeSeriesURLGenerator0.getItemParameterName();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", string0);
      assertNotNull(string0);
      
      String string1 = timeSeriesURLGenerator0.getPrefix();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("index.html", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertNotNull(timeSeriesURLGenerator0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      boolean boolean0 = timeSeriesURLGenerator0.equals("org.jfree.data.xy.DefaultTableXYDataset");
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertNotNull(timeSeriesURLGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      SimpleDateFormat simpleDateFormat1 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(simpleDateFormat1, simpleDateFormat0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toLocalizedPattern());
      assertTrue(simpleDateFormat1.isLenient());
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat1);
      
      String string0 = timeSeriesURLGenerator0.generateURL(xYDataset0, 1, 0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", string0);
      assertNotNull(string0);
      
      SimpleDateFormat simpleDateFormat2 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(simpleDateFormat2, simpleDateFormat0);
      assertNotSame(simpleDateFormat2, simpleDateFormat1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat2.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat2.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat2.toLocalizedPattern());
      assertTrue(simpleDateFormat2.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat2.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat2);
      
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset1).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset1).getXValue(anyInt() , anyInt());
      String string1 = timeSeriesURLGenerator0.generateURL(xYDataset1, (-4339), 228);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      SimpleDateFormat simpleDateFormat3 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(simpleDateFormat3, simpleDateFormat2);
      assertNotSame(simpleDateFormat3, simpleDateFormat0);
      assertNotSame(simpleDateFormat3, simpleDateFormat1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toLocalizedPattern());
      assertTrue(simpleDateFormat3.isLenient());
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat3);
      
      System.setCurrentTimeMillis((-195L));
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset2).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset2).getXValue(anyInt() , anyInt());
      String string2 = timeSeriesURLGenerator0.generateURL(xYDataset2, 228, (-1));
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      XYDataset xYDataset3 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset3).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset3).getXValue(anyInt() , anyInt());
      SimpleDateFormat simpleDateFormat4 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(simpleDateFormat4, simpleDateFormat2);
      assertNotSame(simpleDateFormat4, simpleDateFormat1);
      assertNotSame(simpleDateFormat4, simpleDateFormat0);
      assertNotSame(simpleDateFormat4, simpleDateFormat3);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertTrue(simpleDateFormat4.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat4.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat4.toPattern());
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat3));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat2));
      assertNotNull(simpleDateFormat4);
      
      String string3 = timeSeriesURLGenerator0.generateURL(xYDataset3, 65, 65);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      SimpleDateFormat simpleDateFormat5 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(simpleDateFormat5, simpleDateFormat0);
      assertNotSame(simpleDateFormat5, simpleDateFormat3);
      assertNotSame(simpleDateFormat5, simpleDateFormat4);
      assertNotSame(simpleDateFormat5, simpleDateFormat2);
      assertNotSame(simpleDateFormat5, simpleDateFormat1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("M/d/yy h:mm a", simpleDateFormat5.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat5.toPattern());
      assertTrue(simpleDateFormat5.isLenient());
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat4));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat3));
      assertNotNull(simpleDateFormat5);
      
      System.setCurrentTimeMillis(691L);
      boolean boolean0 = timeSeriesURLGenerator0.equals("series");
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertFalse(boolean0);
      
      XYDataset xYDataset4 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset4).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset4).getXValue(anyInt() , anyInt());
      String string4 = timeSeriesURLGenerator0.generateURL(xYDataset4, 1, 97);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      XYDataset xYDataset5 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset5).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset5).getXValue(anyInt() , anyInt());
      String string5 = timeSeriesURLGenerator0.generateURL(xYDataset5, (-4339), 0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("index.html?item=1%2F1%2F70+12%3A00+AM", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      TimeSeriesURLGenerator timeSeriesURLGenerator1 = new TimeSeriesURLGenerator(simpleDateFormat1, "", "series", "series");
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toLocalizedPattern());
      assertTrue(simpleDateFormat1.isLenient());
      assertEquals("", timeSeriesURLGenerator1.getPrefix());
      assertEquals("series", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("series", timeSeriesURLGenerator1.getItemParameterName());
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat5));
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat3));
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat4));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(timeSeriesURLGenerator1);
      
      boolean boolean1 = timeSeriesURLGenerator0.equals(timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat1, simpleDateFormat4);
      assertNotSame(simpleDateFormat1, simpleDateFormat5);
      assertNotSame(simpleDateFormat1, simpleDateFormat2);
      assertNotSame(simpleDateFormat1, simpleDateFormat0);
      assertNotSame(simpleDateFormat1, simpleDateFormat3);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toLocalizedPattern());
      assertTrue(simpleDateFormat1.isLenient());
      assertEquals("", timeSeriesURLGenerator1.getPrefix());
      assertEquals("series", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("series", timeSeriesURLGenerator1.getItemParameterName());
      assertFalse(boolean1);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat5));
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat3));
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat4));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertTrue(boolean1 == boolean0);
      
      String string6 = timeSeriesURLGenerator0.getItemParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", string6);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = timeSeriesURLGenerator0.getPrefix();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("index.html", string7);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertNotNull(timeSeriesURLGenerator0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0).when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      String string0 = timeSeriesURLGenerator0.generateURL(xYDataset0, 2448, 2448);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", string0);
      assertNotNull(string0);
      
      String string1 = timeSeriesURLGenerator0.getPrefix();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TimeSeriesURLGenerator timeSeriesURLGenerator1 = new TimeSeriesURLGenerator(simpleDateFormat0, "index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", "R@$rSuAJ#~6<4M+]0", "R@$rSuAJ#~6<4M+]0");
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getItemParameterName());
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(timeSeriesURLGenerator1);
      
      boolean boolean0 = timeSeriesURLGenerator0.equals(timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getItemParameterName());
      assertFalse(boolean0);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      
      String string2 = timeSeriesURLGenerator1.getSeriesParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("R@$rSuAJ#~6<4M+]0", string2);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      SimpleDateFormat simpleDateFormat1 = (SimpleDateFormat)timeSeriesURLGenerator1.getDateFormat();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertNotSame(simpleDateFormat1, simpleDateFormat0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toPattern());
      assertTrue(simpleDateFormat1.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toLocalizedPattern());
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat1);
      
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM").when(xYDataset1).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset1).getXValue(anyInt() , anyInt());
      SimpleDateFormat simpleDateFormat2 = (SimpleDateFormat)timeSeriesURLGenerator1.getDateFormat();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(simpleDateFormat0, simpleDateFormat2);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertNotSame(simpleDateFormat2, simpleDateFormat0);
      assertNotSame(simpleDateFormat2, simpleDateFormat1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat2.toPattern());
      assertTrue(simpleDateFormat2.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat2.toLocalizedPattern());
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertTrue(simpleDateFormat2.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat2.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat2);
      
      String string3 = timeSeriesURLGenerator0.generateURL(xYDataset1, 1104, (-1));
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html?series=java.lang.String%400000000004&amp;item=1%2F1%2F70+12%3A00+AM", string3);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      SimpleDateFormat simpleDateFormat3 = (SimpleDateFormat)timeSeriesURLGenerator1.getDateFormat();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(simpleDateFormat0, simpleDateFormat3);
      assertNotSame(simpleDateFormat0, simpleDateFormat2);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertNotSame(simpleDateFormat3, simpleDateFormat0);
      assertNotSame(simpleDateFormat3, simpleDateFormat1);
      assertNotSame(simpleDateFormat3, simpleDateFormat2);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toLocalizedPattern());
      assertTrue(simpleDateFormat3.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toPattern());
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat1));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat2));
      assertNotNull(simpleDateFormat3);
      
      String string4 = timeSeriesURLGenerator0.getItemParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("item", string4);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = timeSeriesURLGenerator0.getPrefix();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", string5);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = timeSeriesURLGenerator1.getItemParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(simpleDateFormat0, simpleDateFormat3);
      assertNotSame(simpleDateFormat0, simpleDateFormat2);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("R@$rSuAJ#~6<4M+]0", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat3));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(string6);
      
      SimpleDateFormat simpleDateFormat4 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat4, simpleDateFormat0);
      assertNotSame(simpleDateFormat4, simpleDateFormat3);
      assertNotSame(simpleDateFormat4, simpleDateFormat1);
      assertNotSame(simpleDateFormat4, simpleDateFormat2);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertTrue(simpleDateFormat4.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat4.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat4.toPattern());
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat3));
      assertTrue(simpleDateFormat4.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat4);
      
      SimpleDateFormat simpleDateFormat5 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat5, simpleDateFormat3);
      assertNotSame(simpleDateFormat5, simpleDateFormat4);
      assertNotSame(simpleDateFormat5, simpleDateFormat0);
      assertNotSame(simpleDateFormat5, simpleDateFormat2);
      assertNotSame(simpleDateFormat5, simpleDateFormat1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertTrue(simpleDateFormat5.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat5.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat5.toPattern());
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat3));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat4));
      assertTrue(simpleDateFormat5.equals((Object)simpleDateFormat2));
      assertNotNull(simpleDateFormat5);
      
      String string7 = timeSeriesURLGenerator0.getItemParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("item", string7);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      String string8 = timeSeriesURLGenerator1.getPrefix();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(simpleDateFormat0, simpleDateFormat3);
      assertNotSame(simpleDateFormat0, simpleDateFormat5);
      assertNotSame(simpleDateFormat0, simpleDateFormat4);
      assertNotSame(simpleDateFormat0, simpleDateFormat2);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", string8);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat5));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat4));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(string8);
      
      String string9 = timeSeriesURLGenerator0.getItemParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("item", string9);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertNotNull(string9);
      
      String string10 = timeSeriesURLGenerator0.getSeriesParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", string10);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertNotNull(string10);
      
      Comparable<DateFormat> comparable1 = (Comparable<DateFormat>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(comparable1).when(xYDataset2).getSeriesKey(anyInt());
      doReturn(1534.770370023109).when(xYDataset2).getXValue(anyInt() , anyInt());
      String string11 = timeSeriesURLGenerator1.generateURL(xYDataset2, 0, (-2398));
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(simpleDateFormat0, simpleDateFormat3);
      assertNotSame(simpleDateFormat0, simpleDateFormat5);
      assertNotSame(simpleDateFormat0, simpleDateFormat4);
      assertNotSame(simpleDateFormat0, simpleDateFormat2);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM&amp;R@$rSuAJ#~6<4M+]0=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000005&amp;R@$rSuAJ#~6<4M+]0=1%2F1%2F70+12%3A00+AM", string11);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat5));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat4));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat3));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertNotNull(string11);
      
      String string12 = timeSeriesURLGenerator0.getSeriesParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", string12);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string6));
      assertNotNull(string12);
      
      XYDataset xYDataset3 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("index.html").when(xYDataset3).getSeriesKey(anyInt());
      doReturn((double)1104).when(xYDataset3).getXValue(anyInt() , anyInt());
      String string13 = timeSeriesURLGenerator1.generateURL(xYDataset3, (-718), (-1778));
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(simpleDateFormat0, simpleDateFormat3);
      assertNotSame(simpleDateFormat0, simpleDateFormat5);
      assertNotSame(simpleDateFormat0, simpleDateFormat4);
      assertNotSame(simpleDateFormat0, simpleDateFormat2);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM", timeSeriesURLGenerator1.getPrefix());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getSeriesParameterName());
      assertEquals("R@$rSuAJ#~6<4M+]0", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM&amp;R@$rSuAJ#~6<4M+]0=java.lang.String%400000000006&amp;R@$rSuAJ#~6<4M+]0=1%2F1%2F70+12%3A00+AM", string13);
      assertFalse(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat5));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat4));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat0.equals((Object)simpleDateFormat3));
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string10));
      assertNotNull(string13);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertNotNull(timeSeriesURLGenerator0);
      
      TimeSeriesURLGenerator timeSeriesURLGenerator1 = new TimeSeriesURLGenerator();
      assertEquals("item", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator1.getPrefix());
      assertEquals("series", timeSeriesURLGenerator1.getSeriesParameterName());
      assertTrue(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(timeSeriesURLGenerator1);
      
      boolean boolean0 = timeSeriesURLGenerator0.equals(timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("item", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator1.getPrefix());
      assertEquals("series", timeSeriesURLGenerator1.getSeriesParameterName());
      assertTrue(boolean0);
      assertTrue(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertNotNull(timeSeriesURLGenerator0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertNotNull(simpleDateFormat0);
      
      Comparable<Integer> comparable0 = (Comparable<Integer>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0).when(xYDataset0).getSeriesKey(anyInt());
      doReturn((-171.8777149073)).when(xYDataset0).getXValue(anyInt() , anyInt());
      String string0 = timeSeriesURLGenerator0.generateURL(xYDataset0, 6, (-2014868868));
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=12%2F31%2F69+11%3A59+PM", string0);
      assertNotNull(string0);
      
      String string1 = timeSeriesURLGenerator0.getPrefix();
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("index.html").when(xYDataset1).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset1).getXValue(anyInt() , anyInt());
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("index.html").when(xYDataset2).getSeriesKey(anyInt());
      doReturn(1.0).when(xYDataset2).getXValue(anyInt() , anyInt());
      String string2 = timeSeriesURLGenerator0.generateURL(xYDataset2, (-1), (-1));
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html?series=java.lang.String%400000000003&amp;item=1%2F1%2F70+12%3A00+AM", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      SimpleDateFormat simpleDateFormat1 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(simpleDateFormat1, simpleDateFormat0);
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertTrue(simpleDateFormat1.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat1.toPattern());
      assertTrue(simpleDateFormat1.equals((Object)simpleDateFormat0));
      assertNotNull(simpleDateFormat1);
      
      String string3 = timeSeriesURLGenerator0.generateURL(xYDataset1, (-79), (-79));
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html?series=java.lang.String%400000000004&amp;item=1%2F1%2F70+12%3A00+AM", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      SimpleDateFormat simpleDateFormat2 = (SimpleDateFormat)timeSeriesURLGenerator0.getDateFormat();
      assertNotSame(simpleDateFormat2, simpleDateFormat1);
      assertNotSame(simpleDateFormat2, simpleDateFormat0);
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("M/d/yy h:mm a", simpleDateFormat2.toPattern());
      assertTrue(simpleDateFormat2.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat2.toLocalizedPattern());
      assertTrue(simpleDateFormat2.equals((Object)simpleDateFormat0));
      assertTrue(simpleDateFormat2.equals((Object)simpleDateFormat1));
      assertNotNull(simpleDateFormat2);
      
      String string4 = timeSeriesURLGenerator0.getSeriesParameterName();
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("series", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = timeSeriesURLGenerator0.getPrefix();
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      TimeSeriesURLGenerator timeSeriesURLGenerator1 = new TimeSeriesURLGenerator();
      assertEquals("index.html", timeSeriesURLGenerator1.getPrefix());
      assertEquals("item", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator1.getSeriesParameterName());
      assertTrue(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(timeSeriesURLGenerator1);
      
      boolean boolean0 = timeSeriesURLGenerator0.equals(timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html", timeSeriesURLGenerator1.getPrefix());
      assertEquals("item", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator1.getSeriesParameterName());
      assertTrue(boolean0);
      assertTrue(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertTrue(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      
      String string6 = timeSeriesURLGenerator0.getItemParameterName();
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("item", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertNotNull(string6);
      
      SimpleDateFormat simpleDateFormat3 = (SimpleDateFormat)timeSeriesURLGenerator1.getDateFormat();
      assertNotSame(simpleDateFormat3, simpleDateFormat2);
      assertNotSame(simpleDateFormat3, simpleDateFormat0);
      assertNotSame(simpleDateFormat3, simpleDateFormat1);
      assertNotSame(timeSeriesURLGenerator1, timeSeriesURLGenerator0);
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat3.toLocalizedPattern());
      assertTrue(simpleDateFormat3.isLenient());
      assertEquals("index.html", timeSeriesURLGenerator1.getPrefix());
      assertEquals("item", timeSeriesURLGenerator1.getItemParameterName());
      assertEquals("series", timeSeriesURLGenerator1.getSeriesParameterName());
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat1));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat2));
      assertTrue(simpleDateFormat3.equals((Object)simpleDateFormat0));
      assertTrue(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
      assertNotNull(simpleDateFormat3);
      
      XYDataset xYDataset3 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("index.html?series=java.lang.String%400000000003&amp;item=1%2F1%2F70+12%3A00+AM").when(xYDataset3).getSeriesKey(anyInt());
      doReturn(Double.NaN).when(xYDataset3).getXValue(anyInt() , anyInt());
      String string7 = timeSeriesURLGenerator0.generateURL(xYDataset3, (-79), 918);
      assertNotSame(timeSeriesURLGenerator0, timeSeriesURLGenerator1);
      assertEquals("index.html", timeSeriesURLGenerator0.getPrefix());
      assertEquals("series", timeSeriesURLGenerator0.getSeriesParameterName());
      assertEquals("item", timeSeriesURLGenerator0.getItemParameterName());
      assertEquals("index.html?series=java.lang.String%400000000006&amp;item=1%2F1%2F70+12%3A00+AM", string7);
      assertTrue(timeSeriesURLGenerator0.equals((Object)timeSeriesURLGenerator1));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      timeSeriesURLGenerator0.getDateFormat();
      timeSeriesURLGenerator0.getDateFormat();
      timeSeriesURLGenerator0.getDateFormat();
      Comparable<MockSimpleDateFormat> comparable0 = (Comparable<MockSimpleDateFormat>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0).when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      timeSeriesURLGenerator0.generateURL(xYDataset0, 1, 0);
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("index.html?series=codegen.java.lang.Comparable%24MockitoMock%242113852222%400000000002&amp;item=1%2F1%2F70+12%3A00+AM").when(xYDataset1).getSeriesKey(anyInt());
      doReturn(Double.POSITIVE_INFINITY).when(xYDataset1).getXValue(anyInt() , anyInt());
      String string0 = timeSeriesURLGenerator0.generateURL(xYDataset1, 0, 1);
      assertEquals("index.html?series=java.lang.String%400000000003&amp;item=8%2F17%2F94+7%3A12+AM", string0);
      
      timeSeriesURLGenerator0.getItemParameterName();
      timeSeriesURLGenerator0.getSeriesParameterName();
      timeSeriesURLGenerator0.getSeriesParameterName();
      timeSeriesURLGenerator0.getPrefix();
      TimeSeriesURLGenerator timeSeriesURLGenerator1 = new TimeSeriesURLGenerator();
      boolean boolean0 = timeSeriesURLGenerator0.equals(timeSeriesURLGenerator1);
      assertFalse(boolean0);
      
      timeSeriesURLGenerator0.getItemParameterName();
      timeSeriesURLGenerator0.getPrefix();
      timeSeriesURLGenerator0.getDateFormat();
      timeSeriesURLGenerator1.getDateFormat();
      assertFalse(timeSeriesURLGenerator1.equals((Object)timeSeriesURLGenerator0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "<>D&z)z#lm/", "9H5Q1:2UE~", "9H5Q1:2UE~");
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        timeSeriesURLGenerator0.generateURL(xYDataset0, 989, (-783));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.urls.TimeSeriesURLGenerator", e);
      }
  }
}
