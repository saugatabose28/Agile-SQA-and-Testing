/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:57:23 GMT 2023
 */

package org.jfree.chart.urls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.data.category.CategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardCategoryURLGenerator_ESTest extends StandardCategoryURLGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("`-bx_5S.$dG A)`|y3", "`-bx_5S.$dG A)`|y3", "`-bx_5S.$dG A)`|y3");
      assertNotNull(standardCategoryURLGenerator0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn("`-bx_5S.$dG A)`|y3").when(categoryDataset0).getColumnKey(anyInt());
      doReturn("`-bx_5S.$dG A)`|y3").when(categoryDataset0).getRowKey(anyInt());
      String string0 = standardCategoryURLGenerator0.generateURL(categoryDataset0, (-5003), 48);
      assertEquals("`-bx_5S.$dG A)`|y3?`-bx_5S.$dG A)`|y3=java.lang.String%400000000002&amp;`-bx_5S.$dG A)`|y3=java.lang.String%400000000002", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("{c:y8B", "VXmjFo)vt", "NOID");
      assertNotNull(standardCategoryURLGenerator0);
      
      // Undeclared exception!
      try { 
        standardCategoryURLGenerator0.generateURL((CategoryDataset) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.urls.StandardCategoryURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = null;
      try {
        standardCategoryURLGenerator0 = new StandardCategoryURLGenerator((String) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = null;
      try {
        standardCategoryURLGenerator0 = new StandardCategoryURLGenerator((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      assertNotNull(standardCategoryURLGenerator0);
      
      standardCategoryURLGenerator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("{c:y8B", "VXmjFo)vt", "NOID");
      assertNotNull(standardCategoryURLGenerator0);
      
      StandardCategoryURLGenerator standardCategoryURLGenerator1 = new StandardCategoryURLGenerator("{c:y8B", "VXmjFo)vt", "M");
      assertNotNull(standardCategoryURLGenerator1);
      assertFalse(standardCategoryURLGenerator1.equals((Object)standardCategoryURLGenerator0));
      
      boolean boolean0 = standardCategoryURLGenerator0.equals(standardCategoryURLGenerator1);
      assertFalse(boolean0);
      assertNotSame(standardCategoryURLGenerator0, standardCategoryURLGenerator1);
      assertNotSame(standardCategoryURLGenerator1, standardCategoryURLGenerator0);
      assertFalse(standardCategoryURLGenerator0.equals((Object)standardCategoryURLGenerator1));
      assertFalse(standardCategoryURLGenerator1.equals((Object)standardCategoryURLGenerator0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("orj.jfree.data.general.AbstractDataset", "orj.jfree.data.general.AbstractDataset", "orj.jfree.data.general.AbstractDataset");
      assertNotNull(standardCategoryURLGenerator0);
      
      StandardCategoryURLGenerator standardCategoryURLGenerator1 = new StandardCategoryURLGenerator("orj.jfree.data.general.AbstractDataset");
      assertNotNull(standardCategoryURLGenerator1);
      assertFalse(standardCategoryURLGenerator1.equals((Object)standardCategoryURLGenerator0));
      
      boolean boolean0 = standardCategoryURLGenerator0.equals(standardCategoryURLGenerator1);
      assertFalse(boolean0);
      assertNotSame(standardCategoryURLGenerator0, standardCategoryURLGenerator1);
      assertNotSame(standardCategoryURLGenerator1, standardCategoryURLGenerator0);
      assertFalse(standardCategoryURLGenerator0.equals((Object)standardCategoryURLGenerator1));
      assertFalse(standardCategoryURLGenerator1.equals((Object)standardCategoryURLGenerator0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      assertNotNull(standardCategoryURLGenerator0);
      
      Object object0 = standardCategoryURLGenerator0.clone();
      assertNotNull(object0);
      assertNotSame(standardCategoryURLGenerator0, object0);
      assertNotSame(object0, standardCategoryURLGenerator0);
      assertTrue(object0.equals((Object)standardCategoryURLGenerator0));
      
      boolean boolean0 = standardCategoryURLGenerator0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(standardCategoryURLGenerator0, object0);
      assertNotSame(object0, standardCategoryURLGenerator0);
      assertTrue(standardCategoryURLGenerator0.equals((Object)object0));
      assertTrue(object0.equals((Object)standardCategoryURLGenerator0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      assertNotNull(standardCategoryURLGenerator0);
      
      boolean boolean0 = standardCategoryURLGenerator0.equals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;category=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;index.html?series=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;category=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003=java.lang.String%400000000007&amp;index.html?series=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;category=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003=java.lang.String%400000000006");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      assertNotNull(standardCategoryURLGenerator0);
      
      boolean boolean0 = standardCategoryURLGenerator0.equals(standardCategoryURLGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      assertNotNull(standardCategoryURLGenerator0);
      
      StandardCategoryURLGenerator standardCategoryURLGenerator1 = new StandardCategoryURLGenerator("index.html?series=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;category=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003", "index.html?series=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;category=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003", "index.html?series=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;category=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003");
      assertNotNull(standardCategoryURLGenerator1);
      assertFalse(standardCategoryURLGenerator1.equals((Object)standardCategoryURLGenerator0));
      
      boolean boolean0 = standardCategoryURLGenerator0.equals(standardCategoryURLGenerator1);
      assertFalse(boolean0);
      assertNotSame(standardCategoryURLGenerator0, standardCategoryURLGenerator1);
      assertNotSame(standardCategoryURLGenerator1, standardCategoryURLGenerator0);
      assertFalse(standardCategoryURLGenerator0.equals((Object)standardCategoryURLGenerator1));
      assertFalse(standardCategoryURLGenerator1.equals((Object)standardCategoryURLGenerator0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("index.html?series=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;category=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003", "index.html?series=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;category=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003", "index.html?series=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;category=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003");
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn("index.html?series=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000005&amp;category=java.lang.String%400000000006").when(categoryDataset0).getColumnKey(anyInt());
      doReturn("index.html?series=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;category=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003").when(categoryDataset0).getRowKey(anyInt());
      String string0 = standardCategoryURLGenerator0.generateURL(categoryDataset0, 10, 10);
      assertEquals("index.html?series=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;category=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;index.html?series=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;category=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003=java.lang.String%400000000002&amp;index.html?series=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003&amp;category=codegen.java.lang.Comparable%24MockitoMock%241847963673%400000000003=java.lang.String%400000000003", string0);
  }
}
