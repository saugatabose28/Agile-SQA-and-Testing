/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:00:01 GMT 2023
 */

package org.jfree.chart.event;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedCharacterIterator;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.event.ChartChangeEvent;
import org.jfree.chart.event.ChartChangeEventType;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChartChangeEvent_ESTest extends ChartChangeEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImageAlignment((-3039));
      ChartChangeEvent chartChangeEvent0 = new ChartChangeEvent(object0, jFreeChart0);
      JFreeChart jFreeChart1 = chartChangeEvent0.getChart();
      assertSame(jFreeChart1, jFreeChart0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartChangeEvent chartChangeEvent0 = new ChartChangeEvent(object0, jFreeChart0);
      JFreeChart jFreeChart1 = chartChangeEvent0.getChart();
      assertFalse(jFreeChart1.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.NEW_DATASET;
      ChartChangeEvent chartChangeEvent0 = null;
      try {
        chartChangeEvent0 = new ChartChangeEvent((Object) null, jFreeChart0, chartChangeEventType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ChartChangeEvent chartChangeEvent0 = null;
      try {
        chartChangeEvent0 = new ChartChangeEvent((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      CategoryAxis categoryAxis0 = new CategoryAxis("org.jfree.chart.event.ChartChangeEvent");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainCategoryPlot0);
      ChartChangeEventType chartChangeEventType0 = plotChangeEvent0.getType();
      ChartChangeEvent chartChangeEvent0 = new ChartChangeEvent(integer0, (JFreeChart) null, chartChangeEventType0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      ChartChangeEvent chartChangeEvent0 = new ChartChangeEvent(attributedCharacterIterator_Attribute0);
      ChartChangeEventType chartChangeEventType0 = chartChangeEvent0.getType();
      chartChangeEvent0.setType(chartChangeEventType0);
      assertEquals("ChartChangeEventType.GENERAL", chartChangeEventType0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PiePlot<String> piePlot0 = new PiePlot<String>();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      ChartChangeEvent chartChangeEvent0 = null;
      try {
        chartChangeEvent0 = new ChartChangeEvent((Object) null, jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("org.jfree.chart.event.ChartChangeEvent");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainCategoryPlot0);
      JFreeChart jFreeChart0 = plotChangeEvent0.getChart();
      assertNull(jFreeChart0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object object0 = new Object();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(object0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("OrsonPDF is not present on the classpath.", meterPlot0);
      rendererChangeEvent0.setChart(jFreeChart0);
      JFreeChart jFreeChart1 = rendererChangeEvent0.getChart();
      assertEquals(1, jFreeChart1.getSubtitleCount());
  }
}
