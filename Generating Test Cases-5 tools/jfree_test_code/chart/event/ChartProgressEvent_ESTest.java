/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:46:23 GMT 2023
 */

package org.jfree.chart.event;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.plot.Plot;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChartProgressEvent_ESTest extends ChartProgressEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent(object0, (JFreeChart) null, 0, 0);
      int int0 = chartProgressEvent0.getType();
      assertEquals(0, int0);
      assertEquals(0, chartProgressEvent0.getPercent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent("=aI=OAD??", (JFreeChart) null, 133, (-2117));
      chartProgressEvent0.setType((-777));
      int int0 = chartProgressEvent0.getType();
      assertEquals((-777), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent(object0, (JFreeChart) null, 0, 0);
      int int0 = chartProgressEvent0.getPercent();
      assertEquals(0, int0);
      assertEquals(0, chartProgressEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent(object0, (JFreeChart) null, 0, 0);
      chartProgressEvent0.setPercent((-586));
      int int0 = chartProgressEvent0.getPercent();
      assertEquals((-586), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.ChartHints$Key", plot0);
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent(object0, jFreeChart0, (-154), 15);
      jFreeChart0.setNotify(false);
      chartProgressEvent0.getChart();
      assertEquals(15, chartProgressEvent0.getPercent());
      assertEquals((-154), chartProgressEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.event.ChartProgressEvent", font0, plot0, false);
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent(object0, jFreeChart0, 0, 10);
      chartProgressEvent0.getChart();
      assertEquals(0, chartProgressEvent0.getType());
      assertEquals(10, chartProgressEvent0.getPercent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChartProgressEvent chartProgressEvent0 = null;
      try {
        chartProgressEvent0 = new ChartProgressEvent((Object) null, (JFreeChart) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent(object0, (JFreeChart) null, 1540, 1540);
      int int0 = chartProgressEvent0.getType();
      assertEquals(1540, int0);
      assertEquals(1540, chartProgressEvent0.getPercent());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent(object0, (JFreeChart) null, 1540, 1540);
      chartProgressEvent0.setChart((JFreeChart) null);
      assertEquals(1540, chartProgressEvent0.getType());
      assertEquals(1540, chartProgressEvent0.getPercent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent(object0, (JFreeChart) null, 1540, 1540);
      int int0 = chartProgressEvent0.getPercent();
      assertEquals(1540, chartProgressEvent0.getType());
      assertEquals(1540, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent(object0, (JFreeChart) null, 1540, 1540);
      chartProgressEvent0.getChart();
      assertEquals(1540, chartProgressEvent0.getType());
      assertEquals(1540, chartProgressEvent0.getPercent());
  }
}
