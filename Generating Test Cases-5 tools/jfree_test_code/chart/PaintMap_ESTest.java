/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:50:47 GMT 2023
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.LinearGradientPaint;
import java.awt.Paint;
import java.awt.RadialGradientPaint;
import java.awt.SystemColor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.PaintMap;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaintMap_ESTest extends PaintMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      assertNotNull(paintMap0);
      
      boolean boolean0 = paintMap0.equals(paintMap0);
      assertTrue(boolean0);
      
      paintMap0.clear();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      assertNotNull(paintMap0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("H<^CU4i_t#gL", integer0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      Color color0 = Color.gray;
      assertNotNull(color0);
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      
      Color color1 = Color.getColor("rjWg!\"0", 0);
      assertNotNull(color1);
      assertFalse(color1.equals((Object)color0));
      assertNotSame(color1, color0);
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      
      int int0 = Integer.max(270, 0);
      assertEquals(270, int0);
      
      Paint paint0 = paintMap0.getPaint("H<^CU4i_t#gL");
      assertNull(paint0);
      
      paintMap0.put(integer1, color0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(color0.equals((Object)color1));
      assertNotSame(color0, color1);
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      
      Comparable<LinearGradientPaint> comparable0 = (Comparable<LinearGradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint1 = paintMap0.getPaint(comparable0);
      assertNull(paint1);
      
      Color color2 = (Color)paintMap0.getPaint(integer0);
      assertNotNull(color2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(color2.equals((Object)color1));
      assertNotSame(color2, color1);
      assertSame(color2, color0);
      assertEquals(128, color2.getGreen());
      assertEquals((-8355712), color2.getRGB());
      assertEquals(1, color2.getTransparency());
      assertEquals(128, color2.getBlue());
      assertEquals(255, color2.getAlpha());
      assertEquals(128, color2.getRed());
      
      Color color3 = Color.getColor("H<^CU4i_t#gL", color0);
      assertNotNull(color3);
      assertFalse(color0.equals((Object)color1));
      assertFalse(color3.equals((Object)color1));
      assertSame(color0, color3);
      assertSame(color0, color2);
      assertNotSame(color0, color1);
      assertSame(color3, color0);
      assertSame(color3, color2);
      assertNotSame(color3, color1);
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color3.getRGB());
      assertEquals(1, color3.getTransparency());
      assertEquals(128, color3.getGreen());
      assertEquals(255, color3.getAlpha());
      assertEquals(128, color3.getBlue());
      assertEquals(128, color3.getRed());
      
      paintMap0.put(integer0, color2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(color2.equals((Object)color1));
      assertNotSame(color2, color1);
      assertSame(color2, color3);
      assertSame(color2, color0);
      assertEquals(128, color2.getGreen());
      assertEquals((-8355712), color2.getRGB());
      assertEquals(1, color2.getTransparency());
      assertEquals(128, color2.getBlue());
      assertEquals(255, color2.getAlpha());
      assertEquals(128, color2.getRed());
      
      PaintMap paintMap1 = (PaintMap)paintMap0.clone();
      assertNotNull(paintMap1);
      assertTrue(paintMap1.equals((Object)paintMap0));
      assertNotSame(paintMap0, paintMap1);
      assertNotSame(paintMap1, paintMap0);
      
      boolean boolean0 = paintMap0.equals("H<^CU4i_t#gL");
      assertFalse(boolean0);
      assertTrue(paintMap0.equals((Object)paintMap1));
      assertNotSame(paintMap0, paintMap1);
      
      paintMap0.put("H<^CU4i_t#gL", color0);
      assertFalse(paintMap0.equals((Object)paintMap1));
      assertFalse(color0.equals((Object)color1));
      assertNotSame(paintMap0, paintMap1);
      assertSame(color0, color3);
      assertSame(color0, color2);
      assertNotSame(color0, color1);
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      
      SystemColor systemColor0 = SystemColor.desktop;
      assertNotNull(systemColor0);
      assertEquals(0, systemColor0.getRed());
      assertEquals((-16753572), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(92, systemColor0.getGreen());
      assertEquals(92, systemColor0.getBlue());
      
      boolean boolean1 = paintMap0.equals(systemColor0);
      assertFalse(boolean1);
      assertFalse(paintMap0.equals((Object)paintMap1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(paintMap0, paintMap1);
      assertEquals(0, systemColor0.getRed());
      assertEquals((-16753572), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(92, systemColor0.getGreen());
      assertEquals(92, systemColor0.getBlue());
      
      Color color4 = (Color)paintMap0.getPaint(integer1);
      assertNotNull(color4);
      assertFalse(paintMap0.equals((Object)paintMap1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(color4.equals((Object)color1));
      assertFalse(integer1.equals((Object)int0));
      assertNotSame(paintMap0, paintMap1);
      assertNotSame(color4, color1);
      assertSame(color4, color0);
      assertSame(color4, color2);
      assertSame(color4, color3);
      assertEquals(128, color4.getBlue());
      assertEquals(128, color4.getRed());
      assertEquals((-8355712), color4.getRGB());
      assertEquals(1, color4.getTransparency());
      assertEquals(128, color4.getGreen());
      assertEquals(255, color4.getAlpha());
      
      Color color5 = (Color)paintMap0.getPaint("H<^CU4i_t#gL");
      assertNotNull(color5);
      assertFalse(paintMap0.equals((Object)paintMap1));
      assertFalse(color5.equals((Object)color1));
      assertNotSame(paintMap0, paintMap1);
      assertSame(color5, color0);
      assertSame(color5, color2);
      assertNotSame(color5, color1);
      assertSame(color5, color4);
      assertSame(color5, color3);
      assertEquals(255, color5.getAlpha());
      assertEquals((-8355712), color5.getRGB());
      assertEquals(1, color5.getTransparency());
      assertEquals(128, color5.getGreen());
      assertEquals(128, color5.getBlue());
      assertEquals(128, color5.getRed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      assertNotNull(paintMap0);
      
      Comparable<PaintMap> comparable0 = (Comparable<PaintMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = paintMap0.getPaint(comparable0);
      assertNull(paint0);
      
      boolean boolean0 = paintMap0.equals((Object) null);
      assertFalse(boolean0);
      
      Comparable<PaintMap> comparable1 = (Comparable<PaintMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = paintMap0.containsKey(comparable1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = paintMap0.equals((Object) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = paintMap0.equals((Object) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      Object object0 = paintMap0.clone();
      assertNotNull(object0);
      assertTrue(object0.equals((Object)paintMap0));
      assertNotSame(paintMap0, object0);
      assertNotSame(object0, paintMap0);
      
      Comparable<PaintMap> comparable2 = (Comparable<PaintMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      boolean boolean4 = paintMap0.containsKey(comparable2);
      assertFalse(boolean4);
      assertTrue(paintMap0.equals((Object)object0));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertNotSame(paintMap0, object0);
      
      Object object1 = paintMap0.clone();
      assertNotNull(object1);
      assertTrue(paintMap0.equals((Object)object0));
      assertTrue(object1.equals((Object)paintMap0));
      assertTrue(object1.equals((Object)object0));
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
      assertNotSame(object1, paintMap0);
      assertNotSame(object1, object0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      paintMap0.put(integer0, (Paint) null);
      assertFalse(paintMap0.equals((Object)object0));
      assertFalse(paintMap0.equals((Object)object1));
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
      
      boolean boolean5 = object0.equals((Object) null);
      assertFalse(boolean5);
      assertFalse(paintMap0.equals((Object)object0));
      assertFalse(paintMap0.equals((Object)object1));
      assertTrue(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)paintMap0));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
      assertNotSame(object0, paintMap0);
      assertNotSame(object0, object1);
      
      boolean boolean6 = paintMap0.containsKey(integer0);
      assertTrue(boolean6);
      assertFalse(paintMap0.equals((Object)object0));
      assertFalse(paintMap0.equals((Object)object1));
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      assertNotNull(paintMap0);
      
      PaintMap paintMap1 = new PaintMap();
      assertNotNull(paintMap1);
      assertTrue(paintMap1.equals((Object)paintMap0));
      
      Comparable<GradientPaint> comparable0 = (Comparable<GradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = paintMap1.getPaint(comparable0);
      assertNull(paint0);
      assertTrue(paintMap1.equals((Object)paintMap0));
      assertNotSame(paintMap1, paintMap0);
      
      // Undeclared exception!
      try { 
        paintMap0.getPaint((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      assertNotNull(paintMap0);
      
      paintMap0.clear();
      Object object0 = paintMap0.clone();
      assertNotNull(object0);
      assertTrue(object0.equals((Object)paintMap0));
      assertNotSame(paintMap0, object0);
      assertNotSame(object0, paintMap0);
      
      boolean boolean0 = paintMap0.equals(object0);
      assertTrue(boolean0);
      assertTrue(paintMap0.equals((Object)object0));
      assertTrue(object0.equals((Object)paintMap0));
      assertNotSame(paintMap0, object0);
      assertNotSame(object0, paintMap0);
      
      Object object1 = paintMap0.clone();
      assertNotNull(object1);
      assertTrue(paintMap0.equals((Object)object0));
      assertTrue(object1.equals((Object)paintMap0));
      assertTrue(object1.equals((Object)object0));
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
      assertNotSame(object1, object0);
      assertNotSame(object1, paintMap0);
      
      paintMap0.clear();
      assertTrue(paintMap0.equals((Object)object1));
      assertTrue(paintMap0.equals((Object)object0));
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
      
      Integer integer0 = new Integer(738);
      assertEquals(738, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = Integer.toUnsignedString(738);
      assertEquals("738", string0);
      assertNotNull(string0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertEquals(738, (int)integer1);
      assertNotNull(integer1);
      
      boolean boolean1 = paintMap0.equals(integer0);
      assertFalse(boolean1);
      assertTrue(paintMap0.equals((Object)object1));
      assertTrue(paintMap0.equals((Object)object0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
      
      paintMap0.clear();
      assertTrue(paintMap0.equals((Object)object1));
      assertTrue(paintMap0.equals((Object)object0));
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
      
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      assertNotNull(systemColor0);
      assertEquals(192, systemColor0.getGreen());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getRed());
      
      paintMap0.put("738", systemColor0);
      assertFalse(paintMap0.equals((Object)object0));
      assertFalse(paintMap0.equals((Object)object1));
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
      assertEquals(192, systemColor0.getGreen());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getRed());
      
      Object object2 = paintMap0.clone();
      assertNotNull(object2);
      assertFalse(paintMap0.equals((Object)object0));
      assertFalse(paintMap0.equals((Object)object1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertTrue(object2.equals((Object)paintMap0));
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
      assertNotSame(paintMap0, object2);
      assertNotSame(object2, object1);
      assertNotSame(object2, paintMap0);
      assertNotSame(object2, object0);
      
      boolean boolean2 = paintMap0.equals(object2);
      assertTrue(boolean2);
      assertFalse(paintMap0.equals((Object)object0));
      assertTrue(paintMap0.equals((Object)object2));
      assertFalse(paintMap0.equals((Object)object1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertTrue(object2.equals((Object)paintMap0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
      assertNotSame(paintMap0, object2);
      assertNotSame(object2, object1);
      assertNotSame(object2, paintMap0);
      assertNotSame(object2, object0);
      
      boolean boolean3 = paintMap0.containsKey(integer0);
      assertFalse(boolean3);
      assertFalse(paintMap0.equals((Object)object0));
      assertTrue(paintMap0.equals((Object)object2));
      assertFalse(paintMap0.equals((Object)object1));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
      assertNotSame(paintMap0, object2);
      
      paintMap0.clear();
      assertTrue(paintMap0.equals((Object)object1));
      assertTrue(paintMap0.equals((Object)object0));
      assertFalse(paintMap0.equals((Object)object2));
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
      assertNotSame(paintMap0, object2);
      
      Paint paint0 = paintMap0.getPaint("");
      assertNull(paint0);
      assertTrue(paintMap0.equals((Object)object1));
      assertTrue(paintMap0.equals((Object)object0));
      assertFalse(paintMap0.equals((Object)object2));
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
      assertNotSame(paintMap0, object2);
      
      boolean boolean4 = paintMap0.equals("");
      assertFalse(boolean4);
      assertTrue(paintMap0.equals((Object)object1));
      assertTrue(paintMap0.equals((Object)object0));
      assertFalse(paintMap0.equals((Object)object2));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, object1);
      assertNotSame(paintMap0, object2);
      
      PaintMap paintMap1 = new PaintMap();
      assertNotNull(paintMap1);
      assertTrue(paintMap1.equals((Object)object0));
      assertTrue(paintMap1.equals((Object)object1));
      assertTrue(paintMap1.equals((Object)paintMap0));
      assertFalse(paintMap1.equals((Object)object2));
      
      boolean boolean5 = paintMap0.equals(paintMap1);
      assertTrue(boolean5);
      assertTrue(paintMap0.equals((Object)object1));
      assertTrue(paintMap0.equals((Object)object0));
      assertTrue(paintMap0.equals((Object)paintMap1));
      assertFalse(paintMap0.equals((Object)object2));
      assertTrue(paintMap1.equals((Object)object0));
      assertTrue(paintMap1.equals((Object)object1));
      assertTrue(paintMap1.equals((Object)paintMap0));
      assertFalse(paintMap1.equals((Object)object2));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, paintMap1);
      assertNotSame(paintMap0, object1);
      assertNotSame(paintMap0, object2);
      assertNotSame(paintMap1, paintMap0);
      assertNotSame(paintMap1, object0);
      assertNotSame(paintMap1, object1);
      assertNotSame(paintMap1, object2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      assertNotNull(paintMap0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Color color0 = Color.PINK;
      assertNotNull(color0);
      assertEquals(175, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(175, color0.getGreen());
      assertEquals((-20561), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      paintMap0.put(comparable0, color0);
      assertEquals(175, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(175, color0.getGreen());
      assertEquals((-20561), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      paintMap0.put(comparable1, color0);
      assertEquals(175, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(175, color0.getGreen());
      assertEquals((-20561), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      PaintMap paintMap1 = new PaintMap();
      assertNotNull(paintMap1);
      assertFalse(paintMap1.equals((Object)paintMap0));
      
      Object object0 = paintMap1.clone();
      assertNotNull(object0);
      assertFalse(paintMap1.equals((Object)paintMap0));
      assertFalse(object0.equals((Object)paintMap0));
      assertTrue(object0.equals((Object)paintMap1));
      assertNotSame(paintMap1, object0);
      assertNotSame(paintMap1, paintMap0);
      assertNotSame(object0, paintMap0);
      assertNotSame(object0, paintMap1);
      
      boolean boolean0 = paintMap0.equals(object0);
      assertFalse(boolean0);
      assertFalse(paintMap0.equals((Object)object0));
      assertFalse(paintMap0.equals((Object)paintMap1));
      assertFalse(paintMap1.equals((Object)paintMap0));
      assertTrue(paintMap1.equals((Object)object0));
      assertFalse(object0.equals((Object)paintMap0));
      assertTrue(object0.equals((Object)paintMap1));
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, paintMap1);
      assertNotSame(paintMap1, object0);
      assertNotSame(paintMap1, paintMap0);
      assertNotSame(object0, paintMap0);
      assertNotSame(object0, paintMap1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = paintMap0.equals(integer0);
      assertFalse(boolean1);
      assertFalse(paintMap0.equals((Object)object0));
      assertFalse(paintMap0.equals((Object)paintMap1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(paintMap0, object0);
      assertNotSame(paintMap0, paintMap1);
      
      paintMap1.clear();
      assertFalse(paintMap1.equals((Object)paintMap0));
      assertTrue(paintMap1.equals((Object)object0));
      assertNotSame(paintMap1, object0);
      assertNotSame(paintMap1, paintMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      assertNotNull(paintMap0);
      
      Object object0 = paintMap0.clone();
      assertNotNull(object0);
      assertTrue(object0.equals((Object)paintMap0));
      assertNotSame(paintMap0, object0);
      assertNotSame(object0, paintMap0);
      
      boolean boolean0 = paintMap0.equals(object0);
      assertTrue(boolean0);
      assertTrue(paintMap0.equals((Object)object0));
      assertTrue(object0.equals((Object)paintMap0));
      assertNotSame(paintMap0, object0);
      assertNotSame(object0, paintMap0);
      
      Comparable<RadialGradientPaint> comparable0 = null;
      // Undeclared exception!
      try { 
        paintMap0.put((Comparable) null, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      assertNotNull(paintMap0);
      
      PaintMap paintMap1 = new PaintMap();
      assertNotNull(paintMap1);
      assertTrue(paintMap1.equals((Object)paintMap0));
      
      boolean boolean0 = paintMap0.equals(paintMap1);
      assertTrue(boolean0);
      assertTrue(paintMap0.equals((Object)paintMap1));
      assertTrue(paintMap1.equals((Object)paintMap0));
      assertNotSame(paintMap0, paintMap1);
      assertNotSame(paintMap1, paintMap0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      assertNotNull(paintMap0);
      
      Paint paint0 = paintMap0.getPaint("");
      assertNull(paint0);
      
      try { 
        Integer.valueOf("", 2159);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 2159 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      assertNotNull(paintMap0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = paintMap0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      paintMap0.getPaint(comparable0);
      Comparable<Color> comparable1 = (Comparable<Color>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      paintMap0.put(comparable1, (Paint) null);
      paintMap0.equals((Object) null);
      Comparable<PaintMap> comparable2 = (Comparable<PaintMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<PaintMap> comparable3 = (Comparable<PaintMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      PaintMap paintMap1 = (PaintMap)paintMap0.clone();
      boolean boolean0 = paintMap0.equals(paintMap1);
      paintMap0.equals((Object) null);
      paintMap0.equals((Object) null);
      Comparable<Color> comparable4 = (Comparable<Color>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      paintMap0.clear();
      paintMap0.clear();
      paintMap0.getPaint(comparable3);
      paintMap0.equals(paintMap1);
      PaintMap paintMap2 = new PaintMap();
      paintMap0.equals(paintMap2);
      Comparable<LinearGradientPaint> comparable5 = (Comparable<LinearGradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      paintMap2.getPaint(comparable5);
      boolean boolean1 = paintMap0.equals(paintMap1);
      assertFalse(boolean1 == boolean0);
      
      paintMap2.clear();
      paintMap0.containsKey((Comparable) null);
      paintMap0.clone();
      paintMap1.clone();
      assertFalse(paintMap1.equals((Object)paintMap0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Color color0 = Color.DARK_GRAY;
      paintMap0.put((-1694), color0);
      paintMap0.put(comparable0, color0);
      paintMap0.getPaint((-1694));
      paintMap0.containsKey(1.0F);
      paintMap0.containsKey((-1694));
      paintMap0.getPaint((-1694));
      paintMap0.clear();
      Paint paint0 = paintMap0.getPaint((-1694));
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      Comparable<GradientPaint> comparable0 = (Comparable<GradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      paintMap0.put(comparable0, (Paint) null);
      Object object0 = paintMap0.clone();
      paintMap0.clear();
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SystemColor systemColor0 = SystemColor.textText;
      Color.getColor("org.jfree.chart.ChartHints$Key", (Color) systemColor0);
      float[] floatArray0 = new float[5];
      Comparable<PaintMap> comparable2 = (Comparable<PaintMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      paintMap0.getPaint(comparable2);
      floatArray0[0] = (-1552.48F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 217.85F;
      systemColor0.getColorSpace();
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      systemColor0.getComponents(floatArray0);
      Color.getColor("org.jfree.chart.ChartHints$Key");
      Object object1 = paintMap0.clone();
      paintMap0.put(comparable1, systemColor0);
      Object object2 = paintMap0.clone();
      paintMap0.clone();
      paintMap0.clone();
      paintMap0.equals(object0);
      paintMap0.clone();
      paintMap0.containsKey("org.jfree.chart.ChartHints$Key");
      paintMap0.getPaint(0.0F);
      paintMap0.clear();
      boolean boolean0 = paintMap0.equals(object2);
      assertTrue(paintMap0.equals((Object)object1));
      assertFalse(boolean0);
  }
}
