/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:13:11 GMT 2023
 */

package org.jfree.chart.imagemap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.entity.ChartEntity;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.imagemap.ImageMapUtils;
import org.jfree.chart.imagemap.ToolTipTagFragmentGenerator;
import org.jfree.chart.imagemap.URLTagFragmentGenerator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImageMapUtils_ESTest extends ImageMapUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartEntity chartEntity0 = mock(ChartEntity.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(chartEntity0).getToolTipText();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(chartEntity0).getURLText();
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn(chartEntity0, (ChartEntity) null, (ChartEntity) null, (ChartEntity) null, (ChartEntity) null).when(entityCollection0).getEntity(anyInt());
      doReturn(48).when(entityCollection0).getEntityCount();
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter0, "gq^#|{Zb)p7y}o", chartRenderingInfo0);
      EntityCollection entityCollection1 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn((ChartEntity) null).when(entityCollection1).getEntity(anyInt());
      doReturn(48).when(entityCollection1).getEntityCount();
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection1).when(chartRenderingInfo1).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImageMapUtils.getImageMap("gq^#|{Zb)p7y}o", chartRenderingInfo1, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn((ChartEntity) null).when(entityCollection0).getEntity(anyInt());
      doReturn(1).when(entityCollection0).getEntityCount();
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      // Undeclared exception!
      try { 
        ImageMapUtils.getImageMap("F", chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImageMapUtils.htmlEscape("X");
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn((ChartEntity) null).when(entityCollection0).getEntity(anyInt());
      doReturn(92).when(entityCollection0).getEntityCount();
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImageMapUtils.writeImageMap(printWriter0, "&amp;", chartRenderingInfo0, toolTipTagFragmentGenerator0, (URLTagFragmentGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entityCollection0).getEntityCount();
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.getImageMap("' s7po`", chartRenderingInfo0, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      EntityCollection entityCollection1 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entityCollection1).getEntityCount();
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection1).when(chartRenderingInfo1).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator1 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator1 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.getImageMap("8[<1fZlcy!s", chartRenderingInfo1, toolTipTagFragmentGenerator1, uRLTagFragmentGenerator1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entityCollection0).getEntityCount();
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.writeImageMap(printWriter0, "X!\"4JyfD_?'\"", chartRenderingInfo0, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ImageMapUtils.getImageMap(",9>~/Z", chartRenderingInfo0);
      ImageMapUtils imageMapUtils0 = new ImageMapUtils();
      ImageMapUtils.htmlEscape(",9>~/Z");
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo1).getEntityCollection();
      ImageMapUtils.getImageMap("#\"TFRSKA4Y", chartRenderingInfo1);
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo2 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo2).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.writeImageMap(printWriter0, ",9>~/Z", chartRenderingInfo2, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      ImageMapUtils.htmlEscape("*qe,QfmA*+%");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImageMapUtils.htmlEscape((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PrintWriter printWriter0 = null;
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImageMapUtils.writeImageMap((PrintWriter) null, (String) null, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImageMapUtils imageMapUtils0 = new ImageMapUtils();
      ImageMapUtils.javascriptEscape("4[3n%+2J)X");
      // Undeclared exception!
      try { 
        ImageMapUtils.javascriptEscape((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImageMapUtils.htmlEscape("'],Style[");
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter0, "11;di4 H4|^|./D", chartRenderingInfo0, true);
      ImageMapUtils imageMapUtils0 = new ImageMapUtils();
      ChartRenderingInfo chartRenderingInfo1 = null;
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImageMapUtils.getImageMap("", (ChartRenderingInfo) null, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "hD\"8K'|wY&Gc~SOy,4";
      ImageMapUtils.htmlEscape("hD\"8K'|wY&Gc~SOy,4");
      ImageMapUtils.javascriptEscape("org.jfree.chart.plot.PlotRenderingInfo");
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter0, "hD\"8K'|wY&Gc~SOy,4", chartRenderingInfo0);
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo1).getEntityCollection();
      ImageMapUtils.getImageMap("&gt;", chartRenderingInfo1);
      String string1 = "\"";
      ChartRenderingInfo chartRenderingInfo2 = null;
      // Undeclared exception!
      try { 
        ImageMapUtils.getImageMap("\"", (ChartRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImageMapUtils imageMapUtils0 = new ImageMapUtils();
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter0, "N0N=xjT^~:qi)", chartRenderingInfo0);
      PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo1).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter1, "G XePGF\"5W]63B:U&F", chartRenderingInfo1, true);
      PrintWriter printWriter2 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo2 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo2).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter2, "3[$&3", chartRenderingInfo2, true);
      PrintWriter printWriter3 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo3 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo3).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.writeImageMap(printWriter3, "org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator", chartRenderingInfo3, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      ImageMapUtils.htmlEscape("org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator");
      PrintWriter printWriter4 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo4 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImageMapUtils.writeImageMap(printWriter4, (String) null, chartRenderingInfo4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImageMapUtils.getImageMap((String) null, chartRenderingInfo0, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "&#092;";
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ImageMapUtils.getImageMap("&#092;", chartRenderingInfo0);
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo1).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.getImageMap("','", chartRenderingInfo1, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo2 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo2).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator1 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator1 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.writeImageMap(printWriter0, "<map id=\"&amp;#092;\" name=\"&amp;#092;\">\n</map>", chartRenderingInfo2, toolTipTagFragmentGenerator1, uRLTagFragmentGenerator1);
      ImageMapUtils imageMapUtils0 = new ImageMapUtils();
      ImageMapUtils.htmlEscape("");
      PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo3 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo3).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator2 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator2 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.writeImageMap(printWriter1, "&#092;", chartRenderingInfo3, toolTipTagFragmentGenerator2, uRLTagFragmentGenerator2);
      PrintWriter printWriter2 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo4 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo4).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter2, "<map id=\"&amp;#092;\" name=\"&amp;#092;\">\n</map>", chartRenderingInfo4);
      String string1 = null;
      ChartRenderingInfo chartRenderingInfo5 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImageMapUtils.getImageMap((String) null, chartRenderingInfo5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImageMapUtils.writeImageMap(printWriter0, (String) null, chartRenderingInfo0, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.writeImageMap(printWriter0, "ig;xs_/", chartRenderingInfo0, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImageMapUtils.javascriptEscape("");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "2O[K<:[,S8MPdyMwg";
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ImageMapUtils.getImageMap("2O[K<:[,S8MPdyMwg", chartRenderingInfo0);
      ImageMapUtils imageMapUtils0 = new ImageMapUtils();
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo1).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter0, "2O[K<:[,S8MPdyMwg", chartRenderingInfo1);
      PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo2 = null;
      // Undeclared exception!
      try { 
        ImageMapUtils.writeImageMap(printWriter1, "<map id=\"2O[K&lt;:[,S8MPdyMwg\" name=\"2O[K&lt;:[,S8MPdyMwg\">\n</map>", (ChartRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImageMapUtils.htmlEscape("<map id=\"");
      ImageMapUtils.javascriptEscape("&lt;map id=&quot;");
      PrintWriter printWriter0 = null;
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      // Undeclared exception!
      try { 
        ImageMapUtils.writeImageMap((PrintWriter) null, "&lt;map id=&quot;", chartRenderingInfo0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImageMapUtils.htmlEscape("S I`\"%#d4");
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter0, "c8m!N=n", chartRenderingInfo0, true);
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo1).getEntityCollection();
      ImageMapUtils.getImageMap("org.jfree.chart.imagemap.ImageMapUtils", chartRenderingInfo1);
      ImageMapUtils imageMapUtils0 = new ImageMapUtils();
      ChartRenderingInfo chartRenderingInfo2 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo2).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImageMapUtils.writeImageMap((PrintWriter) null, "</map>", chartRenderingInfo2, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ImageMapUtils.javascriptEscape("'],Style[");
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.getImageMap("=|2tpv2(p!w{'", chartRenderingInfo0, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo1).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator1 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator1 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.getImageMap("", chartRenderingInfo1, toolTipTagFragmentGenerator1, uRLTagFragmentGenerator1);
      ChartRenderingInfo chartRenderingInfo2 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo2).getEntityCollection();
      ImageMapUtils.getImageMap("", chartRenderingInfo2);
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo3 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImageMapUtils.writeImageMap(printWriter0, (String) null, chartRenderingInfo3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.getImageMap("'!CS^0%CQ", chartRenderingInfo0, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImageMapUtils.javascriptEscape("&#39;");
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter0, "&#39;", chartRenderingInfo0, true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entityCollection0).getEntityCount();
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.getImageMap("|^n@o", chartRenderingInfo0, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      EntityCollection entityCollection1 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entityCollection1).getEntityCount();
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection1).when(chartRenderingInfo1).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter0, "", chartRenderingInfo1);
      ImageMapUtils.javascriptEscape("<map id=\"|^n@o\" name=\"|^n@o\">\n</map>");
      ImageMapUtils.javascriptEscape("");
      PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      EntityCollection entityCollection2 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entityCollection2).getEntityCount();
      ChartRenderingInfo chartRenderingInfo2 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection2).when(chartRenderingInfo2).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter1, "\"", chartRenderingInfo2, true);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = null;
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImageMapUtils.getImageMap((String) null, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entityCollection0).getEntityCount();
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      ImageMapUtils.getImageMap("::X*", chartRenderingInfo0);
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.htmlEscape("x-?_FZn!t'HgjQi#M%P");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartEntity chartEntity0 = mock(ChartEntity.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(chartEntity0).getToolTipText();
      doReturn((String) null).when(chartEntity0).getURLText();
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn(chartEntity0, (ChartEntity) null).when(entityCollection0).getEntity(anyInt());
      doReturn(2241).when(entityCollection0).getEntityCount();
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImageMapUtils.writeImageMap(printWriter0, "", chartRenderingInfo0, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImageMapUtils imageMapUtils0 = new ImageMapUtils();
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entityCollection0).getEntityCount();
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.getImageMap("", chartRenderingInfo0, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      EntityCollection entityCollection1 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entityCollection1).getEntityCount();
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection1).when(chartRenderingInfo1).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator1 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator1 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.getImageMap("D7sX", chartRenderingInfo1, toolTipTagFragmentGenerator1, uRLTagFragmentGenerator1);
      EntityCollection entityCollection2 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entityCollection2).getEntityCount();
      ChartRenderingInfo chartRenderingInfo2 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection2).when(chartRenderingInfo2).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator2 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator2 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.getImageMap("(:X0", chartRenderingInfo2, toolTipTagFragmentGenerator2, uRLTagFragmentGenerator2);
      ChartRenderingInfo chartRenderingInfo3 = null;
      // Undeclared exception!
      try { 
        ImageMapUtils.getImageMap("{d$GQGOGsh^W", (ChartRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImageMapUtils.htmlEscape("cuEl");
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entityCollection0).getEntityCount();
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter0, "G- @O", chartRenderingInfo0, true);
      ImageMapUtils.htmlEscape("cuEl");
      ImageMapUtils.htmlEscape("cuEl");
      EntityCollection entityCollection1 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(entityCollection1).getEntityCount();
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection1).when(chartRenderingInfo1).getEntityCollection();
      ImageMapUtils.getImageMap("cuEl", chartRenderingInfo1);
      ChartRenderingInfo chartRenderingInfo2 = null;
      // Undeclared exception!
      try { 
        ImageMapUtils.getImageMap("org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator", (ChartRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "nJ~5uc^H ~50B`.f&\\";
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ImageMapUtils.getImageMap("nJ~5uc^H ~50B`.f&", chartRenderingInfo0, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      String string1 = null;
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImageMapUtils.getImageMap((String) null, chartRenderingInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = ImageMapUtils.javascriptEscape("?@ZC*-l!~]SBbp");
      assertEquals("?@ZC*-l!~]SBbp", string0);
      assertNotNull(string0);
      
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      String string1 = ImageMapUtils.getImageMap("?@ZC*-l!~]SBbp", chartRenderingInfo0);
      assertEquals("<map id=\"?@ZC*-l!~]SBbp\" name=\"?@ZC*-l!~]SBbp\">\n</map>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = ImageMapUtils.javascriptEscape("?@ZC*-l!~]SBbp");
      assertEquals("?@ZC*-l!~]SBbp", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo1).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter0, "&#092;", chartRenderingInfo1, false);
      ChartRenderingInfo chartRenderingInfo2 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo2).getEntityCollection();
      String string3 = ImageMapUtils.getImageMap("&#092;", chartRenderingInfo2);
      assertEquals("<map id=\"&amp;#092;\" name=\"&amp;#092;\">\n</map>", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      ChartRenderingInfo chartRenderingInfo3 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo3).getEntityCollection();
      String string4 = ImageMapUtils.getImageMap("g tYq", chartRenderingInfo3);
      assertEquals("<map id=\"g tYq\" name=\"g tYq\">\n</map>", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      ChartRenderingInfo chartRenderingInfo4 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo4).getEntityCollection();
      String string5 = ImageMapUtils.getImageMap("<map id=\"g tYq\" name=\"g tYq\">\n</map>", chartRenderingInfo4);
      assertEquals("<map id=\"&lt;map id=&quot;g tYq&quot; name=&quot;g tYq&quot;&gt;\n&lt;/map&gt;\" name=\"&lt;map id=&quot;g tYq&quot; name=&quot;g tYq&quot;&gt;\n&lt;/map&gt;\">\n</map>", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo5 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo5).getEntityCollection();
      ImageMapUtils.writeImageMap(printWriter1, "<map id=\"&amp;#092;\" name=\"&amp;#092;\">\n</map>", chartRenderingInfo5);
      ChartRenderingInfo chartRenderingInfo6 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo6).getEntityCollection();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      String string6 = ImageMapUtils.getImageMap("&#092;", chartRenderingInfo6, toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      assertEquals("<map id=\"&amp;#092;\" name=\"&amp;#092;\">\n</map>", string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = ImageMapUtils.htmlEscape("<map id=\"&amp;#092;\" name=\"&amp;#092;\">\n</map>");
      assertEquals("&lt;map id=&quot;&amp;amp;#092;&quot; name=&quot;&amp;amp;#092;&quot;&gt;\n&lt;/map&gt;", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      PrintWriter printWriter2 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo7 = null;
      // Undeclared exception!
      try { 
        ImageMapUtils.writeImageMap(printWriter2, "", (ChartRenderingInfo) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImageMapUtils imageMapUtils0 = new ImageMapUtils();
      ImageMapUtils.javascriptEscape("\"ev>3i+Q\"qO:Y^b%P<");
      ImageMapUtils.htmlEscape("");
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImageMapUtils.writeImageMap(printWriter0, "k`y6<6bR2``#I", (ChartRenderingInfo) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtils", e);
      }
  }
}
