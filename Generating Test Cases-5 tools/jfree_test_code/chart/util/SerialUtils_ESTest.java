/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:58:19 GMT 2023
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Composite;
import java.awt.GradientPaint;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.RadialGradientPaint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.TexturePaint;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.AttributedString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.SerialUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SerialUtils_ESTest extends SerialUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = true;
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream0).readBoolean();
      Shape shape0 = SerialUtils.readShape(objectInputStream0);
      assertNull(shape0);
      
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        SerialUtils.writeShape((Shape) null, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try { 
        SerialUtils.writeComposite((Composite) null, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.isSerializable((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<GradientPaint> class0 = GradientPaint.class;
      boolean boolean0 = SerialUtils.isSerializable(class0);
      assertFalse(boolean0);
      
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream0).readBoolean();
      Paint paint0 = SerialUtils.readPaint(objectInputStream0);
      assertNull(paint0);
      
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writePaint((Paint) null, objectOutputStream0);
      ObjectOutputStream objectOutputStream1 = null;
      // Undeclared exception!
      try { 
        SerialUtils.writePaint((Paint) null, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Arc2D.Float> class0 = Arc2D.Float.class;
      boolean boolean0 = SerialUtils.isSerializable(class0);
      assertTrue(boolean0);
      
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream0).readBoolean();
      Stroke stroke0 = SerialUtils.readStroke(objectInputStream0);
      assertNull(stroke0);
      
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeStroke((Stroke) null, objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      doReturn((-1.0), 3732.148736658).when(objectInputStream0).readDouble();
      Point2D.Double point2D_Double0 = (Point2D.Double)SerialUtils.readPoint2D(objectInputStream0);
      assertNotNull(point2D_Double0);
      assertEquals(3732.148736658, point2D_Double0.y, 0.01);
      assertEquals((-1.0), point2D_Double0.x, 0.01);
      
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeStroke((Stroke) null, objectOutputStream0);
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readStroke(objectInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream0).readBoolean();
      Point2D point2D0 = SerialUtils.readPoint2D(objectInputStream0);
      assertNull(point2D0);
      
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writePoint2D((Point2D) null, objectOutputStream0);
      ObjectInputStream objectInputStream1 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream1).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readPaint(objectInputStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream0).readBoolean();
      AttributedString attributedString0 = SerialUtils.readAttributedString(objectInputStream0);
      assertNull(attributedString0);
      
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try { 
        SerialUtils.writeAttributedString((AttributedString) null, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Paint paint0 = null;
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      doReturn(0.0, 0.0).when(objectInputStream0).readDouble();
      Point2D.Double point2D_Double0 = (Point2D.Double)SerialUtils.readPoint2D(objectInputStream0);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      SerialUtils.writePaint((Paint) null, objectOutputStream0);
      ObjectInputStream objectInputStream1 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream1).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readShape(objectInputStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream0).readBoolean();
      Paint paint0 = SerialUtils.readPaint(objectInputStream0);
      assertNull(paint0);
      
      ObjectInputStream objectInputStream1 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream1).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readPaint(objectInputStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream0).readBoolean();
      Shape shape0 = SerialUtils.readShape(objectInputStream0);
      assertNull(shape0);
      
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeShape((Shape) null, objectOutputStream0);
      ObjectInputStream objectInputStream1 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream1).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readComposite(objectInputStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point2D point2D0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try { 
        SerialUtils.writePoint2D((Point2D) null, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectOutputStream objectOutputStream0 = null;
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      doReturn(0.0, 0.0).when(objectInputStream0).readDouble();
      Point2D.Double point2D_Double0 = (Point2D.Double)SerialUtils.readPoint2D(objectInputStream0);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      // Undeclared exception!
      try { 
        SerialUtils.writePoint2D(point2D_Double0, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      doReturn(0.0, 0.0).when(objectInputStream0).readDouble();
      Point2D.Double point2D_Double0 = (Point2D.Double)SerialUtils.readPoint2D(objectInputStream0);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      ObjectInputStream objectInputStream1 = null;
      // Undeclared exception!
      try { 
        SerialUtils.readComposite((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try { 
        SerialUtils.readComposite((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeAttributedString((AttributedString) null, objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.writeAttributedString((AttributedString) null, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      doReturn(0.0, 0.0).when(objectInputStream0).readDouble();
      Point2D.Double point2D_Double0 = (Point2D.Double)SerialUtils.readPoint2D(objectInputStream0);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writePoint2D(point2D_Double0, objectOutputStream0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      ObjectOutputStream objectOutputStream1 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeShape((Shape) null, objectOutputStream1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<RadialGradientPaint> class0 = RadialGradientPaint.class;
      boolean boolean0 = SerialUtils.isSerializable(class0);
      assertFalse(boolean0);
      
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try { 
        SerialUtils.readAttributedString((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<GradientPaint> class0 = GradientPaint.class;
      boolean boolean0 = SerialUtils.isSerializable(class0);
      assertFalse(boolean0);
      
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try { 
        SerialUtils.readPoint2D((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try { 
        SerialUtils.readPoint2D((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<RadialGradientPaint> class0 = RadialGradientPaint.class;
      boolean boolean0 = SerialUtils.isSerializable(class0);
      assertFalse(boolean0);
      
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readStroke(objectInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writePoint2D((Point2D) null, objectOutputStream0);
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readShape(objectInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.readStroke((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectOutputStream objectOutputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try { 
        SerialUtils.readStroke((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Line2D.Float> class0 = Line2D.Float.class;
      boolean boolean0 = SerialUtils.isSerializable(class0);
      assertTrue(boolean0);
      
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readShape(objectInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try { 
        SerialUtils.readPaint((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readPaint(objectInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.readPaint((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readComposite(objectInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      doReturn(0.0, 0.0).when(objectInputStream0).readDouble();
      Point2D.Double point2D_Double0 = (Point2D.Double)SerialUtils.readPoint2D(objectInputStream0);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writePoint2D(point2D_Double0, objectOutputStream0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      ObjectInputStream objectInputStream1 = null;
      // Undeclared exception!
      try { 
        SerialUtils.readShape((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readAttributedString(objectInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      doReturn(0.0, 0.0).when(objectInputStream0).readDouble();
      Point2D.Double point2D_Double0 = (Point2D.Double)SerialUtils.readPoint2D(objectInputStream0);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      ObjectInputStream objectInputStream1 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream1).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readShape(objectInputStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialUtils.readShape((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream0).readBoolean();
      Shape shape0 = SerialUtils.readShape(objectInputStream0);
      assertNull(shape0);
      
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeShape((Shape) null, objectOutputStream0);
      ObjectInputStream objectInputStream1 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream1).readBoolean();
      Paint paint0 = SerialUtils.readPaint(objectInputStream1);
      assertNull(paint0);
      
      ObjectOutputStream objectOutputStream1 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writePaint((Paint) null, objectOutputStream1);
      ObjectInputStream objectInputStream2 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream2).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readStroke(objectInputStream2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream0).readBoolean();
      Stroke stroke0 = SerialUtils.readStroke(objectInputStream0);
      assertNull(stroke0);
      
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeStroke((Stroke) null, objectOutputStream0);
      ObjectInputStream objectInputStream1 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream1).readBoolean();
      AttributedString attributedString0 = SerialUtils.readAttributedString(objectInputStream1);
      assertNull(attributedString0);
      
      ObjectOutputStream objectOutputStream1 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeAttributedString((AttributedString) null, objectOutputStream1);
      ObjectInputStream objectInputStream2 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream2).readBoolean();
      Shape shape0 = SerialUtils.readShape(objectInputStream2);
      assertNull(shape0);
      
      ObjectOutputStream objectOutputStream2 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeShape((Shape) null, objectOutputStream2);
      ObjectInputStream objectInputStream3 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream3).readBoolean();
      Shape shape1 = SerialUtils.readShape(objectInputStream3);
      assertNull(shape1);
      
      ObjectInputStream objectInputStream4 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream4).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readComposite(objectInputStream4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ObjectOutputStream objectOutputStream0 = null;
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      doReturn(907.6, 907.6).when(objectInputStream0).readDouble();
      Point2D point2D0 = SerialUtils.readPoint2D(objectInputStream0);
      // Undeclared exception!
      try { 
        SerialUtils.writePoint2D(point2D0, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream0).readBoolean();
      SerialUtils.readPaint(objectInputStream0);
      ObjectInputStream objectInputStream1 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream1).readBoolean();
      SerialUtils.readStroke(objectInputStream1);
      ObjectInputStream objectInputStream2 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream2).readBoolean();
      SerialUtils.readStroke(objectInputStream2);
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeStroke((Stroke) null, objectOutputStream0);
      ObjectInputStream objectInputStream3 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream3).readBoolean();
      Paint paint0 = SerialUtils.readPaint(objectInputStream3);
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SerialUtils.isSerializable(class0);
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readStroke(objectInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream0).readBoolean();
      SerialUtils.readComposite(objectInputStream0);
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeComposite((Composite) null, objectOutputStream0);
      ObjectInputStream objectInputStream1 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream1).readBoolean();
      SerialUtils.readPoint2D(objectInputStream1);
      ObjectOutputStream objectOutputStream1 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writePoint2D((Point2D) null, objectOutputStream1);
      ObjectInputStream objectInputStream2 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream2).readBoolean();
      SerialUtils.readShape(objectInputStream2);
      ObjectOutputStream objectOutputStream2 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeShape((Shape) null, objectOutputStream2);
      ObjectInputStream objectInputStream3 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream3).readBoolean();
      SerialUtils.readStroke(objectInputStream3);
      ObjectOutputStream objectOutputStream3 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeStroke((Stroke) null, objectOutputStream3);
      ObjectInputStream objectInputStream4 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream4).readBoolean();
      SerialUtils.readAttributedString(objectInputStream4);
      ObjectOutputStream objectOutputStream4 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writePoint2D((Point2D) null, objectOutputStream4);
      ObjectInputStream objectInputStream5 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream5).readBoolean();
      SerialUtils.readShape(objectInputStream5);
      ObjectInputStream objectInputStream6 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream6).readBoolean();
      SerialUtils.readAttributedString(objectInputStream6);
      ObjectOutputStream objectOutputStream5 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeComposite((Composite) null, objectOutputStream5);
      ObjectOutputStream objectOutputStream6 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeAttributedString((AttributedString) null, objectOutputStream6);
      ObjectOutputStream objectOutputStream7 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeComposite((Composite) null, objectOutputStream7);
      ObjectInputStream objectInputStream7 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream7).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readAttributedString(objectInputStream7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream0).readBoolean();
      SerialUtils.readComposite(objectInputStream0);
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writeComposite((Composite) null, objectOutputStream0);
      ObjectInputStream objectInputStream1 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream1).readBoolean();
      doReturn(0.0, 0.0).when(objectInputStream1).readDouble();
      Point2D point2D0 = SerialUtils.readPoint2D(objectInputStream1);
      ObjectOutputStream objectOutputStream1 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writePoint2D(point2D0, objectOutputStream1);
      ObjectInputStream objectInputStream2 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream2).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readShape(objectInputStream2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream0).readBoolean();
      SerialUtils.readPaint(objectInputStream0);
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      SerialUtils.writePaint((Paint) null, objectOutputStream0);
      ObjectInputStream objectInputStream1 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInputStream1).readBoolean();
      SerialUtils.readStroke(objectInputStream1);
      ObjectInputStream objectInputStream2 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream2).readBoolean();
      // Undeclared exception!
      try { 
        SerialUtils.readPaint(objectInputStream2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try { 
        SerialUtils.readAttributedString((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtils", e);
      }
  }
}
