/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:19:58 GMT 2023
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Scrollbar;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.IllegalPathStateException;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.PathIterator;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.util.Locale;
import javax.swing.DebugGraphics;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JList;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.SpinnerListModel;
import javax.swing.border.BevelBorder;
import javax.swing.plaf.basic.BasicTextPaneUI;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.plaf.multi.MultiTextUI;
import javax.swing.plaf.multi.MultiTreeUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.JTextComponent;
import javax.swing.text.PlainDocument;
import javax.swing.text.Position;
import javax.swing.tree.FixedHeightLayoutCache;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.util.ShapeUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ShapeUtils_ESTest extends ShapeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GeneralPath generalPath0 = (GeneralPath)ShapeUtils.createDiamond(0.0F);
      ShapeUtils.createDiamond((-1802.0F));
      GeneralPath generalPath1 = (GeneralPath)ShapeUtils.createDiagonalCross(0.0F, 0.0F);
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      Locale locale0 = Locale.JAPANESE;
      JComponent.setDefaultLocale(locale0);
      ShapeUtils.equal(generalPath0, generalPath1);
      GeneralPath generalPath2 = new GeneralPath();
      ShapeUtils.equal(generalPath2, generalPath2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShapeUtils.createRegularCross(0.0F, 0.0F);
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(0.0F, 450.387F, (-2803.2266F), 0.0F, 0.0F, 0.0F, 0);
      Dimension dimension0 = new Dimension(0, 0);
      Rectangle rectangle0 = new Rectangle(dimension0);
      Arc2D.Float arc2D_Float1 = new Arc2D.Float();
      arc2D_Float0.setArc((Arc2D) arc2D_Float1);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(rectangle0, 442.7359438, 0.0F, 0);
      ShapeUtils.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Double0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Point2D.Float point2D_Float0 = new Point2D.Float();
      Line2D.Double line2D_Double0 = new Line2D.Double(point2D_Float0, point2D_Float0);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      Point point0 = rectangle0.getLocation();
      point0.move(0, 0);
      line2D_Double0.y2 = 0.0;
      ShapeUtils.equal((Arc2D) null, (Arc2D) null);
      ShapeUtils.isPointInRect(rectangle0, 0, 125.555);
      Polygon polygon0 = new Polygon();
      polygon0.contains((Point2D) point0);
      ShapeUtils.equal(polygon0, polygon0);
      ShapeUtils.createRegularCross(0.0F, 3466.135F);
      ShapeUtils.equal((Arc2D) null, (Arc2D) null);
      ShapeUtils.equal((Arc2D) null, (Arc2D) null);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      ShapeUtils.createTranslatedShape((Shape) rectangle0, rectangleAnchor0, 2.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShapeUtils.equal((Ellipse2D) null, (Ellipse2D) null);
      ShapeUtils.equal((Shape) null, (Shape) null);
      int int0 = (-1946);
      Arc2D.Float arc2D_Float0 = null;
      try {
        arc2D_Float0 = new Arc2D.Float((-1946));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid type for Arc: -1946
         //
         verifyException("java.awt.geom.Arc2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      generalPath0.moveTo((-2693.3F), 0.0F);
      rectangle2D_Double0.width = (double) (-1788);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance((-1788), 0.0, (-1788.0));
      affineTransform0.createTransformedShape(rectangle2D_Double0);
      PathIterator pathIterator0 = rectangle2D_Double0.getPathIterator(affineTransform0, 796.03);
      Path2D.contains(pathIterator0, 796.03, 0.0);
      ShapeUtils.equal(generalPath0, generalPath0);
      Shape shape0 = ShapeUtils.createTranslatedShape((Shape) generalPath0, 0.0, (-1788.0));
      ShapeUtils.clone(rectangle2D_Double0);
      ShapeUtils.intersects(rectangle2D_Double0, rectangle2D_Double0);
      ShapeUtils.rotateShape(rectangle2D_Double0, (-479.9987), (-2887.187F), 2.0F);
      ShapeUtils.contains(rectangle2D_Double0, rectangle2D_Double0);
      ShapeUtils.clone(shape0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      ShapeUtils.createTranslatedShape(shape0, rectangleAnchor0, 1088.234415492, (double) 2.0F);
      ShapeUtils.createRegularCross(2.0F, (-1788));
      Line2D.Double line2D_Double0 = new Line2D.Double();
      line2D_Double0.clone();
      ShapeUtils.createLineRegion(line2D_Double0, 2.0F);
      ShapeUtils.createDownTriangle((-166.56801F));
      Line2D.Float line2D_Float0 = new Line2D.Float((-5529.0F), (-5529.0F), (-1788), 2415.038F);
      ShapeUtils.equal((Line2D) line2D_Float0, (Line2D) line2D_Float0);
      line2D_Float0.setLine((Line2D) line2D_Double0);
      ShapeUtils.createDiagonalCross(0.0F, (-3118.762F));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float float0 = (-1786.8042F);
      Shape shape0 = ShapeUtils.createDiamond((-1786.8042F));
      Shape shape1 = ShapeUtils.createDownTriangle((-1786.8042F));
      ShapeUtils.equal(shape1, shape1);
      GeneralPath generalPath0 = new GeneralPath(shape0);
      ShapeUtils.equal(generalPath0, generalPath0);
      ShapeUtils.equal(generalPath0, generalPath0);
      ShapeUtils.equal(shape0, shape1);
      int int0 = 0;
      Color color0 = Color.PINK;
      BevelBorder bevelBorder0 = new BevelBorder(0, color0, color0, color0, color0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) bevelBorder0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) bevelBorder0;
      objectArray0[3] = (Object) color0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) color0;
      SpinnerListModel spinnerListModel0 = new SpinnerListModel(objectArray0);
      JSpinner jSpinner0 = new JSpinner(spinnerListModel0);
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor(jSpinner0, "Null 'shape' argument.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShapeUtils.createRegularCross(0.0F, (-1.0F));
      Arc2D.Float arc2D_Float0 = new Arc2D.Float((-1.0F), 450.387F, (-2803.2266F), 0.0F, 0.0F, 0.0F, 0);
      Dimension dimension0 = new Dimension(0, 0);
      Rectangle rectangle0 = new Rectangle(dimension0);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(rectangle0, 442.7359438, 0.0F, 0);
      ShapeUtils.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Double0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float((-2035.8749F), (-1768.0F), (-1768.0F), (-1768.0F), (-1768.0F), (-1768.0F), 0);
      arc2D_Float0.setAngleStart(0.0);
      double double0 = 359.131;
      arc2D_Float0.setArc((double) (-1768.0F), (double) (-2035.8749F), (double) (-1768.0F), (-3321.9), 0.0, 359.131, 0);
      ShapeUtils.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Float0);
      ShapeUtils.equal((Shape) arc2D_Float0, (Shape) arc2D_Float0);
      ShapeUtils.equal((Shape) arc2D_Float0, (Shape) arc2D_Float0);
      Line2D.Double line2D_Double0 = new Line2D.Double(1460.156, 5.1, Double.NEGATIVE_INFINITY, 256.922925269564);
      ShapeUtils.createLineRegion(line2D_Double0, (-1768.0F));
      MultiTextUI multiTextUI0 = new MultiTextUI();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Position.Bias position_Bias0 = Position.Bias.Forward;
      // Undeclared exception!
      try { 
        multiTextUI0.modelToView((JTextComponent) jTextPane0, 0, position_Bias0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rectangle2D rectangle2D0 = null;
      double double0 = 168.289;
      // Undeclared exception!
      try { 
        ShapeUtils.isPointInRect((Rectangle2D) null, 168.289, 168.289);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        ShapeUtils.contains((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ShapeUtils.createTranslatedShape((Shape) null, (-2784.62), (-2784.62));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = ShapeUtils.createDiamond(0.0F);
      GeneralPath generalPath0 = new GeneralPath(shape0);
      ShapeUtils.equal(generalPath0, generalPath0);
      ShapeUtils.createRegularCross(0.0F, (-737.274F));
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      ShapeUtils.equal((Arc2D) arc2D_Double0, (Arc2D) null);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      ShapeUtils.isPointInRect(rectangle0, 0.0, (-892.91));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = ShapeUtils.createRegularCross((-2417.11F), (-3065.502F));
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float((-2417.11F), (-2417.11F), (-3065.502F), (-3065.502F));
      ShapeUtils.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) ellipse2D_Float0);
      ShapeUtils.equal(shape0, (Shape) ellipse2D_Float0);
      Shape shape1 = ShapeUtils.createTranslatedShape((Shape) ellipse2D_Float0, (double) (-2417.11F), 0.0);
      ShapeUtils.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) ellipse2D_Float0);
      ShapeUtils.equal(shape1, shape0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(231.0F, 231.0F, 0.0F, 0.0F);
      Point2D point2D0 = rectangleAnchor0.getAnchorPoint(rectangle2D_Float0);
      Line2D.Float line2D_Float0 = new Line2D.Float(point2D0, point2D0);
      line2D_Float0.x1 = 622.4091F;
      line2D_Float0.setLine((-1848.099986), (double) 231.0F, (double) 0.0F, (double) 231.0F);
      ShapeUtils.createTranslatedShape((Shape) line2D_Float0, (double) 231.0F, (-1154.1969503975));
      ShapeUtils.isPointInRect(rectangle2D_Float0, 0.0, 0.0);
      ShapeUtils.createUpTriangle(0.0F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShapeUtils.createUpTriangle(4708.422F);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(4708.422F, 0.0F, 4708.422F, 4708.422F);
      ShapeUtils.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) null);
      ShapeUtils.createTranslatedShape((Shape) ellipse2D_Float0, 696.2690702928, 45.0);
      ShapeUtils.createRegularCross(0.0F, (-39.874F));
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(211.4468454, (double) (-39.874F), 1777.066, 0.0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, (-1510));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: -1510
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 4977.473F, 4977.473F, 0.0F);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      ShapeUtils.isPointInRect(rectangle2D0, 0.0F, 0.0F);
      ShapeUtils.intersects(rectangle2D_Float0, rectangle2D_Float0);
      ShapeUtils.intersects(rectangle2D_Float0, rectangle2D_Float0);
      ShapeUtils.intersects(rectangle2D_Float0, rectangle2D_Float0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      ShapeUtils.createTranslatedShape((Shape) rectangle2D_Float0, rectangleAnchor0, (double) 4977.473F, (double) 0.0F);
      Arc2D.Double arc2D_Double0 = null;
      try {
        arc2D_Double0 = new Arc2D.Double(0.0F, 4977.473F, 4977.473F, (-4648.5446), 119.0, 2116.12, 2015);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid type for Arc: 2015
         //
         verifyException("java.awt.geom.Arc2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(0.5, (-4282.39), 0.5, 0.0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(2744.1147F, 2744.1147F, 2744.1147F, 2744.1147F);
      ellipse2D_Double0.setFrame((Rectangle2D) rectangle2D_Float0);
      Rectangle rectangle0 = ellipse2D_Double0.getBounds();
      rectangle0.setRect(2744.11474609375, (double) 2744.1147F, (-3388.44178731), (-2368.4367716143875));
      rectangle0.add((-1), (-214));
      ShapeUtils.getPointInRectangle((-4282.39), (-4282.39), rectangle0);
      rectangle2D_Float0.setRect((-4323.1465539908), 1.0, 1949.0, 0.0);
      Shape shape0 = ShapeUtils.createTranslatedShape((Shape) ellipse2D_Double0, 106.44, 0.5);
      ShapeUtils.intersects(rectangle2D_Float0, rectangle0);
      ShapeUtils.createDownTriangle((-832.82556F));
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      ShapeUtils.createTranslatedShape(shape0, rectangleAnchor0, (-2188.871), (-341.075881));
      Line2D.Float line2D_Float0 = new Line2D.Float();
      ShapeUtils.clone(line2D_Float0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ShapeUtils.intersects((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JTableHeader jTableHeader0 = new JTableHeader();
      TableColumnModel tableColumnModel0 = jTableHeader0.getColumnModel();
      JTable jTable0 = new JTable((TableModel) null, tableColumnModel0);
      Rectangle rectangle0 = jTable0.getVisibleRect();
      ShapeUtils.intersects(rectangle0, rectangle0);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(rectangle0, 0, 0, 0);
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(0);
      ShapeUtils.equal((Arc2D) arc2D_Double0, (Arc2D) arc2D_Float0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShapeUtils.equal((Arc2D) null, (Arc2D) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      ShapeUtils.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) ellipse2D_Float0);
      ShapeUtils.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) ellipse2D_Float0);
      Size2D size2D0 = new Size2D();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 0.0F, 0.0, rectangleAnchor0);
      ShapeUtils.getPointInRectangle((-1309.3371628), (-563.3097673), rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(0.0, 0.0, 2.0, 4.0);
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      Shape shape0 = ShapeUtils.clone(rectangle2D0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      ShapeUtils.createTranslatedShape(shape0, rectangleAnchor0, 0.0, 3050.0);
      ellipse2D_Double0.height = 2.0;
      ShapeUtils.isPointInRect(rectangle2D0, 0.0, 0.0);
      ShapeUtils.contains(rectangle2D0, rectangle2D0);
      float float0 = 1.0F;
      ShapeUtils.createDiagonalCross(1.0F, 1.0F);
      // Undeclared exception!
      try { 
        ShapeUtils.drawRotatedShape((Graphics2D) null, rectangle2D0, 2.0, (-3314.6873F), (-3314.6873F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ShapeUtils.createUpTriangle(0.0F);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle rectangle0 = line2D_Float0.getBounds();
      rectangle0.add(2188, 2188);
      rectangle0.intersects(0.0, (double) 0.0F, (-2614.11246133), 1352.8462302476);
      ShapeUtils.equal((Line2D) line2D_Float0, (Line2D) line2D_Float0);
      // Undeclared exception!
      try { 
        ShapeUtils.drawRotatedShape((Graphics2D) null, rectangle0, 2188, 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(0.0, 0.0, (-1507.44806), 0.0);
      Line2D.Double line2D_Double1 = new Line2D.Double();
      ShapeUtils.equal((Line2D) line2D_Double0, (Line2D) line2D_Double1);
      Shape shape0 = ShapeUtils.createRegularCross(5250.0F, 0.0F);
      FixedHeightLayoutCache fixedHeightLayoutCache0 = new FixedHeightLayoutCache();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) shape0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) line2D_Double0;
      objectArray0[3] = (Object) fixedHeightLayoutCache0;
      objectArray0[4] = (Object) line2D_Double1;
      objectArray0[5] = (Object) shape0;
      objectArray0[6] = (Object) shape0;
      objectArray0[7] = (Object) fixedHeightLayoutCache0;
      JTree jTree0 = new JTree(objectArray0);
      jTree0.getSelectionPath();
      MultiListUI multiListUI0 = new MultiListUI();
      JList<MockCalendar> jList0 = new JList<MockCalendar>();
      // Undeclared exception!
      try { 
        multiListUI0.getCellBounds(jList0, (-2018), 1005);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float(1.0F, 1.0F, 2008.2F, 1.0F);
      Point2D point2D0 = line2D_Float0.getP2();
      Line2D.Float line2D_Float1 = new Line2D.Float(point2D0, point2D0);
      ShapeUtils.equal((Line2D) line2D_Float1, (Line2D) line2D_Float0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.setLine(507.29201, 507.29201, Double.NaN, 1386.7949905475);
      ShapeUtils.equal((Line2D) line2D_Float0, (Line2D) line2D_Float0);
      ShapeUtils.rotateShape(line2D_Float0, 507.29202F, 2.0F, (-1314.12F));
      int[] intArray0 = new int[6];
      intArray0[0] = 274;
      intArray0[1] = (-1668);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 516;
      intArray0[5] = 764;
      Polygon polygon0 = null;
      try {
        polygon0 = new Polygon(intArray0, intArray0, 2435);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // npoints > xpoints.length || npoints > ypoints.length
         //
         verifyException("java.awt.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Size2D size2D0 = new Size2D();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 0.0, (-2488.5117), rectangleAnchor0);
      ShapeUtils.createTranslatedShape((Shape) rectangle2D0, 3311.97, (-202.35095195));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(0.0, 0.0, 0.0, 1163.103209285);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      ShapeUtils.createTranslatedShape((Shape) rectangle2D0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(20.1, 575.095145596, (-4110.63), 575.095145596);
      line2D_Double0.y2 = 1.0;
      ShapeUtils.createLineRegion(line2D_Double0, 208.19646F);
      Shape shape0 = ShapeUtils.createRegularCross(208.19646F, 0.0F);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      ShapeUtils.createTranslatedShape(shape0, rectangleAnchor0, 1.0, (double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      line2D_Double0.x1 = 0.0;
      Line2D.Double line2D_Double1 = new Line2D.Double(2.0, 102004.0, 0.8, 0.0);
      line2D_Double0.setLine((Line2D) line2D_Double1);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      line2D_Double1.x2 = (double) 2;
      ShapeUtils.isPointInRect(rectangle0, 102004.0, 0.8);
      ShapeUtils.equal((Shape) rectangle0, (Shape) line2D_Double1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      line2D_Double0.x1 = 0.0;
      line2D_Double0.y2 = (-1838.99);
      line2D_Double0.y1 = 0.0;
      line2D_Double0.x1 = (-1.0);
      ShapeUtils.equal((Line2D) line2D_Double0, (Line2D) line2D_Double0);
      ShapeUtils.equal((Shape) line2D_Double0, (Shape) line2D_Double0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ShapeUtils.rotateShape((Shape) null, (-524.152654), 0.0F, 470.0F);
      ShapeUtils.equal((Shape) null, (Shape) null);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      ShapeUtils.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) ellipse2D_Float0);
      float float0 = 230.353F;
      ellipse2D_Float0.y = 230.353F;
      Scrollbar scrollbar0 = null;
      try {
        scrollbar0 = new Scrollbar(0, 0, 0, 0, 365);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      rectangle2D_Double0.add(rectangle2D0);
      ShapeUtils.isPointInRect(rectangle2D_Double0, 0.0, 0.0);
      ShapeUtils.intersects(rectangle2D0, rectangle2D_Double0);
      ShapeUtils.createDownTriangle(0.0F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 0.0F, 0.0F, 0.0F);
      line2D_Float0.x2 = 0.0F;
      ShapeUtils.equal((Line2D) line2D_Float0, (Line2D) line2D_Float0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.x1 = (-2447.4775F);
      ShapeUtils.createLineRegion(line2D_Float0, 0.0F);
      line2D_Float0.clone();
      Line2D.Float line2D_Float1 = new Line2D.Float((-1.0F), 0.0F, (-1.0F), 0.0F);
      line2D_Float0.setLine((Line2D) line2D_Float1);
      ShapeUtils.rotateShape(line2D_Float0, (-3624.04029), 0.0F, 1144.0137F);
      ShapeUtils.createUpTriangle((-1.0F));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double((-4185.0), (-4185.0), (-445.27962779193), (-4185.0));
      ShapeUtils.createLineRegion(line2D_Double0, (-3664.202F));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ShapeUtils.equal((Shape) null, (Shape) null);
      ShapeUtils.createUpTriangle((-1.0F));
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(821.6807272925055, (-1.0F), 19.570441, 0.0);
      ellipse2D_Double0.setFrameFromCenter(0.0, (double) (-1873.5192F), (-1596.764253507), (double) (-1.0F));
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float((-1873.5192F), (-1873.5192F), 1.0F, 2046.162F);
      ellipse2D_Float0.setFrame(997.3F, 1.0F, (-1873.5192F), 1.0F);
      ShapeUtils.equal((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Float0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((-996.02484), (-996.02484), (-996.02484), (-5869.66411703877));
      ellipse2D_Double0.y = 0.5;
      ShapeUtils.equal((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Double0);
      ShapeUtils.equal((Polygon) null, (Polygon) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float float0 = 1.0F;
      Shape shape0 = ShapeUtils.createDiamond(1.0F);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      ShapeUtils.createTranslatedShape(shape0, rectangleAnchor0, (double) 1.0F, (double) 1.0F);
      Line2D line2D0 = mock(Line2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(line2D0).getX1();
      doReturn(0.0).when(line2D0).getX2();
      doReturn(0.0).when(line2D0).getY1();
      doReturn(0.0).when(line2D0).getY2();
      ShapeUtils.createLineRegion(line2D0, 1.0F);
      ShapeUtils.createUpTriangle(0.0F);
      Shape shape1 = ShapeUtils.createDiamond(1.0F);
      double double0 = (-1.0);
      Shape shape2 = ShapeUtils.rotateShape(shape1, (-1.0), 1254.477F, 1.0F);
      ShapeUtils.equal(shape2, shape2);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0, 0.0).when(rectangle2D0).getX();
      doReturn(0.0, 0.0).when(rectangle2D0).getY();
      ShapeUtils.intersects(rectangle2D0, rectangle2D0);
      double double1 = (-1061.9333721336);
      // Undeclared exception!
      try { 
        ShapeUtils.getPointInRectangle((-1061.9333721336), (-1061.9333721336), (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = ShapeUtils.createRegularCross((-1.0F), (-1.0F));
      Shape shape1 = ShapeUtils.rotateShape(shape0, (-1.0), (-1.0F), (-1.0F));
      ShapeUtils.clone(shape1);
      Line2D line2D0 = mock(Line2D.class, new ViolatedAssumptionAnswer());
      doReturn((Point2D) null, (Point2D) null).when(line2D0).getP1();
      // Undeclared exception!
      try { 
        ShapeUtils.equal(line2D0, line2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ShapeUtils.clone((Shape) null);
      ShapeUtils.createRegularCross(33.371193F, 33.371193F);
      int int0 = 0;
      int int1 = 618;
      GeneralPath generalPath0 = new GeneralPath(0, 618);
      double double0 = (-3751.4);
      double double1 = 305.90428;
      // Undeclared exception!
      try { 
        generalPath0.curveTo(0.0F, 42.24697F, 1.0F, (float) 0, (float) 618, (float) 618);
        fail("Expecting exception: IllegalPathStateException");
      
      } catch(IllegalPathStateException e) {
         //
         // missing initial moveto in path definition
         //
         verifyException("java.awt.geom.Path2D$Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ShapeUtils.createRegularCross((-350.0F), (-350.0F));
      Line2D.Float line2D_Float0 = new Line2D.Float((-1.0F), 191.274F, (-1.0F), 191.274F);
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      ShapeUtils.getPointInRectangle((-350.0F), (-350.0F), rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(102.0, 185.94832042422, 0.0, 0.5);
      Shape shape0 = ShapeUtils.clone(rectangle2D_Double0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      ShapeUtils.createTranslatedShape(shape0, rectangleAnchor0, 2.0, 0.5);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      // Undeclared exception!
      try { 
        ShapeUtils.createTranslatedShape((Shape) null, rectangleAnchor0, (-2738.2436582786), (-2738.2436582786));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      ShapeUtils.equal((Shape) rectangle0, (Shape) rectangle0);
      ShapeUtils.createDownTriangle(0);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      ShapeUtils.equal((Ellipse2D) null, (Ellipse2D) ellipse2D_Float0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      ShapeUtils.rotateShape(ellipse2D_Float0, 0.0, 1068.1824F, 235.7F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      ShapeUtils.equal((Line2D) line2D_Float0, (Line2D) line2D_Float0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ShapeUtils.createRegularCross((-1585.8F), (-1585.8F));
      Line2D.Float line2D_Float0 = new Line2D.Float();
      ShapeUtils.createLineRegion(line2D_Float0, 323.0F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      float float0 = (-1.0F);
      Shape shape0 = ShapeUtils.createDiamond((-1.0F));
      ShapeUtils.equal(shape0, shape0);
      float float1 = 3765.4F;
      ShapeUtils.createDiamond(3765.4F);
      float float2 = (-1298.592F);
      ShapeUtils.createRegularCross((-1298.592F), (-1.0F));
      Line2D line2D0 = null;
      ShapeUtils.equal((Line2D) null, (Line2D) null);
      // Undeclared exception!
      try { 
        ShapeUtils.createLineRegion((Line2D) null, 725.0151F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1850;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      polygon0.ypoints = intArray0;
      polygon0.contains((-2257.107526229389), (-2257.107526229389));
      polygon0.getBounds2D();
      ShapeUtils.equal(polygon0, polygon0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        ShapeUtils.intersects((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double((-1.0), 0.0, 857.21220024602, (-1.0));
      line2D_Double0.y2 = 857.21220024602;
      line2D_Double0.clone();
      ShapeUtils.createLineRegion(line2D_Double0, (-2244.6F));
      PlainDocument plainDocument0 = new PlainDocument();
      JTextArea jTextArea0 = new JTextArea(plainDocument0, "=%do}Vx", 0, 3099);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextArea0.new AccessibleJTextComponent();
      jTextArea0.setAutoscrolls(true);
      jTextComponent_AccessibleJTextComponent0.getTextBounds((-1), 620);
      GeneralPath generalPath0 = null;
      try {
        generalPath0 = new GeneralPath((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = null;
      try {
        arc2D_Float0 = new Arc2D.Float(521.94604F, 730.88367F, 521.94604F, 521.94604F, 730.88367F, 730.88367F, (-3646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid type for Arc: -3646
         //
         verifyException("java.awt.geom.Arc2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Shape shape0 = ShapeUtils.createDownTriangle(1.0F);
      Shape shape1 = ShapeUtils.createDownTriangle((-1067.831F));
      ShapeUtils.clone(shape1);
      ShapeUtils.createRegularCross((-1067.831F), 402.99F);
      ShapeUtils.clone(shape0);
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      JTree jTree0 = null;
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      int int0 = (-5228);
      // Undeclared exception!
      try { 
        multiTreeUI0.getClosestPathForLocation((JTree) null, 2551, (-5228));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Shape shape0 = ShapeUtils.createDiamond(0.0F);
      ShapeUtils.createDiamond((-1802.0F));
      ShapeUtils.createDiagonalCross(0.0F, (-1.0F));
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      JTable jTable0 = new JTable();
      Locale locale0 = Locale.JAPANESE;
      JComponent.setDefaultLocale(locale0);
      Dimension dimension0 = basicTreeUI0.getPreferredSize((JComponent) jTable0, false);
      dimension0.width = 3281;
      Rectangle rectangle0 = new Rectangle(dimension0);
      boolean boolean0 = ShapeUtils.intersects(rectangle0, rectangle0);
      ShapeUtils.equal(shape0, shape0);
      boolean boolean1 = ShapeUtils.contains(rectangle0, rectangle0);
      assertTrue(boolean1 == boolean0);
      
      GeneralPath generalPath0 = new GeneralPath();
      boolean boolean2 = ShapeUtils.equal(generalPath0, generalPath0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, 1);
      int int0 = 973;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(0, 973, 973);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 973
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }
}
