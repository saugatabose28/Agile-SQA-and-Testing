/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:07:14 GMT 2023
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Paint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.AbstractObjectList;
import org.jfree.chart.util.PaintList;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaintList_ESTest extends PaintList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      paintList0.getPaint(1798);
      paintList0.setPaint(1798, (Paint) null);
      paintList0.equals(paintList0);
      PaintList paintList1 = new PaintList();
      paintList0.equals(paintList1);
      paintList0.getPaint(1798);
      paintList1.getPaint(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      int int0 = 936;
      int int1 = 767;
      paintList0.getPaint(767);
      paintList0.clear();
      paintList0.equals((Object) null);
      paintList0.setPaint(936, (Paint) null);
      paintList0.set(936, (Object) null);
      Object object0 = paintList0.clone();
      paintList0.equals(object0);
      paintList0.equals((Object) null);
      paintList0.equals(object0);
      int int2 = 2752;
      paintList0.getPaint(2752);
      // Undeclared exception!
      paintList0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      paintList0.clear();
      int int0 = 0;
      Object object0 = paintList0.clone();
      paintList0.set(0, object0);
      paintList0.clone();
      paintList0.hashCode();
      // Undeclared exception!
      try { 
        paintList0.getPaint(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.util.PaintList cannot be cast to java.awt.Paint
         //
         verifyException("org.jfree.chart.util.PaintList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      int int0 = 0;
      paintList0.set(0, ";7");
      PaintList paintList1 = new PaintList();
      // Undeclared exception!
      try { 
        paintList0.equals(paintList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.awt.Paint
         //
         verifyException("org.jfree.chart.util.PaintList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      Object object0 = paintList0.clone();
      paintList0.equals(object0);
      paintList0.getPaint(0);
      paintList0.setPaint(0, (Paint) null);
      paintList0.setPaint(0, (Paint) null);
      // Undeclared exception!
      try { 
        paintList0.setPaint((-1156), (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      paintList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      Paint paint0 = paintList0.getPaint(0);
      assertNull(paint0);
      
      paintList0.setPaint(0, (Paint) null);
      paintList0.setPaint(0, (Paint) null);
      Object object0 = paintList0.clone();
      paintList0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      paintList0.get(0);
      paintList0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      PaintList paintList1 = new PaintList();
      Object object0 = paintList1.clone();
      paintList0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      paintList0.equals("Pf%#o5bTc[s/x^");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      paintList0.setPaint(1759, (Paint) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      paintList0.clear();
      paintList0.get(2068);
      paintList0.equals((Object) null);
      paintList0.getPaint(167);
      paintList0.clear();
      paintList0.equals((Object) null);
      paintList0.equals((Object) null);
      paintList0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      paintList0.getPaint((-2339));
      paintList0.setPaint(530, (Paint) null);
      paintList0.getPaint((-3799));
      PaintList paintList1 = (PaintList)paintList0.clone();
      paintList0.equals(paintList1);
      paintList1.clone();
      paintList0.setPaint(530, (Paint) null);
      int int0 = AbstractObjectList.DEFAULT_INITIAL_CAPACITY;
      // Undeclared exception!
      try { 
        paintList0.setPaint((-3799), (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      paintList0.getPaint(0);
      paintList0.setPaint(0, (Paint) null);
      paintList0.hashCode();
      paintList0.equals((Object) null);
      paintList0.setPaint(0, (Paint) null);
      boolean boolean0 = paintList0.equals(paintList0);
      assertEquals(1, paintList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      paintList0.set(0, "");
      paintList0.getPaint(669);
      paintList0.equals((Object) null);
      paintList0.equals("<0Lj");
      paintList0.hashCode();
  }
}
