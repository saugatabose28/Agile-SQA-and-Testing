/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:49:52 GMT 2023
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Paint;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.WritableRaster;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.PaintAlpha;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaintAlpha_ESTest extends PaintAlpha_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = PaintAlpha.setLegacyAlpha(true);
      boolean boolean1 = PaintAlpha.setLegacyAlpha(true);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Paint paint0 = PaintAlpha.darker((Paint) null);
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WritableRaster writableRaster0 = mock(WritableRaster.class, new ViolatedAssumptionAnswer());
      WritableRaster writableRaster1 = mock(WritableRaster.class, new ViolatedAssumptionAnswer());
      doReturn(writableRaster0).when(writableRaster1).createCompatibleWritableRaster();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn("", (Object) null).when(bufferedImage0).getProperty(anyString());
      doReturn(stringArray0).when(bufferedImage0).getPropertyNames();
      doReturn(writableRaster1).when(bufferedImage0).getRaster();
      // Undeclared exception!
      try { 
        PaintAlpha.cloneImage(bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WritableRaster writableRaster0 = mock(WritableRaster.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(writableRaster0).toString();
      WritableRaster writableRaster1 = mock(WritableRaster.class, new ViolatedAssumptionAnswer());
      doReturn(writableRaster0).when(writableRaster1).createCompatibleWritableRaster();
      ColorModel colorModel0 = mock(ColorModel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(colorModel0).isCompatibleRaster(any(java.awt.image.Raster.class));
      doReturn((String) null).when(colorModel0).toString();
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(colorModel0).when(bufferedImage0).getColorModel();
      doReturn((String[]) null).when(bufferedImage0).getPropertyNames();
      doReturn(writableRaster1).when(bufferedImage0).getRaster();
      doReturn(true).when(bufferedImage0).isAlphaPremultiplied();
      // Undeclared exception!
      try { 
        PaintAlpha.cloneImage(bufferedImage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Raster Mock for WritableRaster, hashCode: 861718450 is incompatible with ColorModel null
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PaintAlpha paintAlpha0 = new PaintAlpha();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PaintAlpha.setLegacyAlpha(true);
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("('5").when(paint0).toString();
      Paint paint1 = PaintAlpha.darker(paint0);
      assertSame(paint1, paint0);
  }
}
