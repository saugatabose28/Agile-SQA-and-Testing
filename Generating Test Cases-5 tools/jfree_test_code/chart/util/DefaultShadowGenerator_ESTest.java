/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:56:21 GMT 2023
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.WritableRaster;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.DefaultShadowGenerator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultShadowGenerator_ESTest extends DefaultShadowGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 4720;
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(4720, color0, 0.5F, 1242, 0.5F);
      ColorModel colorModel0 = mock(ColorModel.class, new ViolatedAssumptionAnswer());
      int int1 = (-152);
      WritableRaster writableRaster0 = null;
      int int2 = 24;
      int int3 = 5;
      ColorModel colorModel1 = mock(ColorModel.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(24).when(bufferedImage0).getHeight();
      doReturn(1242).when(bufferedImage0).getWidth();
      // Undeclared exception!
      defaultShadowGenerator0.createDropShadow(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-441), color0, (-1.0F), 5, (-441));
      defaultShadowGenerator0.calculateOffsetX();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(2566, color0, 0.0F, (-1), 0.0F);
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.calculateOffsetY();
      defaultShadowGenerator0.calculateOffsetY();
      Color color1 = mock(Color.class, new ViolatedAssumptionAnswer());
      defaultShadowGenerator0.equals(defaultShadowGenerator0);
      ColorModel colorModel0 = mock(ColorModel.class, new ViolatedAssumptionAnswer());
      WritableRaster writableRaster0 = mock(WritableRaster.class, new ViolatedAssumptionAnswer());
      doReturn((DataBuffer) null).when(writableRaster0).getDataBuffer();
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(colorModel0).when(bufferedImage0).getColorModel();
      doReturn((-1960)).when(bufferedImage0).getHeight();
      doReturn(2566).when(bufferedImage0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(writableRaster0).when(bufferedImage0).getRaster();
      doReturn((-1758)).when(bufferedImage0).getType();
      doReturn(0).when(bufferedImage0).getWidth();
      doReturn((-2566)).when(bufferedImage0).getWidth(any(java.awt.image.ImageObserver.class));
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow(bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBuffer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      ColorModel colorModel0 = mock(ColorModel.class, new ViolatedAssumptionAnswer());
      WritableRaster writableRaster0 = mock(WritableRaster.class, new ViolatedAssumptionAnswer());
      defaultShadowGenerator0.calculateOffsetX();
      defaultShadowGenerator0.getShadowSize();
      defaultShadowGenerator0.calculateOffsetX();
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.getShadowOpacity();
      defaultShadowGenerator0.getShadowSize();
      defaultShadowGenerator0.calculateOffsetX();
      defaultShadowGenerator0.getDistance();
      defaultShadowGenerator0.getAngle();
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.getShadowOpacity();
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.calculateOffsetY();
      DefaultShadowGenerator defaultShadowGenerator1 = new DefaultShadowGenerator();
      defaultShadowGenerator0.equals(defaultShadowGenerator1);
      defaultShadowGenerator0.getDistance();
      defaultShadowGenerator0.calculateOffsetX();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(bufferedImage0).getHeight();
      doReturn((WritableRaster) null).when(bufferedImage0).getRaster();
      doReturn(0).when(bufferedImage0).getWidth();
      ColorModel colorModel0 = mock(ColorModel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.applyShadow(bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, color0, 1.0F, 0, 1706.43);
      defaultShadowGenerator0.hashCode();
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn(11).when(bufferedImage0).getHeight();
      doReturn(0).when(bufferedImage0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn((WritableRaster) null).when(bufferedImage0).getRaster();
      doReturn(0).when(bufferedImage0).getType();
      doReturn(11).when(bufferedImage0).getWidth();
      doReturn(0).when(bufferedImage0).getWidth(any(java.awt.image.ImageObserver.class));
      defaultShadowGenerator0.calculateOffsetX();
      defaultShadowGenerator0.calculateOffsetY();
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow(bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, color0, 0, 0, 0.0);
      defaultShadowGenerator0.getDistance();
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage1 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(bufferedImage1).getHeight();
      doReturn(0).when(bufferedImage1).getWidth();
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow(bufferedImage1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(color0).toString();
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, color0, (-1.0F), 0, 0.0);
      defaultShadowGenerator0.getAngle();
      defaultShadowGenerator0.getShadowColor();
      defaultShadowGenerator0.hashCode();
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(bufferedImage0).getHeight();
      doReturn(0).when(bufferedImage0).getWidth();
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow(bufferedImage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-894), color0, 0.0F, (-894), 0.0F);
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.getDistance();
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(bufferedImage0).getHeight();
      doReturn(0).when(bufferedImage0).getWidth();
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow(bufferedImage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-1788) and height (-1788) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, color0, 1512.0F, 0, 1512.0F);
      Color color1 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator1 = new DefaultShadowGenerator(0, color1, 1512.0F, 0, 0.0);
      defaultShadowGenerator0.equals(defaultShadowGenerator1);
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(bufferedImage0).getHeight();
      doReturn(0).when(bufferedImage0).getWidth();
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow(bufferedImage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, color0, (-1050.1F), 0, (-1050.1F));
      defaultShadowGenerator0.getShadowOpacity();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(1, color0, 1, 1, 1);
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.calculateOffsetY();
      defaultShadowGenerator0.getDistance();
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.calculateOffsetX();
      defaultShadowGenerator0.calculateOffsetX();
      defaultShadowGenerator0.getAngle();
      String string0 = "8x\\F`WQ3f";
      DefaultShadowGenerator defaultShadowGenerator1 = new DefaultShadowGenerator();
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn(0).when(bufferedImage0).getHeight();
      doReturn(0).when(bufferedImage0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn((WritableRaster) null).when(bufferedImage0).getRaster();
      doReturn(0).when(bufferedImage0).getType();
      doReturn(0).when(bufferedImage0).getWidth();
      doReturn(0).when(bufferedImage0).getWidth(any(java.awt.image.ImageObserver.class));
      // Undeclared exception!
      try { 
        defaultShadowGenerator1.createDropShadow(bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-1727), color0, (-1727), (-1727), (-32.92568));
      defaultShadowGenerator0.getShadowSize();
      defaultShadowGenerator0.getShadowSize();
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(bufferedImage0).getHeight();
      doReturn(0).when(bufferedImage0).getWidth();
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow(bufferedImage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-3454) and height (-3454) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(2566, color0, 0.0F, (-1), 0.0F);
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.calculateOffsetY();
      defaultShadowGenerator0.getShadowOpacity();
      defaultShadowGenerator0.calculateOffsetY();
      Color color1 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator1 = new DefaultShadowGenerator(0, color1, 0.0F, 0, 0.0F);
      defaultShadowGenerator0.equals(defaultShadowGenerator1);
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn(0).when(bufferedImage0).getHeight();
      doReturn(0).when(bufferedImage0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn((WritableRaster) null).when(bufferedImage0).getRaster();
      doReturn(0).when(bufferedImage0).getType();
      doReturn(0).when(bufferedImage0).getWidth();
      doReturn(0).when(bufferedImage0).getWidth(any(java.awt.image.ImageObserver.class));
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow(bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      defaultShadowGenerator0.getShadowColor();
      defaultShadowGenerator0.getDistance();
      defaultShadowGenerator0.getDistance();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, color0, (-212.334F), 0, 0);
      defaultShadowGenerator0.getShadowSize();
      defaultShadowGenerator0.calculateOffsetX();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(16777215, color0, 0.0F, 2, 0.0F);
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(bufferedImage0).getHeight();
      doReturn(0).when(bufferedImage0).getWidth();
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow(bufferedImage0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.getShadowColor();
      defaultShadowGenerator0.getAngle();
      defaultShadowGenerator0.getShadowOpacity();
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.getShadowSize();
      defaultShadowGenerator0.calculateOffsetX();
      defaultShadowGenerator0.getShadowColor();
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-191), color0, 0.0F, (-1048), (-318.6706486));
      defaultShadowGenerator0.calculateOffsetY();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      defaultShadowGenerator0.calculateOffsetX();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.applyShadow((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      Color color0 = null;
      DefaultShadowGenerator defaultShadowGenerator0 = null;
      try {
        defaultShadowGenerator0 = new DefaultShadowGenerator(0, (Color) null, 0, (-359), 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'color' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.getShadowSize();
      defaultShadowGenerator0.hashCode();
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, color0, 0, 0, (-1202.7499803322));
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(bufferedImage0).getHeight();
      doReturn(0).when(bufferedImage0).getWidth();
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow(bufferedImage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, color0, 0, 0, 0);
      defaultShadowGenerator0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      defaultShadowGenerator0.hashCode();
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.applyShadow((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      defaultShadowGenerator0.getShadowSize();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn(0).when(bufferedImage0).getHeight();
      doReturn(0).when(bufferedImage0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn((WritableRaster) null).when(bufferedImage0).getRaster();
      doReturn(0).when(bufferedImage0).getType();
      doReturn(0).when(bufferedImage0).getWidth();
      doReturn(0).when(bufferedImage0).getWidth(any(java.awt.image.ImageObserver.class));
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow(bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(color0).getRGB();
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(2566, color0, 0.0F, (-1), 0.0F);
      defaultShadowGenerator0.hashCode();
      defaultShadowGenerator0.calculateOffsetY();
      defaultShadowGenerator0.getShadowOpacity();
      defaultShadowGenerator0.calculateOffsetY();
      Color color1 = mock(Color.class, new ViolatedAssumptionAnswer());
      DefaultShadowGenerator defaultShadowGenerator1 = new DefaultShadowGenerator(0, color1, 0.0F, 0, 0.0F);
      defaultShadowGenerator0.equals(defaultShadowGenerator1);
      ColorModel colorModel0 = mock(ColorModel.class, new ViolatedAssumptionAnswer());
      defaultShadowGenerator0.calculateOffsetX();
      DataBuffer dataBuffer0 = mock(DataBuffer.class, new ViolatedAssumptionAnswer());
      WritableRaster writableRaster0 = mock(WritableRaster.class, new ViolatedAssumptionAnswer());
      doReturn(dataBuffer0).when(writableRaster0).getDataBuffer();
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(bufferedImage0).getAccelerationPriority();
      doReturn(colorModel0, (ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn(37).when(bufferedImage0).getHeight();
      doReturn((-2566)).when(bufferedImage0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(writableRaster0).when(bufferedImage0).getRaster();
      doReturn((-544)).when(bufferedImage0).getType();
      doReturn((-1186)).when(bufferedImage0).getWidth();
      doReturn((-1186)).when(bufferedImage0).getWidth(any(java.awt.image.ImageObserver.class));
      // Undeclared exception!
      defaultShadowGenerator0.createDropShadow(bufferedImage0);
  }
}
