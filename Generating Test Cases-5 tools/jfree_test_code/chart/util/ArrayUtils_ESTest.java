/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:50:52 GMT 2023
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.ArrayUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = objectArray0[0];
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[4] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[5] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      
      objectArray0[6] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      
      objectArray0[7] = object5;
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = object0;
      objectArray1[2] = object2;
      objectArray1[4] = object0;
      boolean boolean0 = ArrayUtils.equalReferencesInArrays(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(8, objectArray0.length);
      assertEquals(5, objectArray1.length);
      
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 1);
      Integer integer0 = Integer.getInteger("R[|c/$FyLfV");
      assertNull(integer0);
      
      comparableArray0[0] = (Comparable<Integer>) null;
      int int0 = ArrayUtils.compareVersionArrays(comparableArray0, comparableArray0);
      assertEquals(0, int0);
      assertEquals(1, comparableArray0.length);
      
      Comparable<Integer>[] comparableArray1 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 4);
      assertFalse(comparableArray1.equals((Object)comparableArray0));
      
      comparableArray1[0] = (Comparable<Integer>) null;
      comparableArray1[1] = (Comparable<Integer>) null;
      comparableArray1[2] = (Comparable<Integer>) null;
      comparableArray1[3] = (Comparable<Integer>) null;
      int int1 = ArrayUtils.compareVersionArrays(comparableArray1, comparableArray0);
      assertNotSame(comparableArray0, comparableArray1);
      assertNotSame(comparableArray1, comparableArray0);
      assertEquals(0, int1);
      assertFalse(comparableArray0.equals((Object)comparableArray1));
      assertFalse(comparableArray1.equals((Object)comparableArray0));
      assertTrue(int1 == int0);
      assertEquals(1, comparableArray0.length);
      assertEquals(4, comparableArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 3);
      Integer integer0 = Integer.getInteger("yA)lnOt5");
      assertNull(integer0);
      
      comparableArray0[0] = (Comparable<Integer>) null;
      Integer integer1 = Integer.valueOf((-2883));
      assertEquals((-2883), (int)integer1);
      assertNotNull(integer1);
      
      comparableArray0[1] = (Comparable<Integer>) integer1;
      Integer integer2 = Integer.valueOf(23);
      assertEquals(23, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      
      comparableArray0[2] = (Comparable<Integer>) integer2;
      int int0 = ArrayUtils.compareVersionArrays(comparableArray0, comparableArray0);
      assertEquals(0, int0);
      assertEquals(3, comparableArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object0));
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object6));
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertNotNull(object8);
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object3));
      
      objectArray0[8] = object8;
      boolean boolean0 = ArrayUtils.hasDuplicateItems(objectArray0);
      assertFalse(boolean0);
      assertEquals(11, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[][] floatArray0 = ArrayUtils.clone((float[][]) null);
      assertNull(floatArray0);
      
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 1);
      int int0 = ArrayUtils.compareVersionArrays(comparableArray0, comparableArray0);
      assertEquals(0, int0);
      assertEquals(1, comparableArray0.length);
      
      comparableArray0[0] = (Comparable<Integer>) 0;
      int int1 = ArrayUtils.compareVersionArrays(comparableArray0, comparableArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, comparableArray0.length);
      
      int int2 = ArrayUtils.compareVersionArrays(comparableArray0, comparableArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      
      boolean boolean0 = ArrayUtils.equalReferencesInArrays((Object[]) null, comparableArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      boolean boolean0 = ArrayUtils.hasDuplicateItems(objectArray0);
      assertFalse(boolean0);
      assertEquals(3, objectArray0.length);
      
      float[][] floatArray0 = new float[1][4];
      float[] floatArray1 = new float[9];
      floatArray1[1] = (-481.93F);
      floatArray1[2] = (-1734.2F);
      floatArray1[3] = 134.629F;
      floatArray1[4] = (-1.0F);
      floatArray1[5] = (-1.0F);
      floatArray1[6] = 0.0F;
      floatArray1[7] = 1.0F;
      floatArray1[8] = 0.0F;
      floatArray0[0] = floatArray1;
      boolean boolean1 = ArrayUtils.equal(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.equalReferencesInArrays(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
      
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<Object>) comparableArray0;
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[][] floatArray0 = new float[0][1];
      boolean boolean0 = ArrayUtils.equal(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.equal(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      int int0 = ArrayUtils.compareVersionArrays(comparableArray0, comparableArray0);
      assertEquals(0, int0);
      assertEquals(0, comparableArray0.length);
      
      boolean boolean2 = ArrayUtils.equal(floatArray0, (float[][]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean3 = ArrayUtils.equal((float[][]) null, floatArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(0, floatArray0.length);
      
      int int1 = ArrayUtils.compareVersionArrays(comparableArray0, comparableArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, comparableArray0.length);
      
      boolean boolean4 = ArrayUtils.equal((float[][]) null, (float[][]) null);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      
      int int2 = ArrayUtils.compareVersionArrays(comparableArray0, comparableArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, comparableArray0.length);
      
      float[][] floatArray1 = new float[2][8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = new float[2];
      floatArray2[0] = (float) 0;
      floatArray2[1] = 1.0F;
      floatArray1[0] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (float) 0;
      floatArray3[1] = (float) 0;
      floatArray3[2] = (float) 0;
      floatArray1[1] = floatArray3;
      boolean boolean5 = ArrayUtils.equal(floatArray1, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      Comparable<String>[] comparableArray1 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.compareVersionArrays(comparableArray0, (Comparable[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 3);
      Integer integer0 = Integer.getInteger("FN-[AW9U1iuq");
      assertNull(integer0);
      
      comparableArray0[0] = (Comparable<Integer>) null;
      Integer integer1 = Integer.getInteger("#jQd");
      assertNull(integer1);
      
      comparableArray0[1] = (Comparable<Integer>) null;
      int int0 = Integer.compareUnsigned(1, 1);
      assertEquals(0, int0);
      
      String string0 = Integer.toUnsignedString(1174);
      assertEquals("1174", string0);
      assertNotNull(string0);
      
      Integer integer2 = Integer.getInteger("");
      assertNull(integer2);
      
      comparableArray0[2] = (Comparable<Integer>) null;
      int int1 = ArrayUtils.compareVersionArrays(comparableArray0, comparableArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(3, comparableArray0.length);
      
      float[][] floatArray0 = new float[2][6];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 0;
      floatArray2[1] = (float) 1174;
      floatArray2[2] = (float) 0;
      floatArray2[3] = (float) 1174;
      floatArray2[4] = (float) 1174;
      int int2 = Integer.compare(1174, 0);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      floatArray2[5] = (float) 0;
      floatArray2[6] = (float) 1174;
      floatArray2[7] = (float) 1174;
      floatArray2[8] = (float) 0;
      floatArray0[1] = floatArray2;
      boolean boolean0 = ArrayUtils.equal(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.equalReferencesInArrays(floatArray0, objectArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, objectArray0.length);
      assertEquals(2, floatArray0.length);
      
      boolean boolean2 = ArrayUtils.equal(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, floatArray0.length);
      
      boolean boolean3 = ArrayUtils.equalReferencesInArrays(objectArray0, (Object[]) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, objectArray0.length);
      
      float[][] floatArray3 = new float[2][3];
      assertFalse(floatArray3.equals((Object)floatArray0));
      
      floatArray3[0] = floatArray2;
      floatArray3[1] = floatArray1;
      boolean boolean4 = ArrayUtils.equal(floatArray3, floatArray0);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray3, floatArray0);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray3.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.equalReferencesInArrays(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
      
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-1668.0F);
      floatArray2[1] = 23.607F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 23.607F;
      floatArray3[1] = (-1668.0F);
      floatArray3[2] = (-4411.0F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[9];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = (-4411.0F);
      floatArray4[1] = (-1668.0F);
      floatArray4[2] = (-1668.0F);
      floatArray4[3] = 0.0F;
      floatArray4[4] = (-1668.0F);
      floatArray4[5] = 0.0F;
      floatArray4[6] = (-4411.0F);
      floatArray4[7] = (-4411.0F);
      floatArray4[8] = (-1668.0F);
      floatArray0[3] = floatArray4;
      float[][] floatArray5 = new float[4][5];
      assertFalse(floatArray5.equals((Object)floatArray0));
      
      floatArray5[0] = floatArray2;
      floatArray5[1] = floatArray4;
      floatArray5[2] = floatArray3;
      float[] floatArray6 = new float[2];
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray1));
      
      floatArray6[0] = (-4411.0F);
      floatArray6[1] = (-1668.0F);
      floatArray5[3] = floatArray6;
      boolean boolean1 = ArrayUtils.equal(floatArray0, floatArray5);
      assertNotSame(floatArray0, floatArray5);
      assertNotSame(floatArray5, floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray5));
      assertFalse(floatArray5.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray5.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[][] floatArray0 = new float[1][6];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-291.07407F);
      floatArray1[3] = (-3788.9F);
      floatArray1[4] = 1.0F;
      floatArray1[5] = (-1052.05F);
      floatArray0[0] = floatArray1;
      float[][] floatArray2 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      boolean boolean0 = ArrayUtils.equal(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertTrue(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      boolean boolean1 = ArrayUtils.equalReferencesInArrays(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertTrue(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      
      boolean boolean2 = ArrayUtils.equal(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertTrue(boolean2);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      boolean boolean3 = ArrayUtils.hasDuplicateItems(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(boolean3);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      boolean boolean4 = ArrayUtils.equalReferencesInArrays(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(boolean4);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      boolean boolean5 = ArrayUtils.hasDuplicateItems(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(boolean5);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      float[][] floatArray3 = ArrayUtils.clone(floatArray2);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertNotNull(floatArray3);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(1, floatArray3.length);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      float[][] floatArray4 = ArrayUtils.clone(floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray2);
      assertNotSame(floatArray2, floatArray4);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertNotNull(floatArray4);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertEquals(1, floatArray3.length);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray4.length);
      assertEquals(1, floatArray2.length);
      
      float[][] floatArray5 = new float[8][3];
      assertFalse(floatArray5.equals((Object)floatArray0));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray5[0] = floatArray1;
      float[] floatArray6 = new float[7];
      assertFalse(floatArray6.equals((Object)floatArray1));
      
      floatArray6[0] = (-1052.05F);
      floatArray6[1] = (-291.07407F);
      floatArray6[2] = (-1052.05F);
      floatArray6[3] = 0.0F;
      floatArray6[4] = 0.0F;
      floatArray6[5] = 0.0F;
      floatArray6[6] = 1.0F;
      floatArray5[1] = floatArray6;
      floatArray5[2] = floatArray1;
      floatArray5[3] = floatArray1;
      floatArray5[4] = floatArray1;
      floatArray5[5] = floatArray1;
      floatArray5[6] = floatArray1;
      floatArray5[7] = floatArray1;
      boolean boolean6 = ArrayUtils.equal(floatArray5, floatArray4);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray5);
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray5);
      assertNotSame(floatArray4, floatArray5);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray2);
      assertNotSame(floatArray5, floatArray0);
      assertNotSame(floatArray5, floatArray3);
      assertNotSame(floatArray5, floatArray4);
      assertNotSame(floatArray5, floatArray2);
      assertNotSame(floatArray2, floatArray4);
      assertNotSame(floatArray2, floatArray5);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertFalse(boolean6);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray5));
      assertFalse(floatArray3.equals((Object)floatArray4));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray5));
      assertFalse(floatArray4.equals((Object)floatArray5));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray0));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(floatArray2.equals((Object)floatArray4));
      assertFalse(floatArray2.equals((Object)floatArray5));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertEquals(1, floatArray3.length);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray4.length);
      assertEquals(8, floatArray5.length);
      assertEquals(1, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[][] floatArray0 = new float[1][2];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 1054.9205F;
      floatArray0[0] = floatArray1;
      float[][] floatArray2 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 1054.9205F;
      objectArray0[1] = (Object) floatArray1;
      objectArray0[2] = (Object) 1054.9205F;
      boolean boolean0 = ArrayUtils.hasDuplicateItems(objectArray0);
      assertTrue(boolean0);
      assertEquals(3, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.hasDuplicateItems(floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.equalReferencesInArrays(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.equalReferencesInArrays(objectArray0, objectArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, objectArray0.length);
      
      float[][] floatArray0 = new float[3][4];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 0.0F;
      floatArray0[2] = floatArray3;
      boolean boolean2 = ArrayUtils.equal(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, floatArray0.length);
      
      float[][] floatArray4 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertNotNull(floatArray4);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean3 = ArrayUtils.equal(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertTrue(boolean3);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      boolean boolean4 = ArrayUtils.equal(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray4);
      assertTrue(boolean4);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertEquals(3, floatArray4.length);
      assertEquals(3, floatArray0.length);
      
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 4);
      comparableArray0[0] = (Comparable<Object>) comparableArray0;
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[0][3];
      float[][] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[][] floatArray2 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      
      boolean boolean0 = ArrayUtils.hasDuplicateItems(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      
      boolean boolean1 = ArrayUtils.equalReferencesInArrays(floatArray1, (Object[]) null);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[][] floatArray3 = ArrayUtils.clone(floatArray2);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotNull(floatArray3);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      
      boolean boolean2 = ArrayUtils.equalReferencesInArrays(floatArray1, (Object[]) null);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray3);
      assertFalse(boolean2);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray3));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean3 = ArrayUtils.equalReferencesInArrays((Object[]) null, floatArray2);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(boolean3);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      
      float[][] floatArray4 = ArrayUtils.clone(floatArray3);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray4);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray1);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray2);
      assertNotNull(floatArray4);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertEquals(0, floatArray4.length);
      
      boolean boolean4 = ArrayUtils.equal(floatArray3, floatArray4);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray4);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray1);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray2);
      assertTrue(boolean4);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray4));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray4));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertEquals(0, floatArray4.length);
      
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 8);
      comparableArray0[0] = (Comparable<Object>) comparableArray0;
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[][] floatArray0 = new float[1][0];
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-979.7271F);
      floatArray1[1] = 0.0F;
      floatArray0[0] = floatArray1;
      float[][] floatArray2 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      boolean boolean0 = ArrayUtils.equal(floatArray2, floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertTrue(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      boolean boolean1 = ArrayUtils.equal(floatArray2, floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertTrue(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      boolean boolean2 = ArrayUtils.equalReferencesInArrays(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(boolean2);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      float[][] floatArray3 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotNull(floatArray3);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray3.length);
      
      float[][] floatArray4 = ArrayUtils.clone(floatArray3);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray2);
      assertNotNull(floatArray4);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray3.length);
      assertEquals(1, floatArray4.length);
      
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 8);
      comparableArray0[0] = (Comparable<Object>) comparableArray0;
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.equalReferencesInArrays(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
      
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<String>) comparableArray0;
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[][] floatArray0 = new float[0][6];
      boolean boolean0 = ArrayUtils.equal(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.hasDuplicateItems(floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object2));
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object2));
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertNotNull(object8);
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object7));
      
      objectArray0[8] = object8;
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = object0;
      objectArray1[1] = object4;
      boolean boolean0 = ArrayUtils.equalReferencesInArrays(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(9, objectArray0.length);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.compareVersionArrays((Comparable[]) null, (Comparable[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.hasDuplicateItems((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[][] floatArrayArray0 = null;
      boolean boolean0 = ArrayUtils.equal((float[][]) null, (float[][]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.equal((float[][]) null, (float[][]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[][] floatArray0 = ArrayUtils.clone((float[][]) null);
      assertNull(floatArray0);
      
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      int int0 = ArrayUtils.compareVersionArrays(comparableArray0, comparableArray0);
      assertEquals(0, int0);
      assertEquals(0, comparableArray0.length);
      
      boolean boolean2 = ArrayUtils.equalReferencesInArrays(comparableArray0, (Object[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, comparableArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.hasDuplicateItems((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      boolean boolean0 = ArrayUtils.equalReferencesInArrays(objectArray0, (Object[]) null);
      assertFalse(boolean0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.compareVersionArrays((Comparable[]) null, (Comparable[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-797.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 0.0F;
      floatArray0[1] = floatArray2;
      float[][] floatArray3 = new float[5][0];
      assertFalse(floatArray3.equals((Object)floatArray0));
      
      floatArray3[0] = floatArray1;
      floatArray3[1] = floatArray2;
      floatArray3[2] = floatArray1;
      floatArray3[3] = floatArray1;
      floatArray3[4] = floatArray2;
      boolean boolean0 = ArrayUtils.equal(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray3, floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(5, floatArray3.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = ArrayUtils.equalReferencesInArrays((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      float[][] floatArray0 = new float[1][1];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 1160.454F;
      floatArray0[0] = floatArray1;
      float[][] floatArray2 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      boolean boolean0 = ArrayUtils.hasDuplicateItems(objectArray0);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[][] floatArray0 = new float[1][1];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 0.0F;
      floatArray0[0] = floatArray1;
      boolean boolean0 = ArrayUtils.equal(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray1[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray1[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      
      objectArray1[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      
      objectArray1[4] = object4;
      boolean boolean0 = ArrayUtils.equalReferencesInArrays(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(5, objectArray1.length);
      
      float[][] floatArray0 = new float[0][4];
      float[][] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean1 = ArrayUtils.hasDuplicateItems(objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(boolean1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean2 = ArrayUtils.equal(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(0, floatArray0.length);
      
      boolean boolean3 = ArrayUtils.hasDuplicateItems(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean4 = ArrayUtils.equalReferencesInArrays(floatArray1, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean4);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, objectArray1.length);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean5 = ArrayUtils.hasDuplicateItems(objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(boolean5);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      boolean boolean0 = ArrayUtils.equalReferencesInArrays(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[][] floatArray0 = new float[0][2];
      boolean boolean0 = ArrayUtils.equal(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[][] floatArray0 = new float[7][2];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 1007.36F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 1985.0F;
      floatArray2[4] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[7];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 1985.0F;
      floatArray3[3] = 1.0F;
      floatArray3[4] = 1007.36F;
      floatArray3[5] = 1985.0F;
      floatArray3[6] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[3];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 0.0F;
      floatArray4[1] = 1.0F;
      floatArray4[2] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 0.0F;
      floatArray5[1] = 424.80255F;
      floatArray5[2] = 1.0F;
      floatArray5[3] = 0.0F;
      floatArray5[4] = 1007.36F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray1));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 1007.36F;
      floatArray6[2] = 1985.0F;
      floatArray6[3] = 1.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[1];
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray2));
      
      floatArray7[0] = 1007.36F;
      floatArray0[6] = floatArray7;
      float[][] floatArray8 = new float[7][3];
      assertFalse(floatArray8.equals((Object)floatArray0));
      
      float[] floatArray9 = new float[6];
      assertFalse(floatArray9.equals((Object)floatArray1));
      assertFalse(floatArray9.equals((Object)floatArray3));
      assertFalse(floatArray9.equals((Object)floatArray6));
      assertFalse(floatArray9.equals((Object)floatArray4));
      assertFalse(floatArray9.equals((Object)floatArray5));
      assertFalse(floatArray9.equals((Object)floatArray7));
      assertFalse(floatArray9.equals((Object)floatArray2));
      
      floatArray9[0] = 0.0F;
      floatArray9[1] = 0.0F;
      floatArray9[2] = 0.0F;
      floatArray9[3] = 1.0F;
      floatArray9[4] = 1985.0F;
      floatArray9[5] = 1985.0F;
      floatArray8[0] = floatArray9;
      floatArray8[1] = floatArray4;
      floatArray8[2] = floatArray2;
      floatArray8[3] = floatArray6;
      floatArray8[4] = floatArray6;
      floatArray8[5] = floatArray2;
      floatArray8[6] = floatArray6;
      boolean boolean0 = ArrayUtils.equal(floatArray0, floatArray8);
      assertNotSame(floatArray0, floatArray8);
      assertNotSame(floatArray8, floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray8));
      assertFalse(floatArray8.equals((Object)floatArray0));
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray8.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = objectArray0[0];
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[4] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[5] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[6] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      
      objectArray0[7] = object5;
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = object0;
      objectArray1[2] = object2;
      objectArray1[4] = object0;
      boolean boolean0 = ArrayUtils.equalReferencesInArrays(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(8, objectArray0.length);
      assertEquals(5, objectArray1.length);
      
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 1);
      int int0 = ArrayUtils.compareVersionArrays(comparableArray0, comparableArray0);
      assertEquals(0, int0);
      assertEquals(1, comparableArray0.length);
      
      boolean boolean1 = ArrayUtils.equalReferencesInArrays(objectArray0, comparableArray0);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(boolean1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(8, objectArray0.length);
      assertEquals(1, comparableArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      objectArray0[3] = object1;
      boolean boolean0 = ArrayUtils.hasDuplicateItems(objectArray0);
      assertTrue(boolean0);
      assertEquals(4, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.equalReferencesInArrays(objectArray0, objectArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, objectArray0.length);
      
      float[][] floatArray0 = ArrayUtils.clone((float[][]) null);
      assertNull(floatArray0);
      
      boolean boolean2 = ArrayUtils.hasDuplicateItems(objectArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, objectArray0.length);
      
      float[][] floatArray1 = ArrayUtils.clone((float[][]) null);
      assertNull(floatArray1);
      
      boolean boolean3 = ArrayUtils.equalReferencesInArrays((Object[]) null, (Object[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = ArrayUtils.equalReferencesInArrays(objectArray0, (Object[]) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertEquals(4, objectArray0.length);
      
      float[][] floatArray2 = new float[3][2];
      float[] floatArray3 = new float[5];
      floatArray3[0] = 1541.8088F;
      floatArray3[1] = (-1.0F);
      floatArray3[2] = 1.0F;
      floatArray3[3] = 0.0F;
      floatArray3[4] = (-2542.0F);
      floatArray2[0] = floatArray3;
      float[] floatArray4 = new float[5];
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray4[0] = 1541.8088F;
      floatArray4[2] = (-2542.0F);
      floatArray4[3] = 0.0F;
      floatArray4[4] = (-2542.0F);
      floatArray2[1] = floatArray4;
      float[] floatArray5 = new float[2];
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = (-2542.0F);
      floatArray5[1] = 0.0F;
      floatArray2[2] = floatArray5;
      boolean boolean5 = ArrayUtils.equal(floatArray2, (float[][]) null);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertEquals(3, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      
      objectArray0[3] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object0));
      
      objectArray0[6] = object6;
      boolean boolean0 = ArrayUtils.hasDuplicateItems(objectArray0);
      assertFalse(boolean0);
      assertEquals(7, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.equalReferencesInArrays(objectArray0, objectArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, objectArray0.length);
      
      boolean boolean2 = ArrayUtils.hasDuplicateItems(objectArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(7, objectArray0.length);
      
      boolean boolean3 = ArrayUtils.equalReferencesInArrays(objectArray0, objectArray0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(7, objectArray0.length);
      
      float[][] floatArray0 = ArrayUtils.clone((float[][]) null);
      assertNull(floatArray0);
      
      boolean boolean4 = ArrayUtils.equal((float[][]) null, (float[][]) null);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      
      boolean boolean5 = ArrayUtils.equal((float[][]) null, (float[][]) null);
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      
      float[][] floatArray1 = ArrayUtils.clone((float[][]) null);
      assertNull(floatArray1);
      
      float[][] floatArray2 = new float[6][0];
      float[] floatArray3 = new float[6];
      floatArray3[0] = (-2734.0F);
      floatArray3[1] = 1.0F;
      floatArray3[2] = (-1698.1996F);
      floatArray3[3] = 1846.9742F;
      floatArray3[4] = 1432.4436F;
      floatArray3[5] = (-851.0F);
      float[] floatArray4 = new float[1];
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray4[0] = 1432.4436F;
      floatArray2[1] = floatArray4;
      float[] floatArray5 = new float[2];
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 1.0F;
      floatArray5[1] = (-1698.1996F);
      floatArray2[2] = floatArray5;
      float[] floatArray6 = new float[6];
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray3));
      
      floatArray6[0] = 1846.9742F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = 1.0F;
      floatArray6[3] = (-1698.1996F);
      floatArray6[4] = 1432.4436F;
      floatArray6[5] = 1432.4436F;
      floatArray2[3] = floatArray6;
      float[] floatArray7 = new float[6];
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray4));
      
      floatArray7[0] = (-1698.1996F);
      floatArray7[1] = 1.0F;
      floatArray7[2] = 1.0F;
      floatArray7[3] = 0.0F;
      floatArray7[4] = (-1698.1996F);
      floatArray7[5] = (-1698.1996F);
      floatArray2[4] = floatArray7;
      float[] floatArray8 = new float[9];
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray5));
      assertFalse(floatArray8.equals((Object)floatArray7));
      assertFalse(floatArray8.equals((Object)floatArray3));
      assertFalse(floatArray8.equals((Object)floatArray4));
      
      floatArray8[0] = 570.322F;
      floatArray8[1] = 1.0F;
      floatArray8[2] = (-851.0F);
      floatArray8[3] = 1.0F;
      floatArray8[4] = 1846.9742F;
      floatArray8[5] = (-851.0F);
      floatArray8[6] = (-1698.1996F);
      floatArray3[4] = 0.0F;
      floatArray8[8] = 1.0F;
      floatArray2[5] = floatArray8;
      float[][] floatArray9 = ArrayUtils.clone(floatArray2);
      assertNotSame(floatArray9, floatArray2);
      assertNotSame(floatArray2, floatArray9);
      assertNotNull(floatArray9);
      assertFalse(floatArray9.equals((Object)floatArray2));
      assertEquals(6, floatArray9.length);
      assertEquals(6, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[][] floatArray0 = ArrayUtils.clone((float[][]) null);
      assertNull(floatArray0);
      
      float[][] floatArray1 = new float[5][1];
      float[] floatArray2 = new float[4];
      floatArray2[0] = 1709.537F;
      floatArray2[1] = (-1625.9F);
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray1[0] = floatArray2;
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 1709.537F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 1709.537F;
      floatArray3[3] = 0.0F;
      floatArray3[4] = 0.0F;
      floatArray1[1] = floatArray3;
      float[] floatArray4 = new float[7];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 0.0F;
      floatArray4[1] = 1709.537F;
      floatArray4[2] = (-1625.9F);
      floatArray4[3] = 1709.537F;
      floatArray4[4] = 0.0F;
      floatArray4[5] = 0.0F;
      floatArray4[6] = (-2519.6F);
      floatArray1[2] = floatArray4;
      float[] floatArray5 = new float[8];
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray5[0] = (-1239.863F);
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray5[3] = 1709.537F;
      floatArray5[4] = 0.0F;
      floatArray5[5] = 0.0F;
      floatArray5[6] = (-2519.6F);
      floatArray5[7] = 0.0F;
      floatArray1[3] = floatArray5;
      float[] floatArray6 = new float[6];
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray2));
      
      floatArray6[0] = (-2519.6F);
      floatArray6[1] = 0.0F;
      floatArray6[2] = (-1239.863F);
      floatArray6[3] = 0.0F;
      floatArray6[4] = 2517.36F;
      floatArray6[5] = 1709.537F;
      floatArray1[4] = floatArray6;
      boolean boolean0 = ArrayUtils.equal((float[][]) null, floatArray1);
      assertFalse(boolean0);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      float[][] floatArray0 = new float[1][6];
      float[][] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.equal(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertTrue(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean boolean1 = ArrayUtils.equalReferencesInArrays(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertTrue(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      
      boolean boolean2 = ArrayUtils.equal(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertTrue(boolean2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean boolean3 = ArrayUtils.hasDuplicateItems(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean3);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean boolean4 = ArrayUtils.equalReferencesInArrays(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean4);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean boolean5 = ArrayUtils.hasDuplicateItems(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean5);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      float[][] floatArray2 = ArrayUtils.clone(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      
      float[][] floatArray3 = ArrayUtils.clone(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotNull(floatArray3);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray3.length);
      
      float[][] floatArray4 = new float[8][3];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray0));
      
      float[] floatArray5 = new float[7];
      floatArray5[0] = (-1052.05F);
      floatArray5[1] = (-291.07407F);
      floatArray5[2] = (-1052.05F);
      floatArray5[3] = 0.0F;
      floatArray5[5] = 0.0F;
      floatArray5[6] = 1.0F;
      floatArray4[1] = floatArray5;
      boolean boolean6 = ArrayUtils.equal(floatArray4, floatArray3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray4);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray4);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray4, floatArray1);
      assertNotSame(floatArray4, floatArray2);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray0);
      assertFalse(boolean6);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray1.equals((Object)floatArray3));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray4));
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray4));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray4));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertEquals(8, floatArray4.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 546.892F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 546.892F;
      floatArray0[4] = 3884.1733F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray0[0] = 546.892F;
      floatArray1[1] = 546.892F;
      floatArray0[0] = 546.892F;
      floatArray1[3] = (-2095.4F);
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = 0.0F;
      floatArray2[2] = (-2095.4F);
      floatArray2[3] = 0.0F;
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      objectArray0[5] = object4;
      Object object5 = new Object();
      objectArray0[6] = object5;
      Object object6 = new Object();
      objectArray0[7] = object3;
      Object object7 = new Object();
      objectArray0[8] = object7;
      ArrayUtils.hasDuplicateItems(objectArray0);
      boolean boolean0 = ArrayUtils.hasDuplicateItems(objectArray0);
      assertTrue(boolean0);
  }
}
