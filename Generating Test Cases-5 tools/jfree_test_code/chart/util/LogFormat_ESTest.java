/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:47:26 GMT 2023
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.LogFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LogFormat_ESTest extends LogFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat(2137.88719582557, "Uvm8;(iC+v9n", "Uvm8;(iC+v9n", true);
      LogFormat logFormat1 = new LogFormat(2137.88719582557, "Uvm8;(iC+v9n", "Uvm8;(iC+v9n", false);
      NumberFormat.getPercentInstance();
      logFormat0.equals(logFormat1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat();
      logFormat0.equals(logFormat0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat(0.0, "", "", true);
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(0);
      int int1 = 0;
      logFormat0.setGroupingUsed(true);
      parsePosition0.setErrorIndex(0);
      logFormat0.parse((String) null, parsePosition0);
      NumberFormat numberFormat0 = logFormat0.getExponentFormat();
      numberFormat0.setMinimumIntegerDigits(0);
      logFormat0.setExponentFormat(numberFormat0);
      logFormat0.equals((Object) null);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("3?S2>Hf?lB&{", decimalFormatSymbols0);
      logFormat0.clone();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      logFormat0.getExponentFormat();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-705));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat(0.0, "&!zA9^+l.} iS$gj:d(", true);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      logFormat0.setExponentFormat(numberFormat0);
      Locale locale0 = Locale.CANADA;
      Locale.forLanguageTag("");
      logFormat0.setMinimumIntegerDigits(0);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      logFormat0.setExponentFormat(decimalFormat0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      FieldPosition fieldPosition0 = new FieldPosition(0);
      logFormat0.format(0L, stringBuffer0, fieldPosition0);
      logFormat0.setExponentFormat(numberFormat0);
      logFormat0.setExponentFormat(numberFormat0);
      logFormat0.getExponentFormat();
      logFormat0.format((-2414L), stringBuffer0, fieldPosition0);
      logFormat0.getExponentFormat();
      logFormat0.setExponentFormat(decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LogFormat logFormat0 = null;
      try {
        logFormat0 = new LogFormat(1.0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'baseLabel' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogFormat logFormat0 = null;
      try {
        logFormat0 = new LogFormat((-2187.36), (String) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'baseLabel' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat(1614.46724431903, "", false);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      FieldPosition fieldPosition0 = new FieldPosition(145);
      StringBuffer stringBuffer1 = decimalFormat0.format(1760L, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = logFormat0.format(1760L, stringBuffer1, fieldPosition0);
      logFormat0.format(1614.46724431903, stringBuffer2, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat((-2945.916521), "10", false);
      logFormat0.getExponentFormat();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat(3425.181249844, "", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      logFormat0.format((-883L), stringBuffer0, fieldPosition0);
      LogFormat logFormat1 = new LogFormat((-552.46), "", "", true);
      logFormat0.equals(logFormat1);
      Locale locale0 = Locale.CHINA;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      numberFormat0.parse("=Oq-708]=Dz!fK5WY", parsePosition0);
      logFormat1.setExponentFormat(numberFormat0);
      ParsePosition parsePosition1 = new ParsePosition(0);
      logFormat0.parse("", parsePosition1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat(0.0, "", true);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      FieldPosition fieldPosition0 = new FieldPosition((-3425));
      StringBuffer stringBuffer2 = logFormat0.format(1L, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = logFormat0.format(1L, stringBuffer2, fieldPosition0);
      logFormat0.format(0.0, stringBuffer3, fieldPosition0);
      Object object0 = new Object();
      logFormat0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat(408.99, "FQ961Q)MB:z'Fa", "Jz#2ERtaw;>mV&Jw", false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "FQ961Q)MB:z'Fa");
      logFormat0.format(0.0, stringBuffer0, (FieldPosition) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat();
      LogFormat logFormat1 = new LogFormat();
      logFormat0.setExponentFormat(logFormat1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat(483.104, "", "", true);
      logFormat0.getExponentFormat();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat(2137.88719582557, "Uvm8;(iC+v9n", "Uvm8;(iC+v9n", true);
      LogFormat logFormat1 = new LogFormat(2776.0166293364805, "Uvm8;(iC+v9n", "Uvm8;(iC+v9n", false);
      NumberFormat.getPercentInstance();
      logFormat0.equals(logFormat1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat(1.0, "", "", false);
      assertNotNull(logFormat0);
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      assertFalse(logFormat0.isParseIntegerOnly());
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      assertNotNull(decimalFormatSymbols0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('.', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(',', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals(',', decimalFormatSymbols0.getDecimalSeparator());
      
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      assertNotNull(decimalFormat0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('.', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(',', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals(',', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      decimalFormat0.setMultiplier((-3391));
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('.', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(',', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals(',', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals((-3391), decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-3391));
      StringBuffer stringBuffer1 = decimalFormat0.format(1.0, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = decimalFormat0.format(1.0, stringBuffer1, fieldPosition0);
      logFormat0.format(1.0, stringBuffer2, fieldPosition0);
      StringBuffer stringBuffer3 = logFormat0.format((long) (-3391), stringBuffer1, fieldPosition0);
      logFormat0.setExponentFormat(decimalFormat0);
      Format.Field format_Field1 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition1 = new FieldPosition(format_Field1, (-3391));
      logFormat0.format(0L, stringBuffer3, fieldPosition0);
      logFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat((-874.7825104876), "FnIu!&BC-e?(wGDr`;D", true);
      assertNotNull(logFormat0);
      assertFalse(logFormat0.isParseIntegerOnly());
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertNotNull(decimalFormat0);
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      assertNotSame(decimalFormat1, decimalFormat0);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertNotNull(decimalFormat1);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals(2, decimalFormat1.getMaximumFractionDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("\u00A4 #,##0.00", decimalFormat1.toPattern());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("\u00A4 ", decimalFormat1.getPositivePrefix());
      assertEquals(2, decimalFormat1.getMinimumFractionDigits());
      assertEquals("\u00A4 #,##0.00", decimalFormat1.toLocalizedPattern());
      assertEquals("-\u00A4 ", decimalFormat1.getNegativePrefix());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      
      logFormat0.setMaximumIntegerDigits(0);
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(0, logFormat0.getMinimumIntegerDigits());
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertEquals(0, logFormat0.getMaximumIntegerDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      
      Number number0 = logFormat0.parse("8XgJl>_6~g}te)", (ParsePosition) null);
      assertNull(number0);
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(0, logFormat0.getMinimumIntegerDigits());
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertEquals(0, logFormat0.getMaximumIntegerDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      
      Number number1 = logFormat0.parse("8XgJl>_6~g}te)", (ParsePosition) null);
      assertNull(number1);
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(0, logFormat0.getMinimumIntegerDigits());
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertEquals(0, logFormat0.getMaximumIntegerDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat();
      assertNotNull(logFormat0);
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertNotNull(decimalFormat0);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      
      StringBuffer stringBuffer0 = logFormat0.format(1.0, (StringBuffer) null, (FieldPosition) null);
      assertNotNull(stringBuffer0);
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertEquals(6, stringBuffer0.length());
      assertEquals("10^0.0", stringBuffer0.toString());
      
      DecimalFormat decimalFormat1 = (DecimalFormat)logFormat0.getExponentFormat();
      assertNotSame(decimalFormat1, decimalFormat0);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertNotNull(decimalFormat1);
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(0, decimalFormat1.getGroupingSize());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(2, decimalFormat1.getMaximumFractionDigits());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("#0.0#", decimalFormat1.toLocalizedPattern());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertFalse(decimalFormat1.isGroupingUsed());
      assertEquals("#0.0#", decimalFormat1.toPattern());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat1.getMinimumFractionDigits());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      
      StringBuffer stringBuffer1 = logFormat0.format(132.89893, (StringBuffer) null, (FieldPosition) null);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertEquals("10^2.12", stringBuffer1.toString());
      assertEquals(7, stringBuffer1.length());
      
      DecimalFormat decimalFormat2 = new DecimalFormat();
      assertFalse(decimalFormat2.equals((Object)decimalFormat1));
      assertTrue(decimalFormat2.equals((Object)decimalFormat0));
      assertNotNull(decimalFormat2);
      assertEquals(Integer.MAX_VALUE, decimalFormat2.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat2.toLocalizedPattern());
      assertFalse(decimalFormat2.isParseBigDecimal());
      assertFalse(decimalFormat2.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat2.getMinimumFractionDigits());
      assertFalse(decimalFormat2.isParseIntegerOnly());
      assertTrue(decimalFormat2.isGroupingUsed());
      assertEquals(3, decimalFormat2.getGroupingSize());
      assertEquals(3, decimalFormat2.getMaximumFractionDigits());
      assertEquals("", decimalFormat2.getNegativeSuffix());
      assertEquals("", decimalFormat2.getPositiveSuffix());
      assertEquals(1, decimalFormat2.getMultiplier());
      assertEquals("-", decimalFormat2.getNegativePrefix());
      assertEquals("", decimalFormat2.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat2.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat2.getRoundingMode());
      assertEquals(1, decimalFormat2.getMinimumIntegerDigits());
      
      DecimalFormat decimalFormat3 = (DecimalFormat)NumberFormat.getInstance();
      assertNotSame(decimalFormat3, decimalFormat2);
      assertNotSame(decimalFormat3, decimalFormat1);
      assertNotSame(decimalFormat3, decimalFormat0);
      assertTrue(decimalFormat3.equals((Object)decimalFormat2));
      assertTrue(decimalFormat3.equals((Object)decimalFormat0));
      assertFalse(decimalFormat3.equals((Object)decimalFormat1));
      assertNotNull(decimalFormat3);
      assertEquals("#,##0.###", decimalFormat3.toLocalizedPattern());
      assertEquals(0, decimalFormat3.getMinimumFractionDigits());
      assertFalse(decimalFormat3.isParseIntegerOnly());
      assertFalse(decimalFormat3.isParseBigDecimal());
      assertFalse(decimalFormat3.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat3.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat3.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat3.getMultiplier());
      assertEquals("-", decimalFormat3.getNegativePrefix());
      assertEquals(3, decimalFormat3.getGroupingSize());
      assertEquals("", decimalFormat3.getPositiveSuffix());
      assertEquals("", decimalFormat3.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat3.toPattern());
      assertEquals("", decimalFormat3.getNegativeSuffix());
      assertEquals(3, decimalFormat3.getMaximumFractionDigits());
      assertTrue(decimalFormat3.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat3.getRoundingMode());
      
      // Undeclared exception!
      try { 
        decimalFormat2.format(0.0, stringBuffer0, (FieldPosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat();
      assertNotNull(logFormat0);
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertTrue(logFormat0.isGroupingUsed());
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      
      LogFormat logFormat1 = (LogFormat)logFormat0.clone();
      assertNotSame(logFormat0, logFormat1);
      assertNotSame(logFormat1, logFormat0);
      assertTrue(logFormat1.equals((Object)logFormat0));
      assertNotNull(logFormat1);
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertTrue(logFormat0.isGroupingUsed());
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertTrue(logFormat1.isGroupingUsed());
      assertEquals(0, logFormat1.getMinimumFractionDigits());
      assertFalse(logFormat1.isParseIntegerOnly());
      assertEquals(1, logFormat1.getMinimumIntegerDigits());
      assertEquals(40, logFormat1.getMaximumIntegerDigits());
      assertEquals(3, logFormat1.getMaximumFractionDigits());
      
      ParsePosition parsePosition0 = new ParsePosition((-1));
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals((-1), parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-1,errorIndex=-1]", parsePosition0.toString());
      
      Number number0 = logFormat0.parse((String) null, parsePosition0);
      assertNotSame(logFormat0, logFormat1);
      assertTrue(logFormat0.equals((Object)logFormat1));
      assertNull(number0);
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertTrue(logFormat0.isGroupingUsed());
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals((-1), parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-1,errorIndex=-1]", parsePosition0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-1));
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals((-1), fieldPosition0.getField());
      
      fieldPosition0.setBeginIndex((-1));
      assertEquals((-1), fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals((-1), fieldPosition0.getField());
      
      StringBuffer stringBuffer1 = logFormat0.format((-2122.6), stringBuffer0, fieldPosition0);
      assertNotSame(logFormat0, logFormat1);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertTrue(logFormat0.equals((Object)logFormat1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertTrue(logFormat0.isGroupingUsed());
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals((-1), fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals((-1), fieldPosition0.getField());
      assertEquals("10^\uFFFD", stringBuffer1.toString());
      assertEquals(4, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 1293.473828230717;
      String string0 = "lS!Z!7vA#";
      LogFormat logFormat0 = new LogFormat(1293.473828230717, "lS!Z!7vA#", true);
      assertNotNull(logFormat0);
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      assertFalse(logFormat0.isParseIntegerOnly());
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      
      boolean boolean0 = logFormat0.equals("lS!Z!7vA#");
      assertFalse(boolean0);
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      assertFalse(logFormat0.isParseIntegerOnly());
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      
      // Undeclared exception!
      try { 
        logFormat0.setExponentFormat((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'format' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat();
      assertNotNull(logFormat0);
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      
      LogFormat logFormat1 = (LogFormat)logFormat0.clone();
      assertNotSame(logFormat0, logFormat1);
      assertNotSame(logFormat1, logFormat0);
      assertTrue(logFormat1.equals((Object)logFormat0));
      assertNotNull(logFormat1);
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      assertEquals(0, logFormat1.getMinimumFractionDigits());
      assertEquals(1, logFormat1.getMinimumIntegerDigits());
      assertEquals(40, logFormat1.getMaximumIntegerDigits());
      assertFalse(logFormat1.isParseIntegerOnly());
      assertEquals(3, logFormat1.getMaximumFractionDigits());
      assertTrue(logFormat1.isGroupingUsed());
      
      boolean boolean0 = logFormat0.equals(logFormat1);
      assertNotSame(logFormat0, logFormat1);
      assertNotSame(logFormat1, logFormat0);
      assertTrue(boolean0);
      assertTrue(logFormat0.equals((Object)logFormat1));
      assertTrue(logFormat1.equals((Object)logFormat0));
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      assertEquals(0, logFormat1.getMinimumFractionDigits());
      assertEquals(1, logFormat1.getMinimumIntegerDigits());
      assertEquals(40, logFormat1.getMaximumIntegerDigits());
      assertFalse(logFormat1.isParseIntegerOnly());
      assertEquals(3, logFormat1.getMaximumFractionDigits());
      assertTrue(logFormat1.isGroupingUsed());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat(0.0, "", "x{?Rek", true);
      assertNotNull(logFormat0);
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      
      StringBuffer stringBuffer0 = new StringBuffer("x{?Rek");
      assertNotNull(stringBuffer0);
      assertEquals(6, stringBuffer0.length());
      assertEquals("x{?Rek", stringBuffer0.toString());
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals((-1), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      StringBuffer stringBuffer1 = logFormat0.format(2980L, stringBuffer0, fieldPosition0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      assertFalse(logFormat0.isParseIntegerOnly());
      assertEquals(3, logFormat0.getMaximumFractionDigits());
      assertTrue(logFormat0.isGroupingUsed());
      assertEquals(1, logFormat0.getMinimumIntegerDigits());
      assertEquals(40, logFormat0.getMaximumIntegerDigits());
      assertEquals(0, logFormat0.getMinimumFractionDigits());
      assertEquals(6, stringBuffer0.length());
      assertEquals("x{?Rek", stringBuffer0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals((-1), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(10, stringBuffer1.length());
      assertEquals("x{?Rek-0.0", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LogFormat logFormat0 = new LogFormat();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      NumberFormat.getCurrencyInstance(locale0);
      Object object0 = logFormat0.clone();
      boolean boolean0 = logFormat0.equals(object0);
      assertTrue(boolean0);
      
      NumberFormat numberFormat0 = logFormat0.getExponentFormat();
      StringBuffer stringBuffer0 = new StringBuffer("");
      boolean boolean1 = logFormat0.equals(numberFormat0);
      assertEquals(1, numberFormat0.getMinimumFractionDigits());
      assertFalse(boolean1 == boolean0);
      
      Object object1 = logFormat0.clone();
      assertNotSame(object1, logFormat0);
  }
}
