/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:34:16 GMT 2023
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Paint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.PaintUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaintUtils_ESTest extends PaintUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Color color0 = PaintUtils.stringToColor("BLACK");
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        PaintUtils.colorToString((Color) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.PaintUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Color color0 = PaintUtils.stringToColor((String) null);
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Color color0 = PaintUtils.stringToColor("");
      String string0 = PaintUtils.colorToString(color0);
      assertEquals("BLACK", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Color color0 = PaintUtils.stringToColor("7");
      String string0 = PaintUtils.colorToString(color0);
      assertEquals("#000007", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Color color0 = PaintUtils.stringToColor("e5+rI5`5$B=n4Gn3BD");
      Color color1 = PaintUtils.stringToColor("7");
      boolean boolean0 = PaintUtils.equal(color0, color1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Color color0 = PaintUtils.stringToColor("");
      boolean boolean0 = PaintUtils.equal(color0, (Paint) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      boolean boolean0 = PaintUtils.equal((Paint) null, (Paint) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Color color0 = PaintUtils.stringToColor("");
      boolean boolean0 = PaintUtils.equal((Paint) null, color0);
      assertFalse(boolean0);
  }
}
