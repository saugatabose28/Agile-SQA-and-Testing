/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:04:53 GMT 2023
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.chrono.ThaiBuddhistDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.RelativeDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RelativeDateFormat_ESTest extends RelativeDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.setShowZeroHours(false);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      relativeDateFormat0.setDayFormatter(numberFormat0);
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      relativeDateFormat0.setTimeZone(timeZone0);
      MockDate mockDate1 = new MockDate((-636), (-17), (-17), 0, (-363));
      mockDate0.setTime(0);
      MockDate.UTC((-1587), 1, 0, (-17), 1, (-594));
      mockDate1.after(mockDate0);
      mockDate0.before(mockDate1);
      relativeDateFormat0.format((Date) mockDate0);
      relativeDateFormat0.setDaySuffix("");
      relativeDateFormat0.setBaseMillis(0L);
      relativeDateFormat0.setSecondFormatter(numberFormat0);
      relativeDateFormat0.getMinuteSuffix();
      relativeDateFormat0.setHourSuffix("");
      relativeDateFormat0.setBaseMillis((-1587));
      relativeDateFormat0.setHourFormatter(numberFormat0);
      relativeDateFormat0.setHourFormatter(numberFormat0);
      ParsePosition parsePosition0 = new ParsePosition((-636));
      relativeDateFormat0.parse("", parsePosition0);
      relativeDateFormat0.getPositivePrefix();
      RelativeDateFormat relativeDateFormat1 = new RelativeDateFormat();
      relativeDateFormat0.equals(relativeDateFormat1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(610L);
      String string0 = ") to be in the range ";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(") to be in the range ");
      NumberFormat.getNumberInstance();
      relativeDateFormat0.setNumberFormat(choiceFormat0);
      DateFormat.getInstance();
      relativeDateFormat0.setBaseMillis(610L);
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      relativeDateFormat1.setDayFormatter(choiceFormat0);
      relativeDateFormat0.equals(relativeDateFormat1);
      String string1 = "";
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.RFC_1123_DATE_TIME;
      relativeDateFormat0.setLenient(true);
      dateTimeFormatter0.toFormat();
      dateTimeFormatter0.getZone();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        ZoneId.of("", (Map<String, String>) hashMap0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, invalid format: 
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      relativeDateFormat0.format(date0);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.getPositivePrefix();
      // Undeclared exception!
      try { 
        relativeDateFormat0.setMinuteFormatter((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-1078L));
      relativeDateFormat0.getShowZeroDays();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParsePosition parsePosition0 = new ParsePosition((-313));
      relativeDateFormat0.setShowZeroDays(false);
      relativeDateFormat0.setBaseMillis((-1078L));
      relativeDateFormat0.setBaseMillis(0L);
      ParsePosition parsePosition1 = new ParsePosition(0);
      parsePosition1.setErrorIndex(0);
      relativeDateFormat0.parse(";zj7*)|u?4", parsePosition1);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setMinuteSuffix("");
      relativeDateFormat0.setPositivePrefix(") to be in the range ");
      relativeDateFormat0.getBaseMillis();
      relativeDateFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(618L);
      relativeDateFormat0.setMinuteSuffix("");
      DateFormat.getDateTimeInstance();
      relativeDateFormat0.clone();
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.getBaseMillis();
      relativeDateFormat0.setShowZeroDays(true);
      relativeDateFormat0.getMinuteSuffix();
      DateFormat.getDateTimeInstance();
      relativeDateFormat0.getShowZeroHours();
      DateFormat.getInstance();
      relativeDateFormat0.setShowZeroHours(true);
      Locale locale0 = Locale.JAPANESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList0.pollLast();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      relativeDateFormat0.setDayFormatter(numberFormat0);
      relativeDateFormat0.getBaseMillis();
      relativeDateFormat0.setShowZeroHours(false);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setHourFormatter(numberFormat0);
      relativeDateFormat0.getPositivePrefix();
      relativeDateFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      Locale locale0 = new Locale("J~$o", "#");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      DecimalFormat decimalFormat0 = new DecimalFormat("#", decimalFormatSymbols0);
      locale0.toLanguageTag();
      decimalFormat0.format((-1616.905268));
      relativeDateFormat0.setHourFormatter(decimalFormat0);
      relativeDateFormat0.getShowZeroHours();
      relativeDateFormat0.setHourSuffix("78-PK^fgad");
      relativeDateFormat0.setDaySuffix("J~$o");
      relativeDateFormat0.setShowZeroDays(true);
      relativeDateFormat0.setPositivePrefix("und");
      relativeDateFormat0.getShowZeroDays();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.setShowZeroHours(false);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      relativeDateFormat0.setDayFormatter(numberFormat0);
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      relativeDateFormat0.setTimeZone(timeZone0);
      MockDate mockDate1 = new MockDate((-636), (-1), (-1), 0, (-363));
      mockDate0.setTime(0);
      mockDate0.before(mockDate1);
      MockDate.UTC((-1587), 1, 0, (-1), 1, (-594));
      mockDate1.after(mockDate0);
      mockDate0.before(mockDate1);
      relativeDateFormat0.format((Date) mockDate0);
      relativeDateFormat0.setDaySuffix("");
      relativeDateFormat0.setBaseMillis(0L);
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.setSecondFormatter(numberFormat0);
      relativeDateFormat0.getMinuteSuffix();
      relativeDateFormat0.setHourSuffix("");
      relativeDateFormat0.setBaseMillis((-1587));
      relativeDateFormat0.setHourFormatter(numberFormat0);
      relativeDateFormat0.clone();
      relativeDateFormat0.setHourFormatter(numberFormat0);
      ParsePosition parsePosition0 = new ParsePosition((-636));
      relativeDateFormat0.parse("", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Instant instant1 = MockInstant.plus(instant0, 0L, (TemporalUnit) chronoUnit0);
      Instant instant2 = MockInstant.minusSeconds(instant1, 0L);
      Date date0 = Date.from(instant2);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      ChronoUnit.values();
      chronoUnit0.getDuration();
      relativeDateFormat0.clone();
      relativeDateFormat0.clone();
      relativeDateFormat0.setPositivePrefix("[QAlV/WnO8Y");
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.getMinuteSuffix();
      relativeDateFormat0.setSecondSuffix("s");
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.setDaySuffix("<F'ILj[EG2>6k8D");
      relativeDateFormat0.setDaySuffix("");
      relativeDateFormat0.clone();
      relativeDateFormat0.getPositivePrefix();
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.getBaseMillis();
      relativeDateFormat0.setShowZeroHours(true);
      relativeDateFormat0.setHourSuffix("[QAlV/WnO8Y");
      relativeDateFormat0.setDaySuffix("d");
      ParsePosition parsePosition0 = new ParsePosition(37);
      relativeDateFormat0.parse("[QAlV/WnO8Y", parsePosition0);
      relativeDateFormat0.setPositivePrefix("suffix");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 1L;
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(1L);
      int int0 = 0;
      DateFormat.getTimeInstance(0);
      relativeDateFormat0.setShowZeroDays(true);
      String string0 = "20@1P2xEYV2/m";
      String string1 = null;
      // Undeclared exception!
      try { 
        relativeDateFormat0.setSecondSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'suffix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1654), (-1654), (-1654), (-1654), (-1), 1);
      mockDate0.setTime(0L);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      String string0 = "e;[4";
      relativeDateFormat0.setSecondSuffix("e;[4");
      NumberFormat numberFormat0 = null;
      // Undeclared exception!
      try { 
        relativeDateFormat0.setHourFormatter((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      String string0 = null;
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(0);
      DateFormat.getInstance();
      relativeDateFormat0.parse((String) null, parsePosition0);
      // Undeclared exception!
      try { 
        relativeDateFormat0.setDaySuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'suffix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-1L));
      int int0 = 0;
      Locale locale0 = Locale.UK;
      DateFormat dateFormat0 = DateFormat.getDateInstance(0, locale0);
      DateFormat.getTimeInstance();
      relativeDateFormat0.setSecondSuffix("[F");
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.getDaySuffix();
      relativeDateFormat0.equals(dateFormat0);
      NumberFormat numberFormat0 = null;
      // Undeclared exception!
      try { 
        relativeDateFormat0.setDayFormatter((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-3245L));
      relativeDateFormat0.clone();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      NumberFormat.getInstance();
      relativeDateFormat0.setDaySuffix("");
      NumberFormat numberFormat1 = NumberFormat.getNumberInstance();
      relativeDateFormat0.setDayFormatter(numberFormat1);
      relativeDateFormat0.setHourFormatter(numberFormat0);
      relativeDateFormat0.getBaseMillis();
      // Undeclared exception!
      try { 
        relativeDateFormat0.setPositivePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(1L);
      RelativeDateFormat relativeDateFormat1 = new RelativeDateFormat((-1511L));
      NumberFormat numberFormat0 = relativeDateFormat1.getNumberFormat();
      relativeDateFormat0.setDayFormatter(numberFormat0);
      relativeDateFormat0.setHourSuffix("");
      relativeDateFormat0.setShowZeroHours(false);
      relativeDateFormat0.getHourSuffix();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.getShowZeroHours();
      Object object0 = relativeDateFormat0.clone();
      relativeDateFormat0.equals(object0);
      relativeDateFormat0.setBaseMillis(294L);
      String string0 = "";
      Locale locale0 = null;
      try {
        locale0 = new Locale("", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.getDaySuffix();
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.setBaseMillis((-4557L));
      relativeDateFormat0.getBaseMillis();
      DecimalFormat decimalFormat0 = new DecimalFormat("d");
      relativeDateFormat0.setSecondFormatter(decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      DateFormat.getDateTimeInstance(0, 0);
      DateFormat.getDateTimeInstance();
      relativeDateFormat0.getShowZeroHours();
      MockDate mockDate0 = new MockDate(0, 1101, 0, 277, 0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('t');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(277);
      relativeDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      DateFormat.getDateInstance();
      relativeDateFormat0.setMinuteSuffix("6Ay1[6`=H#'JvC'e<");
      relativeDateFormat0.getPositivePrefix();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      NumberFormat numberFormat0 = relativeDateFormat0.getNumberFormat();
      relativeDateFormat0.setSecondFormatter(numberFormat0);
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.clone();
      relativeDateFormat0.setBaseMillis(0L);
      relativeDateFormat0.equals(numberFormat0);
      relativeDateFormat0.setPositivePrefix("");
      relativeDateFormat0.setCalendar((Calendar) null);
      relativeDateFormat0.setMinuteFormatter(numberFormat0);
      relativeDateFormat0.setMinuteSuffix("suffix");
      relativeDateFormat0.setSecondSuffix("Si<kv");
      relativeDateFormat0.setBaseMillis((-596L));
      relativeDateFormat0.setMinuteSuffix("h");
      relativeDateFormat0.setDaySuffix("");
      relativeDateFormat0.setPositivePrefix("R,9ZJ>l>!oqm^=");
      relativeDateFormat0.setHourFormatter(numberFormat0);
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date1).getTime();
      FieldPosition fieldPosition0 = mock(FieldPosition.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        relativeDateFormat0.format(date1, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockDate mockDate0 = new MockDate();
      relativeDateFormat0.format((Date) mockDate0);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.getDaySuffix();
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.setBaseMillis(1358L);
      relativeDateFormat0.setShowZeroHours(true);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      Calendar calendar0 = relativeDateFormat0.getCalendar();
      relativeDateFormat0.setCalendar(calendar0);
      relativeDateFormat0.setDaySuffix("");
      relativeDateFormat0.hashCode();
      relativeDateFormat0.clone();
      NumberFormat numberFormat0 = relativeDateFormat0.getNumberFormat();
      relativeDateFormat0.setDayFormatter(numberFormat0);
      relativeDateFormat0.getHourSuffix();
      relativeDateFormat0.setShowZeroDays(true);
      relativeDateFormat0.getShowZeroHours();
      relativeDateFormat0.setHourFormatter(numberFormat0);
      relativeDateFormat0.getBaseMillis();
      relativeDateFormat0.setSecondSuffix("h");
      relativeDateFormat0.getDaySuffix();
      NumberFormat numberFormat1 = relativeDateFormat0.getNumberFormat();
      relativeDateFormat0.setMinuteFormatter(numberFormat1);
      relativeDateFormat0.equals("");
      relativeDateFormat0.setHourSuffix("");
      relativeDateFormat0.clone();
      relativeDateFormat0.getMinuteSuffix();
      relativeDateFormat0.setMinuteSuffix("m");
      relativeDateFormat0.getShowZeroHours();
      relativeDateFormat0.hashCode();
      relativeDateFormat0.setBaseMillis(0L);
      relativeDateFormat0.getBaseMillis();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.setSecondSuffix("7QydYM-");
      relativeDateFormat0.getDaySuffix();
      relativeDateFormat0.getDaySuffix();
      ParsePosition parsePosition0 = new ParsePosition(0);
      relativeDateFormat0.parse("7QydYM-", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      // Undeclared exception!
      try { 
        relativeDateFormat0.setMinuteSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'suffix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.setLenient(false);
      relativeDateFormat0.setShowZeroHours(true);
      relativeDateFormat0.setShowZeroHours(false);
      relativeDateFormat0.clone();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      relativeDateFormat0.setHourFormatter(numberFormat0);
      relativeDateFormat0.setSecondSuffix("5");
      relativeDateFormat0.getPositivePrefix();
      relativeDateFormat0.setSecondFormatter(numberFormat0);
      relativeDateFormat0.setHourSuffix("s");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      // Undeclared exception!
      try { 
        relativeDateFormat0.setHourSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'suffix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-765L));
      relativeDateFormat0.setMinuteSuffix("");
      relativeDateFormat0.getSecondSuffix();
      relativeDateFormat0.hashCode();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      relativeDateFormat0.setHourFormatter(numberFormat0);
      relativeDateFormat0.setShowZeroDays(true);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(88L);
      DateFormat.getInstance();
      Locale locale0 = Locale.ENGLISH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      relativeDateFormat0.format(date0);
      relativeDateFormat0.getBaseMillis();
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.setDaySuffix("dRFO");
      NumberFormat numberFormat0 = relativeDateFormat0.getNumberFormat();
      numberFormat0.setMinimumFractionDigits((-749));
      relativeDateFormat0.setHourFormatter(numberFormat0);
      Locale locale1 = Locale.UK;
      locale1.getDisplayScript();
      NumberFormat numberFormat1 = NumberFormat.getIntegerInstance(locale1);
      try { 
        numberFormat1.parseObject("Gku^KuHszX]@gnQY");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1107, 0, 1107);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat1 = new RelativeDateFormat(date0);
      relativeDateFormat1.formatToCharacterIterator(date0);
      NumberFormat numberFormat0 = relativeDateFormat1.getNumberFormat();
      relativeDateFormat1.setCalendar(mockGregorianCalendar0);
      relativeDateFormat1.setMinuteFormatter(numberFormat0);
      // Undeclared exception!
      try { 
        relativeDateFormat0.format((Object) relativeDateFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Date date0 = null;
      RelativeDateFormat relativeDateFormat0 = null;
      try {
        relativeDateFormat0 = new RelativeDateFormat((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      relativeDateFormat0.setDayFormatter(numberFormat0);
      Clock clock0 = MockClock.systemDefaultZone();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);
      relativeDateFormat0.equals(thaiBuddhistDate0);
      relativeDateFormat0.setHourFormatter(numberFormat0);
      relativeDateFormat0.getShowZeroHours();
      String string0 = null;
      // Undeclared exception!
      try { 
        relativeDateFormat0.setPositivePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      relativeDateFormat0.format(date0);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.getPositivePrefix();
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.setBaseMillis(1358L);
      relativeDateFormat0.setShowZeroHours(true);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      FieldPosition fieldPosition0 = new FieldPosition(3226);
      fieldPosition0.getFieldAttribute();
      FieldPosition fieldPosition1 = new FieldPosition((Format.Field) null, 3226);
      // Undeclared exception!
      try { 
        relativeDateFormat0.format(date0, (StringBuffer) null, fieldPosition1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(735L);
      relativeDateFormat0.getBaseMillis();
      relativeDateFormat0.setSecondSuffix("$R&_c ");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.setShowZeroHours(true);
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.getSecondSuffix();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(1L);
      NumberFormat numberFormat0 = relativeDateFormat0.getNumberFormat();
      relativeDateFormat0.setMinuteFormatter(numberFormat0);
      NumberFormat numberFormat1 = relativeDateFormat0.getNumberFormat();
      relativeDateFormat0.setDayFormatter(numberFormat1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(0L);
      relativeDateFormat0.getHourSuffix();
      relativeDateFormat0.setDaySuffix("");
      relativeDateFormat0.getPositivePrefix();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      relativeDateFormat0.setHourFormatter(numberFormat0);
      relativeDateFormat0.getBaseMillis();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(1L);
      relativeDateFormat0.getShowZeroDays();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      relativeDateFormat0.getMinuteSuffix();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      NumberFormat numberFormat0 = relativeDateFormat0.getNumberFormat();
      relativeDateFormat0.setSecondFormatter(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(88L);
      relativeDateFormat0.getDaySuffix();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.getMinuteSuffix();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(0L);
      relativeDateFormat0.setPositivePrefix("");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(610L);
      String string0 = ") to be in the range ";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(") to be in the range ");
      NumberFormat.getNumberInstance();
      relativeDateFormat0.setNumberFormat(choiceFormat0);
      DateFormat.getInstance();
      Object object0 = relativeDateFormat0.clone();
      relativeDateFormat0.equals(object0);
      String string1 = "";
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.RFC_1123_DATE_TIME;
      relativeDateFormat0.setLenient(true);
      dateTimeFormatter0.toFormat();
      dateTimeFormatter0.getZone();
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 648, 0, 648);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      relativeDateFormat0.getTimeZone();
      MockDate mockDate1 = new MockDate(648, 2151, 0, (-2834), (-2834));
      mockDate0.before(mockDate1);
      DateFormat.getDateTimeInstance();
      DateFormat.getDateInstance();
      relativeDateFormat0.getHourSuffix();
      relativeDateFormat0.setMinuteSuffix("JJs [");
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.equals(mockDate0);
      relativeDateFormat0.getMinuteSuffix();
      relativeDateFormat0.getHourSuffix();
      relativeDateFormat0.setBaseMillis(648);
      relativeDateFormat0.setBaseMillis(0);
      relativeDateFormat0.setSecondSuffix("d");
      relativeDateFormat0.clone();
      relativeDateFormat0.setDaySuffix(">0[TL/%MepDW");
      relativeDateFormat0.setDaySuffix("h");
      relativeDateFormat0.setBaseMillis(0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(3600000L);
      String string0 = "h";
      DecimalFormat decimalFormat0 = new DecimalFormat();
      relativeDateFormat0.setNumberFormat(decimalFormat0);
      relativeDateFormat0.setBaseMillis((-1292L));
      ParsePosition parsePosition0 = null;
      relativeDateFormat0.parseObject("h", (ParsePosition) null);
      relativeDateFormat0.setShowZeroHours(false);
      boolean boolean0 = false;
      relativeDateFormat0.setShowZeroDays(false);
      relativeDateFormat0.getShowZeroHours();
      relativeDateFormat0.setBaseMillis(3600000L);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("h");
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        NumberFormat.getCurrencyInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      relativeDateFormat0.format(date0);
      relativeDateFormat0.hashCode();
      relativeDateFormat0.getPositivePrefix();
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.getShowZeroDays();
      relativeDateFormat0.setShowZeroHours(false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.setShowZeroHours(false);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      relativeDateFormat0.setDayFormatter(numberFormat0);
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      relativeDateFormat0.setTimeZone(timeZone0);
      MockDate mockDate1 = new MockDate((-636), (-1), (-1), 0, (-363));
      mockDate0.setTime(0);
      mockDate0.before(mockDate1);
      MockDate.UTC((-1587), 1, 0, (-1), 1, (-594));
      mockDate1.after(mockDate0);
      mockDate0.before(mockDate1);
      relativeDateFormat0.format((Date) mockDate0);
      relativeDateFormat0.setDaySuffix("");
      relativeDateFormat0.setBaseMillis(0L);
      relativeDateFormat0.setSecondFormatter(numberFormat0);
      relativeDateFormat0.getMinuteSuffix();
      relativeDateFormat0.setHourSuffix("");
      relativeDateFormat0.setBaseMillis((-1587));
      relativeDateFormat0.setHourFormatter(numberFormat0);
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      relativeDateFormat0.setHourFormatter(numberFormat0);
      ParsePosition parsePosition0 = new ParsePosition((-636));
      relativeDateFormat0.parse("", parsePosition0);
      relativeDateFormat0.getPositivePrefix();
      RelativeDateFormat relativeDateFormat2 = (RelativeDateFormat)relativeDateFormat1.clone();
      boolean boolean0 = relativeDateFormat1.equals(relativeDateFormat2);
      assertFalse(relativeDateFormat0.getShowZeroHours());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(111L);
      Locale locale0 = Locale.CANADA;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      relativeDateFormat0.setMinuteFormatter(decimalFormat0);
      relativeDateFormat0.getShowZeroHours();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      relativeDateFormat0.setDayFormatter(numberFormat0);
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      
      relativeDateFormat0.setHourSuffix("a>@i<gE YgR");
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
  }
}
