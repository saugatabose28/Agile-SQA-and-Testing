/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:56:34 GMT 2023
 */

package org.jfree.chart.title;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.event.TitleChangeListener;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.Title;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaintScaleLegend_ESTest extends PaintScaleLegend_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paintScale0).toString();
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.getAxisLocation();
      paintScaleLegend0.getStripOutlineStroke();
      paintScaleLegend0.setAxisOffset(1.0E-8);
      paintScaleLegend0.setSubdivisionCount(500);
      paintScaleLegend0.getStripOutlineStroke();
      paintScaleLegend0.setPadding((-3907.0), (double) 2.0F, 1.0E-4, (-1403.4033));
      paintScaleLegend0.getSubdivisionCount();
      paintScaleLegend0.getScale();
      Paint paint0 = paintScaleLegend0.getBackgroundPaint();
      paintScaleLegend0.equals(paint0);
      Stroke stroke0 = paintScaleLegend0.getStripOutlineStroke();
      paintScaleLegend0.equals(stroke0);
      paintScaleLegend0.getStripOutlineStroke();
      paintScaleLegend0.getStripOutlinePaint();
      paintScaleLegend0.getAxisOffset();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(1.0).when(paintScale0).getUpperBound();
      AxisSpace axisSpace0 = mock(AxisSpace.class, new ViolatedAssumptionAnswer());
      doReturn((-249.0)).when(axisSpace0).getBottom();
      doReturn(1.0).when(axisSpace0).getTop();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(axisSpace0).when(valueAxis0).reserveSpace(any(java.awt.Graphics2D.class) , any(org.jfree.chart.plot.Plot.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.axis.AxisSpace.class));
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      paintScaleLegend0.setHorizontalAlignment(horizontalAlignment0);
      paintScaleLegend0.setVisible(false);
      paintScaleLegend0.setSubdivisionCount(1314);
      paintScaleLegend0.getAxisLocation();
      paintScaleLegend0.setPadding(0.05, 0.0, (double) 0.0F, (double) 500);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.arrangeRR(graphics2D0, valueAxis0.DEFAULT_RANGE, range0);
      paintScaleLegend0.setStripWidth(4.0);
      paintScaleLegend0.getStripWidth();
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.setAxis(valueAxis1);
      paintScaleLegend0.equals((Object) null);
      paintScaleLegend0.isStripOutlineVisible();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(1046.07).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.isStripOutlineVisible();
      paintScaleLegend0.setPadding((-68.11051), 1.0E-8, 1.0E-8, 1.0E-8);
      paintScaleLegend0.setStripOutlinePaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      paintScaleLegend0.visible = true;
      paintScaleLegend0.setVisible(true);
      paintScaleLegend0.setStripOutlinePaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      paintScaleLegend0.setVisible(true);
      paintScaleLegend0.setWidth(0.001);
      paintScaleLegend0.isStripOutlineVisible();
      paintScaleLegend0.setBackgroundPaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      AxisChangeEvent axisChangeEvent0 = null;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.getAxisLocation();
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(valueAxis0.DEFAULT_RANGE).when(rectangleConstraint0).getHeightRange();
      doReturn((-68.11051)).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(valueAxis0.DEFAULT_RANGE).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        paintScaleLegend0.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(15.0).when(paintScale0).getLowerBound();
      doReturn((Paint) null, (Paint) null, (Paint) null, (Paint) null, (Paint) null).when(paintScale0).getPaint(anyDouble());
      doReturn((-2279.8236187492766)).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.setBackgroundPaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
      paintScaleLegend0.setAxisLocation(axisLocation0);
      paintScaleLegend0.getAxisOffset();
      TitleChangeListener titleChangeListener0 = mock(TitleChangeListener.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.removeChangeListener(titleChangeListener0);
      paintScaleLegend0.isStripOutlineVisible();
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((AxisState) null).when(valueAxis1).draw(any(java.awt.Graphics2D.class) , anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.plot.PlotRenderingInfo.class));
      doReturn(1.0E-8).when(valueAxis1).getLowerBound();
      doReturn(valueAxis0.DEFAULT_RANGE).when(valueAxis1).getRange();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(valueAxis1).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      paintScaleLegend0.setAxis(valueAxis1);
      paintScaleLegend0.getSubdivisionCount();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      paintScaleLegend0.draw(graphics2D0, rectangle2D0);
      ValueAxis valueAxis2 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.setAxis(valueAxis2);
      AxisChangeEvent axisChangeEvent0 = mock(AxisChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Axis) null).when(axisChangeEvent0).getAxis();
      paintScaleLegend0.axisChanged(axisChangeEvent0);
      paintScaleLegend0.setStripWidth(15.0);
      paintScaleLegend0.getBackgroundPaint();
      paintScaleLegend0.setStripOutlinePaint(valueAxis0.DEFAULT_TICK_LABEL_PAINT);
      Paint paint0 = paintScaleLegend0.getStripOutlinePaint();
      paintScaleLegend0.setBackgroundPaint(paint0);
      // Undeclared exception!
      try { 
        paintScaleLegend0.setAxis((ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn((Paint) null, (Paint) null, (Paint) null, (Paint) null, (Paint) null).when(paintScale0).getPaint(anyDouble());
      doReturn((-1779.9446131227)).when(paintScale0).getUpperBound();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLength();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((AxisState) null, (AxisState) null).when(valueAxis0).draw(any(java.awt.Graphics2D.class) , anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.plot.PlotRenderingInfo.class));
      doReturn((-1779.9446131227), 0.0).when(valueAxis0).getLowerBound();
      doReturn(range0, (Range) null).when(valueAxis0).getRange();
      doReturn((AxisSpace) null).when(valueAxis0).reserveSpace(any(java.awt.Graphics2D.class) , any(org.jfree.chart.plot.Plot.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.axis.AxisSpace.class));
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.visible = true;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.draw(graphics2D1, rectangle2D0);
      PaintScale paintScale1 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale1).getLowerBound();
      doReturn(0.0).when(paintScale1).getUpperBound();
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend1 = new PaintScaleLegend(paintScale1, valueAxis1);
      paintScaleLegend0.draw(graphics2D0, rectangle2D0, (Object) paintScaleLegend1);
      paintScaleLegend0.setStripOutlineVisible(true);
      paintScaleLegend0.getStripWidth();
      paintScaleLegend0.getStripOutlineStroke();
      paintScaleLegend1.getSubdivisionCount();
      AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
      paintScaleLegend1.setAxisLocation(axisLocation0);
      AxisLocation axisLocation1 = paintScaleLegend0.getAxisLocation();
      paintScaleLegend0.setAxisLocation(axisLocation1);
      paintScaleLegend0.getAxisLocation();
      paintScaleLegend0.setStripWidth(0.0);
      paintScaleLegend0.setStripOutlineVisible(true);
      paintScaleLegend1.getAxisOffset();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        paintScaleLegend0.arrangeRR(graphics2D2, valueAxis1.DEFAULT_RANGE, valueAxis1.DEFAULT_RANGE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(valueAxis0).getLowerBound();
      doReturn((Range) null).when(valueAxis0).getRange();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.equals((Object) null);
      paintScaleLegend0.setStripOutlineVisible(false);
      paintScaleLegend0.isStripOutlineVisible();
      paintScaleLegend0.setBackgroundPaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      Object object0 = paintScaleLegend0.clone();
      // Undeclared exception!
      try { 
        paintScaleLegend0.draw(graphics2D0, rectangle2D0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(1.0).when(paintScale0).getUpperBound();
      AxisSpace axisSpace0 = mock(AxisSpace.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(axisSpace0).getBottom();
      doReturn(0.0).when(axisSpace0).getTop();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(axisSpace0).when(valueAxis0).reserveSpace(any(java.awt.Graphics2D.class) , any(org.jfree.chart.plot.Plot.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.axis.AxisSpace.class));
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      paintScaleLegend0.setHorizontalAlignment(horizontalAlignment0);
      paintScaleLegend0.setVisible(false);
      paintScaleLegend0.setSubdivisionCount(1314);
      paintScaleLegend0.getAxisLocation();
      paintScaleLegend0.setPadding(0.05, 0.0, (double) 0.0F, (double) 500);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.arrangeRR(graphics2D0, valueAxis0.DEFAULT_RANGE, range0);
      paintScaleLegend0.setStripWidth(4.0);
      paintScaleLegend0.getStripWidth();
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.setAxis(valueAxis1);
      paintScaleLegend0.equals((Object) null);
      paintScaleLegend0.isStripOutlineVisible();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      paintScaleLegend0.setVerticalAlignment(verticalAlignment0);
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(valueAxis1).getLowerBound();
      doReturn((Range) null).when(valueAxis1).getRange();
      AxisChangeEvent axisChangeEvent0 = mock(AxisChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Axis) null).when(axisChangeEvent0).getAxis();
      paintScaleLegend0.axisChanged(axisChangeEvent0);
      paintScaleLegend0.setAxis(valueAxis1);
      paintScaleLegend0.getAxisOffset();
      paintScaleLegend0.setStripWidth(5.0);
      TitleChangeListener titleChangeListener0 = mock(TitleChangeListener.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.addChangeListener(titleChangeListener0);
      paintScaleLegend0.setAxisOffset(Double.NaN);
      paintScaleLegend0.getStripOutlineStroke();
      Object object0 = paintScaleLegend0.clone();
      paintScaleLegend0.equals(object0);
      paintScaleLegend0.getSubdivisionCount();
      PaintScale paintScale1 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale1).getLowerBound();
      doReturn(0.0).when(paintScale1).getUpperBound();
      ValueAxis valueAxis2 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend1 = new PaintScaleLegend(paintScale1, valueAxis2);
      AxisLocation axisLocation0 = paintScaleLegend1.getAxisLocation();
      paintScaleLegend0.setAxisLocation(axisLocation0);
      paintScaleLegend1.getStripOutlinePaint();
      paintScaleLegend1.equals((Object) null);
      paintScaleLegend1.getSubdivisionCount();
      paintScaleLegend1.getStripOutlinePaint();
      paintScaleLegend1.getBackgroundPaint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      // Undeclared exception!
      try { 
        paintScaleLegend0.draw(graphics2D0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.setAxisOffset(1.0E-8);
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      paintScaleLegend0.setPosition(rectangleEdge0);
      paintScaleLegend0.setAxis(valueAxis1);
      // Undeclared exception!
      try { 
        paintScaleLegend0.setSubdivisionCount(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'count' > 0.
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      Object object0 = paintScaleLegend0.clone();
      paintScaleLegend0.equals(object0);
      paintScaleLegend0.getSubdivisionCount();
      paintScaleLegend0.setStripOutlineVisible(false);
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.setAxis(valueAxis1);
      TitleChangeEvent titleChangeEvent0 = mock(TitleChangeEvent.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.notifyListeners(titleChangeEvent0);
      paintScaleLegend0.equals(object0);
      // Undeclared exception!
      try { 
        paintScaleLegend0.setScale((PaintScale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'scale' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      // Undeclared exception!
      try { 
        paintScaleLegend0.setScale((PaintScale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'scale' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      paintScaleLegend0.setNotify(true);
      paintScaleLegend0.setPosition(rectangleEdge0);
      // Undeclared exception!
      try { 
        paintScaleLegend0.setAxis((ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paintScale0).toString();
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      RectangleEdge rectangleEdge0 = paintScaleLegend0.getPosition();
      TitleChangeEvent titleChangeEvent0 = mock(TitleChangeEvent.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.notifyListeners(titleChangeEvent0);
      paintScaleLegend0.setStripOutlineVisible(true);
      paintScaleLegend0.setPosition(rectangleEdge0);
      paintScaleLegend0.setStripOutlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.setAxis(valueAxis1);
      paintScaleLegend0.isStripOutlineVisible();
      paintScaleLegend0.setAxisOffset((-907.0));
      paintScaleLegend0.clone();
      paintScaleLegend0.getAxisOffset();
      paintScaleLegend0.setStripOutlineStroke(valueAxis1.DEFAULT_TICK_MARK_STROKE);
      paintScaleLegend0.getScale();
      paintScaleLegend0.getSubdivisionCount();
      // Undeclared exception!
      try { 
        paintScaleLegend0.setSubdivisionCount((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'count' > 0.
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.setHeight(0.05);
      TitleChangeListener titleChangeListener0 = mock(TitleChangeListener.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.addChangeListener(titleChangeListener0);
      // Undeclared exception!
      try { 
        paintScaleLegend0.axisChanged((AxisChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(1107.9697418937).when(paintScale0).getLowerBound();
      doReturn((Paint) null, (Paint) null, (Paint) null, (Paint) null, (Paint) null).when(paintScale0).getPaint(anyDouble());
      doReturn(15.0).when(paintScale0).getUpperBound();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).getLength();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((AxisState) null).when(valueAxis0).draw(any(java.awt.Graphics2D.class) , anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.plot.PlotRenderingInfo.class));
      doReturn(15.0).when(valueAxis0).getLowerBound();
      doReturn(range0).when(valueAxis0).getRange();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.setStripWidth(0.0F);
      TitleChangeEvent titleChangeEvent0 = mock(TitleChangeEvent.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.notifyListeners(titleChangeEvent0);
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisChangeEvent axisChangeEvent0 = mock(AxisChangeEvent.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.setSubdivisionCount(500);
      paintScaleLegend0.setMargin(0.05, (-919.0), (-4132.51064289103), 0.05);
      paintScaleLegend0.setAxisOffset(0.0F);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      PaintScale paintScale1 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(4155.48).when(paintScale1).getLowerBound();
      doReturn(1107.9697418937).when(paintScale1).getUpperBound();
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend1 = new PaintScaleLegend(paintScale1, valueAxis1);
      paintScaleLegend0.draw(graphics2D0, rectangle2D0, (Object) paintScaleLegend1);
      paintScaleLegend0.setBackgroundPaint(valueAxis0.DEFAULT_TICK_LABEL_PAINT);
      paintScaleLegend0.getAxisOffset();
      paintScaleLegend0.getStripWidth();
      paintScaleLegend0.getStripOutlinePaint();
      ValueAxis valueAxis2 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.setAxis(valueAxis2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      TitleChangeListener titleChangeListener0 = mock(TitleChangeListener.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.addChangeListener(titleChangeListener0);
      paintScaleLegend0.setStripOutlineVisible(true);
      // Undeclared exception!
      try { 
        paintScaleLegend0.setSubdivisionCount((-1612));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'count' > 0.
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      // Undeclared exception!
      try { 
        paintScaleLegend0.setSubdivisionCount((-219));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'count' > 0.
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.setStripOutlinePaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      // Undeclared exception!
      try { 
        paintScaleLegend0.setAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PaintScaleLegend paintScaleLegend0 = null;
      try {
        paintScaleLegend0 = new PaintScaleLegend((PaintScale) null, (ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.getStripOutlineStroke();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paintScale0).toString();
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.setStripOutlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      paintScaleLegend0.setAxisOffset(100.0);
      paintScaleLegend0.setStripOutlineStroke(valueAxis0.DEFAULT_TICK_MARK_STROKE);
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((AxisSpace) null).when(valueAxis1).reserveSpace(any(java.awt.Graphics2D.class) , any(org.jfree.chart.plot.Plot.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.axis.AxisSpace.class));
      paintScaleLegend0.setAxis(valueAxis1);
      paintScaleLegend0.getScale();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        paintScaleLegend0.arrangeRR(graphics2D0, valueAxis0.DEFAULT_RANGE, valueAxis0.DEFAULT_RANGE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.setAxisOffset(500);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.setAxis(valueAxis1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.getStripWidth();
      paintScaleLegend0.getStripOutlinePaint();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paintScale0).toString();
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(valueAxis0).toString();
      doReturn((AxisSpace) null).when(valueAxis0).reserveSpace(any(java.awt.Graphics2D.class) , any(org.jfree.chart.plot.Plot.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.axis.AxisSpace.class));
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      BlockFrame blockFrame0 = paintScaleLegend0.getFrame();
      paintScaleLegend0.setFrame(blockFrame0);
      ValueAxis valueAxis1 = paintScaleLegend0.getAxis();
      paintScaleLegend0.getScale();
      Graphics2D graphics2D0 = null;
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.setVisible(true);
      paintScaleLegend0.setStripOutlinePaint(valueAxis1.DEFAULT_AXIS_LINE_PAINT);
      // Undeclared exception!
      try { 
        paintScaleLegend0.arrangeRR((Graphics2D) null, valueAxis0.DEFAULT_RANGE, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = null;
      try {
        paintScaleLegend0 = new PaintScaleLegend((PaintScale) null, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.setWidth(500);
      PaintScale paintScale1 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      HorizontalAlignment horizontalAlignment0 = paintScaleLegend0.getHorizontalAlignment();
      paintScaleLegend0.setHorizontalAlignment(horizontalAlignment0);
      paintScaleLegend0.setScale(paintScale1);
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        paintScaleLegend0.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(valueAxis0).toString();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.setPadding(0.05, 2876.7640501214, (double) 500, 627.231);
      AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
      paintScaleLegend0.setAxisLocation(axisLocation0);
      ValueAxis valueAxis1 = paintScaleLegend0.getAxis();
      paintScaleLegend0.setStripOutlineStroke(valueAxis1.DEFAULT_AXIS_LINE_STROKE);
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      paintScaleLegend0.setStripOutlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      // Undeclared exception!
      try { 
        paintScaleLegend0.draw((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      Paint paint0 = paintScaleLegend0.getBackgroundPaint();
      TitleChangeListener titleChangeListener0 = mock(TitleChangeListener.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.removeChangeListener(titleChangeListener0);
      paintScaleLegend0.setBackgroundPaint(paint0);
      paintScaleLegend0.getAxisOffset();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.setStripOutlinePaint(valueAxis0.DEFAULT_TICK_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        paintScaleLegend0.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((AxisSpace) null).when(valueAxis0).reserveSpace(any(java.awt.Graphics2D.class) , any(org.jfree.chart.plot.Plot.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.axis.AxisSpace.class));
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.setPadding(valueAxis0.DEFAULT_AXIS_LABEL_INSETS);
      paintScaleLegend0.setPadding(valueAxis0.DEFAULT_TICK_LABEL_INSETS);
      AxisChangeEvent axisChangeEvent0 = mock(AxisChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Axis) null).when(axisChangeEvent0).getAxis();
      paintScaleLegend0.setStripWidth(2.0F);
      paintScaleLegend0.axisChanged(axisChangeEvent0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        paintScaleLegend0.arrangeRR(graphics2D0, valueAxis0.DEFAULT_RANGE, valueAxis0.DEFAULT_RANGE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.getStripOutlinePaint();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.setStripWidth(0.0F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(valueAxis0).toString();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.getAxisOffset();
      paintScaleLegend0.getAxis();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paintScale0).toString();
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.getScale();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(valueAxis0).getLowerBound();
      doReturn((Range) null).when(valueAxis0).getRange();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      // Undeclared exception!
      try { 
        paintScaleLegend0.draw(graphics2D0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      PaintScale paintScale1 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale1).getLowerBound();
      doReturn(0.0).when(paintScale1).getUpperBound();
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend1 = new PaintScaleLegend(paintScale1, valueAxis1);
      paintScaleLegend0.equals(paintScaleLegend1);
      paintScaleLegend1.setStripOutlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(valueAxis0).toString();
      doReturn(0.0).when(valueAxis0).getLowerBound();
      doReturn((Range) null).when(valueAxis0).getRange();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.setWidth(2.0F);
      paintScaleLegend0.clone();
      TitleChangeListener titleChangeListener0 = mock(TitleChangeListener.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.addChangeListener(titleChangeListener0);
      paintScaleLegend0.getSubdivisionCount();
      ValueAxis valueAxis1 = paintScaleLegend0.getAxis();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PaintScale paintScale1 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale1).getLowerBound();
      doReturn(0.0).when(paintScale1).getUpperBound();
      PaintScaleLegend paintScaleLegend1 = new PaintScaleLegend(paintScale1, valueAxis1);
      Rectangle2D rectangle2D0 = paintScaleLegend1.getBounds();
      // Undeclared exception!
      try { 
        paintScaleLegend0.draw(graphics2D0, rectangle2D0, (Object) valueAxis1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(valueAxis0).getLowerBound();
      doReturn((Range) null).when(valueAxis0).getRange();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      // Undeclared exception!
      try { 
        paintScaleLegend0.draw(graphics2D0, rectangle2D0, (Object) graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      PaintScale paintScale1 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.setScale(paintScale1);
      paintScaleLegend0.getSubdivisionCount();
      paintScaleLegend0.setStripOutlineVisible(false);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(valueAxis0).toString();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      paintScaleLegend0.getAxis();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(valueAxis0).toString();
      doReturn((AxisSpace) null).when(valueAxis0).reserveSpace(any(java.awt.Graphics2D.class) , any(org.jfree.chart.plot.Plot.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.axis.AxisSpace.class));
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      paintScaleLegend0.setAxisOffset(1.0E-8);
      paintScaleLegend0.setHorizontalAlignment(horizontalAlignment0);
      ValueAxis valueAxis1 = paintScaleLegend0.getAxis();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        paintScaleLegend0.arrangeRR(graphics2D0, valueAxis0.DEFAULT_RANGE, valueAxis1.DEFAULT_RANGE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(3114.918319549295).when(paintScale0).getLowerBound();
      doReturn((Paint) null, (Paint) null, (Paint) null, (Paint) null, (Paint) null).when(paintScale0).getPaint(anyDouble());
      doReturn(3114.918319549295).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      paintScaleLegend0.setVerticalAlignment(verticalAlignment0);
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((AxisState) null).when(valueAxis1).draw(any(java.awt.Graphics2D.class) , anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.plot.PlotRenderingInfo.class));
      doReturn(0.0).when(valueAxis1).getLowerBound();
      doReturn(valueAxis0.DEFAULT_RANGE).when(valueAxis1).getRange();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(valueAxis1).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisChangeEvent axisChangeEvent0 = mock(AxisChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn(axis0).when(axisChangeEvent0).getAxis();
      paintScaleLegend0.axisChanged(axisChangeEvent0);
      paintScaleLegend0.setAxis(valueAxis1);
      paintScaleLegend0.getAxisOffset();
      paintScaleLegend0.setStripWidth(5.0);
      TitleChangeListener titleChangeListener0 = mock(TitleChangeListener.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.addChangeListener(titleChangeListener0);
      paintScaleLegend0.setAxisOffset(Double.NaN);
      paintScaleLegend0.getStripOutlineStroke();
      Object object0 = paintScaleLegend0.clone();
      paintScaleLegend0.equals(object0);
      paintScaleLegend0.getSubdivisionCount();
      PaintScale paintScale1 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(3348.5654315).when(paintScale1).getLowerBound();
      doReturn(776.2639252264).when(paintScale1).getUpperBound();
      ValueAxis valueAxis2 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend1 = new PaintScaleLegend(paintScale1, valueAxis2);
      AxisLocation axisLocation0 = paintScaleLegend1.getAxisLocation();
      paintScaleLegend0.setAxisLocation(axisLocation0);
      paintScaleLegend1.getStripOutlinePaint();
      paintScaleLegend1.equals((Object) null);
      paintScaleLegend1.getSubdivisionCount();
      paintScaleLegend1.getStripOutlinePaint();
      paintScaleLegend1.getBackgroundPaint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      paintScaleLegend0.draw(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(paintScale0).getLowerBound();
      doReturn(865.415196307981).when(paintScale0).getUpperBound();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).getLength();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((AxisState) null).when(valueAxis0).draw(any(java.awt.Graphics2D.class) , anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.plot.PlotRenderingInfo.class));
      doReturn(865.415196307981).when(valueAxis0).getLowerBound();
      doReturn(range0).when(valueAxis0).getRange();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(valueAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      assertNotNull(paintScaleLegend0);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.visible);
      
      paintScaleLegend0.setMargin((double) 2.0F, 0.0, (double) 500, (double) 0.0F);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.visible);
      
      paintScaleLegend0.setAxisOffset(1.0E-8);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0E-8, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.visible);
      
      PaintScale paintScale1 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null, (Paint) null, (Paint) null, (Paint) null, (Paint) null).when(paintScale1).getPaint(anyDouble());
      paintScaleLegend0.setScale(paintScale1);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0E-8, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.visible);
      
      paintScaleLegend0.setStripOutlinePaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0E-8, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.visible);
      
      paintScaleLegend0.setBackgroundPaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0E-8, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.visible);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisChangeEvent axisChangeEvent0 = mock(AxisChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Axis) null).when(axisChangeEvent0).getAxis();
      paintScaleLegend0.axisChanged(axisChangeEvent0);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0E-8, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.visible);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)paintScaleLegend0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0E-8, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertTrue(paintScaleLegend0.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      PaintScaleLegend paintScaleLegend1 = (PaintScaleLegend)paintScaleLegend0.clone();
      assertNotSame(paintScaleLegend0, paintScaleLegend1);
      assertNotSame(paintScaleLegend1, paintScaleLegend0);
      assertNotNull(paintScaleLegend1);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0E-8, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(100, paintScaleLegend1.getSubdivisionCount());
      assertTrue(paintScaleLegend1.isStripOutlineVisible());
      assertTrue(paintScaleLegend1.getNotify());
      assertEquals(3.0, paintScaleLegend1.getContentYOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend1.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend1.isVisible());
      assertEquals(1.0E-8, paintScaleLegend1.getAxisOffset(), 0.01);
      assertEquals(15.0, paintScaleLegend1.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend1.getHeight(), 0.01);
      assertNull(paintScaleLegend1.getID());
      assertEquals(0.0, paintScaleLegend1.getWidth(), 0.01);
      assertTrue(paintScaleLegend1.equals((Object)paintScaleLegend0));
      assertTrue(paintScaleLegend0.visible);
      assertTrue(paintScaleLegend1.visible);
      
      Object object0 = paintScaleLegend0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0, (Object) paintScaleLegend1);
      assertNotSame(paintScaleLegend0, paintScaleLegend1);
      assertNotSame(paintScaleLegend1, paintScaleLegend0);
      assertNull(object0);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0E-8, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(100, paintScaleLegend1.getSubdivisionCount());
      assertTrue(paintScaleLegend1.isStripOutlineVisible());
      assertTrue(paintScaleLegend1.getNotify());
      assertEquals(3.0, paintScaleLegend1.getContentYOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend1.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend1.isVisible());
      assertEquals(1.0E-8, paintScaleLegend1.getAxisOffset(), 0.01);
      assertEquals(15.0, paintScaleLegend1.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend1.getHeight(), 0.01);
      assertNull(paintScaleLegend1.getID());
      assertEquals(0.0, paintScaleLegend1.getWidth(), 0.01);
      assertTrue(paintScaleLegend0.equals((Object)paintScaleLegend1));
      assertTrue(paintScaleLegend1.equals((Object)paintScaleLegend0));
      assertTrue(paintScaleLegend0.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertTrue(paintScaleLegend1.visible);
      
      paintScaleLegend0.setMargin((-4023.19808988), 15.0, (-1824.52994471796), (-2813.1700881833));
      assertNotSame(paintScaleLegend0, paintScaleLegend1);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals((-4022.19808988), paintScaleLegend0.getContentYOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0E-8, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(16.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertFalse(paintScaleLegend0.equals((Object)paintScaleLegend1));
      assertTrue(paintScaleLegend0.visible);
      
      paintScaleLegend0.setSubdivisionCount(200);
      assertNotSame(paintScaleLegend0, paintScaleLegend1);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(200, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals((-4022.19808988), paintScaleLegend0.getContentYOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0E-8, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(16.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertFalse(paintScaleLegend0.equals((Object)paintScaleLegend1));
      assertTrue(paintScaleLegend0.visible);
      
      boolean boolean0 = paintScaleLegend0.isStripOutlineVisible();
      assertTrue(boolean0);
      assertNotSame(paintScaleLegend0, paintScaleLegend1);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(200, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals((-4022.19808988), paintScaleLegend0.getContentYOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0E-8, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(16.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertFalse(paintScaleLegend0.equals((Object)paintScaleLegend1));
      assertTrue(paintScaleLegend0.visible);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = null;
      PaintScaleLegend paintScaleLegend0 = null;
      try {
        paintScaleLegend0 = new PaintScaleLegend(paintScale0, (ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn((-249.0)).when(paintScale0).getLowerBound();
      doReturn((-249.0)).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      assertNotNull(paintScaleLegend0);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.visible);
      
      paintScaleLegend0.setMargin(valueAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertNull(paintScaleLegend0.getID());
      assertEquals(4.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(4.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.visible);
      
      paintScaleLegend0.setSubdivisionCount(500);
      assertNull(paintScaleLegend0.getID());
      assertEquals(4.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(4.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(500, paintScaleLegend0.getSubdivisionCount());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.visible);
      
      Color color0 = (Color)paintScaleLegend0.getBackgroundPaint();
      assertNotNull(color0);
      assertNull(paintScaleLegend0.getID());
      assertEquals(4.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(4.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(500, paintScaleLegend0.getSubdivisionCount());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertTrue(paintScaleLegend0.visible);
      
      paintScaleLegend0.setPadding((double) 0.0F, 0.05, 0.05, 0.05);
      assertEquals(3.05, paintScaleLegend0.getContentXOffset(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(500, paintScaleLegend0.getSubdivisionCount());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.visible);
      
      paintScaleLegend0.setStripOutlinePaint(color0);
      assertEquals(3.05, paintScaleLegend0.getContentXOffset(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(500, paintScaleLegend0.getSubdivisionCount());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertTrue(paintScaleLegend0.visible);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        paintScaleLegend0.draw(graphics2D0, (Rectangle2D) null, (Object) graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((AxisSpace) null).when(valueAxis0).reserveSpace(any(java.awt.Graphics2D.class) , any(org.jfree.chart.plot.Plot.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.axis.AxisSpace.class));
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      assertNotNull(paintScaleLegend0);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertTrue(paintScaleLegend0.visible);
      
      BlockFrame blockFrame0 = paintScaleLegend0.getFrame();
      assertNotNull(blockFrame0);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertTrue(paintScaleLegend0.visible);
      
      paintScaleLegend0.setFrame(blockFrame0);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertTrue(paintScaleLegend0.visible);
      
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try { 
        paintScaleLegend0.arrangeRR((Graphics2D) null, valueAxis0.DEFAULT_RANGE, valueAxis0.DEFAULT_RANGE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn(0.0).when(paintScale0).getUpperBound();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      assertNotNull(paintScaleLegend0);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.visible);
      
      double double0 = paintScaleLegend0.getStripWidth();
      assertEquals(15.0, double0, 0.01);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.visible);
      
      PaintScaleLegend paintScaleLegend1 = (PaintScaleLegend)paintScaleLegend0.clone();
      assertNotSame(paintScaleLegend0, paintScaleLegend1);
      assertNotSame(paintScaleLegend1, paintScaleLegend0);
      assertNotNull(paintScaleLegend1);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertNull(paintScaleLegend1.getID());
      assertEquals(1.0, paintScaleLegend1.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend1.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend1.getContentXOffset(), 0.01);
      assertEquals(100, paintScaleLegend1.getSubdivisionCount());
      assertTrue(paintScaleLegend1.isVisible());
      assertEquals(0.0, paintScaleLegend1.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend1.getNotify());
      assertEquals(15.0, paintScaleLegend1.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend1.getHeight(), 0.01);
      assertTrue(paintScaleLegend1.isStripOutlineVisible());
      assertTrue(paintScaleLegend1.equals((Object)paintScaleLegend0));
      assertTrue(paintScaleLegend0.visible);
      assertTrue(paintScaleLegend1.visible);
      
      boolean boolean0 = paintScaleLegend0.equals(paintScaleLegend1);
      assertTrue(boolean0);
      assertNotSame(paintScaleLegend0, paintScaleLegend1);
      assertNotSame(paintScaleLegend1, paintScaleLegend0);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertNull(paintScaleLegend1.getID());
      assertEquals(1.0, paintScaleLegend1.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend1.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend1.getContentXOffset(), 0.01);
      assertEquals(100, paintScaleLegend1.getSubdivisionCount());
      assertTrue(paintScaleLegend1.isVisible());
      assertEquals(0.0, paintScaleLegend1.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend1.getNotify());
      assertEquals(15.0, paintScaleLegend1.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend1.getHeight(), 0.01);
      assertTrue(paintScaleLegend1.isStripOutlineVisible());
      assertTrue(paintScaleLegend0.equals((Object)paintScaleLegend1));
      assertTrue(paintScaleLegend1.equals((Object)paintScaleLegend0));
      assertTrue(paintScaleLegend0.visible);
      assertTrue(paintScaleLegend1.visible);
      
      AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
      assertNotSame(paintScaleLegend0, paintScaleLegend1);
      assertNotNull(axisLocation0);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertTrue(paintScaleLegend0.equals((Object)paintScaleLegend1));
      assertTrue(paintScaleLegend0.visible);
      
      paintScaleLegend0.setAxisLocation(axisLocation0);
      assertNotSame(paintScaleLegend0, paintScaleLegend1);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertTrue(paintScaleLegend0.equals((Object)paintScaleLegend1));
      assertTrue(paintScaleLegend0.visible);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(paintScale0).getLowerBound();
      doReturn((-1422.873311)).when(paintScale0).getUpperBound();
      AxisSpace axisSpace0 = mock(AxisSpace.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(axisSpace0).getBottom();
      doReturn(0.0).when(axisSpace0).getTop();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn(axisSpace0).when(valueAxis0).reserveSpace(any(java.awt.Graphics2D.class) , any(org.jfree.chart.plot.Plot.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.axis.AxisSpace.class));
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, valueAxis0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      paintScaleLegend0.arrangeRR(graphics2D0, valueAxis0.DEFAULT_RANGE, valueAxis0.DEFAULT_RANGE);
      paintScaleLegend0.setStripOutlineStroke(valueAxis0.DEFAULT_TICK_MARK_STROKE);
      BlockFrame blockFrame0 = paintScaleLegend0.getFrame();
      paintScaleLegend0.setFrame(blockFrame0);
      paintScaleLegend0.setBackgroundPaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      paintScaleLegend0.setPadding(valueAxis0.DEFAULT_TICK_LABEL_INSETS);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        paintScaleLegend0.arrange(graphics2D1, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
