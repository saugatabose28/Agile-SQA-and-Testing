/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:52:25 GMT 2023
 */

package org.jfree.chart.title;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.event.TitleChangeListener;
import org.jfree.chart.title.ImageTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.chart.util.UnitType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImageTitle_ESTest extends ImageTitle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0, 0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      doReturn((String) null).when(image0).toString();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      ImageTitle imageTitle0 = new ImageTitle(image0, rectangleEdge0, horizontalAlignment0, verticalAlignment0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.setPadding((-1195.9), 1.0, (-1195.9), 2.0);
      Rectangle2D rectangle2D0 = imageTitle0.getBounds();
      imageTitle0.draw(graphics2D0, rectangle2D0, (Object) null);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(graphics2D1).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.draw(graphics2D1, rectangle2D0, (Object) null);
      imageTitle0.draw(graphics2D1, rectangle2D0, (Object) null);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D2).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.draw(graphics2D2, rectangle2D0, (Object) null);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D3).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.drawHorizontal(graphics2D3, rectangle2D0);
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D4).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.draw(graphics2D4, rectangle2D0);
      Graphics2D graphics2D5 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D5).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.drawVertical(graphics2D5, rectangle2D0);
      Graphics2D graphics2D6 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      imageTitle0.arrange(graphics2D6, (RectangleConstraint) null);
      Graphics2D graphics2D7 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D7).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.draw(graphics2D7, rectangle2D0);
      imageTitle0.getImage();
      Graphics2D graphics2D8 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D8).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.draw(graphics2D8, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(1).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle0 = new ImageTitle(image0);
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageTitle0.setBorder(0.0, (-2149.2431078), (-2149.2431078), 0.0);
      imageTitle0.equals(imageTitle0);
      BlockFrame blockFrame0 = imageTitle0.getFrame();
      imageTitle0.setFrame(blockFrame0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Image image2 = mock(Image.class, new ViolatedAssumptionAnswer());
      ImageTitle imageTitle1 = new ImageTitle(image2, (-1), 1, imageTitle0.DEFAULT_POSITION, imageTitle0.DEFAULT_HORIZONTAL_ALIGNMENT, imageTitle0.DEFAULT_VERTICAL_ALIGNMENT, imageTitle0.DEFAULT_PADDING);
      imageTitle1.getBounds();
      Image image3 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageTitle1.setMargin((double) (-1), (-1236.0), 1412.1516252043004, (-2403.415449224));
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      ImageTitle imageTitle2 = new ImageTitle(image3, (-1), 0, imageTitle0.DEFAULT_POSITION, horizontalAlignment0, imageTitle1.DEFAULT_VERTICAL_ALIGNMENT, imageTitle0.DEFAULT_PADDING);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle0 = new ImageTitle(image0);
      imageTitle0.setPadding(0.0, 0.0, 1187.1, 744.9);
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageTitle0.setImage(image1);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Rectangle2D rectangle2D0 = imageTitle0.getBounds();
      imageTitle0.drawHorizontal(graphics2D0, rectangle2D0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D1).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.drawHorizontal(graphics2D1, rectangle2D0);
      Object object0 = imageTitle0.clone();
      imageTitle0.equals(object0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D2).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.drawVertical(graphics2D2, rectangle2D0);
      Image image2 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageTitle0.setImage(image2);
      Image image3 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageTitle0.setImage(image3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      doReturn((String) null).when(image0).toString();
      ImageTitle imageTitle0 = new ImageTitle(image0);
      imageTitle0.setPadding((-718.38894492), (-718.38894492), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      imageTitle0.getImage();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Rectangle2D rectangle2D0 = imageTitle0.getBounds();
      imageTitle0.drawVertical(graphics2D0, rectangle2D0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D1).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.draw(graphics2D1, rectangle2D0);
      // Undeclared exception!
      try { 
        imageTitle0.drawVertical((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle0 = new ImageTitle(image0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.setPadding((-1104.9813147), 1442.192, 1442.192, 4345.926);
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image1).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image1).getWidth(any(java.awt.image.ImageObserver.class));
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      ImageTitle imageTitle1 = new ImageTitle(image1, imageTitle0.DEFAULT_POSITION, imageTitle0.DEFAULT_HORIZONTAL_ALIGNMENT, verticalAlignment0);
      Rectangle2D rectangle2D0 = imageTitle1.getBounds();
      imageTitle0.draw(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0, 0, 0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle0 = new ImageTitle(image0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      imageTitle0.setVerticalAlignment(verticalAlignment0);
      imageTitle0.setMargin((-1.0), (-1.0), (-1.0), 0.0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D1).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Rectangle2D rectangle2D0 = imageTitle0.getBounds();
      imageTitle0.drawHorizontal(graphics2D1, rectangle2D0);
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      imageTitle0.arrange(graphics2D0, rectangleConstraint0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      imageTitle0.arrange(graphics2D2, rectangleConstraint1);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D3).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Rectangle2D rectangle2D1 = imageTitle0.getBounds();
      imageTitle0.draw(graphics2D3, rectangle2D1);
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D4).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.draw(graphics2D4, rectangle2D1, (Object) graphics2D4);
      imageTitle0.equals((Object) null);
      Graphics2D graphics2D5 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D5).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.draw(graphics2D5, rectangle2D1);
      imageTitle0.equals(rectangle2D0);
      Graphics2D graphics2D6 = null;
      // Undeclared exception!
      try { 
        imageTitle0.draw((Graphics2D) null, rectangle2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0, 0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle0 = new ImageTitle(image0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      imageTitle0.setMargin((-3191.6446988946027), 0.0, 0.0, (-2972.6));
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      imageTitle0.arrange(graphics2D0, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      ImageTitle imageTitle0 = new ImageTitle(image0, 0, (-2346), rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Rectangle2D rectangle2D0 = imageTitle0.getBounds();
      imageTitle0.drawVertical(graphics2D0, rectangle2D0);
      Image image1 = null;
      // Undeclared exception!
      try { 
        imageTitle0.setImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      ImageTitle imageTitle0 = new ImageTitle(image0, 0, 1, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Rectangle2D rectangle2D0 = imageTitle0.getBounds();
      imageTitle0.drawVertical(graphics2D0, rectangle2D0);
      imageTitle0.equals(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Image image0 = null;
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      ImageTitle imageTitle0 = null;
      try {
        imageTitle0 = new ImageTitle((Image) null, 0, (-5102), rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      VerticalAlignment verticalAlignment0 = null;
      ImageTitle imageTitle0 = null;
      try {
        imageTitle0 = new ImageTitle(image0, rectangleEdge0, horizontalAlignment0, (VerticalAlignment) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'verticalAlignment' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      doReturn((String) null, (String) null).when(image0).toString();
      ImageTitle imageTitle0 = new ImageTitle(image0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D1).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Rectangle2D rectangle2D0 = imageTitle0.getBounds();
      imageTitle0.drawVertical(graphics2D1, rectangle2D0);
      Rectangle2D rectangle2D1 = imageTitle0.getBounds();
      imageTitle0.drawVertical(graphics2D0, rectangle2D1);
      imageTitle0.getImage();
      imageTitle0.getImage();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D2).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.drawHorizontal(graphics2D2, rectangle2D1);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D3).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.draw(graphics2D3, rectangle2D0);
      // Undeclared exception!
      try { 
        imageTitle0.draw((Graphics2D) null, rectangle2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      doReturn((String) null).when(image0).toString();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      ImageTitle imageTitle0 = new ImageTitle(image0, rectangleEdge0, horizontalAlignment0, verticalAlignment0);
      imageTitle0.equals(rectangleEdge0);
      Image image1 = imageTitle0.getImage();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle1 = new ImageTitle(image1, (-1129), 0, rectangleEdge0, horizontalAlignment0, imageTitle0.DEFAULT_VERTICAL_ALIGNMENT, imageTitle0.DEFAULT_PADDING);
      Rectangle2D rectangle2D0 = imageTitle1.getBounds();
      imageTitle0.draw(graphics2D0, rectangle2D0, (Object) null);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D1).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle2 = new ImageTitle(image1, (-4121), 0, imageTitle1.DEFAULT_POSITION, horizontalAlignment0, imageTitle1.DEFAULT_VERTICAL_ALIGNMENT, imageTitle1.DEFAULT_PADDING);
      imageTitle1.draw(graphics2D1, rectangle2D0, (Object) imageTitle2);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D2).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle2.drawHorizontal(graphics2D2, rectangle2D0);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D3).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle1.draw(graphics2D3, rectangle2D0, (Object) rectangle2D0);
      imageTitle0.setImage(image1);
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D4).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle2.draw(graphics2D4, rectangle2D0, (Object) null);
      Graphics2D graphics2D5 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D5).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle1.drawVertical(graphics2D5, rectangle2D0);
      Graphics2D graphics2D6 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D6).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle1.drawHorizontal(graphics2D6, rectangle2D0);
      Graphics2D graphics2D7 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D7).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.draw(graphics2D7, rectangle2D0, (Object) graphics2D7);
      Graphics2D graphics2D8 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D8).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle2.drawHorizontal(graphics2D8, rectangle2D0);
      Graphics2D graphics2D9 = null;
      Rectangle2D rectangle2D1 = imageTitle1.getBounds();
      // Undeclared exception!
      try { 
        imageTitle1.drawVertical((Graphics2D) null, rectangle2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(image0).toString();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      ImageTitle imageTitle0 = new ImageTitle(image0, 1037, 1037, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
      imageTitle0.equals(rectangleInsets0);
      imageTitle0.getImage();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = null;
      Object object0 = imageTitle0.clone();
      // Undeclared exception!
      try { 
        imageTitle0.draw(graphics2D0, (Rectangle2D) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle0 = new ImageTitle(image0);
      imageTitle0.setWidth(3881.388669);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Rectangle2D rectangle2D0 = imageTitle0.getBounds();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D1).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Rectangle2D rectangle2D1 = imageTitle0.getBounds();
      imageTitle0.draw(graphics2D1, rectangle2D1);
      imageTitle0.drawHorizontal(graphics2D0, rectangle2D0);
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(image1).toString();
      imageTitle0.setImage(image1);
      imageTitle0.getImage();
      TitleChangeEvent titleChangeEvent0 = mock(TitleChangeEvent.class, new ViolatedAssumptionAnswer());
      imageTitle0.setWidth(0.0);
      imageTitle0.notifyListeners(titleChangeEvent0);
      imageTitle0.equals(rectangle2D0);
      imageTitle0.getImage();
      Graphics2D graphics2D2 = null;
      Rectangle2D rectangle2D2 = imageTitle0.getBounds();
      // Undeclared exception!
      try { 
        imageTitle0.drawHorizontal((Graphics2D) null, rectangle2D2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      RectangleInsets rectangleInsets0 = null;
      ImageTitle imageTitle0 = null;
      try {
        imageTitle0 = new ImageTitle(image0, 0, 0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, (RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle0 = new ImageTitle(image0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Rectangle2D rectangle2D0 = imageTitle0.getBounds();
      imageTitle0.drawVertical(graphics2D0, rectangle2D0);
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      imageTitle0.setHorizontalAlignment(horizontalAlignment0);
      imageTitle0.equals((Object) null);
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageTitle0.setImage(image1);
      Image image2 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image2).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image2).getWidth(any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle1 = new ImageTitle(image2, imageTitle0.DEFAULT_POSITION, horizontalAlignment0, imageTitle0.DEFAULT_VERTICAL_ALIGNMENT);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D1).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Image image3 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image3).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image3).getWidth(any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle2 = new ImageTitle(image3);
      imageTitle1.draw(graphics2D1, rectangle2D0, (Object) imageTitle2);
      imageTitle0.equals(imageTitle1);
      Image image4 = null;
      ImageTitle imageTitle3 = null;
      try {
        imageTitle3 = new ImageTitle((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Image image0 = null;
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      ImageTitle imageTitle0 = null;
      try {
        imageTitle0 = new ImageTitle((Image) null, rectangleEdge0, horizontalAlignment0, verticalAlignment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle0 = new ImageTitle(image0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Rectangle2D rectangle2D0 = imageTitle0.getBounds();
      imageTitle0.drawHorizontal(graphics2D0, rectangle2D0);
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image1).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image1).getWidth(any(java.awt.image.ImageObserver.class));
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      ImageTitle imageTitle1 = new ImageTitle(image1, imageTitle0.DEFAULT_POSITION, horizontalAlignment0, imageTitle0.DEFAULT_VERTICAL_ALIGNMENT);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D1).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle1.drawVertical(graphics2D1, rectangle2D0);
      imageTitle0.equals(imageTitle1);
      // Undeclared exception!
      try { 
        imageTitle1.drawVertical((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(956).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn((-19)).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle0 = new ImageTitle(image0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        imageTitle0.drawHorizontal(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      ImageTitle imageTitle0 = new ImageTitle(image0, rectangleEdge0, horizontalAlignment0, verticalAlignment0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      TitleChangeListener titleChangeListener0 = mock(TitleChangeListener.class, new ViolatedAssumptionAnswer());
      imageTitle0.addChangeListener(titleChangeListener0);
      Rectangle2D rectangle2D0 = imageTitle0.getBounds();
      imageTitle0.draw(graphics2D0, rectangle2D0, (Object) verticalAlignment0);
      // Undeclared exception!
      try { 
        imageTitle0.setImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0, 0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      doReturn((String) null).when(image0).toString();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertNotNull(horizontalAlignment0);
      
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertNotNull(verticalAlignment0);
      
      ImageTitle imageTitle0 = new ImageTitle(image0, rectangleEdge0, horizontalAlignment0, verticalAlignment0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertNotNull(imageTitle0);
      assertTrue(imageTitle0.visible);
      
      boolean boolean0 = imageTitle0.equals(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.visible);
      assertFalse(boolean0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = imageTitle0.arrange(graphics2D0, rectangleConstraint0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(2.0, size2D0.getWidth(), 0.01);
      assertEquals(2.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertTrue(imageTitle0.visible);
      assertEquals(2.0, size2D0.width, 0.01);
      assertEquals(2.0, size2D0.height, 0.01);
      
      Image image1 = imageTitle0.getImage();
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(0.0F, image1.getAccelerationPriority(), 0.01F);
      assertNotNull(image1);
      assertTrue(imageTitle0.visible);
      assertSame(image1, image0);
      
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotNull(rectangleInsets0);
      
      ImageTitle imageTitle1 = new ImageTitle(image1, 0, 1769, imageTitle0.DEFAULT_POSITION, imageTitle0.DEFAULT_HORIZONTAL_ALIGNMENT, imageTitle0.DEFAULT_VERTICAL_ALIGNMENT, rectangleInsets0);
      assertFalse(imageTitle1.equals((Object)imageTitle0));
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(0.0F, image1.getAccelerationPriority(), 0.01F);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertTrue(imageTitle1.getNotify());
      assertEquals(1769.0, imageTitle1.getWidth(), 0.01);
      assertEquals(1.0, imageTitle1.getContentXOffset(), 0.01);
      assertTrue(imageTitle1.isVisible());
      assertEquals(1.0, imageTitle1.getContentYOffset(), 0.01);
      assertNull(imageTitle1.getID());
      assertEquals(0.0, imageTitle1.getHeight(), 0.01);
      assertNotNull(imageTitle1);
      assertTrue(imageTitle0.visible);
      assertTrue(imageTitle1.visible);
      
      BlockFrame blockFrame0 = imageTitle1.getFrame();
      assertFalse(imageTitle0.equals((Object)imageTitle1));
      assertFalse(imageTitle1.equals((Object)imageTitle0));
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(0.0F, image1.getAccelerationPriority(), 0.01F);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertTrue(imageTitle1.getNotify());
      assertEquals(1769.0, imageTitle1.getWidth(), 0.01);
      assertEquals(1.0, imageTitle1.getContentXOffset(), 0.01);
      assertTrue(imageTitle1.isVisible());
      assertEquals(1.0, imageTitle1.getContentYOffset(), 0.01);
      assertNull(imageTitle1.getID());
      assertEquals(0.0, imageTitle1.getHeight(), 0.01);
      assertNotNull(blockFrame0);
      assertTrue(imageTitle0.visible);
      assertTrue(imageTitle1.visible);
      assertNotSame(imageTitle0, imageTitle1);
      assertSame(image1, image0);
      assertNotSame(imageTitle1, imageTitle0);
      
      imageTitle0.setFrame(blockFrame0);
      assertFalse(imageTitle0.equals((Object)imageTitle1));
      assertFalse(imageTitle1.equals((Object)imageTitle0));
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(0.0F, image1.getAccelerationPriority(), 0.01F);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertTrue(imageTitle1.getNotify());
      assertEquals(1769.0, imageTitle1.getWidth(), 0.01);
      assertEquals(1.0, imageTitle1.getContentXOffset(), 0.01);
      assertTrue(imageTitle1.isVisible());
      assertEquals(1.0, imageTitle1.getContentYOffset(), 0.01);
      assertNull(imageTitle1.getID());
      assertEquals(0.0, imageTitle1.getHeight(), 0.01);
      assertTrue(imageTitle0.visible);
      assertTrue(imageTitle1.visible);
      assertNotSame(imageTitle0, imageTitle1);
      assertSame(image1, image0);
      assertNotSame(imageTitle1, imageTitle0);
      
      boolean boolean1 = imageTitle0.equals(rectangleEdge0);
      assertFalse(imageTitle0.equals((Object)imageTitle1));
      assertTrue(boolean1 == boolean0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.visible);
      assertFalse(boolean1);
      assertNotSame(imageTitle0, imageTitle1);
      
      imageTitle0.setImage(image1);
      assertFalse(imageTitle0.equals((Object)imageTitle1));
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(0.0F, image1.getAccelerationPriority(), 0.01F);
      assertTrue(imageTitle0.visible);
      assertNotSame(imageTitle0, imageTitle1);
      assertSame(image1, image0);
      
      boolean boolean2 = imageTitle0.equals(verticalAlignment0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(imageTitle0.equals((Object)imageTitle1));
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.visible);
      assertFalse(boolean2);
      assertNotSame(imageTitle0, imageTitle1);
      
      BlockFrame blockFrame1 = imageTitle0.getFrame();
      assertFalse(imageTitle0.equals((Object)imageTitle1));
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertNotNull(blockFrame1);
      assertTrue(imageTitle0.visible);
      assertSame(blockFrame1, blockFrame0);
      assertNotSame(imageTitle0, imageTitle1);
      
      imageTitle0.setFrame(blockFrame1);
      assertFalse(imageTitle0.equals((Object)imageTitle1));
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertTrue(imageTitle0.visible);
      assertSame(blockFrame1, blockFrame0);
      assertNotSame(imageTitle0, imageTitle1);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)imageTitle0.getBounds();
      assertFalse(imageTitle0.equals((Object)imageTitle1));
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.getNotify());
      assertTrue(imageTitle0.isVisible());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertTrue(imageTitle0.visible);
      assertNotSame(imageTitle0, imageTitle1);
      
      // Undeclared exception!
      try { 
        imageTitle0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Float0, (Object) horizontalAlignment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle0 = new ImageTitle(image0);
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertTrue(imageTitle0.getNotify());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertNotNull(imageTitle0);
      assertTrue(imageTitle0.visible);
      
      TitleChangeListener titleChangeListener0 = mock(TitleChangeListener.class, new ViolatedAssumptionAnswer());
      imageTitle0.removeChangeListener(titleChangeListener0);
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertTrue(imageTitle0.getNotify());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertTrue(imageTitle0.visible);
      
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertNotNull(verticalAlignment0);
      
      imageTitle0.setVerticalAlignment(verticalAlignment0);
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertTrue(imageTitle0.getNotify());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertTrue(imageTitle0.visible);
      
      ImageTitle imageTitle1 = (ImageTitle)imageTitle0.clone();
      assertTrue(imageTitle1.equals((Object)imageTitle0));
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertTrue(imageTitle0.getNotify());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle1.getContentYOffset(), 0.01);
      assertNull(imageTitle1.getID());
      assertEquals(1.0, imageTitle1.getContentXOffset(), 0.01);
      assertTrue(imageTitle1.getNotify());
      assertEquals(0.0, imageTitle1.getHeight(), 0.01);
      assertTrue(imageTitle1.isVisible());
      assertEquals(0.0, imageTitle1.getWidth(), 0.01);
      assertNotNull(imageTitle1);
      assertTrue(imageTitle0.visible);
      assertTrue(imageTitle1.visible);
      assertNotSame(imageTitle0, imageTitle1);
      assertNotSame(imageTitle1, imageTitle0);
      
      boolean boolean0 = imageTitle0.equals(imageTitle1);
      assertTrue(imageTitle0.equals((Object)imageTitle1));
      assertTrue(imageTitle1.equals((Object)imageTitle0));
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertTrue(imageTitle0.getNotify());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle1.getContentYOffset(), 0.01);
      assertNull(imageTitle1.getID());
      assertEquals(1.0, imageTitle1.getContentXOffset(), 0.01);
      assertTrue(imageTitle1.getNotify());
      assertEquals(0.0, imageTitle1.getHeight(), 0.01);
      assertTrue(imageTitle1.isVisible());
      assertEquals(0.0, imageTitle1.getWidth(), 0.01);
      assertTrue(imageTitle0.visible);
      assertTrue(imageTitle1.visible);
      assertTrue(boolean0);
      assertNotSame(imageTitle0, imageTitle1);
      assertNotSame(imageTitle1, imageTitle0);
      
      boolean boolean1 = imageTitle0.equals(imageTitle1);
      assertTrue(imageTitle0.equals((Object)imageTitle1));
      assertTrue(imageTitle1.equals((Object)imageTitle0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertTrue(imageTitle0.getNotify());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(1.0, imageTitle1.getContentYOffset(), 0.01);
      assertNull(imageTitle1.getID());
      assertEquals(1.0, imageTitle1.getContentXOffset(), 0.01);
      assertTrue(imageTitle1.getNotify());
      assertEquals(0.0, imageTitle1.getHeight(), 0.01);
      assertTrue(imageTitle1.isVisible());
      assertEquals(0.0, imageTitle1.getWidth(), 0.01);
      assertTrue(imageTitle0.visible);
      assertTrue(imageTitle1.visible);
      assertTrue(boolean1);
      assertNotSame(imageTitle0, imageTitle1);
      assertNotSame(imageTitle1, imageTitle0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)imageTitle0.getBounds();
      assertTrue(imageTitle0.equals((Object)imageTitle1));
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertTrue(imageTitle0.getNotify());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Float0);
      assertTrue(imageTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotSame(imageTitle0, imageTitle1);
      
      imageTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0);
      assertTrue(imageTitle0.equals((Object)imageTitle1));
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertTrue(imageTitle0.getNotify());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(imageTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotSame(imageTitle0, imageTitle1);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = null;
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)imageTitle0.getBounds();
      assertTrue(imageTitle0.equals((Object)imageTitle1));
      assertEquals(0.0, imageTitle0.getWidth(), 0.01);
      assertEquals(1.0, imageTitle0.getContentYOffset(), 0.01);
      assertNull(imageTitle0.getID());
      assertEquals(0.0, imageTitle0.getHeight(), 0.01);
      assertTrue(imageTitle0.isVisible());
      assertTrue(imageTitle0.getNotify());
      assertEquals(1.0, imageTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertNotNull(rectangle2D_Float1);
      assertTrue(imageTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertNotSame(imageTitle0, imageTitle1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      
      // Undeclared exception!
      try { 
        imageTitle0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Float1, (Object) rectangle2D_Float1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0, 0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      doReturn((String) null).when(image0).toString();
      ImageTitle imageTitle0 = new ImageTitle(image0);
      BlockFrame blockFrame0 = imageTitle0.getFrame();
      imageTitle0.setFrame(blockFrame0);
      Image image1 = imageTitle0.getImage();
      imageTitle0.setImage(image1);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      Rectangle2D rectangle2D0 = imageTitle0.getBounds();
      imageTitle0.drawHorizontal(graphics2D0, rectangle2D0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D1).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.drawVertical(graphics2D1, rectangle2D0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      imageTitle0.arrange(graphics2D2, rectangleConstraint0);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D3).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.drawVertical(graphics2D3, rectangle2D0);
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D4).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      imageTitle0.draw(graphics2D4, rectangle2D0);
      Graphics2D graphics2D5 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Image image2 = null;
      ImageTitle imageTitle1 = null;
      try {
        imageTitle1 = new ImageTitle((Image) null, 0, 556, imageTitle0.DEFAULT_POSITION, imageTitle0.DEFAULT_HORIZONTAL_ALIGNMENT, imageTitle0.DEFAULT_VERTICAL_ALIGNMENT, imageTitle0.DEFAULT_PADDING);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.title.ImageTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(1).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      ImageTitle imageTitle0 = new ImageTitle(image0);
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageTitle0.setBorder(0.0, (-2149.2431078), (-2149.2431078), 0.0);
      boolean boolean0 = imageTitle0.equals(imageTitle0);
      assertTrue(boolean0);
      
      BlockFrame blockFrame0 = imageTitle0.getFrame();
      imageTitle0.setFrame(blockFrame0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Image image2 = mock(Image.class, new ViolatedAssumptionAnswer());
      ImageTitle imageTitle1 = new ImageTitle(image2, (-1), 1, imageTitle0.DEFAULT_POSITION, imageTitle0.DEFAULT_HORIZONTAL_ALIGNMENT, imageTitle0.DEFAULT_VERTICAL_ALIGNMENT, imageTitle0.DEFAULT_PADDING);
      imageTitle1.getBounds();
      Image image3 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageTitle1.setMargin((double) (-1), (-1236.0), 1412.1516252043004, (-2403.415449224));
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      ImageTitle imageTitle2 = new ImageTitle(image3, (-1), 0, imageTitle0.DEFAULT_POSITION, horizontalAlignment0, imageTitle1.DEFAULT_VERTICAL_ALIGNMENT, imageTitle0.DEFAULT_PADDING);
      assertEquals(1.0, imageTitle1.getWidth(), 0.01);
      assertEquals((-1.0), imageTitle2.getHeight(), 0.01);
      assertFalse(imageTitle2.equals((Object)imageTitle1));
  }
}
