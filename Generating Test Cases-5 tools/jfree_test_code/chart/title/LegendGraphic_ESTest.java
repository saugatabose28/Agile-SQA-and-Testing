/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:19:01 GMT 2023
 */

package org.jfree.chart.title;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.title.LegendGraphic;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.ui.StandardGradientPaintTransformer;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LegendGraphic_ESTest extends LegendGraphic_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("").when(paint0).toString();
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D0, paint1);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      legendGraphic0.setShapeAnchor(rectangleAnchor0);
      legendGraphic1.getOutlinePaint();
      legendGraphic0.getShapeLocation();
      legendGraphic1.setShapeOutlineVisible(true);
      legendGraphic0.hashCode();
      legendGraphic1.getOutlineStroke();
      legendGraphic1.setLineStroke((Stroke) null);
      legendGraphic1.getOutlineStroke();
      legendGraphic0.getLine();
      legendGraphic0.getLineStroke();
      legendGraphic1.setLineStroke((Stroke) null);
      legendGraphic1.setShapeVisible(true);
      legendGraphic0.setLineVisible(true);
      legendGraphic1.getShape();
      legendGraphic0.getFillPaint();
      legendGraphic0.setLineVisible(true);
      legendGraphic0.getOutlineStroke();
      legendGraphic0.setLineStroke((Stroke) null);
      LegendGraphic legendGraphic2 = (LegendGraphic)legendGraphic0.clone();
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = (StandardGradientPaintTransformer)legendGraphic0.getFillPaintTransformer();
      legendGraphic0.setFillPaintTransformer(standardGradientPaintTransformer0);
      legendGraphic0.getFillPaintTransformer();
      legendGraphic2.getShape();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendGraphic2.draw(graphics2D0, rectangle2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.ShapeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = legendGraphic0.getPadding();
      legendGraphic0.setMargin(rectangleInsets0);
      legendGraphic0.setPadding(rectangleInsets0);
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D0, paint1);
      legendGraphic0.getOutlineStroke();
      // Undeclared exception!
      try { 
        legendGraphic1.setShapeAnchor((RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = legendGraphic0.getPadding();
      legendGraphic0.setMargin(rectangleInsets0);
      legendGraphic0.setPadding(rectangleInsets0);
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D0, paint1);
      legendGraphic0.getOutlineStroke();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      legendGraphic0.setShapeAnchor(rectangleAnchor0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("").when(paint2).toString();
      LegendGraphic legendGraphic2 = new LegendGraphic(rectangle2D0, paint2);
      Object object0 = legendGraphic2.clone();
      legendGraphic1.draw(graphics2D0, rectangle2D0, object0);
      Paint paint3 = legendGraphic2.getFillPaint();
      legendGraphic1.getLineStroke();
      legendGraphic2.setShapeOutlineVisible(true);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      legendGraphic2.draw(graphics2D2, rectangle2D0, (Object) paint3);
      legendGraphic0.equals((Object) null);
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((double)4.0F).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn((double)4.0F).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        legendGraphic1.arrange(graphics2D1, rectangleConstraint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape0).getBounds2D();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendGraphic0.setOutlinePaint(paint1);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D0, paint2);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      legendGraphic0.setShapeAnchor(rectangleAnchor0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendGraphic0.draw(graphics2D0, rectangle2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rectangle' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      RectangleInsets rectangleInsets0 = legendGraphic0.getPadding();
      legendGraphic0.setPadding(rectangleInsets0);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D0, paint1);
      legendGraphic1.getOutlinePaint();
      legendGraphic1.setHeight(0.0);
      legendGraphic1.setShape(rectangle2D0);
      legendGraphic0.setFillPaint((Paint) null);
      legendGraphic0.setLinePaint((Paint) null);
      legendGraphic0.isShapeOutlineVisible();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      legendGraphic1.arrangeNN(graphics2D0);
      legendGraphic1.setLinePaint((Paint) null);
      legendGraphic1.clone();
      legendGraphic1.getShapeLocation();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      legendGraphic1.arrangeNN(graphics2D1);
      legendGraphic1.isLineVisible();
      legendGraphic1.getLineStroke();
      legendGraphic0.equals((Object) null);
      legendGraphic0.setShape(rectangle2D0);
      legendGraphic0.setOutlineStroke((Stroke) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn(rectangle2D0).when(shape1).getBounds2D();
      doReturn((PathIterator) null).when(shape1).getPathIterator(any(java.awt.geom.AffineTransform.class));
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(shape1, paint1);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendGraphic1.setOutlinePaint(paint2);
      Paint paint3 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendGraphic1.setFillPaint(paint3);
      Rectangle2D rectangle2D1 = legendGraphic1.getBounds();
      legendGraphic1.isLineVisible();
      Paint paint4 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic2 = new LegendGraphic(rectangle2D1, paint4);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      legendGraphic1.setShapeAnchor(rectangleAnchor0);
      Paint paint5 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic3 = new LegendGraphic(rectangle2D0, paint5);
      legendGraphic3.getOutlineStroke();
      legendGraphic0.setLineStroke((Stroke) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendGraphic1.draw(graphics2D0, rectangle2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D0, paint1);
      legendGraphic1.setShape(rectangle2D0);
      legendGraphic1.isShapeOutlineVisible();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint0).toString();
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D0, paint1);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      legendGraphic0.setShapeAnchor(rectangleAnchor0);
      legendGraphic1.getOutlinePaint();
      legendGraphic0.getShapeLocation();
      legendGraphic1.setShapeOutlineVisible(true);
      legendGraphic0.hashCode();
      legendGraphic1.getOutlineStroke();
      legendGraphic1.setLineStroke((Stroke) null);
      legendGraphic1.getOutlineStroke();
      legendGraphic0.getLine();
      legendGraphic0.getLineStroke();
      legendGraphic1.setLineStroke((Stroke) null);
      legendGraphic1.setShapeVisible(true);
      legendGraphic0.setLineVisible(true);
      legendGraphic1.getShape();
      legendGraphic0.getFillPaint();
      legendGraphic0.setLineVisible(true);
      legendGraphic0.getOutlineStroke();
      legendGraphic0.setLineStroke((Stroke) null);
      legendGraphic0.clone();
      GradientPaintTransformer gradientPaintTransformer0 = legendGraphic0.getFillPaintTransformer();
      legendGraphic0.setFillPaintTransformer(gradientPaintTransformer0);
      legendGraphic0.getFillPaintTransformer();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      legendGraphic0.hashCode();
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D0, paint1);
      legendGraphic1.setBorder(0.0, 0.0, 2.0, 0.0);
      legendGraphic0.getLineStroke();
      legendGraphic1.setLineStroke((Stroke) null);
      BlockFrame blockFrame0 = legendGraphic0.getFrame();
      legendGraphic1.setFrame(blockFrame0);
      // Undeclared exception!
      try { 
        legendGraphic1.setFillPaintTransformer((GradientPaintTransformer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'transformer' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint0).toString();
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      RectangleInsets rectangleInsets0 = legendGraphic0.getPadding();
      legendGraphic0.setPadding(rectangleInsets0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D0, paint1);
      legendGraphic0.getFillPaint();
      legendGraphic0.getShapeLocation();
      legendGraphic0.getLineStroke();
      legendGraphic1.getLineStroke();
      legendGraphic0.setLineVisible(true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape0).getBounds2D();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      legendGraphic0.setPadding(1.0, 0.0, 0.0, 0.0);
      legendGraphic0.getOutlineStroke();
      legendGraphic0.setLineStroke((Stroke) null);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      // Undeclared exception!
      try { 
        legendGraphic0.draw(graphics2D0, rectangle2D0, (Object) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rectangle' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendGraphic0.getOutlineStroke();
      legendGraphic0.setOutlineStroke((Stroke) null);
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D0, paint1);
      legendGraphic1.setShapeFilled(false);
      legendGraphic0.setShapeVisible(false);
      legendGraphic1.getLineStroke();
      legendGraphic1.setLineStroke((Stroke) null);
      legendGraphic0.getLinePaint();
      Object object0 = legendGraphic1.clone();
      // Undeclared exception!
      try { 
        legendGraphic1.draw((Graphics2D) null, rectangle2D0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      legendGraphic0.getLineStroke();
      legendGraphic0.setOutlineStroke((Stroke) null);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D0, paint1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape0).getBounds2D();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      legendGraphic0.getBounds();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendGraphic0.arrangeNN(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Rectangle2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn("bCN[\"Btsl").when(shape0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      legendGraphic0.setShapeFilled(true);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D0, paint1);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = legendGraphic1.getBounds();
      legendGraphic1.draw(graphics2D0, rectangle2D1, (Object) rectangle2D0);
      legendGraphic1.getLine();
      legendGraphic0.setHeight(0.0);
      legendGraphic1.getShapeAnchor();
      legendGraphic1.isShapeVisible();
      legendGraphic1.setShapeVisible(true);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendGraphic1.setOutlinePaint(paint2);
      legendGraphic1.getOutlineStroke();
      legendGraphic1.getShapeAnchor();
      legendGraphic0.getShape();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      legendGraphic0.setShapeLocation(rectangleAnchor0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D0, paint1);
      legendGraphic1.getFillPaintTransformer();
      legendGraphic0.setShape(rectangle2D0);
      legendGraphic1.isShapeVisible();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        legendGraphic0.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      assertNotNull(legendGraphic0);
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)legendGraphic0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D_Float0, paint1);
      assertNotNull(legendGraphic1);
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      
      LegendGraphic legendGraphic2 = (LegendGraphic)legendGraphic1.clone();
      assertNotNull(legendGraphic2);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertFalse(legendGraphic2.equals((Object)legendGraphic0));
      assertTrue(legendGraphic2.equals((Object)legendGraphic1));
      assertNotSame(legendGraphic0, legendGraphic2);
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(legendGraphic1, legendGraphic2);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(legendGraphic2, legendGraphic1);
      assertNotSame(legendGraphic2, legendGraphic0);
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertTrue(legendGraphic2.isShapeFilled());
      assertEquals(2.0, legendGraphic2.getContentYOffset(), 0.01);
      assertNull(legendGraphic2.getID());
      assertFalse(legendGraphic2.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic2.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic2.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeAnchor());
      assertFalse(legendGraphic2.isLineVisible());
      assertEquals(0.0, legendGraphic2.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeLocation());
      assertTrue(legendGraphic2.isShapeVisible());
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        legendGraphic1.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      assertNotNull(legendGraphic0);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      
      legendGraphic0.hashCode();
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)legendGraphic0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D_Float0, paint1);
      assertNotNull(legendGraphic1);
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertTrue(legendGraphic1.isShapeVisible());
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Paint paint2 = legendGraphic0.getOutlinePaint();
      assertNull(paint2);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      
      legendGraphic0.setLineVisible(false);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      
      Shape shape1 = legendGraphic0.getLine();
      assertNull(shape1);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      
      RectangleAnchor rectangleAnchor0 = legendGraphic1.getShapeLocation();
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertTrue(legendGraphic1.isShapeVisible());
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      legendGraphic1.setLineVisible(false);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertTrue(legendGraphic1.isShapeVisible());
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Stroke stroke0 = legendGraphic0.getOutlineStroke();
      assertNull(stroke0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      
      legendGraphic0.setLineStroke((Stroke) null);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = null;
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = null;
      try {
        legendGraphic0 = new LegendGraphic((Shape) null, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      assertNotNull(legendGraphic0);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)legendGraphic0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn(rectangle2D_Float0).when(shape1).getBounds2D();
      doReturn((PathIterator) null).when(shape1).getPathIterator(any(java.awt.geom.AffineTransform.class));
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(shape1, paint1);
      assertNotNull(legendGraphic1);
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendGraphic1.setOutlinePaint(paint2);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Paint paint3 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendGraphic1.setFillPaint(paint3);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)legendGraphic1.getBounds();
      assertNotNull(rectangle2D_Float1);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      
      boolean boolean0 = legendGraphic1.isLineVisible();
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertFalse(boolean0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Paint paint4 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic2 = new LegendGraphic(rectangle2D_Float1, paint4);
      assertNotNull(legendGraphic2);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertFalse(legendGraphic2.equals((Object)legendGraphic0));
      assertFalse(legendGraphic2.equals((Object)legendGraphic1));
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeLocation());
      assertEquals(2.0, legendGraphic2.getContentXOffset(), 0.01);
      assertEquals(0.0, legendGraphic2.getHeight(), 0.01);
      assertTrue(legendGraphic2.isShapeVisible());
      assertFalse(legendGraphic2.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic2.getWidth(), 0.01);
      assertTrue(legendGraphic2.isShapeFilled());
      assertEquals(2.0, legendGraphic2.getContentYOffset(), 0.01);
      assertNull(legendGraphic2.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeAnchor());
      assertFalse(legendGraphic2.isLineVisible());
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      legendGraphic1.setShapeAnchor(rectangleAnchor0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic0.equals((Object)legendGraphic2));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertFalse(legendGraphic1.equals((Object)legendGraphic2));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(legendGraphic0, legendGraphic2);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(legendGraphic1, legendGraphic2);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Paint paint5 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic3 = new LegendGraphic(rectangle2D_Float0, paint5);
      assertNotNull(legendGraphic3);
      assertFalse(legendGraphic3.equals((Object)legendGraphic0));
      assertFalse(legendGraphic3.equals((Object)legendGraphic1));
      assertFalse(legendGraphic3.equals((Object)legendGraphic2));
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic0.equals((Object)legendGraphic2));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertTrue(legendGraphic3.isShapeVisible());
      assertFalse(legendGraphic3.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic3.getHeight(), 0.01);
      assertTrue(legendGraphic3.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic3.getShapeAnchor());
      assertFalse(legendGraphic3.isLineVisible());
      assertEquals(0.0, legendGraphic3.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic3.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic3.getShapeLocation());
      assertEquals(2.0, legendGraphic3.getContentYOffset(), 0.01);
      assertNull(legendGraphic3.getID());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Stroke stroke0 = legendGraphic3.getOutlineStroke();
      assertNull(stroke0);
      assertFalse(legendGraphic3.equals((Object)legendGraphic0));
      assertFalse(legendGraphic3.equals((Object)legendGraphic1));
      assertFalse(legendGraphic3.equals((Object)legendGraphic2));
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic0.equals((Object)legendGraphic3));
      assertFalse(legendGraphic0.equals((Object)legendGraphic2));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertNotSame(legendGraphic3, legendGraphic0);
      assertNotSame(legendGraphic3, legendGraphic1);
      assertNotSame(legendGraphic3, legendGraphic2);
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(legendGraphic0, legendGraphic3);
      assertNotSame(legendGraphic0, legendGraphic2);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertTrue(legendGraphic3.isShapeVisible());
      assertFalse(legendGraphic3.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic3.getHeight(), 0.01);
      assertTrue(legendGraphic3.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic3.getShapeAnchor());
      assertFalse(legendGraphic3.isLineVisible());
      assertEquals(0.0, legendGraphic3.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic3.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic3.getShapeLocation());
      assertEquals(2.0, legendGraphic3.getContentYOffset(), 0.01);
      assertNull(legendGraphic3.getID());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      legendGraphic0.setLineStroke((Stroke) null);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic0.equals((Object)legendGraphic3));
      assertFalse(legendGraphic0.equals((Object)legendGraphic2));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(legendGraphic0, legendGraphic3);
      assertNotSame(legendGraphic0, legendGraphic2);
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendGraphic1.draw(graphics2D0, (Rectangle2D) rectangle2D_Float1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      assertNotNull(legendGraphic0);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)legendGraphic0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn(rectangle2D_Float0).when(shape1).getBounds2D();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(shape1, paint1);
      assertNotNull(legendGraphic1);
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)legendGraphic1.getBounds();
      assertNotNull(rectangle2D_Float1);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = legendGraphic1.arrangeNN(graphics2D0);
      assertNotNull(size2D0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic2 = new LegendGraphic(rectangle2D_Float1, paint2);
      assertNotNull(legendGraphic2);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertFalse(legendGraphic2.equals((Object)legendGraphic1));
      assertFalse(legendGraphic2.equals((Object)legendGraphic0));
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeLocation());
      assertEquals(2.0, legendGraphic2.getContentXOffset(), 0.01);
      assertFalse(legendGraphic2.isLineVisible());
      assertEquals(2.0, legendGraphic2.getContentYOffset(), 0.01);
      assertNull(legendGraphic2.getID());
      assertEquals(0.0, legendGraphic2.getWidth(), 0.01);
      assertEquals(0.0, legendGraphic2.getHeight(), 0.01);
      assertFalse(legendGraphic2.isShapeOutlineVisible());
      assertTrue(legendGraphic2.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeAnchor());
      assertTrue(legendGraphic2.isShapeFilled());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      
      legendGraphic1.setShapeVisible(false);
      assertFalse(legendGraphic0.equals((Object)legendGraphic2));
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertFalse(legendGraphic1.equals((Object)legendGraphic2));
      assertNotSame(legendGraphic0, legendGraphic2);
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(legendGraphic1, legendGraphic2);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertFalse(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      legendGraphic2.draw(graphics2D1, (Rectangle2D) rectangle2D_Float1);
      assertFalse(legendGraphic0.equals((Object)legendGraphic2));
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertFalse(legendGraphic1.equals((Object)legendGraphic2));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertFalse(legendGraphic2.equals((Object)legendGraphic1));
      assertFalse(legendGraphic2.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic2);
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(legendGraphic1, legendGraphic2);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertNotSame(legendGraphic2, legendGraphic1);
      assertNotSame(legendGraphic2, legendGraphic0);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertFalse(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(2.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeLocation());
      assertEquals(2.0, legendGraphic2.getContentXOffset(), 0.01);
      assertFalse(legendGraphic2.isLineVisible());
      assertEquals(2.0, legendGraphic2.getContentYOffset(), 0.01);
      assertNull(legendGraphic2.getID());
      assertEquals(0.0, legendGraphic2.getWidth(), 0.01);
      assertEquals(0.0, legendGraphic2.getHeight(), 0.01);
      assertFalse(legendGraphic2.isShapeOutlineVisible());
      assertTrue(legendGraphic2.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeAnchor());
      assertTrue(legendGraphic2.isShapeFilled());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float1.height, 0.01F);
      assertEquals(2.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float1.width, 0.01F);
      
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = (StandardGradientPaintTransformer)legendGraphic1.getFillPaintTransformer();
      assertNotNull(standardGradientPaintTransformer0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic2));
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertFalse(legendGraphic1.equals((Object)legendGraphic2));
      assertNotSame(legendGraphic0, legendGraphic2);
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(legendGraphic1, legendGraphic2);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertFalse(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      legendGraphic1.setFillPaintTransformer(standardGradientPaintTransformer0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic2));
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertFalse(legendGraphic1.equals((Object)legendGraphic2));
      assertNotSame(legendGraphic0, legendGraphic2);
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(legendGraphic1, legendGraphic2);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertFalse(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      boolean boolean0 = legendGraphic2.isShapeOutlineVisible();
      assertFalse(legendGraphic0.equals((Object)legendGraphic2));
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertFalse(legendGraphic1.equals((Object)legendGraphic2));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertFalse(legendGraphic2.equals((Object)legendGraphic1));
      assertFalse(legendGraphic2.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic2);
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(legendGraphic1, legendGraphic2);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertNotSame(legendGraphic2, legendGraphic1);
      assertNotSame(legendGraphic2, legendGraphic0);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertFalse(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(2.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeLocation());
      assertEquals(2.0, legendGraphic2.getContentXOffset(), 0.01);
      assertFalse(legendGraphic2.isLineVisible());
      assertEquals(2.0, legendGraphic2.getContentYOffset(), 0.01);
      assertNull(legendGraphic2.getID());
      assertEquals(0.0, legendGraphic2.getWidth(), 0.01);
      assertEquals(0.0, legendGraphic2.getHeight(), 0.01);
      assertFalse(legendGraphic2.isShapeOutlineVisible());
      assertTrue(legendGraphic2.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeAnchor());
      assertTrue(legendGraphic2.isShapeFilled());
      assertFalse(boolean0);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float1.height, 0.01F);
      assertEquals(2.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float1.width, 0.01F);
      
      StandardGradientPaintTransformer standardGradientPaintTransformer1 = (StandardGradientPaintTransformer)legendGraphic2.getFillPaintTransformer();
      assertNotNull(standardGradientPaintTransformer1);
      assertTrue(standardGradientPaintTransformer1.equals((Object)standardGradientPaintTransformer0));
      assertFalse(legendGraphic0.equals((Object)legendGraphic2));
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertFalse(legendGraphic1.equals((Object)legendGraphic2));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertFalse(legendGraphic2.equals((Object)legendGraphic1));
      assertFalse(legendGraphic2.equals((Object)legendGraphic0));
      assertNotSame(standardGradientPaintTransformer1, standardGradientPaintTransformer0);
      assertNotSame(legendGraphic0, legendGraphic2);
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(legendGraphic1, legendGraphic2);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertNotSame(legendGraphic2, legendGraphic1);
      assertNotSame(legendGraphic2, legendGraphic0);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertFalse(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(2.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeLocation());
      assertEquals(2.0, legendGraphic2.getContentXOffset(), 0.01);
      assertFalse(legendGraphic2.isLineVisible());
      assertEquals(2.0, legendGraphic2.getContentYOffset(), 0.01);
      assertNull(legendGraphic2.getID());
      assertEquals(0.0, legendGraphic2.getWidth(), 0.01);
      assertEquals(0.0, legendGraphic2.getHeight(), 0.01);
      assertFalse(legendGraphic2.isShapeOutlineVisible());
      assertTrue(legendGraphic2.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeAnchor());
      assertTrue(legendGraphic2.isShapeFilled());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float1.height, 0.01F);
      assertEquals(2.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float1.width, 0.01F);
      
      boolean boolean1 = legendGraphic1.equals(standardGradientPaintTransformer1);
      assertTrue(standardGradientPaintTransformer1.equals((Object)standardGradientPaintTransformer0));
      assertFalse(legendGraphic0.equals((Object)legendGraphic2));
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertTrue(boolean1 == boolean0);
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertFalse(legendGraphic1.equals((Object)legendGraphic2));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertFalse(legendGraphic2.equals((Object)legendGraphic1));
      assertFalse(legendGraphic2.equals((Object)legendGraphic0));
      assertNotSame(standardGradientPaintTransformer1, standardGradientPaintTransformer0);
      assertNotSame(legendGraphic0, legendGraphic2);
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(legendGraphic1, legendGraphic2);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertNotSame(legendGraphic2, legendGraphic1);
      assertNotSame(legendGraphic2, legendGraphic0);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertFalse(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(2.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeLocation());
      assertEquals(2.0, legendGraphic2.getContentXOffset(), 0.01);
      assertFalse(legendGraphic2.isLineVisible());
      assertEquals(2.0, legendGraphic2.getContentYOffset(), 0.01);
      assertNull(legendGraphic2.getID());
      assertEquals(0.0, legendGraphic2.getWidth(), 0.01);
      assertEquals(0.0, legendGraphic2.getHeight(), 0.01);
      assertFalse(legendGraphic2.isShapeOutlineVisible());
      assertTrue(legendGraphic2.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeAnchor());
      assertTrue(legendGraphic2.isShapeFilled());
      assertFalse(boolean1);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float1.height, 0.01F);
      assertEquals(2.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float1.width, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float2 = (Rectangle2D.Float)legendGraphic2.getShape();
      assertNotNull(rectangle2D_Float2);
      assertFalse(legendGraphic0.equals((Object)legendGraphic2));
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float0));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertFalse(legendGraphic1.equals((Object)legendGraphic2));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertFalse(legendGraphic2.equals((Object)legendGraphic1));
      assertFalse(legendGraphic2.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic2);
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float2);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(legendGraphic1, legendGraphic2);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertNotSame(legendGraphic2, legendGraphic1);
      assertNotSame(legendGraphic2, legendGraphic0);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertFalse(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(2.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeLocation());
      assertEquals(2.0, legendGraphic2.getContentXOffset(), 0.01);
      assertFalse(legendGraphic2.isLineVisible());
      assertEquals(2.0, legendGraphic2.getContentYOffset(), 0.01);
      assertNull(legendGraphic2.getID());
      assertEquals(0.0, legendGraphic2.getWidth(), 0.01);
      assertEquals(0.0, legendGraphic2.getHeight(), 0.01);
      assertFalse(legendGraphic2.isShapeOutlineVisible());
      assertTrue(legendGraphic2.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeAnchor());
      assertTrue(legendGraphic2.isShapeFilled());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(2.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float2.height, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float2.width, 0.01F);
      assertEquals(2.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float1.height, 0.01F);
      assertEquals(2.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float1.width, 0.01F);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      legendGraphic2.setShapeLocation(rectangleAnchor0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic2));
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float2));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertFalse(legendGraphic1.equals((Object)legendGraphic2));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertFalse(legendGraphic2.equals((Object)legendGraphic1));
      assertFalse(legendGraphic2.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic2);
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float2);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(legendGraphic1, legendGraphic2);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertNotSame(legendGraphic2, legendGraphic1);
      assertNotSame(legendGraphic2, legendGraphic0);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertFalse(legendGraphic1.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(2.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(2.0, legendGraphic2.getContentXOffset(), 0.01);
      assertFalse(legendGraphic2.isLineVisible());
      assertEquals(2.0, legendGraphic2.getContentYOffset(), 0.01);
      assertNull(legendGraphic2.getID());
      assertEquals(0.0, legendGraphic2.getWidth(), 0.01);
      assertEquals(0.0, legendGraphic2.getHeight(), 0.01);
      assertFalse(legendGraphic2.isShapeOutlineVisible());
      assertTrue(legendGraphic2.isShapeVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeAnchor());
      assertEquals(RectangleAnchor.TOP_LEFT, legendGraphic2.getShapeLocation());
      assertTrue(legendGraphic2.isShapeFilled());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float1.height, 0.01F);
      assertEquals(2.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float1.width, 0.01F);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape0).getBounds2D();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      assertNotNull(legendGraphic0);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)legendGraphic0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D_Float0, paint1);
      assertNotNull(legendGraphic1);
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      legendGraphic0.setShapeVisible(true);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic2 = new LegendGraphic(rectangle2D_Float0, paint2);
      assertNotNull(legendGraphic2);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic2.equals((Object)legendGraphic1));
      assertFalse(legendGraphic2.equals((Object)legendGraphic0));
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, legendGraphic2.getHeight(), 0.01);
      assertFalse(legendGraphic2.isLineVisible());
      assertFalse(legendGraphic2.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic2.getContentYOffset(), 0.01);
      assertEquals(0.0, legendGraphic2.getWidth(), 0.01);
      assertNull(legendGraphic2.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeAnchor());
      assertTrue(legendGraphic2.isShapeFilled());
      assertEquals(2.0, legendGraphic2.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic2.getShapeLocation());
      assertTrue(legendGraphic2.isShapeVisible());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      // Undeclared exception!
      try { 
        legendGraphic0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0, (Object) legendGraphic2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rectangle' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = null;
      try {
        legendGraphic0 = new LegendGraphic((Shape) null, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = null;
      try {
        legendGraphic0 = new LegendGraphic((Shape) null, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      assertNotNull(legendGraphic0);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)legendGraphic0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D_Float0, paint1);
      assertNotNull(legendGraphic1);
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      legendGraphic0.hashCode();
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      
      legendGraphic0.setShape(rectangle2D_Float0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      legendGraphic0.setShape(rectangle2D_Float0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Paint paint2 = legendGraphic0.getLinePaint();
      assertNull(paint2);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = legendGraphic1.arrangeNN(graphics2D0);
      assertNotNull(size2D0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Object object0 = legendGraphic0.draw(graphics2D1, (Rectangle2D) rectangle2D_Float0, (Object) legendGraphic1);
      assertNull(object0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertFalse(legendGraphic0.isLineVisible());
      assertTrue(legendGraphic0.isShapeFilled());
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals((-4.0F), rectangle2D_Float0.height, 0.01F);
      assertEquals(2.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(2.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float0.width, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = null;
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = null;
      try {
        legendGraphic0 = new LegendGraphic((Shape) null, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      assertNotNull(legendGraphic0);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)legendGraphic0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      
      legendGraphic0.setShape(rectangle2D_Float0);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D_Float0, paint1);
      assertNotNull(legendGraphic1);
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)legendGraphic1.getBounds();
      assertNotNull(rectangle2D_Float1);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      legendGraphic1.setShapeLocation(rectangleAnchor0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.CENTER;
      legendGraphic0.setShapeLocation(rectangleAnchor1);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertSame(rectangleAnchor1, rectangleAnchor0);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      
      legendGraphic1.setShapeFilled(true);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      
      legendGraphic1.setHeight(0.0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(2.0, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      
      legendGraphic1.setPadding(0.0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      
      legendGraphic1.setShape(rectangle2D_Float1);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertTrue(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      legendGraphic0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(2.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(2.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals(2.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float0.height, 0.01F);
      
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendGraphic1.setFillPaint(paint2);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(legendGraphic1.equals((Object)legendGraphic0));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(legendGraphic1, legendGraphic0);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(2.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(legendGraphic1.isShapeFilled());
      assertFalse(legendGraphic1.isShapeOutlineVisible());
      assertEquals(0.0, legendGraphic1.getContentYOffset(), 0.01);
      assertNull(legendGraphic1.getID());
      assertEquals(0.0, legendGraphic1.getWidth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, legendGraphic1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeAnchor());
      assertFalse(legendGraphic1.isLineVisible());
      assertEquals(RectangleAnchor.CENTER, legendGraphic1.getShapeLocation());
      assertEquals(0.0, legendGraphic1.getHeight(), 0.01);
      assertTrue(legendGraphic1.isShapeVisible());
      assertEquals(2.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals(2.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float0.height, 0.01F);
      
      RectangleAnchor rectangleAnchor2 = legendGraphic0.getShapeAnchor();
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertSame(rectangleAnchor2, rectangleAnchor1);
      assertSame(rectangleAnchor2, rectangleAnchor0);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor2.toString());
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor2);
      
      boolean boolean0 = legendGraphic0.isShapeFilled();
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      assertTrue(boolean0);
      
      legendGraphic0.setLine(rectangle2D_Float0);
      assertFalse(legendGraphic0.equals((Object)legendGraphic1));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertNotSame(legendGraphic0, legendGraphic1);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertFalse(legendGraphic0.isLineVisible());
      assertEquals(0.0, legendGraphic0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeLocation());
      assertTrue(legendGraphic0.isShapeFilled());
      assertEquals(2.0, legendGraphic0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, legendGraphic0.getShapeAnchor());
      assertEquals(0.0, legendGraphic0.getWidth(), 0.01);
      assertFalse(legendGraphic0.isShapeOutlineVisible());
      assertEquals(2.0, legendGraphic0.getContentYOffset(), 0.01);
      assertNull(legendGraphic0.getID());
      assertTrue(legendGraphic0.isShapeVisible());
      assertEquals(2.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(2.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals(2.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float0.height, 0.01F);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-3259.63194511)).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(1.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        legendGraphic0.arrange(graphics2D1, rectangleConstraint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendGraphic legendGraphic0 = new LegendGraphic(shape0, paint0);
      Rectangle2D rectangle2D0 = legendGraphic0.getBounds();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = legendGraphic0.getPadding();
      legendGraphic0.setMargin(rectangleInsets0);
      legendGraphic0.setPadding(rectangleInsets0);
      LegendGraphic legendGraphic1 = new LegendGraphic(rectangle2D0, paint1);
      legendGraphic0.getOutlineStroke();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      legendGraphic0.setShapeAnchor(rectangleAnchor0);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("").when(paint2).toString();
      LegendGraphic legendGraphic2 = new LegendGraphic(rectangle2D0, paint2);
      legendGraphic2.clone();
      legendGraphic2.getFillPaint();
      legendGraphic1.getLineStroke();
      legendGraphic2.setShapeOutlineVisible(true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(2086.665).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn((double)0.0F).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        legendGraphic1.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
