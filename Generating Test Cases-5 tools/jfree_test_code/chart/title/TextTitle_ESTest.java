/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:58:52 GMT 2023
 */

package org.jfree.chart.title;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.event.TitleChangeListener;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.chart.util.UnitType;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextTitle_ESTest extends TextTitle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      TextTitle textTitle0 = new TextTitle("", font0);
      textTitle0.setText("");
      textTitle0.equals("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(range0).contains(anyDouble());
      textTitle0.arrangeRN(graphics2D0, range0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = textTitle0.getBounds();
      textTitle0.draw(graphics2D1, rectangle2D0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.drawVertical(graphics2D2, rectangle2D0);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.drawHorizontal(graphics2D3, rectangle2D0);
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.arrangeNN(graphics2D4);
      textTitle0.setFont(font0);
      textTitle0.setURLText("gU6E");
      TextTitle textTitle1 = new TextTitle();
      textTitle0.equals(textTitle1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      TitleChangeEvent titleChangeEvent0 = mock(TitleChangeEvent.class, new ViolatedAssumptionAnswer());
      textTitle0.notifyListeners(titleChangeEvent0);
      textTitle0.setMargin(0.0, (-600.9), (-600.9), 727.498964779752);
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(range0).contains(anyDouble());
      textTitle0.arrangeRN(graphics2D0, range0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("");
      TitleChangeListener titleChangeListener0 = mock(TitleChangeListener.class, new ViolatedAssumptionAnswer());
      textTitle0.removeChangeListener(titleChangeListener0);
      textTitle0.setNotify(true);
      textTitle0.hashCode();
      textTitle0.setExpandToFitSpace(true);
      textTitle0.setText("");
      textTitle0.getURLText();
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      textTitle0.setPadding(rectangleInsets0);
      textTitle0.setMargin(0.0, 0.0, (-546.7), (-948.8064));
      textTitle0.setToolTipText("4*[$:wj'<qp_<2");
      textTitle0.getMaximumLinesToDisplay();
      textTitle0.setToolTipText("");
      Font font0 = TextTitle.DEFAULT_FONT;
      textTitle0.setFont(font0);
      textTitle0.getExpandToFitSpace();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((-948.8064)).when(range0).getUpperBound();
      textTitle0.arrangeRR(graphics2D0, range0, range0);
      textTitle0.getMaximumLinesToDisplay();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      textTitle0.hashCode();
      textTitle0.setMaximumLinesToDisplay(0);
      textTitle0.getBackgroundPaint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = textTitle0.getBounds();
      textTitle0.draw(graphics2D0, rectangle2D0, (Object) null);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = textTitle0.getBounds();
      textTitle0.draw(graphics2D1, rectangle2D1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).constrain(anyDouble());
      doReturn(false).when(range0).contains(anyDouble());
      textTitle0.arrangeRN(graphics2D2, range0);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range1).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range1).getUpperBound();
      LengthConstraintType lengthConstraintType1 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range1).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType1).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range1).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        textTitle0.arrange(graphics2D3, rectangleConstraint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("duZVIN[Epp|EPY");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        textTitle0.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      Font font0 = TextTitle.DEFAULT_FONT;
      TextTitle textTitle0 = new TextTitle("", font0);
      textTitle0.setText("");
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      textTitle0.setBackgroundPaint(color0);
      textTitle0.setToolTipText("/>");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).getUpperBound();
      textTitle0.arrangeRR(graphics2D0, range0, range0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range1).getUpperBound();
      textTitle0.arrangeRR(graphics2D1, range1, range1);
      textTitle0.getURLText();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.arrangeNN(graphics2D2);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textTitle0.draw(graphics2D3, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      Font font0 = TextTitle.DEFAULT_FONT;
      textTitle0.setFont(font0);
      textTitle0.setNotify(true);
      textTitle0.setExpandToFitSpace(true);
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      textTitle0.setTextAlignment(horizontalAlignment0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.arrangeNN(graphics2D0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = textTitle0.getBounds();
      textTitle0.drawHorizontal(graphics2D1, rectangle2D0);
      textTitle0.getFont();
      textTitle0.setURLText(").");
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.arrangeFN(graphics2D2, (-1.0));
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.arrangeNN(graphics2D3);
      textTitle0.getToolTipText();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      TextTitle textTitle0 = new TextTitle("", font0);
      textTitle0.setHeight(0.0);
      textTitle0.setNotify(true);
      textTitle0.setURLText("");
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      textTitle0.setTextAlignment(horizontalAlignment0);
      Object object0 = textTitle0.clone();
      textTitle0.setText("Oz^&-fCXw >E");
      textTitle0.hashCode();
      textTitle0.equals(object0);
      textTitle0.setMaximumLinesToDisplay((-1));
      textTitle0.setText("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = textTitle0.getBounds();
      textTitle0.draw(graphics2D0, rectangle2D0, (Object) "");
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).constrain(anyDouble());
      doReturn(false).when(range0).contains(anyDouble());
      textTitle0.arrangeRN(graphics2D1, range0);
      textTitle0.clone();
      textTitle0.clone();
      textTitle0.getBackgroundPaint();
      textTitle0.getPaint();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.drawVertical(graphics2D2, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("");
      textTitle0.setMargin(0.0, 0.0, 3.4028234663852886E38, 1.0);
      textTitle0.getPaint();
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      textTitle0.setTextAlignment(horizontalAlignment0);
      textTitle0.getURLText();
      textTitle0.getExpandToFitSpace();
      textTitle0.getMaximumLinesToDisplay();
      textTitle0.setVisible(false);
      textTitle0.setBackgroundPaint((Paint) null);
      textTitle0.getExpandToFitSpace();
      textTitle0.getURLText();
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      textTitle0.setMargin(rectangleInsets0);
      textTitle0.setToolTipText("");
      textTitle0.getURLText();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).getUpperBound();
      textTitle0.arrangeRR(graphics2D0, range0, range0);
      // Undeclared exception!
      try { 
        textTitle0.setText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      TextTitle textTitle0 = new TextTitle("text", font0);
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      textTitle0.setBackgroundPaint(color0);
      textTitle0.getFont();
      textTitle0.getBackgroundPaint();
      textTitle0.setMaximumLinesToDisplay((-1));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textTitle0.arrangeRN(graphics2D0, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = null;
      Font font0 = TextTitle.DEFAULT_FONT;
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      TextTitle textTitle0 = null;
      try {
        textTitle0 = new TextTitle((String) null, font0, color0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).constrain(anyDouble());
      doReturn(false).when(range0).contains(anyDouble());
      textTitle0.arrangeRN(graphics2D0, range0);
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.arrangeNN(graphics2D1);
      textTitle0.setMargin(rectangleInsets0);
      textTitle0.setExpandToFitSpace(true);
      Font font0 = TextTitle.DEFAULT_FONT;
      textTitle0.setFont(font0);
      textTitle0.getExpandToFitSpace();
      textTitle0.clone();
      textTitle0.hashCode();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range1 = null;
      // Undeclared exception!
      try { 
        textTitle0.arrangeRR(graphics2D2, (Range) null, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      textTitle0.setMaximumLinesToDisplay((-1920));
      textTitle0.setExpandToFitSpace(false);
      Paint paint0 = textTitle0.getPaint();
      textTitle0.setExpandToFitSpace(false);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = textTitle0.getBounds();
      textTitle0.draw(graphics2D0, rectangle2D0);
      textTitle0.setExpandToFitSpace(true);
      textTitle0.hashCode();
      textTitle0.equals(paint0);
      textTitle0.setBackgroundPaint(paint0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).constrain(anyDouble());
      doReturn(false).when(range0).contains(anyDouble());
      textTitle0.arrangeRN(graphics2D1, range0);
      textTitle0.setPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      Font font0 = TextTitle.DEFAULT_FONT;
      textTitle0.setFont(font0);
      textTitle0.setMaximumLinesToDisplay((-1993));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).getUpperBound();
      textTitle0.arrangeRR(graphics2D0, range0, range0);
      textTitle0.getMaximumLinesToDisplay();
      textTitle0.getToolTipText();
      textTitle0.setURLText((String) null);
      textTitle0.setURLText("L44akIc8");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("");
      textTitle0.setMaximumLinesToDisplay(0);
      // Undeclared exception!
      try { 
        textTitle0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      textTitle0.setBackgroundPaint(color0);
      textTitle0.getMaximumLinesToDisplay();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).constrain(anyDouble());
      doReturn(false).when(range0).contains(anyDouble());
      textTitle0.arrangeRN(graphics2D0, range0);
      textTitle0.getToolTipText();
      textTitle0.clone();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.arrangeFN(graphics2D1, 0.0);
      textTitle0.setMargin(0.0, 0.0, 0.0, (-2065.9675));
      textTitle0.hashCode();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.arrangeNN(graphics2D2);
      textTitle0.setMaximumLinesToDisplay(Integer.MAX_VALUE);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.arrangeFN(graphics2D3, 0.0);
      textTitle0.setBackgroundPaint((Paint) null);
      textTitle0.getTextAlignment();
      textTitle0.getText();
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = textTitle0.getBounds();
      textTitle0.drawHorizontal(graphics2D4, rectangle2D0);
      Graphics2D graphics2D5 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.arrangeFN(graphics2D5, 0.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("u*{H");
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      textTitle0.setPadding(rectangleInsets0);
      textTitle0.setURLText("SansSerif");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = textTitle0.getBounds();
      textTitle0.draw(graphics2D0, rectangle2D0, (Object) rectangle2D0);
      textTitle0.clone();
      textTitle0.hashCode();
      textTitle0.getURLText();
      textTitle0.getToolTipText();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.draw(graphics2D1, rectangle2D0, (Object) rectangle2D0);
      textTitle0.setPosition(rectangleEdge0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textTitle0.drawHorizontal(graphics2D2, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("dsJ%");
      textTitle0.setURLText("dsJ%");
      textTitle0.setToolTipText("org.jfree.chart.title.Title");
      textTitle0.setToolTipText("dsJ%");
      textTitle0.getBackgroundPaint();
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      textTitle0.setTextAlignment(horizontalAlignment0);
      textTitle0.getToolTipText();
      textTitle0.getToolTipText();
      textTitle0.setToolTipText("");
      textTitle0.getToolTipText();
      textTitle0.setWidth(0.0);
      Rectangle2D rectangle2D0 = textTitle0.getBounds();
      textTitle0.draw((Graphics2D) null, rectangle2D0, (Object) "dsJ%");
      textTitle0.setBackgroundPaint((Paint) null);
      textTitle0.getToolTipText();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).getUpperBound();
      // Undeclared exception!
      try { 
        textTitle0.arrangeRR((Graphics2D) null, range0, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.arrangeFN(graphics2D0, 0.0);
      textTitle0.setURLText("Unrecognised exception.");
      textTitle0.getPaint();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = textTitle0.getBounds();
      textTitle0.drawVertical(graphics2D1, rectangle2D0);
      textTitle0.getFont();
      textTitle0.getBackgroundPaint();
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      textTitle0.setTextAlignment(horizontalAlignment0);
      textTitle0.setMaximumLinesToDisplay(0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.draw(graphics2D2, rectangle2D0, (Object) "Unrecognised exception.");
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.drawVertical(graphics2D3, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      TextTitle textTitle0 = new TextTitle("sQrTl7%", font0);
      textTitle0.hashCode();
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      textTitle0.setHorizontalAlignment(horizontalAlignment0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = textTitle0.getBounds();
      textTitle0.draw(graphics2D0, rectangle2D0, (Object) graphics2D0);
      textTitle0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      TextTitle textTitle0 = new TextTitle("(nCDK8QEW1_W5s", font0);
      textTitle0.getPaint();
      textTitle0.equals("(nCDK8QEW1_W5s");
      textTitle0.getFont();
      textTitle0.getBackgroundPaint();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextTitle textTitle0 = null;
      try {
        textTitle0 = new TextTitle((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      TextTitle textTitle0 = new TextTitle("org.jfree.chart.title.TextTitle", font0);
      textTitle0.clone();
      textTitle0.setBackgroundPaint((Paint) null);
      HorizontalAlignment horizontalAlignment0 = textTitle0.getTextAlignment();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      TextTitle textTitle1 = null;
      try {
        textTitle1 = new TextTitle("(3yB", font0, (Paint) null, rectangleEdge0, horizontalAlignment0, textTitle0.DEFAULT_VERTICAL_ALIGNMENT, textTitle0.DEFAULT_PADDING);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      textTitle0.getTextAlignment();
      textTitle0.setWidth((-1004.51));
      Font font0 = TextTitle.DEFAULT_FONT;
      textTitle0.setFont(font0);
      textTitle0.setExpandToFitSpace(false);
      textTitle0.getText();
      textTitle0.setToolTipText("09");
      textTitle0.getExpandToFitSpace();
      textTitle0.getText();
      textTitle0.setExpandToFitSpace(false);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      textTitle0.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.arrangeFN(graphics2D0, 0.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).getUpperBound();
      textTitle0.arrangeRR(graphics2D0, range0, range0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        textTitle0.arrange(graphics2D1, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      assertNotNull(font0);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(1, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isBold());
      
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      assertNotNull(horizontalAlignment0);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      assertNotNull(verticalAlignment0);
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      assertNotNull(rectangleInsets0);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      
      TextTitle textTitle0 = new TextTitle(",!.5", font0, color0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(1, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isBold());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getURLText());
      assertEquals(",!.5", textTitle0.getText());
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      
      int int0 = textTitle0.getMaximumLinesToDisplay();
      assertTrue(textTitle0.visible);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(1, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isBold());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getURLText());
      assertEquals(",!.5", textTitle0.getText());
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      assertNotNull(rectangleInsets0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      
      textTitle0.setMargin(rectangleInsets0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      
      HorizontalAlignment horizontalAlignment0 = textTitle0.getTextAlignment();
      assertNotNull(horizontalAlignment0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      Paint paint0 = textTitle0.getBackgroundPaint();
      assertNull(paint0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      
      textTitle0.setNotify(false);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getNotify());
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      
      TextTitle textTitle1 = new TextTitle("_Ob';M&8");
      assertFalse(textTitle1.equals((Object)textTitle0));
      assertNotNull(textTitle1);
      assertTrue(textTitle1.visible);
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getID());
      assertNull(textTitle1.getURLText());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertNull(textTitle1.getToolTipText());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertEquals("_Ob';M&8", textTitle1.getText());
      assertTrue(textTitle1.getNotify());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertTrue(textTitle1.isVisible());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)textTitle1.getBounds();
      assertFalse(textTitle1.equals((Object)textTitle0));
      assertNotSame(textTitle1, textTitle0);
      assertNotNull(rectangle2D_Float0);
      assertTrue(textTitle1.visible);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getID());
      assertNull(textTitle1.getURLText());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertNull(textTitle1.getToolTipText());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertEquals("_Ob';M&8", textTitle1.getText());
      assertTrue(textTitle1.getNotify());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertTrue(textTitle1.isVisible());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      
      Object object0 = textTitle0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Float0, (Object) "Negative 'factor' argument.");
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertFalse(textTitle1.equals((Object)textTitle0));
      assertNotSame(textTitle0, textTitle1);
      assertNotSame(textTitle1, textTitle0);
      assertNull(object0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle1.visible);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getNotify());
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getID());
      assertNull(textTitle1.getURLText());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertNull(textTitle1.getToolTipText());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertEquals("_Ob';M&8", textTitle1.getText());
      assertTrue(textTitle1.getNotify());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertTrue(textTitle1.isVisible());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      
      TextTitle textTitle2 = (TextTitle)textTitle0.clone();
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertTrue(textTitle2.equals((Object)textTitle0));
      assertFalse(textTitle2.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertNotSame(textTitle0, textTitle2);
      assertNotSame(textTitle2, textTitle0);
      assertNotSame(textTitle2, textTitle1);
      assertNotNull(textTitle2);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle2.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getNotify());
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      assertEquals(Integer.MAX_VALUE, textTitle2.getMaximumLinesToDisplay());
      assertEquals("", textTitle2.getText());
      assertEquals(0.0, textTitle2.getHeight(), 0.01);
      assertTrue(textTitle2.isVisible());
      assertEquals(2.0, textTitle2.getContentXOffset(), 0.01);
      assertFalse(textTitle2.getExpandToFitSpace());
      assertNull(textTitle2.getURLText());
      assertEquals(0.0, textTitle2.getWidth(), 0.01);
      assertNull(textTitle2.getToolTipText());
      assertEquals(2.0, textTitle2.getContentYOffset(), 0.01);
      assertNull(textTitle2.getID());
      assertFalse(textTitle2.getNotify());
      
      textTitle0.setURLText("Negative 'factor' argument.");
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertFalse(textTitle0.equals((Object)textTitle2));
      assertNotSame(textTitle0, textTitle1);
      assertNotSame(textTitle0, textTitle2);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getNotify());
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals("Negative 'factor' argument.", textTitle0.getURLText());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      
      Object object1 = textTitle0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Float0, (Object) textTitle2);
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertFalse(textTitle0.equals((Object)textTitle2));
      assertFalse(textTitle1.equals((Object)textTitle0));
      assertFalse(textTitle1.equals((Object)textTitle2));
      assertFalse(textTitle2.equals((Object)textTitle0));
      assertFalse(textTitle2.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertNotSame(textTitle0, textTitle2);
      assertNotSame(textTitle1, textTitle0);
      assertNotSame(textTitle1, textTitle2);
      assertNotSame(textTitle2, textTitle0);
      assertNotSame(textTitle2, textTitle1);
      assertNull(object1);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle1.visible);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertTrue(textTitle2.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getNotify());
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals("Negative 'factor' argument.", textTitle0.getURLText());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getID());
      assertNull(textTitle1.getURLText());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertNull(textTitle1.getToolTipText());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertEquals("_Ob';M&8", textTitle1.getText());
      assertTrue(textTitle1.getNotify());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertTrue(textTitle1.isVisible());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle2.getMaximumLinesToDisplay());
      assertEquals("", textTitle2.getText());
      assertEquals(0.0, textTitle2.getHeight(), 0.01);
      assertTrue(textTitle2.isVisible());
      assertEquals(2.0, textTitle2.getContentXOffset(), 0.01);
      assertFalse(textTitle2.getExpandToFitSpace());
      assertNull(textTitle2.getURLText());
      assertEquals(0.0, textTitle2.getWidth(), 0.01);
      assertNull(textTitle2.getToolTipText());
      assertEquals(2.0, textTitle2.getContentYOffset(), 0.01);
      assertNull(textTitle2.getID());
      assertFalse(textTitle2.getNotify());
      
      textTitle1.setFont(textTitle0.DEFAULT_FONT);
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertFalse(textTitle0.equals((Object)textTitle2));
      assertFalse(textTitle1.equals((Object)textTitle0));
      assertFalse(textTitle1.equals((Object)textTitle2));
      assertNotSame(textTitle0, textTitle1);
      assertNotSame(textTitle0, textTitle2);
      assertNotSame(textTitle1, textTitle0);
      assertNotSame(textTitle1, textTitle2);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle1.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getNotify());
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals("Negative 'factor' argument.", textTitle0.getURLText());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getID());
      assertNull(textTitle1.getURLText());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertNull(textTitle1.getToolTipText());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertEquals("_Ob';M&8", textTitle1.getText());
      assertTrue(textTitle1.getNotify());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertTrue(textTitle1.isVisible());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      
      String string0 = textTitle1.getText();
      assertFalse(textTitle1.equals((Object)textTitle0));
      assertFalse(textTitle1.equals((Object)textTitle2));
      assertNotSame(textTitle1, textTitle0);
      assertNotSame(textTitle1, textTitle2);
      assertNotNull(string0);
      assertTrue(textTitle1.visible);
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getID());
      assertNull(textTitle1.getURLText());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertNull(textTitle1.getToolTipText());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertEquals("_Ob';M&8", textTitle1.getText());
      assertTrue(textTitle1.getNotify());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertTrue(textTitle1.isVisible());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertEquals("_Ob';M&8", string0);
      
      textTitle0.setToolTipText("}=");
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertFalse(textTitle0.equals((Object)textTitle2));
      assertNotSame(textTitle0, textTitle1);
      assertNotSame(textTitle0, textTitle2);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getNotify());
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals("}=", textTitle0.getToolTipText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals("Negative 'factor' argument.", textTitle0.getURLText());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      
      textTitle1.setURLText("Negative 'factor' argument.");
      assertFalse(textTitle1.equals((Object)textTitle0));
      assertFalse(textTitle1.equals((Object)textTitle2));
      assertNotSame(textTitle1, textTitle0);
      assertNotSame(textTitle1, textTitle2);
      assertTrue(textTitle1.visible);
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getID());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertNull(textTitle1.getToolTipText());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertEquals("_Ob';M&8", textTitle1.getText());
      assertTrue(textTitle1.getNotify());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertTrue(textTitle1.isVisible());
      assertEquals("Negative 'factor' argument.", textTitle1.getURLText());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      
      textTitle1.setToolTipText("");
      assertFalse(textTitle1.equals((Object)textTitle0));
      assertFalse(textTitle1.equals((Object)textTitle2));
      assertNotSame(textTitle1, textTitle0);
      assertNotSame(textTitle1, textTitle2);
      assertTrue(textTitle1.visible);
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getID());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertEquals("", textTitle1.getToolTipText());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertEquals("_Ob';M&8", textTitle1.getText());
      assertTrue(textTitle1.getNotify());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertTrue(textTitle1.isVisible());
      assertEquals("Negative 'factor' argument.", textTitle1.getURLText());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      
      Object object2 = textTitle0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Float0, (Object) "Q*G71krrEU?A+ L^:?");
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertFalse(textTitle0.equals((Object)textTitle2));
      assertFalse(textTitle1.equals((Object)textTitle0));
      assertFalse(textTitle1.equals((Object)textTitle2));
      assertNotSame(textTitle0, textTitle1);
      assertNotSame(textTitle0, textTitle2);
      assertNotSame(textTitle1, textTitle0);
      assertNotSame(textTitle1, textTitle2);
      assertNull(object2);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle1.visible);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getNotify());
      assertEquals(2.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals("}=", textTitle0.getToolTipText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals("Negative 'factor' argument.", textTitle0.getURLText());
      assertEquals(2.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getID());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertEquals("", textTitle1.getToolTipText());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertEquals("_Ob';M&8", textTitle1.getText());
      assertTrue(textTitle1.getNotify());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertTrue(textTitle1.isVisible());
      assertEquals("Negative 'factor' argument.", textTitle1.getURLText());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      
      // Undeclared exception!
      try { 
        textTitle1.drawVertical((Graphics2D) null, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("|QfM0^*34>&l@S*;JB");
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals("|QfM0^*34>&l@S*;JB", textTitle0.getText());
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      
      Graphics2D graphics2D0 = null;
      textTitle0.setWidth(824.524373126481);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertEquals("|QfM0^*34>&l@S*;JB", textTitle0.getText());
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertEquals(824.524373126481, textTitle0.getWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        textTitle0.arrangeNN((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("i_=GRm");
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("i_=GRm", textTitle0.getText());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      
      Paint paint0 = textTitle0.getBackgroundPaint();
      assertNull(paint0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("i_=GRm", textTitle0.getText());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      assertNotNull(font0);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      
      TextTitle textTitle0 = new TextTitle("", font0);
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals("", textTitle0.getText());
      assertFalse(textTitle0.getExpandToFitSpace());
      
      textTitle0.setText("]e@f<L");
      assertTrue(textTitle0.visible);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.getNotify());
      assertFalse(textTitle0.getExpandToFitSpace());
      
      textTitle0.setMaximumLinesToDisplay(0);
      assertTrue(textTitle0.visible);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(0, textTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.getNotify());
      assertFalse(textTitle0.getExpandToFitSpace());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.getNotify());
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      
      String string0 = textTitle0.getToolTipText();
      assertNull(string0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.getNotify());
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      assertNotNull(horizontalAlignment0);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      textTitle0.setTextAlignment(horizontalAlignment0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.getNotify());
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.isVisible());
      assertTrue(textTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)textTitle0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.isVisible());
      assertTrue(textTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      
      Object object0 = textTitle0.draw(graphics2D1, (Rectangle2D) rectangle2D_Float0, (Object) graphics2D1);
      assertNull(object0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.isVisible());
      assertTrue(textTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      
      textTitle0.setURLText("D>)[hu_");
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("D>)[hu_", textTitle0.getURLText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.isVisible());
      assertTrue(textTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      
      Object object1 = textTitle0.draw(graphics2D1, (Rectangle2D) rectangle2D_Float0, (Object) null);
      assertNull(object1);
      assertTrue(textTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("D>)[hu_", textTitle0.getURLText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.isVisible());
      assertTrue(textTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)textTitle0.getBounds();
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertTrue(textTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("D>)[hu_", textTitle0.getURLText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.isVisible());
      assertTrue(textTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      
      // Undeclared exception!
      try { 
        textTitle0.drawHorizontal(graphics2D0, rectangle2D_Float1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      assertNotNull(horizontalAlignment0);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      assertNotNull(verticalAlignment0);
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      assertNotNull(rectangleInsets0);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      
      TextTitle textTitle0 = null;
      try {
        textTitle0 = new TextTitle("=f`", (Font) null, color0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "Null 'unitType' argument.";
      Font font0 = TextTitle.DEFAULT_FONT;
      assertNotNull(font0);
      assertTrue(font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      assertNotNull(horizontalAlignment0);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      assertNotNull(verticalAlignment0);
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      assertNotNull(rectangleInsets0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      
      TextTitle textTitle0 = new TextTitle("Null 'unitType' argument.", font0, color0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertTrue(font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("Null 'unitType' argument.", textTitle0.getText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      
      textTitle0.setPaint(color0);
      assertTrue(textTitle0.visible);
      assertTrue(font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("Null 'unitType' argument.", textTitle0.getText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      
      TitleChangeListener titleChangeListener0 = mock(TitleChangeListener.class, new ViolatedAssumptionAnswer());
      textTitle0.addChangeListener(titleChangeListener0);
      assertTrue(textTitle0.visible);
      assertTrue(font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("Null 'unitType' argument.", textTitle0.getText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textTitle0.arrangeRN(graphics2D0, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      assertNotNull(color0);
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      assertNotNull(horizontalAlignment0);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      assertNotNull(verticalAlignment0);
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      assertNotNull(rectangleInsets0);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      
      TextTitle textTitle0 = null;
      try {
        textTitle0 = new TextTitle("U[.Z0G`QgZ+v{= OQ+b", (Font) null, color0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      assertNotNull(font0);
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      assertNotNull(horizontalAlignment0);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      assertNotNull(verticalAlignment0);
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      
      TextTitle textTitle0 = null;
      try {
        textTitle0 = new TextTitle("Null 'font' argument.", font0, color0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, (RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      assertNull(textTitle0.getURLText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      assertNotNull(verticalAlignment0);
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      
      textTitle0.setVerticalAlignment(verticalAlignment0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      assertNull(textTitle0.getURLText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      
      textTitle0.setVerticalAlignment(verticalAlignment0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      assertNull(textTitle0.getURLText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      
      HorizontalAlignment horizontalAlignment0 = null;
      // Undeclared exception!
      try { 
        textTitle0.setTextAlignment((HorizontalAlignment) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'alignment' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      assertNotNull(font0);
      assertFalse(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isBold());
      assertEquals(12, font0.getSize());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      
      TextTitle textTitle0 = null;
      try {
        textTitle0 = new TextTitle((String) null, font0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "n0!8\"*(";
      TextTitle textTitle0 = new TextTitle("n0!8\"*(");
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertEquals("n0!8\"*(", textTitle0.getText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D1).getFontMetrics();
      // Undeclared exception!
      try { 
        textTitle0.arrangeFN(graphics2D1, Double.POSITIVE_INFINITY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "";
      TextTitle textTitle0 = new TextTitle("");
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.isVisible());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      
      textTitle0.hashCode();
      assertTrue(textTitle0.visible);
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.isVisible());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      
      // Undeclared exception!
      try { 
        textTitle0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      assertNotNull(font0);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isBold());
      
      TextTitle textTitle0 = new TextTitle("", font0);
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isBold());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)textTitle0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isBold());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      
      // Undeclared exception!
      try { 
        textTitle0.drawVertical(graphics2D0, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      assertNotNull(font0);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      
      TextTitle textTitle0 = null;
      try {
        textTitle0 = new TextTitle((String) null, font0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      
      TextTitle textTitle1 = (TextTitle)textTitle0.clone();
      assertTrue(textTitle1.equals((Object)textTitle0));
      assertNotSame(textTitle0, textTitle1);
      assertNotSame(textTitle1, textTitle0);
      assertNotNull(textTitle1);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle1.visible);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertTrue(textTitle1.getNotify());
      assertNull(textTitle1.getURLText());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertTrue(textTitle1.isVisible());
      assertEquals("", textTitle1.getText());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertNull(textTitle1.getToolTipText());
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getID());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      
      Graphics2D graphics2D0 = null;
      textTitle0.setVisible(true);
      assertTrue(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      assertNotNull(color0);
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      textTitle0.setBackgroundPaint(color0);
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      Color color1 = (Color)textTitle0.getPaint();
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertSame(color1, color0);
      assertNotNull(color1);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertEquals(255, color1.getAlpha());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getBlue());
      
      HorizontalAlignment horizontalAlignment0 = textTitle0.getTextAlignment();
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertNotNull(horizontalAlignment0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      textTitle0.setBackgroundPaint(color0);
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertSame(color0, color1);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      textTitle0.setExpandToFitSpace(true);
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      
      String string0 = textTitle0.getText();
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertNotNull(string0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertEquals("", string0);
      
      textTitle0.hashCode();
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      
      textTitle0.setText("SansSerif");
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("SansSerif", textTitle0.getText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      
      String string1 = textTitle0.getURLText();
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertNull(string1);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("SansSerif", textTitle0.getText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(3496.28798821239).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        textTitle0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("vL");
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("vL", textTitle0.getText());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      assertNotNull(horizontalAlignment0);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      textTitle0.setHorizontalAlignment(horizontalAlignment0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("vL", textTitle0.getText());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      int int0 = textTitle0.getMaximumLinesToDisplay();
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("vL", textTitle0.getText());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals(Integer.MAX_VALUE, int0);
      
      Font font0 = textTitle0.getFont();
      assertNotNull(font0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("vL", textTitle0.getText());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isBold());
      
      textTitle0.setText("org.jfree.chart.title.TextTitle");
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("org.jfree.chart.title.TextTitle", textTitle0.getText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      
      TextTitle textTitle1 = (TextTitle)textTitle0.clone();
      assertTrue(textTitle1.equals((Object)textTitle0));
      assertNotSame(textTitle0, textTitle1);
      assertNotSame(textTitle1, textTitle0);
      assertNotNull(textTitle1);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle1.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("org.jfree.chart.title.TextTitle", textTitle0.getText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle1.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertNull(textTitle1.getToolTipText());
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getID());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertEquals("org.jfree.chart.title.TextTitle", textTitle1.getText());
      assertTrue(textTitle1.getNotify());
      assertNull(textTitle1.getURLText());
      assertFalse(textTitle1.getExpandToFitSpace());
      
      HorizontalAlignment horizontalAlignment1 = textTitle0.getTextAlignment();
      assertTrue(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertSame(horizontalAlignment1, horizontalAlignment0);
      assertNotNull(horizontalAlignment1);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("org.jfree.chart.title.TextTitle", textTitle0.getText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment1.toString());
      
      HorizontalAlignment horizontalAlignment2 = textTitle0.getTextAlignment();
      assertTrue(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertSame(horizontalAlignment2, horizontalAlignment0);
      assertSame(horizontalAlignment2, horizontalAlignment1);
      assertNotNull(horizontalAlignment2);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("org.jfree.chart.title.TextTitle", textTitle0.getText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment2.toString());
      
      textTitle0.setFont(font0);
      assertTrue(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("org.jfree.chart.title.TextTitle", textTitle0.getText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isBold());
      
      textTitle0.setText("org.jfree.chart.title.TextTitle");
      assertTrue(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("org.jfree.chart.title.TextTitle", textTitle0.getText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textTitle1.drawVertical(graphics2D1, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.getNotify());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getURLText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)textTitle0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.getNotify());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getURLText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      
      textTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.getNotify());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getURLText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      
      textTitle0.hashCode();
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertTrue(textTitle0.getNotify());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertNull(textTitle0.getURLText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("", textTitle0.getText());
      assertTrue(textTitle0.isVisible());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("o3S9?%>|");
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("o3S9?%>|", textTitle0.getText());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      assertNotNull(rectangleInsets0);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      
      textTitle0.setPadding(rectangleInsets0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals("o3S9?%>|", textTitle0.getText());
      assertNull(textTitle0.getURLText());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.getNotify());
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0, (FontMetrics) null).when(graphics2D0).getFontMetrics();
      // Undeclared exception!
      try { 
        textTitle0.arrangeNN(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      assertNotNull(font0);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      
      TextTitle textTitle0 = new TextTitle("j~m|t&FNX/7}-%$5*'", font0);
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals("j~m|t&FNX/7}-%$5*'", textTitle0.getText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      
      TextTitle textTitle1 = (TextTitle)textTitle0.clone();
      assertTrue(textTitle1.equals((Object)textTitle0));
      assertNotSame(textTitle0, textTitle1);
      assertNotSame(textTitle1, textTitle0);
      assertNotNull(textTitle1);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle1.visible);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals("j~m|t&FNX/7}-%$5*'", textTitle0.getText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle1.getNotify());
      assertTrue(textTitle1.isVisible());
      assertEquals("j~m|t&FNX/7}-%$5*'", textTitle1.getText());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertNull(textTitle1.getURLText());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertNull(textTitle1.getToolTipText());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getID());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      
      boolean boolean0 = textTitle0.equals(textTitle1);
      assertTrue(textTitle0.equals((Object)textTitle1));
      assertTrue(textTitle1.equals((Object)textTitle0));
      assertNotSame(textTitle0, textTitle1);
      assertNotSame(textTitle1, textTitle0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle1.visible);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals("j~m|t&FNX/7}-%$5*'", textTitle0.getText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle1.getNotify());
      assertTrue(textTitle1.isVisible());
      assertEquals("j~m|t&FNX/7}-%$5*'", textTitle1.getText());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertNull(textTitle1.getURLText());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertNull(textTitle1.getToolTipText());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getID());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertTrue(boolean0);
      
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      assertNotNull(horizontalAlignment0);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      HorizontalAlignment horizontalAlignment1 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      assertSame(horizontalAlignment1, horizontalAlignment0);
      assertNotNull(horizontalAlignment1);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment1.toString());
      
      textTitle0.setHorizontalAlignment(horizontalAlignment1);
      assertTrue(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertSame(horizontalAlignment1, horizontalAlignment0);
      assertTrue(textTitle0.visible);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals("j~m|t&FNX/7}-%$5*'", textTitle0.getText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment1.toString());
      
      textTitle0.setTextAlignment(horizontalAlignment0);
      assertTrue(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertSame(horizontalAlignment0, horizontalAlignment1);
      assertTrue(textTitle0.visible);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals("j~m|t&FNX/7}-%$5*'", textTitle0.getText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      String string0 = textTitle0.getText();
      assertTrue(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertNotNull(string0);
      assertTrue(textTitle0.visible);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals("j~m|t&FNX/7}-%$5*'", textTitle0.getText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertEquals("j~m|t&FNX/7}-%$5*'", string0);
      
      textTitle0.setFont(font0);
      assertTrue(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertTrue(textTitle0.visible);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals("j~m|t&FNX/7}-%$5*'", textTitle0.getText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      
      textTitle0.setMaximumLinesToDisplay(0);
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertTrue(textTitle0.visible);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals("j~m|t&FNX/7}-%$5*'", textTitle0.getText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(0, textTitle0.getMaximumLinesToDisplay());
      
      textTitle0.setTextAlignment(horizontalAlignment0);
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertSame(horizontalAlignment0, horizontalAlignment1);
      assertTrue(textTitle0.visible);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals("j~m|t&FNX/7}-%$5*'", textTitle0.getText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(0, textTitle0.getMaximumLinesToDisplay());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      Color color0 = (Color)textTitle0.getPaint();
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertNotNull(color0);
      assertTrue(textTitle0.visible);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals("j~m|t&FNX/7}-%$5*'", textTitle0.getText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(0, textTitle0.getMaximumLinesToDisplay());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).getUpperBound();
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textTitle0.arrangeRR(graphics2D0, range0, range1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertTrue(textTitle0.getNotify());
      
      TextTitle textTitle1 = (TextTitle)textTitle0.clone();
      assertTrue(textTitle1.equals((Object)textTitle0));
      assertNotSame(textTitle0, textTitle1);
      assertNotSame(textTitle1, textTitle0);
      assertNotNull(textTitle1);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle1.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertEquals("", textTitle1.getText());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertTrue(textTitle1.getNotify());
      assertNull(textTitle1.getURLText());
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getToolTipText());
      assertNull(textTitle1.getID());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertTrue(textTitle1.isVisible());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      
      boolean boolean0 = textTitle0.equals(textTitle1);
      assertTrue(textTitle0.equals((Object)textTitle1));
      assertTrue(textTitle1.equals((Object)textTitle0));
      assertNotSame(textTitle0, textTitle1);
      assertNotSame(textTitle1, textTitle0);
      assertTrue(textTitle0.visible);
      assertTrue(textTitle1.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertTrue(textTitle0.getNotify());
      assertEquals(0.0, textTitle1.getHeight(), 0.01);
      assertEquals("", textTitle1.getText());
      assertFalse(textTitle1.getExpandToFitSpace());
      assertTrue(textTitle1.getNotify());
      assertNull(textTitle1.getURLText());
      assertEquals(1.0, textTitle1.getContentYOffset(), 0.01);
      assertNull(textTitle1.getToolTipText());
      assertNull(textTitle1.getID());
      assertEquals(1.0, textTitle1.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle1.getMaximumLinesToDisplay());
      assertTrue(textTitle1.isVisible());
      assertEquals(0.0, textTitle1.getWidth(), 0.01);
      assertTrue(boolean0);
      
      textTitle0.hashCode();
      assertTrue(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertTrue(textTitle0.getNotify());
      
      textTitle0.setExpandToFitSpace(true);
      assertFalse(textTitle0.equals((Object)textTitle1));
      assertNotSame(textTitle0, textTitle1);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertTrue(textTitle0.getExpandToFitSpace());
      assertTrue(textTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertNull(textTitle0.getURLText());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("", textTitle0.getText());
      assertNull(textTitle0.getToolTipText());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertTrue(textTitle0.getNotify());
      
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textTitle0.arrangeRN((Graphics2D) null, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Font font0 = TextTitle.DEFAULT_FONT;
      assertNotNull(font0);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      
      TextTitle textTitle0 = new TextTitle("", font0);
      assertNotNull(textTitle0);
      assertTrue(textTitle0.visible);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      
      textTitle0.setText("");
      assertTrue(textTitle0.visible);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      
      boolean boolean0 = textTitle0.equals("");
      assertTrue(textTitle0.visible);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      assertFalse(boolean0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).constrain(anyDouble());
      doReturn(false).when(range0).contains(anyDouble());
      Size2D size2D0 = textTitle0.arrangeRN(graphics2D0, range0);
      assertNotNull(size2D0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)textTitle0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      
      textTitle0.draw(graphics2D1, (Rectangle2D) rectangle2D_Float0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.drawVertical(graphics2D2, rectangle2D_Float0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textTitle0.drawHorizontal(graphics2D3, rectangle2D_Float0);
      assertTrue(textTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D1 = textTitle0.arrangeNN(graphics2D4);
      assertTrue(size2D1.equals((Object)size2D0));
      assertNotSame(size2D1, size2D0);
      assertNotNull(size2D1);
      assertTrue(textTitle0.visible);
      assertEquals(0.0, size2D1.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      
      textTitle0.setFont(font0);
      assertTrue(textTitle0.visible);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertNull(textTitle0.getURLText());
      assertEquals("", textTitle0.getText());
      
      textTitle0.setURLText("gU6E");
      assertTrue(textTitle0.visible);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01);
      assertNull(textTitle0.getID());
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertNull(textTitle0.getToolTipText());
      assertTrue(textTitle0.isVisible());
      assertFalse(textTitle0.getExpandToFitSpace());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01);
      assertEquals("gU6E", textTitle0.getURLText());
      assertEquals(Integer.MAX_VALUE, textTitle0.getMaximumLinesToDisplay());
      assertTrue(textTitle0.getNotify());
      assertEquals("", textTitle0.getText());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("");
      boolean boolean0 = false;
      textTitle0.setVisible(false);
      textTitle0.setMargin(85.4831472892, 85.4831472892, 1204.63417, 0.0);
      textTitle0.getURLText();
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      textTitle0.setPaint(color0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).constrain(anyDouble());
      doReturn(false).when(range0).contains(anyDouble());
      textTitle0.arrangeRN(graphics2D0, range0);
      Graphics2D graphics2D1 = null;
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        textTitle0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      textTitle0.visible = true;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((-1731.41)).when(range0).getUpperBound();
      textTitle0.arrangeRR(graphics2D0, range0, range0);
      textTitle0.setToolTipText("");
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = textTitle0.getBounds();
      textTitle0.drawVertical(graphics2D1, rectangle2D0);
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      textTitle0.setBackgroundPaint(color0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textTitle0.arrange(graphics2D2, (RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("'Y.P'Uh|^W+");
      textTitle0.setToolTipText("'Y.P'Uh|^W+");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = textTitle0.getBounds();
      textTitle0.draw(graphics2D0, rectangle2D0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textTitle0.drawHorizontal(graphics2D1, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }
}
