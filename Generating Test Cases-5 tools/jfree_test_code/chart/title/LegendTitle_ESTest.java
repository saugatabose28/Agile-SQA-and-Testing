/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:34:33 GMT 2023
 */

package org.jfree.chart.title;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.event.TitleChangeListener;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.general.Dataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LegendTitle_ESTest extends LegendTitle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      RectangleInsets rectangleInsets0 = legendTitle0.getMargin();
      legendTitle0.setLegendItemGraphicPadding(rectangleInsets0);
      LegendTitle legendTitle1 = (LegendTitle)legendTitle0.clone();
      legendTitle0.equals(legendTitle1);
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)legendTitle1.getBounds();
      LegendItem legendItem0 = mock(LegendItem.class, new ViolatedAssumptionAnswer());
      doReturn(legendTitle0.DEFAULT_ITEM_PAINT).when(legendItem0).getFillPaint();
      doReturn((GradientPaintTransformer) null).when(legendItem0).getFillPaintTransformer();
      doReturn(rectangle2D_Float0).when(legendItem0).getShape();
      legendTitle0.getLegendItemGraphicPadding();
      legendTitle0.getWrapper();
      // Undeclared exception!
      try { 
        legendTitle0.createLegendItemBlock(legendItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'transformer' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LegendItem legendItem0 = mock(LegendItem.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null).when(legendItem0).getFillPaint();
      doReturn((Shape) null).when(legendItem0).getShape();
      LegendItemCollection legendItemCollection0 = mock(LegendItemCollection.class, new ViolatedAssumptionAnswer());
      doReturn(legendItem0).when(legendItemCollection0).get(anyInt());
      doReturn(1).when(legendItemCollection0).getItemCount();
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn(legendItemCollection0).when(legendItemSource0).getLegendItems();
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      Paint paint0 = legendTitle0.getItemPaint();
      legendTitle0.setBackgroundPaint(paint0);
      RectangleEdge rectangleEdge0 = legendTitle0.getPosition();
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      legendTitle0.getItemPaint();
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicLocation();
      legendTitle0.equals(rectangleAnchor0);
      legendTitle0.getBackgroundPaint();
      Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
      legendTitle0.setItemFont(font0);
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      legendTitle0.setSortOrder(sortOrder0);
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      legendTitle0.getItemPaint();
      // Undeclared exception!
      try { 
        legendTitle0.fetchLegendItems();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      RectangleEdge rectangleEdge0 = legendTitle0.getPosition();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LegendItemSource legendItemSource1 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle1 = new LegendTitle(legendItemSource1);
      legendTitle0.setPosition(rectangleEdge0);
      RectangleInsets rectangleInsets0 = legendTitle0.getMargin();
      legendTitle0.setItemLabelPadding(rectangleInsets0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      legendTitle0.getItemLabelPadding();
      legendTitle0.setWrapper(blockContainer0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LegendItemSource legendItemSource2 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItemCollection) null).when(legendItemSource2).getLegendItems();
      legendTitle0.setBorder(1.0, 1.0, 0.0, 1.0);
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      legendTitle0.visible = false;
      LegendTitle legendTitle2 = new LegendTitle(legendItemSource2, arrangement0, arrangement0);
      legendTitle2.fetchLegendItems();
      Rectangle2D rectangle2D0 = legendTitle2.getBounds();
      legendTitle0.draw(graphics2D1, rectangle2D0);
      legendTitle0.getLegendItemGraphicEdge();
      legendTitle2.getLegendItemGraphicEdge();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      legendTitle2.setLegendItemGraphicLocation(rectangleAnchor0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      legendTitle2.draw(graphics2D2, rectangle2D0);
      legendTitle0.setItemLabelPadding(legendTitle2.DEFAULT_PADDING);
      legendTitle2.getWrapper();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = mock(LegendItemCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(legendItemCollection0).getItemCount();
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn(legendItemCollection0).when(legendItemSource0).getLegendItems();
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      LegendItemSource legendItemSource1 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement1 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle1 = new LegendTitle(legendItemSource1, arrangement1, arrangement1);
      legendTitle0.equals(legendTitle1);
      TitleChangeEvent titleChangeEvent0 = mock(TitleChangeEvent.class, new ViolatedAssumptionAnswer());
      legendTitle0.notifyListeners(titleChangeEvent0);
      legendTitle0.setVisible(false);
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      legendTitle0.setSortOrder(sortOrder0);
      LegendItemSource legendItemSource2 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle2 = new LegendTitle(legendItemSource2);
      RectangleInsets rectangleInsets0 = legendTitle2.getLegendItemGraphicPadding();
      legendTitle0.setPadding(rectangleInsets0);
      legendTitle0.fetchLegendItems();
      legendTitle0.getItemContainer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendTitle0.draw(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = mock(LegendItemCollection.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(legendItemCollection0).getItemCount();
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn(legendItemCollection0).when(legendItemSource0).getLegendItems();
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement1 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement1);
      legendTitle0.getItemContainer();
      legendTitle0.setVerticalAlignment(legendTitle0.DEFAULT_VERTICAL_ALIGNMENT);
      legendTitle0.fetchLegendItems();
      Color color0 = (Color)LegendTitle.DEFAULT_ITEM_PAINT;
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      legendTitle0.getLegendItemGraphicLocation();
      GradientPaintTransformer gradientPaintTransformer0 = mock(GradientPaintTransformer.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = mock(LegendItem.class, new ViolatedAssumptionAnswer());
      doReturn((Dataset) null).when(legendItem0).getDataset();
      doReturn(color0).when(legendItem0).getFillPaint();
      doReturn(gradientPaintTransformer0).when(legendItem0).getFillPaintTransformer();
      doReturn((String) null).when(legendItem0).getLabel();
      doReturn((Font) null).when(legendItem0).getLabelFont();
      doReturn((Paint) null).when(legendItem0).getLabelPaint();
      doReturn((Shape) null).when(legendItem0).getLine();
      doReturn((Paint) null).when(legendItem0).getLinePaint();
      doReturn((Stroke) null).when(legendItem0).getLineStroke();
      doReturn((Paint) null).when(legendItem0).getOutlinePaint();
      doReturn((Stroke) null).when(legendItem0).getOutlineStroke();
      doReturn((Comparable) null).when(legendItem0).getSeriesKey();
      doReturn(rectangle2D0).when(legendItem0).getShape();
      doReturn(false).when(legendItem0).isLineVisible();
      doReturn(false).when(legendItem0).isShapeFilled();
      doReturn(false).when(legendItem0).isShapeOutlineVisible();
      doReturn(false).when(legendItem0).isShapeVisible();
      // Undeclared exception!
      try { 
        legendTitle0.createLegendItemBlock(legendItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = mock(LegendItemCollection.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItem) null).when(legendItemCollection0).get(anyInt());
      doReturn(6).when(legendItemCollection0).getItemCount();
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn(legendItemCollection0).when(legendItemSource0).getLegendItems();
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      legendTitle0.setHeight(3160.5430749);
      BlockFrame blockFrame0 = legendTitle0.getFrame();
      legendTitle0.setFrame(blockFrame0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      legendTitle0.setLegendItemGraphicAnchor(rectangleAnchor0);
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendTitle0.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      legendTitle0.visible = false;
      legendTitle0.setMargin(4658.0, 0.0, (-1152.453), 0.0);
      legendTitle0.getItemLabelPadding();
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      LegendItem legendItem0 = mock(LegendItem.class, new ViolatedAssumptionAnswer());
      doReturn(legendTitle0.DEFAULT_ITEM_PAINT).when(legendItem0).getFillPaint();
      doReturn((GradientPaintTransformer) null).when(legendItem0).getFillPaintTransformer();
      doReturn(rectangle2D0).when(legendItem0).getShape();
      // Undeclared exception!
      try { 
        legendTitle0.createLegendItemBlock(legendItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'transformer' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = mock(LegendItemCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(legendItemCollection0).getItemCount();
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn(legendItemCollection0, legendItemCollection0, legendItemCollection0, legendItemCollection0).when(legendItemSource0).getLegendItems();
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      LegendItemSource[] legendItemSourceArray0 = new LegendItemSource[4];
      legendItemSourceArray0[0] = legendItemSource0;
      legendItemSourceArray0[1] = legendItemSource0;
      legendItemSourceArray0[2] = legendItemSource0;
      legendItemSourceArray0[3] = legendItemSource0;
      legendTitle0.setSources(legendItemSourceArray0);
      legendTitle0.fetchLegendItems();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      legendTitle0.setLegendItemGraphicAnchor(rectangleAnchor0);
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      legendTitle0.setHorizontalAlignment(horizontalAlignment0);
      RectangleInsets rectangleInsets0 = legendTitle0.getLegendItemGraphicPadding();
      legendTitle0.setLegendItemGraphicPadding(rectangleInsets0);
      BlockFrame blockFrame0 = legendTitle0.getFrame();
      legendTitle0.setFrame(blockFrame0);
      RectangleEdge rectangleEdge0 = legendTitle0.getLegendItemGraphicEdge();
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      legendTitle0.setLegendItemGraphicPadding(rectangleInsets0);
      Font font0 = legendTitle0.getItemFont();
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.LEFT;
      legendTitle0.setLegendItemGraphicAnchor(rectangleAnchor1);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      legendTitle0.setWrapper(blockContainer0);
      legendTitle0.getLegendItemGraphicAnchor();
      legendTitle0.getItemFont();
      legendTitle0.getLegendItemGraphicEdge();
      legendTitle0.getBackgroundPaint();
      legendTitle0.setBackgroundPaint((Paint) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      legendTitle0.draw(graphics2D0, rectangle2D0, (Object) font0);
      legendTitle0.getBackgroundPaint();
      legendTitle0.getItemPaint();
      legendTitle0.getLegendItemGraphicLocation();
      legendTitle0.getSources();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LegendItemSource legendItemSource1 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle1 = new LegendTitle(legendItemSource1);
      legendTitle0.draw(graphics2D1, rectangle2D0, (Object) legendTitle1);
      legendTitle0.draw(graphics2D1, rectangle2D0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItemCollection) null).when(legendItemSource0).getLegendItems();
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      LegendItemSource legendItemSource1 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement1 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle1 = new LegendTitle(legendItemSource1, arrangement1, arrangement1);
      legendTitle0.equals(legendTitle1);
      TitleChangeEvent titleChangeEvent0 = mock(TitleChangeEvent.class, new ViolatedAssumptionAnswer());
      legendTitle0.notifyListeners(titleChangeEvent0);
      legendTitle0.setVisible(false);
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      legendTitle0.setSortOrder(sortOrder0);
      LegendItemSource legendItemSource2 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle2 = new LegendTitle(legendItemSource2);
      RectangleInsets rectangleInsets0 = legendTitle2.getLegendItemGraphicPadding();
      legendTitle0.setPadding(rectangleInsets0);
      legendTitle0.fetchLegendItems();
      legendTitle0.getItemContainer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendTitle0.draw(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement1 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement1);
      legendTitle0.setWidth(0.0);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicLocation();
      legendTitle0.setLegendItemGraphicAnchor(rectangleAnchor0);
      LegendItemSource[] legendItemSourceArray0 = new LegendItemSource[2];
      legendItemSourceArray0[0] = legendItemSource0;
      legendItemSourceArray0[1] = legendItemSource0;
      legendTitle0.setSources(legendItemSourceArray0);
      legendTitle0.getLegendItemGraphicLocation();
      legendTitle0.getSortOrder();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      legendTitle0.getLegendItemGraphicEdge();
      legendTitle0.getItemFont();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      legendTitle0.draw(graphics2D0, rectangle2D0, (Object) legendItemSource0);
      legendTitle0.getLegendItemGraphicLocation();
      legendTitle0.getItemFont();
      legendTitle0.getItemContainer();
      legendTitle0.getLegendItemGraphicEdge();
      legendTitle0.getSources();
      Arrangement arrangement2 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle1 = new LegendTitle(legendItemSource0, arrangement2, arrangement2);
      legendTitle0.equals(legendTitle1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null, arrangement0, arrangement0);
      legendTitle0.getBackgroundPaint();
      legendTitle0.setBackgroundPaint((Paint) null);
      legendTitle0.getItemPaint();
      // Undeclared exception!
      try { 
        legendTitle0.fetchLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement1 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement1);
      RectangleInsets rectangleInsets0 = legendTitle0.getLegendItemGraphicPadding();
      legendTitle0.setItemLabelPadding(rectangleInsets0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      legendTitle0.setLegendItemGraphicLocation(rectangleAnchor0);
      legendTitle0.clone();
      LegendTitle legendTitle1 = new LegendTitle((LegendItemSource) null);
      legendTitle1.setBackgroundPaint(legendTitle0.DEFAULT_ITEM_PAINT);
      legendTitle0.setVerticalAlignment(legendTitle1.DEFAULT_VERTICAL_ALIGNMENT);
      BlockContainer blockContainer0 = legendTitle1.getItemContainer();
      legendTitle0.setWrapper(blockContainer0);
      legendTitle0.setLegendItemGraphicAnchor(rectangleAnchor0);
      legendTitle1.setItemLabelPadding(legendTitle0.DEFAULT_PADDING);
      legendTitle1.getItemContainer();
      legendTitle0.setItemFont(legendTitle1.DEFAULT_ITEM_FONT);
      legendTitle0.getLegendItemGraphicLocation();
      LegendTitle legendTitle2 = new LegendTitle((LegendItemSource) null);
      Arrangement arrangement2 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle3 = new LegendTitle((LegendItemSource) null, arrangement2, arrangement2);
      RectangleInsets rectangleInsets1 = legendTitle3.getPadding();
      legendTitle2.setPadding(rectangleInsets1);
      legendTitle1.equals(legendTitle2);
      LegendItemSource[] legendItemSourceArray0 = new LegendItemSource[0];
      legendTitle3.setLegendItemGraphicLocation(rectangleAnchor0);
      legendTitle3.setSources(legendItemSourceArray0);
      legendTitle2.getWrapper();
      legendTitle3.getItemLabelPadding();
      legendTitle1.getItemContainer();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItemCollection) null).when(legendItemSource0).getLegendItems();
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      Paint paint0 = legendTitle0.getItemPaint();
      legendTitle0.setBackgroundPaint(paint0);
      RectangleEdge rectangleEdge0 = legendTitle0.getPosition();
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      legendTitle0.draw(graphics2D0, rectangle2D0);
      Paint paint1 = legendTitle0.getItemPaint();
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicLocation();
      legendTitle0.equals(rectangleAnchor0);
      legendTitle0.getBackgroundPaint();
      Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
      legendTitle0.setItemFont(font0);
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      legendTitle0.setSortOrder(sortOrder0);
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      legendTitle0.fetchLegendItems();
      legendTitle0.setBackgroundPaint(paint1);
      legendTitle0.getLegendItemGraphicAnchor();
      // Undeclared exception!
      try { 
        legendTitle0.setLegendItemGraphicPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null, arrangement0, arrangement0);
      RectangleEdge rectangleEdge0 = legendTitle0.getPosition();
      legendTitle0.setWidth(2.5);
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      legendTitle0.getSources();
      Font font0 = legendTitle0.getItemFont();
      legendTitle0.setItemFont(font0);
      RectangleInsets rectangleInsets0 = legendTitle0.getMargin();
      legendTitle0.setLegendItemGraphicPadding(rectangleInsets0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      legendTitle0.draw(graphics2D0, rectangle2D0);
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      legendTitle0.setLegendItemGraphicAnchor(rectangleAnchor0);
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.BOTTOM;
      legendTitle0.setLegendItemGraphicLocation(rectangleAnchor1);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      Color color0 = (Color)LegendTitle.DEFAULT_ITEM_PAINT;
      legendTitle0.setBackgroundPaint(color0);
      legendTitle0.setWrapper(blockContainer0);
      legendTitle0.getItemFont();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendTitle0.arrange(graphics2D1, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      Color color0 = (Color)LegendTitle.DEFAULT_ITEM_PAINT;
      legendTitle0.setBackgroundPaint(color0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      legendTitle0.draw(graphics2D0, rectangle2D0, (Object) "");
      legendTitle0.getLegendItemGraphicLocation();
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      legendTitle0.setWrapper(blockContainer0);
      legendTitle0.getLegendItemGraphicAnchor();
      legendTitle0.getBackgroundPaint();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      legendTitle0.getLegendItemGraphicLocation();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendTitle0.setItemFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      Object object0 = legendTitle0.clone();
      legendTitle0.equals(object0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      legendTitle0.setWidth(4579.3);
      // Undeclared exception!
      try { 
        legendTitle0.setLegendItemGraphicEdge((RectangleEdge) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'edge' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      legendTitle0.setVisible(false);
      Paint paint0 = legendTitle0.getItemPaint();
      legendTitle0.visible = true;
      legendTitle0.setBackgroundPaint(paint0);
      legendTitle0.getItemContainer();
      legendTitle0.getBackgroundPaint();
      legendTitle0.getItemFont();
      legendTitle0.getItemContainer();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      Font font0 = legendTitle0.getItemFont();
      legendTitle0.setItemFont(font0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      LegendItemSource legendItemSource1 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle1 = new LegendTitle(legendItemSource1);
      legendTitle0.draw(graphics2D0, rectangle2D0, (Object) legendTitle1);
      Font font1 = LegendTitle.DEFAULT_ITEM_FONT;
      legendTitle1.setLegendItemGraphicEdge(legendTitle0.DEFAULT_POSITION);
      legendTitle1.setBackgroundPaint(legendTitle0.DEFAULT_ITEM_PAINT);
      legendTitle0.setBorder(0.5, (-914.2727138896), (-914.2727138896), 0.0);
      legendTitle1.setItemFont(font1);
      legendTitle1.getLegendItemGraphicEdge();
      // Undeclared exception!
      try { 
        legendTitle0.setSources((LegendItemSource[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'sources' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      legendTitle0.setWrapper(blockContainer0);
      Font font0 = legendTitle0.getItemFont();
      RectangleInsets rectangleInsets0 = legendTitle0.getMargin();
      legendTitle0.setLegendItemGraphicPadding(rectangleInsets0);
      legendTitle0.equals(rectangleInsets0);
      LegendItemSource[] legendItemSourceArray0 = new LegendItemSource[2];
      LegendItemSource legendItemSource1 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      legendItemSourceArray0[0] = legendItemSource1;
      legendItemSourceArray0[1] = legendItemSource0;
      legendTitle0.setSources(legendItemSourceArray0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      legendTitle0.setLegendItemGraphicLocation(rectangleAnchor0);
      legendTitle0.setItemFont(font0);
      legendTitle0.getWrapper();
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.BOTTOM_LEFT;
      legendTitle0.setLegendItemGraphicLocation(rectangleAnchor1);
      legendTitle0.equals("r");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      legendTitle0.draw(graphics2D0, rectangle2D0);
      legendTitle0.getWrapper();
      legendTitle0.setLegendItemGraphicPadding(rectangleInsets0);
      legendTitle0.equals("Uy(");
      RectangleInsets rectangleInsets1 = legendTitle0.getMargin();
      legendTitle0.setItemLabelPadding(rectangleInsets1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      legendTitle0.setLegendItemGraphicLocation(rectangleAnchor0);
      RectangleEdge rectangleEdge0 = legendTitle0.getLegendItemGraphicEdge();
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      Font font0 = legendTitle0.getItemFont();
      legendTitle0.setItemFont(font0);
      legendTitle0.getItemContainer();
      legendTitle0.getItemFont();
      // Undeclared exception!
      try { 
        legendTitle0.setItemLabelPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItemCollection) null).when(legendItemSource0).getLegendItems();
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      RectangleEdge rectangleEdge0 = legendTitle0.getPosition();
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      legendTitle0.getItemPaint();
      legendTitle0.fetchLegendItems();
      legendTitle0.getLegendItemGraphicLocation();
      legendTitle0.getBackgroundPaint();
      legendTitle0.setVisible(true);
      legendTitle0.setBackgroundPaint((Paint) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = null;
      legendTitle0.visible = false;
      // Undeclared exception!
      try { 
        legendTitle0.draw(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicAnchor();
      legendTitle0.setLegendItemGraphicLocation(rectangleAnchor0);
      Color color0 = (Color)LegendTitle.DEFAULT_ITEM_PAINT;
      legendTitle0.setBackgroundPaint(color0);
      RectangleInsets rectangleInsets0 = legendTitle0.getPadding();
      legendTitle0.setItemLabelPadding(rectangleInsets0);
      legendTitle0.setItemLabelPadding(rectangleInsets0);
      legendTitle0.getItemLabelPadding();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null);
      legendTitle0.setPadding((-1.0), (-1.0), 0.0, 0.0);
      Paint paint0 = legendTitle0.getItemPaint();
      legendTitle0.setItemPaint(paint0);
      RectangleInsets rectangleInsets0 = legendTitle0.getMargin();
      legendTitle0.setLegendItemGraphicPadding(rectangleInsets0);
      legendTitle0.setBackgroundPaint(paint0);
      legendTitle0.getItemPaint();
      Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
      legendTitle0.setItemFont(font0);
      legendTitle0.getItemLabelPadding();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItemCollection) null, (LegendItemCollection) null, (LegendItemCollection) null, (LegendItemCollection) null, (LegendItemCollection) null).when(legendItemSource0).getLegendItems();
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      LegendItemSource[] legendItemSourceArray0 = new LegendItemSource[8];
      legendItemSourceArray0[0] = legendItemSource0;
      legendItemSourceArray0[1] = legendItemSource0;
      legendItemSourceArray0[2] = legendItemSource0;
      Object object0 = legendTitle0.clone();
      legendTitle0.equals(object0);
      legendItemSourceArray0[3] = legendItemSource0;
      legendItemSourceArray0[4] = legendItemSource0;
      legendItemSourceArray0[5] = legendItemSource0;
      legendItemSourceArray0[6] = legendItemSource0;
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      legendTitle0.setSortOrder(sortOrder0);
      legendItemSourceArray0[7] = legendItemSource0;
      legendTitle0.setSources(legendItemSourceArray0);
      legendTitle0.getLegendItemGraphicEdge();
      legendTitle0.setSortOrder(sortOrder0);
      legendTitle0.getItemPaint();
      legendTitle0.getItemFont();
      legendTitle0.getBackgroundPaint();
      legendTitle0.getItemFont();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      legendTitle0.arrange(graphics2D0, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      LegendItemSource legendItemSource1 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle1 = new LegendTitle(legendItemSource1, arrangement0, arrangement0);
      // Undeclared exception!
      try { 
        legendTitle0.draw((Graphics2D) null, rectangle2D0, (Object) legendTitle1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement0 = null;
      LegendTitle legendTitle0 = null;
      try {
        legendTitle0 = new LegendTitle(legendItemSource0, (Arrangement) null, (Arrangement) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'arrangement' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      legendTitle0.visible = true;
      legendTitle0.getSources();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      legendTitle0.setLegendItemGraphicLocation(rectangleAnchor0);
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      legendTitle0.setSortOrder(sortOrder0);
      legendTitle0.getBackgroundPaint();
      // Undeclared exception!
      try { 
        legendTitle0.setItemPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      // Undeclared exception!
      try { 
        legendTitle0.createLegendItemBlock((LegendItem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      legendTitle0.getSortOrder();
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicAnchor();
      legendTitle0.setLegendItemGraphicAnchor(rectangleAnchor0);
      legendTitle0.getItemContainer();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItemCollection) null).when(legendItemSource0).getLegendItems();
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      legendTitle0.setLegendItemGraphicPadding(rectangleInsets0);
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      legendTitle0.setLegendItemGraphicAnchor(rectangleAnchor0);
      legendTitle0.setSortOrder(sortOrder0);
      legendTitle0.getLegendItemGraphicLocation();
      legendTitle0.getItemLabelPadding();
      legendTitle0.fetchLegendItems();
      legendTitle0.setBackgroundPaint((Paint) null);
      LegendItemSource[] legendItemSourceArray0 = new LegendItemSource[0];
      legendTitle0.setSources(legendItemSourceArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      legendTitle0.setSortOrder(sortOrder0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      legendTitle0.setLegendItemGraphicAnchor(rectangleAnchor0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      RectangleInsets rectangleInsets0 = legendTitle0.getItemLabelPadding();
      legendTitle0.setMargin((-1085.0), (-1085.0), (-1085.0), 2.0);
      legendTitle0.getItemFont();
      Font font0 = legendTitle0.getItemFont();
      legendTitle0.setLegendItemGraphicPadding(rectangleInsets0);
      legendTitle0.equals(font0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      Font font0 = legendTitle0.getItemFont();
      legendTitle0.setItemFont(font0);
      legendTitle0.getItemFont();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      RectangleEdge rectangleEdge0 = legendTitle0.getLegendItemGraphicEdge();
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      legendTitle0.getLegendItemGraphicEdge();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItemCollection) null).when(legendItemSource0).getLegendItems();
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      legendTitle0.getWrapper();
      legendTitle0.setWrapper((BlockContainer) null);
      legendTitle0.getLegendItemGraphicPadding();
      legendTitle0.getLegendItemGraphicPadding();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      legendTitle0.arrange(graphics2D0, rectangleConstraint0);
      legendTitle0.getWrapper();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      TitleChangeListener titleChangeListener0 = mock(TitleChangeListener.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      LegendItemSource legendItemSource1 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement1 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle1 = new LegendTitle(legendItemSource1, arrangement1, arrangement1);
      legendTitle0.draw(graphics2D0, rectangle2D0, (Object) legendTitle1);
      legendTitle0.removeChangeListener(titleChangeListener0);
      legendTitle0.getSortOrder();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      RectangleInsets rectangleInsets0 = null;
      LegendItem legendItem0 = mock(LegendItem.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null).when(legendItem0).getFillPaint();
      doReturn((Shape) null).when(legendItem0).getShape();
      legendTitle0.setWidth(2.0);
      // Undeclared exception!
      try { 
        legendTitle0.createLegendItemBlock(legendItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItemCollection) null, (LegendItemCollection) null).when(legendItemSource0).getLegendItems();
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      legendTitle0.fetchLegendItems();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      legendTitle0.arrange(graphics2D0, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null);
      legendTitle0.getBackgroundPaint();
      legendTitle0.setPadding(0.0, 0.0, 0.0, (-702.2857));
      // Undeclared exception!
      try { 
        legendTitle0.setItemPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = mock(LegendItemCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(legendItemCollection0).getItemCount();
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn(legendItemCollection0).when(legendItemSource0).getLegendItems();
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      legendTitle0.getWrapper();
      legendTitle0.setWrapper((BlockContainer) null);
      legendTitle0.getLegendItemGraphicPadding();
      legendTitle0.getLegendItemGraphicPadding();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      legendTitle0.arrange(graphics2D0, rectangleConstraint0);
      legendTitle0.getWrapper();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItemCollection) null).when(legendItemSource0).getLegendItems();
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
      legendTitle0.setItemFont(font0);
      Font font1 = legendTitle0.getItemFont();
      legendTitle0.getWrapper();
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      TitleChangeListener titleChangeListener0 = mock(TitleChangeListener.class, new ViolatedAssumptionAnswer());
      legendTitle0.addChangeListener(titleChangeListener0);
      legendTitle0.setVerticalAlignment(verticalAlignment0);
      legendTitle0.setWrapper((BlockContainer) null);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicLocation();
      legendTitle0.setItemFont(font1);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      legendTitle0.draw(graphics2D0, rectangle2D0);
      LegendItemSource[] legendItemSourceArray0 = legendTitle0.getSources();
      legendTitle0.getSortOrder();
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      legendTitle0.setItemLabelPadding(rectangleInsets0);
      LegendItemSource[] legendItemSourceArray1 = new LegendItemSource[0];
      legendTitle0.setSources(legendItemSourceArray1);
      legendTitle0.getSources();
      legendTitle0.setSources(legendItemSourceArray0);
      legendTitle0.setLegendItemGraphicLocation(rectangleAnchor0);
      legendTitle0.getItemContainer();
      legendTitle0.fetchLegendItems();
      LegendItemSource legendItemSource1 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle1 = new LegendTitle(legendItemSource1);
      legendTitle1.setWidth(0.0);
      Object object0 = legendTitle1.clone();
      legendTitle0.equals(object0);
      LegendItem legendItem0 = mock(LegendItem.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null).when(legendItem0).getFillPaint();
      doReturn((Shape) null).when(legendItem0).getShape();
      // Undeclared exception!
      try { 
        legendTitle0.createLegendItemBlock(legendItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      legendTitle0.getPadding();
      // Undeclared exception!
      try { 
        legendTitle0.setLegendItemGraphicEdge((RectangleEdge) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'edge' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      legendTitle0.getItemLabelPadding();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      legendTitle0.draw(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = mock(LegendItemCollection.class, new ViolatedAssumptionAnswer());
      doReturn((-2081)).when(legendItemCollection0).getItemCount();
      LegendItemCollection legendItemCollection1 = mock(LegendItemCollection.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItem) null).when(legendItemCollection1).get(anyInt());
      doReturn(1639).when(legendItemCollection1).getItemCount();
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn(legendItemCollection0, legendItemCollection1).when(legendItemSource0).getLegendItems();
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      Font font0 = legendTitle0.getItemFont();
      legendTitle0.setItemFont(font0);
      legendTitle0.setVisible(false);
      legendTitle0.getSources();
      legendTitle0.getItemPaint();
      legendTitle0.getBackgroundPaint();
      legendTitle0.fetchLegendItems();
      legendTitle0.getBackgroundPaint();
      legendTitle0.setItemFont(font0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      LegendItemSource legendItemSource1 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement1 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle1 = new LegendTitle(legendItemSource1, arrangement0, arrangement1);
      legendTitle1.setMargin(0.0, 36.2, 0.0, (-1997.547282673));
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      legendTitle1.setPadding(36.2, 36.2, 0.0, 0.0);
      legendTitle1.setSortOrder(sortOrder0);
      legendTitle0.draw(graphics2D0, rectangle2D0, (Object) legendTitle1);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      legendTitle0.draw(graphics2D1, rectangle2D0, (Object) font0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      legendTitle1.draw(graphics2D2, rectangle2D0, (Object) null);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendTitle0.arrange(graphics2D3, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItemCollection) null).when(legendItemSource0).getLegendItems();
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      legendTitle0.getWrapper();
      legendTitle0.fetchLegendItems();
      legendTitle0.getLegendItemGraphicLocation();
      LegendItemSource legendItemSource1 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle1 = new LegendTitle(legendItemSource1);
      legendTitle0.visible = true;
      legendTitle1.setBorder(0.0, 0.0, (-993.0745404408), (-174.30655751982565));
      legendTitle1.setWrapper((BlockContainer) null);
      legendTitle0.setBorder(1033.3987082953229, 0.0, 45.0, 646.441665047);
      legendTitle1.setPadding(1033.3987082953229, 0.0, (-174.30655751982565), 1198.8434907828);
      RectangleEdge rectangleEdge0 = legendTitle1.getLegendItemGraphicEdge();
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      legendTitle0.equals(rectangleEdge0);
      legendTitle1.getItemContainer();
      legendTitle1.setItemPaint(legendTitle0.DEFAULT_ITEM_PAINT);
      Object object0 = legendTitle0.clone();
      legendTitle1.equals(object0);
      legendTitle0.getSources();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null);
      legendTitle0.setVisible(true);
      legendTitle0.getSortOrder();
      Font font0 = null;
      LegendTitle legendTitle1 = new LegendTitle((LegendItemSource) null);
      legendTitle1.setBackgroundPaint(legendTitle0.DEFAULT_ITEM_PAINT);
      legendTitle1.setLegendItemGraphicPadding(legendTitle0.DEFAULT_PADDING);
      legendTitle1.setWidth((-1.0));
      Rectangle2D rectangle2D0 = legendTitle1.getBounds();
      LegendItem legendItem0 = mock(LegendItem.class, new ViolatedAssumptionAnswer());
      doReturn(legendTitle0.DEFAULT_ITEM_PAINT).when(legendItem0).getFillPaint();
      doReturn((GradientPaintTransformer) null).when(legendItem0).getFillPaintTransformer();
      doReturn(rectangle2D0).when(legendItem0).getShape();
      // Undeclared exception!
      try { 
        legendTitle0.createLegendItemBlock(legendItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'transformer' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = mock(LegendItemCollection.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(legendItemCollection0).getItemCount();
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn(legendItemCollection0).when(legendItemSource0).getLegendItems();
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0);
      legendTitle0.visible = true;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      legendTitle0.draw(graphics2D0, rectangle2D0);
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      legendTitle0.setLegendItemGraphicPadding(rectangleInsets0);
      Paint paint0 = legendTitle0.getItemPaint();
      legendTitle0.setBackgroundPaint(paint0);
      Paint paint1 = legendTitle0.getItemPaint();
      Font font0 = legendTitle0.getItemFont();
      legendTitle0.getBackgroundPaint();
      legendTitle0.getSortOrder();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      legendTitle0.arrange(graphics2D1, rectangleConstraint0);
      legendTitle0.setLegendItemGraphicPadding(rectangleInsets0);
      legendTitle0.setItemFont(font0);
      legendTitle0.setBackgroundPaint(paint1);
      legendTitle0.getLegendItemGraphicAnchor();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      legendTitle0.draw(graphics2D2, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = mock(LegendItemCollection.class, new ViolatedAssumptionAnswer());
      LegendItemSource legendItemSource0 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItemCollection) null).when(legendItemSource0).getLegendItems();
      Arrangement arrangement0 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle0 = new LegendTitle(legendItemSource0, arrangement0, arrangement0);
      LegendItemSource legendItemSource1 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement1 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle1 = new LegendTitle(legendItemSource1, arrangement1, arrangement1);
      legendTitle0.equals(legendTitle1);
      TitleChangeEvent titleChangeEvent0 = mock(TitleChangeEvent.class, new ViolatedAssumptionAnswer());
      legendTitle0.notifyListeners(titleChangeEvent0);
      legendTitle0.setVisible(false);
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      legendTitle0.setSortOrder(sortOrder0);
      LegendItemSource legendItemSource2 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle2 = new LegendTitle(legendItemSource2);
      LegendItemSource legendItemSource3 = mock(LegendItemSource.class, new ViolatedAssumptionAnswer());
      Arrangement arrangement2 = mock(Arrangement.class, new ViolatedAssumptionAnswer());
      LegendTitle legendTitle3 = new LegendTitle(legendItemSource3, arrangement2, arrangement2);
      legendTitle2.equals(legendTitle3);
      RectangleInsets rectangleInsets0 = legendTitle2.getLegendItemGraphicPadding();
      legendTitle0.setPadding(rectangleInsets0);
      legendTitle0.fetchLegendItems();
      legendTitle0.getItemContainer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendTitle0.draw(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }
}
