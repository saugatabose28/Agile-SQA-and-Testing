/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:07:39 GMT 2023
 */

package org.jfree.chart.title;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.text.TextUtils;
import org.jfree.chart.title.ShortTextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ShortTextTitle_ESTest extends ShortTextTitle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("31x&Qi");
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-2145952360)).when(fontMetrics0).getAscent();
      doReturn((-2145952360)).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      ShortTextTitle shortTextTitle1 = new ShortTextTitle("31x&Qi");
      shortTextTitle0.equals(shortTextTitle1);
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((-2235.4404051478436)).when(range0).getUpperBound();
      Rectangle2D rectangle2D0 = shortTextTitle1.getBounds();
      Object object0 = shortTextTitle0.clone();
      shortTextTitle0.draw((Graphics2D) null, rectangle2D0, object0);
      shortTextTitle0.arrangeRR(graphics2D0, range0, range0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = null;
      Graphics2D graphics2D2 = null;
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        shortTextTitle0.setVerticalAlignment((VerticalAlignment) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'alignment' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("~]muBty3{ar");
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-2144580340)).when(fontMetrics0).getAscent();
      doReturn((-2144580340)).when(fontMetrics0).getHeight();
      doReturn((-2144580340)).when(fontMetrics0).stringWidth(anyString());
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(range0).contains(anyDouble());
      shortTextTitle0.arrangeRN(graphics2D0, range0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      FontMetrics fontMetrics2 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(fontMetrics2).getAscent();
      doReturn(0, 0).when(fontMetrics2).getHeight();
      doReturn(0, 0).when(fontMetrics2).stringWidth(anyString());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics2, (FontMetrics) null).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range1).constrain(anyDouble());
      doReturn(false).when(range1).contains(anyDouble());
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D3).getFontMetrics(any(java.awt.Font.class));
      shortTextTitle0.arrangeRN(graphics2D2, range1);
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeNN(graphics2D3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = shortTextTitle0.getBounds();
      HorizontalAlignment horizontalAlignment0 = shortTextTitle0.getHorizontalAlignment();
      shortTextTitle0.setHorizontalAlignment(horizontalAlignment0);
      ShortTextTitle shortTextTitle1 = new ShortTextTitle("");
      shortTextTitle1.setHeight((-2703.378903));
      shortTextTitle0.draw(graphics2D0, rectangle2D0, (Object) shortTextTitle1);
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-1114)).when(fontMetrics1).getAscent();
      doReturn(3621).when(fontMetrics1).getHeight();
      doReturn(3621).when(fontMetrics1).stringWidth(anyString());
      FontMetrics fontMetrics2 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics1).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(range0).contains(anyDouble());
      shortTextTitle0.arrangeRN(graphics2D1, range0);
      shortTextTitle0.setTextAlignment(shortTextTitle1.DEFAULT_HORIZONTAL_ALIGNMENT);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      shortTextTitle0.setExpandToFitSpace(false);
      Rectangle2D rectangle2D0 = shortTextTitle0.getBounds();
      VerticalAlignment verticalAlignment0 = shortTextTitle0.getVerticalAlignment();
      shortTextTitle0.setVerticalAlignment(verticalAlignment0);
      shortTextTitle0.setToolTipText("Negative 'factor' argument.");
      shortTextTitle0.draw(graphics2D0, rectangle2D0, (Object) "Negative 'factor' argument.");
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(100).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      shortTextTitle0.arrangeNN(graphics2D1);
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics1).getAscent();
      doReturn(15).when(fontMetrics1).getHeight();
      doReturn(100).when(fontMetrics1).stringWidth(anyString());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics1).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((double)100, (-5224.0)).when(range0).getUpperBound();
      shortTextTitle0.arrangeRR(graphics2D2, range0, range0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(582).when(fontMetrics0).getAscent();
      doReturn((-1161)).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      shortTextTitle0.arrangeNN(graphics2D0);
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics1).getAscent();
      doReturn(0).when(fontMetrics1).getHeight();
      doReturn(0).when(fontMetrics1).stringWidth(anyString());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics1).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).getUpperBound();
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range1).getUpperBound();
      shortTextTitle0.arrangeRR(graphics2D1, range0, range1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        shortTextTitle0.arrange(graphics2D2, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("31x&Qi");
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(fontMetrics0).getAscent();
      doReturn((-1)).when(fontMetrics0).getHeight();
      doReturn(1448).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(3.4028234663852886E38, 0.0).when(range0).getUpperBound();
      shortTextTitle0.arrangeRR(graphics2D0, range0, range0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeRR(graphics2D2, range1, range1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(fontMetrics0).getAscent();
      doReturn(1).when(fontMetrics0).getHeight();
      doReturn((-656)).when(fontMetrics0).stringWidth(anyString());
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(range0).contains(anyDouble());
      shortTextTitle0.arrangeRN(graphics2D0, range0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("Not yet implemented.");
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertNotNull(verticalAlignment0);
      
      shortTextTitle0.setVerticalAlignment(verticalAlignment0);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertNull(shortTextTitle0.getURLText());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertTrue(shortTextTitle0.visible);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      shortTextTitle0.setExpandToFitSpace(false);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.visible);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)shortTextTitle0.getBounds();
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      ShortTextTitle shortTextTitle1 = (ShortTextTitle)shortTextTitle0.clone();
      assertNotSame(shortTextTitle0, shortTextTitle1);
      assertNotSame(shortTextTitle1, shortTextTitle0);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertNull(shortTextTitle0.getURLText());
      assertEquals("Not yet implemented.", shortTextTitle1.getText());
      assertEquals(0.0, shortTextTitle1.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle1.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle1.isVisible());
      assertEquals(0.0, shortTextTitle1.getWidth(), 0.01);
      assertNull(shortTextTitle1.getURLText());
      assertEquals(1.0, shortTextTitle1.getContentXOffset(), 0.01);
      assertEquals(1.0, shortTextTitle1.getContentYOffset(), 0.01);
      assertNull(shortTextTitle1.getToolTipText());
      assertNull(shortTextTitle1.getID());
      assertFalse(shortTextTitle1.getExpandToFitSpace());
      assertTrue(shortTextTitle1.getNotify());
      assertTrue(shortTextTitle0.visible);
      assertTrue(shortTextTitle1.visible);
      assertTrue(shortTextTitle1.equals((Object)shortTextTitle0));
      assertNotNull(shortTextTitle1);
      
      shortTextTitle0.setURLText("Not yet implemented.");
      assertNotSame(shortTextTitle0, shortTextTitle1);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals("Not yet implemented.", shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.visible);
      assertFalse(shortTextTitle0.equals((Object)shortTextTitle1));
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(1791).when(fontMetrics0).getAscent();
      doReturn(1791).when(fontMetrics0).getHeight();
      doReturn((-2045222521)).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      Size2D size2D0 = shortTextTitle0.arrangeFN(graphics2D1, (-1.0));
      assertNotSame(shortTextTitle0, shortTextTitle1);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals("Not yet implemented.", shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals((-1.0), size2D0.getWidth(), 0.01);
      assertEquals(1791.0, size2D0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(1791.0, size2D0.height, 0.01);
      assertEquals((-1.0), size2D0.width, 0.01);
      assertFalse(shortTextTitle0.equals((Object)shortTextTitle1));
      assertNotNull(size2D0);
      
      Graphics2D graphics2D2 = null;
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeFN((Graphics2D) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ShortTextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "RectangleEdge.LEFT";
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("RectangleEdge.LEFT");
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals("RectangleEdge.LEFT", shortTextTitle0.getText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(fontMetrics0).getAscent();
      doReturn((-1)).when(fontMetrics0).getHeight();
      doReturn((-1)).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      Size2D size2D0 = shortTextTitle0.arrangeNN(graphics2D0);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals("RectangleEdge.LEFT", shortTextTitle0.getText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals((-1.0), size2D0.getWidth(), 0.01);
      assertEquals((-1.0), size2D0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals((-1.0), size2D0.width, 0.01);
      assertEquals((-1.0), size2D0.height, 0.01);
      assertNotNull(size2D0);
      
      Graphics2D graphics2D1 = null;
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeFN((Graphics2D) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ShortTextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "RectangleEdge.LEFT";
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("RectangleEdge.LEFT");
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("RectangleEdge.LEFT", shortTextTitle0.getText());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(474).when(fontMetrics0).getAscent();
      doReturn(371).when(fontMetrics0).getHeight();
      doReturn(371).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      Size2D size2D0 = shortTextTitle0.arrangeNN(graphics2D0);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("RectangleEdge.LEFT", shortTextTitle0.getText());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(371.0, size2D0.getHeight(), 0.01);
      assertEquals(371.0, size2D0.getWidth(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(371.0, size2D0.width, 0.01);
      assertEquals(371.0, size2D0.height, 0.01);
      assertNotNull(size2D0);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeNN(graphics2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "RectangleEdge.LEFT";
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("RectangleEdge.LEFT");
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals("RectangleEdge.LEFT", shortTextTitle0.getText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-3058)).when(fontMetrics0).getAscent();
      doReturn((-2146627798)).when(fontMetrics0).getHeight();
      doReturn(1).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      Size2D size2D0 = shortTextTitle0.arrangeNN(graphics2D0);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals("RectangleEdge.LEFT", shortTextTitle0.getText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertEquals((-2.146627798E9), size2D0.getHeight(), 0.01);
      assertEquals(1.0, size2D0.getWidth(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals((-2.146627798E9), size2D0.height, 0.01);
      assertEquals(1.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
      
      Graphics2D graphics2D1 = null;
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeFN((Graphics2D) null, (-2.146627798E9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ShortTextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals("", shortTextTitle0.getText());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)shortTextTitle0.getBounds();
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals("", shortTextTitle0.getText());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-2147014355)).when(fontMetrics0).getAscent();
      doReturn((-2147014355)).when(fontMetrics0).getHeight();
      doReturn((-2147014355)).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(2484.79579, 2484.79579).when(range0).getUpperBound();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      shortTextTitle0.draw(graphics2D1, (Rectangle2D) rectangle2D_Float0);
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals("", shortTextTitle0.getText());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      
      TextUtils.setDrawStringsWithFontAttributes(false);
      Size2D size2D0 = shortTextTitle0.arrangeRR(graphics2D0, range0, range0);
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals("", shortTextTitle0.getText());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals((-2.147014355E9), size2D0.getHeight(), 0.01);
      assertEquals((-2.147014355E9), size2D0.getWidth(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals((-2.147014355E9), size2D0.height, 0.01);
      assertEquals((-2.147014355E9), size2D0.width, 0.01);
      assertNotNull(size2D0);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range1).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range1).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((double)0.0F).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range1).when(rectangleConstraint0).getHeightRange();
      doReturn((-2.147014355E9)).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range1).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        shortTextTitle0.arrange(graphics2D3, rectangleConstraint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "TextAnchor.CENTER_LEFT";
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("TextAnchor.CENTER_LEFT");
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertEquals("TextAnchor.CENTER_LEFT", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      ShortTextTitle shortTextTitle1 = new ShortTextTitle("Not yet implemented.");
      assertEquals(0.0, shortTextTitle1.getHeight(), 0.01);
      assertTrue(shortTextTitle1.getNotify());
      assertEquals("Not yet implemented.", shortTextTitle1.getText());
      assertEquals(1.0, shortTextTitle1.getContentYOffset(), 0.01);
      assertNull(shortTextTitle1.getID());
      assertNull(shortTextTitle1.getToolTipText());
      assertEquals(0.0, shortTextTitle1.getWidth(), 0.01);
      assertNull(shortTextTitle1.getURLText());
      assertFalse(shortTextTitle1.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, shortTextTitle1.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle1.isVisible());
      assertEquals(1.0, shortTextTitle1.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle1.visible);
      assertFalse(shortTextTitle1.equals((Object)shortTextTitle0));
      assertNotNull(shortTextTitle1);
      
      Color color0 = (Color)shortTextTitle1.getPaint();
      assertNotSame(shortTextTitle1, shortTextTitle0);
      assertEquals(0.0, shortTextTitle1.getHeight(), 0.01);
      assertTrue(shortTextTitle1.getNotify());
      assertEquals("Not yet implemented.", shortTextTitle1.getText());
      assertEquals(1.0, shortTextTitle1.getContentYOffset(), 0.01);
      assertNull(shortTextTitle1.getID());
      assertNull(shortTextTitle1.getToolTipText());
      assertEquals(0.0, shortTextTitle1.getWidth(), 0.01);
      assertNull(shortTextTitle1.getURLText());
      assertFalse(shortTextTitle1.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, shortTextTitle1.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle1.isVisible());
      assertEquals(1.0, shortTextTitle1.getContentXOffset(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertTrue(shortTextTitle1.visible);
      assertFalse(shortTextTitle1.equals((Object)shortTextTitle0));
      assertNotNull(color0);
      
      shortTextTitle0.setPaint(color0);
      assertNotSame(shortTextTitle0, shortTextTitle1);
      assertNotSame(shortTextTitle1, shortTextTitle0);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertEquals("TextAnchor.CENTER_LEFT", shortTextTitle0.getText());
      assertEquals(0.0, shortTextTitle1.getHeight(), 0.01);
      assertTrue(shortTextTitle1.getNotify());
      assertEquals("Not yet implemented.", shortTextTitle1.getText());
      assertEquals(1.0, shortTextTitle1.getContentYOffset(), 0.01);
      assertNull(shortTextTitle1.getID());
      assertNull(shortTextTitle1.getToolTipText());
      assertEquals(0.0, shortTextTitle1.getWidth(), 0.01);
      assertNull(shortTextTitle1.getURLText());
      assertFalse(shortTextTitle1.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, shortTextTitle1.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle1.isVisible());
      assertEquals(1.0, shortTextTitle1.getContentXOffset(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertTrue(shortTextTitle0.visible);
      assertTrue(shortTextTitle1.visible);
      assertFalse(shortTextTitle0.equals((Object)shortTextTitle1));
      assertFalse(shortTextTitle1.equals((Object)shortTextTitle0));
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-2146627798)).when(fontMetrics0).getAscent();
      doReturn((-2146627798)).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      shortTextTitle0.setText("TextAnchor.CENTER_LEFT");
      assertNotSame(shortTextTitle0, shortTextTitle1);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertEquals("TextAnchor.CENTER_LEFT", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.visible);
      assertFalse(shortTextTitle0.equals((Object)shortTextTitle1));
      
      Size2D size2D0 = shortTextTitle0.arrangeFN(graphics2D1, 0.0);
      assertNotSame(shortTextTitle0, shortTextTitle1);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertEquals("TextAnchor.CENTER_LEFT", shortTextTitle0.getText());
      assertEquals((-2.146627798E9), size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-2.146627798E9), size2D0.height, 0.01);
      assertFalse(shortTextTitle0.equals((Object)shortTextTitle1));
      assertNotNull(size2D0);
      
      // Undeclared exception!
      try { 
        shortTextTitle0.arrange(graphics2D0, (RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("Go|I");
      assertEquals("Go|I", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)shortTextTitle0.getBounds();
      assertEquals("Go|I", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      shortTextTitle0.setExpandToFitSpace(false);
      assertEquals("Go|I", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.visible);
      
      ShortTextTitle shortTextTitle1 = new ShortTextTitle("title");
      assertTrue(shortTextTitle1.getNotify());
      assertEquals(0.0, shortTextTitle1.getHeight(), 0.01);
      assertTrue(shortTextTitle1.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle1.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle1.getContentXOffset(), 0.01);
      assertNull(shortTextTitle1.getURLText());
      assertFalse(shortTextTitle1.getExpandToFitSpace());
      assertNull(shortTextTitle1.getToolTipText());
      assertEquals(1.0, shortTextTitle1.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle1.getWidth(), 0.01);
      assertNull(shortTextTitle1.getID());
      assertEquals("title", shortTextTitle1.getText());
      assertTrue(shortTextTitle1.visible);
      assertFalse(shortTextTitle1.equals((Object)shortTextTitle0));
      assertNotNull(shortTextTitle1);
      
      ShortTextTitle shortTextTitle2 = (ShortTextTitle)shortTextTitle0.clone();
      assertNotSame(shortTextTitle0, shortTextTitle1);
      assertNotSame(shortTextTitle0, shortTextTitle2);
      assertNotSame(shortTextTitle2, shortTextTitle0);
      assertNotSame(shortTextTitle2, shortTextTitle1);
      assertEquals("Go|I", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle2.getNotify());
      assertEquals("Go|I", shortTextTitle2.getText());
      assertTrue(shortTextTitle2.isVisible());
      assertEquals(1.0, shortTextTitle2.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle2.getExpandToFitSpace());
      assertNull(shortTextTitle2.getURLText());
      assertEquals(Integer.MAX_VALUE, shortTextTitle2.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle2.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle2.getHeight(), 0.01);
      assertNull(shortTextTitle2.getID());
      assertEquals(0.0, shortTextTitle2.getWidth(), 0.01);
      assertNull(shortTextTitle2.getToolTipText());
      assertTrue(shortTextTitle0.visible);
      assertTrue(shortTextTitle2.visible);
      assertFalse(shortTextTitle0.equals((Object)shortTextTitle1));
      assertFalse(shortTextTitle2.equals((Object)shortTextTitle1));
      assertTrue(shortTextTitle2.equals((Object)shortTextTitle0));
      assertNotNull(shortTextTitle2);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      LengthConstraintType lengthConstraintType1 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((double)0.0F).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn((double)0.0F).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType1).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        shortTextTitle0.arrange(graphics2D1, rectangleConstraint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("~]muBty3{ar");
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("~]muBty3{ar", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0, (FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).constrain(anyDouble());
      doReturn(false).when(range0).contains(anyDouble());
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeRN(graphics2D0, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("J-f|jS~,}SwJIQtHt4");
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("J-f|jS~,}SwJIQtHt4", shortTextTitle0.getText());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.isVisible());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      Size2D size2D0 = shortTextTitle0.arrangeFN(graphics2D0, 462.50329773071);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("J-f|jS~,}SwJIQtHt4", shortTextTitle0.getText());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(462.50329773071, size2D0.getWidth(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(462.50329773071, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertNotNull(size2D0);
      
      // Undeclared exception!
      try { 
        shortTextTitle0.setHorizontalAlignment((HorizontalAlignment) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'alignment' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("@2b8c|{");
      assertTrue(shortTextTitle0.getNotify());
      assertTrue(shortTextTitle0.isVisible());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals("@2b8c|{", shortTextTitle0.getText());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn((-1.5707963267948966)).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        shortTextTitle0.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("Not yet implemented.");
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.getNotify());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      HorizontalAlignment horizontalAlignment0 = shortTextTitle0.getTextAlignment();
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(horizontalAlignment0);
      
      shortTextTitle0.setHorizontalAlignment(horizontalAlignment0);
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertTrue(shortTextTitle0.visible);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-1745.575843)).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(1.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        shortTextTitle0.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals("", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      Size2D size2D0 = shortTextTitle0.arrangeNN(graphics2D1);
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals("", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
      
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeRN(graphics2D0, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("L");
      assertEquals("L", shortTextTitle0.getText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      shortTextTitle0.notifyListeners((TitleChangeEvent) null);
      assertEquals("L", shortTextTitle0.getText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.visible);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)shortTextTitle0.getBounds();
      assertEquals("L", shortTextTitle0.getText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Object object0 = shortTextTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0, (Object) "L");
      assertEquals("L", shortTextTitle0.getText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertNull(object0);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getUpperBound();
      Size2D size2D0 = shortTextTitle0.arrangeRR(graphics2D1, range0, range0);
      assertEquals("L", shortTextTitle0.getText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals("", shortTextTitle0.getText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeRN(graphics2D0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ShortTextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("Not yet implemented.");
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertNotNull(verticalAlignment0);
      
      shortTextTitle0.setVerticalAlignment(verticalAlignment0);
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals("VerticalAlignment.CENTER", verticalAlignment0.toString());
      assertTrue(shortTextTitle0.visible);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      shortTextTitle0.setExpandToFitSpace(false);
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.visible);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)shortTextTitle0.getBounds();
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Object object0 = shortTextTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0, (Object) "Not yet implemented.");
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNull(object0);
      
      shortTextTitle0.setURLText("Not yet implemented.");
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals("Not yet implemented.", shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.visible);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      Size2D size2D0 = shortTextTitle0.arrangeFN(graphics2D1, (-1.0));
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals("Not yet implemented.", shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertNotNull(size2D0);
      
      Graphics2D graphics2D2 = null;
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeFN((Graphics2D) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ShortTextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("Kp");
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals("Kp", shortTextTitle0.getText());
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle0.isVisible());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)shortTextTitle0.getBounds();
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals("Kp", shortTextTitle0.getText());
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle0.isVisible());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      shortTextTitle0.draw(graphics2D1, (Rectangle2D) rectangle2D_Float0);
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals("Kp", shortTextTitle0.getText());
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle0.isVisible());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      Size2D size2D0 = shortTextTitle0.arrangeFN(graphics2D0, 0.0);
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals("Kp", shortTextTitle0.getText());
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle0.isVisible());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertNotNull(size2D0);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeRR(graphics2D2, range0, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("$ZKJ`|G+ym8ni`");
      assertEquals("$ZKJ`|G+ym8ni`", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      TitleChangeEvent titleChangeEvent0 = mock(TitleChangeEvent.class, new ViolatedAssumptionAnswer());
      shortTextTitle0.notifyListeners(titleChangeEvent0);
      assertEquals("$ZKJ`|G+ym8ni`", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.visible);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        shortTextTitle0.draw(graphics2D0, (Rectangle2D) null, (Object) graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ShortTextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = null;
      try {
        shortTextTitle0 = new ShortTextTitle((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("J-f|jS~,}SwJIQtHt4");
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals("J-f|jS~,}SwJIQtHt4", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeFN(graphics2D0, 462.50329773071);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("n");
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("n", shortTextTitle0.getText());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      shortTextTitle0.setNotify(true);
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("n", shortTextTitle0.getText());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertTrue(shortTextTitle0.visible);
      
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      TextUtils.setUseFontMetricsGetStringBounds(true);
      // Undeclared exception!
      try { 
        shortTextTitle0.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("", shortTextTitle0.getText());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeFN(graphics2D0, 1138.0081843345);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      assertTrue(shortTextTitle0.getNotify());
      assertEquals("", shortTextTitle0.getText());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        shortTextTitle0.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      assertEquals("", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)shortTextTitle0.getBounds();
      assertEquals("", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Object object0 = shortTextTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0, (Object) rectangle2D_Float0);
      assertEquals("", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertNull(object0);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Object object1 = shortTextTitle0.draw(graphics2D1, (Rectangle2D) rectangle2D_Float0, (Object) null);
      assertEquals("", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertNull(object1);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeRN(graphics2D2, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("h`fG");
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals("h`fG", shortTextTitle0.getText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeRN(graphics2D0, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("@3[WYl)k%CBD");
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals("@3[WYl)k%CBD", shortTextTitle0.getText());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeNN(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("b?o3`8h8](B");
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertEquals("b?o3`8h8](B", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      shortTextTitle0.setWidth(0.0);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertEquals("b?o3`8h8](B", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.visible);
      
      Graphics2D graphics2D0 = null;
      RectangleEdge rectangleEdge0 = shortTextTitle0.getPosition();
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertEquals("b?o3`8h8](B", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(rectangleEdge0);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)shortTextTitle0.getBounds();
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertEquals("b?o3`8h8](B", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Object object0 = shortTextTitle0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Float0, (Object) "b?o3`8h8](B");
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertEquals("b?o3`8h8](B", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNull(object0);
      
      shortTextTitle0.setPosition(rectangleEdge0);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertNull(shortTextTitle0.getURLText());
      assertEquals("b?o3`8h8](B", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertTrue(shortTextTitle0.visible);
      
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeRR((Graphics2D) null, range0, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ShortTextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("LengthConstraintType.FIXED");
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals("LengthConstraintType.FIXED", shortTextTitle0.getText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)shortTextTitle0.getBounds();
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals("LengthConstraintType.FIXED", shortTextTitle0.getText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Object object0 = shortTextTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0, (Object) "LengthConstraintType.FIXED");
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.getNotify());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertEquals("LengthConstraintType.FIXED", shortTextTitle0.getText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("31x&Qi");
      assertEquals("31x&Qi", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-2145952360)).when(fontMetrics0).getAscent();
      doReturn((-2145952360)).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      ShortTextTitle shortTextTitle1 = new ShortTextTitle("31x&Qi");
      assertEquals(0.0, shortTextTitle1.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle1.getContentYOffset(), 0.01);
      assertNull(shortTextTitle1.getID());
      assertNull(shortTextTitle1.getToolTipText());
      assertFalse(shortTextTitle1.getExpandToFitSpace());
      assertNull(shortTextTitle1.getURLText());
      assertTrue(shortTextTitle1.isVisible());
      assertTrue(shortTextTitle1.getNotify());
      assertEquals(0.0, shortTextTitle1.getHeight(), 0.01);
      assertEquals(1.0, shortTextTitle1.getContentXOffset(), 0.01);
      assertEquals("31x&Qi", shortTextTitle1.getText());
      assertEquals(Integer.MAX_VALUE, shortTextTitle1.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle1.visible);
      assertTrue(shortTextTitle1.equals((Object)shortTextTitle0));
      assertNotNull(shortTextTitle1);
      
      boolean boolean0 = shortTextTitle0.equals(shortTextTitle1);
      assertTrue(boolean0);
      assertNotSame(shortTextTitle0, shortTextTitle1);
      assertNotSame(shortTextTitle1, shortTextTitle0);
      assertEquals("31x&Qi", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(0.0, shortTextTitle1.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle1.getContentYOffset(), 0.01);
      assertNull(shortTextTitle1.getID());
      assertNull(shortTextTitle1.getToolTipText());
      assertFalse(shortTextTitle1.getExpandToFitSpace());
      assertNull(shortTextTitle1.getURLText());
      assertTrue(shortTextTitle1.isVisible());
      assertTrue(shortTextTitle1.getNotify());
      assertEquals(0.0, shortTextTitle1.getHeight(), 0.01);
      assertEquals(1.0, shortTextTitle1.getContentXOffset(), 0.01);
      assertEquals("31x&Qi", shortTextTitle1.getText());
      assertEquals(Integer.MAX_VALUE, shortTextTitle1.getMaximumLinesToDisplay());
      assertTrue(shortTextTitle0.visible);
      assertTrue(shortTextTitle1.visible);
      assertTrue(shortTextTitle0.equals((Object)shortTextTitle1));
      assertTrue(shortTextTitle1.equals((Object)shortTextTitle0));
      
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((-2235.4404051478436)).when(range0).getUpperBound();
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)shortTextTitle1.getBounds();
      assertNotSame(shortTextTitle1, shortTextTitle0);
      assertEquals(0.0, shortTextTitle1.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle1.getContentYOffset(), 0.01);
      assertNull(shortTextTitle1.getID());
      assertNull(shortTextTitle1.getToolTipText());
      assertFalse(shortTextTitle1.getExpandToFitSpace());
      assertNull(shortTextTitle1.getURLText());
      assertTrue(shortTextTitle1.isVisible());
      assertTrue(shortTextTitle1.getNotify());
      assertEquals(0.0, shortTextTitle1.getHeight(), 0.01);
      assertEquals(1.0, shortTextTitle1.getContentXOffset(), 0.01);
      assertEquals("31x&Qi", shortTextTitle1.getText());
      assertEquals(Integer.MAX_VALUE, shortTextTitle1.getMaximumLinesToDisplay());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertTrue(shortTextTitle1.visible);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertTrue(shortTextTitle1.equals((Object)shortTextTitle0));
      assertNotNull(rectangle2D_Float0);
      
      ShortTextTitle shortTextTitle2 = (ShortTextTitle)shortTextTitle0.clone();
      assertNotSame(shortTextTitle0, shortTextTitle2);
      assertNotSame(shortTextTitle0, shortTextTitle1);
      assertNotSame(shortTextTitle2, shortTextTitle0);
      assertNotSame(shortTextTitle2, shortTextTitle1);
      assertEquals("31x&Qi", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle2.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle2.getMaximumLinesToDisplay());
      assertNull(shortTextTitle2.getURLText());
      assertFalse(shortTextTitle2.getExpandToFitSpace());
      assertEquals("31x&Qi", shortTextTitle2.getText());
      assertTrue(shortTextTitle2.isVisible());
      assertEquals(0.0, shortTextTitle2.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle2.getContentYOffset(), 0.01);
      assertTrue(shortTextTitle2.getNotify());
      assertEquals(0.0, shortTextTitle2.getHeight(), 0.01);
      assertNull(shortTextTitle2.getToolTipText());
      assertNull(shortTextTitle2.getID());
      assertTrue(shortTextTitle0.visible);
      assertTrue(shortTextTitle2.visible);
      assertTrue(shortTextTitle0.equals((Object)shortTextTitle1));
      assertTrue(shortTextTitle2.equals((Object)shortTextTitle1));
      assertTrue(shortTextTitle2.equals((Object)shortTextTitle0));
      assertNotNull(shortTextTitle2);
      
      Object object0 = shortTextTitle0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Float0, (Object) shortTextTitle2);
      assertNotSame(shortTextTitle0, shortTextTitle2);
      assertNotSame(shortTextTitle0, shortTextTitle1);
      assertNotSame(shortTextTitle1, shortTextTitle2);
      assertNotSame(shortTextTitle1, shortTextTitle0);
      assertNotSame(shortTextTitle2, shortTextTitle0);
      assertNotSame(shortTextTitle2, shortTextTitle1);
      assertEquals("31x&Qi", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(0.0, shortTextTitle1.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle1.getContentYOffset(), 0.01);
      assertNull(shortTextTitle1.getID());
      assertNull(shortTextTitle1.getToolTipText());
      assertFalse(shortTextTitle1.getExpandToFitSpace());
      assertNull(shortTextTitle1.getURLText());
      assertTrue(shortTextTitle1.isVisible());
      assertTrue(shortTextTitle1.getNotify());
      assertEquals(0.0, shortTextTitle1.getHeight(), 0.01);
      assertEquals(1.0, shortTextTitle1.getContentXOffset(), 0.01);
      assertEquals("31x&Qi", shortTextTitle1.getText());
      assertEquals(Integer.MAX_VALUE, shortTextTitle1.getMaximumLinesToDisplay());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(1.0, shortTextTitle2.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle2.getMaximumLinesToDisplay());
      assertNull(shortTextTitle2.getURLText());
      assertFalse(shortTextTitle2.getExpandToFitSpace());
      assertEquals("31x&Qi", shortTextTitle2.getText());
      assertTrue(shortTextTitle2.isVisible());
      assertEquals(0.0, shortTextTitle2.getWidth(), 0.01);
      assertEquals(1.0, shortTextTitle2.getContentYOffset(), 0.01);
      assertTrue(shortTextTitle2.getNotify());
      assertEquals(0.0, shortTextTitle2.getHeight(), 0.01);
      assertNull(shortTextTitle2.getToolTipText());
      assertNull(shortTextTitle2.getID());
      assertTrue(shortTextTitle0.visible);
      assertTrue(shortTextTitle1.visible);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertTrue(shortTextTitle2.visible);
      assertTrue(shortTextTitle0.equals((Object)shortTextTitle2));
      assertTrue(shortTextTitle0.equals((Object)shortTextTitle1));
      assertTrue(shortTextTitle1.equals((Object)shortTextTitle2));
      assertTrue(shortTextTitle1.equals((Object)shortTextTitle0));
      assertTrue(shortTextTitle2.equals((Object)shortTextTitle1));
      assertTrue(shortTextTitle2.equals((Object)shortTextTitle0));
      assertNull(object0);
      
      Size2D size2D0 = shortTextTitle0.arrangeRR(graphics2D0, range0, range0);
      assertNotSame(shortTextTitle0, shortTextTitle2);
      assertNotSame(shortTextTitle0, shortTextTitle1);
      assertEquals("31x&Qi", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.isVisible());
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertTrue(shortTextTitle0.visible);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertTrue(shortTextTitle0.equals((Object)shortTextTitle2));
      assertTrue(shortTextTitle0.equals((Object)shortTextTitle1));
      assertNotNull(size2D0);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = null;
      Graphics2D graphics2D2 = null;
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        shortTextTitle0.setVerticalAlignment((VerticalAlignment) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'alignment' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("Not yet implemented.");
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(shortTextTitle0);
      
      HorizontalAlignment horizontalAlignment0 = shortTextTitle0.getTextAlignment();
      assertNull(shortTextTitle0.getURLText());
      assertEquals(1.0, shortTextTitle0.getContentYOffset(), 0.01);
      assertNull(shortTextTitle0.getID());
      assertFalse(shortTextTitle0.getExpandToFitSpace());
      assertTrue(shortTextTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, shortTextTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, shortTextTitle0.getContentXOffset(), 0.01);
      assertTrue(shortTextTitle0.getNotify());
      assertEquals(0.0, shortTextTitle0.getWidth(), 0.01);
      assertEquals(0.0, shortTextTitle0.getHeight(), 0.01);
      assertNull(shortTextTitle0.getToolTipText());
      assertEquals("Not yet implemented.", shortTextTitle0.getText());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertTrue(shortTextTitle0.visible);
      assertNotNull(horizontalAlignment0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((-1114.0), (-1745.575843)).when(range0).getLowerBound();
      doReturn(1.0, (-1745.575843), 1.0, (-1114.0)).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-1745.575843)).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(1.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        shortTextTitle0.arrange(graphics2D0, rectangleConstraint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "";
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      HorizontalAlignment horizontalAlignment0 = shortTextTitle0.getHorizontalAlignment();
      shortTextTitle0.setHorizontalAlignment(horizontalAlignment0);
      ShortTextTitle shortTextTitle1 = new ShortTextTitle("");
      shortTextTitle1.setHeight((-2703.378903));
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-2142850490)).when(fontMetrics0).getAscent();
      doReturn((-2142850490)).when(fontMetrics0).getHeight();
      doReturn((-2142850490)).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      shortTextTitle0.arrangeNN(graphics2D1);
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics1).getAscent();
      doReturn(0).when(fontMetrics1).getHeight();
      doReturn(0).when(fontMetrics1).stringWidth(anyString());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics1, (FontMetrics) null).when(graphics2D2).getFontMetrics(any(java.awt.Font.class));
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).constrain(anyDouble());
      doReturn(false).when(range0).contains(anyDouble());
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeRN(graphics2D2, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      shortTextTitle0.setToolTipText("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeNN(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = null;
      try {
        shortTextTitle0 = new ShortTextTitle((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("Go|I");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = shortTextTitle0.getBounds();
      shortTextTitle0.setExpandToFitSpace(false);
      ShortTextTitle shortTextTitle1 = new ShortTextTitle("2$!8,ExUqfg6;Q");
      shortTextTitle0.draw(graphics2D0, rectangle2D0, (Object) shortTextTitle1);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((double)0.0F).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(633.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        shortTextTitle0.arrange(graphics2D1, rectangleConstraint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("Not yet implemented.");
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      shortTextTitle0.setVerticalAlignment(verticalAlignment0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      shortTextTitle0.setExpandToFitSpace(false);
      Rectangle2D rectangle2D0 = shortTextTitle0.getBounds();
      shortTextTitle0.draw(graphics2D0, rectangle2D0, (Object) "Not yet implemented.");
      shortTextTitle0.setURLText("Not yet implemented.");
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-2113071013)).when(fontMetrics0).getAscent();
      doReturn((-634)).when(fontMetrics0).getHeight();
      doReturn(1).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      shortTextTitle0.arrangeFN(graphics2D1, (-1.0));
      Graphics2D graphics2D2 = null;
      // Undeclared exception!
      try { 
        shortTextTitle0.arrangeFN((Graphics2D) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.ShortTextTitle", e);
      }
  }
}
