/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:33:46 GMT 2023
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.RescaleOp;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.plaf.multi.MultiTextUI;
import javax.swing.text.JTextComponent;
import javax.swing.text.Position;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.XYItemLabelGenerator;
import org.jfree.chart.labels.XYSeriesLabelGenerator;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.AbstractXYItemRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.ui.Layer;
import org.jfree.chart.util.DefaultShadowGenerator;
import org.jfree.data.Range;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HighLowRenderer_ESTest extends HighLowRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.getCloseTickPaint();
      highLowRenderer0.getDrawOpenTicks();
      highLowRenderer0.equals((Object) null);
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      highLowRenderer1.setDefaultItemLabelPaint(highLowRenderer0.DEFAULT_OUTLINE_PAINT, true);
      highLowRenderer0.equals(highLowRenderer1);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      String string0 = "D?USv0Qn#H{hbM";
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("D?USv0Qn#H{hbM", combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, (ChartRenderingInfo) null);
      bufferedImage0.createGraphics();
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clone();
      highLowRenderer0.getOpenTickPaint();
      highLowRenderer0.getLegendItemToolTipGenerator();
      highLowRenderer0.setLegendItemURLGenerator((XYSeriesLabelGenerator) null);
      highLowRenderer0.setOpenTickPaint((Paint) null);
      highLowRenderer0.setTickLength(147.17);
      highLowRenderer0.setCloseTickPaint((Paint) null);
      highLowRenderer0.getCloseTickPaint();
      highLowRenderer0.getTickLength();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.getTickLength();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setDrawOpenTicks(true);
      Paint paint0 = highLowRenderer0.lookupSeriesFillPaint(1566);
      highLowRenderer0.setOpenTickPaint(paint0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      highLowRenderer0.lookupSeriesOutlinePaint(0);
      highLowRenderer0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = highLowRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((Range) null).when(valueAxis0).getRange();
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(xYDataset1).getXValue(anyInt() , anyInt());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        highLowRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, xYDataset1, 10, (-5150), crosshairState0, (-5150));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.HighLowRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(xYDataset0).getSeriesCount();
      highLowRenderer0.findRangeBounds(xYDataset0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      highLowRenderer0.getPlot();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = highLowRenderer0.initialise((Graphics2D) null, rectangle2D0, (XYPlot) null, (XYDataset) null, plotRenderingInfo0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        highLowRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, (XYDataset) null, 10, 1391, (CrosshairState) null, 250);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.HighLowRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(4934.6606, 4934.6606, 32.56655426525, (-154.384027));
      int int0 = 60;
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 60
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setTickLength((-2964.2322066));
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      highLowRenderer0.equals(integer0);
      int int0 = (-177);
      float[] floatArray0 = new float[0];
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel((-177), (-177), floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 0 and should be 31329
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) highLowRenderer0.ZERO, "\"#8");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-1045), (-1045), 1.232105696E12, 0.05, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-1045) and height (-1045) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      highLowRenderer0.equals(highLowRenderer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 1026;
      XYAnnotation xYAnnotation0 = mock(XYAnnotation.class, new ViolatedAssumptionAnswer());
      Layer layer0 = Layer.FOREGROUND;
      highLowRenderer0.addAnnotation(xYAnnotation0, layer0);
      int int1 = 250;
      GeneralPath generalPath0 = null;
      try {
        generalPath0 = new GeneralPath(250);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // winding rule must be WIND_EVEN_ODD or WIND_NON_ZERO
         //
         verifyException("java.awt.geom.Path2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      highLowRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, xYDataset0, 0, 575, 575, 575, true);
      Paint paint0 = highLowRenderer0.getItemLabelPaint(0, 0);
      highLowRenderer0.setCloseTickPaint(paint0);
      Paint paint1 = highLowRenderer0.getCloseTickPaint();
      highLowRenderer0.getDrawCloseTicks();
      highLowRenderer0.setDrawCloseTicks(true);
      highLowRenderer0.getDrawCloseTicks();
      highLowRenderer0.equals(paint1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      highLowRenderer1.setDefaultItemLabelFont(highLowRenderer0.DEFAULT_VALUE_LABEL_FONT, false);
      highLowRenderer1.lookupSeriesStroke(2695);
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(xYDataset0).getSeriesCount();
      highLowRenderer0.findRangeBounds(xYDataset0);
      highLowRenderer1.getLegendTextPaint(2103);
      highLowRenderer0.setOpenTickPaint((Paint) null);
      HighLowRenderer highLowRenderer2 = new HighLowRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      highLowRenderer2.beginElementGroup(graphics2D0, highLowRenderer0.ZERO, 2103);
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(xYDataset1).getSeriesCount();
      highLowRenderer2.findRangeBounds(xYDataset1);
      highLowRenderer0.equals(highLowRenderer2);
      highLowRenderer1.setDrawCloseTicks(true);
      XYAnnotation xYAnnotation0 = mock(XYAnnotation.class, new ViolatedAssumptionAnswer());
      highLowRenderer2.removeAnnotation(xYAnnotation0);
      highLowRenderer2.getOpenTickPaint();
      highLowRenderer2.getCloseTickPaint();
      highLowRenderer1.setDrawCloseTicks(true);
      highLowRenderer0.setOpenTickPaint(highLowRenderer2.DEFAULT_OUTLINE_PAINT);
      highLowRenderer0.clone();
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      
      highLowRenderer0.setDrawCloseTicks(false);
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.removeAnnotations();
      highLowRenderer0.getCloseTickPaint();
      XYSeriesLabelGenerator xYSeriesLabelGenerator0 = highLowRenderer0.getLegendItemLabelGenerator();
      highLowRenderer0.setLegendItemLabelGenerator(xYSeriesLabelGenerator0);
      highLowRenderer0.getSeriesItemLabelGenerator(339);
      highLowRenderer0.setSeriesItemLabelGenerator(0, (XYItemLabelGenerator) null);
      highLowRenderer0.getPlot();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      highLowRenderer0.setAutoPopulateSeriesOutlinePaint(true);
      // Undeclared exception!
      try { 
        highLowRenderer0.fillRangeGridBand((Graphics2D) null, (XYPlot) null, valueAxis0, (Rectangle2D) null, 0.05, 33.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.AbstractXYItemRenderer", e);
      }
  }
}
