/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:42:01 GMT 2023
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.color.ColorSpace;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ComponentColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.SampleModel;
import java.awt.image.SinglePixelPackedSampleModel;
import java.awt.image.WritableRaster;
import java.math.BigInteger;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.Hashtable;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.JSpinner;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.event.AncestorListener;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.plaf.synth.SynthTabbedPaneUI;
import javax.swing.tree.FixedHeightLayoutCache;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.LineBorder;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.labels.BubbleXYItemLabelGenerator;
import org.jfree.chart.labels.IntervalXYItemLabelGenerator;
import org.jfree.chart.labels.IntervalXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYItemLabelGenerator;
import org.jfree.chart.labels.XYItemLabelGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class YIntervalRenderer_ESTest extends YIntervalRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYSeries xYSeries0 = new XYSeries(yIntervalRenderer0.ZERO, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getDomainBounds(true);
      xYSeries0.add((double) yIntervalRenderer0.ZERO, (Number) yIntervalRenderer0.ZERO);
      yIntervalRenderer0.findRangeBounds(xYSeriesCollection0);
      String string0 = "]inh&";
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        NumberFormat.getCurrencyInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      StandardXYItemLabelGenerator standardXYItemLabelGenerator0 = new StandardXYItemLabelGenerator();
      yIntervalRenderer0.setAdditionalItemLabelGenerator(standardXYItemLabelGenerator0);
      yIntervalRenderer0.getAdditionalItemLabelGenerator();
      DateFormat dateFormat0 = DateFormat.getDateInstance(0);
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator("r^*=8(nmY$M\"f0", dateFormat0, dateFormat0, dateFormat0);
      yIntervalRenderer0.setAdditionalItemLabelGenerator(bubbleXYItemLabelGenerator0);
      assertTrue(yIntervalRenderer0.getDefaultCreateEntities());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      yIntervalRenderer0.clearSeriesPaints(true);
      yIntervalRenderer0.setAutoPopulateSeriesShape(false);
      boolean boolean0 = false;
      yIntervalRenderer0.setAutoPopulateSeriesPaint(false);
      Object object0 = yIntervalRenderer0.clone();
      yIntervalRenderer0.equals(object0);
      yIntervalRenderer0.getAdditionalItemLabelGenerator();
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      LineBorder lineBorder0 = new LineBorder(yIntervalRenderer0.DEFAULT_OUTLINE_PAINT, yIntervalRenderer0.DEFAULT_OUTLINE_STROKE, rectangleInsets0);
      Paint paint0 = lineBorder0.getPaint();
      yIntervalRenderer0.setDefaultItemLabelPaint(paint0, false);
      yIntervalRenderer0.setDefaultEntityRadius(46);
      yIntervalRenderer0.getAdditionalItemLabelGenerator();
      yIntervalRenderer0.setAdditionalItemLabelGenerator((XYItemLabelGenerator) null);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getSeries((-2564));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      Second second0 = new Second();
      PeriodAxis periodAxis0 = new PeriodAxis("", second0, second0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      TimeZone timeZone0 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(500, 0, timeZone0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYItemRendererState xYItemRendererState0 = yIntervalRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedRangeXYPlot0, dynamicTimeSeriesCollection0, plotRenderingInfo0);
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryItemRendererState categoryItemRendererState0 = boxAndWhiskerRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, 200, plotRenderingInfo0);
      categoryItemRendererState0.getCrosshairState();
      // Undeclared exception!
      try { 
        yIntervalRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle2D0, plotRenderingInfo0, combinedRangeXYPlot0, periodAxis0, periodAxis0, dynamicTimeSeriesCollection0, 15, 300, (CrosshairState) null, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 300
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      Object[][][] objectArray0 = new Object[5][4][8];
      Object[][] objectArray1 = new Object[6][2];
      Object[] objectArray2 = new Object[5];
      objectArray2[0] = (Object) yIntervalRenderer0;
      objectArray2[1] = (Object) yIntervalRenderer0;
      objectArray2[2] = (Object) yIntervalRenderer0;
      Object object0 = new Object();
      objectArray2[3] = object0;
      objectArray2[4] = (Object) yIntervalRenderer0;
      objectArray1[0] = objectArray2;
      Object[] objectArray3 = new Object[4];
      objectArray3[0] = (Object) yIntervalRenderer0;
      objectArray3[1] = object0;
      objectArray3[2] = (Object) yIntervalRenderer0;
      objectArray3[3] = (Object) yIntervalRenderer0;
      objectArray1[1] = objectArray3;
      Object[] objectArray4 = new Object[4];
      objectArray4[0] = (Object) yIntervalRenderer0;
      objectArray4[1] = (Object) yIntervalRenderer0;
      objectArray4[2] = (Object) yIntervalRenderer0;
      objectArray4[3] = (Object) yIntervalRenderer0;
      objectArray1[2] = objectArray4;
      Object[] objectArray5 = new Object[7];
      objectArray5[0] = object0;
      objectArray5[1] = object0;
      objectArray5[2] = object0;
      objectArray5[3] = object0;
      objectArray5[4] = object0;
      objectArray5[5] = (Object) yIntervalRenderer0;
      objectArray5[6] = (Object) yIntervalRenderer0;
      objectArray1[3] = objectArray5;
      Object[] objectArray6 = new Object[6];
      objectArray6[0] = object0;
      Object object1 = yIntervalRenderer0.clone();
      objectArray6[1] = object1;
      objectArray6[2] = object0;
      Object object2 = new Object();
      objectArray6[3] = object2;
      objectArray6[4] = object0;
      objectArray6[5] = object0;
      objectArray1[4] = objectArray6;
      Object[] objectArray7 = new Object[4];
      Object object3 = yIntervalRenderer0.clone();
      objectArray7[0] = object3;
      objectArray7[1] = object2;
      objectArray7[2] = object2;
      objectArray7[3] = object0;
      objectArray1[5] = objectArray7;
      objectArray0[0] = objectArray1;
      Object[][] objectArray8 = new Object[3][5];
      objectArray8[0] = objectArray5;
      objectArray8[1] = objectArray3;
      objectArray8[2] = objectArray2;
      objectArray0[1] = objectArray8;
      Object[][] objectArray9 = new Object[6][0];
      Object[] objectArray10 = new Object[5];
      Object object4 = new Object();
      objectArray10[0] = object4;
      objectArray10[1] = object1;
      objectArray10[2] = object3;
      objectArray10[3] = (Object) yIntervalRenderer0;
      objectArray10[4] = object2;
      objectArray9[0] = objectArray10;
      objectArray9[1] = objectArray2;
      objectArray9[2] = objectArray7;
      Object[] objectArray11 = new Object[1];
      objectArray11[0] = (Object) yIntervalRenderer0;
      objectArray9[3] = objectArray11;
      objectArray9[4] = objectArray7;
      objectArray9[5] = objectArray6;
      objectArray0[2] = objectArray9;
      Object[][] objectArray12 = new Object[5][1];
      objectArray12[0] = objectArray4;
      Object[] objectArray13 = new Object[0];
      objectArray12[1] = objectArray13;
      objectArray12[2] = objectArray11;
      objectArray12[3] = objectArray5;
      objectArray12[4] = objectArray5;
      objectArray0[3] = objectArray12;
      Object[][] objectArray14 = new Object[0][3];
      objectArray0[4] = objectArray14;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.renderer.xy.YIntervalRenderer cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYSeries xYSeries0 = new XYSeries(yIntervalRenderer0.ZERO, true);
      JSpinner jSpinner0 = new JSpinner();
      double double0 = 0.0;
      DropTarget dropTarget0 = null;
      try {
        dropTarget0 = new DropTarget(jSpinner0, (DropTargetListener) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      yIntervalRenderer0.getItemLabelGenerator(1167, 1167);
      yIntervalRenderer0.setAdditionalItemLabelGenerator((XYItemLabelGenerator) null);
      yIntervalRenderer0.setAdditionalItemLabelGenerator((XYItemLabelGenerator) null);
      yIntervalRenderer0.setAdditionalItemLabelGenerator((XYItemLabelGenerator) null);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Expecting the lower bound of the range to be around -30: ", fastScatterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 1167, (-1), 2016, 1900, 10, false, false, false, false, false, false);
      JFreeChart jFreeChart1 = chartPanel0.getChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart1.createBufferedImage(10, 10, 2048, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 2048
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      int int0 = (-1951);
      yIntervalRenderer0.lookupSeriesFillPaint((-1951));
      yIntervalRenderer0.equals((Object) null);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setAutoWidth(false);
      yIntervalRenderer0.findRangeBounds(categoryTableXYDataset0);
      yIntervalRenderer0.getAdditionalItemLabelGenerator();
      int int1 = 1;
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (-1951);
      intArray0[2] = 0;
      intArray0[3] = (-1951);
      intArray0[4] = (-1951);
      intArray0[5] = 0;
      intArray0[6] = (-1951);
      intArray0[7] = 0;
      int int2 = 1793;
      intArray0[8] = 1793;
      int int3 = 1;
      BigInteger bigInteger0 = BigInteger.ONE;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1, 0, intArray0, 1, 0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Map size (0) must be >= 1
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      RingPlot ringPlot0 = new RingPlot();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(ringPlot0);
      yIntervalRenderer0.clone();
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(0.12, (-1.0));
      int int0 = 18;
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 18
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      int int0 = 0;
      int int1 = 0;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("", dateFormat0, numberFormat0);
      yIntervalRenderer0.setSeriesToolTipGenerator(0, intervalXYToolTipGenerator0);
      yIntervalRenderer0.lookupLegendTextPaint(1340);
      yIntervalRenderer0.clone();
      yIntervalRenderer0.clone();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1340;
      floatArray0[2] = (float) 0;
      AffineTransform affineTransform0 = null;
      try {
        affineTransform0 = new AffineTransform(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("java.awt.geom.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)107;
      byteArray1[1] = (byte)111;
      byteArray1[2] = (byte)107;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(3571, 3571, byteArray0, byteArray1, byteArray1, (byte)111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }
}
