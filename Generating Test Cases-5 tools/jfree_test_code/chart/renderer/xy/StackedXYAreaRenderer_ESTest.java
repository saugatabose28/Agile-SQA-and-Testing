/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:41:14 GMT 2023
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Button;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.Window;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.sql.Connection;
import java.text.AttributedCharacterIterator;
import java.text.Format;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.plaf.basic.BasicTextPaneUI;
import javax.swing.plaf.synth.SynthListUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.JTextComponent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.ChartEntity;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.XYSeriesLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.ui.Layer;
import org.jfree.chart.urls.CustomXYURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.DefaultShadowGenerator;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.TestIntervalCategoryDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackedXYAreaRenderer_ESTest extends StackedXYAreaRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      TableXYDataset tableXYDataset0 = null;
      int int0 = 2864;
      int int1 = 0;
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.getPreviousHeight((TableXYDataset) null, 2864, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setLastSeriesPoints(stack0);
      Polygon polygon0 = new Polygon();
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setSeriesArea(polygon0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState1 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo1);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      Color color0 = Color.GRAY;
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(2, color0, (-1885.2551F), 0, (-612.0));
      Color color1 = defaultShadowGenerator0.getShadowColor();
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setCurrentSeriesPoints(stack0);
      stackedXYAreaRenderer0.setShapePaint(color1);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.getLastSeriesPoints();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Stroke stroke0 = piePlot3D0.getLabelLinkStroke();
      stackedXYAreaRenderer0.setShapeStroke(stroke0);
      stackedXYAreaRenderer0.setShapePaint(color1);
      stackedXYAreaRenderer0.findRangeBounds((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer((-2723));
      HashMap<Format.Field, ChronoLocalDate> hashMap0 = new HashMap<Format.Field, ChronoLocalDate>();
      Font font0 = stackedXYAreaRenderer0.DEFAULT_VALUE_LABEL_FONT.deriveFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      font0.canDisplay(')');
      stackedXYAreaRenderer0.setLegendTextFont((-2723), font0);
      stackedXYAreaRenderer0.setAutoPopulateSeriesOutlineStroke(false);
      stackedXYAreaRenderer0.getPassCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.getPreviousHeight(jDBCXYDataset0, 2384, (-1062));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      SystemColor systemColor0 = SystemColor.activeCaption;
      stackedXYAreaRenderer0.setDefaultItemLabelPaint((Paint) systemColor0, true);
      Stroke stroke0 = stackedXYAreaRenderer0.getItemStroke(0, 0);
      stackedXYAreaRenderer0.setShapeStroke(stroke0);
      Object object0 = stackedXYAreaRenderer0.clone();
      stackedXYAreaRenderer0.setShapePaint(systemColor0);
      stackedXYAreaRenderer0.equals(object0);
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState((PlotRenderingInfo) null);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setElementHinting(true);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setCurrentSeriesPoints((Stack) null);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setProcessVisibleItemsOnly(true);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.getLine();
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setCurrentSeriesPoints((Stack) null);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.getLastSeriesPoints();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer((-1279));
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Paint paint0 = spiderWebPlot0.getSeriesPaint(2718);
      stackedXYAreaRenderer0.setShapePaint(paint0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      spiderWebPlot0.setDataExtractOrder(tableOrder0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 0, 0, 2088, 0, 1, 1, false, true, false, true, true, false);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea(3, 0);
      Rectangle2D rectangle2D1 = spiderWebPlot0.DEFAULT_INSETS.createInsetRectangle(rectangle2D0, false, true);
      plotRenderingInfo0.setDataArea(rectangle2D1);
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo0);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.getCurrentSeriesPoints();
      stackedXYAreaRenderer0.getShapeStroke();
      stackedXYAreaRenderer0.setShapeStroke(spiderWebPlot0.DEFAULT_OUTLINE_STROKE);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.getLastSeriesPoints();
      stackedXYAreaRenderer0.setShapePaint(spiderWebPlot0.DEFAULT_LABEL_BACKGROUND_PAINT);
      stackedXYAreaRenderer0.getShapeStroke();
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      Polygon polygon0 = new Polygon(intArray0, intArray0, 0);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setSeriesArea(polygon0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      TestIntervalCategoryDataset testIntervalCategoryDataset0 = new TestIntervalCategoryDataset();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "vBdgn#k}kgJA|O7r*~";
      stringArray0[1] = "TmM$k`5";
      stringArray0[2] = "vBdgn#k}kgJA|O7r*~";
      stringArray0[3] = "YqoK{&JOW'?~e";
      stringArray0[4] = "vBdgn#k}kgJA|O7r*~";
      SymbolAxis symbolAxis0 = new SymbolAxis("vBdgn#k}kgJA|O7r*~", stringArray0);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(testIntervalCategoryDataset0, (CategoryAxis) null, symbolAxis0, groupedStackedBarRenderer0);
      categoryPlot0.getDomainAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      piePlot3D0.addChangeListener(combinedDomainCategoryPlot0);
      Paint paint0 = piePlot3D0.getLabelPaint();
      stackedXYAreaRenderer0.setShapePaint(paint0);
      stackedXYAreaRenderer0.getShapePaint();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getBaseToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((double) defaultPolarItemRenderer0.ZERO, true, (XYToolTipGenerator) null);
      candlestickRenderer0.getURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0, (XYToolTipGenerator) null, (XYURLGenerator) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.removeChangeListener((DatasetChangeListener) null);
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.getPreviousHeight(jDBCXYDataset0, 273, 273);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 273, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 4;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(4);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      timeZone0.clone();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.getPreviousHeight(timeTableXYDataset0, 4, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer((-3466));
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      stackedXYAreaRenderer0.getPreviousHeight(timeTableXYDataset0, 0, 2076);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(1);
      int int0 = 0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)62;
      byte byte0 = (byte) (-22);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-120);
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte)62;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-22);
      byteArray1[5] = (byte)99;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)62;
      byteArray1[8] = (byte) (-57);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(998, 2, byteArray0, byteArray0, byteArray1, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getBaseToolTipGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0, (XYToolTipGenerator) null, (XYURLGenerator) null);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(4, 0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      stackedXYAreaRenderer0.getPreviousHeight(timeTableXYDataset0, (-203), 0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(2975);
      stackedXYAreaRenderer0.lookupSeriesShape((-483));
      StackedXYAreaRenderer stackedXYAreaRenderer1 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.equals(stackedXYAreaRenderer1);
      stackedXYAreaRenderer0.getShapeStroke();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      stackedXYAreaRenderer0.findRangeBounds(defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer((-1));
      SystemColor systemColor0 = SystemColor.controlText;
      Color.getColor("org.jfree.chart.plot.PlotOrientation");
      stackedXYAreaRenderer0.setShapePaint(systemColor0);
      BasicStroke basicStroke0 = (BasicStroke)PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
      stackedXYAreaRenderer0.setShapeStroke(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo0);
      Stack<Container> stack0 = new Stack<Container>();
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setLastSeriesPoints(stack0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      combinedDomainCategoryPlot0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 10, 10, 0, 0, 0, 10, true, false, false, true, false, false, true);
      Point point0 = new Point(10, 15);
      Point point1 = chartPanel0.getLocation(point0);
      Point2D point2D0 = chartPanel0.translateScreenToJava2D(point1);
      plotRenderingInfo0.getSubplotIndex(point2D0);
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      NumberAxis numberAxis0 = new NumberAxis();
      stackedXYAreaRenderer0.lookupSeriesShape(500);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.getDataset((-1620));
      stackedXYAreaRenderer0.findRangeBounds((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0);
      stackedXYAreaRenderer0.getShapeStroke();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = xYItemRendererState0.getInfo();
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo1);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.getLine();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0, standardXYToolTipGenerator0, customXYURLGenerator0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo0);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setCurrentSeriesPoints((Stack) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.setDefaultLegendShape(stackedXYAreaRenderer_StackedXYAreaRendererState0.workingLine);
      stackedXYAreaRenderer0.getPassCount();
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      stackedXYAreaRenderer0.setShapePaint(color0);
      stackedXYAreaRenderer0.equals("r4i~c9Cm|Zvb+");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      stackedXYAreaRenderer0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = stackedXYAreaRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo1);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo2 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.drawItem(graphics2D1, xYItemRendererState0, rectangle2D1, plotRenderingInfo2, (XYPlot) null, valueAxis0, valueAxis0, (XYDataset) null, 0, 0, crosshairState0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYToolTipGenerator xYToolTipGenerator0 = mock(XYToolTipGenerator.class, new ViolatedAssumptionAnswer());
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(1358, xYToolTipGenerator0, (XYURLGenerator) null);
      stackedXYAreaRenderer0.setAutoPopulateSeriesOutlinePaint(true);
      XYAnnotation xYAnnotation0 = mock(XYAnnotation.class, new ViolatedAssumptionAnswer());
      stackedXYAreaRenderer0.removeAnnotation(xYAnnotation0);
      XYSeriesLabelGenerator xYSeriesLabelGenerator0 = stackedXYAreaRenderer0.getLegendItemLabelGenerator();
      stackedXYAreaRenderer0.setLegendItemURLGenerator(xYSeriesLabelGenerator0);
      stackedXYAreaRenderer0.equals((Object) null);
      stackedXYAreaRenderer0.setOutline(false);
      Object object0 = stackedXYAreaRenderer0.clone();
      stackedXYAreaRenderer0.equals(object0);
      stackedXYAreaRenderer0.setShapePaint((Paint) null);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      stackedXYAreaRenderer0.getPlot();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.drawItem(graphics2D0, stackedXYAreaRenderer_StackedXYAreaRendererState0, rectangle2D0, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, xYDataset0, 1, 1358, crosshairState0, 110);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYToolTipGenerator xYToolTipGenerator0 = mock(XYToolTipGenerator.class, new ViolatedAssumptionAnswer());
      XYURLGenerator xYURLGenerator0 = mock(XYURLGenerator.class, new ViolatedAssumptionAnswer());
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(1178, xYToolTipGenerator0, xYURLGenerator0);
      StackedXYAreaRenderer stackedXYAreaRenderer1 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.equals(stackedXYAreaRenderer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0);
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.findRangeBounds(xYDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataset$MockitoMock$1786493663 cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotNull(stackedXYAreaRenderer0);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(xYDataset0).getSeriesCount();
      Range range0 = stackedXYAreaRenderer0.findRangeBounds(xYDataset0, true);
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertNull(range0);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      
      XYPlot xYPlot0 = stackedXYAreaRenderer0.getPlot();
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertNull(xYPlot0);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = stackedXYAreaRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset1, plotRenderingInfo0);
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertFalse(xYItemRendererState0.getElementHinting());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertNotNull(xYItemRendererState0);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, xYDataset2, 0, 0, crosshairState0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo0);
      assertEquals(0, stackedXYAreaRenderer_StackedXYAreaRendererState0.getFirstItemIndex());
      assertTrue(stackedXYAreaRenderer_StackedXYAreaRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, stackedXYAreaRenderer_StackedXYAreaRendererState0.getLastItemIndex());
      assertFalse(stackedXYAreaRenderer_StackedXYAreaRendererState0.getElementHinting());
      assertNotNull(stackedXYAreaRenderer_StackedXYAreaRendererState0);
      
      Stack stack0 = stackedXYAreaRenderer_StackedXYAreaRendererState0.getCurrentSeriesPoints();
      assertEquals(0, stackedXYAreaRenderer_StackedXYAreaRendererState0.getFirstItemIndex());
      assertTrue(stackedXYAreaRenderer_StackedXYAreaRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, stackedXYAreaRenderer_StackedXYAreaRendererState0.getLastItemIndex());
      assertFalse(stackedXYAreaRenderer_StackedXYAreaRendererState0.getElementHinting());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo0);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.getSeriesArea();
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setSeriesArea((Polygon) null);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.getLastSeriesPoints();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      Object object0 = stackedXYAreaRenderer0.clone();
      stackedXYAreaRenderer0.equals(object0);
      stackedXYAreaRenderer0.getShapePaint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      Layer layer0 = Layer.BACKGROUND;
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      stackedXYAreaRenderer0.drawAnnotations(graphics2D0, rectangle2D0, valueAxis0, valueAxis0, layer0, plotRenderingInfo1);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.getLastSeriesPoints();
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setElementHinting(true);
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setSeriesArea((Polygon) null);
      stackedXYAreaRenderer0.setShapePaint((Paint) null);
      stackedXYAreaRenderer0.getPassCount();
      stackedXYAreaRenderer0.getShapePaint();
      stackedXYAreaRenderer_StackedXYAreaRendererState0.getCurrentSeriesPoints();
      stackedXYAreaRenderer0.setShapePaint((Paint) null);
      stackedXYAreaRenderer0.clone();
      stackedXYAreaRenderer0.clone();
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setSeriesArea((Polygon) null);
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.findRangeBounds(xYDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataset$MockitoMock$1786493663 cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }
}
