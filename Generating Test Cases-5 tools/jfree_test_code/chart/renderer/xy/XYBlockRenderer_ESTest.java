/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:29:50 GMT 2023
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Point;
import java.awt.RadialGradientPaint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.SystemColor;
import java.awt.event.KeyListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ComponentSampleModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Raster;
import java.awt.image.SampleModel;
import java.awt.image.WritableRaster;
import java.net.URL;
import java.time.DayOfWeek;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoEra;
import java.time.temporal.ChronoField;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnit;
import org.jfree.chart.axis.TickUnits;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.chart.labels.MultipleXYSeriesLabelGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.xy.AbstractXYItemRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.chart.util.UnitType;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.Week;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYBlockRenderer_ESTest extends XYBlockRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(xYBlockRenderer0.DEFAULT_SHAPE);
      AnnotationChangeEvent annotationChangeEvent0 = new AnnotationChangeEvent(xYBlockRenderer0, xYShapeAnnotation0);
      xYBlockRenderer0.annotationChanged(annotationChangeEvent0);
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setPaintScale((PaintScale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'scale' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(xYBlockRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)xYBlockRenderer0.lookupSeriesShape(0);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(RectangleAnchor.RIGHT, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      RectangleAnchor rectangleAnchor1 = xYBlockRenderer0.getBlockAnchor();
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(RectangleAnchor.RIGHT, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor1.toString());
      assertEquals(RectangleAnchor.RIGHT, rectangleAnchor1);
      assertSame(rectangleAnchor1, rectangleAnchor0);
      
      Box box0 = new Box(0);
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.getIgnoreRepaint());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertNotNull(box0);
      
      KeyListener[] keyListenerArray0 = box0.getKeyListeners();
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.getIgnoreRepaint());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertNotNull(keyListenerArray0);
      assertEquals(0, keyListenerArray0.length);
      
      Box.Filler box_Filler0 = (Box.Filler)Box.createVerticalGlue();
      assertFalse(box_Filler0.isFocusTraversalPolicyProvider());
      assertFalse(box_Filler0.isFocusCycleRoot());
      assertTrue(box_Filler0.getFocusTraversalKeysEnabled());
      assertFalse(box_Filler0.getIgnoreRepaint());
      assertFalse(box_Filler0.isFocusTraversalPolicySet());
      assertNotNull(box_Filler0);
      
      boolean boolean0 = xYBlockRenderer0.equals(box0);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(RectangleAnchor.RIGHT, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.getIgnoreRepaint());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertFalse(boolean0);
      
      GrayPaintScale grayPaintScale0 = null;
      try {
        grayPaintScale0 = new GrayPaintScale(790.5679, 790.5679, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires lowerBound < upperBound.
         //
         verifyException("org.jfree.chart.renderer.GrayPaintScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotNull(xYBlockRenderer0);
      
      int int0 = 0;
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      xYBlockRenderer0.setAutoPopulateSeriesShape(false);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertTrue(dynamicTimeSeriesCollection0.getNotify());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      GeneralPath generalPath0 = new GeneralPath(0, 0);
      assertEquals(0, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      AbstractXYItemRenderer.moveTo(generalPath0, 0, 0.0);
      assertEquals(0, generalPath0.getWindingRule());
      
      Range range0 = xYBlockRenderer0.findRangeBounds(dynamicTimeSeriesCollection0);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertTrue(dynamicTimeSeriesCollection0.getNotify());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockHeight(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'height' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertNotNull(xYBlockRenderer0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      boolean boolean0 = true;
      xYBlockRenderer0.setAutoPopulateSeriesFillPaint(true);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertNotNull(paintScale0);
      
      Paint paint0 = xYBlockRenderer0.getLegendTextPaint(1999);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertNull(paint0);
      
      Shape shape0 = xYBlockRenderer0.getLegendShape(1999);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertNull(shape0);
      
      int int0 = 0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-96);
      byte byte0 = (byte)88;
      byteArray0[5] = (byte)88;
      byte byte1 = (byte)0;
      byteArray0[6] = (byte)0;
      byte byte2 = (byte)0;
      byteArray0[7] = (byte)0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1999, 0, byteArray0, (-1618), false, (byte) (-96));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertNotNull(xYBlockRenderer0);
      
      Color color0 = (Color)xYBlockRenderer0.lookupSeriesOutlinePaint(2375);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertNotNull(color0);
      
      int int0 = 0;
      LegendItem legendItem0 = xYBlockRenderer0.getLegendItem(2375, 0);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertNull(legendItem0);
      
      LookupPaintScale lookupPaintScale0 = (LookupPaintScale)xYBlockRenderer0.getPaintScale();
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockWidth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'width' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertNotNull(xYBlockRenderer0);
      
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      assertNotNull(highLowItemLabelGenerator0);
      
      xYBlockRenderer0.setDefaultToolTipGenerator(highLowItemLabelGenerator0);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertNotNull(paintScale0);
      
      xYBlockRenderer0.setPaintScale(paintScale0);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(RectangleAnchor.TOP_LEFT, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertNotNull(xYBlockRenderer0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      boolean boolean0 = xYBlockRenderer0.equals(matrixSeriesCollection0);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(xYBlockRenderer0.ZERO);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = xYBlockRenderer0.findDomainBounds(simpleHistogramDataset0);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range0);
      
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.fetchElementHintingFlag());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.fetchElementHintingFlag());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 535, chartRenderingInfo0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.fetchElementHintingFlag());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(535, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(535, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(bufferedImage0);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.fetchElementHintingFlag());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(535, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(535, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transformState);
      assertNotNull(sunGraphics2D0);
      
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertTrue(defaultXYItemRenderer0.getDefaultShapesFilled());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(defaultXYItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultXYItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultXYItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultXYItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertFalse(defaultXYItemRenderer0.getDefaultItemLabelsVisible());
      assertNotNull(defaultXYItemRenderer0);
      
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      Point point0 = new Point(0, 0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      
      Dimension dimension0 = new Dimension(0, 0);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertNotNull(dimension0);
      
      Dimension dimension1 = new Dimension(dimension0);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension1.height);
      assertNotNull(dimension1);
      assertTrue(dimension1.equals((Object)dimension0));
      
      Rectangle rectangle1 = new Rectangle(point0, dimension1);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertNotNull(rectangle1);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      assertTrue(rectangle1.equals((Object)rectangle0));
      
      Rectangle rectangle2 = rectangle0.union(rectangle1);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertNotNull(rectangle2);
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertTrue(rectangle2.equals((Object)rectangle0));
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      XYLineAndShapeRenderer.State xYLineAndShapeRenderer_State0 = (XYLineAndShapeRenderer.State)defaultXYItemRenderer0.initialise(sunGraphics2D0, rectangle2, xYPlot0, matrixSeriesCollection0, plotRenderingInfo0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.fetchElementHintingFlag());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(535, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(535, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(defaultXYItemRenderer0.getDefaultShapesFilled());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(defaultXYItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultXYItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultXYItemRenderer0.getDefaultShapesVisible());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultXYItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDefaultLinesVisible());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertFalse(defaultXYItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertFalse(xYLineAndShapeRenderer_State0.isLastPointGood());
      assertTrue(xYLineAndShapeRenderer_State0.getProcessVisibleItemsOnly());
      assertFalse(xYLineAndShapeRenderer_State0.getElementHinting());
      assertEquals(0, xYLineAndShapeRenderer_State0.getLastItemIndex());
      assertEquals(0, xYLineAndShapeRenderer_State0.getFirstItemIndex());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.width);
      assertNotNull(xYLineAndShapeRenderer_State0);
      assertTrue(rectangle0.equals((Object)rectangle2));
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      assertTrue(rectangle1.equals((Object)rectangle2));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertTrue(rectangle2.equals((Object)rectangle0));
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      
      LogAxis logAxis0 = new LogAxis("");
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals("", logAxis0.getLabel());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getBaseSymbol());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(logAxis0);
      
      CrosshairState crosshairState0 = new CrosshairState(true);
      assertEquals(0, crosshairState0.getDatasetIndex());
      assertEquals(0.0, crosshairState0.getAnchorY(), 0.01);
      assertEquals(0.0, crosshairState0.getCrosshairY(), 0.01);
      assertEquals(0.0, crosshairState0.getCrosshairX(), 0.01);
      assertEquals(0.0, crosshairState0.getAnchorX(), 0.01);
      assertEquals(0.0, crosshairState0.getCrosshairDistance(), 0.01);
      assertNotNull(crosshairState0);
      
      // Undeclared exception!
      try { 
        xYBlockRenderer0.drawItem(sunGraphics2D0, xYLineAndShapeRenderer_State0, rectangle1, plotRenderingInfo0, xYPlot0, logAxis0, logAxis0, simpleHistogramDataset0, (-7), 63, crosshairState0, 15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 63, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(xYBlockRenderer0);
      
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      xYBlockRenderer0.setDefaultItemLabelPaint((Paint) color0, false);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      
      double double0 = xYBlockRenderer0.getBlockWidth();
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, double0, 0.01);
      
      xYBlockRenderer0.setBlockHeight(1.0);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = xYBlockRenderer0.equals(object0);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boolean0);
      
      double double1 = xYBlockRenderer0.getBlockHeight();
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      XYBlockRenderer xYBlockRenderer1 = (XYBlockRenderer)xYBlockRenderer0.clone();
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer1.getBlockAnchor());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer1.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer1.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer1.getBlockHeight(), 0.01);
      assertEquals(3, xYBlockRenderer1.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer1.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer1.getPassCount());
      assertNotNull(xYBlockRenderer1);
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer0));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(RectangleAnchor.TOP, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(180, 180, zoneInfo0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertTrue(dynamicTimeSeriesCollection0.getNotify());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(179, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        xYBlockRenderer0.findDomainBounds(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(xYBlockRenderer0);
      
      Font font0 = xYBlockRenderer0.DEFAULT_VALUE_LABEL_FONT.deriveFont((-1868));
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertNotNull(font0);
      
      xYBlockRenderer0.setDefaultLegendTextFont(font0);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(RectangleAnchor.TOP_RIGHT, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(xYBlockRenderer0);
      
      xYBlockRenderer0.removeAnnotations();
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      
      XYBlockRenderer xYBlockRenderer1 = (XYBlockRenderer)xYBlockRenderer0.clone();
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBlockRenderer1.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer1.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer1.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer1.getBlockHeight(), 0.01);
      assertEquals(1, xYBlockRenderer1.getPassCount());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer1.getBlockAnchor());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYBlockRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer1.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(xYBlockRenderer1);
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer0));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer0);
      
      Range range0 = xYBlockRenderer0.findRangeBounds((XYDataset) null);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertNull(range0);
      assertTrue(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      
      double double0 = xYBlockRenderer0.getBlockHeight();
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertEquals(1.0, double0, 0.01);
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      
      xYBlockRenderer0.setBlockHeight(1.0);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      
      Range range1 = xYBlockRenderer0.findDomainBounds((XYDataset) null);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertNull(range1);
      assertFalse(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      
      Range range2 = xYBlockRenderer0.findDomainBounds((XYDataset) null);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertNull(range2);
      assertFalse(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      
      XYBlockRenderer xYBlockRenderer2 = (XYBlockRenderer)xYBlockRenderer0.clone();
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBlockRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer2.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer2.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer2.getAutoPopulateSeriesShape());
      assertEquals(3, xYBlockRenderer2.getDefaultEntityRadius());
      assertEquals(1.0, xYBlockRenderer2.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer2.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer2.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer2.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer2.getPassCount());
      assertFalse(xYBlockRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYBlockRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer2.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer2.getAutoPopulateSeriesPaint());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, xYBlockRenderer2.getBlockAnchor());
      assertEquals(1.0, xYBlockRenderer2.getBlockHeight(), 0.01);
      assertNotNull(xYBlockRenderer2);
      assertFalse(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertTrue(xYBlockRenderer2.equals((Object)xYBlockRenderer0));
      assertFalse(xYBlockRenderer2.equals((Object)xYBlockRenderer1));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      assertNotSame(xYBlockRenderer0, xYBlockRenderer2);
      assertNotSame(xYBlockRenderer2, xYBlockRenderer0);
      assertNotSame(xYBlockRenderer2, xYBlockRenderer1);
      
      Range range3 = xYBlockRenderer0.findRangeBounds((XYDataset) null);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertNull(range3);
      assertFalse(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertTrue(xYBlockRenderer0.equals((Object)xYBlockRenderer2));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      assertNotSame(xYBlockRenderer0, xYBlockRenderer2);
      
      LookupPaintScale lookupPaintScale0 = (LookupPaintScale)xYBlockRenderer0.getPaintScale();
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      assertFalse(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertTrue(xYBlockRenderer0.equals((Object)xYBlockRenderer2));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      assertNotSame(xYBlockRenderer0, xYBlockRenderer2);
      
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockHeight((-704.6281084));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'height' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertNotNull(xYBlockRenderer0);
      
      RectangleAnchor rectangleAnchor0 = xYBlockRenderer0.getBlockAnchor();
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor0);
      
      double double0 = xYBlockRenderer0.getBlockWidth();
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, double0, 0.01);
      
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertNotNull(paintScale0);
      
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockHeight(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'height' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertNotNull(xYBlockRenderer0);
      
      xYBlockRenderer0.setBlockHeight(875.445444518749);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(875.445444518749, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(xYBlockRenderer0);
      
      xYBlockRenderer0.setAutoPopulateSeriesFillPaint(false);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockWidth((-1549.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'width' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertNotNull(xYBlockRenderer0);
      
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockWidth((-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'width' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertNotNull(xYBlockRenderer0);
      
      double double0 = xYBlockRenderer0.getBlockHeight();
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, double0, 0.01);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      defaultXYZDataset0.validateObject();
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range0 = xYBlockRenderer0.findRangeBounds(defaultXYZDataset0);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertNotNull(xYBlockRenderer0);
      
      Color color0 = (Color)xYBlockRenderer0.lookupSeriesOutlinePaint(92);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertNotNull(color0);
      
      double double0 = xYBlockRenderer0.getBlockWidth();
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(1.0, double0, 0.01);
      
      XYBlockRenderer xYBlockRenderer1 = (XYBlockRenderer)xYBlockRenderer0.clone();
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer1.getDefaultCreateEntities());
      assertEquals(1.0, xYBlockRenderer1.getBlockHeight(), 0.01);
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer1.getPassCount());
      assertTrue(xYBlockRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(3, xYBlockRenderer1.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer1.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer1.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer1.getBlockAnchor());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisible());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertNotNull(xYBlockRenderer1);
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer0));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(xYBlockRenderer0);
      
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertNotNull(paintScale0);
      
      SystemColor systemColor0 = SystemColor.controlText;
      assertEquals(0, systemColor0.getRed());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertNotNull(systemColor0);
      
      xYBlockRenderer0.setLegendTextPaint(0, systemColor0);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, systemColor0.getRed());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = xYBlockRenderer0.findDomainBounds(xYSeriesCollection0);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertNotNull(xYBlockRenderer0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(timeSeriesCollection0.getNotify());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = xYBlockRenderer0.findDomainBounds(timeSeriesCollection0);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(timeSeriesCollection0.getNotify());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertNotNull(xYBlockRenderer0);
      
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      xYBlockRenderer0.setPaintScale(lookupPaintScale0);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertNotNull(xYBlockRenderer0);
      
      String string0 = "bA_%/<C";
      float[][] floatArray0 = new float[7][1];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-1089.561F);
      floatArray1[1] = 2792.961F;
      floatArray1[2] = 35.7F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 2792.961F;
      floatArray2[1] = 35.7F;
      floatArray2[2] = 35.7F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 14.07722F;
      floatArray3[1] = (-1089.561F);
      floatArray3[2] = 2792.961F;
      floatArray3[3] = 2792.961F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 2792.961F;
      floatArray4[1] = 35.7F;
      floatArray4[2] = (-1089.561F);
      floatArray4[3] = 35.7F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[4];
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 2792.961F;
      floatArray5[1] = (-1089.561F);
      floatArray5[2] = (-1089.561F);
      floatArray5[3] = 14.07722F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[8];
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray3));
      
      floatArray6[0] = 2792.961F;
      floatArray6[1] = 14.07722F;
      floatArray6[2] = 2792.961F;
      floatArray6[3] = 35.7F;
      floatArray6[4] = 0.0F;
      floatArray6[5] = (-1089.561F);
      floatArray6[6] = 2792.961F;
      floatArray6[7] = 2792.961F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray3));
      
      floatArray7[0] = 35.7F;
      floatArray7[1] = 48.437363F;
      floatArray7[2] = 14.07722F;
      floatArray7[3] = 0.0F;
      floatArray7[4] = (-1089.561F);
      floatArray7[5] = (-1089.561F);
      floatArray7[6] = 2792.961F;
      floatArray0[6] = floatArray7;
      SymbolAxis symbolAxis0 = null;
      try {
        symbolAxis0 = new SymbolAxis("bA_%/<C", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(xYBlockRenderer0);
      
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockHeight(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'height' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(xYBlockRenderer0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      double double0 = 0.0;
      xYBlockRenderer0.setItemLabelAnchorOffset(0.0);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(0.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(0.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(RectangleAnchor.LEFT, xYBlockRenderer0.getBlockAnchor());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      xYBlockRenderer0.setAutoPopulateSeriesFillPaint(true);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(0.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(RectangleAnchor.LEFT, xYBlockRenderer0.getBlockAnchor());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("categoryParameterName", "categoryParameterName", "categoryParameterName", "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(xYBlockRenderer0);
      
      XYBlockRenderer xYBlockRenderer1 = new XYBlockRenderer();
      assertEquals(2.0, xYBlockRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer1.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer1.getPassCount());
      assertEquals(1.0, xYBlockRenderer1.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBlockRenderer1.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer1.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, xYBlockRenderer1.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer1.getBlockAnchor());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesShape());
      assertNotNull(xYBlockRenderer1);
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer0));
      
      boolean boolean0 = xYBlockRenderer0.equals(xYBlockRenderer1);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYBlockRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer1.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer1.getPassCount());
      assertEquals(1.0, xYBlockRenderer1.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBlockRenderer1.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer1.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, xYBlockRenderer1.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer1.getBlockAnchor());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer0));
      assertTrue(boolean0);
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer0);
      
      XYBlockRenderer xYBlockRenderer2 = (XYBlockRenderer)xYBlockRenderer0.clone();
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYBlockRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYBlockRenderer2.getPassCount());
      assertFalse(xYBlockRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer2.getBlockAnchor());
      assertTrue(xYBlockRenderer2.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer2.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer2.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer2.getDefaultCreateEntities());
      assertEquals(3, xYBlockRenderer2.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer2.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer2.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer2.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer2.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer2.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer2.getBlockWidth(), 0.01);
      assertNotNull(xYBlockRenderer2);
      assertTrue(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertTrue(xYBlockRenderer2.equals((Object)xYBlockRenderer0));
      assertTrue(xYBlockRenderer2.equals((Object)xYBlockRenderer1));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      assertNotSame(xYBlockRenderer0, xYBlockRenderer2);
      assertNotSame(xYBlockRenderer2, xYBlockRenderer1);
      assertNotSame(xYBlockRenderer2, xYBlockRenderer0);
      
      XYBlockRenderer xYBlockRenderer3 = (XYBlockRenderer)xYBlockRenderer0.clone();
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYBlockRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYBlockRenderer3.getBlockHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer3.getBlockAnchor());
      assertTrue(xYBlockRenderer3.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer3.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer3.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer3.getDefaultItemLabelsVisible());
      assertEquals(1.0, xYBlockRenderer3.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer3.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer3.getAutoPopulateSeriesPaint());
      assertEquals(3, xYBlockRenderer3.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer3.getPassCount());
      assertTrue(xYBlockRenderer3.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer3.getDefaultCreateEntities());
      assertNotNull(xYBlockRenderer3);
      assertTrue(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertTrue(xYBlockRenderer0.equals((Object)xYBlockRenderer2));
      assertTrue(xYBlockRenderer3.equals((Object)xYBlockRenderer1));
      assertTrue(xYBlockRenderer3.equals((Object)xYBlockRenderer0));
      assertTrue(xYBlockRenderer3.equals((Object)xYBlockRenderer2));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      assertNotSame(xYBlockRenderer0, xYBlockRenderer2);
      assertNotSame(xYBlockRenderer0, xYBlockRenderer3);
      assertNotSame(xYBlockRenderer3, xYBlockRenderer2);
      assertNotSame(xYBlockRenderer3, xYBlockRenderer1);
      assertNotSame(xYBlockRenderer3, xYBlockRenderer0);
      
      RectangleAnchor rectangleAnchor0 = xYBlockRenderer1.getBlockAnchor();
      assertEquals(2.0, xYBlockRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer1.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer1.getPassCount());
      assertEquals(1.0, xYBlockRenderer1.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBlockRenderer1.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer1.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, xYBlockRenderer1.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer1.getBlockAnchor());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesShape());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer3));
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer0));
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer2));
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor0);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer2);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer0);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer3);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Float0);
      assertEquals(2.0, xYBlockRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer1.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer1.getPassCount());
      assertEquals(1.0, xYBlockRenderer1.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBlockRenderer1.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer1.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, xYBlockRenderer1.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer1.getBlockAnchor());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesShape());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer3));
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer0));
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer2));
      assertNotSame(xYBlockRenderer1, xYBlockRenderer2);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer0);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer3);
      
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYBlockRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer1.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer1.getPassCount());
      assertEquals(1.0, xYBlockRenderer1.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBlockRenderer1.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer1.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, xYBlockRenderer1.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer1.getBlockAnchor());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesShape());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertTrue(xYBlockRenderer0.equals((Object)xYBlockRenderer3));
      assertTrue(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertTrue(xYBlockRenderer0.equals((Object)xYBlockRenderer2));
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer3));
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer0));
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer2));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      assertNotSame(xYBlockRenderer0, xYBlockRenderer2);
      assertNotSame(xYBlockRenderer0, xYBlockRenderer3);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer2);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer0);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer3);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4674), "|c1KG(eyr_nGg");
      assertEquals("|c1KG(eyr_nGg", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=|c1KG(eyr_nGg,offset=-4674,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-4674), simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      assertEquals("|c1KG(eyr_nGg", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=|c1KG(eyr_nGg,offset=-4674,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-4674), simpleTimeZone0.getRawOffset());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = xYBlockRenderer0.findRangeBounds(timeSeriesCollection0);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals("|c1KG(eyr_nGg", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=|c1KG(eyr_nGg,offset=-4674,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-4674), simpleTimeZone0.getRawOffset());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      assertTrue(xYBlockRenderer0.equals((Object)xYBlockRenderer3));
      assertTrue(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertTrue(xYBlockRenderer0.equals((Object)xYBlockRenderer2));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      assertNotSame(xYBlockRenderer0, xYBlockRenderer2);
      assertNotSame(xYBlockRenderer0, xYBlockRenderer3);
      
      xYBlockRenderer0.setBlockWidth(3404.012);
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3404.012, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBlockRenderer0.equals((Object)xYBlockRenderer1));
      assertFalse(xYBlockRenderer0.equals((Object)xYBlockRenderer2));
      assertFalse(xYBlockRenderer0.equals((Object)xYBlockRenderer3));
      assertNotSame(xYBlockRenderer0, xYBlockRenderer1);
      assertNotSame(xYBlockRenderer0, xYBlockRenderer2);
      assertNotSame(xYBlockRenderer0, xYBlockRenderer3);
      
      Range range1 = xYBlockRenderer1.findRangeBounds(timeSeriesCollection0);
      assertEquals(2.0, xYBlockRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer1.getDefaultCreateEntities());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer1.getPassCount());
      assertEquals(1.0, xYBlockRenderer1.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBlockRenderer1.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer1.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, xYBlockRenderer1.getBlockWidth(), 0.01);
      assertFalse(xYBlockRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer1.getBlockAnchor());
      assertTrue(xYBlockRenderer1.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer1.getAutoPopulateSeriesShape());
      assertEquals("|c1KG(eyr_nGg", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=|c1KG(eyr_nGg,offset=-4674,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-4674), simpleTimeZone0.getRawOffset());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer3));
      assertTrue(xYBlockRenderer1.equals((Object)xYBlockRenderer2));
      assertFalse(xYBlockRenderer1.equals((Object)xYBlockRenderer0));
      assertNotSame(xYBlockRenderer1, xYBlockRenderer2);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer0);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(xYBlockRenderer0);
      
      RectangleAnchor rectangleAnchor0 = xYBlockRenderer0.getBlockAnchor();
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor0);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertTrue(spiderWebPlot0.isNotify());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertNotNull(spiderWebPlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(Rotation.CLOCKWISE, spiderWebPlot0.getDirection());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(TableOrder.BY_ROW, spiderWebPlot0.getDataExtractOrder());
      assertTrue(spiderWebPlot0.isNotify());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.fetchElementHintingFlag());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, 0, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(xYBlockRenderer0);
      
      MultipleXYSeriesLabelGenerator multipleXYSeriesLabelGenerator0 = new MultipleXYSeriesLabelGenerator("Null 'subtitles' argument.");
      assertNotNull(multipleXYSeriesLabelGenerator0);
      
      xYBlockRenderer0.setLegendItemURLGenerator(multipleXYSeriesLabelGenerator0);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(RectangleAnchor.CENTER, xYBlockRenderer0.getBlockAnchor());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainCategoryPlot0);
      
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxisForDataset(0);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      double double0 = 0.0;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertTrue(cyclicXYItemRenderer0.getDefaultSeriesVisible());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(cyclicXYItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertEquals(UnitType.RELATIVE, cyclicXYItemRenderer0.getGapThresholdType());
      assertTrue(cyclicXYItemRenderer0.getDefaultCreateEntities());
      assertTrue(cyclicXYItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertNotNull(cyclicXYItemRenderer0);
      
      Image image0 = cyclicXYItemRenderer0.getImage(combinedDomainCategoryPlot0, 263, 80, 2235.94906, 1.0);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertTrue(cyclicXYItemRenderer0.getDefaultSeriesVisible());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(cyclicXYItemRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertEquals(UnitType.RELATIVE, cyclicXYItemRenderer0.getGapThresholdType());
      assertTrue(cyclicXYItemRenderer0.getDefaultCreateEntities());
      assertTrue(cyclicXYItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertNull(image0);
      
      // Undeclared exception!
      try { 
        cyclicXYItemRenderer0.getImageHotspot(combinedDomainCategoryPlot0, 123, 10, 123, (-1.0), (Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StandardXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      xYBlockRenderer0.getBlockWidth();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      xYBlockRenderer0.getBlockHeight();
      xYBlockRenderer0.clearSeriesPaints(true);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      defaultXYZDataset0.getGroup();
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getSeriesKey(3062);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = xYBlockRenderer0.getBlockAnchor();
      float[] floatArray0 = new float[4];
      floatArray0[0] = 6441.4165F;
      floatArray0[1] = (-1334.0F);
      floatArray0[2] = 3440.19F;
      floatArray0[3] = (-1.0F);
      AffineTransform affineTransform0 = new AffineTransform((-1702.472F), 6441.4165F, (-1.0F), (-1.0F), 1861.0F, 3440.19F);
      affineTransform0.setToRotation((double) 3440.19F, (-1078.4679860400126));
      xYBlockRenderer0.equals(rectangleAnchor0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 181);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 181
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }
}
