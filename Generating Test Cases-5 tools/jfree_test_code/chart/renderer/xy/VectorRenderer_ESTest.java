/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 04:59:28 GMT 2023
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Button;
import java.awt.Component;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Panel;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JTabbedPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.Annotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.labels.IntervalXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.XYSeriesLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.PolarItemRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.data.Range;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Month;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VectorRenderer_ESTest extends VectorRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        vectorRenderer0.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      assertNotNull(vectorRenderer0);
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1304373600000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      
      Date date0 = fixedMillisecond0.getTime();
      assertNotNull(date0);
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1304373600000L, 0.0, 0.0, 0.0, 0.0);
      assertNotNull(oHLCDataItem0);
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 1304373600000L, 1.0E-5, (-669.5247601), (-2176.221021), (-2176.221021));
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 0.0, (-2657.501240112), (-1.0), 0.0, 1.0E-5);
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, 0.0, 0.0, 420.31848, (-1659.00110730735), (-2176.221021));
      assertNotNull(oHLCDataItem3);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, 2359.0, 0.0, (-669.5247601), (-1.0), 0.0);
      assertNotNull(oHLCDataItem4);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(date0, Double.POSITIVE_INFINITY, 2061.0, 0.0, (-3015.0), 0.0);
      assertNotNull(oHLCDataItem5);
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(date0, (-2176.221021), 0.0, 0.0, (-669.5247601), 0.1);
      assertNotNull(oHLCDataItem6);
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem3));
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      
      oHLCDataItemArray0[6] = oHLCDataItem6;
      Day day0 = new Day(date0);
      assertNotNull(day0);
      assertEquals(1304373600000L, day0.getFirstMillisecond());
      assertEquals(1304373600000L, day0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      
      Date date1 = day0.getEnd();
      assertNotNull(date1);
      assertTrue(date1.equals((Object)date0));
      assertNotSame(date1, date0);
      assertNotSame(date0, date1);
      assertEquals(1304373600000L, day0.getFirstMillisecond());
      assertEquals(1304373600000L, day0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date1.toString());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(date1, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, (-649.1671214124755));
      assertNotNull(oHLCDataItem7);
      assertTrue(date1.equals((Object)date0));
      assertTrue(date0.equals((Object)date1));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem6));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem3));
      assertEquals(1304373600000L, day0.getFirstMillisecond());
      assertEquals(1304373600000L, day0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date1.toString());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      
      oHLCDataItemArray0[7] = oHLCDataItem7;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(vectorRenderer0.ZERO, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Month month0 = new Month(date0, timeZone0, locale0);
      assertNotNull(month0);
      assertTrue(date0.equals((Object)date1));
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(24137L, month0.getSerialIndex());
      assertEquals(5, month0.getMonth());
      assertEquals(1304373600000L, month0.getFirstMillisecond());
      assertEquals(1304373600000L, month0.getLastMillisecond());
      assertEquals(2011, month0.getYearValue());
      
      PeriodAxis periodAxis0 = new PeriodAxis("", fixedMillisecond0, month0);
      assertNotNull(periodAxis0);
      assertTrue(date0.equals((Object)date1));
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(24137L, month0.getSerialIndex());
      assertEquals(5, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2011, month0.getYearValue());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      
      PolarPlot polarPlot0 = new PolarPlot();
      assertNotNull(polarPlot0);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.isDomainZoomable());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, polarPlot0.getDatasetCount());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(1, polarPlot0.getAxisCount());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertEquals(20, polarPlot0.getMargin());
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRangeZoomable());
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isNotify());
      assertFalse(polarPlot0.isSubplot());
      
      PolarItemRenderer polarItemRenderer0 = polarPlot0.getRenderer();
      assertNull(polarItemRenderer0);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(polarPlot0.isDomainZoomable());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, polarPlot0.getDatasetCount());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(1, polarPlot0.getAxisCount());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertEquals(20, polarPlot0.getMargin());
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertTrue(polarPlot0.isRangeZoomable());
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isNotify());
      assertFalse(polarPlot0.isSubplot());
      
      PolarPlot polarPlot1 = new PolarPlot(defaultOHLCDataset0, periodAxis0, (PolarItemRenderer) null);
      assertNotNull(polarPlot1);
      assertTrue(date0.equals((Object)date1));
      assertFalse(polarPlot1.equals((Object)polarPlot0));
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(8, oHLCDataItemArray0.length);
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(24137L, month0.getSerialIndex());
      assertEquals(5, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2011, month0.getYearValue());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2062.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals((-670.0), periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(polarPlot1.isSubplot());
      assertEquals((-90.0), polarPlot1.getAngleOffset(), 0.01);
      assertEquals(1, polarPlot1.getAxisCount());
      assertTrue(polarPlot1.isRangeZoomable());
      assertEquals(1.0F, polarPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot1.isRadiusGridlinesVisible());
      assertTrue(polarPlot1.isAngleGridlinesVisible());
      assertEquals(15, polarPlot1.getBackgroundImageAlignment());
      assertEquals(20, polarPlot1.getMargin());
      assertEquals(1, polarPlot1.getDatasetCount());
      assertFalse(polarPlot1.isDomainZoomable());
      assertEquals(1.0F, polarPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(polarPlot1.fetchElementHintingFlag());
      assertTrue(polarPlot1.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot1.isAngleLabelsVisible());
      assertFalse(polarPlot1.isCounterClockwise());
      assertTrue(polarPlot1.isNotify());
      assertTrue(polarPlot1.isOutlineVisible());
      assertNull(polarPlot1.getNoDataMessage());
      assertEquals(0.5F, polarPlot1.getBackgroundImageAlpha(), 0.01F);
      
      DefaultOHLCDataset defaultOHLCDataset1 = (DefaultOHLCDataset)polarPlot1.getDataset();
      assertNotNull(defaultOHLCDataset1);
      assertTrue(date0.equals((Object)date1));
      assertFalse(polarPlot1.equals((Object)polarPlot0));
      assertNotSame(date0, date1);
      assertSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(polarPlot1, polarPlot0);
      assertSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(8, oHLCDataItemArray0.length);
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(24137L, month0.getSerialIndex());
      assertEquals(5, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2011, month0.getYearValue());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2062.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals((-670.0), periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(polarPlot1.isSubplot());
      assertEquals((-90.0), polarPlot1.getAngleOffset(), 0.01);
      assertEquals(1, polarPlot1.getAxisCount());
      assertTrue(polarPlot1.isRangeZoomable());
      assertEquals(1.0F, polarPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot1.isRadiusGridlinesVisible());
      assertTrue(polarPlot1.isAngleGridlinesVisible());
      assertEquals(15, polarPlot1.getBackgroundImageAlignment());
      assertEquals(20, polarPlot1.getMargin());
      assertEquals(1, polarPlot1.getDatasetCount());
      assertFalse(polarPlot1.isDomainZoomable());
      assertEquals(1.0F, polarPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(polarPlot1.fetchElementHintingFlag());
      assertTrue(polarPlot1.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot1.isAngleLabelsVisible());
      assertFalse(polarPlot1.isCounterClockwise());
      assertTrue(polarPlot1.isNotify());
      assertTrue(polarPlot1.isOutlineVisible());
      assertNull(polarPlot1.getNoDataMessage());
      assertEquals(0.5F, polarPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      Range range0 = vectorRenderer0.findRangeBounds(defaultOHLCDataset1);
      assertNotNull(range0);
      assertTrue(date0.equals((Object)date1));
      assertFalse(polarPlot1.equals((Object)polarPlot0));
      assertNotSame(date0, date1);
      assertSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(polarPlot1, polarPlot0);
      assertSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(8, oHLCDataItemArray0.length);
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1304373600000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1304373600000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1304373600000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Mon May 02 22:00:00 GMT 2011", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(24137L, month0.getSerialIndex());
      assertEquals(5, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2011, month0.getYearValue());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2062.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals((-670.0), periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(polarPlot1.isSubplot());
      assertEquals((-90.0), polarPlot1.getAngleOffset(), 0.01);
      assertEquals(1, polarPlot1.getAxisCount());
      assertTrue(polarPlot1.isRangeZoomable());
      assertEquals(1.0F, polarPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot1.isRadiusGridlinesVisible());
      assertTrue(polarPlot1.isAngleGridlinesVisible());
      assertEquals(15, polarPlot1.getBackgroundImageAlignment());
      assertEquals(20, polarPlot1.getMargin());
      assertEquals(1, polarPlot1.getDatasetCount());
      assertFalse(polarPlot1.isDomainZoomable());
      assertEquals(1.0F, polarPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(polarPlot1.fetchElementHintingFlag());
      assertTrue(polarPlot1.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot1.isAngleLabelsVisible());
      assertFalse(polarPlot1.isCounterClockwise());
      assertTrue(polarPlot1.isNotify());
      assertTrue(polarPlot1.isOutlineVisible());
      assertNull(polarPlot1.getNoDataMessage());
      assertEquals(0.5F, polarPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(3015.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-1507.5), range0.getCentralValue(), 0.01);
      assertEquals((-3015.0), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      assertNotNull(vectorRenderer0);
      assertEquals(1, vectorRenderer0.getPassCount());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertNotNull(defaultPolarItemRenderer0);
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      XYSeriesLabelGenerator xYSeriesLabelGenerator0 = defaultPolarItemRenderer0.getLegendItemToolTipGenerator();
      assertNull(xYSeriesLabelGenerator0);
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      int int0 = 514;
      defaultPolarItemRenderer0.setDefaultOutlineStroke(vectorRenderer0.DEFAULT_OUTLINE_STROKE, true);
      assertEquals(1, vectorRenderer0.getPassCount());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getDefaultItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDrawOutlineWhenFilled());
      assertFalse(defaultPolarItemRenderer0.getUseFillPaint());
      assertTrue(defaultPolarItemRenderer0.getConnectFirstAndLastPoint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getShapesVisible());
      assertTrue(defaultPolarItemRenderer0.getDefaultCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDefaultSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      BasicStroke basicStroke0 = (BasicStroke)vectorRenderer0.lookupSeriesOutlineStroke(514);
      assertNotNull(basicStroke0);
      assertEquals(1, vectorRenderer0.getPassCount());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      vectorRenderer0.setLegendItemURLGenerator((XYSeriesLabelGenerator) null);
      assertEquals(1, vectorRenderer0.getPassCount());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      
      boolean boolean0 = vectorRenderer0.equals("\\JCCMh0]R7jdayx");
      assertFalse(boolean0);
      assertEquals(1, vectorRenderer0.getPassCount());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("\\JCCMh0]R7jdayx");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range0 = vectorRenderer0.findRangeBounds(simpleHistogramDataset0);
      assertNull(range0);
      assertEquals(1, vectorRenderer0.getPassCount());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance((-893.0), 1.0E-9F);
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(9.999999717180685E-10, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-893.0), affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, (RenderingHints) null);
      assertNotNull(affineTransformOp0);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(9.999999717180685E-10, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-893.0), affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1, affineTransformOp0.getInterpolationType());
      
      RenderingHints renderingHints0 = affineTransformOp0.getRenderingHints();
      assertNotNull(renderingHints0);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(9.999999717180685E-10, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-893.0), affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1, affineTransformOp0.getInterpolationType());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      
      RescaleOp rescaleOp0 = new RescaleOp(514, 1.0E-9F, renderingHints0);
      assertNotNull(rescaleOp0);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(9.999999717180685E-10, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-893.0), affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1, affineTransformOp0.getInterpolationType());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertEquals(1, rescaleOp0.getNumFactors());
      
      // Undeclared exception!
      try { 
        rescaleOp0.filter((BufferedImage) null, (BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.RescaleOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      assertNotNull(vectorRenderer0);
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      
      VectorRenderer vectorRenderer1 = new VectorRenderer();
      assertNotNull(vectorRenderer1);
      assertTrue(vectorRenderer1.equals((Object)vectorRenderer0));
      assertFalse(vectorRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, vectorRenderer1.getPassCount());
      assertEquals(2.0, vectorRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer1.getDefaultCreateEntities());
      assertTrue(vectorRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer1.getDefaultSeriesVisible());
      assertFalse(vectorRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, vectorRenderer1.getDefaultEntityRadius());
      assertFalse(vectorRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(vectorRenderer1.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer1.getDefaultItemLabelsVisible());
      assertTrue(vectorRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer1.getDefaultSeriesVisibleInLegend());
      
      boolean boolean0 = vectorRenderer0.equals(vectorRenderer1);
      assertTrue(vectorRenderer0.equals((Object)vectorRenderer1));
      assertTrue(vectorRenderer1.equals((Object)vectorRenderer0));
      assertNotSame(vectorRenderer0, vectorRenderer1);
      assertNotSame(vectorRenderer1, vectorRenderer0);
      assertTrue(boolean0);
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, vectorRenderer1.getPassCount());
      assertEquals(2.0, vectorRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer1.getDefaultCreateEntities());
      assertTrue(vectorRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer1.getDefaultSeriesVisible());
      assertFalse(vectorRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, vectorRenderer1.getDefaultEntityRadius());
      assertFalse(vectorRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(vectorRenderer1.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer1.getDefaultItemLabelsVisible());
      assertTrue(vectorRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer1.getDefaultSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      assertNotNull(vectorRenderer0);
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(xYDataset0).getSeriesCount();
      Range range0 = vectorRenderer0.findRangeBounds(xYDataset0);
      assertNull(range0);
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      
      // Undeclared exception!
      try { 
        vectorRenderer0.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      assertNotNull(vectorRenderer0);
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = vectorRenderer0.getPlot();
      assertNull(xYPlot0);
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = vectorRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, (PlotRenderingInfo) null);
      assertNotNull(xYItemRendererState0);
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertFalse(xYItemRendererState0.getElementHinting());
      
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(xYDataset1).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset1).getYValue(anyInt() , anyInt());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vectorRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, (PlotRenderingInfo) null, (XYPlot) null, valueAxis0, valueAxis1, xYDataset1, 10, 500, crosshairState0, 127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.VectorRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      assertNotNull(vectorRenderer0);
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      
      VectorRenderer vectorRenderer1 = new VectorRenderer();
      assertNotNull(vectorRenderer1);
      assertTrue(vectorRenderer1.equals((Object)vectorRenderer0));
      assertEquals(3, vectorRenderer1.getDefaultEntityRadius());
      assertTrue(vectorRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer1.getDefaultSeriesVisible());
      assertTrue(vectorRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer1.getDefaultCreateEntities());
      assertFalse(vectorRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, vectorRenderer1.getPassCount());
      assertFalse(vectorRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer1.getDefaultItemLabelsVisible());
      assertEquals(2.0, vectorRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer1.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer1.getAutoPopulateSeriesOutlineStroke());
      
      Font font0 = vectorRenderer1.getLegendTextFont(366);
      assertNull(font0);
      assertTrue(vectorRenderer1.equals((Object)vectorRenderer0));
      assertNotSame(vectorRenderer1, vectorRenderer0);
      assertEquals(3, vectorRenderer1.getDefaultEntityRadius());
      assertTrue(vectorRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer1.getDefaultSeriesVisible());
      assertTrue(vectorRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer1.getDefaultCreateEntities());
      assertFalse(vectorRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, vectorRenderer1.getPassCount());
      assertFalse(vectorRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer1.getDefaultItemLabelsVisible());
      assertEquals(2.0, vectorRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer1.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer1.getAutoPopulateSeriesOutlineStroke());
      
      vectorRenderer0.setDefaultItemLabelFont((Font) null, false);
      assertFalse(vectorRenderer0.equals((Object)vectorRenderer1));
      assertNotSame(vectorRenderer0, vectorRenderer1);
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      
      VectorRenderer vectorRenderer2 = new VectorRenderer();
      assertNotNull(vectorRenderer2);
      assertTrue(vectorRenderer2.equals((Object)vectorRenderer1));
      assertFalse(vectorRenderer2.equals((Object)vectorRenderer0));
      assertEquals(2.0, vectorRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertFalse(vectorRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertFalse(vectorRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertFalse(vectorRenderer2.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer2.getAutoPopulateSeriesFillPaint());
      assertTrue(vectorRenderer2.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer2.getDefaultSeriesVisibleInLegend());
      assertEquals(3, vectorRenderer2.getDefaultEntityRadius());
      assertTrue(vectorRenderer2.getDefaultSeriesVisible());
      assertTrue(vectorRenderer2.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer2.getDefaultCreateEntities());
      assertEquals(1, vectorRenderer2.getPassCount());
      assertTrue(vectorRenderer2.getAutoPopulateSeriesStroke());
      
      boolean boolean0 = vectorRenderer0.equals(vectorRenderer2);
      assertFalse(vectorRenderer0.equals((Object)vectorRenderer1));
      assertFalse(vectorRenderer0.equals((Object)vectorRenderer2));
      assertTrue(vectorRenderer2.equals((Object)vectorRenderer1));
      assertFalse(vectorRenderer2.equals((Object)vectorRenderer0));
      assertNotSame(vectorRenderer0, vectorRenderer1);
      assertNotSame(vectorRenderer0, vectorRenderer2);
      assertNotSame(vectorRenderer2, vectorRenderer1);
      assertNotSame(vectorRenderer2, vectorRenderer0);
      assertFalse(boolean0);
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, vectorRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertFalse(vectorRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertFalse(vectorRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertFalse(vectorRenderer2.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer2.getAutoPopulateSeriesFillPaint());
      assertTrue(vectorRenderer2.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer2.getDefaultSeriesVisibleInLegend());
      assertEquals(3, vectorRenderer2.getDefaultEntityRadius());
      assertTrue(vectorRenderer2.getDefaultSeriesVisible());
      assertTrue(vectorRenderer2.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer2.getDefaultCreateEntities());
      assertEquals(1, vectorRenderer2.getPassCount());
      assertTrue(vectorRenderer2.getAutoPopulateSeriesStroke());
      
      boolean boolean1 = vectorRenderer1.equals("Y<c2wR~2 j@>Mh)b");
      assertFalse(vectorRenderer1.equals((Object)vectorRenderer0));
      assertTrue(vectorRenderer1.equals((Object)vectorRenderer2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(vectorRenderer1, vectorRenderer0);
      assertNotSame(vectorRenderer1, vectorRenderer2);
      assertFalse(boolean1);
      assertEquals(3, vectorRenderer1.getDefaultEntityRadius());
      assertTrue(vectorRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer1.getDefaultSeriesVisible());
      assertTrue(vectorRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer1.getDefaultCreateEntities());
      assertFalse(vectorRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(vectorRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, vectorRenderer1.getPassCount());
      assertFalse(vectorRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(vectorRenderer1.getDefaultItemLabelsVisible());
      assertEquals(2.0, vectorRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer1.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer1.getAutoPopulateSeriesOutlineStroke());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      assertNotNull(vectorRenderer0);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      boolean boolean0 = vectorRenderer0.hasListener(defaultIntervalXYDataset0);
      assertFalse(boolean0);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertNotNull(thermometerPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertNotNull(numberAxis0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      
      defaultIntervalXYDataset0.addChangeListener(combinedDomainXYPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultIntervalXYDataset0);
      assertNotNull(seriesChangeEvent0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      defaultIntervalXYDataset0.seriesChanged(seriesChangeEvent0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      defaultIntervalXYDataset0.validateObject();
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Range range0 = vectorRenderer0.findRangeBounds(defaultIntervalXYDataset0);
      assertNull(range0);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Range range1 = vectorRenderer0.findDomainBounds(defaultIntervalXYDataset0);
      assertNull(range1);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Range range2 = vectorRenderer0.findRangeBounds(defaultIntervalXYDataset0);
      assertNull(range2);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      assertNotNull(vectorRenderer0);
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      
      GridLayout gridLayout0 = new GridLayout((-713), (-1244), (-713), 0);
      assertNotNull(gridLayout0);
      assertEquals((-1244), gridLayout0.getColumns());
      assertEquals((-713), gridLayout0.getHgap());
      assertEquals((-713), gridLayout0.getRows());
      assertEquals(0, gridLayout0.getVgap());
      
      Panel panel0 = new Panel(gridLayout0);
      assertNotNull(panel0);
      assertEquals((-1244), gridLayout0.getColumns());
      assertEquals((-713), gridLayout0.getHgap());
      assertEquals((-713), gridLayout0.getRows());
      assertEquals(0, gridLayout0.getVgap());
      assertEquals(Component.BaselineResizeBehavior.OTHER, panel0.getBaselineResizeBehavior());
      assertTrue(panel0.getFocusTraversalKeysEnabled());
      assertFalse(panel0.getIgnoreRepaint());
      assertEquals(0, panel0.getWidth());
      assertEquals(0.5F, panel0.getAlignmentY(), 0.01F);
      assertFalse(panel0.isFocusTraversalPolicySet());
      assertEquals(0, panel0.getY());
      assertEquals(0, panel0.getHeight());
      assertEquals(0, panel0.getX());
      assertFalse(panel0.isOpaque());
      assertEquals(0.5F, panel0.getAlignmentX(), 0.01F);
      assertFalse(panel0.isFocusCycleRoot());
      assertFalse(panel0.isDoubleBuffered());
      assertFalse(panel0.isFocusTraversalPolicyProvider());
      
      boolean boolean0 = vectorRenderer0.equals(panel0);
      assertFalse(boolean0);
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(vectorRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(vectorRenderer0.getDefaultCreateEntities());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertTrue(vectorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(vectorRenderer0.getDefaultItemLabelsVisible());
      assertFalse(vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(vectorRenderer0.getAutoPopulateSeriesShape());
      assertTrue(vectorRenderer0.getDefaultSeriesVisible());
      assertEquals((-1244), gridLayout0.getColumns());
      assertEquals((-713), gridLayout0.getHgap());
      assertEquals((-713), gridLayout0.getRows());
      assertEquals(0, gridLayout0.getVgap());
      assertEquals(Component.BaselineResizeBehavior.OTHER, panel0.getBaselineResizeBehavior());
      assertTrue(panel0.getFocusTraversalKeysEnabled());
      assertFalse(panel0.getIgnoreRepaint());
      assertEquals(0, panel0.getWidth());
      assertEquals(0.5F, panel0.getAlignmentY(), 0.01F);
      assertFalse(panel0.isFocusTraversalPolicySet());
      assertEquals(0, panel0.getY());
      assertEquals(0, panel0.getHeight());
      assertEquals(0, panel0.getX());
      assertFalse(panel0.isOpaque());
      assertEquals(0.5F, panel0.getAlignmentX(), 0.01F);
      assertFalse(panel0.isFocusCycleRoot());
      assertFalse(panel0.isDoubleBuffered());
      assertFalse(panel0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      vectorRenderer0.clone();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(vectorRenderer0.ZERO);
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      int int0 = 0;
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis(0);
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getRenderer();
      PolarPlot polarPlot1 = new PolarPlot(simpleHistogramDataset0, valueAxis0, (PolarItemRenderer) null);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(vectorSeriesCollection0, vectorSeriesCollection0);
      polarPlot1.datasetChanged(datasetChangeEvent0);
      XYDataset xYDataset0 = polarPlot1.getDataset();
      vectorRenderer0.findDomainBounds(xYDataset0);
      RescaleOp rescaleOp0 = new RescaleOp(10, (-598.90533F), (RenderingHints) null);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(60, 10, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -1
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      AnnotationChangeEvent annotationChangeEvent0 = null;
      try {
        annotationChangeEvent0 = new AnnotationChangeEvent((Object) null, (Annotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      int int0 = (-921);
      JTabbedPane jTabbedPane0 = null;
      try {
        jTabbedPane0 = new JTabbedPane((-921));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range0 = vectorRenderer0.findRangeBounds(defaultTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      VectorRenderer vectorRenderer1 = new VectorRenderer();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) vectorRenderer0.ZERO;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require 'index' (-1) to be non-negative.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
