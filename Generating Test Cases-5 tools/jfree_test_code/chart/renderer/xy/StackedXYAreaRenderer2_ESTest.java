/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:43:52 GMT 2023
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ComponentColorModel;
import java.awt.image.ComponentSampleModel;
import java.awt.image.DataBufferShort;
import java.awt.image.ImagingOpException;
import java.awt.image.IndexColorModel;
import java.awt.image.Raster;
import java.net.URL;
import java.text.AttributedCharacterIterator;
import java.text.CharacterIterator;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.time.Clock;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.Era;
import java.time.chrono.HijrahDate;
import java.time.chrono.JapaneseDate;
import java.time.chrono.MinguoDate;
import java.time.temporal.TemporalAmount;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JEditorPane;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.plaf.multi.MultiListUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.date.SerialDate;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.labels.XYItemLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.xy.AbstractXYItemRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.TestIntervalCategoryDataset;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackedXYAreaRenderer2_ESTest extends StackedXYAreaRenderer2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(standardXYToolTipGenerator0, timeSeriesURLGenerator0);
      stackedXYAreaRenderer2_0.setRoundXCoordinates(false);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getSeriesToolTipGenerator(0);
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_1 = new StackedXYAreaRenderer2((XYToolTipGenerator) null, timeSeriesURLGenerator0);
      stackedXYAreaRenderer2_0.equals(stackedXYAreaRenderer2_1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYToolTipGenerator xYToolTipGenerator0 = mock(XYToolTipGenerator.class, new ViolatedAssumptionAnswer());
      XYURLGenerator xYURLGenerator0 = mock(XYURLGenerator.class, new ViolatedAssumptionAnswer());
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(xYToolTipGenerator0, xYURLGenerator0);
      stackedXYAreaRenderer2_0.getRoundXCoordinates();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYToolTipGenerator xYToolTipGenerator1 = mock(XYToolTipGenerator.class, new ViolatedAssumptionAnswer());
      XYURLGenerator xYURLGenerator1 = mock(XYURLGenerator.class, new ViolatedAssumptionAnswer());
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_1 = new StackedXYAreaRenderer2(xYToolTipGenerator1, xYURLGenerator1);
      stackedXYAreaRenderer2_1.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = null;
      XYItemRendererState xYItemRendererState0 = stackedXYAreaRenderer2_0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, (PlotRenderingInfo) null);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer2_0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, (PlotRenderingInfo) null, (XYPlot) null, valueAxis0, valueAxis0, xYDataset1, 0, 3385, crosshairState0, 10);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataset$MockitoMock$2143534506 cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer2", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYToolTipGenerator xYToolTipGenerator0 = null;
      XYURLGenerator xYURLGenerator0 = mock(XYURLGenerator.class, new ViolatedAssumptionAnswer());
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2((XYToolTipGenerator) null, xYURLGenerator0);
      stackedXYAreaRenderer2_0.equals((Object) null);
      XYAnnotation xYAnnotation0 = mock(XYAnnotation.class, new ViolatedAssumptionAnswer());
      stackedXYAreaRenderer2_0.addAnnotation(xYAnnotation0);
      int int0 = (-4370);
      int int1 = 0;
      stackedXYAreaRenderer2_0.getSeriesItemLabelFont(0);
      stackedXYAreaRenderer2_0.setSeriesItemLabelFont((-4370), (Font) null, false);
      int int2 = 199;
      stackedXYAreaRenderer2_0.setSeriesToolTipGenerator(199, (XYToolTipGenerator) null);
      stackedXYAreaRenderer2_0.getRoundXCoordinates();
      try { 
        stackedXYAreaRenderer2_0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Object without clone() method is impossible.
         //
         verifyException("org.jfree.chart.util.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYToolTipGenerator xYToolTipGenerator0 = mock(XYToolTipGenerator.class, new ViolatedAssumptionAnswer());
      XYURLGenerator xYURLGenerator0 = mock(XYURLGenerator.class, new ViolatedAssumptionAnswer());
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(xYToolTipGenerator0, xYURLGenerator0);
      stackedXYAreaRenderer2_0.setRoundXCoordinates(true);
      XYDataset xYDataset0 = null;
      stackedXYAreaRenderer2_0.findRangeBounds((XYDataset) null);
      stackedXYAreaRenderer2_0.equals((Object) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      stackedXYAreaRenderer2_0.getPlot();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = stackedXYAreaRenderer2_0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, (XYDataset) null, plotRenderingInfo0);
      stackedXYAreaRenderer2_0.getSeriesItemLabelGenerator(10);
      stackedXYAreaRenderer2_0.setDefaultItemLabelGenerator((XYItemLabelGenerator) null);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Font font0 = stackedXYAreaRenderer2_0.getItemLabelFont(0, 20);
      stackedXYAreaRenderer2_0.setLegendTextFont(10, font0);
      XYURLGenerator xYURLGenerator1 = mock(XYURLGenerator.class, new ViolatedAssumptionAnswer());
      stackedXYAreaRenderer2_0.setURLGenerator(xYURLGenerator1);
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo1).getOwner();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer2_0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, (XYDataset) null, 10, 1, crosshairState0, 1233);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer2", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      stackedXYAreaRenderer2_0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = stackedXYAreaRenderer2_0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo1).getOwner();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer2_0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, xYDataset1, 10, 10, crosshairState0, (-3514));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer2", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      stackedXYAreaRenderer2_0.findRangeBounds(defaultTableXYDataset0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", stackedXYAreaRenderer2_0.DEFAULT_VALUE_LABEL_FONT, waferMapPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 34, (double) 1.0F, (double) stackedXYAreaRenderer2_0.ZERO, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 768, (-1043));
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxisForDataset(34);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingCategoryDataset0, categoryAxis0, (ValueAxis) null, levelRenderer0);
      DrawingSupplier drawingSupplier0 = categoryPlot0.getDrawingSupplier();
      waferMapPlot0.setDrawingSupplier(drawingSupplier0);
      XYPlot xYPlot0 = stackedXYAreaRenderer2_0.getPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_GRIDLINE_PAINT, false);
      jFreeChart0.handleClick((-944), 0, chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = xYDifferenceRenderer0.initialise(graphics2D0, (Rectangle2D) null, (XYPlot) null, defaultTableXYDataset0, (PlotRenderingInfo) null);
      xYItemRendererState0.getInfo();
      XYItemRendererState xYItemRendererState1 = defaultXYItemRenderer0.initialise(graphics2D0, (Rectangle2D) null, (XYPlot) null, defaultTableXYDataset0, (PlotRenderingInfo) null);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("ZOOM_IN_RANGE");
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      xYItemRendererState1.setProcessVisibleItemsOnly(true);
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer2_0.drawItem(graphics2D0, xYItemRendererState1, (Rectangle2D) null, (PlotRenderingInfo) null, (XYPlot) null, logarithmicAxis0, logarithmicAxis0, defaultTableXYDataset0, 500, 1536, categoryCrosshairState0, 334);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer2", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DateAxis dateAxis0 = new DateAxis("rsuP>@q>C");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultXYZDataset0, dateAxis0, defaultPolarItemRenderer0);
      ValueAxis valueAxis0 = polarPlot0.getAxisForDataset(500);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getDataset(32);
      stackedXYAreaRenderer2_0.findRangeBounds((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      Font font0 = stackedXYAreaRenderer2_0.getDefaultItemLabelFont();
      stackedXYAreaRenderer2_0.setDefaultLegendTextFont(font0);
      stackedXYAreaRenderer2_0.getRoundXCoordinates();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(xYDataset0).getSeriesCount();
      stackedXYAreaRenderer2_0.findDomainBounds(xYDataset0);
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer2_0.findRangeBounds(xYDataset1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataset$MockitoMock$2143534506 cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer2", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      stackedXYAreaRenderer2_0.setAutoPopulateSeriesOutlineStroke(false);
      Object object0 = stackedXYAreaRenderer2_0.clone();
      stackedXYAreaRenderer2_0.equals(object0);
      TestIntervalCategoryDataset testIntervalCategoryDataset0 = new TestIntervalCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(testIntervalCategoryDataset0);
      Paint paint0 = spiderWebPlot0.getSeriesOutlinePaint(0);
      stackedXYAreaRenderer2_0.setLegendTextPaint(2642, paint0);
      stackedXYAreaRenderer2_0.setRoundXCoordinates(true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      int int0 = (-2262);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1193, "c_nv?1\u0000)][F#/ u-", 2003, 0, 0, 0, (-2262), 0, (-533), 3335, (-2262), 0, 716);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end time -2262
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 3003.0;
      boolean boolean0 = true;
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      DateFormat dateFormat1 = DateFormat.getTimeInstance();
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = null;
      try {
        standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator((String) null, dateFormat0, dateFormat0, dateFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      int int0 = (-1804);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      defaultPolarItemRenderer0.equals(categoryTableXYDataset0);
      defaultPolarItemRenderer0.getToolTipGenerator(0, (-1804));
      XYURLGenerator xYURLGenerator0 = null;
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2((XYToolTipGenerator) null, (XYURLGenerator) null);
      stackedXYAreaRenderer2_0.getPassCount();
      int int1 = 300;
      stackedXYAreaRenderer2_0.lookupSeriesShape(300);
      stackedXYAreaRenderer2_0.removeAnnotations();
      stackedXYAreaRenderer2_0.clone();
      stackedXYAreaRenderer2_0.getPassCount();
      stackedXYAreaRenderer2_0.findRangeBounds(categoryTableXYDataset0);
      stackedXYAreaRenderer2_0.findRangeBounds(categoryTableXYDataset0);
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(1, (double) stackedXYAreaRenderer2_0.ZERO);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 1);
        fail("Expecting exception: ImagingOpException");
      
      } catch(ImagingOpException e) {
         //
         // Unable to invert transform AffineTransform[[1.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      stackedXYAreaRenderer2_0.getPassCount();
      GeneralPath generalPath0 = new GeneralPath();
      AbstractXYItemRenderer.moveTo(generalPath0, 0.0, 0.0);
      stackedXYAreaRenderer2_0.equals("g-Ur\"g$:");
      stackedXYAreaRenderer2_0.getPassCount();
      stackedXYAreaRenderer2_0.setRoundXCoordinates(true);
      stackedXYAreaRenderer2_0.clone();
      stackedXYAreaRenderer2_0.setRoundXCoordinates(false);
      stackedXYAreaRenderer2_0.setRoundXCoordinates(true);
      stackedXYAreaRenderer2_0.setRoundXCoordinates(false);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.removeAllValuesForX(stackedXYAreaRenderer2_0.ZERO);
      stackedXYAreaRenderer2_0.findRangeBounds(defaultTableXYDataset0);
      stackedXYAreaRenderer2_0.equals((Object) null);
      stackedXYAreaRenderer2_0.getRoundXCoordinates();
      stackedXYAreaRenderer2_0.getRoundXCoordinates();
      stackedXYAreaRenderer2_0.findRangeBounds(defaultTableXYDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      int int0 = 0;
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      Date[] dateArray0 = new Date[8];
      SimpleTimePeriod simpleTimePeriod0 = null;
      try {
        simpleTimePeriod0 = new SimpleTimePeriod((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = null;
      try {
        highLowItemLabelGenerator0 = new HighLowItemLabelGenerator((DateFormat) null, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dateFormatter' argument.
         //
         verifyException("org.jfree.chart.labels.HighLowItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      stackedXYAreaRenderer2_0.setRoundXCoordinates(false);
      int int0 = 0;
      int int1 = 0;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-71);
      byteArray0[0] = (byte) (-71);
      byte byte1 = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)9;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 0, byteArray0, 983, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      stackedXYAreaRenderer2_0.setRoundXCoordinates(true);
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-2258);
      // Undeclared exception!
      try { 
        DateFormat.getTimeInstance((-2258));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2258
         //
         verifyException("java.text.DateFormat", e);
      }
  }
}
