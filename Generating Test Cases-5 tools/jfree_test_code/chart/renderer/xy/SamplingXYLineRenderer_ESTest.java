/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:37:55 GMT 2023
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Graphics2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.labels.XYSeriesLabelGenerator;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.data.Range;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SamplingXYLineRenderer_ESTest extends SamplingXYLineRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      samplingXYLineRenderer0.getPassCount();
      samplingXYLineRenderer0.getPassCount();
      samplingXYLineRenderer0.getPassCount();
      SamplingXYLineRenderer samplingXYLineRenderer1 = new SamplingXYLineRenderer();
      SamplingXYLineRenderer samplingXYLineRenderer2 = (SamplingXYLineRenderer)samplingXYLineRenderer1.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      samplingXYLineRenderer2.drawItemLabel(graphics2D0, (PlotOrientation) null, xYDataset0, 1, 1, 1, (-4721.345244), false);
      samplingXYLineRenderer0.equals(samplingXYLineRenderer0);
      samplingXYLineRenderer0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      SamplingXYLineRenderer samplingXYLineRenderer1 = new SamplingXYLineRenderer();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = samplingXYLineRenderer1.getPlot();
      XYDataset xYDataset0 = null;
      samplingXYLineRenderer1.setSeriesItemLabelPaint(10, xYPlot0.DEFAULT_GRIDLINE_PAINT, false);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = samplingXYLineRenderer1.initialise(graphics2D0, rectangle2D0, (XYPlot) null, (XYDataset) null, plotRenderingInfo0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      samplingXYLineRenderer0.getPlot();
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((Range) null).when(valueAxis1).getRange();
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYItemRendererState0.startSeriesPass((XYDataset) null, 1, 10, 10, 1, 4299);
      // Undeclared exception!
      try { 
        samplingXYLineRenderer0.drawDomainLine(graphics2D1, (XYPlot) null, valueAxis1, rectangle2D2, 2.0F, samplingXYLineRenderer1.DEFAULT_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.AbstractXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      XYAnnotation xYAnnotation0 = mock(XYAnnotation.class, new ViolatedAssumptionAnswer());
      samplingXYLineRenderer0.addAnnotation(xYAnnotation0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = null;
      samplingXYLineRenderer0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      samplingXYLineRenderer0.initialise(graphics2D0, (Rectangle2D) null, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      try { 
        samplingXYLineRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Object without clone() method is impossible.
         //
         verifyException("org.jfree.chart.util.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      Object object0 = samplingXYLineRenderer0.clone();
      samplingXYLineRenderer0.equals(object0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      samplingXYLineRenderer0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = samplingXYLineRenderer0.initialise(graphics2D1, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        samplingXYLineRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, xYDataset1, 10, 0, crosshairState0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.SamplingXYLineRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      samplingXYLineRenderer0.getPlot();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        samplingXYLineRenderer0.drawItem(graphics2D0, (XYItemRendererState) null, rectangle2D0, plotRenderingInfo0, (XYPlot) null, valueAxis0, valueAxis0, xYDataset0, 500, (-1), (CrosshairState) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.SamplingXYLineRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      SamplingXYLineRenderer.State samplingXYLineRenderer_State0 = new SamplingXYLineRenderer.State(plotRenderingInfo0);
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        samplingXYLineRenderer_State0.startSeriesPass(xYDataset0, 0, 24, 24, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.SamplingXYLineRenderer$State", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      samplingXYLineRenderer0.setAutoPopulateSeriesPaint(true);
      samplingXYLineRenderer0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      SamplingXYLineRenderer.State samplingXYLineRenderer_State0 = (SamplingXYLineRenderer.State)samplingXYLineRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      samplingXYLineRenderer0.getPassCount();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      GeneralPath generalPath0 = samplingXYLineRenderer_State0.intervalPath;
      samplingXYLineRenderer_State0.seriesPath = generalPath0;
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      samplingXYLineRenderer0.initialise(graphics2D1, rectangle2D1, (XYPlot) null, xYDataset1, plotRenderingInfo1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo2 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      samplingXYLineRenderer_State0.startSeriesPass(xYDataset2, (-1), 10, 0, 12, (-1));
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset3 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        samplingXYLineRenderer0.drawItem(graphics2D2, samplingXYLineRenderer_State0, rectangle2D2, plotRenderingInfo2, (XYPlot) null, valueAxis0, valueAxis1, xYDataset3, 10, 1, crosshairState0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.SamplingXYLineRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      samplingXYLineRenderer0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      samplingXYLineRenderer0.getLegendItemURLGenerator();
      samplingXYLineRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      samplingXYLineRenderer0.equals(samplingXYLineRenderer0);
      samplingXYLineRenderer0.clone();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertNotNull(samplingXYLineRenderer0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      SamplingXYLineRenderer samplingXYLineRenderer1 = new SamplingXYLineRenderer();
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisible());
      assertTrue(samplingXYLineRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer1.getDefaultCreateEntities());
      assertEquals(3, samplingXYLineRenderer1.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, samplingXYLineRenderer1.getPassCount());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesShape());
      assertNotNull(samplingXYLineRenderer1);
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer0));
      
      XYPlot xYPlot0 = samplingXYLineRenderer1.getPlot();
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisible());
      assertTrue(samplingXYLineRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer1.getDefaultCreateEntities());
      assertEquals(3, samplingXYLineRenderer1.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, samplingXYLineRenderer1.getPassCount());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesShape());
      assertNull(xYPlot0);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer0);
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer0));
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      BasicStroke basicStroke0 = (BasicStroke)samplingXYLineRenderer1.lookupSeriesStroke(1239);
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisible());
      assertTrue(samplingXYLineRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer1.getDefaultCreateEntities());
      assertEquals(3, samplingXYLineRenderer1.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, samplingXYLineRenderer1.getPassCount());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesShape());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer0);
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer0));
      
      SamplingXYLineRenderer.State samplingXYLineRenderer_State0 = (SamplingXYLineRenderer.State)samplingXYLineRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertEquals(0, samplingXYLineRenderer_State0.getLastItemIndex());
      assertTrue(samplingXYLineRenderer_State0.getProcessVisibleItemsOnly());
      assertEquals(0, samplingXYLineRenderer_State0.getFirstItemIndex());
      assertFalse(samplingXYLineRenderer_State0.getElementHinting());
      assertNotNull(samplingXYLineRenderer_State0);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer1);
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer1));
      
      SamplingXYLineRenderer samplingXYLineRenderer2 = (SamplingXYLineRenderer)samplingXYLineRenderer1.clone();
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisible());
      assertTrue(samplingXYLineRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer1.getDefaultCreateEntities());
      assertEquals(3, samplingXYLineRenderer1.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, samplingXYLineRenderer1.getPassCount());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, samplingXYLineRenderer2.getPassCount());
      assertTrue(samplingXYLineRenderer2.getDefaultSeriesVisible());
      assertFalse(samplingXYLineRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertFalse(samplingXYLineRenderer2.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer2.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, samplingXYLineRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer2.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer2.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer2.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer2.getAutoPopulateSeriesStroke());
      assertEquals(3, samplingXYLineRenderer2.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer2.getDefaultCreateEntities());
      assertNotNull(samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer2, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer2, samplingXYLineRenderer0);
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer0));
      assertTrue(samplingXYLineRenderer2.equals((Object)samplingXYLineRenderer1));
      assertTrue(samplingXYLineRenderer2.equals((Object)samplingXYLineRenderer0));
      
      SamplingXYLineRenderer samplingXYLineRenderer3 = new SamplingXYLineRenderer();
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer3.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer3.getPassCount());
      assertTrue(samplingXYLineRenderer3.getDefaultCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, samplingXYLineRenderer3.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesPaint());
      assertNotNull(samplingXYLineRenderer3);
      assertTrue(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer0));
      assertTrue(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer1));
      
      SamplingXYLineRenderer samplingXYLineRenderer4 = (SamplingXYLineRenderer)samplingXYLineRenderer3.clone();
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer3.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer3.getPassCount());
      assertTrue(samplingXYLineRenderer3.getDefaultCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, samplingXYLineRenderer3.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesPaint());
      assertEquals(2.0, samplingXYLineRenderer4.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, samplingXYLineRenderer4.getPassCount());
      assertFalse(samplingXYLineRenderer4.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer4.getDefaultSeriesVisible());
      assertFalse(samplingXYLineRenderer4.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer4.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer4.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer4.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer4.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer4.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer4.getDefaultCreateEntities());
      assertTrue(samplingXYLineRenderer4.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer4.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer4.getDefaultEntityRadius());
      assertNotNull(samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer4, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer4, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer4, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer4, samplingXYLineRenderer2);
      assertTrue(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer0));
      assertTrue(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer1));
      assertTrue(samplingXYLineRenderer4.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer4.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer4.equals((Object)samplingXYLineRenderer0));
      assertTrue(samplingXYLineRenderer4.equals((Object)samplingXYLineRenderer1));
      
      XYAnnotation xYAnnotation0 = mock(XYAnnotation.class, new ViolatedAssumptionAnswer());
      samplingXYLineRenderer3.addAnnotation(xYAnnotation0);
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer3.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer3.getPassCount());
      assertTrue(samplingXYLineRenderer3.getDefaultCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, samplingXYLineRenderer3.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesPaint());
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer4);
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer1));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer2));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer0));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer4));
      
      samplingXYLineRenderer3.setDefaultItemLabelFont(samplingXYLineRenderer1.DEFAULT_VALUE_LABEL_FONT, true);
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisible());
      assertTrue(samplingXYLineRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer1.getDefaultCreateEntities());
      assertEquals(3, samplingXYLineRenderer1.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, samplingXYLineRenderer1.getPassCount());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer3.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer3.getPassCount());
      assertTrue(samplingXYLineRenderer3.getDefaultCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, samplingXYLineRenderer3.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesPaint());
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer4);
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer4));
      assertFalse(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer0));
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer2));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer1));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer2));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer0));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer4));
      
      boolean boolean0 = samplingXYLineRenderer0.equals(samplingXYLineRenderer4);
      assertTrue(boolean0);
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer3.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer3.getPassCount());
      assertTrue(samplingXYLineRenderer3.getDefaultCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, samplingXYLineRenderer3.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesPaint());
      assertEquals(2.0, samplingXYLineRenderer4.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, samplingXYLineRenderer4.getPassCount());
      assertFalse(samplingXYLineRenderer4.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer4.getDefaultSeriesVisible());
      assertFalse(samplingXYLineRenderer4.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer4.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer4.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer4.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer4.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer4.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer4.getDefaultCreateEntities());
      assertTrue(samplingXYLineRenderer4.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer4.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer4.getDefaultEntityRadius());
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer4, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer4, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer4, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer4, samplingXYLineRenderer2);
      assertFalse(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer1));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer1));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer2));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer0));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer4.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer4.equals((Object)samplingXYLineRenderer0));
      assertTrue(samplingXYLineRenderer4.equals((Object)samplingXYLineRenderer1));
      assertFalse(samplingXYLineRenderer4.equals((Object)samplingXYLineRenderer3));
      
      boolean boolean1 = samplingXYLineRenderer3.equals(samplingXYLineRenderer1);
      assertFalse(boolean1);
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisible());
      assertTrue(samplingXYLineRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer1.getDefaultCreateEntities());
      assertEquals(3, samplingXYLineRenderer1.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, samplingXYLineRenderer1.getPassCount());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer3.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer3.getPassCount());
      assertTrue(samplingXYLineRenderer3.getDefaultCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, samplingXYLineRenderer3.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesPaint());
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer4);
      assertFalse(boolean1 == boolean0);
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer4));
      assertFalse(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer0));
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer2));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer1));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer2));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer0));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer4));
      
      samplingXYLineRenderer3.clearSeriesPaints(false);
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer3.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer3.getPassCount());
      assertTrue(samplingXYLineRenderer3.getDefaultCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, samplingXYLineRenderer3.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesPaint());
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer4);
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer1));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer2));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer0));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer4));
      
      samplingXYLineRenderer0.setAutoPopulateSeriesOutlinePaint(true);
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer4);
      assertFalse(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer1));
      
      SamplingXYLineRenderer samplingXYLineRenderer5 = (SamplingXYLineRenderer)samplingXYLineRenderer0.clone();
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer5.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer5.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer5.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer5.getAutoPopulateSeriesOutlineStroke());
      assertFalse(samplingXYLineRenderer5.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer5.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer5.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer5.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer5.getPassCount());
      assertTrue(samplingXYLineRenderer5.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer5.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer5.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer5.getDefaultCreateEntities());
      assertEquals(3, samplingXYLineRenderer5.getDefaultEntityRadius());
      assertNotNull(samplingXYLineRenderer5);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer5);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer3);
      assertFalse(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer1));
      assertTrue(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer4));
      assertFalse(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer1));
      assertTrue(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer0));
      
      boolean boolean2 = samplingXYLineRenderer1.equals(samplingXYLineRenderer5);
      assertTrue(boolean2);
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer5.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer5.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer5.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer5.getAutoPopulateSeriesOutlineStroke());
      assertFalse(samplingXYLineRenderer5.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer5.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer5.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer5.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer5.getPassCount());
      assertTrue(samplingXYLineRenderer5.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer5.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer5.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer5.getDefaultCreateEntities());
      assertEquals(3, samplingXYLineRenderer5.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisible());
      assertTrue(samplingXYLineRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer1.getDefaultCreateEntities());
      assertEquals(3, samplingXYLineRenderer1.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, samplingXYLineRenderer1.getPassCount());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesShape());
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer5);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer5);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer2);
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer5));
      assertFalse(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer1));
      assertTrue(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer4));
      assertFalse(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer1));
      assertTrue(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer0));
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer5));
      assertFalse(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer0));
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer2));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = samplingXYLineRenderer0.equals(samplingXYLineRenderer_State0);
      assertFalse(boolean3);
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertEquals(0, samplingXYLineRenderer_State0.getLastItemIndex());
      assertTrue(samplingXYLineRenderer_State0.getProcessVisibleItemsOnly());
      assertEquals(0, samplingXYLineRenderer_State0.getFirstItemIndex());
      assertFalse(samplingXYLineRenderer_State0.getElementHinting());
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer5);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer4);
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer5));
      assertFalse(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer1));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = samplingXYLineRenderer3.equals(samplingXYLineRenderer_State0);
      assertFalse(boolean4);
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertEquals(0, samplingXYLineRenderer_State0.getLastItemIndex());
      assertTrue(samplingXYLineRenderer_State0.getProcessVisibleItemsOnly());
      assertEquals(0, samplingXYLineRenderer_State0.getFirstItemIndex());
      assertFalse(samplingXYLineRenderer_State0.getElementHinting());
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer3.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer3.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer3.getPassCount());
      assertTrue(samplingXYLineRenderer3.getDefaultCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, samplingXYLineRenderer3.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer3.getAutoPopulateSeriesPaint());
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer5);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer5);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer3, samplingXYLineRenderer4);
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer5));
      assertFalse(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer1));
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer1));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer5));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer2));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer0));
      assertFalse(samplingXYLineRenderer3.equals((Object)samplingXYLineRenderer4));
      
      SamplingXYLineRenderer samplingXYLineRenderer6 = (SamplingXYLineRenderer)samplingXYLineRenderer0.clone();
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertEquals(2.0, samplingXYLineRenderer6.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer6.getDefaultCreateEntities());
      assertTrue(samplingXYLineRenderer6.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer6.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer6.getPassCount());
      assertEquals(3, samplingXYLineRenderer6.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer6.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer6.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer6.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer6.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer6.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer6.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(samplingXYLineRenderer6.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer6.getAutoPopulateSeriesPaint());
      assertNotNull(samplingXYLineRenderer6);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer5);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer6);
      assertNotSame(samplingXYLineRenderer6, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer6, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer6, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer6, samplingXYLineRenderer5);
      assertNotSame(samplingXYLineRenderer6, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer6, samplingXYLineRenderer2);
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer5));
      assertFalse(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer1));
      assertTrue(samplingXYLineRenderer6.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer6.equals((Object)samplingXYLineRenderer0));
      assertTrue(samplingXYLineRenderer6.equals((Object)samplingXYLineRenderer4));
      assertFalse(samplingXYLineRenderer6.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer6.equals((Object)samplingXYLineRenderer5));
      assertTrue(samplingXYLineRenderer6.equals((Object)samplingXYLineRenderer1));
      
      boolean boolean5 = samplingXYLineRenderer0.equals(samplingXYLineRenderer5);
      assertTrue(boolean5);
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer5.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer5.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer5.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer5.getAutoPopulateSeriesOutlineStroke());
      assertFalse(samplingXYLineRenderer5.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer5.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer5.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer5.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer5.getPassCount());
      assertTrue(samplingXYLineRenderer5.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer5.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer5.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer5.getDefaultCreateEntities());
      assertEquals(3, samplingXYLineRenderer5.getDefaultEntityRadius());
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer5);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer6);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer5, samplingXYLineRenderer6);
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer5));
      assertFalse(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer6));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer1));
      assertTrue(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer6));
      assertFalse(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer1));
      assertTrue(samplingXYLineRenderer5.equals((Object)samplingXYLineRenderer0));
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      
      int int0 = samplingXYLineRenderer1.getPassCount();
      assertEquals(1, int0);
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisible());
      assertTrue(samplingXYLineRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer1.getDefaultCreateEntities());
      assertEquals(3, samplingXYLineRenderer1.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, samplingXYLineRenderer1.getPassCount());
      assertFalse(samplingXYLineRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer1.getAutoPopulateSeriesShape());
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer6);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer5);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer1, samplingXYLineRenderer2);
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer5));
      assertFalse(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer0));
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer1.equals((Object)samplingXYLineRenderer6));
      
      SamplingXYLineRenderer samplingXYLineRenderer7 = (SamplingXYLineRenderer)samplingXYLineRenderer0.clone();
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer7.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer7.getDefaultItemLabelsVisible());
      assertEquals(1, samplingXYLineRenderer7.getPassCount());
      assertFalse(samplingXYLineRenderer7.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, samplingXYLineRenderer7.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer7.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer7.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer7.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer7.getDefaultSeriesVisible());
      assertTrue(samplingXYLineRenderer7.getDefaultCreateEntities());
      assertEquals(3, samplingXYLineRenderer7.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer7.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer7.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer7.getDefaultSeriesVisibleInLegend());
      assertNotNull(samplingXYLineRenderer7);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer5);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer6);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer7);
      assertNotSame(samplingXYLineRenderer7, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer7, samplingXYLineRenderer0);
      assertNotSame(samplingXYLineRenderer7, samplingXYLineRenderer6);
      assertNotSame(samplingXYLineRenderer7, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer7, samplingXYLineRenderer5);
      assertNotSame(samplingXYLineRenderer7, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer7, samplingXYLineRenderer2);
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer5));
      assertFalse(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer6));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer1));
      assertFalse(samplingXYLineRenderer7.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer7.equals((Object)samplingXYLineRenderer1));
      assertTrue(samplingXYLineRenderer7.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer7.equals((Object)samplingXYLineRenderer5));
      assertTrue(samplingXYLineRenderer7.equals((Object)samplingXYLineRenderer0));
      assertTrue(samplingXYLineRenderer7.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer7.equals((Object)samplingXYLineRenderer6));
      
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      SamplingXYLineRenderer.State samplingXYLineRenderer_State1 = (SamplingXYLineRenderer.State)samplingXYLineRenderer0.initialise((Graphics2D) null, rectangle2D1, (XYPlot) null, xYDataset1, plotRenderingInfo1);
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer_State1.getElementHinting());
      assertEquals(0, samplingXYLineRenderer_State1.getLastItemIndex());
      assertEquals(0, samplingXYLineRenderer_State1.getFirstItemIndex());
      assertTrue(samplingXYLineRenderer_State1.getProcessVisibleItemsOnly());
      assertNotNull(samplingXYLineRenderer_State1);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer1);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer3);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer5);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer2);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer4);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer6);
      assertNotSame(samplingXYLineRenderer0, samplingXYLineRenderer7);
      assertNotSame(samplingXYLineRenderer_State1, samplingXYLineRenderer_State0);
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer5));
      assertFalse(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer3));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer7));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer2));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer4));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer6));
      assertTrue(samplingXYLineRenderer0.equals((Object)samplingXYLineRenderer1));
      assertFalse(samplingXYLineRenderer_State1.equals((Object)samplingXYLineRenderer_State0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getDefaultItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getDefaultCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertNotNull(samplingXYLineRenderer0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      SamplingXYLineRenderer.State samplingXYLineRenderer_State0 = new SamplingXYLineRenderer.State(plotRenderingInfo0);
      assertFalse(samplingXYLineRenderer_State0.getElementHinting());
      assertTrue(samplingXYLineRenderer_State0.getProcessVisibleItemsOnly());
      assertEquals(0, samplingXYLineRenderer_State0.getFirstItemIndex());
      assertEquals(0, samplingXYLineRenderer_State0.getLastItemIndex());
      assertNotNull(samplingXYLineRenderer_State0);
      
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        samplingXYLineRenderer0.drawItem(graphics2D0, samplingXYLineRenderer_State0, (Rectangle2D) null, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, xYDataset0, 500, 500, crosshairState0, 500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.SamplingXYLineRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      samplingXYLineRenderer0.getPlot();
      // Undeclared exception!
      try { 
        samplingXYLineRenderer0.drawItem(graphics2D0, (XYItemRendererState) null, rectangle2D1, (PlotRenderingInfo) null, (XYPlot) null, valueAxis0, valueAxis0, xYDataset0, 655, 500, (CrosshairState) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.SamplingXYLineRenderer", e);
      }
  }
}
