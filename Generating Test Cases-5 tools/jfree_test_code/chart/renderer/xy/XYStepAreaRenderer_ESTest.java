/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:22:12 GMT 2023
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Button;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.LookupOp;
import java.util.Collection;
import java.util.Date;
import java.util.Stack;
import javax.swing.JList;
import javax.swing.JTree;
import javax.swing.border.SoftBevelBorder;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYDrawableAnnotation;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.StandardXYSeriesLabelGenerator;
import org.jfree.chart.labels.XYSeriesLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.xy.AbstractXYItemRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.ui.Layer;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYStepAreaRenderer_ESTest extends XYStepAreaRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(0);
      xYStepAreaRenderer0.lookupSeriesShape((-2807));
      xYStepAreaRenderer0.setAutoPopulateSeriesShape(false);
      xYStepAreaRenderer0.getLegendItem((-2807), 1);
      xYStepAreaRenderer0.setStepPoint(0);
      Date[] dateArray0 = new Date[2];
      String string0 = "OfgK;E\"";
      DateAxis dateAxis0 = new DateAxis("OfgK;E\"");
      Date date0 = dateAxis0.getMinimumDate();
      dateArray0[0] = date0;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date1 = fixedMillisecond0.getTime();
      dateArray0[1] = date1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2.0F;
      doubleArray0[1] = 0.05;
      doubleArray0[2] = 0.05;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      defaultHighLowDataset0.setNotify(true);
      xYStepAreaRenderer0.findRangeBounds(defaultHighLowDataset0);
      xYStepAreaRenderer0.setStepPoint(0);
      xYStepAreaRenderer0.setShapesVisible(true);
      // Undeclared exception!
      try { 
        xYStepAreaRenderer0.setStepPoint((-2807));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires stepPoint in [0.0;1.0]
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYToolTipGenerator xYToolTipGenerator0 = candlestickRenderer0.getDefaultToolTipGenerator();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer((-805), xYToolTipGenerator0, (XYURLGenerator) null);
      xYStepAreaRenderer0.setStepPoint(0.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 0.0;
      XYToolTipGenerator xYToolTipGenerator0 = mock(XYToolTipGenerator.class, new ViolatedAssumptionAnswer());
      XYURLGenerator xYURLGenerator0 = mock(XYURLGenerator.class, new ViolatedAssumptionAnswer());
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(3, xYToolTipGenerator0, xYURLGenerator0);
      xYStepAreaRenderer0.getPlot();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYStepAreaRenderer0.setItemLabelAnchorOffset((-2619.3));
      xYStepAreaRenderer0.setShapesFilled(false);
      xYStepAreaRenderer0.getLegendItemToolTipGenerator();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      xYStepAreaRenderer0.drawItemLabel(graphics2D0, plotOrientation0, xYDataset0, 10, (-1902), 10, 1422.11460905878, false);
      xYStepAreaRenderer0.setLegendItemURLGenerator((XYSeriesLabelGenerator) null);
      GeneralPath generalPath0 = null;
      try {
        generalPath0 = new GeneralPath(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // winding rule must be WIND_EVEN_ODD or WIND_NON_ZERO
         //
         verifyException("java.awt.geom.Path2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(11);
      xYStepAreaRenderer0.equals((Object) null);
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(xYDataset0).getSeriesCount();
      XYAnnotation xYAnnotation0 = mock(XYAnnotation.class, new ViolatedAssumptionAnswer());
      Layer layer0 = Layer.FOREGROUND;
      xYStepAreaRenderer0.addAnnotation(xYAnnotation0, layer0);
      xYStepAreaRenderer0.findDomainBounds(xYDataset0);
      xYStepAreaRenderer0.lookupSeriesPaint(11);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      xYStepAreaRenderer0.setDefaultLegendShape(rectangle2D_Double0);
      XYToolTipGenerator xYToolTipGenerator0 = mock(XYToolTipGenerator.class, new ViolatedAssumptionAnswer());
      xYStepAreaRenderer0.setRangeBase(4.0);
      xYStepAreaRenderer0.setDefaultToolTipGenerator(xYToolTipGenerator0);
      xYStepAreaRenderer0.setPlotArea(true);
      // Undeclared exception!
      try { 
        xYStepAreaRenderer0.setStepPoint(11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires stepPoint in [0.0;1.0]
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYStepAreaRenderer0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = xYStepAreaRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYStepAreaRenderer0.drawItem(graphics2D0, xYItemRendererState0, (Rectangle2D) null, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, xYDataset1, 67, 250, crosshairState0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      xYStepAreaRenderer0.getRangeBase();
      xYStepAreaRenderer0.lookupLegendShape(0);
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation((-835.824), 154.5, 3, (-835.824), 3, emptyBlock0);
      AnnotationChangeEvent annotationChangeEvent0 = null;
      try {
        annotationChangeEvent0 = new AnnotationChangeEvent((Object) null, xYDrawableAnnotation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      xYStepAreaRenderer0.setOutline(false);
      xYStepAreaRenderer0.clearSeriesStrokes(false);
      xYStepAreaRenderer0.isOutline();
      xYStepAreaRenderer0.isShapesFilled();
      xYStepAreaRenderer0.clone();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MultiListUI multiListUI0 = new MultiListUI();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      combinedRangeXYPlot0.getDomainAxisIndex(symbolAxis0);
      // Undeclared exception!
      try { 
        multiListUI0.getCellBounds((JList) null, 244, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      XYAnnotation xYAnnotation0 = mock(XYAnnotation.class, new ViolatedAssumptionAnswer());
      xYStepAreaRenderer0.lookupLegendShape(3205);
      Layer layer0 = Layer.BACKGROUND;
      xYStepAreaRenderer0.addAnnotation(xYAnnotation0, layer0);
      boolean boolean0 = false;
      xYStepAreaRenderer0.setAutoPopulateSeriesPaint(false);
      try { 
        xYStepAreaRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Object without clone() method is impossible.
         //
         verifyException("org.jfree.chart.util.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYToolTipGenerator xYToolTipGenerator0 = mock(XYToolTipGenerator.class, new ViolatedAssumptionAnswer());
      XYURLGenerator xYURLGenerator0 = mock(XYURLGenerator.class, new ViolatedAssumptionAnswer());
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(266, xYToolTipGenerator0, xYURLGenerator0);
      RendererChangeEvent rendererChangeEvent0 = mock(RendererChangeEvent.class, new ViolatedAssumptionAnswer());
      xYStepAreaRenderer0.notifyListeners(rendererChangeEvent0);
      XYStepAreaRenderer xYStepAreaRenderer1 = new XYStepAreaRenderer((-229));
      xYStepAreaRenderer1.getLegendShape(295);
      xYStepAreaRenderer0.setDefaultLegendShape((Shape) null);
      xYStepAreaRenderer0.clone();
      xYStepAreaRenderer0.isShapesFilled();
      xYStepAreaRenderer0.getShapesVisible();
      xYStepAreaRenderer0.getPlot();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        XYStepAreaRenderer.restrictValueToDataArea(0.0, (XYPlot) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      BasicTreeUI.NodeDimensionsHandler basicTreeUI_NodeDimensionsHandler0 = basicTreeUI0.new NodeDimensionsHandler();
      Point point0 = new Point(0, 0);
      Point point1 = new Point(point0);
      Dimension dimension0 = new Dimension(0, 10);
      Rectangle rectangle0 = new Rectangle(point1, dimension0);
      basicTreeUI_NodeDimensionsHandler0.getNodeDimensions(basicTreeUI0, 10, 0, true, rectangle0);
      // Undeclared exception!
      try { 
        XYStepAreaRenderer.restrictValueToDataArea(1527.21108785755, combinedDomainXYPlot0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYToolTipGenerator xYToolTipGenerator0 = mock(XYToolTipGenerator.class, new ViolatedAssumptionAnswer());
      XYURLGenerator xYURLGenerator0 = mock(XYURLGenerator.class, new ViolatedAssumptionAnswer());
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(0, xYToolTipGenerator0, xYURLGenerator0);
      XYStepAreaRenderer xYStepAreaRenderer1 = new XYStepAreaRenderer();
      Paint paint0 = xYStepAreaRenderer1.getDefaultFillPaint();
      xYStepAreaRenderer0.setLegendTextPaint(0, paint0);
      xYStepAreaRenderer0.getPlotArea();
      xYStepAreaRenderer0.getStepPoint();
      xYStepAreaRenderer1.setRangeBase(0);
      xYStepAreaRenderer1.setShapesVisible(false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2, "direction");
      cyclicNumberAxis0.setAutoRange(true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      xYStepAreaRenderer0.setPlot(combinedRangeXYPlot0);
      xYStepAreaRenderer0.isOutline();
      xYStepAreaRenderer0.getPlotArea();
      xYStepAreaRenderer0.setShapesFilled(true);
      xYStepAreaRenderer0.setPlotArea(false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertNotNull(xYStepAreaRenderer0);
      
      boolean boolean0 = xYStepAreaRenderer0.equals("I+($y@BSa%^");
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertFalse(boolean0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYStepAreaRenderer xYStepAreaRenderer1 = new XYStepAreaRenderer(450);
      assertFalse(xYStepAreaRenderer1.getShapesVisible());
      assertTrue(xYStepAreaRenderer1.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer1.getPlotArea());
      assertEquals(2.0, xYStepAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYStepAreaRenderer1.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer1.isOutline());
      assertTrue(xYStepAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer1.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYStepAreaRenderer1.getPassCount());
      assertFalse(xYStepAreaRenderer1.isShapesFilled());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer1.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisible());
      assertEquals(1.0, xYStepAreaRenderer1.getStepPoint(), 0.01);
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer0));
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertNotNull(xYStepAreaRenderer1);
      
      XYPlot xYPlot0 = xYStepAreaRenderer1.getPlot();
      assertFalse(xYStepAreaRenderer1.getShapesVisible());
      assertTrue(xYStepAreaRenderer1.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer1.getPlotArea());
      assertEquals(2.0, xYStepAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYStepAreaRenderer1.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer1.isOutline());
      assertTrue(xYStepAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer1.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYStepAreaRenderer1.getPassCount());
      assertFalse(xYStepAreaRenderer1.isShapesFilled());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer1.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisible());
      assertEquals(1.0, xYStepAreaRenderer1.getStepPoint(), 0.01);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer0);
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer0));
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertNull(xYPlot0);
      
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      xYStepAreaRenderer0.drawItemLabel(graphics2D1, plotOrientation0, xYDataset0, 0, 1593, 1.0F, 0.0, true);
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer1));
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)xYStepAreaRenderer0.lookupLegendShape(450);
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer1));
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYStepAreaRenderer1.setDefaultEntityRadius(3);
      assertFalse(xYStepAreaRenderer1.getShapesVisible());
      assertTrue(xYStepAreaRenderer1.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer1.getPlotArea());
      assertEquals(2.0, xYStepAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYStepAreaRenderer1.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer1.isOutline());
      assertTrue(xYStepAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer1.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYStepAreaRenderer1.getPassCount());
      assertFalse(xYStepAreaRenderer1.isShapesFilled());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer1.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisible());
      assertEquals(1.0, xYStepAreaRenderer1.getStepPoint(), 0.01);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer0);
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer0));
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      
      xYStepAreaRenderer0.drawRangeMarker(graphics2D0, (XYPlot) null, valueAxis0, marker0, rectangle2D0);
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer1));
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      
      XYStepAreaRenderer xYStepAreaRenderer2 = (XYStepAreaRenderer)xYStepAreaRenderer0.clone();
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepAreaRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer2.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer2.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesFillPaint());
      assertEquals(3, xYStepAreaRenderer2.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer2.isOutline());
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer2.getPlotArea());
      assertEquals(2.0, xYStepAreaRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, xYStepAreaRenderer2.getRangeBase(), 0.01);
      assertFalse(xYStepAreaRenderer2.getShapesVisible());
      assertTrue(xYStepAreaRenderer2.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer2.isShapesFilled());
      assertTrue(xYStepAreaRenderer2.getDefaultSeriesVisible());
      assertEquals(1.0, xYStepAreaRenderer2.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesStroke());
      assertEquals(1, xYStepAreaRenderer2.getPassCount());
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer2);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertNotSame(xYStepAreaRenderer2, xYStepAreaRenderer0);
      assertNotSame(xYStepAreaRenderer2, xYStepAreaRenderer1);
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer1));
      assertTrue(xYStepAreaRenderer2.equals((Object)xYStepAreaRenderer0));
      assertFalse(xYStepAreaRenderer2.equals((Object)xYStepAreaRenderer1));
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertNotNull(xYStepAreaRenderer2);
      
      XYStepAreaRenderer xYStepAreaRenderer3 = (XYStepAreaRenderer)xYStepAreaRenderer0.clone();
      assertFalse(xYStepAreaRenderer3.getShapesVisible());
      assertEquals(2.0, xYStepAreaRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer3.getDefaultCreateEntities());
      assertTrue(xYStepAreaRenderer3.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer3.getPlotArea());
      assertTrue(xYStepAreaRenderer3.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer3.getAutoPopulateSeriesShape());
      assertFalse(xYStepAreaRenderer3.isOutline());
      assertFalse(xYStepAreaRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepAreaRenderer3.getAutoPopulateSeriesStroke());
      assertEquals(3, xYStepAreaRenderer3.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer3.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer3.getDefaultItemLabelsVisible());
      assertEquals(1, xYStepAreaRenderer3.getPassCount());
      assertEquals(1.0, xYStepAreaRenderer3.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer3.getDefaultSeriesVisible());
      assertFalse(xYStepAreaRenderer3.isShapesFilled());
      assertEquals(0.0, xYStepAreaRenderer3.getRangeBase(), 0.01);
      assertFalse(xYStepAreaRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotSame(xYStepAreaRenderer3, xYStepAreaRenderer1);
      assertNotSame(xYStepAreaRenderer3, xYStepAreaRenderer2);
      assertNotSame(xYStepAreaRenderer3, xYStepAreaRenderer0);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer3);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer2);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertTrue(xYStepAreaRenderer3.equals((Object)xYStepAreaRenderer2));
      assertTrue(xYStepAreaRenderer3.equals((Object)xYStepAreaRenderer0));
      assertFalse(xYStepAreaRenderer3.equals((Object)xYStepAreaRenderer1));
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer1));
      assertTrue(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer2));
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertNotNull(xYStepAreaRenderer3);
      
      XYSeriesLabelGenerator xYSeriesLabelGenerator0 = xYStepAreaRenderer1.getLegendItemURLGenerator();
      assertFalse(xYStepAreaRenderer1.getShapesVisible());
      assertTrue(xYStepAreaRenderer1.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer1.getPlotArea());
      assertEquals(2.0, xYStepAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYStepAreaRenderer1.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer1.isOutline());
      assertTrue(xYStepAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer1.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYStepAreaRenderer1.getPassCount());
      assertFalse(xYStepAreaRenderer1.isShapesFilled());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer1.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisible());
      assertEquals(1.0, xYStepAreaRenderer1.getStepPoint(), 0.01);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer0);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer3);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer2);
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer0));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer3));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer2));
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertNull(xYSeriesLabelGenerator0);
      
      xYStepAreaRenderer1.setLegendItemURLGenerator((XYSeriesLabelGenerator) null);
      assertFalse(xYStepAreaRenderer1.getShapesVisible());
      assertTrue(xYStepAreaRenderer1.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer1.getPlotArea());
      assertEquals(2.0, xYStepAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYStepAreaRenderer1.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer1.isOutline());
      assertTrue(xYStepAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer1.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYStepAreaRenderer1.getPassCount());
      assertFalse(xYStepAreaRenderer1.isShapesFilled());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer1.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisible());
      assertEquals(1.0, xYStepAreaRenderer1.getStepPoint(), 0.01);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer0);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer3);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer2);
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer0));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer3));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer2));
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      
      XYStepAreaRenderer xYStepAreaRenderer4 = new XYStepAreaRenderer(7);
      assertTrue(xYStepAreaRenderer4.getAutoPopulateSeriesStroke());
      assertTrue(xYStepAreaRenderer4.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer4.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer4.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer4.getAutoPopulateSeriesShape());
      assertEquals(1, xYStepAreaRenderer4.getPassCount());
      assertFalse(xYStepAreaRenderer4.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYStepAreaRenderer4.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer4.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer4.getPlotArea());
      assertEquals(2.0, xYStepAreaRenderer4.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer4.getShapesVisible());
      assertTrue(xYStepAreaRenderer4.getDefaultCreateEntities());
      assertTrue(xYStepAreaRenderer4.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer4.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer4.getRangeBase(), 0.01);
      assertFalse(xYStepAreaRenderer4.isOutline());
      assertFalse(xYStepAreaRenderer4.isShapesFilled());
      assertEquals(1.0, xYStepAreaRenderer4.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer4.getDefaultSeriesVisible());
      assertFalse(xYStepAreaRenderer4.equals((Object)xYStepAreaRenderer0));
      assertTrue(xYStepAreaRenderer4.equals((Object)xYStepAreaRenderer1));
      assertFalse(xYStepAreaRenderer4.equals((Object)xYStepAreaRenderer3));
      assertFalse(xYStepAreaRenderer4.equals((Object)xYStepAreaRenderer2));
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertNotNull(xYStepAreaRenderer4);
      
      XYStepAreaRenderer xYStepAreaRenderer5 = (XYStepAreaRenderer)xYStepAreaRenderer4.clone();
      assertTrue(xYStepAreaRenderer4.getAutoPopulateSeriesStroke());
      assertTrue(xYStepAreaRenderer4.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer4.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer4.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer4.getAutoPopulateSeriesShape());
      assertEquals(1, xYStepAreaRenderer4.getPassCount());
      assertFalse(xYStepAreaRenderer4.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYStepAreaRenderer4.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer4.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer4.getPlotArea());
      assertEquals(2.0, xYStepAreaRenderer4.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer4.getShapesVisible());
      assertTrue(xYStepAreaRenderer4.getDefaultCreateEntities());
      assertTrue(xYStepAreaRenderer4.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer4.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer4.getRangeBase(), 0.01);
      assertFalse(xYStepAreaRenderer4.isOutline());
      assertFalse(xYStepAreaRenderer4.isShapesFilled());
      assertEquals(1.0, xYStepAreaRenderer4.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer4.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer5.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer5.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepAreaRenderer5.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer5.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer5.isOutline());
      assertTrue(xYStepAreaRenderer5.getAutoPopulateSeriesShape());
      assertFalse(xYStepAreaRenderer5.isShapesFilled());
      assertFalse(xYStepAreaRenderer5.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer5.getPlotArea());
      assertTrue(xYStepAreaRenderer5.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer5.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer5.getDefaultCreateEntities());
      assertEquals(2.0, xYStepAreaRenderer5.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer5.getShapesVisible());
      assertEquals(3, xYStepAreaRenderer5.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer5.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYStepAreaRenderer5.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer5.getRangeBase(), 0.01);
      assertEquals(1.0, xYStepAreaRenderer5.getStepPoint(), 0.01);
      assertFalse(xYStepAreaRenderer5.getAutoPopulateSeriesOutlinePaint());
      assertNotSame(xYStepAreaRenderer4, xYStepAreaRenderer0);
      assertNotSame(xYStepAreaRenderer4, xYStepAreaRenderer5);
      assertNotSame(xYStepAreaRenderer4, xYStepAreaRenderer1);
      assertNotSame(xYStepAreaRenderer4, xYStepAreaRenderer3);
      assertNotSame(xYStepAreaRenderer4, xYStepAreaRenderer2);
      assertNotSame(xYStepAreaRenderer5, xYStepAreaRenderer4);
      assertNotSame(xYStepAreaRenderer5, xYStepAreaRenderer2);
      assertNotSame(xYStepAreaRenderer5, xYStepAreaRenderer1);
      assertNotSame(xYStepAreaRenderer5, xYStepAreaRenderer3);
      assertNotSame(xYStepAreaRenderer5, xYStepAreaRenderer0);
      assertFalse(xYStepAreaRenderer4.equals((Object)xYStepAreaRenderer0));
      assertTrue(xYStepAreaRenderer4.equals((Object)xYStepAreaRenderer1));
      assertFalse(xYStepAreaRenderer4.equals((Object)xYStepAreaRenderer3));
      assertFalse(xYStepAreaRenderer4.equals((Object)xYStepAreaRenderer2));
      assertTrue(xYStepAreaRenderer5.equals((Object)xYStepAreaRenderer4));
      assertTrue(xYStepAreaRenderer5.equals((Object)xYStepAreaRenderer1));
      assertFalse(xYStepAreaRenderer5.equals((Object)xYStepAreaRenderer2));
      assertFalse(xYStepAreaRenderer5.equals((Object)xYStepAreaRenderer3));
      assertFalse(xYStepAreaRenderer5.equals((Object)xYStepAreaRenderer0));
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertNotNull(xYStepAreaRenderer5);
      
      boolean boolean1 = xYStepAreaRenderer1.equals(xYStepAreaRenderer5);
      assertTrue(xYStepAreaRenderer4.getAutoPopulateSeriesStroke());
      assertTrue(xYStepAreaRenderer4.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer4.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer4.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer4.getAutoPopulateSeriesShape());
      assertEquals(1, xYStepAreaRenderer4.getPassCount());
      assertFalse(xYStepAreaRenderer4.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYStepAreaRenderer4.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer4.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer4.getPlotArea());
      assertEquals(2.0, xYStepAreaRenderer4.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer4.getShapesVisible());
      assertTrue(xYStepAreaRenderer4.getDefaultCreateEntities());
      assertTrue(xYStepAreaRenderer4.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer4.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer4.getRangeBase(), 0.01);
      assertFalse(xYStepAreaRenderer4.isOutline());
      assertFalse(xYStepAreaRenderer4.isShapesFilled());
      assertEquals(1.0, xYStepAreaRenderer4.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer4.getDefaultSeriesVisible());
      assertFalse(xYStepAreaRenderer1.getShapesVisible());
      assertTrue(xYStepAreaRenderer1.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer1.getPlotArea());
      assertEquals(2.0, xYStepAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYStepAreaRenderer1.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer1.isOutline());
      assertTrue(xYStepAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer1.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYStepAreaRenderer1.getPassCount());
      assertFalse(xYStepAreaRenderer1.isShapesFilled());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer1.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisible());
      assertEquals(1.0, xYStepAreaRenderer1.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer5.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer5.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepAreaRenderer5.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer5.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer5.isOutline());
      assertTrue(xYStepAreaRenderer5.getAutoPopulateSeriesShape());
      assertFalse(xYStepAreaRenderer5.isShapesFilled());
      assertFalse(xYStepAreaRenderer5.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer5.getPlotArea());
      assertTrue(xYStepAreaRenderer5.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer5.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer5.getDefaultCreateEntities());
      assertEquals(2.0, xYStepAreaRenderer5.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer5.getShapesVisible());
      assertEquals(3, xYStepAreaRenderer5.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer5.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYStepAreaRenderer5.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer5.getRangeBase(), 0.01);
      assertEquals(1.0, xYStepAreaRenderer5.getStepPoint(), 0.01);
      assertFalse(xYStepAreaRenderer5.getAutoPopulateSeriesOutlinePaint());
      assertNotSame(xYStepAreaRenderer4, xYStepAreaRenderer0);
      assertNotSame(xYStepAreaRenderer4, xYStepAreaRenderer5);
      assertNotSame(xYStepAreaRenderer4, xYStepAreaRenderer1);
      assertNotSame(xYStepAreaRenderer4, xYStepAreaRenderer3);
      assertNotSame(xYStepAreaRenderer4, xYStepAreaRenderer2);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer4);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer0);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer5);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer3);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer2);
      assertNotSame(xYStepAreaRenderer5, xYStepAreaRenderer4);
      assertNotSame(xYStepAreaRenderer5, xYStepAreaRenderer2);
      assertNotSame(xYStepAreaRenderer5, xYStepAreaRenderer1);
      assertNotSame(xYStepAreaRenderer5, xYStepAreaRenderer3);
      assertNotSame(xYStepAreaRenderer5, xYStepAreaRenderer0);
      assertFalse(xYStepAreaRenderer4.equals((Object)xYStepAreaRenderer0));
      assertTrue(xYStepAreaRenderer4.equals((Object)xYStepAreaRenderer5));
      assertTrue(xYStepAreaRenderer4.equals((Object)xYStepAreaRenderer1));
      assertFalse(xYStepAreaRenderer4.equals((Object)xYStepAreaRenderer3));
      assertFalse(xYStepAreaRenderer4.equals((Object)xYStepAreaRenderer2));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer0));
      assertTrue(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer4));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer3));
      assertTrue(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer5));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer2));
      assertTrue(xYStepAreaRenderer5.equals((Object)xYStepAreaRenderer4));
      assertTrue(xYStepAreaRenderer5.equals((Object)xYStepAreaRenderer1));
      assertFalse(xYStepAreaRenderer5.equals((Object)xYStepAreaRenderer2));
      assertFalse(xYStepAreaRenderer5.equals((Object)xYStepAreaRenderer3));
      assertFalse(xYStepAreaRenderer5.equals((Object)xYStepAreaRenderer0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertTrue(boolean1);
      
      xYStepAreaRenderer1.setShapesFilled(true);
      assertFalse(xYStepAreaRenderer1.getShapesVisible());
      assertTrue(xYStepAreaRenderer1.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer1.getPlotArea());
      assertTrue(xYStepAreaRenderer1.isShapesFilled());
      assertEquals(2.0, xYStepAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYStepAreaRenderer1.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer1.isOutline());
      assertTrue(xYStepAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer1.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYStepAreaRenderer1.getPassCount());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer1.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisible());
      assertEquals(1.0, xYStepAreaRenderer1.getStepPoint(), 0.01);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer4);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer0);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer5);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer3);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer2);
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer4));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer0));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer5));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer3));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer2));
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      
      boolean boolean2 = xYStepAreaRenderer0.isShapesFilled();
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer4);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer5);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer3);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer2);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer4));
      assertTrue(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer3));
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer5));
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer1));
      assertTrue(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer2));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertFalse(boolean2);
      
      xYStepAreaRenderer1.setPlotArea(false);
      assertFalse(xYStepAreaRenderer1.getShapesVisible());
      assertTrue(xYStepAreaRenderer1.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer1.getPlotArea());
      assertTrue(xYStepAreaRenderer1.isShapesFilled());
      assertEquals(2.0, xYStepAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYStepAreaRenderer1.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer1.isOutline());
      assertTrue(xYStepAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer1.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYStepAreaRenderer1.getPassCount());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer1.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisible());
      assertEquals(1.0, xYStepAreaRenderer1.getStepPoint(), 0.01);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer4);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer0);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer5);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer3);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer2);
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer4));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer0));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer5));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer3));
      assertFalse(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer2));
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1602;
      XYToolTipGenerator xYToolTipGenerator0 = mock(XYToolTipGenerator.class, new ViolatedAssumptionAnswer());
      XYURLGenerator xYURLGenerator0 = mock(XYURLGenerator.class, new ViolatedAssumptionAnswer());
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(1602, xYToolTipGenerator0, xYURLGenerator0);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.getPlotArea());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertNotNull(xYStepAreaRenderer0);
      
      xYStepAreaRenderer0.setShapesVisible(true);
      assertTrue(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.getPlotArea());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = xYStepAreaRenderer0.getPlot();
      assertTrue(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.getPlotArea());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertNull(xYPlot0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = null;
      XYItemRendererState xYItemRendererState0 = xYStepAreaRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, (PlotRenderingInfo) null);
      assertTrue(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.getPlotArea());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertFalse(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertFalse(xYItemRendererState0.getElementHinting());
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertNotNull(xYItemRendererState0);
      
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYStepAreaRenderer0.setStepPoint(1380.45609802347);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires stepPoint in [0.0;1.0]
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertNotNull(xYStepAreaRenderer0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LengthAdjustmentType lengthAdjustmentType0 = mock(LengthAdjustmentType.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      // Undeclared exception!
      try { 
        xYStepAreaRenderer0.calculateDomainMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle2D0, rectangle2D0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rectangle' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(0);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer0.getPlotArea());
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertNotNull(xYStepAreaRenderer0);
      
      xYStepAreaRenderer0.setShapesFilled(true);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.getPlotArea());
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      
      xYStepAreaRenderer0.setAutoPopulateSeriesPaint(true);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.getPlotArea());
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      
      Paint paint0 = xYStepAreaRenderer0.getLegendTextPaint(2313);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.getPlotArea());
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertNull(paint0);
      
      Collection collection0 = xYStepAreaRenderer0.getAnnotations();
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.getPlotArea());
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertNotNull(collection0);
      
      boolean boolean0 = xYStepAreaRenderer0.isShapesFilled();
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.getPlotArea());
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertTrue(boolean0);
      
      xYStepAreaRenderer0.setShapesFilled(true);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.isShapesFilled());
      assertFalse(xYStepAreaRenderer0.getPlotArea());
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      
      xYStepAreaRenderer0.setPlotArea(true);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.isShapesFilled());
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      
      XYStepAreaRenderer xYStepAreaRenderer1 = (XYStepAreaRenderer)xYStepAreaRenderer0.clone();
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.isShapesFilled());
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertTrue(xYStepAreaRenderer1.isShapesFilled());
      assertEquals(0.0, xYStepAreaRenderer1.getRangeBase(), 0.01);
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer1.getPlotArea());
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(1, xYStepAreaRenderer1.getPassCount());
      assertTrue(xYStepAreaRenderer1.getDefaultCreateEntities());
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer1.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer1.getShapesVisible());
      assertFalse(xYStepAreaRenderer1.isOutline());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, xYStepAreaRenderer1.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer1.getDefaultSeriesVisible());
      assertFalse(xYStepAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer1.getDefaultItemLabelsVisible());
      assertEquals(2.0, xYStepAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer1.getAutoPopulateSeriesShape());
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertNotSame(xYStepAreaRenderer1, xYStepAreaRenderer0);
      assertTrue(xYStepAreaRenderer1.equals((Object)xYStepAreaRenderer0));
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertNotNull(xYStepAreaRenderer1);
      
      xYStepAreaRenderer0.setPlotArea(true);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.isShapesFilled());
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertTrue(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer1));
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      
      boolean boolean1 = xYStepAreaRenderer0.getShapesVisible();
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.isShapesFilled());
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertTrue(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer1));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertFalse(boolean1);
      
      boolean boolean2 = xYStepAreaRenderer0.isOutline();
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.isShapesFilled());
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertTrue(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertFalse(boolean2);
      
      XYStepAreaRenderer xYStepAreaRenderer2 = new XYStepAreaRenderer();
      assertEquals(2.0, xYStepAreaRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYStepAreaRenderer2.getPassCount());
      assertFalse(xYStepAreaRenderer2.getShapesVisible());
      assertFalse(xYStepAreaRenderer2.isShapesFilled());
      assertTrue(xYStepAreaRenderer2.getDefaultCreateEntities());
      assertTrue(xYStepAreaRenderer2.getPlotArea());
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer2.isOutline());
      assertTrue(xYStepAreaRenderer2.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesShape());
      assertEquals(3, xYStepAreaRenderer2.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepAreaRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer2.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer2.getDefaultSeriesVisible());
      assertEquals(0.0, xYStepAreaRenderer2.getRangeBase(), 0.01);
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer2.getStepPoint(), 0.01);
      assertFalse(xYStepAreaRenderer2.equals((Object)xYStepAreaRenderer0));
      assertFalse(xYStepAreaRenderer2.equals((Object)xYStepAreaRenderer1));
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertNotNull(xYStepAreaRenderer2);
      
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = (StandardXYSeriesLabelGenerator)xYStepAreaRenderer2.getLegendItemLabelGenerator();
      assertEquals(2.0, xYStepAreaRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYStepAreaRenderer2.getPassCount());
      assertFalse(xYStepAreaRenderer2.getShapesVisible());
      assertFalse(xYStepAreaRenderer2.isShapesFilled());
      assertTrue(xYStepAreaRenderer2.getDefaultCreateEntities());
      assertTrue(xYStepAreaRenderer2.getPlotArea());
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer2.isOutline());
      assertTrue(xYStepAreaRenderer2.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesShape());
      assertEquals(3, xYStepAreaRenderer2.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepAreaRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer2.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer2.getDefaultSeriesVisible());
      assertEquals(0.0, xYStepAreaRenderer2.getRangeBase(), 0.01);
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer2.getStepPoint(), 0.01);
      assertNotSame(xYStepAreaRenderer2, xYStepAreaRenderer0);
      assertNotSame(xYStepAreaRenderer2, xYStepAreaRenderer1);
      assertFalse(xYStepAreaRenderer2.equals((Object)xYStepAreaRenderer0));
      assertFalse(xYStepAreaRenderer2.equals((Object)xYStepAreaRenderer1));
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertNotNull(standardXYSeriesLabelGenerator0);
      
      xYStepAreaRenderer0.setLegendItemURLGenerator(standardXYSeriesLabelGenerator0);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.isShapesFilled());
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertEquals(2.0, xYStepAreaRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYStepAreaRenderer2.getPassCount());
      assertFalse(xYStepAreaRenderer2.getShapesVisible());
      assertFalse(xYStepAreaRenderer2.isShapesFilled());
      assertTrue(xYStepAreaRenderer2.getDefaultCreateEntities());
      assertTrue(xYStepAreaRenderer2.getPlotArea());
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer2.isOutline());
      assertTrue(xYStepAreaRenderer2.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesShape());
      assertEquals(3, xYStepAreaRenderer2.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepAreaRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer2.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer2.getDefaultSeriesVisible());
      assertEquals(0.0, xYStepAreaRenderer2.getRangeBase(), 0.01);
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer2.getStepPoint(), 0.01);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer2);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertNotSame(xYStepAreaRenderer2, xYStepAreaRenderer0);
      assertNotSame(xYStepAreaRenderer2, xYStepAreaRenderer1);
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer2));
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer1));
      assertFalse(xYStepAreaRenderer2.equals((Object)xYStepAreaRenderer0));
      assertFalse(xYStepAreaRenderer2.equals((Object)xYStepAreaRenderer1));
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      
      xYStepAreaRenderer0.setShapesFilled(false);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer2);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer2));
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer1));
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      
      xYStepAreaRenderer0.setPlotArea(true);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer2);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer2));
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer1));
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      
      XYStepAreaRenderer xYStepAreaRenderer3 = (XYStepAreaRenderer)xYStepAreaRenderer0.clone();
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertEquals(3, xYStepAreaRenderer3.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer3.isOutline());
      assertFalse(xYStepAreaRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer3.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepAreaRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer3.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer3.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer3.getDefaultSeriesVisible());
      assertEquals(1.0, xYStepAreaRenderer3.getStepPoint(), 0.01);
      assertEquals(1, xYStepAreaRenderer3.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer3.getRangeBase(), 0.01);
      assertFalse(xYStepAreaRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYStepAreaRenderer3.isShapesFilled());
      assertEquals(2.0, xYStepAreaRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer3.getAutoPopulateSeriesStroke());
      assertTrue(xYStepAreaRenderer3.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer3.getShapesVisible());
      assertTrue(xYStepAreaRenderer3.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer3.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer3.getPlotArea());
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer3);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer2);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertNotSame(xYStepAreaRenderer3, xYStepAreaRenderer0);
      assertNotSame(xYStepAreaRenderer3, xYStepAreaRenderer1);
      assertNotSame(xYStepAreaRenderer3, xYStepAreaRenderer2);
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer2));
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer1));
      assertTrue(xYStepAreaRenderer3.equals((Object)xYStepAreaRenderer0));
      assertFalse(xYStepAreaRenderer3.equals((Object)xYStepAreaRenderer1));
      assertFalse(xYStepAreaRenderer3.equals((Object)xYStepAreaRenderer2));
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertNotNull(xYStepAreaRenderer3);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = xYStepAreaRenderer2.getPlot();
      assertEquals(2.0, xYStepAreaRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYStepAreaRenderer2.getPassCount());
      assertFalse(xYStepAreaRenderer2.getShapesVisible());
      assertFalse(xYStepAreaRenderer2.isShapesFilled());
      assertTrue(xYStepAreaRenderer2.getDefaultCreateEntities());
      assertTrue(xYStepAreaRenderer2.getPlotArea());
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer2.isOutline());
      assertTrue(xYStepAreaRenderer2.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesShape());
      assertEquals(3, xYStepAreaRenderer2.getDefaultEntityRadius());
      assertTrue(xYStepAreaRenderer2.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepAreaRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepAreaRenderer2.getDefaultItemLabelsVisible());
      assertTrue(xYStepAreaRenderer2.getDefaultSeriesVisible());
      assertEquals(0.0, xYStepAreaRenderer2.getRangeBase(), 0.01);
      assertFalse(xYStepAreaRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer2.getStepPoint(), 0.01);
      assertNotSame(xYStepAreaRenderer2, xYStepAreaRenderer0);
      assertNotSame(xYStepAreaRenderer2, xYStepAreaRenderer3);
      assertNotSame(xYStepAreaRenderer2, xYStepAreaRenderer1);
      assertFalse(xYStepAreaRenderer2.equals((Object)xYStepAreaRenderer0));
      assertFalse(xYStepAreaRenderer2.equals((Object)xYStepAreaRenderer3));
      assertFalse(xYStepAreaRenderer2.equals((Object)xYStepAreaRenderer1));
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertNull(xYPlot0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = xYStepAreaRenderer0.initialise((Graphics2D) null, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepAreaRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertFalse(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertFalse(xYItemRendererState0.getElementHinting());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer3);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer2);
      assertNotSame(xYStepAreaRenderer0, xYStepAreaRenderer1);
      assertTrue(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer3));
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer2));
      assertFalse(xYStepAreaRenderer0.equals((Object)xYStepAreaRenderer1));
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertNotNull(xYItemRendererState0);
      
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYStepAreaRenderer2.drawItem((Graphics2D) null, xYItemRendererState0, rectangle2D1, (PlotRenderingInfo) null, (XYPlot) null, valueAxis0, valueAxis0, xYDataset1, 10, 500, crosshairState0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      xYStepAreaRenderer0.getLegendTextPaint(0);
      xYStepAreaRenderer0.setSeriesItemLabelPaint(153, (Paint) null, true);
      xYStepAreaRenderer0.isOutline();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      xYStepAreaRenderer0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = xYStepAreaRenderer0.initialise(graphics2D0, (Rectangle2D) null, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYStepAreaRenderer0.drawItem(graphics2D0, xYItemRendererState0, (Rectangle2D) null, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, xYDataset1, 500, (-2763), crosshairState0, 500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepAreaRenderer", e);
      }
  }
}
