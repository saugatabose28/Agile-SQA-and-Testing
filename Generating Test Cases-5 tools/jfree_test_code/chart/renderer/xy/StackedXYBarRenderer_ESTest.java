/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:38:55 GMT 2023
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferDouble;
import java.awt.image.IndexColorModel;
import java.awt.image.MultiPixelPackedSampleModel;
import java.awt.image.Raster;
import java.util.SimpleTimeZone;
import javax.swing.JTree;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYImageAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.labels.IntervalXYToolTipGenerator;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.PolarItemRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.title.ShortTextTitle;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackedXYBarRenderer_ESTest extends StackedXYBarRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      stackedXYBarRenderer0.setDefaultEntityRadius(2245);
      stackedXYBarRenderer0.setShadowXOffset(2245);
      stackedXYBarRenderer0.setRenderAsPercentages(true);
      stackedXYBarRenderer0.getRenderAsPercentages();
      stackedXYBarRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(2.0);
      stackedXYBarRenderer0.getRenderAsPercentages();
      stackedXYBarRenderer0.setShadowYOffset(2.0);
      Object object0 = stackedXYBarRenderer0.clone();
      stackedXYBarRenderer0.equals(object0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getDataset();
      stackedXYBarRenderer0.findRangeBounds((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer((-703.0));
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(xYDataset0).getSeriesCount();
      stackedXYBarRenderer0.setDefaultEntityRadius(4274);
      stackedXYBarRenderer0.annotationChanged((AnnotationChangeEvent) null);
      stackedXYBarRenderer0.findRangeBounds(xYDataset0, true);
      stackedXYBarRenderer0.hashCode();
      stackedXYBarRenderer0.hashCode();
      stackedXYBarRenderer0.hashCode();
      stackedXYBarRenderer0.getRenderAsPercentages();
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stackedXYBarRenderer0.findRangeBounds(xYDataset1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataset$MockitoMock$1859937455 cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYBarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = null;
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      stackedXYBarRenderer0.setAutoPopulateSeriesStroke(false);
      XYItemRendererState xYItemRendererState0 = stackedXYBarRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      stackedXYBarRenderer0.drawRangeMarker(graphics2D1, (XYPlot) null, valueAxis0, marker0, rectangle2D2);
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stackedXYBarRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, valueAxis1, valueAxis1, xYDataset1, 500, (-1439), crosshairState0, 1080);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataset (type org.jfree.data.xy.XYDataset$MockitoMock$1859937455) has wrong type: it is no IntervalXYDataset and it is no TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYBarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer((-1983.2329142383628));
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      stackedXYBarRenderer0.findRangeBounds(timeTableXYDataset0);
      stackedXYBarRenderer0.setRenderAsPercentages(false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(1.0E-4);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      stackedXYBarRenderer0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = stackedXYBarRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stackedXYBarRenderer0.drawItem(graphics2D1, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis1, xYDataset1, 10, 10, crosshairState0, 2333);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataset (type org.jfree.data.xy.XYDataset$MockitoMock$1859937455) has wrong type: it is no IntervalXYDataset and it is no TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYBarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      assertNotNull(stackedXYBarRenderer0);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      
      stackedXYBarRenderer0.setAutoPopulateSeriesFillPaint(true);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYBarRenderer.XYBarRendererState xYBarRenderer_XYBarRendererState0 = (XYBarRenderer.XYBarRendererState)stackedXYBarRenderer0.initialise((Graphics2D) null, rectangle2D0, (XYPlot) null, (XYDataset) null, plotRenderingInfo0);
      assertNotNull(xYBarRenderer_XYBarRendererState0);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0.0, xYBarRenderer_XYBarRendererState0.getG2Base(), 0.01);
      assertEquals(0, xYBarRenderer_XYBarRendererState0.getFirstItemIndex());
      assertFalse(xYBarRenderer_XYBarRendererState0.getElementHinting());
      assertEquals(0, xYBarRenderer_XYBarRendererState0.getLastItemIndex());
      assertTrue(xYBarRenderer_XYBarRendererState0.getProcessVisibleItemsOnly());
      
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stackedXYBarRenderer0.drawItem((Graphics2D) null, xYBarRenderer_XYBarRendererState0, (Rectangle2D) null, plotRenderingInfo1, (XYPlot) null, (ValueAxis) null, (ValueAxis) null, (XYDataset) null, 0, (-951), crosshairState0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYBarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer((-1605.1410349734));
      assertNotNull(stackedXYBarRenderer0);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1605.1410349734), stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      
      boolean boolean0 = stackedXYBarRenderer0.getRenderAsPercentages();
      assertFalse(boolean0);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1605.1410349734), stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      
      stackedXYBarRenderer0.setRenderAsPercentages(true);
      assertTrue(stackedXYBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1605.1410349734), stackedXYBarRenderer0.getMargin(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      
      boolean boolean1 = stackedXYBarRenderer0.getRenderAsPercentages();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(stackedXYBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1605.1410349734), stackedXYBarRenderer0.getMargin(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      
      stackedXYBarRenderer0.setRenderAsPercentages(true);
      assertTrue(stackedXYBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1605.1410349734), stackedXYBarRenderer0.getMargin(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, (double) stackedXYBarRenderer0.ZERO);
      assertNotNull(xYBarDataset0);
      assertTrue(stackedXYBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1605.1410349734), stackedXYBarRenderer0.getMargin(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection1 = (TimeSeriesCollection)xYBarDataset0.getUnderlyingDataset();
      assertNotNull(timeSeriesCollection1);
      assertSame(timeSeriesCollection0, timeSeriesCollection1);
      assertSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(stackedXYBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1605.1410349734), stackedXYBarRenderer0.getMargin(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(timeSeriesCollection1.getNotify());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      
      Range range0 = stackedXYBarRenderer0.findRangeBounds(timeSeriesCollection1);
      assertNotNull(range0);
      assertSame(timeSeriesCollection0, timeSeriesCollection1);
      assertSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(stackedXYBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1605.1410349734), stackedXYBarRenderer0.getMargin(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(timeSeriesCollection1.getNotify());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = (-642);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, (-17), byteArray0, (byte)0, false, (-642));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      assertNotNull(stackedXYBarRenderer0);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      
      CrosshairState crosshairState0 = new CrosshairState(false);
      assertNotNull(crosshairState0);
      assertEquals(0.0, crosshairState0.getCrosshairY(), 0.01);
      assertEquals(0.0, crosshairState0.getCrosshairX(), 0.01);
      assertEquals(0, crosshairState0.getDatasetIndex());
      assertEquals(0.0, crosshairState0.getAnchorY(), 0.01);
      assertEquals(0.0, crosshairState0.getAnchorX(), 0.01);
      assertEquals(0.0, crosshairState0.getCrosshairDistance(), 0.01);
      
      double double0 = (-145.009);
      int int0 = 0;
      double double1 = 1.0;
      float[][] floatArray0 = new float[8][8];
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) 0;
      floatArray1[4] = (float) 0;
      floatArray1[5] = (float) 0;
      floatArray1[6] = (float) 0;
      floatArray1[7] = 1.0F;
      floatArray1[8] = (float) 0;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1.0F;
      floatArray2[1] = 1.0F;
      floatArray2[2] = (float) 0;
      floatArray2[3] = (float) 0;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[3];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 1.0F;
      floatArray4[1] = (float) 0;
      floatArray4[2] = 1.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 4460.846F;
      floatArray5[1] = 1.0F;
      floatArray5[2] = 1.0F;
      floatArray5[3] = (float) 0;
      floatArray5[4] = 2611.42F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray4));
      
      floatArray6[0] = (float) 0;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[6];
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray5));
      
      floatArray7[0] = 1.0F;
      floatArray7[1] = 1.0F;
      floatArray7[2] = 2611.42F;
      floatArray7[3] = (-3242.509F);
      floatArray7[4] = 1.0F;
      floatArray7[5] = (-1.0F);
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[5];
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray3));
      assertFalse(floatArray8.equals((Object)floatArray5));
      assertFalse(floatArray8.equals((Object)floatArray2));
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray7));
      
      floatArray8[0] = (-1.0F);
      floatArray8[1] = (float) 0;
      floatArray8[2] = (-3242.509F);
      floatArray8[3] = (-3242.509F);
      floatArray8[4] = 1.0E-9F;
      floatArray0[7] = floatArray8;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(102003.0);
      assertNotNull(defaultValueDataset0);
      assertTrue(defaultValueDataset0.getNotify());
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertNotNull(thermometerPlot0);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(numberAxis0);
      assertTrue(defaultValueDataset0.getNotify());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, numberAxis0, numberAxis0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      assertNotNull(stackedXYBarRenderer0);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      assertEquals(8.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-4.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-4.0), rectangle2D_Double0.x, 0.01);
      assertEquals(8.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(4.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-4.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-4.0), rectangle2D_Double0.getMinX(), 0.01);
      
      stackedXYBarRenderer0.setDefaultLegendShape(rectangle2D_Double0);
      assertEquals(8.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-4.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-4.0), rectangle2D_Double0.x, 0.01);
      assertEquals(8.0, rectangle2D_Double0.width, 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-4.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-4.0), rectangle2D_Double0.getMinX(), 0.01);
      
      stackedXYBarRenderer0.setItemLabelAnchorOffset(25.0);
      assertEquals(25.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      
      stackedXYBarRenderer0.setAutoPopulateSeriesPaint(true);
      assertEquals(25.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      
      int int0 = 0;
      Color color0 = (Color)stackedXYBarRenderer0.lookupSeriesOutlinePaint(0);
      assertNotNull(color0);
      assertEquals(25.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      
      stackedXYBarRenderer0.setShadowXOffset(0);
      assertEquals(25.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertEquals(0.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      
      int int1 = stackedXYBarRenderer0.hashCode();
      assertFalse(int1 == int0);
      assertEquals(25.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertEquals(0.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        stackedXYBarRenderer0.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.AbstractXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(0.0);
      assertNotNull(stackedXYBarRenderer0);
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      
      double double0 = 2681.0;
      Number[][] numberArray0 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(multiplePiePlot0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(0, numberArray0.length);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      
      int int0 = 0;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, 1, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (1) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      assertNotNull(stackedXYBarRenderer0);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      
      boolean boolean0 = stackedXYBarRenderer0.getRenderAsPercentages();
      assertFalse(boolean0);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultCategoryDataset0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(multiplePiePlot0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertFalse(multiplePiePlot0.fetchElementHintingFlag());
      assertEquals(TableOrder.BY_COLUMN, multiplePiePlot0.getDataExtractOrder());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNull(jFreeChart0.getID());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      
      Range range0 = stackedXYBarRenderer0.findDomainBounds(defaultIntervalXYDataset0);
      assertNull(range0);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      ChartRenderingInfo chartRenderingInfo0 = plotRenderingInfo0.getOwner();
      assertNull(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 0, 2136, (ChartRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 2136
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      assertNotNull(stackedXYBarRenderer0);
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      
      stackedXYBarRenderer0.setRenderAsPercentages(false);
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertNotNull(xYAreaRenderer0);
      assertFalse(xYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertTrue(xYAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertEquals(2.0, xYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYAreaRenderer0.isOutline());
      assertTrue(xYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer0.getUseFillPaint());
      assertTrue(xYAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer0.getPlotArea());
      assertEquals(1, xYAreaRenderer0.getPassCount());
      assertFalse(xYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer0.getAutoPopulateSeriesStroke());
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.height);
      assertNotNull(defaultCaret0);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      
      XYPlot xYPlot0 = stackedXYBarRenderer0.getPlot();
      assertNull(xYPlot0);
      assertFalse(stackedXYBarRenderer0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertTrue(stackedXYBarRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedXYBarRenderer0.getDefaultCreateEntities());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      XYItemRendererState xYItemRendererState0 = xYAreaRenderer0.initialise((Graphics2D) null, defaultCaret0, (XYPlot) null, (XYDataset) null, plotRenderingInfo0);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.height);
      assertNotNull(xYItemRendererState0);
      assertFalse(xYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertTrue(xYAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertEquals(2.0, xYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer0.getDefaultCreateEntities());
      assertFalse(xYAreaRenderer0.isOutline());
      assertTrue(xYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer0.getUseFillPaint());
      assertTrue(xYAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer0.getPlotArea());
      assertEquals(1, xYAreaRenderer0.getPassCount());
      assertFalse(xYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertFalse(xYItemRendererState0.getElementHinting());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertFalse(xYItemRendererState0.getProcessVisibleItemsOnly());
      
      PolarPlot polarPlot0 = new PolarPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(polarPlot0);
      assertFalse(polarPlot0.isDomainZoomable());
      assertEquals(1, polarPlot0.getDatasetCount());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, polarPlot0.getAxisCount());
      assertTrue(polarPlot0.isOutlineVisible());
      assertFalse(polarPlot0.isSubplot());
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertEquals(20, polarPlot0.getMargin());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isNotify());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      
      ValueAxis valueAxis0 = polarPlot0.getAxis();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(valueAxis0);
      assertFalse(polarPlot0.isDomainZoomable());
      assertEquals(1, polarPlot0.getDatasetCount());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, polarPlot0.getAxisCount());
      assertTrue(polarPlot0.isOutlineVisible());
      assertFalse(polarPlot0.isSubplot());
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertEquals(20, polarPlot0.getMargin());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isNotify());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      
      PolarItemRenderer polarItemRenderer0 = polarPlot0.getRenderer(1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(polarItemRenderer0);
      assertFalse(polarPlot0.isDomainZoomable());
      assertEquals(1, polarPlot0.getDatasetCount());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(polarPlot0.isCounterClockwise());
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, polarPlot0.getAxisCount());
      assertTrue(polarPlot0.isOutlineVisible());
      assertFalse(polarPlot0.isSubplot());
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertEquals(20, polarPlot0.getMargin());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertNull(polarPlot0.getNoDataMessage());
      assertTrue(polarPlot0.isNotify());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      
      PolarPlot polarPlot1 = new PolarPlot((XYDataset) null, (ValueAxis) null, (PolarItemRenderer) null);
      assertTrue(polarPlot1.equals((Object)polarPlot0));
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertNotNull(polarPlot1);
      assertFalse(polarPlot1.isSubplot());
      assertEquals(15, polarPlot1.getBackgroundImageAlignment());
      assertTrue(polarPlot1.isRangeZoomable());
      assertEquals((-90.0), polarPlot1.getAngleOffset(), 0.01);
      assertEquals(1, polarPlot1.getAxisCount());
      assertEquals(20, polarPlot1.getMargin());
      assertTrue(polarPlot1.isRadiusGridlinesVisible());
      assertEquals(1, polarPlot1.getDatasetCount());
      assertFalse(polarPlot1.isDomainZoomable());
      assertTrue(polarPlot1.isAngleGridlinesVisible());
      assertEquals(1.0F, polarPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot1.isNotify());
      assertEquals(1.0F, polarPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(polarPlot1.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot1.isAngleLabelsVisible());
      assertFalse(polarPlot1.isCounterClockwise());
      assertEquals(0.5F, polarPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot1.isOutlineVisible());
      assertNull(polarPlot1.getNoDataMessage());
      assertFalse(polarPlot1.fetchElementHintingFlag());
      
      ValueAxis valueAxis1 = polarPlot1.getAxis(10);
      assertTrue(polarPlot1.equals((Object)polarPlot0));
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertNull(valueAxis1);
      assertNotSame(polarPlot1, polarPlot0);
      assertFalse(polarPlot1.isSubplot());
      assertEquals(15, polarPlot1.getBackgroundImageAlignment());
      assertTrue(polarPlot1.isRangeZoomable());
      assertEquals((-90.0), polarPlot1.getAngleOffset(), 0.01);
      assertEquals(1, polarPlot1.getAxisCount());
      assertEquals(20, polarPlot1.getMargin());
      assertTrue(polarPlot1.isRadiusGridlinesVisible());
      assertEquals(1, polarPlot1.getDatasetCount());
      assertFalse(polarPlot1.isDomainZoomable());
      assertTrue(polarPlot1.isAngleGridlinesVisible());
      assertEquals(1.0F, polarPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot1.isNotify());
      assertEquals(1.0F, polarPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(polarPlot1.isRadiusMinorGridlinesVisible());
      assertTrue(polarPlot1.isAngleLabelsVisible());
      assertFalse(polarPlot1.isCounterClockwise());
      assertEquals(0.5F, polarPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot1.isOutlineVisible());
      assertNull(polarPlot1.getNoDataMessage());
      assertFalse(polarPlot1.fetchElementHintingFlag());
      
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      assertNotNull(categoryCrosshairState0);
      assertEquals(0, categoryCrosshairState0.getDatasetIndex());
      assertEquals(0.0, categoryCrosshairState0.getCrosshairY(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairX(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getAnchorY(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getAnchorX(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairDistance(), 0.01);
      
      // Undeclared exception!
      try { 
        stackedXYBarRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, defaultCaret0, plotRenderingInfo0, (XYPlot) null, (ValueAxis) null, (ValueAxis) null, (XYDataset) null, 1510, 10, categoryCrosshairState0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYBarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      stackedXYBarRenderer0.getPassCount();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      stackedXYBarRenderer0.equals(defaultTableXYDataset0);
      stackedXYBarRenderer0.hashCode();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("&LW!~c#%L.&W}");
      jFreeChart0.removeSubtitle(shortTextTitle0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2848, 1.0, (-4490.901813943), (ChartRenderingInfo) null);
      stackedXYBarRenderer0.setLegendBar(combinedDomainCategoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(2848);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(1.0F, (-5.0F), 0.0F, 15);
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      XYItemRendererState xYItemRendererState0 = xYSplineRenderer0.initialise(graphics2D0, rectangle2D0, combinedRangeXYPlot0, defaultTableXYDataset0, (PlotRenderingInfo) null);
      combinedRangeXYPlot0.setRangeCrosshairPaint(combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_PAINT);
      CrosshairState crosshairState0 = new CrosshairState(true);
      // Undeclared exception!
      try { 
        stackedXYBarRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D0, (PlotRenderingInfo) null, combinedRangeXYPlot0, logAxis0, logAxis0, defaultTableXYDataset0, 8, 0, crosshairState0, (-1479));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      int int0 = 1800;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(1800, 1800, 1800);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 1800
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }
}
