/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:16:00 GMT 2023
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSplineRenderer_ESTest extends XYSplineRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      xYSplineRenderer0.equals(xYSplineRenderer0);
      // Undeclared exception!
      try { 
        XYSplineRenderer.FillType.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jfree.chart.renderer.xy.XYSplineRenderer.FillType.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(275);
      XYSplineRenderer.FillType xYSplineRenderer_FillType0 = XYSplineRenderer.FillType.TO_LOWER_BOUND;
      XYSplineRenderer xYSplineRenderer1 = new XYSplineRenderer(1891, xYSplineRenderer_FillType0);
      xYSplineRenderer0.equals(xYSplineRenderer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      xYSplineRenderer0.clearSeriesStrokes(true);
      xYSplineRenderer0.setUseFillPaint(true);
      // Undeclared exception!
      try { 
        xYSplineRenderer0.setPrecision(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires p > 0.
         //
         verifyException("org.jfree.chart.renderer.xy.XYSplineRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      XYSplineRenderer xYSplineRenderer1 = new XYSplineRenderer(3);
      xYSplineRenderer0.equals(xYSplineRenderer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(2009);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      xYSplineRenderer0.getPlot();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYSplineRenderer0.drawDomainMarker(graphics2D0, (XYPlot) null, valueAxis0, marker0, rectangle2D0);
      xYSplineRenderer0.getFillType();
      GradientPaintTransformer gradientPaintTransformer0 = xYSplineRenderer0.getGradientPaintTransformer();
      xYSplineRenderer0.setGradientPaintTransformer(gradientPaintTransformer0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYSplineRenderer0.initialise(graphics2D1, rectangle2D1, (XYPlot) null, (XYDataset) null, plotRenderingInfo0);
      xYSplineRenderer0.setPrecision(2009);
      XYSplineRenderer.FillType xYSplineRenderer_FillType0 = XYSplineRenderer.FillType.TO_UPPER_BOUND;
      xYSplineRenderer0.setFillType(xYSplineRenderer_FillType0);
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYSplineRenderer.XYSplineState xYSplineRenderer_XYSplineState0 = new XYSplineRenderer.XYSplineState(plotRenderingInfo1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      xYSplineRenderer_XYSplineState0.fillArea = null;
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYSplineRenderer0.drawPrimaryLineAsPath(xYSplineRenderer_XYSplineState0, graphics2D2, (XYPlot) null, (XYDataset) null, 1499, 2009, 1499, valueAxis1, valueAxis1, rectangle2D2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYSplineRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = (-3962);
      XYSplineRenderer xYSplineRenderer0 = null;
      try {
        xYSplineRenderer0 = new XYSplineRenderer((-3962));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires precision > 0.
         //
         verifyException("org.jfree.chart.renderer.xy.XYSplineRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYSplineRenderer.FillType xYSplineRenderer_FillType0 = XYSplineRenderer.FillType.TO_LOWER_BOUND;
      XYSplineRenderer xYSplineRenderer0 = null;
      try {
        xYSplineRenderer0 = new XYSplineRenderer((-2116), xYSplineRenderer_FillType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires precision > 0.
         //
         verifyException("org.jfree.chart.renderer.xy.XYSplineRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      xYSplineRenderer0.lookupSeriesOutlineStroke((-1246));
      xYSplineRenderer0.getGradientPaintTransformer();
      xYSplineRenderer0.getFillType();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = null;
      try {
        xYSplineRenderer0 = new XYSplineRenderer(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires precision > 0.
         //
         verifyException("org.jfree.chart.renderer.xy.XYSplineRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      XYSplineRenderer xYSplineRenderer1 = new XYSplineRenderer(3);
      xYSplineRenderer0.getPlot();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      xYSplineRenderer0.equals(xYSplineRenderer1);
      xYSplineRenderer0.getPrecision();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = null;
      try {
        xYSplineRenderer0 = new XYSplineRenderer((-493));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires precision > 0.
         //
         verifyException("org.jfree.chart.renderer.xy.XYSplineRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYSplineRenderer.XYSplineState xYSplineRenderer_XYSplineState0 = new XYSplineRenderer.XYSplineState(plotRenderingInfo0);
      xYSplineRenderer0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYSplineRenderer0.drawPrimaryLineAsPath(xYSplineRenderer_XYSplineState0, (Graphics2D) null, (XYPlot) null, xYDataset0, 1105, 10, 4, valueAxis0, valueAxis0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYSplineRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(3);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYSplineRenderer.XYSplineState xYSplineRenderer_XYSplineState0 = new XYSplineRenderer.XYSplineState(plotRenderingInfo0);
      xYSplineRenderer0.equals(xYSplineRenderer_XYSplineState0);
      // Undeclared exception!
      try { 
        xYSplineRenderer0.setPrecision((-162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires p > 0.
         //
         verifyException("org.jfree.chart.renderer.xy.XYSplineRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      GradientPaintTransformer gradientPaintTransformer0 = xYSplineRenderer0.getGradientPaintTransformer();
      xYSplineRenderer0.setGradientPaintTransformer(gradientPaintTransformer0);
      xYSplineRenderer0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYSplineRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      xYSplineRenderer0.setAutoPopulateSeriesFillPaint(false);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYSplineRenderer0.equals((Object) null);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo2 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYSplineRenderer0.equals((Object) null);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo3 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo4 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYSplineRenderer0.getFillType();
      xYSplineRenderer0.getPrecision();
      xYSplineRenderer0.getGradientPaintTransformer();
      // Undeclared exception!
      try { 
        XYSplineRenderer.FillType.valueOf("AxsEntiy: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jfree.chart.renderer.xy.XYSplineRenderer.FillType.AxsEntiy: 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYSplineRenderer.FillType.values();
      XYSplineRenderer.FillType xYSplineRenderer_FillType0 = XYSplineRenderer.FillType.TO_LOWER_BOUND;
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(14, xYSplineRenderer_FillType0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYSplineRenderer.FillType xYSplineRenderer_FillType1 = XYSplineRenderer.FillType.TO_LOWER_BOUND;
      XYSplineRenderer xYSplineRenderer1 = new XYSplineRenderer(1153, xYSplineRenderer_FillType1);
      xYSplineRenderer1.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYSplineRenderer0.initialise(graphics2D0, (Rectangle2D) null, (XYPlot) null, xYDataset0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(9);
      GradientPaintTransformer gradientPaintTransformer0 = xYSplineRenderer0.getGradientPaintTransformer();
      xYSplineRenderer0.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      xYSplineRenderer0.lookupLegendShape(9);
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYSplineRenderer0.drawDomainMarker(graphics2D0, (XYPlot) null, valueAxis0, marker0, rectangle2D0);
      xYSplineRenderer0.setDefaultShapesVisible(false);
      xYSplineRenderer0.setPrecision(9);
      xYSplineRenderer0.setGradientPaintTransformer(gradientPaintTransformer0);
      xYSplineRenderer0.getGradientPaintTransformer();
      Object object0 = xYSplineRenderer0.clone();
      xYSplineRenderer0.equals(object0);
      XYSplineRenderer.FillType[] xYSplineRenderer_FillTypeArray0 = XYSplineRenderer.FillType.values();
      xYSplineRenderer0.getPrecision();
      xYSplineRenderer0.equals(object0);
      XYSplineRenderer.FillType xYSplineRenderer_FillType0 = XYSplineRenderer.FillType.TO_LOWER_BOUND;
      xYSplineRenderer0.setFillType(xYSplineRenderer_FillType0);
      XYSplineRenderer.FillType[] xYSplineRenderer_FillTypeArray1 = XYSplineRenderer.FillType.values();
      assertFalse(xYSplineRenderer_FillTypeArray1.equals((Object)xYSplineRenderer_FillTypeArray0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYSplineRenderer.XYSplineState xYSplineRenderer_XYSplineState0 = new XYSplineRenderer.XYSplineState(plotRenderingInfo0);
      assertTrue(xYSplineRenderer_XYSplineState0.getProcessVisibleItemsOnly());
  }
}
