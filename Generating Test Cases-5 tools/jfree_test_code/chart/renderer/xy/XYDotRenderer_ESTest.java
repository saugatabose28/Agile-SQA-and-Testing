/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:02:28 GMT 2023
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.SystemColor;
import java.awt.TexturePaint;
import java.awt.geom.Arc2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.math.BigInteger;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JTabbedPane;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.XYSeriesLabelGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.xy.AbstractXYItemRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.XYDotRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.Size2D;
import org.jfree.data.Range;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.time.Minute;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYDotRenderer_ESTest extends XYDotRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      Object object0 = xYDotRenderer0.clone();
      xYDotRenderer0.equals(object0);
      xYDotRenderer0.setAutoPopulateSeriesOutlineStroke(false);
      xYDotRenderer0.setDotHeight(1336);
      xYDotRenderer0.equals(object0);
      // Undeclared exception!
      try { 
        xYDotRenderer0.setDotHeight(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires h > 0.
         //
         verifyException("org.jfree.chart.renderer.xy.XYDotRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      xYDotRenderer0.setAutoPopulateSeriesPaint(false);
      xYDotRenderer0.getLegendShape();
      xYDotRenderer0.getDotHeight();
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      XYItemRendererState xYItemRendererState0 = samplingXYLineRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedRangeXYPlot0, defaultTableXYDataset0, (PlotRenderingInfo) null);
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", numberAxis0.DEFAULT_RANGE);
      CrosshairState crosshairState0 = new CrosshairState();
      // Undeclared exception!
      try { 
        xYDotRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, (Rectangle2D) null, (PlotRenderingInfo) null, combinedRangeXYPlot1, numberAxis0, moduloAxis0, defaultTableXYDataset0, (-1346), 10, crosshairState0, 500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(xYDotRenderer0, false);
      xYDotRenderer0.notifyListeners(rendererChangeEvent0);
      Shape shape0 = xYDotRenderer0.getLegendShape();
      xYDotRenderer0.equals(shape0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      int int0 = 0;
      xYDotRenderer0.getLegendItem((-1), 0);
      Object object0 = xYDotRenderer0.clone();
      xYDotRenderer0.equals(object0);
      int int1 = 260;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)34;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 268, byteArray0, byteArray0, byteArray1, (byte)100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYDotRenderer0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = xYDotRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(xYDataset1).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset1).getYValue(anyInt() , anyInt());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYDotRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, (ValueAxis) null, (ValueAxis) null, xYDataset1, 10, 10, crosshairState0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYDotRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      int int0 = 0;
      xYDotRenderer0.clearSeriesStrokes(false);
      // Undeclared exception!
      try { 
        xYDotRenderer0.setDotWidth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires w > 0.
         //
         verifyException("org.jfree.chart.renderer.xy.XYDotRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      xYDotRenderer0.getSeriesShape(33);
      // Undeclared exception!
      try { 
        xYDotRenderer0.setLegendShape((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      int int0 = 0;
      Font font0 = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
      XYDotRenderer xYDotRenderer1 = new XYDotRenderer();
      Paint paint0 = xYDotRenderer1.getDefaultFillPaint();
      xYDotRenderer0.setLegendTextPaint(43, paint0);
      xYDotRenderer0.setDefaultItemLabelFont(font0, true);
      xYDotRenderer0.lookupLegendTextPaint(43);
      // Undeclared exception!
      try { 
        xYDotRenderer0.setDotHeight(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires h > 0.
         //
         verifyException("org.jfree.chart.renderer.xy.XYDotRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertNotNull(xYDotRenderer0);
      
      XYDotRenderer xYDotRenderer1 = new XYDotRenderer();
      assertTrue(xYDotRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer1.getDefaultItemLabelsVisible());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYDotRenderer1.getPassCount());
      assertTrue(xYDotRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer1.getDefaultEntityRadius());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer1.getDefaultCreateEntities());
      assertEquals(1, xYDotRenderer1.getDotHeight());
      assertEquals(2.0, xYDotRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYDotRenderer1.getDotWidth());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisible());
      assertNotNull(xYDotRenderer1);
      assertTrue(xYDotRenderer1.equals((Object)xYDotRenderer0));
      
      boolean boolean0 = xYDotRenderer0.equals(xYDotRenderer1);
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisibleInLegend());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer1.getDefaultItemLabelsVisible());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYDotRenderer1.getPassCount());
      assertTrue(xYDotRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer1.getDefaultEntityRadius());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer1.getDefaultCreateEntities());
      assertEquals(1, xYDotRenderer1.getDotHeight());
      assertEquals(2.0, xYDotRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYDotRenderer1.getDotWidth());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer0.equals((Object)xYDotRenderer1));
      assertTrue(xYDotRenderer1.equals((Object)xYDotRenderer0));
      assertTrue(boolean0);
      assertNotSame(xYDotRenderer0, xYDotRenderer1);
      assertNotSame(xYDotRenderer1, xYDotRenderer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertNotNull(xYDotRenderer0);
      
      int int0 = xYDotRenderer0.getDotHeight();
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, int0);
      
      int int1 = 0;
      Color color0 = (Color)xYDotRenderer0.lookupSeriesOutlinePaint(1999);
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertNotNull(color0);
      
      // Undeclared exception!
      try { 
        xYDotRenderer0.setDotWidth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires w > 0.
         //
         verifyException("org.jfree.chart.renderer.xy.XYDotRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertNotNull(xYDotRenderer0);
      
      String string0 = ",[8Rifovm+}'Zyx";
      Minute minute0 = null;
      try {
        minute0 = new Minute(0, 0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertNotNull(xYDotRenderer0);
      
      xYDotRenderer0.setPlot((XYPlot) null);
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      
      xYDotRenderer0.setDotHeight(1633);
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1633, xYDotRenderer0.getDotHeight());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      
      Size2D size2D0 = new Size2D(265.3971366984, 0.0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(265.3971366984, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(265.3971366984, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, 1633, 1633, rectangleAnchor0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(265.3971366984, size2D0.width, 0.01);
      assertEquals(1633.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1633.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(265.3971366984, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(265.3971366984, size2D0.getWidth(), 0.01);
      assertEquals(1765.6985683492, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1633.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1633.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1633.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1898.3971366984001, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1633.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Arc2D.Double arc2D_Double0 = null;
      try {
        arc2D_Double0 = new Arc2D.Double(rectangle2D_Double0, 0.0, 1633, (-815));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid type for Arc: -815
         //
         verifyException("java.awt.geom.Arc2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(xYDotRenderer0);
      
      GeneralPath generalPath0 = new GeneralPath(xYDotRenderer0.DEFAULT_SHAPE);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      generalPath0.quadTo((float) 2014, (float) 2014, 3909.5137F, 3909.5137F);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, generalPath0.getWindingRule());
      
      AbstractXYItemRenderer.lineTo(generalPath0, 1546.7230978237, (-180.0));
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, generalPath0.getWindingRule());
      
      BasicStroke basicStroke0 = (BasicStroke)xYDotRenderer0.lookupSeriesStroke(2014);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      Paint paint0 = xYDotRenderer0.lookupLegendTextPaint(0);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNull(paint0);
      
      LegendItem legendItem0 = xYDotRenderer0.getLegendItem(19, 19);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNull(legendItem0);
      
      int int0 = xYDotRenderer0.getDotHeight();
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, int0);
      
      xYDotRenderer0.setDotHeight(1);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertNotNull(thermometerPlot0);
      
      Font font0 = thermometerPlot0.getValueFont();
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1, font0.getStyle());
      assertEquals(16.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(16, font0.getSize());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertNotNull(font0);
      
      xYDotRenderer0.setDefaultLegendTextFont(font0);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.fetchElementHintingFlag());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1, font0.getStyle());
      assertEquals(16.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(16, font0.getSize());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)xYDotRenderer0.getLegendShape();
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)xYDotRenderer0.getLegendShape();
      assertEquals(6.0, rectangle2D_Double1.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double1.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double1.x, 0.01);
      assertEquals(6.0, rectangle2D_Double1.height, 0.01);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double1.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYDotRenderer0);
      
      int int0 = xYDotRenderer0.getDotHeight();
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        xYDotRenderer0.setDotHeight((-82));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires h > 0.
         //
         verifyException("org.jfree.chart.renderer.xy.XYDotRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYDotRenderer0);
      
      CrosshairState crosshairState0 = new CrosshairState();
      assertEquals(0.0, crosshairState0.getAnchorY(), 0.01);
      assertEquals(0.0, crosshairState0.getAnchorX(), 0.01);
      assertEquals(0.0, crosshairState0.getCrosshairDistance(), 0.01);
      assertEquals(0.0, crosshairState0.getCrosshairY(), 0.01);
      assertEquals(0.0, crosshairState0.getCrosshairX(), 0.01);
      assertEquals(0, crosshairState0.getDatasetIndex());
      assertNotNull(crosshairState0);
      
      int int0 = 0;
      crosshairState0.updateCrosshairX((-1.7976931348623157E308), (double) xYDotRenderer0.ZERO, 0);
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, crosshairState0.getAnchorY(), 0.01);
      assertEquals(0.0, crosshairState0.getAnchorX(), 0.01);
      assertEquals(0.0, crosshairState0.getCrosshairDistance(), 0.01);
      assertEquals(0.0, crosshairState0.getCrosshairY(), 0.01);
      assertEquals(0.0, crosshairState0.getCrosshairX(), 0.01);
      assertEquals(0, crosshairState0.getDatasetIndex());
      
      int int1 = (-4687);
      PolarPlot polarPlot0 = new PolarPlot();
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(polarPlot0.isNotify());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertEquals(1, polarPlot0.getDatasetCount());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(20, polarPlot0.getMargin());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertFalse(polarPlot0.isSubplot());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertEquals(1, polarPlot0.getAxisCount());
      assertTrue(polarPlot0.isOutlineVisible());
      assertFalse(polarPlot0.isCounterClockwise());
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(polarPlot0);
      
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-90.0), PolarPlot.DEFAULT_ANGLE_OFFSET, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(polarPlot0.isNotify());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isRadiusMinorGridlinesVisible());
      assertEquals(1, polarPlot0.getDatasetCount());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(20, polarPlot0.getMargin());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertFalse(polarPlot0.isSubplot());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals((-90.0), polarPlot0.getAngleOffset(), 0.01);
      assertEquals(1, polarPlot0.getAxisCount());
      assertTrue(polarPlot0.isOutlineVisible());
      assertFalse(polarPlot0.isCounterClockwise());
      assertFalse(polarPlot0.fetchElementHintingFlag());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(plotOrientation0.isVertical());
      assertTrue(plotOrientation0.isHorizontal());
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      // Undeclared exception!
      try { 
        xYDotRenderer0.updateCrosshairValues(crosshairState0, 3.4028234663852886E38, 3.4028234663852886E38, (-4687), 99.0, (-4687), plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.AbstractXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(xYDotRenderer0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxis(1500);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(valueAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.fetchElementHintingFlag());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertNotNull(combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      
      PlotOrientation plotOrientation0 = combinedDomainXYPlot1.getOrientation();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.fetchElementHintingFlag());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(plotOrientation0.isVertical());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertFalse(plotOrientation0.isHorizontal());
      assertNotNull(plotOrientation0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      xYDotRenderer0.updateCrosshairValues((CrosshairState) null, 0, 0, 16777215, 2.0, (-355.953), plotOrientation0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.fetchElementHintingFlag());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(plotOrientation0.isVertical());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertFalse(plotOrientation0.isHorizontal());
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertNotNull(color0);
      
      xYDotRenderer0.setLegendTextPaint(0, color0);
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      
      Shape shape0 = xYDotRenderer0.getLegendShape(768);
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNull(shape0);
      
      int int0 = xYDotRenderer0.getDotWidth();
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, int0);
      
      LegendItem legendItem0 = xYDotRenderer0.getLegendItem((-3520), 365);
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertNotNull(xYDotRenderer0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(xYDataset0).getSeriesCount();
      Range range0 = xYDotRenderer0.findDomainBounds(xYDataset0);
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertNull(range0);
      
      int int0 = (-3715);
      GeneralPath generalPath0 = null;
      try {
        generalPath0 = new GeneralPath((-3715));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // winding rule must be WIND_EVEN_ODD or WIND_NON_ZERO
         //
         verifyException("java.awt.geom.Path2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(xYDotRenderer0);
      
      int int0 = xYDotRenderer0.getDotWidth();
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, int0);
      
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)xYDotRenderer0.lookupLegendShape(1);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      xYDotRenderer0.addEntity(entityCollection0, rectangle2D_Double0, xYDataset0, 0, (-1855), 1, (-1855));
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = xYDotRenderer0.getPlot();
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertNull(xYPlot0);
      
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = xYDotRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset1, plotRenderingInfo0);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertFalse(xYItemRendererState0.getElementHinting());
      assertNotNull(xYItemRendererState0);
      
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(xYDataset2).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset2).getYValue(anyInt() , anyInt());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYDotRenderer0.drawItem(graphics2D0, xYItemRendererState0, (Rectangle2D) null, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, xYDataset2, 0, 1, crosshairState0, 500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYDotRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(xYDotRenderer0);
      
      XYDotRenderer xYDotRenderer1 = new XYDotRenderer();
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYDotRenderer1.getPassCount());
      assertTrue(xYDotRenderer1.getDefaultCreateEntities());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer1.getDotHeight());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer1.getDefaultEntityRadius());
      assertFalse(xYDotRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer1.getDotWidth());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesPaint());
      assertNotNull(xYDotRenderer1);
      assertTrue(xYDotRenderer1.equals((Object)xYDotRenderer0));
      
      xYDotRenderer1.setDefaultLegendTextPaint(xYDotRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYDotRenderer1.getPassCount());
      assertTrue(xYDotRenderer1.getDefaultCreateEntities());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer1.getDotHeight());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer1.getDefaultEntityRadius());
      assertFalse(xYDotRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer1.getDotWidth());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(xYDotRenderer0.equals((Object)xYDotRenderer1));
      assertFalse(xYDotRenderer1.equals((Object)xYDotRenderer0));
      assertNotSame(xYDotRenderer0, xYDotRenderer1);
      assertNotSame(xYDotRenderer1, xYDotRenderer0);
      
      boolean boolean0 = xYDotRenderer0.equals(xYDotRenderer1);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYDotRenderer1.getPassCount());
      assertTrue(xYDotRenderer1.getDefaultCreateEntities());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer1.getDotHeight());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer1.getDefaultEntityRadius());
      assertFalse(xYDotRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer1.getDotWidth());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(xYDotRenderer0.equals((Object)xYDotRenderer1));
      assertFalse(xYDotRenderer1.equals((Object)xYDotRenderer0));
      assertFalse(boolean0);
      assertNotSame(xYDotRenderer0, xYDotRenderer1);
      assertNotSame(xYDotRenderer1, xYDotRenderer0);
      
      int int0 = xYDotRenderer1.getDotHeight();
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYDotRenderer1.getPassCount());
      assertTrue(xYDotRenderer1.getDefaultCreateEntities());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer1.getDotHeight());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer1.getDefaultEntityRadius());
      assertFalse(xYDotRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer1.getDotWidth());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(xYDotRenderer1.equals((Object)xYDotRenderer0));
      assertEquals(1, int0);
      assertNotSame(xYDotRenderer1, xYDotRenderer0);
      
      XYDotRenderer xYDotRenderer2 = (XYDotRenderer)xYDotRenderer0.clone();
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDotRenderer2.getDefaultSeriesVisibleInLegend());
      assertFalse(xYDotRenderer2.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer2.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer2.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer2.getPassCount());
      assertTrue(xYDotRenderer2.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDotRenderer2.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYDotRenderer2.getDefaultEntityRadius());
      assertTrue(xYDotRenderer2.getAutoPopulateSeriesStroke());
      assertTrue(xYDotRenderer2.getDefaultCreateEntities());
      assertEquals(1, xYDotRenderer2.getDotHeight());
      assertEquals(2.0, xYDotRenderer2.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer2.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer2.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer2.getDotWidth());
      assertFalse(xYDotRenderer2.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYDotRenderer2);
      assertFalse(xYDotRenderer0.equals((Object)xYDotRenderer1));
      assertFalse(xYDotRenderer2.equals((Object)xYDotRenderer1));
      assertTrue(xYDotRenderer2.equals((Object)xYDotRenderer0));
      assertNotSame(xYDotRenderer0, xYDotRenderer2);
      assertNotSame(xYDotRenderer0, xYDotRenderer1);
      assertNotSame(xYDotRenderer2, xYDotRenderer1);
      assertNotSame(xYDotRenderer2, xYDotRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)xYDotRenderer1.getLegendShape();
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYDotRenderer1.getPassCount());
      assertTrue(xYDotRenderer1.getDefaultCreateEntities());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer1.getDotHeight());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer1.getDefaultEntityRadius());
      assertFalse(xYDotRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer1.getDotWidth());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertFalse(xYDotRenderer1.equals((Object)xYDotRenderer0));
      assertFalse(xYDotRenderer1.equals((Object)xYDotRenderer2));
      assertNotSame(xYDotRenderer1, xYDotRenderer0);
      assertNotSame(xYDotRenderer1, xYDotRenderer2);
      
      xYDotRenderer1.setDotWidth(1);
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYDotRenderer1.getPassCount());
      assertTrue(xYDotRenderer1.getDefaultCreateEntities());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer1.getDotHeight());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer1.getDefaultEntityRadius());
      assertFalse(xYDotRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer1.getDotWidth());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(xYDotRenderer1.equals((Object)xYDotRenderer0));
      assertFalse(xYDotRenderer1.equals((Object)xYDotRenderer2));
      assertNotSame(xYDotRenderer1, xYDotRenderer0);
      assertNotSame(xYDotRenderer1, xYDotRenderer2);
      
      int int1 = xYDotRenderer1.getDotWidth();
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYDotRenderer1.getPassCount());
      assertTrue(xYDotRenderer1.getDefaultCreateEntities());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer1.getDotHeight());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer1.getDefaultEntityRadius());
      assertFalse(xYDotRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer1.getDotWidth());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(xYDotRenderer1.equals((Object)xYDotRenderer0));
      assertFalse(xYDotRenderer1.equals((Object)xYDotRenderer2));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertNotSame(xYDotRenderer1, xYDotRenderer0);
      assertNotSame(xYDotRenderer1, xYDotRenderer2);
      
      xYDotRenderer1.setLegendShape((Shape) rectangle2D_Double0);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDotRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYDotRenderer1.getPassCount());
      assertTrue(xYDotRenderer1.getDefaultCreateEntities());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer1.getDotHeight());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisible());
      assertTrue(xYDotRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer1.getDefaultEntityRadius());
      assertFalse(xYDotRenderer1.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer1.getDotWidth());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDotRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDotRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertFalse(xYDotRenderer1.equals((Object)xYDotRenderer0));
      assertFalse(xYDotRenderer1.equals((Object)xYDotRenderer2));
      assertNotSame(xYDotRenderer1, xYDotRenderer0);
      assertNotSame(xYDotRenderer1, xYDotRenderer2);
      
      XYDotRenderer xYDotRenderer3 = (XYDotRenderer)xYDotRenderer0.clone();
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer3.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer3.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer3.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer3.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer3.getDotWidth());
      assertFalse(xYDotRenderer3.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYDotRenderer3.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer3.getDefaultItemLabelsVisible());
      assertEquals(1, xYDotRenderer3.getDotHeight());
      assertFalse(xYDotRenderer3.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer3.getAutoPopulateSeriesPaint());
      assertTrue(xYDotRenderer3.getAutoPopulateSeriesStroke());
      assertEquals(3, xYDotRenderer3.getDefaultEntityRadius());
      assertEquals(1, xYDotRenderer3.getPassCount());
      assertTrue(xYDotRenderer3.getDefaultCreateEntities());
      assertTrue(xYDotRenderer3.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(xYDotRenderer3);
      assertFalse(xYDotRenderer0.equals((Object)xYDotRenderer1));
      assertTrue(xYDotRenderer0.equals((Object)xYDotRenderer2));
      assertFalse(xYDotRenderer3.equals((Object)xYDotRenderer1));
      assertTrue(xYDotRenderer3.equals((Object)xYDotRenderer0));
      assertTrue(xYDotRenderer3.equals((Object)xYDotRenderer2));
      assertNotSame(xYDotRenderer0, xYDotRenderer3);
      assertNotSame(xYDotRenderer0, xYDotRenderer2);
      assertNotSame(xYDotRenderer0, xYDotRenderer1);
      assertNotSame(xYDotRenderer3, xYDotRenderer1);
      assertNotSame(xYDotRenderer3, xYDotRenderer2);
      assertNotSame(xYDotRenderer3, xYDotRenderer0);
      
      XYDotRenderer xYDotRenderer4 = (XYDotRenderer)xYDotRenderer0.clone();
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDotRenderer4.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer4.getDotWidth());
      assertEquals(2.0, xYDotRenderer4.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDotRenderer4.getDefaultCreateEntities());
      assertTrue(xYDotRenderer4.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer4.getPassCount());
      assertFalse(xYDotRenderer4.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer4.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer4.getDotHeight());
      assertTrue(xYDotRenderer4.getAutoPopulateSeriesStroke());
      assertTrue(xYDotRenderer4.getDefaultSeriesVisibleInLegend());
      assertFalse(xYDotRenderer4.getDefaultItemLabelsVisible());
      assertTrue(xYDotRenderer4.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer4.getAutoPopulateSeriesFillPaint());
      assertEquals(3, xYDotRenderer4.getDefaultEntityRadius());
      assertFalse(xYDotRenderer4.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYDotRenderer4);
      assertFalse(xYDotRenderer0.equals((Object)xYDotRenderer1));
      assertTrue(xYDotRenderer0.equals((Object)xYDotRenderer2));
      assertTrue(xYDotRenderer0.equals((Object)xYDotRenderer3));
      assertTrue(xYDotRenderer4.equals((Object)xYDotRenderer3));
      assertTrue(xYDotRenderer4.equals((Object)xYDotRenderer0));
      assertTrue(xYDotRenderer4.equals((Object)xYDotRenderer2));
      assertFalse(xYDotRenderer4.equals((Object)xYDotRenderer1));
      assertNotSame(xYDotRenderer0, xYDotRenderer3);
      assertNotSame(xYDotRenderer0, xYDotRenderer2);
      assertNotSame(xYDotRenderer0, xYDotRenderer1);
      assertNotSame(xYDotRenderer0, xYDotRenderer4);
      assertNotSame(xYDotRenderer4, xYDotRenderer0);
      assertNotSame(xYDotRenderer4, xYDotRenderer3);
      assertNotSame(xYDotRenderer4, xYDotRenderer1);
      assertNotSame(xYDotRenderer4, xYDotRenderer2);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = xYDotRenderer0.getPlot();
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertNull(xYPlot0);
      assertTrue(xYDotRenderer0.equals((Object)xYDotRenderer4));
      assertFalse(xYDotRenderer0.equals((Object)xYDotRenderer1));
      assertTrue(xYDotRenderer0.equals((Object)xYDotRenderer2));
      assertTrue(xYDotRenderer0.equals((Object)xYDotRenderer3));
      assertNotSame(xYDotRenderer0, xYDotRenderer3);
      assertNotSame(xYDotRenderer0, xYDotRenderer2);
      assertNotSame(xYDotRenderer0, xYDotRenderer1);
      assertNotSame(xYDotRenderer0, xYDotRenderer4);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = xYDotRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getDefaultSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDotRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getDefaultCreateEntities());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYItemRendererState0.getElementHinting());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertNotNull(xYItemRendererState0);
      assertTrue(xYDotRenderer0.equals((Object)xYDotRenderer4));
      assertFalse(xYDotRenderer0.equals((Object)xYDotRenderer1));
      assertTrue(xYDotRenderer0.equals((Object)xYDotRenderer2));
      assertTrue(xYDotRenderer0.equals((Object)xYDotRenderer3));
      assertNotSame(xYDotRenderer0, xYDotRenderer3);
      assertNotSame(xYDotRenderer0, xYDotRenderer2);
      assertNotSame(xYDotRenderer0, xYDotRenderer1);
      assertNotSame(xYDotRenderer0, xYDotRenderer4);
      
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(xYDataset1).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset1).getYValue(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        xYDotRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, xYDataset1, 3668, (-164), (CrosshairState) null, 232);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYDotRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = xYDotRenderer0.getPlot();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((Range) null).when(valueAxis0).getRange();
      xYDotRenderer0.lookupSeriesPaint(0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYDotRenderer0.drawDomainLine(graphics2D0, (XYPlot) null, valueAxis0, rectangle2D0, 1.0, valueAxis0.DEFAULT_TICK_MARK_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.AbstractXYItemRenderer", e);
      }
  }
}
