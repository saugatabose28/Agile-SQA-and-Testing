/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:33:28 GMT 2023
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.DirectColorModel;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Vector;
import javax.swing.JScrollPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;
import org.jfree.chart.labels.IntervalXYItemLabelGenerator;
import org.jfree.chart.labels.IntervalXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.ui.Layer;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.urls.CustomXYURLGenerator;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.StandardXYZURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.data.time.Week;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYStepRenderer_ESTest extends XYStepRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      xYStepRenderer0.setURLGenerator(timeSeriesURLGenerator0);
      xYStepRenderer0.lookupSeriesShape(139);
      xYStepRenderer0.equals("");
      xYStepRenderer0.clone();
      xYStepRenderer0.setDefaultToolTipGenerator((XYToolTipGenerator) null);
      xYStepRenderer0.setStepPoint(Double.NaN);
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      // Undeclared exception!
      try { 
        xYStepRenderer0.equals(xYErrorRenderer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.renderer.xy.XYErrorRenderer cannot be cast to org.jfree.chart.renderer.xy.XYStepRenderer
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 0.0, 0.0);
      xYTextAnnotation0.equals(xYStepRenderer0);
      xYTextAnnotation0.setNotify(false);
      xYTextAnnotation0.clone();
      Layer layer0 = Layer.FOREGROUND;
      xYStepRenderer0.addAnnotation((XYAnnotation) xYTextAnnotation0, layer0);
      xYStepRenderer0.getStepPoint();
      Object object0 = xYStepRenderer0.clone();
      xYStepRenderer0.hashCode();
      xYStepRenderer0.equals(object0);
      xYStepRenderer0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getURLGenerator();
      standardXYToolTipGenerator0.equals((Object) null);
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(standardXYToolTipGenerator0, (XYURLGenerator) null);
      xYStepRenderer0.getStepPoint();
      // Undeclared exception!
      try { 
        xYStepRenderer0.setStepPoint((-1918.524645));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires stepPoint in [0.0;1.0]
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      // Undeclared exception!
      try { 
        xYStepRenderer0.setStepPoint((-180.1576342));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires stepPoint in [0.0;1.0]
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      int int0 = 886;
      Font.getFont("P~>3x");
      xYStepRenderer0.setDefaultShapesVisible(true);
      xYStepRenderer0.setSeriesItemLabelFont(886, (Font) null, true);
      xYStepRenderer0.getStepPoint();
      xYStepRenderer0.getStepPoint();
      xYStepRenderer0.setStepPoint(1.0);
      Graphics2D graphics2D0 = null;
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) xYStepRenderer0.ZERO);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 886);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 886
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYStepRenderer0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = xYStepRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 79;
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      int int1 = (-540);
      // Undeclared exception!
      try { 
        xYStepRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, xYDataset1, 0, 79, crosshairState0, (-540));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = null;
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = null;
      try {
        intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator((String) null, numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      int int0 = 0;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-5103), (-5103), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      XYStepRenderer xYStepRenderer1 = new XYStepRenderer();
      xYStepRenderer1.setStepPoint((double) xYStepRenderer0.ZERO);
      xYStepRenderer1.lookupSeriesStroke(1256);
      xYStepRenderer0.equals(xYStepRenderer1);
      xYStepRenderer1.getStepPoint();
      xYStepRenderer1.clone();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.getStepPoint();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      assertNotNull(boxAndWhiskerXYToolTipGenerator0);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerXYToolTipGenerator0.getFormatString());
      assertEquals("null", boxAndWhiskerXYToolTipGenerator0.getNullYString());
      
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      assertNotNull(customXYURLGenerator0);
      assertEquals(0, customXYURLGenerator0.getListCount());
      
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(boxAndWhiskerXYToolTipGenerator0, customXYURLGenerator0);
      assertNotNull(xYStepRenderer0);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerXYToolTipGenerator0.getFormatString());
      assertEquals("null", boxAndWhiskerXYToolTipGenerator0.getNullYString());
      assertEquals(0, customXYURLGenerator0.getListCount());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepRenderer0.getDefaultItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepRenderer0.getDefaultSeriesVisible());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepRenderer0.getDefaultShapesFilled());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getDefaultLinesVisible());
      assertFalse(xYStepRenderer0.getDefaultShapesVisible());
      assertTrue(xYStepRenderer0.getDefaultSeriesVisibleInLegend());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYStepRenderer0.getDefaultCreateEntities());
      
      int int0 = 79;
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(79);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D rectangle2D0 = rectangle0.createUnion(rectangle2D_Float0);
      Object[][][] objectArray0 = new Object[0][9][7];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, true);
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, (ValueAxis) null, (ValueAxis) null, deviationRenderer0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = xYStepRenderer0.initialise(graphics2D0, rectangle2D0, xYPlot0, defaultWindDataset0, plotRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        xYStepRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D_Float0, plotRenderingInfo1, xYPlot0, (ValueAxis) null, (ValueAxis) null, defaultWindDataset0, 10, 0, categoryCrosshairState0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      NumberFormat numberFormat0 = boxAndWhiskerXYToolTipGenerator0.getXFormat();
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("b'IpMR3J84", numberFormat0, numberFormat0);
      StandardXYZURLGenerator standardXYZURLGenerator0 = new StandardXYZURLGenerator();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(intervalXYToolTipGenerator0, standardXYZURLGenerator0);
      // Undeclared exception!
      try { 
        xYStepRenderer0.setStepPoint(1022.298938);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires stepPoint in [0.0;1.0]
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "^#6'|>rBRQ2'+A*]mp";
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^#6'|>rBRQ2'+A*]mp";
      stringArray0[1] = "^#6'|>rBRQ2'+A*]mp";
      stringArray0[2] = "^#6'|>rBRQ2'+A*]mp";
      stringArray0[3] = "^#6'|>rBRQ2'+A*]mp";
      stringArray0[4] = "^#6'|>rBRQ2'+A*]mp";
      stringArray0[5] = "^#6'|>rBRQ2'+A*]mp";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      StandardXYZURLGenerator standardXYZURLGenerator0 = new StandardXYZURLGenerator();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(standardXYToolTipGenerator0, standardXYZURLGenerator0);
      xYStepRenderer0.getStepPoint();
      standardXYZURLGenerator0.equals(standardXYToolTipGenerator0);
      xYStepRenderer0.setDefaultLinesVisible(false);
      xYStepRenderer0.clone();
      xYStepRenderer0.getStepPoint();
      xYStepRenderer0.getStepPoint();
      int int0 = (-437);
      int int1 = 0;
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("item", (-437), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SymbolicXYItemLabelGenerator symbolicXYItemLabelGenerator0 = new SymbolicXYItemLabelGenerator();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      int int0 = 2118;
      // Undeclared exception!
      try { 
        symbolicXYItemLabelGenerator0.generateToolTip(defaultWindDataset0, 2118, 2118);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2118, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
