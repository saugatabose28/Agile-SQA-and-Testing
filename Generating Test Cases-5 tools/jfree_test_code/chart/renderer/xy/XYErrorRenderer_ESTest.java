/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:40:55 GMT 2023
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.TexturePaint;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Date;
import java.util.Locale;
import javax.swing.JLayeredPane;
import javax.swing.border.EtchedBorder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.Layer;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.urls.StandardXYZURLGenerator;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYErrorRenderer_ESTest extends XYErrorRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.getLegendItems();
      Date[] dateArray0 = new Date[2];
      DateAxis dateAxis0 = new DateAxis();
      Date date0 = dateAxis0.getMaximumDate();
      dateArray0[0] = date0;
      MockDate mockDate0 = new MockDate(500);
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 0.05;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(xYErrorRenderer0.ZERO, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      xYErrorRenderer0.findDomainBounds(defaultHighLowDataset0);
      xYErrorRenderer0.getErrorStroke();
      xYErrorRenderer0.getErrorPaint();
      xYErrorRenderer0.setCapLength(0.05);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      xYErrorRenderer0.equals(integer0);
      xYErrorRenderer0.setDrawXError(true);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(500, 500, 212);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 212
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.setDrawYError(true);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      xYErrorRenderer0.findDomainBounds(xIntervalSeriesCollection0);
      xYErrorRenderer0.setAutoPopulateSeriesShape(true);
      xYErrorRenderer0.setDrawOutlines(true);
      xYErrorRenderer0.getDrawYError();
      XIntervalSeriesCollection xIntervalSeriesCollection1 = new XIntervalSeriesCollection();
      xYErrorRenderer0.equals(xIntervalSeriesCollection1);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      xYErrorRenderer0.getSeriesShapesVisible(0);
      xYErrorRenderer0.getSeriesVisibleInLegend(0);
      Boolean.compare(true, false);
      defaultPolarItemRenderer0.setSeriesItemLabelsVisible(0, (Boolean) null, true);
      defaultPolarItemRenderer0.setDefaultOutlineStroke(xYErrorRenderer0.DEFAULT_OUTLINE_STROKE, false);
      defaultPolarItemRenderer0.setSeriesOutlineStroke(243, xYErrorRenderer0.DEFAULT_STROKE, false);
      Stroke stroke0 = defaultPolarItemRenderer0.getItemOutlineStroke(0, 0);
      xYErrorRenderer0.setErrorStroke(stroke0);
      xYErrorRenderer0.setDrawXError(true);
      xYErrorRenderer0.equals((Object) null);
      xYErrorRenderer0.setCapLength((double) defaultPolarItemRenderer0.ZERO);
      xYErrorRenderer0.findRangeBounds(xIntervalSeriesCollection0);
      xYErrorRenderer0.setDrawYError(true);
      xYErrorRenderer0.getCapLength();
      xYErrorRenderer0.getDrawYError();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(xYErrorRenderer0.ZERO, (OHLCDataItem[]) null);
      defaultOHLCDataset0.setNotify(false);
      xYErrorRenderer0.lookupSeriesOutlineStroke((-151));
      xYErrorRenderer0.setAutoPopulateSeriesStroke(false);
      xYErrorRenderer0.lookupSeriesStroke(1650);
      // Undeclared exception!
      try { 
        xYErrorRenderer0.findRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      boolean boolean0 = xYErrorRenderer0.getDrawYError();
      assertTrue(boolean0);
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      
      xYErrorRenderer0.setDrawYError(false);
      xYErrorRenderer0.getCapLength();
      xYErrorRenderer0.setDrawXError(false);
      xYErrorRenderer0.setDrawXError(false);
      xYErrorRenderer0.getErrorStroke();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getItemOutlinePaint(369, 369);
      xYErrorRenderer0.setErrorPaint(paint0);
      xYErrorRenderer0.getErrorPaint();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(53, 0, (-1148), (-1148), 0, 53);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 44.0, 0, 0.0, 0.0, (-2014.98711414023));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 0.0, 1546.0, 22.0, 44.0, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DateAxis dateAxis0 = new DateAxis("");
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      Date date1 = dateTickUnit0.rollDate(date0);
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date1, (-136.12258142), 917.55044317576, (-864.279122346592), (-1.0), (-2014.98711414023));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date1, (-1148), (double) xYErrorRenderer0.ZERO, 0.0, 2.0F, 0.0);
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, (-136.12258142), (-1.0), 4.0, 500, 0.05);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(date0, (-769.89), 2.0F, 665.4214971785534, 1539.6342067423695, 22.0);
      oHLCDataItemArray0[5] = oHLCDataItem5;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(xYErrorRenderer0.ZERO, oHLCDataItemArray0);
      xYErrorRenderer0.findDomainBounds(defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.setDrawXError(false);
      xYErrorRenderer0.getCapLength();
      xYErrorRenderer0.setSeriesShapesVisible(1, false);
      xYErrorRenderer0.getCapLength();
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      Polygon polygon0 = new Polygon(intArray0, intArray0, 1);
      polygon0.xpoints = intArray0;
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      xYErrorRenderer0.setDefaultLegendShape(rectangle2D0);
      xYErrorRenderer0.setCapLength((-1634.0));
      xYErrorRenderer0.getDrawXError();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYErrorRenderer0.ZERO);
      xYErrorRenderer0.findRangeBounds(defaultBoxAndWhiskerXYDataset0);
      Locale locale0 = Locale.FRANCE;
      Color color0 = Color.CYAN;
      EtchedBorder etchedBorder0 = new EtchedBorder(color0, color0);
      etchedBorder0.getShadowColor();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      // Undeclared exception!
      try { 
        Plot.resolveDomainAxisLocation((AxisLocation) null, plotOrientation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      Object object0 = new Object();
      xYErrorRenderer0.equals(object0);
      xYErrorRenderer0.lookupSeriesShape(1838);
      xYErrorRenderer0.getDrawYError();
      Paint paint0 = xYErrorRenderer0.lookupSeriesPaint(1838);
      xYErrorRenderer0.setDrawXError(true);
      xYErrorRenderer0.getDrawXError();
      xYErrorRenderer0.setErrorPaint(paint0);
      xYErrorRenderer0.findRangeBounds((XYDataset) null);
      xYErrorRenderer0.getCapLength();
      xYErrorRenderer0.setDrawXError(true);
      xYErrorRenderer0.setCapLength(4.0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setErrorIndicatorStroke(xYErrorRenderer0.DEFAULT_OUTLINE_STROKE);
      Stroke stroke0 = statisticalLineAndShapeRenderer0.getErrorIndicatorStroke();
      xYErrorRenderer0.setErrorStroke(stroke0);
      xYErrorRenderer0.getDrawXError();
      xYErrorRenderer0.getErrorStroke();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYErrorRenderer0.equals(integer0);
      xYErrorRenderer0.setDrawXError(false);
      xYErrorRenderer0.getDrawYError();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      xYErrorRenderer0.findRangeBounds(timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.lookupSeriesOutlinePaint(0);
      xYErrorRenderer0.getSeriesShapesFilled((-1641));
      xYErrorRenderer0.setItemLabelAnchorOffset(0);
      xYErrorRenderer0.setDefaultShapesFilled(false);
      xYErrorRenderer0.setAutoPopulateSeriesOutlineStroke(true);
      xYErrorRenderer0.getItemShapeFilled(0, 0);
      xYErrorRenderer0.getDrawYError();
      xYErrorRenderer0.getErrorPaint();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      xYErrorRenderer0.findDomainBounds(categoryTableXYDataset0);
      xYErrorRenderer0.getDrawXError();
      xYErrorRenderer0.findRangeBounds(categoryTableXYDataset0);
      xYErrorRenderer0.setCapLength(1076.193579);
      xYErrorRenderer0.setDrawXError(true);
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.plot.PlotRenderingInfo", meterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      JFreeChart jFreeChart1 = chartPanel0.getChart();
      // Undeclared exception!
      try { 
        jFreeChart1.plotChanged((PlotChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.getPlot();
      defaultWindDataset0.addChangeListener((DatasetChangeListener) null);
      // Undeclared exception!
      try { 
        defaultWindDataset0.getSeriesKey(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: 0
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent("/h");
      xYErrorRenderer0.notifyListeners(rendererChangeEvent0);
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      StandardXYZURLGenerator standardXYZURLGenerator0 = new StandardXYZURLGenerator();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1344, boxAndWhiskerXYToolTipGenerator0, standardXYZURLGenerator0);
      cyclicXYItemRenderer0.getSeriesShapesFilled((-2361));
      xYErrorRenderer0.setSeriesShapesFilled(1344, (Boolean) null);
      xYErrorRenderer0.setSeriesLinesVisible(1344, true);
      xYErrorRenderer0.getCapLength();
      xYErrorRenderer0.getErrorStroke();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(xYErrorRenderer0.DEFAULT_SHAPE, xYErrorRenderer0.DEFAULT_STROKE, xYErrorRenderer0.DEFAULT_PAINT);
      xYShapeAnnotation0.setNotify(true);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      xYShapeAnnotation0.equals(defaultTableXYDataset0);
      Layer layer0 = Layer.FOREGROUND;
      xYErrorRenderer0.addAnnotation((XYAnnotation) xYShapeAnnotation0, layer0);
      xYErrorRenderer0.getDrawYError();
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      xYErrorRenderer0.setErrorStroke(basicStroke0);
      xYErrorRenderer0.setDrawYError(false);
      xYErrorRenderer0.getDrawXError();
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      
      xYErrorRenderer0.setCapLength((-1290.2581732084834));
      xYErrorRenderer0.getErrorPaint();
      xYErrorRenderer0.equals(layer0);
      Object object0 = xYErrorRenderer0.clone();
      xYErrorRenderer0.equals(object0);
      xYErrorRenderer0.setErrorPaint((Paint) null);
      xYErrorRenderer0.getCapLength();
      xYErrorRenderer0.getErrorPaint();
      assertTrue(xYErrorRenderer0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.getDrawXError();
      int int0 = (-1);
      String string0 = ">B*G9)z";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        MockDateFormat.getDateTimeInstance((-1), (-1), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.setErrorPaint((Paint) null);
      boolean boolean0 = xYErrorRenderer0.getDrawYError();
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertTrue(boolean0);
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
  }
}
