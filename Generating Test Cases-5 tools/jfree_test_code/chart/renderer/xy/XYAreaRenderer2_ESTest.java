/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:17:43 GMT 2023
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.util.Collection;
import java.util.LinkedList;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.ChartEntity;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.BubbleXYItemLabelGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.xy.AbstractXYItemRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.ui.Layer;
import org.jfree.chart.urls.CustomXYURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.data.Range;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYAreaRenderer2_ESTest extends XYAreaRenderer2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      customXYURLGenerator0.clone();
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(standardXYToolTipGenerator0, customXYURLGenerator0);
      StandardXYToolTipGenerator.getTimeSeriesInstance();
      xYAreaRenderer2_0.getLegendItem((-1), (-1));
      xYAreaRenderer2_0.setOutline(true);
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      Point point0 = new Point();
      Rectangle rectangle0 = new Rectangle(point0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      LinkedList<XYAreaRenderer2> linkedList0 = new LinkedList<XYAreaRenderer2>();
      customXYURLGenerator0.addURLSeries(linkedList0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 300, 1, 10, 1, 1043, true, true, true, false, true, true);
      stackedXYBarRenderer0.setDefaultLegendTextFont(jFreeChart0.DEFAULT_TITLE_FONT);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYItemRendererState xYItemRendererState0 = stackedXYBarRenderer0.initialise((Graphics2D) null, rectangle0, combinedDomainXYPlot0, vectorSeriesCollection0, plotRenderingInfo0);
      combinedDomainXYPlot0.getRangeAxisForDataset(300);
      // Undeclared exception!
      try { 
        xYAreaRenderer2_0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle0, plotRenderingInfo0, combinedDomainXYPlot0, (ValueAxis) null, (ValueAxis) null, vectorSeriesCollection0, 104, 0, (CrosshairState) null, (-3993));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 104, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      int int0 = 2045;
      xYAreaRenderer2_0.getLegendShape(2045);
      // Undeclared exception!
      try { 
        xYAreaRenderer2_0.setLegendArea((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYToolTipGenerator xYToolTipGenerator0 = mock(XYToolTipGenerator.class, new ViolatedAssumptionAnswer());
      XYURLGenerator xYURLGenerator0 = mock(XYURLGenerator.class, new ViolatedAssumptionAnswer());
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(xYToolTipGenerator0, xYURLGenerator0);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYAreaRenderer2_0.annotationChanged(annotationChangeEvent0);
      XYAnnotation xYAnnotation0 = mock(XYAnnotation.class, new ViolatedAssumptionAnswer());
      Layer layer0 = Layer.FOREGROUND;
      xYAreaRenderer2_0.addAnnotation(xYAnnotation0, layer0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      xYAreaRenderer2_0.getLegendItem(0, 0);
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = (-1);
      xYAreaRenderer2_0.drawItemLabel(graphics2D0, plotOrientation0, xYDataset0, (-1), (-1), (-1), (-4668.562), true);
      try { 
        xYAreaRenderer2_0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Object without clone() method is impossible.
         //
         verifyException("org.jfree.chart.util.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      xYAreaRenderer2_0.removeAnnotations();
      Font font0 = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
      xYAreaRenderer2_0.setLegendTextFont(15, font0);
      Font font1 = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
      xYAreaRenderer2_0.setDefaultLegendTextFont(font1);
      xYAreaRenderer2_0.setOutline(true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYAreaRenderer2_0.getPlot();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = xYAreaRenderer2_0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(xYDataset1).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset1).getYValue(anyInt() , anyInt());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYAreaRenderer2_0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, xYDataset1, 500, 5171, crosshairState0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYAreaRenderer2", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertNotNull(xYAreaRenderer2_0);
      
      xYAreaRenderer2_0.setURLGenerator((XYURLGenerator) null);
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertNotNull(bubbleXYItemLabelGenerator0);
      
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator1 = (BubbleXYItemLabelGenerator)bubbleXYItemLabelGenerator0.clone();
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("null", bubbleXYItemLabelGenerator1.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator1.getFormatString());
      assertTrue(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator0));
      assertNotNull(bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator1, bubbleXYItemLabelGenerator0);
      
      xYAreaRenderer2_0.setSeriesItemLabelGenerator(1, bubbleXYItemLabelGenerator0);
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator1));
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator1);
      
      Color color0 = (Color)xYAreaRenderer2_0.lookupSeriesPaint((-820));
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      GeneralPath generalPath0 = (GeneralPath)xYAreaRenderer2_0.getLegendArea();
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      xYAreaRenderer2_0.setOutline(true);
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      
      boolean boolean0 = xYAreaRenderer2_0.equals("F<W-,&'JDfG[~T16U ");
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(boolean0);
      
      xYAreaRenderer2_0.setOutline(true);
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      
      GeneralPath generalPath1 = (GeneralPath)xYAreaRenderer2_0.getLegendArea();
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(1, generalPath1.getWindingRule());
      assertNotNull(generalPath1);
      assertSame(generalPath1, generalPath0);
      
      xYAreaRenderer2_0.setOutline(false);
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      
      xYAreaRenderer2_0.setLegendArea(generalPath1);
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(1, generalPath1.getWindingRule());
      assertSame(generalPath1, generalPath0);
      
      LegendItem legendItem0 = xYAreaRenderer2_0.getLegendItem((-1849), (-1));
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertNull(legendItem0);
      
      GeneralPath generalPath2 = (GeneralPath)xYAreaRenderer2_0.getLegendArea();
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(1, generalPath2.getWindingRule());
      assertNotNull(generalPath2);
      assertSame(generalPath2, generalPath0);
      assertSame(generalPath2, generalPath1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1548.65143);
      assertTrue(candlestickRenderer0.getDefaultSeriesVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getDefaultCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1548.65143, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getDefaultItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertNotNull(candlestickRenderer0);
      
      candlestickRenderer0.setMaxCandleWidthInMilliseconds(1548.65143);
      assertTrue(candlestickRenderer0.getDefaultSeriesVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getDefaultCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1548.65143, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getDefaultItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1548.65143, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      XYToolTipGenerator xYToolTipGenerator0 = candlestickRenderer0.getDefaultToolTipGenerator();
      assertTrue(candlestickRenderer0.getDefaultSeriesVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getDefaultCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1548.65143, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getDefaultItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1548.65143, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertNotNull(xYToolTipGenerator0);
      
      XYURLGenerator xYURLGenerator0 = candlestickRenderer0.getURLGenerator();
      assertTrue(candlestickRenderer0.getDefaultSeriesVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getDefaultCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1548.65143, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getDefaultItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1548.65143, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertNull(xYURLGenerator0);
      
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(xYToolTipGenerator0, (XYURLGenerator) null);
      assertTrue(candlestickRenderer0.getDefaultSeriesVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getDefaultCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1548.65143, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getDefaultItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1548.65143, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(stackedXYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertTrue(stackedXYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertNotNull(stackedXYAreaRenderer2_0);
      
      boolean boolean0 = stackedXYAreaRenderer2_0.equals(xYToolTipGenerator0);
      assertTrue(candlestickRenderer0.getDefaultSeriesVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getDefaultCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1548.65143, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getDefaultItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1548.65143, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(stackedXYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertTrue(stackedXYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      double double0 = 95.8333333;
      int int0 = 1610;
      GrayPaintScale grayPaintScale0 = null;
      try {
        grayPaintScale0 = new GrayPaintScale(95.8333333, (-2668.0), 1610);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires lowerBound < upperBound.
         //
         verifyException("org.jfree.chart.renderer.GrayPaintScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertNotNull(xYAreaRenderer2_0);
      
      Range range0 = xYAreaRenderer2_0.findRangeBounds((XYDataset) null);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertNull(range0);
      
      int int0 = 1340;
      Range range1 = xYAreaRenderer2_0.findDomainBounds((XYDataset) null);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertNull(range1);
      
      XYToolTipGenerator xYToolTipGenerator0 = mock(XYToolTipGenerator.class, new ViolatedAssumptionAnswer());
      xYAreaRenderer2_0.setSeriesToolTipGenerator(0, xYToolTipGenerator0);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      
      RendererChangeEvent rendererChangeEvent0 = mock(RendererChangeEvent.class, new ViolatedAssumptionAnswer());
      Color color0 = (Color)xYAreaRenderer2_0.lookupSeriesFillPaint(0);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertEquals(255, color0.getRed());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      Color color1 = (Color)xYAreaRenderer2_0.lookupSeriesOutlinePaint(1340);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertEquals((-8355712), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(128, color1.getGreen());
      assertEquals(128, color1.getBlue());
      assertEquals(128, color1.getRed());
      assertFalse(color1.equals((Object)color0));
      assertNotNull(color1);
      assertNotSame(color1, color0);
      
      // Undeclared exception!
      try { 
        xYAreaRenderer2_0.setDefaultItemLabelPaint((Paint) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertNotNull(xYAreaRenderer2_0);
      
      xYAreaRenderer2_0.setDataBoundsIncludesVisibleSeriesOnly(false);
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.isOutline());
      
      RendererChangeEvent rendererChangeEvent0 = mock(RendererChangeEvent.class, new ViolatedAssumptionAnswer());
      xYAreaRenderer2_0.notifyListeners(rendererChangeEvent0);
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.isOutline());
      
      int int0 = 1319;
      xYAreaRenderer2_0.setSeriesToolTipGenerator(1319, (XYToolTipGenerator) null);
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.isOutline());
      
      Collection collection0 = xYAreaRenderer2_0.getAnnotations();
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertNotNull(collection0);
      
      xYAreaRenderer2_0.clearSeriesPaints(false);
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.isOutline());
      
      boolean boolean0 = xYAreaRenderer2_0.equals(collection0);
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(boolean0);
      
      GeneralPath generalPath0 = (GeneralPath)xYAreaRenderer2_0.getLegendArea();
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      boolean boolean1 = xYAreaRenderer2_0.isOutline();
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = xYAreaRenderer2_0.equals(generalPath0);
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertEquals(1, generalPath0.getWindingRule());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      xYAreaRenderer2_0.setLegendArea(generalPath0);
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertEquals(1, generalPath0.getWindingRule());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = xYAreaRenderer2_0.getPlot();
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertNull(xYPlot0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = xYAreaRenderer2_0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertFalse(xYItemRendererState0.getElementHinting());
      assertNotNull(xYItemRendererState0);
      
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYAreaRenderer2_0.setAutoPopulateSeriesStroke(false);
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.isOutline());
      
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(xYDataset1).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset1).getYValue(anyInt() , anyInt());
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYAreaRenderer2_0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D1, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, xYDataset1, 500, 1319, crosshairState0, 500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYAreaRenderer2", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYToolTipGenerator xYToolTipGenerator0 = mock(XYToolTipGenerator.class, new ViolatedAssumptionAnswer());
      XYURLGenerator xYURLGenerator0 = mock(XYURLGenerator.class, new ViolatedAssumptionAnswer());
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(xYToolTipGenerator0, xYURLGenerator0);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertNotNull(xYAreaRenderer2_0);
      
      XYAreaRenderer2 xYAreaRenderer2_1 = (XYAreaRenderer2)xYAreaRenderer2_0.clone();
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYAreaRenderer2_1.getDefaultSeriesVisible());
      assertTrue(xYAreaRenderer2_1.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_1.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_1.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_1.getDefaultSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_1.getDefaultEntityRadius());
      assertEquals(1, xYAreaRenderer2_1.getPassCount());
      assertFalse(xYAreaRenderer2_1.isOutline());
      assertFalse(xYAreaRenderer2_1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYAreaRenderer2_1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_1.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_1.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_1.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_1.equals((Object)xYAreaRenderer2_0));
      assertNotNull(xYAreaRenderer2_1);
      assertNotSame(xYAreaRenderer2_0, xYAreaRenderer2_1);
      assertNotSame(xYAreaRenderer2_1, xYAreaRenderer2_0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYAreaRenderer2 xYAreaRenderer2_2 = new XYAreaRenderer2();
      assertFalse(xYAreaRenderer2_2.isOutline());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYAreaRenderer2_2.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_2.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_2.getPassCount());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_2.getDefaultSeriesVisibleInLegend());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYAreaRenderer2_2.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_2.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_2.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_2.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_2.equals((Object)xYAreaRenderer2_0));
      assertFalse(xYAreaRenderer2_2.equals((Object)xYAreaRenderer2_1));
      assertNotNull(xYAreaRenderer2_2);
      
      boolean boolean0 = true;
      xYAreaRenderer2_2.setAutoPopulateSeriesPaint(true);
      assertFalse(xYAreaRenderer2_2.isOutline());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYAreaRenderer2_2.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_2.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_2.getPassCount());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_2.getDefaultSeriesVisibleInLegend());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYAreaRenderer2_2.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_2.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_2.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_2.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_2.equals((Object)xYAreaRenderer2_0));
      assertFalse(xYAreaRenderer2_2.equals((Object)xYAreaRenderer2_1));
      assertNotSame(xYAreaRenderer2_2, xYAreaRenderer2_0);
      assertNotSame(xYAreaRenderer2_2, xYAreaRenderer2_1);
      
      xYAreaRenderer2_2.setDefaultLegendShape(xYAreaRenderer2_0.DEFAULT_SHAPE);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_2.isOutline());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYAreaRenderer2_2.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_2.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_2.getPassCount());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_2.getDefaultSeriesVisibleInLegend());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYAreaRenderer2_2.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_2.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_2.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_2.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.equals((Object)xYAreaRenderer2_2));
      assertTrue(xYAreaRenderer2_0.equals((Object)xYAreaRenderer2_1));
      assertFalse(xYAreaRenderer2_2.equals((Object)xYAreaRenderer2_0));
      assertFalse(xYAreaRenderer2_2.equals((Object)xYAreaRenderer2_1));
      assertNotSame(xYAreaRenderer2_0, xYAreaRenderer2_2);
      assertNotSame(xYAreaRenderer2_0, xYAreaRenderer2_1);
      assertNotSame(xYAreaRenderer2_2, xYAreaRenderer2_0);
      assertNotSame(xYAreaRenderer2_2, xYAreaRenderer2_1);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = xYAreaRenderer2_0.getPlot();
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.equals((Object)xYAreaRenderer2_2));
      assertTrue(xYAreaRenderer2_0.equals((Object)xYAreaRenderer2_1));
      assertNull(xYPlot0);
      assertNotSame(xYAreaRenderer2_0, xYAreaRenderer2_2);
      assertNotSame(xYAreaRenderer2_0, xYAreaRenderer2_1);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = xYAreaRenderer2_2.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      assertFalse(xYAreaRenderer2_2.isOutline());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYAreaRenderer2_2.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_2.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_2.getPassCount());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_2.getDefaultSeriesVisibleInLegend());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYAreaRenderer2_2.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_2.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_2.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_2.getDefaultSeriesVisible());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertFalse(xYItemRendererState0.getElementHinting());
      assertFalse(xYAreaRenderer2_2.equals((Object)xYAreaRenderer2_0));
      assertFalse(xYAreaRenderer2_2.equals((Object)xYAreaRenderer2_1));
      assertNotNull(xYItemRendererState0);
      assertNotSame(xYAreaRenderer2_2, xYAreaRenderer2_0);
      assertNotSame(xYAreaRenderer2_2, xYAreaRenderer2_1);
      
      Rectangle2D rectangle2D1 = null;
      xYAreaRenderer2_2.removeAnnotations();
      assertFalse(xYAreaRenderer2_2.isOutline());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYAreaRenderer2_2.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_2.getDefaultCreateEntities());
      assertEquals(1, xYAreaRenderer2_2.getPassCount());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_2.getDefaultSeriesVisibleInLegend());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYAreaRenderer2_2.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_2.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYAreaRenderer2_2.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_2.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_2.getAutoPopulateSeriesShape());
      assertTrue(xYAreaRenderer2_2.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_2.equals((Object)xYAreaRenderer2_0));
      assertFalse(xYAreaRenderer2_2.equals((Object)xYAreaRenderer2_1));
      assertNotSame(xYAreaRenderer2_2, xYAreaRenderer2_0);
      assertNotSame(xYAreaRenderer2_2, xYAreaRenderer2_1);
      
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((Range) null).when(valueAxis1).getRange();
      // Undeclared exception!
      try { 
        xYAreaRenderer2_0.drawDomainLine(graphics2D1, (XYPlot) null, valueAxis1, (Rectangle2D) null, 0.05, xYAreaRenderer2_2.DEFAULT_PAINT, valueAxis1.DEFAULT_TICK_MARK_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.AbstractXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYToolTipGenerator xYToolTipGenerator0 = mock(XYToolTipGenerator.class, new ViolatedAssumptionAnswer());
      XYURLGenerator xYURLGenerator0 = mock(XYURLGenerator.class, new ViolatedAssumptionAnswer());
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(xYToolTipGenerator0, xYURLGenerator0);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertNotNull(xYAreaRenderer2_0);
      
      xYAreaRenderer2_0.setOutline(false);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(xYAreaRenderer2_0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = null;
      XYPlot xYPlot0 = xYAreaRenderer2_0.getPlot();
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertNull(xYPlot0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      XYItemRendererState xYItemRendererState0 = xYAreaRenderer2_0.initialise(graphics2D0, (Rectangle2D) null, (XYPlot) null, xYDataset0, plotRenderingInfo0);
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertFalse(xYItemRendererState0.getElementHinting());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertNotNull(xYItemRendererState0);
      
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = null;
      int int0 = 437;
      CrosshairState crosshairState0 = mock(CrosshairState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYAreaRenderer2_0.drawItem(graphics2D0, xYItemRendererState0, (Rectangle2D) null, plotRenderingInfo1, (XYPlot) null, valueAxis0, valueAxis0, (XYDataset) null, 437, 500, crosshairState0, 437);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYAreaRenderer2", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertNotNull(xYAreaRenderer2_0);
      
      Shape shape0 = xYAreaRenderer2_0.getDefaultLegendShape();
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertNull(shape0);
      
      // Undeclared exception!
      try { 
        xYAreaRenderer2_0.setLegendArea((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(xYAreaRenderer2_0);
      
      xYAreaRenderer2_0.setSeriesToolTipGenerator(0, (XYToolTipGenerator) null);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      
      GeneralPath generalPath0 = (GeneralPath)xYAreaRenderer2_0.getLegendArea();
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getDefaultItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisible());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getDefaultSeriesVisibleInLegend());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getDefaultCreateEntities());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYToolTipGenerator xYToolTipGenerator0 = null;
      XYURLGenerator xYURLGenerator0 = mock(XYURLGenerator.class, new ViolatedAssumptionAnswer());
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2((XYToolTipGenerator) null, xYURLGenerator0);
      xYAreaRenderer2_0.setOutline(true);
      xYAreaRenderer2_0.removeAnnotations();
      XYAreaRenderer2 xYAreaRenderer2_1 = new XYAreaRenderer2();
      xYAreaRenderer2_1.getPlot();
      xYAreaRenderer2_1.setPlot((XYPlot) null);
      xYAreaRenderer2_0.setLegendTextFont(59, xYAreaRenderer2_1.DEFAULT_VALUE_LABEL_FONT);
      // Undeclared exception!
      try { 
        xYAreaRenderer2_1.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.AbstractXYItemRenderer", e);
      }
  }
}
