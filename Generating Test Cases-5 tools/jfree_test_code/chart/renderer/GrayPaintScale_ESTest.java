/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:52:46 GMT 2023
 */

package org.jfree.chart.renderer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.renderer.GrayPaintScale;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GrayPaintScale_ESTest extends GrayPaintScale_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-1.0), 1117.6438383);
      GrayPaintScale grayPaintScale1 = new GrayPaintScale((-1.0), 1117.6438383, 0);
      boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
      assertEquals((-1.0), grayPaintScale1.getLowerBound(), 0.01);
      assertEquals(1117.6438383, grayPaintScale1.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(grayPaintScale1.equals((Object)grayPaintScale0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 2593.806872, 0);
      GrayPaintScale grayPaintScale1 = new GrayPaintScale(0, 4465.54894);
      boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
      assertEquals(4465.54894, grayPaintScale1.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, grayPaintScale1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-318), 378.6421272259463);
      GrayPaintScale grayPaintScale1 = new GrayPaintScale();
      boolean boolean0 = grayPaintScale1.equals(grayPaintScale0);
      assertFalse(boolean0);
      assertEquals(0.0, grayPaintScale1.getLowerBound(), 0.01);
      assertEquals(1.0, grayPaintScale1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 2593.806872, 0);
      assertEquals(0, grayPaintScale0.getAlpha());
      
      Color color0 = (Color)grayPaintScale0.getPaint((-1.0));
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(2593.806872, grayPaintScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-2961.0), 0.0);
      double double0 = grayPaintScale0.getUpperBound();
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2961.0), grayPaintScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-1523.0), (-1.0), 193);
      double double0 = grayPaintScale0.getUpperBound();
      assertEquals(193, grayPaintScale0.getAlpha());
      assertEquals((-1523.0), grayPaintScale0.getLowerBound(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 2593.806872, 0);
      double double0 = grayPaintScale0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, grayPaintScale0.getAlpha());
      assertEquals(2593.806872, grayPaintScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale(2967.960364718484, 3188.334245);
      double double0 = grayPaintScale0.getLowerBound();
      assertEquals(3188.334245, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(2967.960364718484, double0, 0.01);
      assertEquals(255, grayPaintScale0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 2593.806872, 0);
      int int0 = grayPaintScale0.getAlpha();
      assertEquals(0, int0);
      assertEquals(2593.806872, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = null;
      try {
        grayPaintScale0 = new GrayPaintScale((-68.08369700943), (-401.0023684), 718);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires lowerBound < upperBound.
         //
         verifyException("org.jfree.chart.renderer.GrayPaintScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 2593.806872, 0);
      GrayPaintScale grayPaintScale1 = new GrayPaintScale(0, 2593.806872);
      boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
      assertEquals(0.0, grayPaintScale1.getLowerBound(), 0.01);
      assertFalse(grayPaintScale1.equals((Object)grayPaintScale0));
      assertEquals(2593.806872, grayPaintScale1.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(255, grayPaintScale1.getAlpha());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-983), 1329.8);
      GrayPaintScale grayPaintScale1 = new GrayPaintScale(1100.517279, 1329.8);
      boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
      assertEquals(1100.517279, grayPaintScale1.getLowerBound(), 0.01);
      assertEquals(1329.8, grayPaintScale1.getUpperBound(), 0.01);
      assertEquals(255, grayPaintScale1.getAlpha());
      assertFalse(grayPaintScale1.equals((Object)grayPaintScale0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-983), 1329.8);
      boolean boolean0 = grayPaintScale0.equals(grayPaintScale0);
      assertEquals(1329.8, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals((-983.0), grayPaintScale0.getLowerBound(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 2593.806872, 0);
      GrayPaintScale grayPaintScale1 = new GrayPaintScale();
      boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
      assertEquals(255, grayPaintScale1.getAlpha());
      assertFalse(boolean0);
      assertEquals(1.0, grayPaintScale1.getUpperBound(), 0.01);
      assertEquals(0.0, grayPaintScale1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = null;
      try {
        grayPaintScale0 = new GrayPaintScale((-318.0), 153.6939966858201, 1360);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires alpha in the range 0 to 255.
         //
         verifyException("org.jfree.chart.renderer.GrayPaintScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = null;
      try {
        grayPaintScale0 = new GrayPaintScale(0.0, 1440.370919479, (-1532));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires alpha in the range 0 to 255.
         //
         verifyException("org.jfree.chart.renderer.GrayPaintScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = null;
      try {
        grayPaintScale0 = new GrayPaintScale(1.0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires lowerBound < upperBound.
         //
         verifyException("org.jfree.chart.renderer.GrayPaintScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 2593.806872, 0);
      double double0 = grayPaintScale0.getUpperBound();
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
      assertEquals(2593.806872, double0, 0.01);
      assertEquals(0, grayPaintScale0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-983), 1329.8);
      GrayPaintScale grayPaintScale1 = (GrayPaintScale)grayPaintScale0.clone();
      boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
      assertEquals(255, grayPaintScale1.getAlpha());
      assertEquals(1329.8, grayPaintScale1.getUpperBound(), 0.01);
      assertTrue(boolean0);
      assertEquals((-983.0), grayPaintScale1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-983), 1329.8);
      double double0 = grayPaintScale0.getLowerBound();
      assertEquals((-983.0), double0, 0.01);
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals(1329.8, grayPaintScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-983), 1329.8);
      grayPaintScale0.hashCode();
      assertEquals(1329.8, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals((-983.0), grayPaintScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-983), 1329.8);
      int int0 = grayPaintScale0.getAlpha();
      assertEquals(255, int0);
      assertEquals((-983.0), grayPaintScale0.getLowerBound(), 0.01);
      assertEquals(1329.8, grayPaintScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-983), 1329.8);
      Color color0 = (Color)grayPaintScale0.getPaint((-1.0));
      boolean boolean0 = grayPaintScale0.equals(color0);
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals((-9671572), color0.getRGB());
      assertFalse(boolean0);
  }
}
