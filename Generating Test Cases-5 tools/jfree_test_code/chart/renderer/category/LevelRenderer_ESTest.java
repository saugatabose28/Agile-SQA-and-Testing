/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:01:28 GMT 2023
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.data.category.CategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LevelRenderer_ESTest extends LevelRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      int int0 = (-556);
      levelRenderer0.drawItemLabel(graphics2D0, plotOrientation0, categoryDataset0, (-556), (-556), (-556), (-1360.5174), true);
      levelRenderer0.getDefaultItemURLGenerator();
      levelRenderer0.setSeriesItemURLGenerator(3311, (CategoryURLGenerator) null);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      levelRenderer0.beginElementGroup(graphics2D1, comparable0, comparable0);
      levelRenderer0.setItemMargin((-736.12036570873));
      levelRenderer0.equals(levelRenderer0);
      levelRenderer0.setItemMargin((-556));
      levelRenderer0.equals(levelRenderer0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = null;
      // Undeclared exception!
      try { 
        levelRenderer0.getDomainAxis((CategoryPlot) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.getPlot();
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(plotOrientation0).isHorizontal();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      CategoryAxis categoryAxis0 = null;
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        levelRenderer0.calculateBarW0((CategoryPlot) null, plotOrientation0, rectangle2D0, (CategoryAxis) null, categoryItemRendererState0, 10, (-3645));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.LevelRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(2299).when(categoryDataset0).getColumnCount();
      doReturn((-1797)).when(categoryDataset0).getRowCount();
      levelRenderer0.getSeriesToolTipGenerator(0);
      levelRenderer0.setSeriesToolTipGenerator(2, (CategoryToolTipGenerator) null);
      levelRenderer0.findRangeBounds(categoryDataset0, true);
      LevelRenderer levelRenderer1 = new LevelRenderer();
      levelRenderer0.equals(levelRenderer1);
      levelRenderer1.setItemMargin((-865.3461597171777));
      double double0 = (-2412.683672);
      LevelRenderer levelRenderer2 = new LevelRenderer();
      levelRenderer1.equals(levelRenderer2);
      levelRenderer1.getPlot();
      // Undeclared exception!
      try { 
        levelRenderer1.getDomainAxis((CategoryPlot) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Shape shape0 = levelRenderer0.lookupLegendShape((-80));
      levelRenderer0.setDefaultLegendShape(shape0);
      levelRenderer0.lookupLegendShape(25);
      levelRenderer0.setMaximumItemWidth(0.0);
      levelRenderer0.getItemMargin();
      levelRenderer0.getMaximumItemWidth();
      levelRenderer0.setMaximumItemWidth(0.2);
      Graphics2D graphics2D0 = null;
      levelRenderer0.createState((PlotRenderingInfo) null);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      levelRenderer0.getPlot();
      // Undeclared exception!
      try { 
        levelRenderer0.getDomainAxis((CategoryPlot) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      LevelRenderer levelRenderer1 = new LevelRenderer();
      levelRenderer1.getPlot();
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(plotOrientation0).isHorizontal();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D1).getWidth();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        levelRenderer0.calculateBarW0((CategoryPlot) null, plotOrientation0, rectangle2D1, (CategoryAxis) null, categoryItemRendererState0, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.LevelRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setMaximumItemWidth((-358.084686));
      levelRenderer0.getItemMargin();
      levelRenderer0.getMaximumItemWidth();
      levelRenderer0.getMaximumItemWidth();
      levelRenderer0.getMaximumItemWidth();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        levelRenderer0.getDomainAxis((CategoryPlot) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setAutoPopulateSeriesShape(false);
      levelRenderer0.getItemMargin();
      int int0 = 0;
      int int1 = (-1297);
      levelRenderer0.getSeriesItemLabelGenerator((-1297));
      levelRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null, false);
      levelRenderer0.getDefaultToolTipGenerator();
      levelRenderer0.setDefaultToolTipGenerator((CategoryToolTipGenerator) null);
      levelRenderer0.setItemMargin(0.0);
      levelRenderer0.getMaximumItemWidth();
      levelRenderer0.getLegendItems();
      levelRenderer0.getItemMargin();
      levelRenderer0.clearSeriesPaints(true);
      levelRenderer0.hashCode();
      levelRenderer0.setItemMargin(1.0);
      levelRenderer0.setItemMargin((-1297));
      levelRenderer0.getMaximumItemWidth();
      String string0 = "QEf\"Q\\LJ=%TZ2;^J";
      levelRenderer0.equals("QEf\"QLJ=%TZ2;^J");
      levelRenderer0.getItemMargin();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      levelRenderer0.getPlot();
      // Undeclared exception!
      try { 
        levelRenderer0.getDomainAxis((CategoryPlot) null, (-1297));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.lookupLegendTextPaint(0);
      levelRenderer0.setSeriesFillPaint(0, (Paint) null, false);
      levelRenderer0.getItemLabelGenerator(0, 0);
      levelRenderer0.setSeriesFillPaint(35, (Paint) null, true);
      levelRenderer0.setDefaultItemLabelGenerator((CategoryItemLabelGenerator) null, false);
      levelRenderer0.setItemMargin(1334.41);
      levelRenderer0.hashCode();
      levelRenderer0.setMaximumItemWidth(1389.433030001147);
      levelRenderer0.setMaximumItemWidth(0);
      levelRenderer0.getPlot();
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        levelRenderer0.getDomainAxis((CategoryPlot) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setItemMargin(0.0);
      levelRenderer0.getItemMargin();
      double double0 = 2800.89394331779;
      levelRenderer0.getPlot();
      int int0 = (-1973);
      // Undeclared exception!
      try { 
        levelRenderer0.getDomainAxis((CategoryPlot) null, (-1973));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LegendItemCollection legendItemCollection0 = levelRenderer0.getLegendItems();
      levelRenderer0.getItemMargin();
      levelRenderer0.equals(legendItemCollection0);
      levelRenderer0.getMaximumItemWidth();
      levelRenderer0.equals(legendItemCollection0);
      levelRenderer0.getItemLabelGenerator(39, 39);
      levelRenderer0.setSeriesItemLabelGenerator(39, (CategoryItemLabelGenerator) null, false);
      levelRenderer0.getMaximumItemWidth();
      levelRenderer0.setMaximumItemWidth((-2426.90110291912));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.getPlot();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        levelRenderer0.calculateBarW0((CategoryPlot) null, (PlotOrientation) null, rectangle2D0, (CategoryAxis) null, categoryItemRendererState0, 10, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.LevelRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.getPlot();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.createState((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        levelRenderer0.calculateItemWidth((CategoryPlot) null, rectangle2D0, (-1254), categoryItemRendererState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      levelRenderer0.getPlot();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        levelRenderer0.initialise(graphics2D0, rectangle2D0, (CategoryPlot) null, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.getPlot();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        levelRenderer0.calculateItemWidth((CategoryPlot) null, rectangle2D0, (-1196), categoryItemRendererState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      int int0 = (-4073);
      levelRenderer0.getToolTipGenerator((-4073), 1);
      levelRenderer0.setSeriesToolTipGenerator((-4073), (CategoryToolTipGenerator) null, true);
      levelRenderer0.hashCode();
      levelRenderer0.getMaximumItemWidth();
      CategoryAxis categoryAxis0 = null;
      // Undeclared exception!
      try { 
        levelRenderer0.calculateSeriesWidth(1.0, (CategoryAxis) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.LevelRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.getPlot();
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      // Undeclared exception!
      try { 
        levelRenderer0.getDomainAxis((CategoryPlot) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = levelRenderer0.getPlot();
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(plotOrientation0).isHorizontal();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getWidth();
      levelRenderer0.setLegendShape(1669, categoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.createState((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        levelRenderer0.calculateBarW0((CategoryPlot) null, plotOrientation0, rectangle2D0, (CategoryAxis) null, categoryItemRendererState0, (-2145005437), 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.LevelRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = null;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        levelRenderer0.getItemMiddle(comparable0, comparable0, categoryDataset0, (CategoryAxis) null, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.LevelRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LevelRenderer levelRenderer1 = (LevelRenderer)levelRenderer0.clone();
      levelRenderer0.equals(levelRenderer1);
      levelRenderer0.setDefaultFillPaint(levelRenderer1.DEFAULT_VALUE_LABEL_PAINT, false);
      levelRenderer0.getPlot();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      int int0 = 584;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      int int1 = 1;
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      levelRenderer0.createState((PlotRenderingInfo) null);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      LevelRenderer levelRenderer2 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer2.getDomainAxis((CategoryPlot) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getDefaultCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getDefaultSeriesVisible());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      int int0 = (-556);
      levelRenderer0.drawItemLabel(graphics2D0, plotOrientation0, categoryDataset0, (-556), (-556), (-556), (-1360.5174), true);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getDefaultCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getDefaultSeriesVisible());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      CategoryURLGenerator categoryURLGenerator0 = levelRenderer0.getDefaultItemURLGenerator();
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getDefaultCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getDefaultSeriesVisible());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNull(categoryURLGenerator0);
      
      levelRenderer0.setSeriesItemURLGenerator(3311, (CategoryURLGenerator) null);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getDefaultCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getDefaultSeriesVisible());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      levelRenderer0.beginElementGroup(graphics2D1, comparable0, comparable0);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getDefaultCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getDefaultSeriesVisible());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      levelRenderer0.setItemMargin((-736.12036570873));
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals((-736.12036570873), levelRenderer0.getItemMargin(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getDefaultCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getDefaultSeriesVisible());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      LevelRenderer levelRenderer1 = (LevelRenderer)levelRenderer0.clone();
      assertNotSame(levelRenderer0, levelRenderer1);
      assertNotSame(levelRenderer1, levelRenderer0);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals((-736.12036570873), levelRenderer0.getItemMargin(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getDefaultCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getDefaultSeriesVisible());
      assertEquals(3, levelRenderer1.getDefaultEntityRadius());
      assertTrue(levelRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(levelRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, levelRenderer1.getColumnCount());
      assertFalse(levelRenderer1.getDefaultItemLabelsVisible());
      assertTrue(levelRenderer1.getDefaultSeriesVisible());
      assertFalse(levelRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer1.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer1.getDefaultCreateEntities());
      assertTrue(levelRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer1.getPassCount());
      assertEquals((-736.12036570873), levelRenderer1.getItemMargin(), 0.01);
      assertEquals(1.0, levelRenderer1.getMaximumItemWidth(), 0.01);
      assertEquals(2.0, levelRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, levelRenderer1.getRowCount());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer1);
      assertTrue(levelRenderer1.equals((Object)levelRenderer0));
      
      boolean boolean0 = levelRenderer0.equals(levelRenderer1);
      assertNotSame(levelRenderer0, levelRenderer1);
      assertNotSame(levelRenderer1, levelRenderer0);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals((-736.12036570873), levelRenderer0.getItemMargin(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getDefaultCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getDefaultSeriesVisible());
      assertEquals(3, levelRenderer1.getDefaultEntityRadius());
      assertTrue(levelRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(levelRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, levelRenderer1.getColumnCount());
      assertFalse(levelRenderer1.getDefaultItemLabelsVisible());
      assertTrue(levelRenderer1.getDefaultSeriesVisible());
      assertFalse(levelRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer1.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer1.getDefaultCreateEntities());
      assertTrue(levelRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer1.getPassCount());
      assertEquals((-736.12036570873), levelRenderer1.getItemMargin(), 0.01);
      assertEquals(1.0, levelRenderer1.getMaximumItemWidth(), 0.01);
      assertEquals(2.0, levelRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, levelRenderer1.getRowCount());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertTrue(boolean0);
      assertTrue(levelRenderer0.equals((Object)levelRenderer1));
      assertTrue(levelRenderer1.equals((Object)levelRenderer0));
      
      levelRenderer0.setItemMargin((-556));
      assertNotSame(levelRenderer0, levelRenderer1);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals((-556.0), levelRenderer0.getItemMargin(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getDefaultCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getDefaultSeriesVisible());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(levelRenderer0.equals((Object)levelRenderer1));
      
      boolean boolean1 = levelRenderer0.equals(levelRenderer1);
      assertNotSame(levelRenderer0, levelRenderer1);
      assertNotSame(levelRenderer1, levelRenderer0);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals((-556.0), levelRenderer0.getItemMargin(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getDefaultCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getDefaultSeriesVisible());
      assertEquals(3, levelRenderer1.getDefaultEntityRadius());
      assertTrue(levelRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(levelRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, levelRenderer1.getColumnCount());
      assertFalse(levelRenderer1.getDefaultItemLabelsVisible());
      assertTrue(levelRenderer1.getDefaultSeriesVisible());
      assertFalse(levelRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer1.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer1.getDefaultCreateEntities());
      assertTrue(levelRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer1.getPassCount());
      assertEquals((-736.12036570873), levelRenderer1.getItemMargin(), 0.01);
      assertEquals(1.0, levelRenderer1.getMaximumItemWidth(), 0.01);
      assertEquals(2.0, levelRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, levelRenderer1.getRowCount());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(boolean1);
      assertFalse(levelRenderer0.equals((Object)levelRenderer1));
      assertFalse(levelRenderer1.equals((Object)levelRenderer0));
      assertFalse(boolean1 == boolean0);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = null;
      CategoryPlot categoryPlot0 = null;
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        levelRenderer0.initialise(graphics2D2, (Rectangle2D) null, (CategoryPlot) null, (-556), plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertTrue(levelRenderer0.getDefaultCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDefaultSeriesVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      LevelRenderer levelRenderer1 = new LevelRenderer();
      assertEquals(0, levelRenderer1.getColumnCount());
      assertFalse(levelRenderer1.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1.0, levelRenderer1.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer1.getRowCount());
      assertTrue(levelRenderer1.getDefaultSeriesVisible());
      assertFalse(levelRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, levelRenderer1.getItemMargin(), 0.01);
      assertFalse(levelRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(3, levelRenderer1.getDefaultEntityRadius());
      assertTrue(levelRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer1.getPassCount());
      assertTrue(levelRenderer1.getDefaultCreateEntities());
      assertTrue(levelRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer1);
      assertTrue(levelRenderer1.equals((Object)levelRenderer0));
      
      CategoryPlot categoryPlot0 = levelRenderer1.getPlot();
      assertNotSame(levelRenderer1, levelRenderer0);
      assertEquals(0, levelRenderer1.getColumnCount());
      assertFalse(levelRenderer1.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1.0, levelRenderer1.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer1.getRowCount());
      assertTrue(levelRenderer1.getDefaultSeriesVisible());
      assertFalse(levelRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, levelRenderer1.getItemMargin(), 0.01);
      assertFalse(levelRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(3, levelRenderer1.getDefaultEntityRadius());
      assertTrue(levelRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer1.getPassCount());
      assertTrue(levelRenderer1.getDefaultCreateEntities());
      assertTrue(levelRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNull(categoryPlot0);
      assertTrue(levelRenderer1.equals((Object)levelRenderer0));
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryItemRendererState categoryItemRendererState0 = levelRenderer1.createState((PlotRenderingInfo) null);
      assertNotSame(levelRenderer1, levelRenderer0);
      assertEquals(0, levelRenderer1.getColumnCount());
      assertFalse(levelRenderer1.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1.0, levelRenderer1.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer1.getRowCount());
      assertTrue(levelRenderer1.getDefaultSeriesVisible());
      assertFalse(levelRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, levelRenderer1.getItemMargin(), 0.01);
      assertFalse(levelRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(3, levelRenderer1.getDefaultEntityRadius());
      assertTrue(levelRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer1.getPassCount());
      assertTrue(levelRenderer1.getDefaultCreateEntities());
      assertTrue(levelRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertFalse(categoryItemRendererState0.getElementHinting());
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(categoryItemRendererState0);
      assertTrue(levelRenderer1.equals((Object)levelRenderer0));
      
      // Undeclared exception!
      try { 
        levelRenderer0.calculateItemWidth((CategoryPlot) null, rectangle2D0, 10, categoryItemRendererState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDefaultCreateEntities());
      assertTrue(levelRenderer0.getDefaultSeriesVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      CategoryAxis categoryAxis0 = null;
      int int0 = (-1461);
      int int1 = 2015;
      // Undeclared exception!
      try { 
        levelRenderer0.calculateSeriesWidth(0.0, (CategoryAxis) null, (-1461), 2015);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.LevelRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D3 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getDefaultSeriesVisible());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getDefaultCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      boolean boolean0 = levelRenderer0.equals(rectangle2D3);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getDefaultItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getDefaultSeriesVisible());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getDefaultCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      levelRenderer0.setLegendTextPaint(0, color0);
      levelRenderer0.setDefaultLegendTextPaint(color0);
      levelRenderer0.getMaximumItemWidth();
      levelRenderer0.setMaximumItemWidth(1.0);
      levelRenderer0.hashCode();
      levelRenderer0.getItemMargin();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      levelRenderer0.getPlot();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        levelRenderer0.initialise(graphics2D0, rectangle2D0, (CategoryPlot) null, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
