/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:37:02 GMT 2023
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.LegendItem;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.data.category.CategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BoxAndWhiskerRenderer_ESTest extends BoxAndWhiskerRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.getFillBox();
      Paint paint0 = boxAndWhiskerRenderer0.getDefaultPaint();
      boxAndWhiskerRenderer0.setArtifactPaint(paint0);
      Object object0 = boxAndWhiskerRenderer0.clone();
      boxAndWhiskerRenderer0.equals(object0);
      boxAndWhiskerRenderer0.setArtifactPaint(paint0);
      boxAndWhiskerRenderer0.getLegendItem(24, 24);
      boxAndWhiskerRenderer0.getFillBox();
      boxAndWhiskerRenderer0.clearSeriesPaints(true);
      boxAndWhiskerRenderer0.setMeanVisible(true);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(24, 24, (-2128595994), 2126221433, 2126221433).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(((AbstractRenderer) object0).ZERO, boxAndWhiskerRenderer0.ZERO, ((AbstractRenderer) object0).ZERO, ((AbstractRenderer) object0).ZERO, ((AbstractRenderer) object0).ZERO).when(categoryDataset0).getRowKey(anyInt());
      doReturn(24).when(categoryDataset0).getColumnCount();
      doReturn(24).when(categoryDataset0).getRowCount();
      doReturn(((AbstractRenderer) object0).ZERO, boxAndWhiskerRenderer0.ZERO, ((AbstractRenderer) object0).ZERO, ((AbstractRenderer) object0).ZERO, boxAndWhiskerRenderer0.ZERO).when(categoryDataset0).getValue(anyInt() , anyInt());
      boxAndWhiskerRenderer0.findRangeBounds(categoryDataset0);
      boxAndWhiskerRenderer0.setFillBox(true);
      boxAndWhiskerRenderer0.setMaximumBarWidth(24);
      boxAndWhiskerRenderer0.getMaximumBarWidth();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setWhiskerWidth(24.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value for whisker width out of range
         //
         verifyException("org.jfree.chart.renderer.category.BoxAndWhiskerRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      boxAndWhiskerRenderer0.getItemMargin();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      boxAndWhiskerRenderer0.lookupSeriesOutlineStroke(58);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      boxAndWhiskerRenderer0.clearSeriesStrokes(false);
      boxAndWhiskerRenderer0.setDefaultItemURLGenerator((CategoryURLGenerator) null, true);
      RendererChangeEvent rendererChangeEvent0 = mock(RendererChangeEvent.class, new ViolatedAssumptionAnswer());
      boxAndWhiskerRenderer0.notifyListeners(rendererChangeEvent0);
      boxAndWhiskerRenderer0.getUseOutlinePaintForWhiskers();
      boxAndWhiskerRenderer0.setMaxOutlierVisible(false);
      boxAndWhiskerRenderer0.setFillBox(false);
      boxAndWhiskerRenderer0.getFillBox();
      boxAndWhiskerRenderer0.setUseOutlinePaintForWhiskers(false);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BoxAndWhiskerRenderer boxAndWhiskerRenderer1 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer1.createState((PlotRenderingInfo) null);
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null, (Comparable) null, (Comparable) null, (Comparable) null, (Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn(1605).when(categoryDataset0).getColumnCount();
      doReturn(25).when(categoryDataset0).getRowCount();
      doReturn((Number) null, (Number) null, (Number) null, (Number) null, (Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      // Undeclared exception!
      boxAndWhiskerRenderer0.findRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Stroke stroke0 = boxAndWhiskerRenderer0.lookupSeriesStroke(1535);
      boxAndWhiskerRenderer0.setUseOutlinePaintForWhiskers(false);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Comparable<BoxAndWhiskerRenderer> comparable0 = (Comparable<BoxAndWhiskerRenderer>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      boxAndWhiskerRenderer0.beginElementGroup(graphics2D0, comparable0, comparable0);
      boxAndWhiskerRenderer0.setMedianVisible(false);
      boxAndWhiskerRenderer0.getWhiskerWidth();
      boxAndWhiskerRenderer0.equals(stroke0);
      boxAndWhiskerRenderer0.getSeriesToolTipGenerator((-507));
      boxAndWhiskerRenderer0.setSeriesToolTipGenerator((-1), (CategoryToolTipGenerator) null);
      boxAndWhiskerRenderer0.setMinOutlierVisible(false);
      boxAndWhiskerRenderer0.isMedianVisible();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Paint paint0 = boxAndWhiskerRenderer0.lookupSeriesPaint((-755));
      boxAndWhiskerRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      boxAndWhiskerRenderer0.getToolTipGenerator(0, 733);
      boxAndWhiskerRenderer0.setSeriesToolTipGenerator(267, (CategoryToolTipGenerator) null);
      boxAndWhiskerRenderer0.getLegendItem((-755), 258);
      boxAndWhiskerRenderer0.getMaximumBarWidth();
      boxAndWhiskerRenderer0.setFillBox(false);
      boxAndWhiskerRenderer0.setWhiskerWidth(0);
      boxAndWhiskerRenderer0.setMinOutlierVisible(false);
      boxAndWhiskerRenderer0.isMinOutlierVisible();
      boxAndWhiskerRenderer0.setArtifactPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Object object0 = boxAndWhiskerRenderer0.clone();
      boxAndWhiskerRenderer0.setMaximumBarWidth(0.0);
      boxAndWhiskerRenderer0.equals(object0);
      Object object1 = boxAndWhiskerRenderer0.clone();
      boxAndWhiskerRenderer0.setAutoPopulateSeriesStroke(false);
      int int0 = 0;
      boxAndWhiskerRenderer0.getSeriesShape(0);
      boxAndWhiskerRenderer0.setLegendShape(0, (Shape) null);
      boxAndWhiskerRenderer0.setAutoPopulateSeriesOutlineStroke(true);
      boxAndWhiskerRenderer0.clearSeriesPaints(false);
      boxAndWhiskerRenderer0.equals(object1);
      boxAndWhiskerRenderer0.isMaxOutlierVisible();
      boxAndWhiskerRenderer0.getUseOutlinePaintForWhiskers();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      boxAndWhiskerRenderer0.getPlot();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise(graphics2D1, rectangle2D0, (CategoryPlot) null, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer1 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer1.getToolTipGenerator(0, 31);
      boxAndWhiskerRenderer1.setDefaultToolTipGenerator((CategoryToolTipGenerator) null);
      boxAndWhiskerRenderer0.setFillBox(false);
      boxAndWhiskerRenderer0.lookupSeriesOutlinePaint((-4));
      Object object0 = boxAndWhiskerRenderer1.clone();
      boxAndWhiskerRenderer0.equals(object0);
      boxAndWhiskerRenderer0.setMinOutlierVisible(true);
      boxAndWhiskerRenderer1.getArtifactPaint();
      boxAndWhiskerRenderer1.getItemMargin();
      boxAndWhiskerRenderer1.getLegendItem((-737), 31);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setWhiskerWidth((-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value for whisker width out of range
         //
         verifyException("org.jfree.chart.renderer.category.BoxAndWhiskerRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double double0 = (-4.0);
      boxAndWhiskerRenderer0.setItemMargin((-4.0));
      boxAndWhiskerRenderer0.setUseOutlinePaintForWhiskers(false);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      boxAndWhiskerRenderer0.getDefaultLegendTextPaint();
      boxAndWhiskerRenderer0.setLegendTextPaint(0, (Paint) null);
      boxAndWhiskerRenderer0.findRangeBounds(categoryDataset0);
      boxAndWhiskerRenderer0.getFillBox();
      boxAndWhiskerRenderer0.getLegendItemToolTipGenerator();
      boxAndWhiskerRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      boxAndWhiskerRenderer0.getItemMargin();
      boxAndWhiskerRenderer0.getFillBox();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setArtifactPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setMaxOutlierVisible(true);
      boxAndWhiskerRenderer0.setMaxOutlierVisible(false);
      boxAndWhiskerRenderer0.getSeriesItemLabelGenerator(0);
      boxAndWhiskerRenderer0.setDefaultItemLabelGenerator((CategoryItemLabelGenerator) null, false);
      boxAndWhiskerRenderer0.setMeanVisible(false);
      boxAndWhiskerRenderer0.equals((Object) null);
      boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) null);
      boxAndWhiskerRenderer0.isMaxOutlierVisible();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setMinOutlierVisible(false);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer1 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.equals(boxAndWhiskerRenderer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      boxAndWhiskerRenderer0.drawItemLabel(graphics2D0, plotOrientation0, (CategoryDataset) null, 0, 0, 0.0, 4819.370377, true);
      boxAndWhiskerRenderer0.setWhiskerWidth(1.0);
      boxAndWhiskerRenderer0.getArtifactPaint();
      boxAndWhiskerRenderer0.isMeanVisible();
      boxAndWhiskerRenderer0.setMaximumBarWidth(0);
      boxAndWhiskerRenderer0.setWhiskerWidth(1.0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.getItemLabelGenerator(471, 0);
      boxAndWhiskerRenderer0.setDefaultItemLabelGenerator((CategoryItemLabelGenerator) null);
      boxAndWhiskerRenderer0.setMinOutlierVisible(true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setMinOutlierVisible(false);
      boxAndWhiskerRenderer0.equals(boxAndWhiskerRenderer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.getSeriesItemLabelGenerator(1541);
      boxAndWhiskerRenderer0.setSeriesItemLabelGenerator(1541, (CategoryItemLabelGenerator) null, true);
      boxAndWhiskerRenderer0.isMeanVisible();
      boxAndWhiskerRenderer0.getWhiskerWidth();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.lookupSeriesShape(0);
      Font font0 = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
      boxAndWhiskerRenderer0.lookupLegendTextPaint(8);
      boxAndWhiskerRenderer0.setDefaultLegendTextPaint((Paint) null);
      boxAndWhiskerRenderer0.setLegendTextFont(0, font0);
      boxAndWhiskerRenderer0.isMedianVisible();
      Paint paint0 = boxAndWhiskerRenderer0.getItemOutlinePaint(874, 874);
      boxAndWhiskerRenderer0.setArtifactPaint(paint0);
      boxAndWhiskerRenderer0.getLegendItem(8, 0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      RendererChangeEvent rendererChangeEvent0 = mock(RendererChangeEvent.class, new ViolatedAssumptionAnswer());
      boxAndWhiskerRenderer0.notifyListeners(rendererChangeEvent0);
      boxAndWhiskerRenderer0.setDefaultToolTipGenerator((CategoryToolTipGenerator) null);
      double double0 = 2.0;
      boxAndWhiskerRenderer0.setMaxOutlierVisible(false);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setWhiskerWidth(2.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value for whisker width out of range
         //
         verifyException("org.jfree.chart.renderer.category.BoxAndWhiskerRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.getMaximumBarWidth();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.isMedianVisible();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Paint paint0 = boxAndWhiskerRenderer0.getDefaultPaint();
      boxAndWhiskerRenderer0.setArtifactPaint(paint0);
      boxAndWhiskerRenderer0.getArtifactPaint();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.lookupLegendTextPaint(0);
      boxAndWhiskerRenderer0.lookupSeriesOutlineStroke(0);
      boxAndWhiskerRenderer0.isMeanVisible();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      boxAndWhiskerRenderer0.getPlot();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise(graphics2D0, rectangle2D0, (CategoryPlot) null, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.isMaxOutlierVisible();
      boxAndWhiskerRenderer0.setMeanVisible(false);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setArtifactPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setUseOutlinePaintForWhiskers(true);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer1 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.equals(boxAndWhiskerRenderer1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.lookupSeriesShape((-6841));
      boxAndWhiskerRenderer0.setMaxOutlierVisible(false);
      int int0 = 30;
      boxAndWhiskerRenderer0.getLegendItem(30, (-603));
      boxAndWhiskerRenderer0.getWhiskerWidth();
      boxAndWhiskerRenderer0.setUseOutlinePaintForWhiskers(true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BoxAndWhiskerRenderer boxAndWhiskerRenderer1 = new BoxAndWhiskerRenderer();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      boxAndWhiskerRenderer0.getPlot();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer1.initialise(graphics2D0, rectangle2D0, (CategoryPlot) null, 30, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setMedianVisible(true);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Graphics2D graphics2D0 = null;
      boxAndWhiskerRenderer0.getPlot();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.getRangeAxis((CategoryPlot) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.lookupSeriesOutlinePaint((-616));
      boxAndWhiskerRenderer0.lookupSeriesFillPaint((-616));
      boxAndWhiskerRenderer0.setMaximumBarWidth(2.0);
      boxAndWhiskerRenderer0.setMedianVisible(true);
      boxAndWhiskerRenderer0.getItemLabelGenerator((-616), 3438);
      boxAndWhiskerRenderer0.setDefaultItemLabelGenerator((CategoryItemLabelGenerator) null);
      boxAndWhiskerRenderer0.isMinOutlierVisible();
      boxAndWhiskerRenderer0.setMaximumBarWidth((-4827.07596));
      Object object0 = boxAndWhiskerRenderer0.clone();
      boxAndWhiskerRenderer0.equals(object0);
      boxAndWhiskerRenderer0.getItemMargin();
      boxAndWhiskerRenderer0.getArtifactPaint();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setWhiskerWidth(200.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value for whisker width out of range
         //
         verifyException("org.jfree.chart.renderer.category.BoxAndWhiskerRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryCrosshairState categoryCrosshairState0 = mock(CategoryCrosshairState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      boxAndWhiskerRenderer0.lookupSeriesOutlinePaint(235);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      boxAndWhiskerRenderer0.drawItemLabel(graphics2D0, plotOrientation0, (CategoryDataset) null, 1305, 235, 235, 0.0, false);
      boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) null);
      boxAndWhiskerRenderer0.getFillBox();
      boxAndWhiskerRenderer0.setMeanVisible(true);
      boxAndWhiskerRenderer0.setWhiskerWidth(0.0);
      boxAndWhiskerRenderer0.getUseOutlinePaintForWhiskers();
      boxAndWhiskerRenderer0.isMinOutlierVisible();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      boxAndWhiskerRenderer0.getPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer1 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer1.getDomainAxis((CategoryPlot) null, 2015);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer1 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.equals(boxAndWhiskerRenderer1);
      boxAndWhiskerRenderer0.setMedianVisible(false);
      boxAndWhiskerRenderer0.lookupSeriesOutlineStroke((-348));
      boxAndWhiskerRenderer0.getLegendShape((-1));
      boxAndWhiskerRenderer0.setMedianVisible(false);
      boxAndWhiskerRenderer0.setFillBox(false);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = null;
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise(graphics2D0, rectangle2D0, (CategoryPlot) null, 0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.getDefaultToolTipGenerator();
      boxAndWhiskerRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) null);
      boxAndWhiskerRenderer0.lookupLegendTextPaint(2272);
      boxAndWhiskerRenderer0.equals((Object) null);
      boxAndWhiskerRenderer0.getLegendItem((-2948), 2272);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertFalse(boxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.isMinOutlierVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.isMaxOutlierVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getWhiskerWidth(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(boxAndWhiskerRenderer0.getUseOutlinePaintForWhiskers());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisible());
      assertNotNull(boxAndWhiskerRenderer0);
      
      boxAndWhiskerRenderer0.setItemMargin((-393.95));
      assertFalse(boxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.isMinOutlierVisible());
      assertTrue(boxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.isMaxOutlierVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getWhiskerWidth(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals((-393.95), boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getUseOutlinePaintForWhiskers());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisible());
      
      boxAndWhiskerRenderer0.setUseOutlinePaintForWhiskers(false);
      assertFalse(boxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.isMinOutlierVisible());
      assertTrue(boxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.isMaxOutlierVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getWhiskerWidth(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals((-393.95), boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getUseOutlinePaintForWhiskers());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisible());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      boxAndWhiskerRenderer0.drawItemLabel(graphics2D0, plotOrientation0, categoryDataset0, 2517, 2517, (-2831.95), (-2831.95), false);
      assertFalse(boxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.isMinOutlierVisible());
      assertTrue(boxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.isMaxOutlierVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getWhiskerWidth(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals((-393.95), boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getUseOutlinePaintForWhiskers());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisible());
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer1 = new BoxAndWhiskerRenderer();
      assertFalse(boxAndWhiskerRenderer1.equals((Object)boxAndWhiskerRenderer0));
      assertTrue(boxAndWhiskerRenderer1.getDefaultCreateEntities());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer1.isMinOutlierVisible());
      assertTrue(boxAndWhiskerRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer1.getRowCount());
      assertTrue(boxAndWhiskerRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1.0, boxAndWhiskerRenderer1.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer1.getColumnCount());
      assertEquals(1.0, boxAndWhiskerRenderer1.getWhiskerWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.getFillBox());
      assertEquals(2.0, boxAndWhiskerRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer1.isMaxOutlierVisible());
      assertEquals(0.2, boxAndWhiskerRenderer1.getItemMargin(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer1.getDefaultEntityRadius());
      assertEquals(1, boxAndWhiskerRenderer1.getPassCount());
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer1.getDefaultItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer1.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer1.getDefaultSeriesVisible());
      assertFalse(boxAndWhiskerRenderer1.getUseOutlinePaintForWhiskers());
      assertNotNull(boxAndWhiskerRenderer1);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = boxAndWhiskerRenderer1.getLegendItemToolTipGenerator();
      assertFalse(boxAndWhiskerRenderer1.equals((Object)boxAndWhiskerRenderer0));
      assertNotSame(boxAndWhiskerRenderer1, boxAndWhiskerRenderer0);
      assertTrue(boxAndWhiskerRenderer1.getDefaultCreateEntities());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer1.isMinOutlierVisible());
      assertTrue(boxAndWhiskerRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer1.getRowCount());
      assertTrue(boxAndWhiskerRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1.0, boxAndWhiskerRenderer1.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer1.getColumnCount());
      assertEquals(1.0, boxAndWhiskerRenderer1.getWhiskerWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.getFillBox());
      assertEquals(2.0, boxAndWhiskerRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer1.isMaxOutlierVisible());
      assertEquals(0.2, boxAndWhiskerRenderer1.getItemMargin(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer1.getDefaultEntityRadius());
      assertEquals(1, boxAndWhiskerRenderer1.getPassCount());
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer1.getDefaultItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer1.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer1.getDefaultSeriesVisible());
      assertFalse(boxAndWhiskerRenderer1.getUseOutlinePaintForWhiskers());
      assertNull(categorySeriesLabelGenerator0);
      
      boxAndWhiskerRenderer1.setLegendItemToolTipGenerator((CategorySeriesLabelGenerator) null);
      assertFalse(boxAndWhiskerRenderer1.equals((Object)boxAndWhiskerRenderer0));
      assertNotSame(boxAndWhiskerRenderer1, boxAndWhiskerRenderer0);
      assertTrue(boxAndWhiskerRenderer1.getDefaultCreateEntities());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer1.isMinOutlierVisible());
      assertTrue(boxAndWhiskerRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer1.getRowCount());
      assertTrue(boxAndWhiskerRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1.0, boxAndWhiskerRenderer1.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer1.getColumnCount());
      assertEquals(1.0, boxAndWhiskerRenderer1.getWhiskerWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.getFillBox());
      assertEquals(2.0, boxAndWhiskerRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer1.isMaxOutlierVisible());
      assertEquals(0.2, boxAndWhiskerRenderer1.getItemMargin(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer1.getDefaultEntityRadius());
      assertEquals(1, boxAndWhiskerRenderer1.getPassCount());
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer1.getDefaultItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer1.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer1.getDefaultSeriesVisible());
      assertFalse(boxAndWhiskerRenderer1.getUseOutlinePaintForWhiskers());
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = boxAndWhiskerRenderer0.getSeriesItemLabelGenerator(0);
      assertFalse(boxAndWhiskerRenderer0.equals((Object)boxAndWhiskerRenderer1));
      assertNotSame(boxAndWhiskerRenderer0, boxAndWhiskerRenderer1);
      assertFalse(boxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.isMinOutlierVisible());
      assertTrue(boxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.isMaxOutlierVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getWhiskerWidth(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals((-393.95), boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getUseOutlinePaintForWhiskers());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisible());
      assertNull(categoryItemLabelGenerator0);
      
      boxAndWhiskerRenderer1.setSeriesItemLabelGenerator(807, (CategoryItemLabelGenerator) null, false);
      assertFalse(boxAndWhiskerRenderer1.equals((Object)boxAndWhiskerRenderer0));
      assertNotSame(boxAndWhiskerRenderer1, boxAndWhiskerRenderer0);
      assertTrue(boxAndWhiskerRenderer1.getDefaultCreateEntities());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer1.isMinOutlierVisible());
      assertTrue(boxAndWhiskerRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer1.getRowCount());
      assertTrue(boxAndWhiskerRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1.0, boxAndWhiskerRenderer1.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer1.getColumnCount());
      assertEquals(1.0, boxAndWhiskerRenderer1.getWhiskerWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.getFillBox());
      assertEquals(2.0, boxAndWhiskerRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer1.isMaxOutlierVisible());
      assertEquals(0.2, boxAndWhiskerRenderer1.getItemMargin(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer1.getDefaultEntityRadius());
      assertEquals(1, boxAndWhiskerRenderer1.getPassCount());
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer1.getDefaultItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer1.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer1.getDefaultSeriesVisible());
      assertFalse(boxAndWhiskerRenderer1.getUseOutlinePaintForWhiskers());
      
      CategoryURLGenerator categoryURLGenerator0 = boxAndWhiskerRenderer1.getDefaultItemURLGenerator();
      assertFalse(boxAndWhiskerRenderer1.equals((Object)boxAndWhiskerRenderer0));
      assertNotSame(boxAndWhiskerRenderer1, boxAndWhiskerRenderer0);
      assertTrue(boxAndWhiskerRenderer1.getDefaultCreateEntities());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer1.isMinOutlierVisible());
      assertTrue(boxAndWhiskerRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer1.getRowCount());
      assertTrue(boxAndWhiskerRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1.0, boxAndWhiskerRenderer1.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer1.getColumnCount());
      assertEquals(1.0, boxAndWhiskerRenderer1.getWhiskerWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.getFillBox());
      assertEquals(2.0, boxAndWhiskerRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer1.isMaxOutlierVisible());
      assertEquals(0.2, boxAndWhiskerRenderer1.getItemMargin(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer1.getDefaultEntityRadius());
      assertEquals(1, boxAndWhiskerRenderer1.getPassCount());
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer1.getDefaultItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer1.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer1.getDefaultSeriesVisible());
      assertFalse(boxAndWhiskerRenderer1.getUseOutlinePaintForWhiskers());
      assertNull(categoryURLGenerator0);
      
      boxAndWhiskerRenderer0.setSeriesItemURLGenerator(0, (CategoryURLGenerator) null);
      assertFalse(boxAndWhiskerRenderer0.equals((Object)boxAndWhiskerRenderer1));
      assertNotSame(boxAndWhiskerRenderer0, boxAndWhiskerRenderer1);
      assertFalse(boxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.isMinOutlierVisible());
      assertTrue(boxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.isMaxOutlierVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getWhiskerWidth(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals((-393.95), boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getUseOutlinePaintForWhiskers());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisible());
      
      LegendItem legendItem0 = boxAndWhiskerRenderer0.getLegendItem(0, 3);
      assertFalse(boxAndWhiskerRenderer0.equals((Object)boxAndWhiskerRenderer1));
      assertNotSame(boxAndWhiskerRenderer0, boxAndWhiskerRenderer1);
      assertFalse(boxAndWhiskerRenderer0.getDefaultItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.isMinOutlierVisible());
      assertTrue(boxAndWhiskerRenderer0.getDefaultCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.isMaxOutlierVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getWhiskerWidth(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals((-393.95), boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getUseOutlinePaintForWhiskers());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getDefaultSeriesVisible());
      assertNull(legendItem0);
      
      Color color0 = (Color)boxAndWhiskerRenderer1.getArtifactPaint();
      assertFalse(boxAndWhiskerRenderer1.equals((Object)boxAndWhiskerRenderer0));
      assertNotSame(boxAndWhiskerRenderer1, boxAndWhiskerRenderer0);
      assertTrue(boxAndWhiskerRenderer1.getDefaultCreateEntities());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer1.isMinOutlierVisible());
      assertTrue(boxAndWhiskerRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer1.getRowCount());
      assertTrue(boxAndWhiskerRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1.0, boxAndWhiskerRenderer1.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer1.getColumnCount());
      assertEquals(1.0, boxAndWhiskerRenderer1.getWhiskerWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.getFillBox());
      assertEquals(2.0, boxAndWhiskerRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer1.isMaxOutlierVisible());
      assertEquals(0.2, boxAndWhiskerRenderer1.getItemMargin(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer1.getDefaultEntityRadius());
      assertEquals(1, boxAndWhiskerRenderer1.getPassCount());
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer1.getDefaultItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer1.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer1.getDefaultSeriesVisible());
      assertFalse(boxAndWhiskerRenderer1.getUseOutlinePaintForWhiskers());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      boolean boolean0 = boxAndWhiskerRenderer1.isMaxOutlierVisible();
      assertFalse(boxAndWhiskerRenderer1.equals((Object)boxAndWhiskerRenderer0));
      assertNotSame(boxAndWhiskerRenderer1, boxAndWhiskerRenderer0);
      assertTrue(boolean0);
      assertTrue(boxAndWhiskerRenderer1.getDefaultCreateEntities());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer1.isMinOutlierVisible());
      assertTrue(boxAndWhiskerRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer1.getRowCount());
      assertTrue(boxAndWhiskerRenderer1.getDefaultSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1.0, boxAndWhiskerRenderer1.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer1.getColumnCount());
      assertEquals(1.0, boxAndWhiskerRenderer1.getWhiskerWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.getFillBox());
      assertEquals(2.0, boxAndWhiskerRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer1.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer1.isMaxOutlierVisible());
      assertEquals(0.2, boxAndWhiskerRenderer1.getItemMargin(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer1.getDefaultEntityRadius());
      assertEquals(1, boxAndWhiskerRenderer1.getPassCount());
      assertTrue(boxAndWhiskerRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer1.getDefaultItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer1.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer1.getDefaultSeriesVisible());
      assertFalse(boxAndWhiskerRenderer1.getUseOutlinePaintForWhiskers());
      
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
