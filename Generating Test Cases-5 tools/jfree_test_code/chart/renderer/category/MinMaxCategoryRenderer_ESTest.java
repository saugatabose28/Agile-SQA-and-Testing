/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:54:37 GMT 2023
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import javax.swing.Icon;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.data.category.CategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinMaxCategoryRenderer_ESTest extends MinMaxCategoryRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      minMaxCategoryRenderer0.setDefaultLegendShape(rectangle2D_Double0);
      minMaxCategoryRenderer0.setDefaultEntityRadius((-755));
      minMaxCategoryRenderer0.setDrawLines(false);
      minMaxCategoryRenderer0.equals(rectangle2D_Double0);
      Icon icon0 = minMaxCategoryRenderer0.getMinIcon();
      minMaxCategoryRenderer0.setObjectIcon(icon0);
      minMaxCategoryRenderer0.equals(minMaxCategoryRenderer0);
      minMaxCategoryRenderer0.setGroupPaint(minMaxCategoryRenderer0.DEFAULT_OUTLINE_PAINT);
      minMaxCategoryRenderer0.getGroupPaint();
      minMaxCategoryRenderer0.isDrawLines();
      minMaxCategoryRenderer0.getGroupPaint();
      minMaxCategoryRenderer0.setGroupPaint(minMaxCategoryRenderer0.DEFAULT_PAINT);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      minMaxCategoryRenderer0.getLegendTextPaint(0);
      minMaxCategoryRenderer0.getLegendItem(0, 0);
      minMaxCategoryRenderer0.setDrawLines(true);
      Paint paint0 = minMaxCategoryRenderer0.getGroupPaint();
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer1.getPlot();
      minMaxCategoryRenderer1.hasListener((EventListener) null);
      minMaxCategoryRenderer0.equals(minMaxCategoryRenderer1);
      Icon icon0 = minMaxCategoryRenderer0.getMaxIcon();
      minMaxCategoryRenderer0.setObjectIcon(icon0);
      minMaxCategoryRenderer0.getObjectIcon();
      minMaxCategoryRenderer0.getMinIcon();
      minMaxCategoryRenderer0.getMinIcon();
      minMaxCategoryRenderer1.getObjectIcon();
      minMaxCategoryRenderer1.getMaxIcon();
      Object object0 = minMaxCategoryRenderer0.clone();
      minMaxCategoryRenderer0.equals(object0);
      minMaxCategoryRenderer1.setDrawLines(true);
      MinMaxCategoryRenderer minMaxCategoryRenderer2 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.equals(minMaxCategoryRenderer2);
      minMaxCategoryRenderer1.getGroupStroke();
      minMaxCategoryRenderer2.getObjectIcon();
      minMaxCategoryRenderer2.setMaxIcon(icon0);
      minMaxCategoryRenderer2.equals(paint0);
      minMaxCategoryRenderer0.getMinIcon();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      CategoryItemRendererState categoryItemRendererState0 = minMaxCategoryRenderer1.createState(plotRenderingInfo0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      minMaxCategoryRenderer1.drawItem(graphics2D0, categoryItemRendererState0, rectangle2D0, (CategoryPlot) null, (CategoryAxis) null, (ValueAxis) null, categoryDataset0, (-2321), 24, 24);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.getDefaultItemLabelGenerator();
      minMaxCategoryRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null);
      minMaxCategoryRenderer0.setAutoPopulateSeriesStroke(true);
      minMaxCategoryRenderer0.lookupSeriesOutlinePaint(0);
      Paint paint0 = minMaxCategoryRenderer0.lookupSeriesFillPaint(1999);
      minMaxCategoryRenderer0.setSeriesToolTipGenerator(1999, (CategoryToolTipGenerator) null);
      Paint paint1 = minMaxCategoryRenderer0.lookupSeriesOutlinePaint(1999);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      minMaxCategoryRenderer0.setLegendShape(1999, rectangle2D_Double0);
      minMaxCategoryRenderer0.getGroupStroke();
      Paint paint2 = minMaxCategoryRenderer0.getGroupPaint();
      minMaxCategoryRenderer0.setGroupPaint(paint1);
      minMaxCategoryRenderer0.isDrawLines();
      minMaxCategoryRenderer0.getObjectIcon();
      minMaxCategoryRenderer0.equals(paint2);
      minMaxCategoryRenderer0.equals(paint1);
      minMaxCategoryRenderer0.setGroupPaint(paint1);
      minMaxCategoryRenderer0.getGroupStroke();
      minMaxCategoryRenderer0.setGroupPaint(paint0);
      Icon icon0 = minMaxCategoryRenderer0.getMaxIcon();
      minMaxCategoryRenderer0.setMaxIcon(icon0);
      minMaxCategoryRenderer0.setGroupPaint(paint1);
      Object object0 = minMaxCategoryRenderer0.clone();
      minMaxCategoryRenderer0.equals(object0);
      minMaxCategoryRenderer0.getMaxIcon();
      minMaxCategoryRenderer0.getMinIcon();
      minMaxCategoryRenderer0.getMinIcon();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setDefaultEntityRadius((-2292));
      minMaxCategoryRenderer0.setDrawLines(false);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setObjectIcon((Icon) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      minMaxCategoryRenderer0.getPlot();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.drawItem(graphics2D0, (CategoryItemRendererState) null, rectangle2D0, (CategoryPlot) null, (CategoryAxis) null, (ValueAxis) null, (CategoryDataset) null, (-1770), 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.MinMaxCategoryRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Icon icon0 = minMaxCategoryRenderer0.getMinIcon();
      minMaxCategoryRenderer0.setMinIcon(icon0);
      Paint paint0 = minMaxCategoryRenderer0.getGroupPaint();
      Icon icon1 = minMaxCategoryRenderer0.getObjectIcon();
      minMaxCategoryRenderer0.setMaxIcon(icon0);
      minMaxCategoryRenderer0.setGroupPaint(paint0);
      minMaxCategoryRenderer0.getGroupPaint();
      Object object0 = minMaxCategoryRenderer0.clone();
      minMaxCategoryRenderer0.equals(object0);
      Icon icon2 = minMaxCategoryRenderer0.getMinIcon();
      minMaxCategoryRenderer0.setMaxIcon(icon1);
      Paint paint1 = minMaxCategoryRenderer0.getDefaultItemLabelPaint();
      minMaxCategoryRenderer0.setGroupPaint(paint1);
      minMaxCategoryRenderer0.getGroupStroke();
      minMaxCategoryRenderer0.setDrawLines(true);
      minMaxCategoryRenderer0.setDefaultFillPaint(paint1, true);
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.equals(minMaxCategoryRenderer1);
      minMaxCategoryRenderer1.getMaxIcon();
      minMaxCategoryRenderer0.getMaxIcon();
      minMaxCategoryRenderer0.isDrawLines();
      minMaxCategoryRenderer1.getMinIcon();
      minMaxCategoryRenderer1.setObjectIcon(icon2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.getObjectIcon();
      minMaxCategoryRenderer0.getGroupPaint();
      minMaxCategoryRenderer0.getObjectIcon();
      Object object0 = minMaxCategoryRenderer0.clone();
      minMaxCategoryRenderer0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.getDefaultPaint();
      Stroke stroke0 = null;
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setGroupStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setAutoPopulateSeriesStroke(true);
      Icon icon0 = null;
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setMinIcon((Icon) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.equals("");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Icon icon0 = null;
      int int0 = (-1139);
      minMaxCategoryRenderer0.setSeriesItemLabelGenerator((-1139), (CategoryItemLabelGenerator) null, false);
      minMaxCategoryRenderer0.getSeriesItemLabelPaint(0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setGroupPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = 0;
      minMaxCategoryRenderer0.getSeriesItemLabelGenerator(636);
      minMaxCategoryRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null);
      minMaxCategoryRenderer0.isDrawLines();
      Icon icon0 = minMaxCategoryRenderer0.getObjectIcon();
      minMaxCategoryRenderer0.setMaxIcon(icon0);
      minMaxCategoryRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      Icon icon1 = minMaxCategoryRenderer0.getObjectIcon();
      minMaxCategoryRenderer0.setMinIcon(icon1);
      minMaxCategoryRenderer0.getGroupStroke();
      minMaxCategoryRenderer0.getMaxIcon();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Comparable<MinMaxCategoryRenderer> comparable0 = (Comparable<MinMaxCategoryRenderer>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      minMaxCategoryRenderer0.beginElementGroup(graphics2D0, comparable0, comparable0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setMaxIcon((Icon) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setDrawLines(true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Stroke stroke0 = minMaxCategoryRenderer0.getGroupStroke();
      minMaxCategoryRenderer0.setGroupStroke(stroke0);
      minMaxCategoryRenderer0.getGroupPaint();
      minMaxCategoryRenderer0.getGroupPaint();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Icon icon0 = minMaxCategoryRenderer0.getObjectIcon();
      minMaxCategoryRenderer0.setObjectIcon(icon0);
      minMaxCategoryRenderer0.lookupLegendShape(24);
      Icon icon1 = minMaxCategoryRenderer0.getObjectIcon();
      minMaxCategoryRenderer0.getGroupPaint();
      minMaxCategoryRenderer0.setMaxIcon(icon1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setMaxIcon((Icon) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Icon icon0 = minMaxCategoryRenderer0.getMaxIcon();
      minMaxCategoryRenderer0.setMinIcon(icon0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Shape shape0 = minMaxCategoryRenderer0.lookupSeriesShape((-1));
      minMaxCategoryRenderer0.setDefaultLegendShape(shape0);
      minMaxCategoryRenderer0.getMaxIcon();
      minMaxCategoryRenderer0.getMinIcon();
      minMaxCategoryRenderer0.getGroupStroke();
      minMaxCategoryRenderer0.getMaxIcon();
      minMaxCategoryRenderer0.getMinIcon();
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.equals(minMaxCategoryRenderer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setAutoPopulateSeriesOutlinePaint(true);
      Stroke stroke0 = minMaxCategoryRenderer0.lookupSeriesStroke(215);
      minMaxCategoryRenderer0.setGroupStroke(stroke0);
      Icon icon0 = minMaxCategoryRenderer0.getObjectIcon();
      minMaxCategoryRenderer0.setObjectIcon(icon0);
      minMaxCategoryRenderer0.setDrawLines(true);
      minMaxCategoryRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      minMaxCategoryRenderer0.setDrawLines(true);
      minMaxCategoryRenderer0.isDrawLines();
      minMaxCategoryRenderer0.lookupSeriesOutlinePaint((-1624));
      minMaxCategoryRenderer0.setObjectIcon(icon0);
      minMaxCategoryRenderer0.setObjectIcon(icon0);
      Icon icon1 = minMaxCategoryRenderer0.getMaxIcon();
      minMaxCategoryRenderer0.setMaxIcon(icon1);
      minMaxCategoryRenderer0.setObjectIcon(icon1);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      minMaxCategoryRenderer0.getPlot();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getDomainAxis((CategoryPlot) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      minMaxCategoryRenderer0.getLegendTextPaint(0);
      minMaxCategoryRenderer0.getLegendItem(0, 0);
      minMaxCategoryRenderer0.setDrawLines(true);
      Paint paint0 = minMaxCategoryRenderer0.getGroupPaint();
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer1.getPlot();
      minMaxCategoryRenderer1.hasListener((EventListener) null);
      minMaxCategoryRenderer0.equals(minMaxCategoryRenderer1);
      Icon icon0 = minMaxCategoryRenderer0.getMaxIcon();
      minMaxCategoryRenderer0.getObjectIcon();
      minMaxCategoryRenderer0.getMinIcon();
      minMaxCategoryRenderer0.getMinIcon();
      minMaxCategoryRenderer1.getObjectIcon();
      Object object0 = minMaxCategoryRenderer0.clone();
      minMaxCategoryRenderer0.equals(object0);
      minMaxCategoryRenderer1.setDrawLines(true);
      MinMaxCategoryRenderer minMaxCategoryRenderer2 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.equals(minMaxCategoryRenderer2);
      minMaxCategoryRenderer1.getGroupStroke();
      minMaxCategoryRenderer2.getObjectIcon();
      minMaxCategoryRenderer2.setMaxIcon(icon0);
      minMaxCategoryRenderer2.equals(paint0);
      minMaxCategoryRenderer0.getMinIcon();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      CategoryItemRendererState categoryItemRendererState0 = minMaxCategoryRenderer1.createState(plotRenderingInfo0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(categoryDataset0).getValue(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer1.drawItem(graphics2D0, categoryItemRendererState0, rectangle2D0, (CategoryPlot) null, (CategoryAxis) null, (ValueAxis) null, categoryDataset0, (-2321), 24, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.MinMaxCategoryRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setMinIcon((Icon) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      minMaxCategoryRenderer0.setDefaultLegendShape(rectangle2D_Double0);
      minMaxCategoryRenderer0.setDefaultEntityRadius((-755));
      minMaxCategoryRenderer0.setDrawLines(false);
      minMaxCategoryRenderer0.equals(rectangle2D_Double0);
      Icon icon0 = minMaxCategoryRenderer0.getMinIcon();
      minMaxCategoryRenderer0.setObjectIcon(icon0);
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.equals(minMaxCategoryRenderer1);
      minMaxCategoryRenderer0.setGroupPaint(minMaxCategoryRenderer1.DEFAULT_OUTLINE_PAINT);
      minMaxCategoryRenderer0.getGroupPaint();
      minMaxCategoryRenderer0.isDrawLines();
      minMaxCategoryRenderer1.getGroupPaint();
      minMaxCategoryRenderer0.setGroupPaint(minMaxCategoryRenderer1.DEFAULT_PAINT);
      assertTrue(minMaxCategoryRenderer0.getDefaultCreateEntities());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = (-1791);
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      Font font0 = minMaxCategoryRenderer0.getItemLabelFont(0, 1593);
      minMaxCategoryRenderer0.setDefaultLegendTextFont(font0);
      minMaxCategoryRenderer0.getDefaultLegendShape();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addItemEntity(entityCollection0, categoryDataset0, 0, 0, (Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
