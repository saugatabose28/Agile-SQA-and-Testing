/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:23:06 GMT 2023
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.data.category.CategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineAndShapeRenderer_ESTest extends LineAndShapeRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      int int0 = (-1355);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      lineAndShapeRenderer0.clearSeriesPaints(false);
      LengthAdjustmentType lengthAdjustmentType0 = mock(LengthAdjustmentType.class, new ViolatedAssumptionAnswer());
      lineAndShapeRenderer0.getSeriesItemURLGenerator((-1355));
      lineAndShapeRenderer0.setSeriesItemURLGenerator((-1355), (CategoryURLGenerator) null);
      lineAndShapeRenderer0.getSeriesShapesVisible((-2139470649));
      lineAndShapeRenderer0.getSeriesItemLabelGenerator((-923));
      lineAndShapeRenderer0.setSeriesItemLabelGenerator((-2544), (CategoryItemLabelGenerator) null);
      lineAndShapeRenderer0.getDefaultShapesFilled();
      lineAndShapeRenderer0.getDefaultShapesVisible();
      lineAndShapeRenderer0.setDrawOutlines(false);
      lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.getSeriesLinesVisible(9);
      lineAndShapeRenderer0.setDefaultShapesFilled(true);
      // Undeclared exception!
      lineAndShapeRenderer0.setSeriesShapesFilled(2147109385, (Boolean) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.setDefaultLinesVisible(true);
      lineAndShapeRenderer0.getPassCount();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryItemRendererState categoryItemRendererState0 = lineAndShapeRenderer0.createState((PlotRenderingInfo) null);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      lineAndShapeRenderer0.getPlot();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.drawItem(graphics2D0, categoryItemRendererState0, rectangle2D0, (CategoryPlot) null, (CategoryAxis) null, (ValueAxis) null, (CategoryDataset) null, 10, (-1), 1212);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.setDefaultLinesVisible(false);
      lineAndShapeRenderer0.getPassCount();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryItemRendererState categoryItemRendererState0 = lineAndShapeRenderer0.createState((PlotRenderingInfo) null);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      lineAndShapeRenderer0.getPlot();
      lineAndShapeRenderer0.drawItem(graphics2D0, categoryItemRendererState0, rectangle2D0, (CategoryPlot) null, (CategoryAxis) null, (ValueAxis) null, (CategoryDataset) null, 10, (-1), 1212);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.setDefaultEntityRadius(0);
      lineAndShapeRenderer0.setSeriesLinesVisible(0, false);
      LineAndShapeRenderer lineAndShapeRenderer1 = new LineAndShapeRenderer();
      Paint paint0 = lineAndShapeRenderer1.getItemPaint(0, 0);
      lineAndShapeRenderer0.setDefaultLegendTextPaint(paint0);
      lineAndShapeRenderer0.setDefaultShapesFilled(true);
      lineAndShapeRenderer0.getLegendItem(0, 0);
      lineAndShapeRenderer0.getSeriesVisible(0);
      lineAndShapeRenderer0.setSeriesShapesFilled(2212, (Boolean) null);
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(lineAndShapeRenderer0.ZERO).when(categoryDataset0).getRowKey(anyInt());
      Shape shape0 = lineAndShapeRenderer0.getDefaultShape();
      lineAndShapeRenderer1.addItemEntity(entityCollection0, categoryDataset0, 2212, 0, shape0);
      lineAndShapeRenderer0.getSeriesShapesVisible(2103);
      lineAndShapeRenderer0.getUseOutlinePaint();
      lineAndShapeRenderer1.lookupSeriesStroke(0);
      lineAndShapeRenderer0.setDefaultShapesFilled(false);
      lineAndShapeRenderer1.getItemShapeVisible(0, (-309));
      lineAndShapeRenderer1.setSeriesShapesFilled(0, true);
      lineAndShapeRenderer0.setSeriesShapesFilled(0, false);
      lineAndShapeRenderer1.setSeriesShapesVisible(0, (Boolean) null);
      Object object0 = lineAndShapeRenderer0.clone();
      lineAndShapeRenderer1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.setUseSeriesOffset(false);
      Paint paint0 = lineAndShapeRenderer0.lookupSeriesFillPaint(0);
      lineAndShapeRenderer0.setSeriesFillPaint(25, paint0, true);
      lineAndShapeRenderer0.setDefaultItemURLGenerator((CategoryURLGenerator) null);
      lineAndShapeRenderer0.getSeriesVisible(459);
      lineAndShapeRenderer0.setSeriesShapesFilled(459, (Boolean) null);
      lineAndShapeRenderer0.getDefaultLinesVisible();
      lineAndShapeRenderer0.setUseFillPaint(true);
      lineAndShapeRenderer0.setDefaultShapesVisible(false);
      lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.getUseFillPaint();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = lineAndShapeRenderer0.getLegendItemLabelGenerator();
      lineAndShapeRenderer0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      lineAndShapeRenderer0.equals(lineAndShapeRenderer0);
      lineAndShapeRenderer0.getUseFillPaint();
      lineAndShapeRenderer0.getPassCount();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.getSeriesLinesVisible((-2139840707));
      lineAndShapeRenderer0.setSeriesShapesVisible(1, (Boolean) null);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = lineAndShapeRenderer0.getLegendItemLabelGenerator();
      lineAndShapeRenderer0.setUseOutlinePaint(true);
      lineAndShapeRenderer0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
      lineAndShapeRenderer0.getLegendItem(2, 2);
      lineAndShapeRenderer0.equals((Object) null);
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      lineAndShapeRenderer0.setLegendTextPaint(14, color0);
      lineAndShapeRenderer0.equals(categorySeriesLabelGenerator0);
      lineAndShapeRenderer0.getUseOutlinePaint();
      lineAndShapeRenderer0.getItemMargin();
      lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.getUseFillPaint();
      lineAndShapeRenderer0.getSeriesItemURLGenerator((-2043));
      lineAndShapeRenderer0.setSeriesItemURLGenerator(14, (CategoryURLGenerator) null);
      lineAndShapeRenderer0.getItemMargin();
      lineAndShapeRenderer0.getPassCount();
      lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.getUseOutlinePaint();
      lineAndShapeRenderer0.getUseSeriesOffset();
      lineAndShapeRenderer0.getSeriesShapesVisible(1);
      lineAndShapeRenderer0.getDefaultShapesFilled();
      lineAndShapeRenderer0.getPassCount();
      lineAndShapeRenderer0.getLegendItem(14, (-2043));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = false;
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.setDrawOutlines(false);
      LineAndShapeRenderer lineAndShapeRenderer1 = new LineAndShapeRenderer(false, true);
      lineAndShapeRenderer1.setDataBoundsIncludesVisibleSeriesOnly(false);
      lineAndShapeRenderer0.equals(lineAndShapeRenderer1);
      CategoryCrosshairState categoryCrosshairState0 = mock(CategoryCrosshairState.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.updateCrosshairValues(categoryCrosshairState0, lineAndShapeRenderer1.ZERO, lineAndShapeRenderer1.ZERO, (double) lineAndShapeRenderer1.ZERO, 0, 2360.178637332, (double) lineAndShapeRenderer1.ZERO, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.getUseSeriesOffset();
      lineAndShapeRenderer0.setDrawOutlines(false);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LineAndShapeRenderer lineAndShapeRenderer1 = new LineAndShapeRenderer();
      lineAndShapeRenderer1.getRowCount();
      lineAndShapeRenderer0.beginElementGroup(graphics2D0, 0, lineAndShapeRenderer1.ZERO);
      lineAndShapeRenderer0.setDefaultShapesVisible(false);
      lineAndShapeRenderer1.getItemURLGenerator(1, 1370);
      lineAndShapeRenderer1.setSeriesItemURLGenerator(0, (CategoryURLGenerator) null, false);
      lineAndShapeRenderer0.getDrawOutlines();
      lineAndShapeRenderer0.getItemMargin();
      lineAndShapeRenderer1.setUseFillPaint(false);
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      lineAndShapeRenderer0.setUseFillPaint(true);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      lineAndShapeRenderer1.setDefaultEntityRadius(2);
      lineAndShapeRenderer1.addEntity(entityCollection0, lineAndShapeRenderer0.DEFAULT_SHAPE, categoryDataset0, 0, 0, (double) lineAndShapeRenderer0.ZERO, 7.0);
      lineAndShapeRenderer1.setDefaultShapesFilled(false);
      lineAndShapeRenderer0.setUseOutlinePaint(false);
      lineAndShapeRenderer1.setSeriesShapesFilled(0, false);
      lineAndShapeRenderer1.getItemMargin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.getLegendItems();
      lineAndShapeRenderer0.getSeriesItemLabelGenerator(1770);
      lineAndShapeRenderer0.setSeriesItemLabelGenerator(1770, (CategoryItemLabelGenerator) null);
      lineAndShapeRenderer0.getDefaultLinesVisible();
      lineAndShapeRenderer0.getPassCount();
      lineAndShapeRenderer0.getDefaultShapesVisible();
      lineAndShapeRenderer0.getItemLineVisible(2, 2);
      lineAndShapeRenderer0.getDefaultItemURLGenerator();
      lineAndShapeRenderer0.setDefaultItemURLGenerator((CategoryURLGenerator) null);
      lineAndShapeRenderer0.getUseFillPaint();
      lineAndShapeRenderer0.getItemMargin();
      lineAndShapeRenderer0.setDefaultShapesFilled(false);
      lineAndShapeRenderer0.getItemMargin();
      lineAndShapeRenderer0.setDrawOutlines(true);
      lineAndShapeRenderer0.lookupSeriesStroke(1770);
      lineAndShapeRenderer0.getItemShapeFilled(1770, (-524));
      LineAndShapeRenderer lineAndShapeRenderer1 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.equals(lineAndShapeRenderer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      int int0 = 159;
      lineAndShapeRenderer0.getLegendShape(159);
      lineAndShapeRenderer0.setSeriesShapesFilled(0, false);
      lineAndShapeRenderer0.getItemURLGenerator(297, 1858);
      lineAndShapeRenderer0.setDefaultItemURLGenerator((CategoryURLGenerator) null, false);
      lineAndShapeRenderer0.setUseFillPaint(false);
      lineAndShapeRenderer0.getPassCount();
      lineAndShapeRenderer0.getItemShapeVisible(14, 0);
      int int1 = 253;
      lineAndShapeRenderer0.getSeriesLinesVisible(253);
      lineAndShapeRenderer0.setSeriesShapesVisible(297, (Boolean) null);
      lineAndShapeRenderer0.getSeriesShapesFilled((-4363));
      lineAndShapeRenderer0.getDefaultShapesFilled();
      LineAndShapeRenderer lineAndShapeRenderer1 = new LineAndShapeRenderer(false, true);
      Object object0 = lineAndShapeRenderer1.clone();
      lineAndShapeRenderer0.equals(object0);
      lineAndShapeRenderer1.clone();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setItemMargin(2537.490107877587);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.setDefaultShapesFilled(true);
      int int0 = (-315);
      lineAndShapeRenderer0.getSeriesToolTipGenerator(0);
      lineAndShapeRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) null, true);
      lineAndShapeRenderer0.setUseSeriesOffset(true);
      lineAndShapeRenderer0.getLegendItem(0, (-315));
      lineAndShapeRenderer0.setAutoPopulateSeriesShape(true);
      lineAndShapeRenderer0.getPassCount();
      lineAndShapeRenderer0.getDrawOutlines();
      lineAndShapeRenderer0.getSeriesLinesVisible(2);
      lineAndShapeRenderer0.getUseOutlinePaint();
      lineAndShapeRenderer0.setUseFillPaint(true);
      lineAndShapeRenderer0.setDefaultLinesVisible(false);
      lineAndShapeRenderer0.getDefaultShapesFilled();
      lineAndShapeRenderer0.setUseFillPaint(false);
      lineAndShapeRenderer0.getLegendTextPaint((-2414));
      lineAndShapeRenderer0.getItemLineVisible((-3091), 2);
      lineAndShapeRenderer0.setAutoPopulateSeriesOutlinePaint(true);
      lineAndShapeRenderer0.setDefaultShapesFilled(false);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesShapesFilled((-242), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.setAutoPopulateSeriesFillPaint(true);
      lineAndShapeRenderer0.lookupSeriesShape((-362));
      lineAndShapeRenderer0.setDrawOutlines(true);
      lineAndShapeRenderer0.setUseFillPaint(true);
      lineAndShapeRenderer0.getSeriesLinesVisible(2533);
      lineAndShapeRenderer0.setDefaultLinesVisible(true);
      lineAndShapeRenderer0.setSeriesShapesVisible(2533, (Boolean) null);
      int int0 = (-2696);
      lineAndShapeRenderer0.getSeriesLinesVisible(2533);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesShapesFilled((-2696), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      int int0 = 4392;
      lineAndShapeRenderer0.setUseOutlinePaint(true);
      lineAndShapeRenderer0.getToolTipGenerator(4392, 4392);
      lineAndShapeRenderer0.setSeriesToolTipGenerator(4392, (CategoryToolTipGenerator) null, true);
      lineAndShapeRenderer0.setSeriesShapesVisible(4392, true);
      Object object0 = lineAndShapeRenderer0.clone();
      // Undeclared exception!
      lineAndShapeRenderer0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      lineAndShapeRenderer0.setDefaultLinesVisible(false);
      lineAndShapeRenderer0.getPassCount();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryItemRendererState categoryItemRendererState0 = lineAndShapeRenderer0.createState((PlotRenderingInfo) null);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      lineAndShapeRenderer0.getPlot();
      int int0 = 1212;
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.drawItem(graphics2D0, categoryItemRendererState0, rectangle2D0, (CategoryPlot) null, (CategoryAxis) null, (ValueAxis) null, (CategoryDataset) null, 10, (-1), 1212);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.setAutoPopulateSeriesOutlineStroke(false);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      lineAndShapeRenderer0.getToolTipGenerator(39, 39);
      lineAndShapeRenderer0.setSeriesToolTipGenerator(39, (CategoryToolTipGenerator) null);
      lineAndShapeRenderer0.drawItemLabel(graphics2D0, plotOrientation0, categoryDataset0, 39, 0, (-1374.730896055339), (-90.0), false);
      lineAndShapeRenderer0.getLegendItemURLGenerator();
      lineAndShapeRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      lineAndShapeRenderer0.getItemShapeFilled(2, 2);
      lineAndShapeRenderer0.getLegendItem(3661, 3661);
      lineAndShapeRenderer0.getItemShapeVisible(1, 0);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesLinesVisible((-4806), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.getPlot();
      lineAndShapeRenderer0.setUseOutlinePaint(false);
      lineAndShapeRenderer0.hasListener((EventListener) null);
      lineAndShapeRenderer0.setUseSeriesOffset(false);
      lineAndShapeRenderer0.setSeriesShapesVisible(0, true);
      lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.setUseFillPaint(true);
      lineAndShapeRenderer0.getItemShapeVisible(0, 295);
      lineAndShapeRenderer0.getUseSeriesOffset();
      lineAndShapeRenderer0.setUseOutlinePaint(true);
      lineAndShapeRenderer0.setUseSeriesOffset(true);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.getLegendItem(1948, (-829));
      lineAndShapeRenderer0.setSeriesShapesFilled(1, false);
      lineAndShapeRenderer0.setSeriesLinesVisible(1, false);
      lineAndShapeRenderer0.getPassCount();
      lineAndShapeRenderer0.getSeriesShapesFilled(1);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesShapesVisible((-2644), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      int int0 = (-749);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesShapesVisible((-749), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.getDefaultItemLabelGenerator();
      lineAndShapeRenderer0.setDefaultItemLabelGenerator((CategoryItemLabelGenerator) null);
      lineAndShapeRenderer0.setSeriesLinesVisible(2, false);
      lineAndShapeRenderer0.setUseSeriesOffset(false);
      lineAndShapeRenderer0.getItemLineVisible(2, 2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      int int0 = (-1);
      LineAndShapeRenderer lineAndShapeRenderer1 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.equals(lineAndShapeRenderer1);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setItemMargin(1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      int int0 = (-743);
      lineAndShapeRenderer0.getSeriesVisibleInLegend((-743));
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesLinesVisible((-743), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      lineAndShapeRenderer0.setAutoPopulateSeriesOutlineStroke(false);
      lineAndShapeRenderer0.getDefaultLinesVisible();
      lineAndShapeRenderer0.getItemShapeVisible((-1032), 0);
      lineAndShapeRenderer0.getSeriesLinesVisible(23);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesShapesVisible((-1949), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.setItemLabelAnchorOffset(0.0);
      lineAndShapeRenderer0.getSeriesToolTipGenerator((-4628));
      lineAndShapeRenderer0.setSeriesToolTipGenerator(458, (CategoryToolTipGenerator) null);
      boolean boolean0 = true;
      lineAndShapeRenderer0.setDefaultShapesVisible(true);
      lineAndShapeRenderer0.setSeriesShapesFilled(250, true);
      lineAndShapeRenderer0.setDefaultShapesFilled(true);
      lineAndShapeRenderer0.setItemMargin(0.0);
      lineAndShapeRenderer0.getUseOutlinePaint();
      RendererChangeEvent rendererChangeEvent0 = mock(RendererChangeEvent.class, new ViolatedAssumptionAnswer());
      lineAndShapeRenderer0.notifyListeners(rendererChangeEvent0);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesShapesVisible((-1), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      int int0 = 1011;
      lineAndShapeRenderer0.getSeriesItemLabelGenerator(1011);
      lineAndShapeRenderer0.setSeriesItemLabelGenerator((-2161), (CategoryItemLabelGenerator) null);
      lineAndShapeRenderer0.lookupSeriesShape(0);
      lineAndShapeRenderer0.getItemLineVisible(1011, 0);
      lineAndShapeRenderer0.setItemMargin(0);
      lineAndShapeRenderer0.setDefaultLinesVisible(true);
      boolean boolean0 = false;
      lineAndShapeRenderer0.setUseFillPaint(false);
      lineAndShapeRenderer0.setAutoPopulateSeriesOutlineStroke(false);
      boolean boolean1 = true;
      lineAndShapeRenderer0.setItemLabelAnchorOffset(1011);
      lineAndShapeRenderer0.setSeriesShapesFilled(0, true);
      lineAndShapeRenderer0.setDefaultShapesFilled(true);
      int int1 = 234;
      lineAndShapeRenderer0.getSeriesCreateEntities((-1106));
      lineAndShapeRenderer0.setSeriesShapesFilled(234, (Boolean) null);
      lineAndShapeRenderer0.getItemMargin();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesLinesVisible((-2161), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.getDefaultShapesVisible();
      lineAndShapeRenderer0.setUseSeriesOffset(false);
      lineAndShapeRenderer0.equals("|UIq1OEDA5<7fG=c");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.getDefaultLinesVisible();
      lineAndShapeRenderer0.getLegendItem(1828, 1828);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.getUseFillPaint();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.getDefaultShapesFilled();
      lineAndShapeRenderer0.getItemLineVisible(0, 0);
      lineAndShapeRenderer0.getSeriesVisibleInLegend(1352);
      lineAndShapeRenderer0.setSeriesShapesVisible(0, (Boolean) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.getSeriesShapesFilled(0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.setUseOutlinePaint(false);
      lineAndShapeRenderer0.setDrawOutlines(false);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.getItemLineVisible((-1), (-1011));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      lineAndShapeRenderer0.getUseOutlinePaint();
      lineAndShapeRenderer0.setDefaultLinesVisible(false);
      lineAndShapeRenderer0.setDrawOutlines(false);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.setDefaultShapesVisible(true);
      lineAndShapeRenderer0.getSeriesShapesVisible(0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.lookupSeriesOutlineStroke(1405);
      lineAndShapeRenderer0.setUseFillPaint(true);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.getItemShapeVisible(0, 0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setItemMargin((-279.976086392));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.setSeriesShapesVisible(0, true);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.setAutoPopulateSeriesStroke(false);
      lineAndShapeRenderer0.getDefaultShapesFilled();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      lineAndShapeRenderer0.getDefaultShapesVisible();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      Object object0 = lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.equals(object0);
      lineAndShapeRenderer0.getPassCount();
      lineAndShapeRenderer0.getDrawOutlines();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.getSeriesCreateEntities(2686);
      lineAndShapeRenderer0.setSeriesShapesFilled(0, (Boolean) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.getPassCount();
      lineAndShapeRenderer0.setDefaultShapesFilled(false);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.setSeriesShapesFilled(0, true);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.setAutoPopulateSeriesShape(true);
      lineAndShapeRenderer0.setSeriesLinesVisible(0, (Boolean) null);
      lineAndShapeRenderer0.getDrawOutlines();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.getSeriesVisibleInLegend((-4371));
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesLinesVisible((-4371), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      lineAndShapeRenderer0.getItemMargin();
      lineAndShapeRenderer0.getItemShapeFilled((-1078), (-1078));
      lineAndShapeRenderer0.getItemShapeFilled(0, 1773);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.getItemShapeFilled(0, 0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.setDefaultLinesVisible(false);
      lineAndShapeRenderer0.getLegendItem((-683), (-683));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.clearSeriesStrokes(true);
      lineAndShapeRenderer0.getToolTipGenerator(0, 1149);
      lineAndShapeRenderer0.setSeriesToolTipGenerator(999, (CategoryToolTipGenerator) null, true);
      lineAndShapeRenderer0.lookupLegendTextPaint(0);
      lineAndShapeRenderer0.getSeriesLinesVisible(2146707689);
      lineAndShapeRenderer0.setSeriesShapesVisible(250, (Boolean) null);
      lineAndShapeRenderer0.getPassCount();
      lineAndShapeRenderer0.getUseFillPaint();
      LineAndShapeRenderer lineAndShapeRenderer1 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.equals(lineAndShapeRenderer1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      LineAndShapeRenderer lineAndShapeRenderer1 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      lineAndShapeRenderer1.setAutoPopulateSeriesOutlineStroke(true);
      LineAndShapeRenderer lineAndShapeRenderer2 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.equals(lineAndShapeRenderer2);
      lineAndShapeRenderer0.setDefaultLinesVisible(true);
      lineAndShapeRenderer0.setSeriesShapesFilled(258, (Boolean) null);
      lineAndShapeRenderer0.getLegendItemURLGenerator();
      lineAndShapeRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      lineAndShapeRenderer0.setUseOutlinePaint(false);
      lineAndShapeRenderer0.getUseFillPaint();
      lineAndShapeRenderer0.setSeriesShapesVisible(258, false);
      lineAndShapeRenderer2.getUseSeriesOffset();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.lookupSeriesPaint(15);
      int int0 = 0;
      lineAndShapeRenderer0.getSeriesCreateEntities(2);
      lineAndShapeRenderer0.setSeriesShapesFilled(0, (Boolean) null);
      lineAndShapeRenderer0.getUseOutlinePaint();
      lineAndShapeRenderer0.getDefaultLinesVisible();
      lineAndShapeRenderer0.getDefaultLinesVisible();
      lineAndShapeRenderer0.getSeriesLinesVisible(15);
      int int1 = 0;
      lineAndShapeRenderer0.getItemLineVisible(0, (-806));
      LineAndShapeRenderer lineAndShapeRenderer1 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.getPassCount();
      lineAndShapeRenderer0.getUseFillPaint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      lineAndShapeRenderer0.getPlot();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      lineAndShapeRenderer0.setDrawOutlines(true);
      lineAndShapeRenderer1.clone();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.initialise(graphics2D1, rectangle2D0, (CategoryPlot) null, (-33), plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      lineAndShapeRenderer0.setDefaultLegendTextPaint(color0);
      lineAndShapeRenderer0.setDefaultLinesVisible(false);
      lineAndShapeRenderer0.getPassCount();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryItemRendererState categoryItemRendererState0 = lineAndShapeRenderer0.createState((PlotRenderingInfo) null);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      lineAndShapeRenderer0.getPlot();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.drawItem(graphics2D0, categoryItemRendererState0, rectangle2D0, (CategoryPlot) null, (CategoryAxis) null, (ValueAxis) null, (CategoryDataset) null, 10, (-1), 1212);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.getLegendItemToolTipGenerator();
      lineAndShapeRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      lineAndShapeRenderer0.getLegendShape(0);
      lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.setSeriesLinesVisible(1407, false);
      lineAndShapeRenderer0.setSeriesLinesVisible(1407, false);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setItemMargin(576.8066);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      assertNotNull(lineAndShapeRenderer0);
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = lineAndShapeRenderer0.getPlot();
      assertNull(categoryPlot0);
      assertFalse(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getDefaultCreateEntities());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getDefaultItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getDefaultLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.drawBackground(graphics2D0, (CategoryPlot) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.setDefaultEntityRadius(0);
      lineAndShapeRenderer0.setSeriesLinesVisible(0, false);
      LineAndShapeRenderer lineAndShapeRenderer1 = new LineAndShapeRenderer();
      Paint paint0 = lineAndShapeRenderer1.getItemPaint(0, 0);
      lineAndShapeRenderer0.setDefaultLegendTextPaint(paint0);
      lineAndShapeRenderer0.setDefaultShapesFilled(true);
      lineAndShapeRenderer0.getLegendItem(0, 0);
      lineAndShapeRenderer0.getSeriesVisible(0);
      lineAndShapeRenderer0.setSeriesShapesFilled(2212, (Boolean) null);
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(lineAndShapeRenderer0.ZERO).when(categoryDataset0).getRowKey(anyInt());
      Shape shape0 = lineAndShapeRenderer0.getDefaultShape();
      lineAndShapeRenderer1.addItemEntity(entityCollection0, categoryDataset0, 2212, 0, shape0);
      lineAndShapeRenderer0.getSeriesShapesVisible(2103);
      lineAndShapeRenderer0.getUseOutlinePaint();
      lineAndShapeRenderer0.setDefaultShapesFilled(false);
      lineAndShapeRenderer1.getItemShapeVisible(0, (-309));
      lineAndShapeRenderer1.setSeriesShapesFilled(0, true);
      lineAndShapeRenderer0.setSeriesShapesFilled(0, false);
      assertFalse(lineAndShapeRenderer0.getDefaultShapesFilled());
      
      lineAndShapeRenderer1.setSeriesShapesVisible(0, (Boolean) null);
      assertFalse(lineAndShapeRenderer1.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.getUseSeriesOffset();
      RendererChangeEvent rendererChangeEvent0 = mock(RendererChangeEvent.class, new ViolatedAssumptionAnswer());
      lineAndShapeRenderer0.getSeriesShapesFilled((-1204));
      boolean boolean1 = lineAndShapeRenderer0.equals("Bq");
      lineAndShapeRenderer0.lookupSeriesOutlinePaint(7493);
      lineAndShapeRenderer0.getSeriesShapesVisible((-1204));
      boolean boolean2 = lineAndShapeRenderer0.getItemShapeFilled(2, 2704);
      assertFalse(boolean2 == boolean0);
      
      lineAndShapeRenderer0.getSeriesLinesVisible((-604));
      boolean boolean3 = lineAndShapeRenderer0.getItemLineVisible((-1204), 0);
      assertTrue(lineAndShapeRenderer0.getDefaultShapesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(boolean3 == boolean1);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(boolean3);
  }
}
