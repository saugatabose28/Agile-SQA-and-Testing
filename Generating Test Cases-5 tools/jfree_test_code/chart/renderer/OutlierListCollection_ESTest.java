/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:09:40 GMT 2023
 */

package org.jfree.chart.renderer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.renderer.Outlier;
import org.jfree.chart.renderer.OutlierListCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutlierListCollection_ESTest extends OutlierListCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OutlierListCollection outlierListCollection0 = new OutlierListCollection();
      outlierListCollection0.iterator();
      Outlier outlier0 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      outlierListCollection0.add(outlier0);
      Outlier outlier1 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(outlier1).overlaps(any(org.jfree.chart.renderer.Outlier.class));
      outlierListCollection0.add(outlier1);
      Outlier outlier2 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(outlier2).overlaps(any(org.jfree.chart.renderer.Outlier.class));
      outlierListCollection0.add(outlier2);
      outlierListCollection0.isHighFarOut();
      outlierListCollection0.isHighFarOut();
      outlierListCollection0.iterator();
      outlierListCollection0.isLowFarOut();
      outlierListCollection0.iterator();
      Outlier outlier3 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(outlier3).overlaps(any(org.jfree.chart.renderer.Outlier.class));
      outlierListCollection0.add(outlier3);
      outlierListCollection0.isHighFarOut();
      Outlier outlier4 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(outlier4).overlaps(any(org.jfree.chart.renderer.Outlier.class));
      outlierListCollection0.add(outlier4);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OutlierListCollection outlierListCollection0 = new OutlierListCollection();
      Outlier outlier0 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      outlierListCollection0.add(outlier0);
      Outlier outlier1 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(outlier1).overlaps(any(org.jfree.chart.renderer.Outlier.class));
      outlierListCollection0.add(outlier1);
      outlierListCollection0.iterator();
      outlierListCollection0.setHighFarOut(true);
      outlierListCollection0.setLowFarOut(true);
      outlierListCollection0.setHighFarOut(true);
      outlierListCollection0.setHighFarOut(true);
      outlierListCollection0.setHighFarOut(true);
      outlierListCollection0.isHighFarOut();
      outlierListCollection0.isHighFarOut();
      outlierListCollection0.iterator();
      outlierListCollection0.iterator();
      Outlier outlier2 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(outlier2).overlaps(any(org.jfree.chart.renderer.Outlier.class));
      outlierListCollection0.add(outlier2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OutlierListCollection outlierListCollection0 = new OutlierListCollection();
      outlierListCollection0.setHighFarOut(false);
      Outlier outlier0 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      outlierListCollection0.add(outlier0);
      outlierListCollection0.iterator();
      Outlier outlier1 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(outlier1).overlaps(any(org.jfree.chart.renderer.Outlier.class));
      outlierListCollection0.add(outlier1);
      outlierListCollection0.setLowFarOut(true);
      outlierListCollection0.iterator();
      outlierListCollection0.isHighFarOut();
      outlierListCollection0.setHighFarOut(false);
      outlierListCollection0.isLowFarOut();
      outlierListCollection0.iterator();
      Outlier outlier2 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(outlier2).overlaps(any(org.jfree.chart.renderer.Outlier.class));
      outlierListCollection0.add(outlier2);
      outlierListCollection0.setLowFarOut(true);
      outlierListCollection0.setHighFarOut(true);
      outlierListCollection0.isLowFarOut();
      outlierListCollection0.setHighFarOut(true);
      outlierListCollection0.isLowFarOut();
      outlierListCollection0.setHighFarOut(true);
      outlierListCollection0.iterator();
      outlierListCollection0.isHighFarOut();
      outlierListCollection0.isLowFarOut();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OutlierListCollection outlierListCollection0 = new OutlierListCollection();
      Outlier outlier0 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      outlierListCollection0.add(outlier0);
      outlierListCollection0.setLowFarOut(true);
      outlierListCollection0.iterator();
      outlierListCollection0.setHighFarOut(true);
      Outlier outlier1 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(outlier1).overlaps(any(org.jfree.chart.renderer.Outlier.class));
      outlierListCollection0.add(outlier1);
      outlierListCollection0.setHighFarOut(false);
      outlierListCollection0.iterator();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OutlierListCollection outlierListCollection0 = new OutlierListCollection();
      Outlier outlier0 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      outlierListCollection0.add(outlier0);
      outlierListCollection0.iterator();
      Outlier outlier1 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(outlier1).overlaps(any(org.jfree.chart.renderer.Outlier.class));
      outlierListCollection0.setHighFarOut(false);
      outlierListCollection0.add(outlier1);
      outlierListCollection0.setHighFarOut(true);
      outlierListCollection0.iterator();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OutlierListCollection outlierListCollection0 = new OutlierListCollection();
      outlierListCollection0.isLowFarOut();
      outlierListCollection0.isHighFarOut();
      outlierListCollection0.setLowFarOut(false);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OutlierListCollection outlierListCollection0 = new OutlierListCollection();
      outlierListCollection0.isLowFarOut();
      outlierListCollection0.setLowFarOut(false);
      Outlier outlier0 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      outlierListCollection0.add(outlier0);
      outlierListCollection0.setHighFarOut(false);
      Outlier outlier1 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(outlier1).overlaps(any(org.jfree.chart.renderer.Outlier.class));
      outlierListCollection0.add(outlier1);
      outlierListCollection0.iterator();
      outlierListCollection0.iterator();
      outlierListCollection0.isLowFarOut();
      outlierListCollection0.iterator();
      outlierListCollection0.iterator();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OutlierListCollection outlierListCollection0 = new OutlierListCollection();
      outlierListCollection0.setHighFarOut(true);
      outlierListCollection0.setLowFarOut(true);
      outlierListCollection0.setHighFarOut(true);
      outlierListCollection0.isLowFarOut();
      outlierListCollection0.setHighFarOut(true);
      outlierListCollection0.iterator();
      Outlier outlier0 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      outlierListCollection0.add(outlier0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OutlierListCollection outlierListCollection0 = new OutlierListCollection();
      Outlier outlier0 = mock(Outlier.class, new ViolatedAssumptionAnswer());
      outlierListCollection0.setLowFarOut(false);
      outlierListCollection0.add(outlier0);
      outlierListCollection0.iterator();
      outlierListCollection0.setHighFarOut(false);
      outlierListCollection0.iterator();
      outlierListCollection0.isLowFarOut();
  }
}
