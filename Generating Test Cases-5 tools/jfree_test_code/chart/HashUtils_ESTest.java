/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:24:00 GMT 2023
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.MultipleGradientPaint;
import java.awt.Paint;
import java.awt.RadialGradientPaint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.HashUtils;
import org.jfree.chart.util.AbstractObjectList;
import org.jfree.chart.util.BooleanList;
import org.jfree.chart.util.PaintList;
import org.jfree.chart.util.StrokeList;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HashUtils_ESTest extends HashUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Color color0 = Color.white;
      assertNotNull(color0);
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      
      GradientPaint gradientPaint0 = new GradientPaint(0, 586.1F, color0, 0, 0.0F, color0, false);
      assertNotNull(gradientPaint0);
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(1, gradientPaint0.getTransparency());
      assertFalse(gradientPaint0.isCyclic());
      
      HashUtils.hashCode(0, (Paint) gradientPaint0);
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(1, gradientPaint0.getTransparency());
      assertFalse(gradientPaint0.isCyclic());
      
      HashUtils.hashCodeForPaint(gradientPaint0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Color color0 = Color.white;
      GradientPaint gradientPaint0 = new GradientPaint(0, 586.1F, color0, 0.0F, 586.1F, color0);
      HashUtils.hashCode(0, (Paint) gradientPaint0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      Color color0 = Color.cyan;
      float[] floatArray0 = new float[4];
      color0.getColorSpace();
      paintList0.clear();
      floatArray0[0] = (float) 0;
      color0.getComponents(floatArray0);
      paintList0.clone();
      color0.getRGBColorComponents(floatArray0);
      paintList0.clone();
      paintList0.setPaint(0, color0);
      HashUtils.hashCode(0, paintList0);
      HashUtils.hashCode((-5368), paintList0);
      HashUtils.hashCode(0, false);
      HashUtils.hashCodeForPaint(color0);
      HashUtils.hashCode(8, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-5368);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) (-5368);
      doubleArray0[6] = (double) 0.0F;
      HashUtils.hashCodeForDoubleArray(doubleArray0);
      HashUtils.hashCode(8, (Comparable) (-5368.0));
      HashUtils.hashCode((-789), (-1.0));
      HashUtils hashUtils0 = new HashUtils();
      BooleanList booleanList0 = new BooleanList();
      HashUtils.hashCode((-5368), booleanList0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashUtils.hashCode(31, false);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HashUtils.hashCode(31, comparable0);
      BooleanList booleanList0 = new BooleanList();
      Boolean boolean0 = Boolean.FALSE;
      booleanList0.setBoolean(1, boolean0);
      Boolean boolean1 = new Boolean("");
      booleanList0.setBoolean(0, boolean1);
      booleanList0.setBoolean(0, (Boolean) null);
      HashUtils.hashCode(31, booleanList0);
      HashUtils.hashCode(0, false);
      StrokeList strokeList0 = new StrokeList();
      HashUtils.hashCode(0, strokeList0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BooleanList booleanList0 = new BooleanList();
      assertNotNull(booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      BooleanList booleanList1 = (BooleanList)booleanList0.clone();
      assertNotNull(booleanList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(booleanList1.equals((Object)booleanList0));
      assertNotSame(booleanList0, booleanList1);
      assertNotSame(booleanList1, booleanList0);
      assertEquals(0, booleanList0.size());
      assertEquals(0, booleanList1.size());
      
      booleanList0.clear();
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(booleanList0.equals((Object)booleanList1));
      assertNotSame(booleanList0, booleanList1);
      assertEquals(0, booleanList0.size());
      
      Boolean boolean0 = booleanList0.getBoolean((-110));
      assertNull(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(booleanList0.equals((Object)booleanList1));
      assertNotSame(booleanList0, booleanList1);
      assertEquals(0, booleanList0.size());
      
      booleanList0.setBoolean(110, (Boolean) null);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(booleanList0.equals((Object)booleanList1));
      assertNotSame(booleanList0, booleanList1);
      assertEquals(111, booleanList0.size());
      
      HashUtils.hashCode((-2526), booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(booleanList0.equals((Object)booleanList1));
      assertNotSame(booleanList0, booleanList1);
      assertEquals(111, booleanList0.size());
      
      PaintList paintList0 = new PaintList();
      assertNotNull(paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, paintList0.size());
      
      boolean boolean1 = paintList0.equals(booleanList0);
      assertFalse(boolean1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(booleanList0.equals((Object)booleanList1));
      assertNotSame(booleanList0, booleanList1);
      assertEquals(111, booleanList0.size());
      assertEquals(0, paintList0.size());
      
      SystemColor systemColor0 = SystemColor.text;
      assertNotNull(systemColor0);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getBlue());
      assertEquals((-4144960), systemColor0.getRGB());
      
      paintList0.setPaint(1050, systemColor0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1051, paintList0.size());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getBlue());
      assertEquals((-4144960), systemColor0.getRGB());
      
      boolean boolean2 = paintList0.equals(booleanList1);
      assertFalse(boolean2);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(booleanList0.equals((Object)booleanList1));
      assertTrue(booleanList1.equals((Object)booleanList0));
      assertTrue(boolean2 == boolean1);
      assertNotSame(booleanList0, booleanList1);
      assertNotSame(booleanList1, booleanList0);
      assertEquals(111, booleanList0.size());
      assertEquals(0, booleanList1.size());
      assertEquals(1051, paintList0.size());
      
      PaintList paintList1 = (PaintList)paintList0.clone();
      assertNotNull(paintList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotSame(paintList0, paintList1);
      assertNotSame(paintList1, paintList0);
      assertEquals(1051, paintList0.size());
      assertEquals(1051, paintList1.size());
      
      HashUtils.hashCode((-2526), paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(paintList0.equals((Object)paintList1));
      assertNotSame(paintList0, paintList1);
      assertEquals(1051, paintList0.size());
      
      boolean boolean3 = booleanList0.equals(systemColor0);
      assertFalse(boolean3);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(booleanList0.equals((Object)booleanList1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotSame(booleanList0, booleanList1);
      assertEquals(111, booleanList0.size());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getBlue());
      assertEquals((-4144960), systemColor0.getRGB());
      
      HashUtils.hashCode(2553, (Paint) systemColor0);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getBlue());
      assertEquals((-4144960), systemColor0.getRGB());
      
      HashUtils.hashCode((-2526), 1050);
      Boolean boolean4 = new Boolean("org.jfree.chart.ChartHints");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2526);
      floatArray0[1] = (float) 110;
      floatArray0[2] = (float) 110;
      floatArray0[3] = 3551.97F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 110;
      floatArray0[6] = (float) (-110);
      floatArray0[7] = (float) 110;
      float[] floatArray1 = systemColor0.getColorComponents(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getBlue());
      assertEquals((-4144960), systemColor0.getRGB());
      assertArrayEquals(new float[] {0.7529412F, 0.7529412F, 0.7529412F, 3551.97F, 0.0F, 110.0F, (-110.0F), 110.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.7529412F, 0.7529412F, 0.7529412F, 3551.97F, 0.0F, 110.0F, (-110.0F), 110.0F}, floatArray1, 0.01F);
      
      booleanList0.setBoolean(8, boolean4);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(booleanList0.equals((Object)booleanList1));
      assertNotSame(booleanList0, booleanList1);
      assertEquals(111, booleanList0.size());
      
      HashUtils.hashCode(414, (Object) null);
      HashUtils.hashCode((-2526), booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(booleanList0.equals((Object)booleanList1));
      assertNotSame(booleanList0, booleanList1);
      assertEquals(111, booleanList0.size());
      
      HashUtils.hashCode(1050, "i;rkvwe$");
      int int0 = HashUtils.hashCodeForPaint(systemColor0);
      assertEquals(3, int0);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getBlue());
      assertEquals((-4144960), systemColor0.getRGB());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 777;
      BooleanList booleanList0 = new BooleanList();
      assertNotNull(booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      int int1 = 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = booleanList0.equals(object0);
      assertFalse(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      int int2 = Boolean.compare(false, false);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      boolean boolean2 = Boolean.getBoolean("Y>oblL=<iDj");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = booleanList0.equals("Y>oblL=<iDj");
      assertFalse(boolean3);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(0, booleanList0.size());
      
      booleanList0.setBoolean(0, boolean1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean2));
      assertEquals(1, booleanList0.size());
      
      int int3 = HashUtils.hashCode(777, booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, booleanList0.size());
      
      int int4 = 0;
      BooleanList booleanList1 = (BooleanList)booleanList0.clone();
      assertNotNull(booleanList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(booleanList1.equals((Object)booleanList0));
      assertNotSame(booleanList0, booleanList1);
      assertNotSame(booleanList1, booleanList0);
      assertEquals(1, booleanList0.size());
      assertEquals(1, booleanList1.size());
      
      BasicStroke basicStroke0 = null;
      try {
        basicStroke0 = new BasicStroke(8, 3446, 0, 372.38F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal end cap value
         //
         verifyException("java.awt.BasicStroke", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-231.64113778934);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3085.12116313626);
      doubleArray0[4] = 3610.6367803786;
      doubleArray0[5] = (-2471.9961503808);
      int int0 = HashUtils.hashCodeForDoubleArray(doubleArray0);
      assertEquals(1027363579, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-231.64113778934), 0.0, 0.0, (-3085.12116313626), 3610.6367803786, (-2471.9961503808)}, doubleArray0, 0.01);
      
      int int1 = HashUtils.hashCode(1027363579, (Comparable) 0.0);
      assertFalse(int1 == int0);
      
      int int2 = HashUtils.hashCodeForDoubleArray(doubleArray0);
      assertEquals(1027363579, int2);
      assertTrue(int2 == int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-231.64113778934), 0.0, 0.0, (-3085.12116313626), 3610.6367803786, (-2471.9961503808)}, doubleArray0, 0.01);
      
      StrokeList strokeList0 = new StrokeList();
      assertNotNull(strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      BasicStroke basicStroke0 = new BasicStroke(1027363579);
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.02736358E9F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      StrokeList strokeList1 = (StrokeList)strokeList0.clone();
      assertNotNull(strokeList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(strokeList1.equals((Object)strokeList0));
      assertNotSame(strokeList0, strokeList1);
      assertNotSame(strokeList1, strokeList0);
      assertEquals(0, strokeList0.size());
      assertEquals(0, strokeList1.size());
      
      Rectangle rectangle0 = new Rectangle();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      
      Path2D.Float path2D_Float0 = (Path2D.Float)basicStroke0.createStrokedShape(rectangle0);
      assertNotNull(path2D_Float0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.02736358E9F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(1, path2D_Float0.getWindingRule());
      
      boolean boolean0 = strokeList0.equals(basicStroke0);
      assertFalse(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(strokeList0.equals((Object)strokeList1));
      assertNotSame(strokeList0, strokeList1);
      assertEquals(0, strokeList0.size());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.02736358E9F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      strokeList0.setStroke(1, basicStroke0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(strokeList0.equals((Object)strokeList1));
      assertNotSame(strokeList0, strokeList1);
      assertEquals(2, strokeList0.size());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.02736358E9F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      StrokeList strokeList2 = (StrokeList)strokeList0.clone();
      assertNotNull(strokeList2);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(strokeList2.equals((Object)strokeList1));
      assertTrue(strokeList2.equals((Object)strokeList0));
      assertFalse(strokeList0.equals((Object)strokeList1));
      assertNotSame(strokeList2, strokeList1);
      assertNotSame(strokeList2, strokeList0);
      assertNotSame(strokeList0, strokeList1);
      assertNotSame(strokeList0, strokeList2);
      assertEquals(2, strokeList2.size());
      assertEquals(2, strokeList0.size());
      
      int int3 = HashUtils.hashCode(1, strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(strokeList0.equals((Object)strokeList1));
      assertTrue(strokeList0.equals((Object)strokeList2));
      assertNotSame(strokeList0, strokeList1);
      assertNotSame(strokeList0, strokeList2);
      assertEquals(2, strokeList0.size());
      
      int int4 = HashUtils.hashCode(29, (Comparable) (-3085.12116313626));
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      
      int int5 = HashUtils.hashCode((-363), 0.0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      
      int int6 = HashUtils.hashCode((-363), (Object) strokeList2);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(strokeList2.equals((Object)strokeList1));
      assertTrue(strokeList2.equals((Object)strokeList0));
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(strokeList0.equals((Object)strokeList1));
      assertTrue(strokeList0.equals((Object)strokeList2));
      assertNotSame(strokeList2, strokeList1);
      assertNotSame(strokeList2, strokeList0);
      assertNotSame(strokeList0, strokeList1);
      assertNotSame(strokeList0, strokeList2);
      assertEquals(2, strokeList2.size());
      assertEquals(2, strokeList0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 2030;
      StrokeList strokeList0 = new StrokeList();
      assertNotNull(strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      Stroke stroke0 = strokeList0.getStroke(2030);
      assertNull(stroke0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      strokeList0.setStroke(2030, (Stroke) null);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(2031, strokeList0.size());
      
      StrokeList strokeList1 = (StrokeList)strokeList0.clone();
      assertNotNull(strokeList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotSame(strokeList0, strokeList1);
      assertNotSame(strokeList1, strokeList0);
      assertEquals(2031, strokeList0.size());
      assertEquals(2031, strokeList1.size());
      
      int int1 = HashUtils.hashCode(2030, strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(int1 == int0);
      assertNotSame(strokeList0, strokeList1);
      assertEquals(2031, strokeList0.size());
      
      int int2 = (-341);
      PaintList paintList0 = new PaintList();
      assertNotNull(paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, paintList0.size());
      
      PaintList paintList1 = (PaintList)paintList0.clone();
      assertNotNull(paintList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(paintList1.equals((Object)paintList0));
      assertNotSame(paintList0, paintList1);
      assertNotSame(paintList1, paintList0);
      assertEquals(0, paintList0.size());
      assertEquals(0, paintList1.size());
      
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      // Undeclared exception!
      try { 
        strokeList0.setStroke((-341), basicStroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Color color0 = Color.LIGHT_GRAY;
      assertNotNull(color0);
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      
      Color color1 = Color.getColor("", color0);
      assertNotNull(color1);
      assertSame(color0, color1);
      assertSame(color1, color0);
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color1.getRed());
      assertEquals(192, color1.getBlue());
      assertEquals(192, color1.getGreen());
      assertEquals((-4144960), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      
      int int0 = HashUtils.hashCodeForPaint(color0);
      assertEquals(1, int0);
      assertSame(color0, color1);
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      
      int int1 = HashUtils.hashCode(1, (Comparable) null);
      assertFalse(int1 == int0);
      
      PaintList paintList0 = new PaintList();
      assertNotNull(paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, paintList0.size());
      
      int int2 = HashUtils.hashCode(1, paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(int2 == int0);
      assertEquals(0, paintList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BooleanList booleanList0 = new BooleanList();
      assertNotNull(booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      booleanList0.clear();
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      HashUtils.hashCode(0, booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      HashUtils.hashCode(0, booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      HashUtils.hashCode(0, (Object) booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      HashUtils.hashCode(8, (PaintList) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      HashUtils.hashCode(29, (Stroke) basicStroke0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      float[] floatArray0 = basicStroke0.getDashArray();
      assertNull(floatArray0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 29, 4837.846142926367, 0.0);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(29.0, rectangle2D_Double0.y, 0.01);
      assertEquals(4837.846142926367, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(29.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(29.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2418.9230714631835, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(4837.846142926367, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(29.0, rectangle2D_Double0.getMaxY(), 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(29.0, rectangle2D_Double0.y, 0.01);
      assertEquals(4837.846142926367, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(4838, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(29, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(29.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(29.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2418.9230714631835, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(4837.846142926367, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(29.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(29.0, rectangle0.getMinY(), 0.01);
      assertEquals(4838.0, rectangle0.getWidth(), 0.01);
      assertEquals(29.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(4838.0, rectangle0.getMaxX(), 0.01);
      assertEquals(29.0, rectangle0.getY(), 0.01);
      assertEquals(2419.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(29.0, rectangle0.getCenterY(), 0.01);
      
      boolean boolean0 = rectangle0.contains(0.0, 0.0, 0.0, 1789.3864900522);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(29.0, rectangle2D_Double0.y, 0.01);
      assertEquals(4837.846142926367, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(4838, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(29, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(29.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(29.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2418.9230714631835, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(4837.846142926367, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(29.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(29.0, rectangle0.getMinY(), 0.01);
      assertEquals(4838.0, rectangle0.getWidth(), 0.01);
      assertEquals(29.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(4838.0, rectangle0.getMaxX(), 0.01);
      assertEquals(29.0, rectangle0.getY(), 0.01);
      assertEquals(2419.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(29.0, rectangle0.getCenterY(), 0.01);
      
      Path2D.Float path2D_Float0 = (Path2D.Float)basicStroke0.createStrokedShape(rectangle0);
      assertNotNull(path2D_Float0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(29.0, rectangle2D_Double0.y, 0.01);
      assertEquals(4837.846142926367, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(4838, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(29, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(29.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(29.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2418.9230714631835, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(4837.846142926367, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(29.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(29.0, rectangle0.getMinY(), 0.01);
      assertEquals(4838.0, rectangle0.getWidth(), 0.01);
      assertEquals(29.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(4838.0, rectangle0.getMaxX(), 0.01);
      assertEquals(29.0, rectangle0.getY(), 0.01);
      assertEquals(2419.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(29.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1, path2D_Float0.getWindingRule());
      
      HashUtils.hashCode(0, (Stroke) basicStroke0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      Point2D.Float point2D_Float0 = new Point2D.Float(29, 0);
      assertNotNull(point2D_Float0);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(29.0F, point2D_Float0.x, 0.01F);
      
      rectangle2D_Double0.setFrameFromCenter((Point2D) point2D_Float0, (Point2D) point2D_Float0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(29.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(29.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(29.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(29.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(29.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      
      boolean boolean1 = rectangle0.contains((-1.0), (-1471.2176325));
      assertFalse(boolean1);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(29.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(4838, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(29, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(29.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(29.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(29.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(29.0, rectangle0.getMinY(), 0.01);
      assertEquals(4838.0, rectangle0.getWidth(), 0.01);
      assertEquals(29.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(4838.0, rectangle0.getMaxX(), 0.01);
      assertEquals(29.0, rectangle0.getY(), 0.01);
      assertEquals(2419.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(29.0, rectangle0.getCenterY(), 0.01);
      
      HashUtils.hashCode(305, true);
      HashUtils hashUtils0 = new HashUtils();
      assertNotNull(hashUtils0);
      
      HashUtils.hashCode(0, 29);
      HashUtils.hashCode(0, (Stroke) basicStroke0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      BooleanList booleanList0 = new BooleanList();
      assertNotNull(booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      HashUtils.hashCode((-560), booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      HashUtils.hashCode(0, false);
      HashUtils.hashCode(8, (double) 4838);
      HashUtils.hashCode(0, (StrokeList) null);
      PaintList paintList0 = new PaintList();
      assertNotNull(paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, paintList0.size());
      
      HashUtils.hashCode(193, paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, paintList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashUtils.hashCode(4262, (BooleanList) null);
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      HashUtils.hashCode(4262, (Stroke) basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashUtils.hashCode((-218), (-218));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-218);
      doubleArray0[1] = (double) (-218);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-218);
      doubleArray0[4] = (double) (-218);
      int int0 = HashUtils.hashCodeForDoubleArray(doubleArray0);
      assertEquals(1513962349, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-218.0), (-218.0), 0.0, (-218.0), (-218.0)}, doubleArray0, 0.01);
      
      PaintList paintList0 = new PaintList();
      assertNotNull(paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, paintList0.size());
      
      int int1 = HashUtils.hashCode(1513962349, paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(int1 == int0);
      assertEquals(0, paintList0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashUtils.hashCode(220, false);
      Color color0 = Color.DARK_GRAY;
      assertNotNull(color0);
      assertEquals((-12566464), color0.getRGB());
      assertEquals(64, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(64, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(64, color0.getBlue());
      
      int int0 = HashUtils.hashCodeForPaint(color0);
      assertEquals(1, int0);
      assertEquals((-12566464), color0.getRGB());
      assertEquals(64, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(64, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(64, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrokeList strokeList0 = new StrokeList();
      assertNotNull(strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      Stroke stroke0 = strokeList0.getStroke(1490);
      assertNull(stroke0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      HashUtils.hashCode(1490, (Stroke) null);
      HashUtils.hashCode(8, strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      HashUtils.hashCode(1490, (Comparable) 8);
      HashUtils.hashCode(1347, (Object) null);
      HashUtils.hashCode(0, (Stroke) null);
      HashUtils.hashCode(1399, false);
      HashUtils.hashCode(1347, 8);
      HashUtils.hashCode(29, 0.0);
      HashUtils hashUtils0 = new HashUtils();
      assertNotNull(hashUtils0);
      
      HashUtils.hashCode(1490, false);
      BooleanList booleanList0 = new BooleanList();
      assertNotNull(booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      HashUtils.hashCode(1399, booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      double[] doubleArray0 = new double[0];
      int int0 = HashUtils.hashCodeForDoubleArray(doubleArray0);
      assertEquals(193, int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int1 = HashUtils.hashCode(0, strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(int1 == int0);
      assertEquals(0, strokeList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashUtils.hashCode(909, (Stroke) null);
      BooleanList booleanList0 = new BooleanList();
      assertNotNull(booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      BooleanList booleanList1 = (BooleanList)booleanList0.clone();
      assertNotNull(booleanList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(booleanList1.equals((Object)booleanList0));
      assertNotSame(booleanList0, booleanList1);
      assertNotSame(booleanList1, booleanList0);
      assertEquals(0, booleanList0.size());
      assertEquals(0, booleanList1.size());
      
      HashUtils.hashCode(8, booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(booleanList0.equals((Object)booleanList1));
      assertNotSame(booleanList0, booleanList1);
      assertEquals(0, booleanList0.size());
      
      HashUtils.hashCode((-1340), (Comparable) 8);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      int int0 = HashUtils.hashCodeForDoubleArray(doubleArray0);
      assertEquals((-1070083323), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrokeList strokeList0 = new StrokeList();
      assertNotNull(strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      boolean boolean0 = strokeList0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      HashUtils.hashCode(791, strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashUtils.hashCode((-4309), "Fx5#rc_*f=f#qxNP}C");
      HashUtils hashUtils0 = new HashUtils();
      assertNotNull(hashUtils0);
      
      HashUtils.hashCode((-4309), (Comparable) "Fx5#rc_*f=f#qxNP}C");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashUtils.hashCode((-1243), (-616.137));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashUtils.hashCode((-1900), "Requires index >= 0.");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      assertNotNull(systemColor0);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(224, systemColor0.getGreen());
      assertEquals((-2039584), systemColor0.getRGB());
      assertEquals(224, systemColor0.getRed());
      assertEquals(224, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      
      int int0 = HashUtils.hashCodeForPaint(systemColor0);
      assertEquals(1, int0);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(224, systemColor0.getGreen());
      assertEquals((-2039584), systemColor0.getRGB());
      assertEquals(224, systemColor0.getRed());
      assertEquals(224, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      
      int int1 = HashUtils.hashCode(0, (String) null);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashUtils hashUtils0 = new HashUtils();
      assertNotNull(hashUtils0);
      
      SystemColor systemColor0 = SystemColor.textHighlightText;
      assertNotNull(systemColor0);
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(255, systemColor0.getGreen());
      assertEquals(255, systemColor0.getBlue());
      
      HashUtils.hashCode(2499, (Paint) systemColor0);
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(255, systemColor0.getGreen());
      assertEquals(255, systemColor0.getBlue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashUtils.hashCode((-1), object0);
      BooleanList booleanList0 = new BooleanList();
      assertNotNull(booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      BooleanList booleanList1 = (BooleanList)booleanList0.clone();
      assertNotNull(booleanList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(booleanList1.equals((Object)booleanList0));
      assertNotSame(booleanList0, booleanList1);
      assertNotSame(booleanList1, booleanList0);
      assertEquals(0, booleanList0.size());
      assertEquals(0, booleanList1.size());
      
      HashUtils.hashCode(0, booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(booleanList0.equals((Object)booleanList1));
      assertNotSame(booleanList0, booleanList1);
      assertEquals(0, booleanList0.size());
      
      int int0 = (-1942);
      try { 
        Color.decode(">$k'$`J*@W1E=`3#SN&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">$k'$`J*@W1E=`3#SN&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashUtils.hashCode((-1), true);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 463.6975;
      doubleArray0[2] = 1.0;
      int int0 = HashUtils.hashCodeForDoubleArray(doubleArray0);
      assertEquals((-691338199), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 463.6975, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = HashUtils.hashCodeForDoubleArray((double[]) null);
      assertEquals(0, int0);
      
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      assertNotNull(systemColor0);
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      
      int int1 = HashUtils.hashCode(0, (Paint) systemColor0);
      assertFalse(int1 == int0);
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashUtils.hashCode(0, object0);
      int int0 = HashUtils.hashCodeForPaint((Paint) null);
      assertEquals(0, int0);
      
      PaintList paintList0 = new PaintList();
      assertNotNull(paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, paintList0.size());
      
      int int1 = HashUtils.hashCode((-44), paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(int1 == int0);
      assertEquals(0, paintList0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashUtils.hashCode(111, object0);
      HashUtils.hashCode((-2073), (Stroke) null);
      HashUtils.hashCode(111, (-87));
      HashUtils.hashCode(0, true);
      HashUtils.hashCode((-851), false);
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      HashUtils.hashCode((-87), (Stroke) basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      HashUtils.hashCode((-851), (Object) null);
      StrokeList strokeList0 = new StrokeList();
      assertNotNull(strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      HashUtils.hashCode(111, strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      float[] floatArray0 = basicStroke0.getDashArray();
      assertNull(floatArray0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      HashUtils.hashCode(37, (BooleanList) null);
      HashUtils.hashCode(1, (Stroke) basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      HashUtils.hashCode((-237), false);
      PaintList paintList0 = new PaintList();
      assertNotNull(paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, paintList0.size());
      
      HashUtils.hashCode(0, paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, paintList0.size());
      
      HashUtils.hashCode(127, strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      HashUtils.hashCode(849, 77.753);
      HashUtils.hashCode((-87), paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, paintList0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashUtils.hashCode(32, 32);
      HashUtils.hashCode(0, (StrokeList) null);
      StrokeList strokeList0 = new StrokeList();
      assertNotNull(strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      StrokeList strokeList1 = (StrokeList)strokeList0.clone();
      assertNotNull(strokeList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(strokeList1.equals((Object)strokeList0));
      assertNotSame(strokeList0, strokeList1);
      assertNotSame(strokeList1, strokeList0);
      assertEquals(0, strokeList0.size());
      assertEquals(0, strokeList1.size());
      
      Stroke stroke0 = strokeList0.getStroke(29);
      assertNull(stroke0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(strokeList0.equals((Object)strokeList1));
      assertNotSame(strokeList0, strokeList1);
      assertEquals(0, strokeList0.size());
      
      HashUtils.hashCode(0, (Stroke) null);
      HashUtils.hashCode(8, (Comparable) 8);
      HashUtils.hashCode(32, 0);
      HashUtils.hashCode(10, (Object) strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(strokeList0.equals((Object)strokeList1));
      assertNotSame(strokeList0, strokeList1);
      assertEquals(0, strokeList0.size());
      
      HashUtils.hashCode((-38), (Object) strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(strokeList0.equals((Object)strokeList1));
      assertNotSame(strokeList0, strokeList1);
      assertEquals(0, strokeList0.size());
      
      HashUtils.hashCode((-38), true);
      HashUtils.hashCode(4736, (Object) null);
      SystemColor systemColor0 = SystemColor.menu;
      assertNotNull(systemColor0);
      assertEquals(192, systemColor0.getRed());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getBlue());
      assertEquals((-4144960), systemColor0.getRGB());
      
      HashUtils.hashCode(3224, (Paint) systemColor0);
      assertEquals(192, systemColor0.getRed());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getBlue());
      assertEquals((-4144960), systemColor0.getRGB());
      
      BooleanList booleanList0 = new BooleanList();
      assertNotNull(booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      HashUtils.hashCode((-1), booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-38);
      doubleArray0[1] = (double) 4736;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (-2646.0);
      doubleArray0[5] = (double) 0;
      int int0 = HashUtils.hashCodeForDoubleArray(doubleArray0);
      assertEquals(571717465, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-38.0), 4736.0, 8.0, 8.0, (-2646.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StrokeList strokeList0 = new StrokeList();
      assertNotNull(strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      strokeList0.setStroke(2030, basicStroke0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(2031, strokeList0.size());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      StrokeList strokeList1 = (StrokeList)strokeList0.clone();
      assertNotNull(strokeList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotSame(strokeList0, strokeList1);
      assertNotSame(strokeList1, strokeList0);
      assertEquals(2031, strokeList0.size());
      assertEquals(2031, strokeList1.size());
      
      HashUtils.hashCode(2030, strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotSame(strokeList0, strokeList1);
      assertEquals(2031, strokeList0.size());
      
      int int0 = (-341);
      PaintList paintList0 = new PaintList();
      assertNotNull(paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, paintList0.size());
      
      PaintList paintList1 = (PaintList)paintList0.clone();
      assertNotNull(paintList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(paintList1.equals((Object)paintList0));
      assertNotSame(paintList0, paintList1);
      assertNotSame(paintList1, paintList0);
      assertEquals(0, paintList0.size());
      assertEquals(0, paintList1.size());
      
      BasicStroke basicStroke1 = new BasicStroke();
      assertNotNull(basicStroke1);
      assertTrue(basicStroke1.equals((Object)basicStroke0));
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      
      // Undeclared exception!
      try { 
        strokeList0.setStroke((-341), basicStroke1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashUtils.hashCode((-862), "org.jfree.chart.util.AbstractObjectList");
      StrokeList strokeList0 = new StrokeList();
      assertNotNull(strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      Stroke stroke0 = strokeList0.getStroke((-1));
      assertNull(stroke0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      HashUtils.hashCode((-862), (Stroke) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StrokeList strokeList0 = new StrokeList();
      assertNotNull(strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = strokeList0.equals(object0);
      assertFalse(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      HashUtils.hashCode(0, strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      HashUtils.hashCode(8, false);
      BooleanList booleanList0 = new BooleanList();
      assertNotNull(booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanList0.setBoolean(1, boolean1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(boolean1.equals((Object)boolean0));
      assertEquals(2, booleanList0.size());
      
      HashUtils.hashCode(0, booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(2, booleanList0.size());
      
      int int0 = HashUtils.hashCodeForDoubleArray((double[]) null);
      assertEquals(0, int0);
      
      int int1 = HashUtils.hashCode(0, "");
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 574;
      int int1 = HashUtils.hashCode(574, true);
      assertFalse(int1 == int0);
      
      int int2 = 0;
      BooleanList booleanList0 = new BooleanList();
      assertNotNull(booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      int int3 = HashUtils.hashCode(0, booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, booleanList0.size());
      
      SystemColor systemColor0 = SystemColor.textHighlight;
      assertNotNull(systemColor0);
      assertEquals(0, systemColor0.getRed());
      assertEquals(128, systemColor0.getBlue());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777088), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getGreen());
      
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        systemColor0.getColorComponents((ColorSpace) null, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = HashUtils.hashCodeForDoubleArray(doubleArray0);
      assertEquals(193, int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StrokeList strokeList0 = new StrokeList();
      assertNotNull(strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, strokeList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      strokeList0.setStroke(0, basicStroke0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, strokeList0.size());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      boolean boolean0 = strokeList0.equals(object0);
      assertFalse(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, strokeList0.size());
      
      HashUtils.hashCode(0, strokeList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(1, strokeList0.size());
      
      HashUtils.hashCode(8, false);
      BooleanList booleanList0 = new BooleanList();
      assertNotNull(booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      HashUtils.hashCode(0, booleanList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, booleanList0.size());
      
      int int0 = HashUtils.hashCodeForDoubleArray((double[]) null);
      assertEquals(0, int0);
      
      int int1 = HashUtils.hashCode(0, "A7UVoKxup4,\"k0u/&");
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-210.92275243197);
      doubleArray0[1] = 2008.44747954;
      doubleArray0[2] = 724.79;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 106.949686205268;
      doubleArray0[5] = 834.718267;
      doubleArray0[6] = (-654.42994263);
      doubleArray0[7] = (-274.917119);
      doubleArray0[8] = (-3744.7510739277);
      int int0 = HashUtils.hashCodeForDoubleArray(doubleArray0);
      assertEquals(1480060564, int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-210.92275243197), 2008.44747954, 724.79, 0.0, 106.949686205268, 834.718267, (-654.42994263), (-274.917119), (-3744.7510739277)}, doubleArray0, 0.01);
      
      int int1 = HashUtils.hashCode((-2444), (PaintList) null);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-221);
      PaintList paintList0 = new PaintList();
      assertNotNull(paintList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(0, paintList0.size());
      
      PaintList paintList1 = (PaintList)paintList0.clone();
      assertNotNull(paintList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(paintList1.equals((Object)paintList0));
      assertNotSame(paintList0, paintList1);
      assertNotSame(paintList1, paintList0);
      assertEquals(0, paintList0.size());
      assertEquals(0, paintList1.size());
      
      paintList0.clear();
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(paintList0.equals((Object)paintList1));
      assertNotSame(paintList0, paintList1);
      assertEquals(0, paintList0.size());
      
      paintList0.clear();
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(paintList0.equals((Object)paintList1));
      assertNotSame(paintList0, paintList1);
      assertEquals(0, paintList0.size());
      
      boolean boolean0 = paintList0.equals("");
      assertFalse(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(paintList0.equals((Object)paintList1));
      assertNotSame(paintList0, paintList1);
      assertEquals(0, paintList0.size());
      
      Color color0 = Color.YELLOW;
      assertNotNull(color0);
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-256), color0.getRGB());
      
      ICC_Profile iCC_Profile0 = mock(ICC_Profile.class, new ViolatedAssumptionAnswer());
      doReturn(2220).when(iCC_Profile0).getColorSpaceType();
      doReturn(3264, 0, 0, 0).when(iCC_Profile0).getNumComponents();
      doReturn(0).when(iCC_Profile0).getProfileClass();
      ICC_ColorSpace iCC_ColorSpace0 = new ICC_ColorSpace(iCC_Profile0);
      assertNotNull(iCC_ColorSpace0);
      assertEquals(2220, iCC_ColorSpace0.getType());
      assertEquals(3264, iCC_ColorSpace0.getNumComponents());
      assertFalse(iCC_ColorSpace0.isCS_sRGB());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-221);
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) 8;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-221);
      floatArray0[5] = (-2178.0F);
      floatArray0[6] = (float) 8;
      floatArray0[7] = (float) (-221);
      // Undeclared exception!
      try { 
        color0.getComponents((ColorSpace) iCC_ColorSpace0, floatArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = new Object();
      HashUtils.hashCode((-1395), object0);
      HashUtils.hashCode(1558, true);
      HashUtils hashUtils0 = new HashUtils();
      HashUtils.hashCode(1558, 1107);
      PaintList paintList0 = new PaintList();
      HashUtils.hashCode(1558, paintList0);
      HashUtils.hashCode(1107, 1558);
      BasicStroke basicStroke0 = new BasicStroke(3095.9766F, 0, 1, 1558);
      HashUtils.hashCode(1, (Object) basicStroke0);
      HashUtils.hashCode(1, paintList0);
      HashUtils.hashCode(1, (-626.853));
      StrokeList strokeList0 = new StrokeList();
      HashUtils.hashCode(0, strokeList0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) 8;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) (-1395);
      floatArray0[5] = 2637.2F;
      floatArray0[6] = (float) 1;
      floatArray0[6] = 3095.9766F;
      floatArray0[8] = (float) 1;
      Color[] colorArray0 = new Color[4];
      Color color0 = Color.white;
      colorArray0[0] = color0;
      Color color1 = Color.WHITE;
      colorArray0[1] = color1;
      Color color2 = Color.magenta;
      colorArray0[2] = color2;
      SystemColor systemColor0 = SystemColor.textInactiveText;
      colorArray0[3] = (Color) systemColor0;
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      RadialGradientPaint radialGradientPaint0 = null;
      try {
        radialGradientPaint0 = new RadialGradientPaint(0.0F, 2637.2F, 1558, (-2089.633F), (-2089.633F), floatArray0, colorArray0, multipleGradientPaint_CycleMethod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Colors and fractions must have equal size
         //
         verifyException("java.awt.MultipleGradientPaint", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BooleanList booleanList0 = new BooleanList();
      Object object0 = booleanList0.clone();
      booleanList0.clear();
      booleanList0.getBoolean((-110));
      booleanList0.setBoolean(110, (Boolean) null);
      HashUtils.hashCode((-2526), booleanList0);
      PaintList paintList0 = new PaintList();
      paintList0.equals(booleanList0);
      SystemColor systemColor0 = SystemColor.text;
      paintList0.setPaint(1050, systemColor0);
      paintList0.equals(object0);
      paintList0.clone();
      HashUtils.hashCode((-2526), paintList0);
      booleanList0.equals(systemColor0);
      HashUtils.hashCode(2553, (Paint) systemColor0);
      HashUtils.hashCode((-2526), 1050);
      Boolean boolean0 = new Boolean("org.jfree.chart.ChartHints");
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2526);
      floatArray0[1] = (float) 110;
      floatArray0[2] = (float) 110;
      floatArray0[3] = 3551.97F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 110;
      floatArray0[6] = (float) (-110);
      floatArray0[7] = (float) 110;
      systemColor0.getColorComponents(floatArray0);
      booleanList0.setBoolean(8, boolean0);
      HashUtils.hashCode(414, (Object) null);
      HashUtils.hashCode((-2526), booleanList0);
      HashUtils.hashCode(1040, (String) null);
      int int0 = HashUtils.hashCodeForPaint(systemColor0);
      assertEquals(3, int0);
  }
}
