/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:26:46 GMT 2023
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Stroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.plot.MeterInterval;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MeterInterval_ESTest extends MeterInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn("D").when(range0).toString();
      MeterInterval meterInterval0 = new MeterInterval("D", range0);
      assertNotNull(meterInterval0);
      assertEquals("D", meterInterval0.getLabel());
      
      boolean boolean0 = meterInterval0.equals("D");
      assertFalse(boolean0);
      assertEquals("D", meterInterval0.getLabel());
      
      Range range1 = meterInterval0.getRange();
      assertNotNull(range1);
      assertEquals("D", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertSame(range1, range0);
      
      boolean boolean1 = meterInterval0.equals(meterInterval0);
      assertTrue(boolean1);
      assertEquals("D", meterInterval0.getLabel());
      assertFalse(boolean1 == boolean0);
      
      Color color0 = (Color)meterInterval0.getOutlinePaint();
      assertNotNull(color0);
      assertEquals("D", meterInterval0.getLabel());
      assertEquals((-256), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(range0).toString();
      MeterInterval meterInterval0 = new MeterInterval("label", range0);
      assertNotNull(meterInterval0);
      assertEquals("label", meterInterval0.getLabel());
      
      boolean boolean0 = meterInterval0.equals("label");
      assertFalse(boolean0);
      assertEquals("label", meterInterval0.getLabel());
      
      Range range1 = meterInterval0.getRange();
      assertNotNull(range1);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertSame(range1, range0);
      
      boolean boolean1 = meterInterval0.equals(range1);
      assertFalse(boolean1);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertSame(range1, range0);
      
      Paint paint0 = meterInterval0.getBackgroundPaint();
      assertNull(paint0);
      assertEquals("label", meterInterval0.getLabel());
      
      Color color0 = (Color)meterInterval0.getOutlinePaint();
      assertNotNull(color0);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      Range range2 = meterInterval0.getRange();
      assertNotNull(range2);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertSame(range2, range1);
      assertSame(range2, range0);
      
      Range range3 = meterInterval0.getRange();
      assertNotNull(range3);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertSame(range3, range0);
      assertSame(range3, range2);
      assertSame(range3, range1);
      
      String string0 = meterInterval0.getLabel();
      assertNotNull(string0);
      assertEquals("label", string0);
      assertEquals("label", meterInterval0.getLabel());
      
      String string1 = meterInterval0.getLabel();
      assertNotNull(string1);
      assertEquals("label", string1);
      assertEquals("label", meterInterval0.getLabel());
      
      Paint paint1 = meterInterval0.getBackgroundPaint();
      assertNull(paint1);
      assertEquals("label", meterInterval0.getLabel());
      
      boolean boolean2 = meterInterval0.equals("label");
      assertFalse(boolean2);
      assertEquals("label", meterInterval0.getLabel());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Color color1 = (Color)meterInterval0.getOutlinePaint();
      assertNotNull(color1);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals((-256), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getRed());
      assertEquals(255, color1.getGreen());
      assertEquals(0, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertSame(color1, color0);
      
      Color color2 = (Color)meterInterval0.getOutlinePaint();
      assertNotNull(color2);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getGreen());
      assertEquals(0, color2.getBlue());
      assertEquals((-256), color2.getRGB());
      assertEquals(255, color2.getAlpha());
      assertEquals(255, color2.getRed());
      assertSame(color2, color1);
      assertSame(color2, color0);
      
      String string2 = meterInterval0.getLabel();
      assertNotNull(string2);
      assertEquals("label", string2);
      assertEquals("label", meterInterval0.getLabel());
      
      String string3 = meterInterval0.getLabel();
      assertNotNull(string3);
      assertEquals("label", string3);
      assertEquals("label", meterInterval0.getLabel());
      
      Color color3 = (Color)meterInterval0.getOutlinePaint();
      assertNotNull(color3);
      assertEquals(0, color3.getBlue());
      assertEquals(255, color3.getAlpha());
      assertEquals(255, color3.getRed());
      assertEquals((-256), color3.getRGB());
      assertEquals(1, color3.getTransparency());
      assertEquals(255, color3.getGreen());
      assertEquals("label", meterInterval0.getLabel());
      assertSame(color3, color2);
      assertSame(color3, color1);
      assertSame(color3, color0);
      
      Color color4 = (Color)meterInterval0.getOutlinePaint();
      assertNotNull(color4);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(255, color4.getRed());
      assertEquals(255, color4.getAlpha());
      assertEquals((-256), color4.getRGB());
      assertEquals(1, color4.getTransparency());
      assertEquals(0, color4.getBlue());
      assertEquals(255, color4.getGreen());
      assertSame(color4, color2);
      assertSame(color4, color1);
      assertSame(color4, color3);
      assertSame(color4, color0);
      
      Color color5 = (Color)meterInterval0.getOutlinePaint();
      assertNotNull(color5);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(255, color5.getGreen());
      assertEquals(1, color5.getTransparency());
      assertEquals(255, color5.getRed());
      assertEquals(0, color5.getBlue());
      assertEquals(255, color5.getAlpha());
      assertEquals((-256), color5.getRGB());
      assertSame(color5, color3);
      assertSame(color5, color0);
      assertSame(color5, color4);
      assertSame(color5, color2);
      assertSame(color5, color1);
      
      Range range4 = meterInterval0.getRange();
      assertNotNull(range4);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertSame(range4, range0);
      assertSame(range4, range3);
      assertSame(range4, range2);
      assertSame(range4, range1);
      
      Range range5 = meterInterval0.getRange();
      assertNotNull(range5);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertSame(range5, range0);
      assertSame(range5, range3);
      assertSame(range5, range2);
      assertSame(range5, range4);
      assertSame(range5, range1);
      
      Range range6 = meterInterval0.getRange();
      assertNotNull(range6);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertSame(range6, range5);
      assertSame(range6, range0);
      assertSame(range6, range3);
      assertSame(range6, range4);
      assertSame(range6, range1);
      assertSame(range6, range2);
      
      MeterInterval meterInterval1 = new MeterInterval(";4td9T-,HJe*ZM?;;", range5, color5, (Stroke) null, color4);
      assertNotNull(meterInterval1);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(255, color4.getRed());
      assertEquals(255, color4.getAlpha());
      assertEquals((-256), color4.getRGB());
      assertEquals(1, color4.getTransparency());
      assertEquals(0, color4.getBlue());
      assertEquals(255, color4.getGreen());
      assertEquals(255, color5.getGreen());
      assertEquals(1, color5.getTransparency());
      assertEquals(255, color5.getRed());
      assertEquals(0, color5.getBlue());
      assertEquals(255, color5.getAlpha());
      assertEquals((-256), color5.getRGB());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(";4td9T-,HJe*ZM?;;", meterInterval1.getLabel());
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      
      boolean boolean3 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean3);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(255, color4.getRed());
      assertEquals(255, color4.getAlpha());
      assertEquals((-256), color4.getRGB());
      assertEquals(1, color4.getTransparency());
      assertEquals(0, color4.getBlue());
      assertEquals(255, color4.getGreen());
      assertEquals(255, color5.getGreen());
      assertEquals(1, color5.getTransparency());
      assertEquals(255, color5.getRed());
      assertEquals(0, color5.getBlue());
      assertEquals(255, color5.getAlpha());
      assertEquals((-256), color5.getRGB());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(";4td9T-,HJe*ZM?;;", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(color4, color2);
      assertSame(color4, color1);
      assertSame(color4, color3);
      assertSame(color4, color5);
      assertSame(color4, color0);
      assertSame(color5, color3);
      assertSame(color5, color0);
      assertSame(color5, color4);
      assertSame(color5, color2);
      assertSame(color5, color1);
      assertSame(range5, range6);
      assertSame(range5, range0);
      assertSame(range5, range3);
      assertSame(range5, range2);
      assertSame(range5, range4);
      assertSame(range5, range1);
      assertNotSame(meterInterval1, meterInterval0);
      
      String string4 = meterInterval1.getLabel();
      assertNotNull(string4);
      assertEquals(";4td9T-,HJe*ZM?;;", string4);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(255, color4.getRed());
      assertEquals(255, color4.getAlpha());
      assertEquals((-256), color4.getRGB());
      assertEquals(1, color4.getTransparency());
      assertEquals(0, color4.getBlue());
      assertEquals(255, color4.getGreen());
      assertEquals(255, color5.getGreen());
      assertEquals(1, color5.getTransparency());
      assertEquals(255, color5.getRed());
      assertEquals(0, color5.getBlue());
      assertEquals(255, color5.getAlpha());
      assertEquals((-256), color5.getRGB());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(";4td9T-,HJe*ZM?;;", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(color4, color2);
      assertSame(color4, color1);
      assertSame(color4, color3);
      assertSame(color4, color5);
      assertSame(color4, color0);
      assertSame(color5, color3);
      assertSame(color5, color0);
      assertSame(color5, color4);
      assertSame(color5, color2);
      assertSame(color5, color1);
      assertSame(range5, range6);
      assertSame(range5, range0);
      assertSame(range5, range3);
      assertSame(range5, range2);
      assertSame(range5, range4);
      assertSame(range5, range1);
      assertNotSame(meterInterval1, meterInterval0);
      
      Color color6 = (Color)meterInterval1.getOutlinePaint();
      assertNotNull(color6);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(255, color4.getRed());
      assertEquals(255, color4.getAlpha());
      assertEquals((-256), color4.getRGB());
      assertEquals(1, color4.getTransparency());
      assertEquals(0, color4.getBlue());
      assertEquals(255, color4.getGreen());
      assertEquals(255, color5.getGreen());
      assertEquals(1, color5.getTransparency());
      assertEquals(255, color5.getRed());
      assertEquals(0, color5.getBlue());
      assertEquals(255, color5.getAlpha());
      assertEquals((-256), color5.getRGB());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(";4td9T-,HJe*ZM?;;", meterInterval1.getLabel());
      assertEquals((-256), color6.getRGB());
      assertEquals(1, color6.getTransparency());
      assertEquals(255, color6.getRed());
      assertEquals(255, color6.getAlpha());
      assertEquals(0, color6.getBlue());
      assertEquals(255, color6.getGreen());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(color4, color2);
      assertSame(color4, color1);
      assertSame(color4, color3);
      assertSame(color4, color5);
      assertSame(color4, color0);
      assertSame(color4, color6);
      assertSame(color5, color3);
      assertSame(color5, color0);
      assertSame(color5, color6);
      assertSame(color5, color4);
      assertSame(color5, color2);
      assertSame(color5, color1);
      assertSame(range5, range6);
      assertSame(range5, range0);
      assertSame(range5, range3);
      assertSame(range5, range2);
      assertSame(range5, range4);
      assertSame(range5, range1);
      assertNotSame(meterInterval1, meterInterval0);
      assertSame(color6, color2);
      assertSame(color6, color1);
      assertSame(color6, color3);
      assertSame(color6, color5);
      assertSame(color6, color4);
      assertSame(color6, color0);
      
      Color color7 = (Color)meterInterval1.getBackgroundPaint();
      assertNotNull(color7);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(255, color4.getRed());
      assertEquals(255, color4.getAlpha());
      assertEquals((-256), color4.getRGB());
      assertEquals(1, color4.getTransparency());
      assertEquals(0, color4.getBlue());
      assertEquals(255, color4.getGreen());
      assertEquals(255, color5.getGreen());
      assertEquals(1, color5.getTransparency());
      assertEquals(255, color5.getRed());
      assertEquals(0, color5.getBlue());
      assertEquals(255, color5.getAlpha());
      assertEquals((-256), color5.getRGB());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(";4td9T-,HJe*ZM?;;", meterInterval1.getLabel());
      assertEquals(255, color7.getGreen());
      assertEquals(255, color7.getRed());
      assertEquals(255, color7.getAlpha());
      assertEquals(0, color7.getBlue());
      assertEquals((-256), color7.getRGB());
      assertEquals(1, color7.getTransparency());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(color4, color7);
      assertSame(color4, color2);
      assertSame(color4, color1);
      assertSame(color4, color3);
      assertSame(color4, color5);
      assertSame(color4, color0);
      assertSame(color4, color6);
      assertSame(color5, color3);
      assertSame(color5, color0);
      assertSame(color5, color6);
      assertSame(color5, color4);
      assertSame(color5, color7);
      assertSame(color5, color2);
      assertSame(color5, color1);
      assertSame(range5, range6);
      assertSame(range5, range0);
      assertSame(range5, range3);
      assertSame(range5, range2);
      assertSame(range5, range4);
      assertSame(range5, range1);
      assertNotSame(meterInterval1, meterInterval0);
      assertSame(color7, color2);
      assertSame(color7, color1);
      assertSame(color7, color3);
      assertSame(color7, color4);
      assertSame(color7, color6);
      assertSame(color7, color0);
      assertSame(color7, color5);
      
      Paint paint2 = meterInterval0.getBackgroundPaint();
      assertNull(paint2);
      assertEquals("label", meterInterval0.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertNotSame(meterInterval0, meterInterval1);
      
      Color color8 = (Color)meterInterval1.getBackgroundPaint();
      assertNotNull(color8);
      assertEquals("label", meterInterval0.getLabel());
      assertEquals(255, color4.getRed());
      assertEquals(255, color4.getAlpha());
      assertEquals((-256), color4.getRGB());
      assertEquals(1, color4.getTransparency());
      assertEquals(0, color4.getBlue());
      assertEquals(255, color4.getGreen());
      assertEquals(255, color5.getGreen());
      assertEquals(1, color5.getTransparency());
      assertEquals(255, color5.getRed());
      assertEquals(0, color5.getBlue());
      assertEquals(255, color5.getAlpha());
      assertEquals((-256), color5.getRGB());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(";4td9T-,HJe*ZM?;;", meterInterval1.getLabel());
      assertEquals((-256), color8.getRGB());
      assertEquals(1, color8.getTransparency());
      assertEquals(255, color8.getRed());
      assertEquals(255, color8.getGreen());
      assertEquals(0, color8.getBlue());
      assertEquals(255, color8.getAlpha());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(color4, color7);
      assertSame(color4, color2);
      assertSame(color4, color1);
      assertSame(color4, color3);
      assertSame(color4, color8);
      assertSame(color4, color5);
      assertSame(color4, color0);
      assertSame(color4, color6);
      assertSame(color5, color3);
      assertSame(color5, color0);
      assertSame(color5, color6);
      assertSame(color5, color4);
      assertSame(color5, color7);
      assertSame(color5, color8);
      assertSame(color5, color2);
      assertSame(color5, color1);
      assertSame(range5, range6);
      assertSame(range5, range0);
      assertSame(range5, range3);
      assertSame(range5, range2);
      assertSame(range5, range4);
      assertSame(range5, range1);
      assertNotSame(meterInterval1, meterInterval0);
      assertSame(color8, color7);
      assertSame(color8, color2);
      assertSame(color8, color4);
      assertSame(color8, color3);
      assertSame(color8, color6);
      assertSame(color8, color0);
      assertSame(color8, color5);
      assertSame(color8, color1);
      
      Paint paint3 = meterInterval0.getBackgroundPaint();
      assertNull(paint3);
      assertEquals("label", meterInterval0.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertNotSame(meterInterval0, meterInterval1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(range0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(stroke0).toString();
      MeterInterval meterInterval0 = new MeterInterval("", range0, paint0, stroke0, paint0);
      assertNotNull(meterInterval0);
      assertEquals("", meterInterval0.getLabel());
      
      Range range1 = meterInterval0.getRange();
      assertNotNull(range1);
      assertEquals("", meterInterval0.getLabel());
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertSame(range1, range0);
      
      boolean boolean0 = meterInterval0.equals(range1);
      assertFalse(boolean0);
      assertEquals("", meterInterval0.getLabel());
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertSame(range1, range0);
      
      String string0 = meterInterval0.getLabel();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", meterInterval0.getLabel());
      
      Range range2 = meterInterval0.getRange();
      assertNotNull(range2);
      assertEquals("", meterInterval0.getLabel());
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertSame(range2, range1);
      assertSame(range2, range0);
      
      Stroke stroke1 = meterInterval0.getOutlineStroke();
      assertNotNull(stroke1);
      assertEquals("", meterInterval0.getLabel());
      assertSame(stroke1, stroke0);
      
      Stroke stroke2 = meterInterval0.getOutlineStroke();
      assertNotNull(stroke2);
      assertEquals("", meterInterval0.getLabel());
      assertSame(stroke2, stroke1);
      assertSame(stroke2, stroke0);
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      MeterInterval meterInterval1 = new MeterInterval("", range1, paint1, (Stroke) null, paint1);
      assertNotNull(meterInterval1);
      assertEquals("", meterInterval0.getLabel());
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("", meterInterval1.getLabel());
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      
      boolean boolean1 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean1);
      assertEquals("", meterInterval0.getLabel());
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range1, range0);
      assertSame(range1, range2);
      assertNotSame(meterInterval1, meterInterval0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      MeterInterval meterInterval0 = new MeterInterval(").", range0, (Paint) null, stroke0, (Paint) null);
      assertNotNull(meterInterval0);
      assertEquals(").", meterInterval0.getLabel());
      
      Paint paint0 = meterInterval0.getOutlinePaint();
      assertNull(paint0);
      assertEquals(").", meterInterval0.getLabel());
      
      boolean boolean0 = meterInterval0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(").", meterInterval0.getLabel());
      
      Paint paint1 = meterInterval0.getOutlinePaint();
      assertNull(paint1);
      assertEquals(").", meterInterval0.getLabel());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      MeterInterval meterInterval0 = new MeterInterval("lD~<va-=", range0, paint0, (Stroke) null, paint0);
      assertNotNull(meterInterval0);
      assertEquals("lD~<va-=", meterInterval0.getLabel());
      
      Stroke stroke0 = meterInterval0.getOutlineStroke();
      assertNull(stroke0);
      assertEquals("lD~<va-=", meterInterval0.getLabel());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      MeterInterval meterInterval0 = null;
      try {
        meterInterval0 = new MeterInterval((String) null, range0, paint0, stroke0, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(range0).toString();
      MeterInterval meterInterval0 = new MeterInterval("", range0);
      assertNotNull(meterInterval0);
      assertEquals("", meterInterval0.getLabel());
      
      Paint paint0 = meterInterval0.getBackgroundPaint();
      assertNull(paint0);
      assertEquals("", meterInterval0.getLabel());
      
      String string0 = meterInterval0.getLabel();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", meterInterval0.getLabel());
      
      Range range1 = meterInterval0.getRange();
      assertNotNull(range1);
      assertEquals("", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      MeterInterval meterInterval0 = new MeterInterval("base", range0);
      assertNotNull(meterInterval0);
      assertEquals("base", meterInterval0.getLabel());
      
      boolean boolean0 = meterInterval0.equals("base");
      assertFalse(boolean0);
      assertEquals("base", meterInterval0.getLabel());
      
      Color color0 = (Color)meterInterval0.getOutlinePaint();
      assertNotNull(color0);
      assertEquals("base", meterInterval0.getLabel());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getRed());
      
      Paint paint0 = meterInterval0.getBackgroundPaint();
      assertNull(paint0);
      assertEquals("base", meterInterval0.getLabel());
      
      String string0 = meterInterval0.getLabel();
      assertNotNull(string0);
      assertEquals("base", string0);
      assertEquals("base", meterInterval0.getLabel());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      MeterInterval meterInterval0 = new MeterInterval("", range0, paint0, stroke0, paint0);
      assertNotNull(meterInterval0);
      assertEquals("", meterInterval0.getLabel());
      
      Range range1 = null;
      MeterInterval meterInterval1 = null;
      try {
        meterInterval1 = new MeterInterval("", (Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(range0).toString();
      MeterInterval meterInterval0 = new MeterInterval("", range0);
      assertNotNull(meterInterval0);
      assertEquals("", meterInterval0.getLabel());
      
      boolean boolean0 = meterInterval0.equals("");
      assertFalse(boolean0);
      assertEquals("", meterInterval0.getLabel());
      
      boolean boolean1 = meterInterval0.equals("");
      assertFalse(boolean1);
      assertEquals("", meterInterval0.getLabel());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = meterInterval0.equals((Object) null);
      assertFalse(boolean2);
      assertEquals("", meterInterval0.getLabel());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = meterInterval0.equals("");
      assertFalse(boolean3);
      assertEquals("", meterInterval0.getLabel());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      Range range1 = meterInterval0.getRange();
      assertNotNull(range1);
      assertEquals("", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertSame(range1, range0);
      
      MeterInterval meterInterval1 = new MeterInterval("", range1);
      assertNotNull(meterInterval1);
      assertEquals("", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals("", meterInterval1.getLabel());
      assertTrue(meterInterval1.equals((Object)meterInterval0));
      
      boolean boolean4 = meterInterval0.equals(meterInterval1);
      assertTrue(boolean4);
      assertEquals("", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals("", meterInterval1.getLabel());
      assertTrue(meterInterval0.equals((Object)meterInterval1));
      assertTrue(meterInterval1.equals((Object)meterInterval0));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range1, range0);
      assertNotSame(meterInterval1, meterInterval0);
      
      Color color0 = (Color)meterInterval0.getOutlinePaint();
      assertNotNull(color0);
      assertEquals("", meterInterval0.getLabel());
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertTrue(meterInterval0.equals((Object)meterInterval1));
      assertNotSame(meterInterval0, meterInterval1);
      
      Range range2 = meterInterval0.getRange();
      assertNotNull(range2);
      assertEquals("", meterInterval0.getLabel());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(meterInterval0.equals((Object)meterInterval1));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range2, range0);
      assertSame(range2, range1);
      
      BasicStroke basicStroke0 = (BasicStroke)meterInterval0.getOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals("", meterInterval0.getLabel());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertTrue(meterInterval0.equals((Object)meterInterval1));
      assertNotSame(meterInterval0, meterInterval1);
      
      boolean boolean5 = meterInterval0.equals(basicStroke0);
      assertFalse(boolean5);
      assertEquals("", meterInterval0.getLabel());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertTrue(meterInterval0.equals((Object)meterInterval1));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertNotSame(meterInterval0, meterInterval1);
      
      Paint paint0 = meterInterval0.getBackgroundPaint();
      assertNull(paint0);
      assertEquals("", meterInterval0.getLabel());
      assertTrue(meterInterval0.equals((Object)meterInterval1));
      assertNotSame(meterInterval0, meterInterval1);
      
      BasicStroke basicStroke1 = (BasicStroke)meterInterval1.getOutlineStroke();
      assertNotNull(basicStroke1);
      assertEquals("", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals("", meterInterval1.getLabel());
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertTrue(meterInterval0.equals((Object)meterInterval1));
      assertTrue(meterInterval1.equals((Object)meterInterval0));
      assertTrue(basicStroke1.equals((Object)basicStroke0));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(meterInterval1, meterInterval0);
      assertNotSame(basicStroke1, basicStroke0);
      
      boolean boolean6 = meterInterval0.equals((Object) null);
      assertFalse(boolean6);
      assertEquals("", meterInterval0.getLabel());
      assertTrue(meterInterval0.equals((Object)meterInterval1));
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertNotSame(meterInterval0, meterInterval1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(range0).toString();
      MeterInterval meterInterval0 = new MeterInterval(",", range0);
      assertNotNull(meterInterval0);
      assertEquals(",", meterInterval0.getLabel());
      
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      MeterInterval meterInterval1 = new MeterInterval(",", range1, paint0, stroke0, paint0);
      assertNotNull(meterInterval1);
      assertEquals(",", meterInterval1.getLabel());
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      
      boolean boolean0 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean0);
      assertEquals(",", meterInterval0.getLabel());
      assertEquals(",", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertNotSame(meterInterval0, meterInterval1);
      assertNotSame(meterInterval1, meterInterval0);
      
      Range range2 = meterInterval0.getRange();
      assertNotNull(range2);
      assertEquals(",", meterInterval0.getLabel());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range2, range0);
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(range0).toString();
      MeterInterval meterInterval0 = new MeterInterval(">~", range0);
      assertNotNull(meterInterval0);
      assertEquals(">~", meterInterval0.getLabel());
      
      boolean boolean0 = meterInterval0.equals(">~");
      assertFalse(boolean0);
      assertEquals(">~", meterInterval0.getLabel());
      
      Range range1 = meterInterval0.getRange();
      assertNotNull(range1);
      assertEquals(">~", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertSame(range1, range0);
      
      MeterInterval meterInterval1 = new MeterInterval("", range1);
      assertNotNull(meterInterval1);
      assertEquals(">~", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals("", meterInterval1.getLabel());
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      
      boolean boolean1 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean1);
      assertEquals(">~", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals("", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range1, range0);
      assertNotSame(meterInterval1, meterInterval0);
      
      Color color0 = (Color)meterInterval0.getOutlinePaint();
      assertNotNull(color0);
      assertEquals(">~", meterInterval0.getLabel());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertNotSame(meterInterval0, meterInterval1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      MeterInterval meterInterval0 = new MeterInterval("", range0);
      assertNotNull(meterInterval0);
      assertEquals("", meterInterval0.getLabel());
      
      meterInterval0.equals("");
      meterInterval0.equals((Object) null);
      meterInterval0.getLabel();
      meterInterval0.getLabel();
      meterInterval0.getOutlineStroke();
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = meterInterval0.equals(meterInterval0);
      meterInterval0.getBackgroundPaint();
      boolean boolean1 = meterInterval0.equals("range");
      assertFalse(boolean1);
      
      meterInterval0.getBackgroundPaint();
      Paint paint1 = meterInterval0.getBackgroundPaint();
      assertNull(paint1);
      
      MeterInterval meterInterval1 = new MeterInterval("", range1);
      boolean boolean2 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MeterInterval meterInterval0 = null;
      try {
        meterInterval0 = new MeterInterval("N1k3tqf", (Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(range0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      MeterInterval meterInterval0 = new MeterInterval("^U", range0, paint0, stroke0, paint0);
      assertNotNull(meterInterval0);
      assertEquals("^U", meterInterval0.getLabel());
      
      Paint paint1 = meterInterval0.getBackgroundPaint();
      assertNotNull(paint1);
      assertEquals("^U", meterInterval0.getLabel());
      assertEquals(0, paint1.getTransparency());
      assertSame(paint1, paint0);
      
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(range1).toString();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = meterInterval0.equals("|gQdG]#;~$xJ");
      assertFalse(boolean0);
      assertEquals("^U", meterInterval0.getLabel());
      
      MeterInterval meterInterval1 = new MeterInterval("M_", range1, paint1, stroke1, paint1);
      assertNotNull(meterInterval1);
      assertEquals("^U", meterInterval0.getLabel());
      assertEquals(0, paint1.getTransparency());
      assertEquals("M_", meterInterval1.getLabel());
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      
      boolean boolean1 = meterInterval1.equals("|gQdG]#;~$xJ");
      assertFalse(boolean1);
      assertEquals("^U", meterInterval0.getLabel());
      assertEquals(0, paint1.getTransparency());
      assertEquals("M_", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(paint1, paint0);
      assertNotSame(meterInterval1, meterInterval0);
      
      boolean boolean2 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean2);
      assertEquals("^U", meterInterval0.getLabel());
      assertEquals(0, paint1.getTransparency());
      assertEquals("M_", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(paint1, paint0);
      assertNotSame(meterInterval1, meterInterval0);
      
      Paint paint2 = meterInterval0.getOutlinePaint();
      assertNotNull(paint2);
      assertEquals("^U", meterInterval0.getLabel());
      assertEquals(0, paint2.getTransparency());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(paint2, paint0);
      assertSame(paint2, paint1);
      
      boolean boolean3 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean3);
      assertEquals("^U", meterInterval0.getLabel());
      assertEquals(0, paint1.getTransparency());
      assertEquals("M_", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(paint1, paint2);
      assertSame(paint1, paint0);
      assertNotSame(meterInterval1, meterInterval0);
      
      Range range2 = meterInterval1.getRange();
      assertNotNull(range2);
      assertEquals("^U", meterInterval0.getLabel());
      assertEquals(0, paint1.getTransparency());
      assertEquals("M_", meterInterval1.getLabel());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(paint1, paint2);
      assertSame(paint1, paint0);
      assertNotSame(meterInterval1, meterInterval0);
      assertSame(range2, range1);
      assertNotSame(range2, range0);
      
      Paint paint3 = meterInterval0.getOutlinePaint();
      assertNotNull(paint3);
      assertEquals("^U", meterInterval0.getLabel());
      assertEquals(0, paint3.getTransparency());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(paint3, paint0);
      assertSame(paint3, paint2);
      assertSame(paint3, paint1);
      
      Paint paint4 = meterInterval0.getOutlinePaint();
      assertNotNull(paint4);
      assertEquals("^U", meterInterval0.getLabel());
      assertEquals(0, paint4.getTransparency());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(paint4, paint2);
      assertSame(paint4, paint3);
      assertSame(paint4, paint1);
      assertSame(paint4, paint0);
      
      Range range3 = meterInterval0.getRange();
      assertNotNull(range3);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals("^U", meterInterval0.getLabel());
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(meterInterval0, meterInterval1);
      
      Paint paint5 = meterInterval1.getOutlinePaint();
      assertNotNull(paint5);
      assertEquals(0, paint5.getTransparency());
      assertEquals("^U", meterInterval0.getLabel());
      assertEquals(0, paint1.getTransparency());
      assertEquals("M_", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertSame(paint5, paint1);
      assertSame(paint5, paint2);
      assertSame(paint5, paint4);
      assertSame(paint5, paint3);
      assertSame(paint5, paint0);
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(paint1, paint2);
      assertSame(paint1, paint4);
      assertSame(paint1, paint3);
      assertSame(paint1, paint0);
      assertSame(paint1, paint5);
      assertNotSame(meterInterval1, meterInterval0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(range0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      MeterInterval meterInterval0 = new MeterInterval(").", range0, paint0, stroke0, paint0);
      assertNotNull(meterInterval0);
      assertEquals(").", meterInterval0.getLabel());
      
      boolean boolean0 = meterInterval0.equals(").");
      assertFalse(boolean0);
      assertEquals(").", meterInterval0.getLabel());
      
      Range range1 = meterInterval0.getRange();
      assertNotNull(range1);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertSame(range1, range0);
      
      boolean boolean1 = meterInterval0.equals(").");
      assertFalse(boolean1);
      assertEquals(").", meterInterval0.getLabel());
      assertTrue(boolean1 == boolean0);
      
      Paint paint1 = meterInterval0.getBackgroundPaint();
      assertNotNull(paint1);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0, paint1.getTransparency());
      assertSame(paint1, paint0);
      
      boolean boolean2 = meterInterval0.equals(paint1);
      assertFalse(boolean2);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0, paint1.getTransparency());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(paint1, paint0);
      
      boolean boolean3 = meterInterval0.equals(").");
      assertFalse(boolean3);
      assertEquals(").", meterInterval0.getLabel());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = meterInterval0.equals("J2|jw6K");
      assertFalse(boolean4);
      assertEquals(").", meterInterval0.getLabel());
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = meterInterval0.equals(range1);
      assertFalse(boolean5);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertSame(range1, range0);
      
      Range range2 = meterInterval0.getRange();
      assertNotNull(range2);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertSame(range2, range0);
      assertSame(range2, range1);
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke1).toString();
      MeterInterval meterInterval1 = new MeterInterval(").", range1, paint1, stroke1, paint1);
      assertNotNull(meterInterval1);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0, paint1.getTransparency());
      assertEquals(").", meterInterval1.getLabel());
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      
      boolean boolean6 = meterInterval1.equals(paint1);
      assertFalse(boolean6);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0, paint1.getTransparency());
      assertEquals(").", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range1, range0);
      assertSame(range1, range2);
      assertSame(paint1, paint0);
      assertNotSame(meterInterval1, meterInterval0);
      
      boolean boolean7 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean7);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0, paint1.getTransparency());
      assertEquals(").", meterInterval1.getLabel());
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean3);
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range1, range0);
      assertSame(range1, range2);
      assertSame(paint1, paint0);
      assertNotSame(meterInterval1, meterInterval0);
      
      boolean boolean8 = meterInterval1.equals("g2IBN!@n{6>5R2+#,vs");
      assertFalse(boolean8);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0, paint1.getTransparency());
      assertEquals(").", meterInterval1.getLabel());
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean7);
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range1, range0);
      assertSame(range1, range2);
      assertSame(paint1, paint0);
      assertNotSame(meterInterval1, meterInterval0);
      
      boolean boolean9 = meterInterval0.equals(range2);
      assertFalse(boolean9);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertTrue(boolean9 == boolean6);
      assertTrue(boolean9 == boolean4);
      assertTrue(boolean9 == boolean5);
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9 == boolean2);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean8);
      assertTrue(boolean9 == boolean3);
      assertTrue(boolean9 == boolean7);
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range2, range0);
      assertSame(range2, range1);
      
      Stroke stroke2 = meterInterval1.getOutlineStroke();
      assertNotNull(stroke2);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0, paint1.getTransparency());
      assertEquals(").", meterInterval1.getLabel());
      assertFalse(stroke2.equals((Object)stroke0));
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertNotSame(stroke2, stroke0);
      assertSame(stroke2, stroke1);
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range1, range0);
      assertSame(range1, range2);
      assertSame(paint1, paint0);
      assertNotSame(meterInterval1, meterInterval0);
      
      String string0 = meterInterval1.getLabel();
      assertNotNull(string0);
      assertEquals(").", string0);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0, paint1.getTransparency());
      assertEquals(").", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range1, range0);
      assertSame(range1, range2);
      assertSame(paint1, paint0);
      assertNotSame(meterInterval1, meterInterval0);
      
      boolean boolean10 = meterInterval0.equals((Object) null);
      assertFalse(boolean10);
      assertEquals(").", meterInterval0.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertTrue(boolean10 == boolean6);
      assertTrue(boolean10 == boolean5);
      assertTrue(boolean10 == boolean7);
      assertTrue(boolean10 == boolean3);
      assertTrue(boolean10 == boolean0);
      assertTrue(boolean10 == boolean1);
      assertTrue(boolean10 == boolean8);
      assertTrue(boolean10 == boolean2);
      assertTrue(boolean10 == boolean4);
      assertTrue(boolean10 == boolean9);
      assertNotSame(meterInterval0, meterInterval1);
      
      Paint paint2 = meterInterval1.getOutlinePaint();
      assertNotNull(paint2);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0, paint2.getTransparency());
      assertEquals(0, paint1.getTransparency());
      assertEquals(").", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range1, range0);
      assertSame(range1, range2);
      assertSame(paint2, paint1);
      assertSame(paint2, paint0);
      assertSame(paint1, paint2);
      assertSame(paint1, paint0);
      assertNotSame(meterInterval1, meterInterval0);
      
      Range range3 = meterInterval0.getRange();
      assertNotNull(range3);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range3, range2);
      assertSame(range3, range0);
      assertSame(range3, range1);
      
      String string1 = meterInterval1.getLabel();
      assertNotNull(string1);
      assertEquals(").", string1);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0, paint1.getTransparency());
      assertEquals(").", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range1, range0);
      assertSame(range1, range3);
      assertSame(range1, range2);
      assertSame(paint1, paint2);
      assertSame(paint1, paint0);
      assertNotSame(meterInterval1, meterInterval0);
      
      Paint paint3 = meterInterval1.getOutlinePaint();
      assertNotNull(paint3);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0, paint1.getTransparency());
      assertEquals(0, paint3.getTransparency());
      assertEquals(").", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range1, range0);
      assertSame(range1, range3);
      assertSame(range1, range2);
      assertSame(paint1, paint3);
      assertSame(paint1, paint2);
      assertSame(paint1, paint0);
      assertSame(paint3, paint1);
      assertSame(paint3, paint2);
      assertSame(paint3, paint0);
      assertNotSame(meterInterval1, meterInterval0);
      
      boolean boolean11 = meterInterval0.equals(paint3);
      assertFalse(boolean11);
      assertEquals(").", meterInterval0.getLabel());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0, paint1.getTransparency());
      assertEquals(0, paint3.getTransparency());
      assertEquals(").", meterInterval1.getLabel());
      assertFalse(meterInterval0.equals((Object)meterInterval1));
      assertTrue(boolean11 == boolean2);
      assertTrue(boolean11 == boolean0);
      assertTrue(boolean11 == boolean1);
      assertTrue(boolean11 == boolean6);
      assertTrue(boolean11 == boolean7);
      assertTrue(boolean11 == boolean3);
      assertTrue(boolean11 == boolean10);
      assertTrue(boolean11 == boolean4);
      assertTrue(boolean11 == boolean9);
      assertTrue(boolean11 == boolean8);
      assertTrue(boolean11 == boolean5);
      assertFalse(meterInterval1.equals((Object)meterInterval0));
      assertNotSame(meterInterval0, meterInterval1);
      assertSame(range1, range0);
      assertSame(range1, range3);
      assertSame(range1, range2);
      assertSame(paint1, paint3);
      assertSame(paint1, paint2);
      assertSame(paint1, paint0);
      assertSame(paint3, paint1);
      assertSame(paint3, paint2);
      assertSame(paint3, paint0);
      assertNotSame(meterInterval1, meterInterval0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn("G~!Ea", "G~!Ea", "", ") to be non-negative.", "]D|pv7kuKw4sJpja<uT").when(range0).toString();
      MeterInterval meterInterval0 = new MeterInterval("G~!Ea", range0);
      meterInterval0.equals("G~!Ea");
      meterInterval0.equals("G~!Ea");
      meterInterval0.equals("G~!Ea");
      meterInterval0.equals("G~!Ea");
      meterInterval0.equals("G~!Ea");
      Range range1 = meterInterval0.getRange();
      meterInterval0.getOutlineStroke();
      meterInterval0.getOutlineStroke();
      meterInterval0.getOutlinePaint();
      meterInterval0.equals("org.jfree.chart.plot.MeterInterval");
      meterInterval0.getBackgroundPaint();
      boolean boolean0 = meterInterval0.equals("G~!Ea");
      meterInterval0.getOutlineStroke();
      meterInterval0.getOutlineStroke();
      MeterInterval meterInterval1 = new MeterInterval("G~!Ea", range1);
      meterInterval0.equals(meterInterval1);
      meterInterval0.equals("G~!Ea");
      meterInterval0.getRange();
      meterInterval1.getOutlineStroke();
      meterInterval1.equals("org.jfree.chart.plot.MeterInterval");
      Range range2 = meterInterval0.getRange();
      meterInterval1.getLabel();
      MeterInterval meterInterval2 = new MeterInterval("G~!Ea", range2);
      meterInterval2.equals(meterInterval1);
      boolean boolean1 = meterInterval0.equals(meterInterval2);
      assertFalse(boolean1 == boolean0);
      
      meterInterval2.getRange();
      meterInterval0.getRange();
      meterInterval1.getLabel();
      meterInterval0.getRange();
      Paint paint0 = meterInterval2.getBackgroundPaint();
      assertNull(paint0);
      
      meterInterval1.getRange();
      meterInterval0.getOutlinePaint();
      Paint paint1 = meterInterval0.getOutlinePaint();
      assertNotNull(paint1);
      assertTrue(meterInterval0.equals((Object)meterInterval2));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn("-mt4vprb>HE").when(range0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("-mt4vprb>HE", "-mt4vprb>HE").when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn("-mt4vprb>HE").when(stroke0).toString();
      MeterInterval meterInterval0 = new MeterInterval("vL#8-|r#I", range0, paint0, stroke0, paint0);
      meterInterval0.equals("Range[");
      Range range1 = meterInterval0.getRange();
      meterInterval0.equals("vL#8-|r#I");
      meterInterval0.getOutlineStroke();
      meterInterval0.getOutlinePaint();
      boolean boolean0 = meterInterval0.equals("Range[");
      assertFalse(boolean0);
      
      meterInterval0.getBackgroundPaint();
      meterInterval0.getLabel();
      MeterInterval meterInterval1 = new MeterInterval("vL#8-|r#I", range1);
      boolean boolean1 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
  }
}
