/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:30:26 GMT 2023
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.RadialGradientPaint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.TexturePaint;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.PlotChangeListener;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiplePiePlot_ESTest extends MultiplePiePlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getDatasetGroup();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn("8RiS_Q").when(categoryDataset0).toString();
      doReturn((List<GradientPaint>) null).when(categoryDataset0).getRowKeys();
      doReturn((-3106)).when(categoryDataset0).getRowCount();
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot(categoryDataset0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      multiplePiePlot1.setAggregatedItemsKey(comparable0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      multiplePiePlot1.drawBackgroundImage(graphics2D0, rectangle2D0);
      Object object0 = multiplePiePlot1.clone();
      multiplePiePlot1.equals(object0);
      multiplePiePlot1.getLegendItems();
      multiplePiePlot1.setLimit(2707.74828913);
      multiplePiePlot1.getDataset();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(((Plot) object0).DEFAULT_LEGEND_ITEM_BOX).when(graphics2D1).getClip();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      multiplePiePlot1.drawNoDataMessage(graphics2D1, rectangle2D1);
      multiplePiePlot1.getPlotType();
      multiplePiePlot1.getPieChart();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      Stroke stroke0 = multiplePiePlot0.getOutlineStroke();
      multiplePiePlot0.setOutlineStroke(stroke0);
      multiplePiePlot0.getLegendItems();
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.setAggregatedItemsKey(tableOrder0);
      multiplePiePlot0.getDataExtractOrder();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null, (List) null).when(categoryDataset0).getRowKeys();
      doReturn(0, 0).when(categoryDataset0).getRowCount();
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      multiplePiePlot0.setDataset(categoryDataset0);
      multiplePiePlot0.getDataExtractOrder();
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.setLimit(1.0F);
      DatasetGroup datasetGroup0 = mock(DatasetGroup.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(datasetGroup0).when(categoryDataset1).getGroup();
      multiplePiePlot0.setDataset(categoryDataset1);
      multiplePiePlot0.getDataExtractOrder();
      DatasetGroup datasetGroup1 = mock(DatasetGroup.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset2 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset2).getRowKey(anyInt());
      doReturn(10).when(categoryDataset2).getRowCount();
      doReturn(datasetGroup1).when(categoryDataset2).getGroup();
      multiplePiePlot0.setDataset(categoryDataset2);
      // Undeclared exception!
      try { 
        multiplePiePlot0.getLegendItems();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      Stroke stroke0 = multiplePiePlot0.getOutlineStroke();
      multiplePiePlot0.setOutlineStroke(stroke0);
      multiplePiePlot0.getLegendItems();
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.setAggregatedItemsKey(tableOrder0);
      multiplePiePlot0.getDataExtractOrder();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null, (List) null).when(categoryDataset0).getRowKeys();
      doReturn(0, 0).when(categoryDataset0).getRowCount();
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      multiplePiePlot0.setDataset(categoryDataset0);
      multiplePiePlot0.getDataExtractOrder();
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.setLimit(1.0F);
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset1).getGroup();
      multiplePiePlot0.setDataset(categoryDataset1);
      multiplePiePlot0.getDataExtractOrder();
      CategoryDataset categoryDataset2 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null, (List) null).when(categoryDataset2).getRowKeys();
      doReturn(0, 0).when(categoryDataset2).getRowCount();
      doReturn((DatasetGroup) null).when(categoryDataset2).getGroup();
      multiplePiePlot0.setDataset(categoryDataset2);
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.getLegendItems();
      CategoryDataset categoryDataset3 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.equals(multiplePiePlot0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      Composite composite0 = mock(Composite.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(composite0).when(graphics2D0).getComposite();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.fillBackground(graphics2D0, rectangle2D0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.setAggregatedItemsKey(comparable0);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(3204).when(categoryDataset0).getColumnCount();
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      multiplePiePlot0.setDataset(categoryDataset0);
      TableOrder tableOrder1 = TableOrder.BY_ROW;
      multiplePiePlot0.setDataExtractOrder(tableOrder1);
      // Undeclared exception!
      try { 
        multiplePiePlot0.getLegendItems();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      multiplePiePlot0.getDatasetGroup();
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-2612)).when(categoryDataset1).getColumnCount();
      doReturn(2146137086).when(categoryDataset1).getRowCount();
      doReturn((DatasetGroup) null).when(categoryDataset1).getGroup();
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot(categoryDataset1);
      multiplePiePlot1.getDrawingSupplier();
      Composite composite0 = mock(Composite.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(composite0).when(graphics2D0).getComposite();
      doReturn((DatasetGroup) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Paint paint0 = multiplePiePlot1.getOutlinePaint();
      multiplePiePlot1.setOutlinePaint(paint0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((double)1.0F).when(rectangle2D0).getHeight();
      doReturn((-330.44551)).when(rectangle2D0).getWidth();
      doReturn((-1491.74877)).when(rectangle2D0).getX();
      doReturn((double)1.0F).when(rectangle2D0).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      multiplePiePlot1.draw(graphics2D0, rectangle2D0, point2D0, plotState0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      MarkerChangeEvent markerChangeEvent0 = mock(MarkerChangeEvent.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.markerChanged(markerChangeEvent0);
      multiplePiePlot0.getAggregatedItemsKey();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      multiplePiePlot0.getBackgroundImage();
      multiplePiePlot0.setBackgroundImage((Image) null);
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      multiplePiePlot0.setPieChart(jFreeChart0);
      multiplePiePlot0.setAggregatedItemsPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      multiplePiePlot0.clone();
      multiplePiePlot0.setDataset(categoryDataset0);
      multiplePiePlot0.getPlotType();
      multiplePiePlot0.getAggregatedItemsPaint();
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(categoryDataset1).toString();
      doReturn((DatasetGroup) null, (DatasetGroup) null).when(categoryDataset1).getGroup();
      multiplePiePlot0.setDataset(categoryDataset1);
      CategoryDataset categoryDataset2 = multiplePiePlot0.getDataset();
      multiplePiePlot0.clone();
      multiplePiePlot0.getDataset();
      multiplePiePlot0.setAggregatedItemsPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      PlotChangeEvent plotChangeEvent0 = mock(PlotChangeEvent.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.notifyListeners(plotChangeEvent0);
      multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.getPlotType();
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      multiplePiePlot1.setOutlinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      multiplePiePlot0.equals(multiplePiePlot1);
      multiplePiePlot1.setLegendItemShape(multiplePiePlot0.DEFAULT_LEGEND_ITEM_BOX);
      multiplePiePlot1.setLimit(0.5);
      multiplePiePlot1.getAggregatedItemsKey();
      multiplePiePlot0.setDataset(categoryDataset2);
      multiplePiePlot1.getAggregatedItemsKey();
      multiplePiePlot0.getPlotType();
      multiplePiePlot0.getPlotType();
      multiplePiePlot1.setPieChart(jFreeChart0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.fireChangeEvent();
      multiplePiePlot0.getBackgroundImage();
      multiplePiePlot0.setBackgroundImage((Image) null);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0).when(categoryDataset0).getRowCount();
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      multiplePiePlot0.setDataset(categoryDataset0);
      Paint paint0 = multiplePiePlot0.getBackgroundPaint();
      multiplePiePlot0.setAggregatedItemsPaint(paint0);
      multiplePiePlot0.fireChangeEvent();
      Shape shape0 = multiplePiePlot0.getLegendItemShape();
      multiplePiePlot0.getAggregatedItemsKey();
      multiplePiePlot0.setLegendItemShape(shape0);
      multiplePiePlot0.setLimit((-1246.20002714));
      multiplePiePlot0.setLegendItemShape(shape0);
      multiplePiePlot0.getLegendItems();
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset1).getGroup();
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot(categoryDataset1);
      JFreeChart jFreeChart0 = multiplePiePlot1.getPieChart();
      multiplePiePlot0.setPieChart(jFreeChart0);
      multiplePiePlot1.setLegendItemShape(multiplePiePlot0.DEFAULT_LEGEND_ITEM_BOX);
      Paint paint1 = multiplePiePlot1.getBackgroundPaint();
      multiplePiePlot1.setAggregatedItemsPaint(paint1);
      multiplePiePlot1.getDataExtractOrder();
      CategoryDataset categoryDataset2 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset2).getGroup();
      MultiplePiePlot multiplePiePlot2 = new MultiplePiePlot(categoryDataset2);
      multiplePiePlot1.equals(multiplePiePlot2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      Paint paint0 = multiplePiePlot0.getNoDataMessagePaint();
      multiplePiePlot0.setAggregatedItemsPaint(paint0);
      multiplePiePlot0.clone();
      Font font0 = multiplePiePlot0.getNoDataMessageFont();
      multiplePiePlot0.setNoDataMessageFont(font0);
      Integer integer0 = (Integer)Plot.ZERO;
      multiplePiePlot0.equals(integer0);
      Object object0 = multiplePiePlot0.clone();
      multiplePiePlot0.equals(object0);
      Comparable<RadialGradientPaint> comparable0 = (Comparable<RadialGradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.setAggregatedItemsKey(comparable0);
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset1).getGroup();
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot(categoryDataset1);
      multiplePiePlot0.equals(multiplePiePlot1);
      CategoryDataset categoryDataset2 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset2).getColumnCount();
      doReturn(0).when(categoryDataset2).getRowCount();
      doReturn((DatasetGroup) null).when(categoryDataset2).getGroup();
      multiplePiePlot0.setDataset(categoryDataset2);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D0).getClip();
      doReturn((Composite) null).when(graphics2D0).getComposite();
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.draw(graphics2D0, rectangle2D0, point2D0, plotState0, plotRenderingInfo0);
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveRangeAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getBackgroundImage();
      multiplePiePlot0.setBackgroundImage((Image) null);
      multiplePiePlot0.fireChangeEvent();
      multiplePiePlot0.setNoDataMessage((String) null);
      multiplePiePlot0.getAggregatedItemsKey();
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      multiplePiePlot1.drawOutline(graphics2D0, rectangle2D0);
      Paint paint0 = multiplePiePlot1.getAggregatedItemsPaint();
      multiplePiePlot0.setAggregatedItemsPaint(paint0);
      multiplePiePlot1.setDataset((CategoryDataset) null);
      multiplePiePlot1.setLegendItemShape(multiplePiePlot0.DEFAULT_LEGEND_ITEM_BOX);
      multiplePiePlot0.setLimit(645.3);
      multiplePiePlot0.clone();
      multiplePiePlot1.clone();
      MultiplePiePlot multiplePiePlot2 = new MultiplePiePlot((CategoryDataset) null);
      multiplePiePlot0.equals(multiplePiePlot2);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      multiplePiePlot1.setLimit(2649.19);
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      multiplePiePlot0.setAggregatedItemsKey(10);
      multiplePiePlot1.getDataset();
      JFreeChart jFreeChart0 = multiplePiePlot1.getPieChart();
      multiplePiePlot0.getAggregatedItemsPaint();
      Paint paint1 = multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.setPieChart(jFreeChart0);
      multiplePiePlot1.getDataExtractOrder();
      multiplePiePlot0.getLimit();
      multiplePiePlot1.setAggregatedItemsPaint(paint0);
      multiplePiePlot0.setAggregatedItemsPaint(paint1);
      multiplePiePlot2.getLimit();
      multiplePiePlot1.setPieChart(jFreeChart0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      multiplePiePlot0.clone();
      // Undeclared exception!
      try { 
        multiplePiePlot0.setAggregatedItemsPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      Object object0 = multiplePiePlot0.clone();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.drawBackgroundImage(graphics2D0, (Rectangle2D) null);
      multiplePiePlot0.setLegendItemShape(rectangle2D_Double0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D1).getClip();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.drawNoDataMessage(graphics2D1, rectangle2D0);
      multiplePiePlot0.getDataExtractOrder();
      multiplePiePlot0.equals(object0);
      multiplePiePlot0.getPieChart();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        multiplePiePlot0.draw(graphics2D2, (Rectangle2D) null, point2D0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      Paint paint0 = multiplePiePlot0.getOutlinePaint();
      multiplePiePlot0.setNoDataMessagePaint(paint0);
      multiplePiePlot0.getPlotType();
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset1).getGroup();
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot(categoryDataset1);
      multiplePiePlot0.equals(multiplePiePlot1);
      multiplePiePlot0.getLimit();
      multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.getPieChart();
      multiplePiePlot0.getPlotType();
      multiplePiePlot0.getPlotType();
      multiplePiePlot0.getLegendItemShape();
      multiplePiePlot0.clone();
      multiplePiePlot0.setLimit(0.5F);
      multiplePiePlot0.setAggregatedItemsKey(tableOrder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(categoryDataset0).toString();
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0).when(categoryDataset0).getRowCount();
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      multiplePiePlot0.equals(color0);
      multiplePiePlot0.getLimit();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      multiplePiePlot0.setLegendItemShape(rectangle2D_Double0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      multiplePiePlot0.setBackgroundAlpha((-3683.789F));
      multiplePiePlot0.createAndAddEntity(rectangle2D0, plotRenderingInfo0, (String) null, "n\"*){SJP[A9X2");
      multiplePiePlot0.getLegendItems();
      PlotChangeEvent plotChangeEvent0 = mock(PlotChangeEvent.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.notifyListeners(plotChangeEvent0);
      multiplePiePlot0.setLegendItemShape(rectangle2D_Double0);
      multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.getAggregatedItemsKey();
      Stroke stroke0 = multiplePiePlot0.getOutlineStroke();
      multiplePiePlot0.setOutlineStroke(stroke0);
      multiplePiePlot0.setLegendItemShape(rectangle2D_Double0);
      multiplePiePlot0.equals("n\"*){SJP[A9X2");
      multiplePiePlot0.setLegendItemShape(rectangle2D_Double0);
      multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.getDataset();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Composite) null).when(graphics2D0).getComposite();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D1).getHeight();
      doReturn(0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        multiplePiePlot0.draw(graphics2D0, rectangle2D1, point2D0, plotState0, plotRenderingInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // alpha value out of range
         //
         verifyException("java.awt.AlphaComposite", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.setLimit((-347.999841583));
      multiplePiePlot0.getLimit();
      multiplePiePlot0.getLegendItemShape();
      multiplePiePlot0.getAggregatedItemsKey();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      BasicStroke basicStroke0 = (BasicStroke)Plot.DEFAULT_OUTLINE_STROKE;
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      multiplePiePlot1.clone();
      multiplePiePlot0.setParent(multiplePiePlot1);
      multiplePiePlot0.setOutlineStroke(basicStroke0);
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.setLimit(15);
      multiplePiePlot0.getAggregatedItemsKey();
      multiplePiePlot0.getPieChart();
      Plot plot0 = multiplePiePlot0.getRootPlot();
      multiplePiePlot1.clone();
      multiplePiePlot1.setParent(plot0);
      multiplePiePlot0.clone();
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      multiplePiePlot0.equals(color0);
      multiplePiePlot1.getPieChart();
      multiplePiePlot1.getDataExtractOrder();
      multiplePiePlot1.setAggregatedItemsKey(1.0F);
      multiplePiePlot0.clone();
      multiplePiePlot0.setAggregatedItemsPaint(multiplePiePlot1.DEFAULT_OUTLINE_PAINT);
      multiplePiePlot1.getLimit();
      multiplePiePlot1.getPieChart();
      multiplePiePlot1.setLimit(0.5F);
      multiplePiePlot1.getLegendItems();
      multiplePiePlot0.getLimit();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.drawOutline(graphics2D0, rectangle2D0);
      multiplePiePlot0.removeChangeListener((PlotChangeListener) null);
      multiplePiePlot0.getPlotType();
      multiplePiePlot0.setAggregatedItemsKey("Multiple Pie Plot");
      multiplePiePlot0.getLegendItems();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Font font0 = multiplePiePlot0.getNoDataMessageFont();
      multiplePiePlot0.setNoDataMessageFont(font0);
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        multiplePiePlot0.draw(graphics2D1, (Rectangle2D) null, point2D0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Composite) null).when(graphics2D0).getComposite();
      multiplePiePlot0.setDrawingSupplier((DrawingSupplier) null);
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      multiplePiePlot0.setAggregatedItemsPaint(color0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D1).getClip();
      doReturn((Composite) null).when(graphics2D1).getComposite();
      doReturn((Object) null).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.draw(graphics2D1, rectangle2D0, point2D0, plotState0, plotRenderingInfo0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.drawBackground(graphics2D0, rectangle2D1);
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.getPieChart();
      Shape shape0 = multiplePiePlot0.getLegendItemShape();
      multiplePiePlot0.getDataset();
      multiplePiePlot0.equals((Object) null);
      multiplePiePlot0.getDataExtractOrder();
      multiplePiePlot0.setLegendItemShape(shape0);
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.setLegendItemShape(shape0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D2).getClip();
      doReturn((Composite) null).when(graphics2D2).getComposite();
      doReturn((Object) null).when(graphics2D2).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D2).getHeight();
      doReturn(0.0).when(rectangle2D2).getWidth();
      doReturn(0.0).when(rectangle2D2).getX();
      doReturn(0.0).when(rectangle2D2).getY();
      Point2D point2D1 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState1 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.draw(graphics2D2, rectangle2D2, point2D1, plotState1, plotRenderingInfo1);
      // Undeclared exception!
      try { 
        multiplePiePlot0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'object' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      RectangleInsets rectangleInsets0 = Plot.DEFAULT_INSETS;
      multiplePiePlot0.setInsets(rectangleInsets0);
      multiplePiePlot0.setBackgroundAlpha(0.0F);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      multiplePiePlot0.setBackgroundImage((Image) null);
      multiplePiePlot0.getDataExtractOrder();
      multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.getAggregatedItemsKey();
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.clone();
      multiplePiePlot0.setAggregatedItemsPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      multiplePiePlot0.clone();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      multiplePiePlot0.setDataset(categoryDataset0);
      multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        multiplePiePlot0.setLegendItemShape((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.setLimit((-3180.02845));
      Paint paint0 = multiplePiePlot0.getOutlinePaint();
      multiplePiePlot0.setAggregatedItemsPaint(paint0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D0).getClip();
      doReturn((Composite) null).when(graphics2D0).getComposite();
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.draw(graphics2D0, rectangle2D0, point2D0, plotState0, plotRenderingInfo0);
      multiplePiePlot0.setBackgroundPaint(paint0);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      multiplePiePlot0.setDataset(categoryDataset0);
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot((CategoryDataset) null);
      Object object0 = multiplePiePlot1.clone();
      multiplePiePlot0.equals(object0);
      multiplePiePlot1.getPieChart();
      multiplePiePlot1.equals(paint0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      multiplePiePlot0.setPieChart(jFreeChart0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.equals((Object) null);
      multiplePiePlot0.getLimit();
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      multiplePiePlot1.getChart();
      multiplePiePlot0.addChangeListener((PlotChangeListener) null);
      multiplePiePlot0.clone();
      multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        multiplePiePlot0.setAggregatedItemsPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      multiplePiePlot0.equals(legendItemCollection0);
      multiplePiePlot0.getLegendItemShape();
      multiplePiePlot0.getDataset();
      multiplePiePlot0.getLimit();
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      multiplePiePlot0.setAggregatedItemsPaint(color0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
      multiplePiePlot0.setChart((JFreeChart) null);
      multiplePiePlot0.setLegendItemShape(ellipse2D_Double0);
      multiplePiePlot0.getLegendItemShape();
      multiplePiePlot0.getAggregatedItemsKey();
      multiplePiePlot0.getAggregatedItemsKey();
      multiplePiePlot0.getAggregatedItemsPaint();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      Paint paint0 = multiplePiePlot0.getOutlinePaint();
      multiplePiePlot0.setAggregatedItemsPaint(paint0);
      multiplePiePlot0.getLegendItemShape();
      multiplePiePlot0.getAggregatedItemsKey();
      multiplePiePlot0.getDataExtractOrder();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      Integer integer0 = (Integer)Plot.ZERO;
      JFreeChart jFreeChart0 = multiplePiePlot0.getChart();
      multiplePiePlot0.addChangeListener((PlotChangeListener) null);
      multiplePiePlot0.setNoDataMessagePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      multiplePiePlot0.equals(integer0);
      multiplePiePlot0.getPlotType();
      multiplePiePlot0.clone();
      multiplePiePlot0.clone();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      multiplePiePlot0.setAggregatedItemsPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      // Undeclared exception!
      try { 
        multiplePiePlot0.setPieChart((JFreeChart) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'pieChart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      BasicStroke basicStroke0 = (BasicStroke)Plot.DEFAULT_OUTLINE_STROKE;
      multiplePiePlot0.getBackgroundImage();
      multiplePiePlot0.setBackgroundImage((Image) null);
      multiplePiePlot0.setOutlineStroke(basicStroke0);
      CategoryDataset categoryDataset0 = null;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Composite) null).when(graphics2D0).getComposite();
      Rectangle2D rectangle2D0 = null;
      multiplePiePlot0.fillBackground(graphics2D0, (Rectangle2D) null);
      multiplePiePlot0.getDatasetGroup();
      multiplePiePlot0.setDatasetGroup((DatasetGroup) null);
      multiplePiePlot0.setDataset((CategoryDataset) null);
      multiplePiePlot0.setLimit(2535.256863743187);
      Comparable<Object> comparable0 = null;
      // Undeclared exception!
      try { 
        multiplePiePlot0.setAggregatedItemsKey((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(categoryDataset0).toString();
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0).when(categoryDataset0).getRowCount();
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Composite) null).when(graphics2D0).getComposite();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.drawBackground(graphics2D0, rectangle2D0);
      BasicStroke basicStroke0 = (BasicStroke)Plot.DEFAULT_OUTLINE_STROKE;
      multiplePiePlot0.setOutlineStroke(basicStroke0);
      multiplePiePlot0.setNoDataMessage("N");
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.setAggregatedItemsKey("N");
      Integer integer0 = (Integer)Plot.ZERO;
      multiplePiePlot0.equals(integer0);
      multiplePiePlot0.getAggregatedItemsKey();
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.annotationChanged(annotationChangeEvent0);
      multiplePiePlot0.getPieChart();
      multiplePiePlot0.getDataset();
      multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.getPlotType();
      multiplePiePlot0.setLimit((-3616.155576769392));
      multiplePiePlot0.getDataset();
      Object object0 = multiplePiePlot0.clone();
      multiplePiePlot0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      Comparable<RadialGradientPaint> comparable0 = (Comparable<RadialGradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.setAggregatedItemsKey(comparable0);
      multiplePiePlot0.datasetChanged((DatasetChangeEvent) null);
      multiplePiePlot0.clone();
      multiplePiePlot0.getPlotType();
      multiplePiePlot0.setAggregatedItemsKey("Multiple Pie Plot");
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      multiplePiePlot0.setAggregatedItemsPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
      multiplePiePlot0.setLegendItemShape(ellipse2D_Double0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.drawOutline(graphics2D0, rectangle2D0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      TableOrder tableOrder1 = TableOrder.BY_ROW;
      multiplePiePlot0.setDataExtractOrder(tableOrder1);
      multiplePiePlot0.clone();
      multiplePiePlot0.getDataset();
      multiplePiePlot0.setAggregatedItemsKey("Multiple Pie Plot");
      multiplePiePlot0.getDataset();
      multiplePiePlot0.setAggregatedItemsPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      Object object0 = multiplePiePlot0.clone();
      multiplePiePlot0.equals(object0);
      multiplePiePlot0.setPieChart(jFreeChart0);
      multiplePiePlot0.getAggregatedItemsKey();
      multiplePiePlot0.setAggregatedItemsPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D1).getClip();
      doReturn((Composite) null).when(graphics2D1).getComposite();
      doReturn((Object) null).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D1).getHeight();
      doReturn(0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.draw(graphics2D1, rectangle2D1, point2D0, (PlotState) null, plotRenderingInfo0);
      multiplePiePlot0.clone();
      multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.getPieChart();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      Shape shape0 = multiplePiePlot0.getLegendItemShape();
      multiplePiePlot0.setLegendItemShape(shape0);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      multiplePiePlot0.setDataset(categoryDataset0);
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset1).getGroup();
      multiplePiePlot0.setDataset(categoryDataset1);
      RectangleInsets rectangleInsets0 = Plot.DEFAULT_INSETS;
      multiplePiePlot0.setInsets(rectangleInsets0, true);
      CategoryDataset categoryDataset2 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset2).getGroup();
      multiplePiePlot0.setDataset(categoryDataset2);
      CategoryDataset categoryDataset3 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(categoryDataset3).toString();
      doReturn((List) null, (List) null).when(categoryDataset3).getColumnKeys();
      doReturn(0, 0).when(categoryDataset3).getColumnCount();
      doReturn((DatasetGroup) null).when(categoryDataset3).getGroup();
      multiplePiePlot0.setDataset(categoryDataset3);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      multiplePiePlot0.drawOutline(graphics2D0, (Rectangle2D) null);
      multiplePiePlot0.setLimit(8.0);
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.equals(rectangleInsets0);
      TableOrder tableOrder1 = multiplePiePlot0.getDataExtractOrder();
      multiplePiePlot0.setAggregatedItemsKey(tableOrder1);
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      multiplePiePlot0.getDataset();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.setBackgroundAlpha(0.0F);
      Comparable comparable0 = multiplePiePlot0.getAggregatedItemsKey();
      multiplePiePlot0.setAggregatedItemsKey(comparable0);
      multiplePiePlot0.getLegendItemShape();
      multiplePiePlot0.getDataExtractOrder();
      Plot plot0 = multiplePiePlot0.getRootPlot();
      plot0.setChart((JFreeChart) null);
      multiplePiePlot0.setParent(plot0);
      multiplePiePlot0.setOutlinePaint(plot0.DEFAULT_BACKGROUND_PAINT);
      multiplePiePlot0.setAggregatedItemsKey(comparable0);
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.getDataset();
      MultiplePiePlot multiplePiePlot1 = (MultiplePiePlot)multiplePiePlot0.clone();
      multiplePiePlot0.getDataExtractOrder();
      multiplePiePlot0.getLegendItemShape();
      multiplePiePlot0.setLimit(2648.42215);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      multiplePiePlot0.setPieChart(jFreeChart0);
      multiplePiePlot0.getDataExtractOrder();
      multiplePiePlot0.setPieChart(jFreeChart0);
      multiplePiePlot0.getPlotType();
      multiplePiePlot0.setLimit(0.0F);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D0).getClip();
      doReturn((Composite) null).when(graphics2D0).getComposite();
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.draw(graphics2D0, rectangle2D0, point2D0, plotState0, plotRenderingInfo0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D1).getHeight();
      doReturn(0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      Point2D point2D1 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState1 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        multiplePiePlot1.draw((Graphics2D) null, rectangle2D1, point2D1, plotState1, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      RectangleInsets rectangleInsets0 = Plot.DEFAULT_INSETS;
      multiplePiePlot0.setInsets(rectangleInsets0, true);
      MarkerChangeEvent markerChangeEvent0 = mock(MarkerChangeEvent.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.markerChanged(markerChangeEvent0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        multiplePiePlot0.fillBackground((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(categoryDataset0).toString();
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0).when(categoryDataset0).getRowCount();
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      multiplePiePlot0.equals(color0);
      multiplePiePlot0.getLimit();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      multiplePiePlot0.setLegendItemShape(rectangle2D_Double0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      multiplePiePlot0.setBackgroundAlpha((-3683.789F));
      multiplePiePlot0.createAndAddEntity(rectangle2D0, plotRenderingInfo0, (String) null, "n\"*){SJP[A9X2");
      multiplePiePlot0.getLegendItems();
      PlotChangeEvent plotChangeEvent0 = mock(PlotChangeEvent.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.notifyListeners(plotChangeEvent0);
      multiplePiePlot0.setLegendItemShape(rectangle2D_Double0);
      Paint paint0 = multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.getAggregatedItemsKey();
      Stroke stroke0 = multiplePiePlot0.getOutlineStroke();
      multiplePiePlot0.setOutlineStroke(stroke0);
      multiplePiePlot0.setLegendItemShape(rectangle2D_Double0);
      multiplePiePlot0.equals("n\"*){SJP[A9X2");
      multiplePiePlot0.setLegendItemShape(rectangle2D_Double0);
      multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.getDataset();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Composite) null).when(graphics2D0).getComposite();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D1).getHeight();
      doReturn(0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.equals(paint0);
      // Undeclared exception!
      try { 
        multiplePiePlot0.draw(graphics2D0, rectangle2D1, point2D0, plotState0, plotRenderingInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // alpha value out of range
         //
         verifyException("java.awt.AlphaComposite", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getDatasetGroup();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot(categoryDataset0);
      multiplePiePlot1.getDatasetGroup();
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(categoryDataset1).getGroup();
      MultiplePiePlot multiplePiePlot2 = new MultiplePiePlot(categoryDataset1);
      multiplePiePlot2.getDrawingSupplier();
      Composite composite0 = mock(Composite.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Paint paint0 = multiplePiePlot2.getOutlinePaint();
      multiplePiePlot2.setOutlinePaint(paint0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(categoryDataset0).getColumnKeys();
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn((DatasetGroup) null).when(categoryDataset0).getGroup();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      multiplePiePlot0.setLegendItemShape(rectangle2D_Double0);
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot(categoryDataset0);
      multiplePiePlot1.setOutlinePaint(multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      multiplePiePlot0.equals(multiplePiePlot1);
      Object object0 = multiplePiePlot1.clone();
      Shape shape0 = multiplePiePlot0.getLegendItemShape();
      multiplePiePlot1.getLegendItemShape();
      assertTrue(multiplePiePlot1.equals((Object)object0));
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      multiplePiePlot1.setDataExtractOrder(tableOrder0);
      multiplePiePlot0.setParent(multiplePiePlot1);
      multiplePiePlot0.setAggregatedItemsPaint(multiplePiePlot1.DEFAULT_BACKGROUND_PAINT);
      DrawingSupplier drawingSupplier0 = multiplePiePlot0.getDrawingSupplier();
      multiplePiePlot0.setDrawingSupplier(drawingSupplier0, false);
      multiplePiePlot0.getPlotType();
      multiplePiePlot1.setLegendItemShape(shape0);
      multiplePiePlot0.getDataset();
      multiplePiePlot0.setDataset((CategoryDataset) null);
      multiplePiePlot1.setLegendItemShape(shape0);
      multiplePiePlot1.getLegendItems();
      multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      multiplePiePlot0.getAggregatedItemsPaint();
      multiplePiePlot0.getLegendItems();
      multiplePiePlot0.getLegendItems();
      MultiplePiePlot multiplePiePlot2 = new MultiplePiePlot((CategoryDataset) null);
      boolean boolean0 = multiplePiePlot1.equals(multiplePiePlot2);
      assertFalse(boolean0);
      assertNotSame(multiplePiePlot1, object0);
  }
}
