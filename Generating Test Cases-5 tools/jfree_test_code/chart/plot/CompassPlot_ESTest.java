/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:12:39 GMT 2023
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.TexturePaint;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.MultiPixelPackedSampleModel;
import java.awt.image.Raster;
import java.awt.image.RasterFormatException;
import java.awt.image.SampleModel;
import java.awt.image.WritableRaster;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.JWindow;
import javax.swing.border.StrokeBorder;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYPolygonAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.ChartChangeEventType;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.PlotChangeListener;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.needle.ArrowNeedle;
import org.jfree.chart.needle.MeterNeedle;
import org.jfree.chart.needle.MiddlePinNeedle;
import org.jfree.chart.needle.PinNeedle;
import org.jfree.chart.needle.PlumNeedle;
import org.jfree.chart.plot.CategoryMarkerTest;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlotState;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.TextAnchor;
import org.jfree.chart.util.DefaultShadowGenerator;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.time.TimeSeriesTableModel;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompassPlot_ESTest extends CompassPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      CategoryMarkerTest categoryMarkerTest0 = new CategoryMarkerTest();
      categoryMarkerTest0.testGetSetDrawAsLine();
      MarkerChangeEvent markerChangeEvent0 = categoryMarkerTest0.lastEvent;
      compassPlot0.markerChanged(markerChangeEvent0);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(compassPlot0);
      compassPlot0.notifyListeners(plotChangeEvent0);
      compassPlot0.zoom((-195.09867));
      compassPlot0.getDatasets();
      BasicStroke basicStroke0 = new BasicStroke();
      StrokeBorder strokeBorder0 = new StrokeBorder(basicStroke0);
      BasicStroke basicStroke1 = strokeBorder0.getStroke();
      compassPlot0.setSeriesOutlineStroke(1, basicStroke1);
      compassPlot0.getLabelFont();
      compassPlot0.getRevolutionDistance();
      // Undeclared exception!
      try { 
        compassPlot0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = CompassPlot.NO_LABELS;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      ValueDataset valueDataset0 = meterPlot0.getDataset();
      CompassPlot compassPlot0 = new CompassPlot(valueDataset0);
      defaultValueDataset0.hasListener(meterPlot0);
      compassPlot0.revolutionDistance = 30.0;
      meterPlot0.addChangeListener((PlotChangeListener) null);
      compassPlot0.setSeriesPaint(0, meterPlot0.DEFAULT_OUTLINE_PAINT);
      compassPlot0.getDrawBorder();
      compassPlot0.setRevolutionDistance(1.0F);
      compassPlot0.clone();
      PinNeedle pinNeedle0 = new PinNeedle();
      compassPlot0.addDataset((ValueDataset) defaultValueDataset0, (MeterNeedle) pinNeedle0);
      compassPlot0.setLabelType(0);
      JComboBox<DefaultValueDataset> jComboBox0 = new JComboBox<DefaultValueDataset>();
      try { 
        JOptionPane.getFrameForComponent(jComboBox0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      defaultValueDataset0.validateObject();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      int int0 = 2;
      compassPlot0.setSeriesNeedle(2);
      compassPlot0.setRevolutionDistance((-1.0));
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_TICK_MARK_STROKE;
      compassPlot0.setSeriesOutlineStroke(2, basicStroke0);
      compassPlot0.setRevolutionDistance(0.0);
      SystemColor systemColor0 = SystemColor.textHighlight;
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, systemColor0, (-1.0F), 0, 837.3065654805334);
      BufferedImage bufferedImage0 = new BufferedImage(101, 2, 2);
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow(bufferedImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.5);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueDataset valueDataset0 = thermometerPlot0.getDataset();
      CompassPlot compassPlot0 = new CompassPlot(valueDataset0);
      compassPlot0.setSeriesPaint((-10), thermometerPlot0.DEFAULT_OUTLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1437.97800594));
      defaultValueDataset0.validateObject();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      PinNeedle pinNeedle0 = new PinNeedle();
      compassPlot0.setSeriesNeedle(1, (MeterNeedle) pinNeedle0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      compassPlot0.setLabelType(1);
      compassPlot0.setParent(combinedDomainCategoryPlot0);
      defaultValueDataset0.setNotify(false);
      compassPlot0.setInsets(combinedDomainCategoryPlot0.DEFAULT_INSETS, false);
      compassPlot0.getCompassFont((-1295));
      compassPlot0.getCompassFont((-1295));
      CategoryPlot categoryPlot0 = new CategoryPlot();
      combinedDomainCategoryPlot0.add(categoryPlot0, 123);
      // Undeclared exception!
      try { 
        compassPlot0.setSeriesNeedle((-1486));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised type.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.setSeriesNeedle(0);
      // Undeclared exception!
      try { 
        compassPlot0.setRoseHighlightPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", compassPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 10, (double) 1.0F, (double) 10, (ChartRenderingInfo) null);
      int int0 = 973;
      // Undeclared exception!
      try { 
        bufferedImage0.getSubimage(1, 973, 10, 0);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      defaultValueDataset0.setValue(compassPlot0.ZERO);
      Color color0 = (Color)XYPlot.DEFAULT_CROSSHAIR_PAINT;
      compassPlot0.setSeriesOutlinePaint(1, color0);
      // Undeclared exception!
      try { 
        compassPlot0.setSeriesNeedle(17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised type.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1012.0));
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      compassPlot0.setBackgroundImageAlignment((-1177));
      compassPlot0.addDataset((ValueDataset) defaultValueDataset0);
      Color color0 = Color.RED;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 10;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) (-1177);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = 1.0F;
      floatArray0[8] = (float) 0;
      color0.getComponents(floatArray0);
      compassPlot0.setSeriesPaint(0, color0);
      // Undeclared exception!
      try { 
        compassPlot0.setSeriesNeedle((-1177), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1177
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueDataset valueDataset0 = thermometerPlot0.getDataset();
      CompassPlot compassPlot0 = new CompassPlot(valueDataset0);
      compassPlot0.getDatasets();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getDataset();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      meterPlot0.setNeedlePaint(color0);
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) null);
      compassPlot0.setLabelFont(meterPlot0.DEFAULT_LABEL_FONT);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(meterPlot0);
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.GENERAL;
      plotChangeEvent0.setType(chartChangeEventType0);
      compassPlot0.notifyListeners(plotChangeEvent0);
      meterPlot0.setValueFont(compassPlot0.DEFAULT_LABEL_FONT);
      compassPlot0.setRosePaint(meterPlot0.DEFAULT_BACKGROUND_PAINT);
      compassPlot0.getLabelType();
      compassPlot0.getLabelType();
      compassPlot0.clone();
      PinNeedle pinNeedle0 = new PinNeedle();
      compassPlot0.setSeriesNeedle(10, (MeterNeedle) pinNeedle0);
      compassPlot0.getLegendItems();
      Graphics2D graphics2D0 = null;
      String string0 = "";
      int int0 = 3675;
      AffineTransform.getScaleInstance(10, 10);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = Plot.MINIMUM_HEIGHT_TO_DRAW;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      defaultValueDataset0.clone();
      Color color0 = Color.darkGray;
      Color.getColor("iGi");
      Color color1 = Color.getColor("d.", color0);
      compassPlot0.setSeriesOutlinePaint(10, color0);
      compassPlot0.addDataset((ValueDataset) defaultValueDataset0);
      Color.getColor("d.", 1);
      color0.getColorSpace();
      compassPlot0.setSeriesOutlinePaint(0, color1);
      compassPlot0.getDrawBorder();
      Area area0 = new Area();
      compassPlot0.equals(area0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      standardCategoryItemLabelGenerator0.clone();
      stackedAreaRenderer0.setDefaultItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      stackedAreaRenderer0.lookupSeriesFillPaint(1);
      stackedAreaRenderer0.getDefaultLegendTextPaint();
      // Undeclared exception!
      try { 
        compassPlot0.setRosePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      Stroke stroke0 = stackedAreaRenderer0.getItemOutlineStroke(10, 1);
      compassPlot0.setSeriesOutlineStroke((-84), stroke0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.revolutionDistance = 0.0;
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_SHADOW_PAINT;
      compassPlot0.setRoseHighlightPaint(color0);
      compassPlot0.clone();
      compassPlot0.setSeriesNeedle(32, (MeterNeedle) null);
      compassPlot0.setRosePaint(color0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      compassPlot0.addDataset((ValueDataset) defaultValueDataset0, (MeterNeedle) null);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation0 = categoryPlot0.getDomainAxisLocation();
      categoryPlot0.clearRangeMarkers(10);
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      dateAxis0.setAxisLinePaint(categoryPlot0.DEFAULT_CROSSHAIR_PAINT);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      Plot.resolveDomainAxisLocation(axisLocation1, plotOrientation0);
      compassPlot0.getRosePaint();
      compassPlot0.getRoseHighlightPaint();
      compassPlot0.setSeriesNeedle(0, 0);
      Paint paint0 = compassPlot0.getRoseCenterPaint();
      compassPlot0.getPlotType();
      compassPlot0.getRoseCenterPaint();
      compassPlot0.setRevolutionDistance(0.0);
      compassPlot0.getDrawBorder();
      compassPlot0.setSeriesOutlinePaint(10, dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      compassPlot0.getLabelFont();
      compassPlot0.setSeriesPaint(0, paint0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      // Undeclared exception!
      try { 
        compassPlot0.setSeriesNeedle(243, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 243
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      int int0 = 14;
      Integer.min(14, 1182);
      Integer.toUnsignedString(14);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      MiddlePinNeedle middlePinNeedle0 = new MiddlePinNeedle();
      compassPlot0.setSeriesNeedle(14, (MeterNeedle) middlePinNeedle0);
      defaultValueDataset0.addChangeListener(compassPlot0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("");
      stackedAreaRenderer0.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      stackedAreaRenderer0.getLegendTextFont((-423));
      // Undeclared exception!
      try { 
        compassPlot0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1354.079));
      DatasetGroup datasetGroup0 = new DatasetGroup();
      datasetGroup0.clone();
      defaultValueDataset0.setGroup(datasetGroup0);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      compassPlot0.getLabelType();
      compassPlot0.getRoseCenterPaint();
      compassPlot0.getRoseCenterPaint();
      compassPlot0.clone();
      defaultValueDataset0.removeChangeListener(compassPlot0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      int int0 = 60;
      int int1 = 458;
      ChartRenderingInfo chartRenderingInfo0 = null;
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      int int2 = 0;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(80, 1337, 0, (IndexColorModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      defaultValueDataset0.hasListener(thermometerPlot0);
      ValueDataset valueDataset0 = thermometerPlot0.getDataset();
      CompassPlot compassPlot0 = new CompassPlot(valueDataset0);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("XYW49PvDWBUu", 0.5, (-2489.914548), 0.5);
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      compassPlot0.addDataset(valueDataset0, (MeterNeedle) arrowNeedle0);
      TextAnchor textAnchor0 = xYPointerAnnotation0.getTextAnchor();
      xYPointerAnnotation0.setRotationAnchor(textAnchor0);
      defaultValueDataset0.setValue(10.0);
      Font font0 = xYPointerAnnotation0.getFont();
      font0.getPSName();
      compassPlot0.setLabelFont(font0);
      compassPlot0.setSeriesOutlinePaint((-1193), xYPointerAnnotation0.DEFAULT_PAINT);
      compassPlot0.setSeriesNeedle(459, 3);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(202007.0, (-1644.74177076));
      thermometerPlot0.getDataRange(cyclicNumberAxis0);
      compassPlot0.getPlotType();
      DefaultValueDataset defaultValueDataset1 = new DefaultValueDataset();
      defaultValueDataset1.clone();
      compassPlot0.equals(defaultValueDataset1);
      compassPlot0.addDataset((ValueDataset) defaultValueDataset1);
      compassPlot0.setRoseCenterPaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      compassPlot0.zoom(0.5);
      compassPlot0.addDataset(valueDataset0, (MeterNeedle) arrowNeedle0);
      DefaultValueDataset defaultValueDataset2 = new DefaultValueDataset(0.0);
      compassPlot0.addDataset((ValueDataset) defaultValueDataset2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      compassPlot0.clone();
      compassPlot0.setDrawBorder(true);
      compassPlot0.equals(defaultValueDataset0);
      SystemColor systemColor0 = SystemColor.windowText;
      compassPlot0.setSeriesOutlinePaint(1492, systemColor0);
      compassPlot0.setDrawBorder(false);
      compassPlot0.setSeriesOutlineStroke(365, (Stroke) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      // Undeclared exception!
      try { 
        compassPlot0.setRoseCenterPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float float0 = Plot.DEFAULT_BACKGROUND_ALPHA;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1.0F);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      compassPlot0.addDataset((ValueDataset) defaultValueDataset0);
      defaultValueDataset0.hasListener(compassPlot0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.getDefaultLegendTextFont();
      // Undeclared exception!
      try { 
        compassPlot0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      int int0 = (-2939);
      PinNeedle pinNeedle0 = new PinNeedle();
      pinNeedle0.setRotateY((-2939));
      pinNeedle0.setRotateY(2950.4064514);
      pinNeedle0.setOutlinePaint(compassPlot0.DEFAULT_BACKGROUND_PAINT);
      pinNeedle0.equals(compassPlot0);
      pinNeedle0.setFillPaint(compassPlot0.DEFAULT_BACKGROUND_PAINT);
      // Undeclared exception!
      try { 
        compassPlot0.setSeriesNeedle((-2939), (MeterNeedle) pinNeedle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2939
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      CompassPlot compassPlot0 = new CompassPlot(valueDataset0);
      int int0 = 7;
      compassPlot0.setSeriesNeedle(7);
      // Undeclared exception!
      try { 
        compassPlot0.setLabelType(7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MeterPlot.setLabelType(int): unrecognised type.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.zoom(240.3603576);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Fb$O] -zq{R", 0, 0.5, 15.0);
      Paint paint0 = xYPointerAnnotation0.getArrowPaint();
      compassPlot0.setSeriesPaint(0, paint0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      assertNotNull(compassPlot0);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      
      Color color0 = (Color)compassPlot0.getRosePaint();
      assertNotNull(color0);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-256), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      
      MiddlePinNeedle middlePinNeedle0 = new MiddlePinNeedle();
      assertNotNull(middlePinNeedle0);
      assertEquals(0.5, middlePinNeedle0.getRotateX(), 0.01);
      assertEquals(5, middlePinNeedle0.getSize());
      assertEquals(0.5, middlePinNeedle0.getRotateY(), 0.01);
      
      middlePinNeedle0.setRotateX((-1121.4239155));
      assertEquals((-1121.4239155), middlePinNeedle0.getRotateX(), 0.01);
      assertEquals(5, middlePinNeedle0.getSize());
      assertEquals(0.5, middlePinNeedle0.getRotateY(), 0.01);
      
      compassPlot0.setSeriesNeedle(5588, (MeterNeedle) middlePinNeedle0);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals((-1121.4239155), middlePinNeedle0.getRotateX(), 0.01);
      assertEquals(5, middlePinNeedle0.getSize());
      assertEquals(0.5, middlePinNeedle0.getRotateY(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      
      compassPlot0.setSeriesOutlinePaint(5588, color0);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-256), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      
      compassPlot0.setRevolutionDistance((-1121.4239155));
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      
      Color color1 = (Color)compassPlot0.getRosePaint();
      assertNotNull(color1);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals((-256), color1.getRGB());
      assertEquals(255, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertSame(color1, color0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      
      compassPlot0.setRosePaint(color1);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals((-256), color1.getRGB());
      assertEquals(255, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertSame(color1, color0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      
      LegendItemCollection legendItemCollection0 = compassPlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-289.4531917606583));
      candlestickRenderer0.getSeriesStroke(0);
      compassPlot0.setSeriesOutlineStroke(2017, (Stroke) null);
      compassPlot0.getCompassFont((-1979));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      compassPlot0.setSeriesPaint(32, color0);
      compassPlot0.setRoseHighlightPaint(color0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueDataset valueDataset0 = thermometerPlot0.getDataset();
      CompassPlot compassPlot0 = new CompassPlot(valueDataset0);
      compassPlot0.setDrawBorder(true);
      compassPlot0.getCompassFont(1884);
      defaultValueDataset0.validateObject();
      compassPlot0.setSeriesOutlineStroke(0, thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      // Undeclared exception!
      try { 
        compassPlot0.setLabelType(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MeterPlot.setLabelType(int): unrecognised type.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.clone();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(1.0);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      JList<Ellipse2D.Float> jList0 = new JList<Ellipse2D.Float>();
      Color color0 = jList0.getSelectionBackground();
      compassPlot0.setRoseHighlightPaint(color0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      ValueDataset valueDataset0 = meterPlot0.getDataset();
      CompassPlot compassPlot0 = new CompassPlot(valueDataset0);
      compassPlot0.getLabelType();
      meterPlot0.setInsets(compassPlot0.DEFAULT_INSETS, true);
      compassPlot0.getPlotType();
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(false);
      arrowNeedle0.equals(valueDataset0);
      arrowNeedle0.setRotateX(2397.05);
      defaultValueDataset0.clone();
      arrowNeedle0.setRotateY(0.0);
      compassPlot0.addDataset(valueDataset0, (MeterNeedle) arrowNeedle0);
      meterPlot0.setDialOutlinePaint(compassPlot0.DEFAULT_OUTLINE_PAINT);
      defaultValueDataset0.setNotify(true);
      compassPlot0.getDrawBorder();
      compassPlot0.getLegendItems();
      compassPlot0.setRevolutionDistance(10);
      compassPlot0.getLabelType();
      compassPlot0.setDrawBorder(false);
      compassPlot0.setSeriesNeedle(128, (MeterNeedle) arrowNeedle0);
      compassPlot0.getPlotType();
      compassPlot0.addDataset((ValueDataset) defaultValueDataset0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      Paint paint0 = compassPlot0.getOutlinePaint();
      compassPlot0.setBackgroundPaint(paint0);
      int int0 = 3211;
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      doReturn(0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = null;
      // Undeclared exception!
      try { 
        compassPlot0.draw((Graphics2D) null, rectangle2D0, point2D0, plotState0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      CompassPlot compassPlot0 = new CompassPlot(valueDataset0);
      compassPlot0.setDrawBorder(true);
      // Undeclared exception!
      try { 
        compassPlot0.setLabelType((-1058));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MeterPlot.setLabelType(int): unrecognised type.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      CompassPlot compassPlot0 = new CompassPlot(valueDataset0);
      Image image0 = null;
      // Undeclared exception!
      try { 
        compassPlot0.setSeriesNeedle((-796));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised type.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      CompassPlot compassPlot0 = new CompassPlot(valueDataset0);
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      compassPlot0.setBackgroundPaint(color0);
      compassPlot0.getLegendItems();
      CompassPlot compassPlot1 = new CompassPlot();
      RectangleInsets rectangleInsets0 = compassPlot1.getInsets();
      compassPlot0.setInsets(rectangleInsets0, false);
      compassPlot0.setNotify(false);
      compassPlot0.getRevolutionDistance();
      compassPlot0.setSeriesNeedle(0);
      compassPlot0.setRoseHighlightPaint(compassPlot1.DEFAULT_OUTLINE_PAINT);
      // Undeclared exception!
      try { 
        compassPlot0.setSeriesNeedle(0, 255);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised type.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) null);
      assertNotNull(compassPlot0);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      int int0 = 0;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertNotNull(fastScatterPlot0);
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertFalse(fastScatterPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isSubplot());
      assertTrue(fastScatterPlot0.isNotify());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      NumberAxis numberAxis0 = (NumberAxis)fastScatterPlot0.getRangeAxis();
      assertNotNull(numberAxis0);
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertFalse(fastScatterPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isSubplot());
      assertTrue(fastScatterPlot0.isNotify());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals("Y", numberAxis0.getLabel());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertFalse(fastScatterPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isSubplot());
      assertTrue(fastScatterPlot0.isNotify());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals("Y", numberAxis0.getLabel());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.fetchElementHintingFlag());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("", compassPlot0);
      assertNotNull(jFreeChart0);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1, 500, 0, 710, 40, 10, true, true, false, true, true, true);
      assertNotNull(chartPanel0);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getVerticalAxisTrace());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(710, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getHorizontalAxisTrace());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(40, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0, chartPanel0.getMinimumDrawWidth());
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1536, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(2048, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      
      JFreeChart jFreeChart1 = chartPanel0.getChart();
      assertNotNull(jFreeChart1);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getVerticalAxisTrace());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(710, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getHorizontalAxisTrace());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(40, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0, chartPanel0.getMinimumDrawWidth());
      assertNull(jFreeChart1.getID());
      assertTrue(jFreeChart1.getAntiAlias());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertFalse(jFreeChart1.getElementHinting());
      assertSame(jFreeChart0, jFreeChart1);
      assertSame(jFreeChart1, jFreeChart0);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1536, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(2048, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage(10, 2048, 0.0, (double) 15, (ChartRenderingInfo) null);
      assertNotNull(bufferedImage0);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getVerticalAxisTrace());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(710, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getHorizontalAxisTrace());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(40, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0, chartPanel0.getMinimumDrawWidth());
      assertNull(jFreeChart1.getID());
      assertTrue(jFreeChart1.getAntiAlias());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertFalse(jFreeChart1.getElementHinting());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2048, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2048, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertSame(jFreeChart0, jFreeChart1);
      assertSame(jFreeChart1, jFreeChart0);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1536, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(2048, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNotNull(sunGraphics2D0);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getVerticalAxisTrace());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(710, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getHorizontalAxisTrace());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(40, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0, chartPanel0.getMinimumDrawWidth());
      assertNull(jFreeChart1.getID());
      assertTrue(jFreeChart1.getAntiAlias());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertFalse(jFreeChart1.getElementHinting());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2048, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2048, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertSame(jFreeChart0, jFreeChart1);
      assertSame(jFreeChart1, jFreeChart0);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1536, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(2048, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.transY);
      
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      assertNotNull(jTabbedPane0);
      assertTrue(jTabbedPane0.getFocusTraversalKeysEnabled());
      assertFalse(jTabbedPane0.isFocusCycleRoot());
      assertFalse(jTabbedPane0.isFocusTraversalPolicyProvider());
      assertFalse(jTabbedPane0.getIgnoreRepaint());
      assertFalse(jTabbedPane0.isFocusTraversalPolicySet());
      
      // Undeclared exception!
      try { 
        jTabbedPane0.getBoundsAt(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Tab count: 0
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      assertNotNull(compassPlot0);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      // Undeclared exception!
      try { 
        compassPlot0.setLabelType(659);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MeterPlot.setLabelType(int): unrecognised type.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) null);
      assertNotNull(compassPlot0);
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertTrue(compassPlot0.isOutlineVisible());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertNotNull(stackedAreaRenderer0);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getDefaultCreateEntities());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      
      Color color0 = (Color)stackedAreaRenderer0.getDefaultItemLabelPaint();
      assertNotNull(color0);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getDefaultCreateEntities());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      
      compassPlot0.setRosePaint(color0);
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertTrue(compassPlot0.isOutlineVisible());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getDefaultCreateEntities());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      
      Font font0 = compassPlot0.getLabelFont();
      assertNull(font0);
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertTrue(compassPlot0.isOutlineVisible());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      
      Color color1 = (Color)compassPlot0.getRoseHighlightPaint();
      assertNotNull(color1);
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertTrue(compassPlot0.isOutlineVisible());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getGreen());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertSame(color1, color0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      
      Font font1 = compassPlot0.getLabelFont();
      assertNull(font1);
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertTrue(compassPlot0.isOutlineVisible());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      
      boolean boolean0 = compassPlot0.getDrawBorder();
      assertFalse(boolean0);
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertTrue(compassPlot0.isOutlineVisible());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      assertNotNull(compassPlot0);
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      double double0 = compassPlot0.getRevolutionDistance();
      assertEquals(360.0, double0, 0.01);
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      assertNotNull(compassPlot0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertNull(compassPlot0.getNoDataMessage());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)compassPlot0.getRoseCenterPaint();
      assertNotNull(color0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertNull(compassPlot0.getNoDataMessage());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        compassPlot0.setSeriesNeedle(35, 35);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised type.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      assertNotNull(compassPlot0);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      String string0 = compassPlot0.getPlotType();
      assertEquals("Compass Plot", string0);
      assertNotNull(string0);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)compassPlot0.getOutlinePaint();
      assertNotNull(color0);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      compassPlot0.setRoseCenterPaint(color0);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      compassPlot0.setRoseHighlightPaint(color0);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(valueDataset0).getValue();
      compassPlot0.addDataset(valueDataset0);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      int int0 = compassPlot0.getLabelType();
      assertEquals(0, int0);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      doReturn(0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      compassPlot0.drawOutline(graphics2D1, rectangle2D1);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      compassPlot0.draw(graphics2D0, rectangle2D0, point2D0, plotState0, plotRenderingInfo0);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ValueDataset valueDataset1 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      MeterNeedle meterNeedle0 = mock(MeterNeedle.class, new ViolatedAssumptionAnswer());
      compassPlot0.addDataset(valueDataset1, meterNeedle0);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D2).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      compassPlot0.setBackgroundImageAlignment(0);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      compassPlot0.drawOutline(graphics2D2, rectangle2D2);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      compassPlot0.setDrawBorder(false);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      LegendItemCollection legendItemCollection0 = compassPlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      String string1 = compassPlot0.getPlotType();
      assertEquals("Compass Plot", string1);
      assertNotNull(string1);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color1 = (Color)compassPlot0.getRoseHighlightPaint();
      assertNotNull(color1);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(128, color1.getBlue());
      assertEquals(128, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals(128, color1.getGreen());
      assertEquals((-8355712), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertSame(color1, color0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = compassPlot0.getDrawBorder();
      assertFalse(boolean0);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      compassPlot0.setRevolutionDistance(0.0);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      MeterNeedle meterNeedle1 = mock(MeterNeedle.class, new ViolatedAssumptionAnswer());
      compassPlot0.addDataset((ValueDataset) null, meterNeedle1);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean1 = compassPlot0.getDrawBorder();
      assertFalse(boolean1);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.isSubplot());
      assertTrue(compassPlot0.isNotify());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      assertNotNull(compassPlot0);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      int int0 = 369;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(46, 369, (-1844));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -1844
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      assertNotNull(compassPlot0);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      int int0 = compassPlot0.getLabelType();
      assertEquals(0, int0);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      assertNotNull(stackedAreaRenderer0);
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getDefaultCreateEntities());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      BasicStroke basicStroke0 = (BasicStroke)stackedAreaRenderer0.getItemStroke(26, 26);
      assertNotNull(basicStroke0);
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getDefaultCreateEntities());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      
      compassPlot0.setSeriesOutlineStroke(0, basicStroke0);
      assertTrue(compassPlot0.isOutlineVisible());
      assertFalse(compassPlot0.getDrawBorder());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(compassPlot0.isNotify());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertFalse(compassPlot0.fetchElementHintingFlag());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getDefaultCreateEntities());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getDefaultItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(1557.0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      ValueDataset valueDataset0 = meterPlot0.getDataset();
      CompassPlot compassPlot0 = new CompassPlot(valueDataset0);
      Font font0 = compassPlot0.getCompassFont((-427));
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(8.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isPlain());
      assertFalse(compassPlot0.getDrawBorder());
  }
}
