/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:40:05 GMT 2023
 */

package org.jfree.chart.plot.dial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.font.FontRenderContext;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.plot.dial.DialLayerChangeEvent;
import org.jfree.chart.plot.dial.DialLayerChangeListener;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.plot.dial.DialTextAnnotation;
import org.jfree.chart.text.TextUtils;
import org.jfree.chart.ui.TextAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DialTextAnnotation_ESTest extends DialTextAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("TextAnchor.HALF_ASCENT_CENTER");
      DialLayerChangeListener dialLayerChangeListener0 = mock(DialLayerChangeListener.class, new ViolatedAssumptionAnswer());
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      DialLayerChangeListener dialLayerChangeListener1 = mock(DialLayerChangeListener.class, new ViolatedAssumptionAnswer());
      dialTextAnnotation1.addChangeListener(dialLayerChangeListener1);
      dialTextAnnotation0.removeChangeListener(dialLayerChangeListener0);
      Font font0 = dialTextAnnotation0.getFont();
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.setFont(font0);
      Color color0 = (Color)dialTextAnnotation0.getPaint();
      dialTextAnnotation0.setPaint(color0);
      dialTextAnnotation0.setPaint(color0);
      dialTextAnnotation0.setAngle(0.0);
      dialTextAnnotation0.setPaint(color0);
      dialTextAnnotation0.setLabel("TextAnchor.HALF_ASCENT_CENTER");
      dialTextAnnotation0.setAngle(0.0);
      dialTextAnnotation0.setAnchor(textAnchor0);
      dialTextAnnotation0.equals(dialTextAnnotation0);
      dialTextAnnotation0.setRadius(0.0);
      dialTextAnnotation0.setLabel("TextAnchor.HALF_ASCENT_CENTER");
      dialTextAnnotation0.setFont(font0);
      dialTextAnnotation0.getPaint();
      DialTextAnnotation dialTextAnnotation2 = new DialTextAnnotation("Requires index >= 0.");
      dialTextAnnotation0.equals(dialTextAnnotation2);
      dialTextAnnotation0.getAnchor();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation(";#}!XeQ");
      Font font0 = dialTextAnnotation0.getFont();
      dialTextAnnotation0.setRadius(0.0);
      dialTextAnnotation0.setFont(font0);
      dialTextAnnotation0.setRadius(0.0);
      dialTextAnnotation0.clone();
      dialTextAnnotation0.clone();
      dialTextAnnotation0.setLabel("paint");
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.setAnchor(textAnchor0);
      dialTextAnnotation0.isClippedToWindow();
      dialTextAnnotation0.getRadius();
      dialTextAnnotation0.getRadius();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("Wj\")DqE$]Z");
      // Undeclared exception!
      try { 
        dialTextAnnotation0.setLabel((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("2(vRd2ZC");
      DialLayerChangeListener dialLayerChangeListener0 = mock(DialLayerChangeListener.class, new ViolatedAssumptionAnswer());
      dialTextAnnotation0.addChangeListener(dialLayerChangeListener0);
      TextUtils.setUseFontMetricsGetStringBounds(true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dialTextAnnotation0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      Font font0 = dialTextAnnotation0.getFont();
      dialTextAnnotation0.setLabel("");
      TextUtils.setUseFontMetricsGetStringBounds(false);
      dialTextAnnotation0.setFont(font0);
      dialTextAnnotation0.getAngle();
      dialTextAnnotation0.equals("");
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.setAnchor(textAnchor0);
      Paint paint0 = dialTextAnnotation0.getPaint();
      dialTextAnnotation0.setPaint(paint0);
      dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.getPaint();
      dialTextAnnotation0.getPaint();
      dialTextAnnotation0.setAngle(842.604);
      dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.getLabel();
      dialTextAnnotation0.isClippedToWindow();
      dialTextAnnotation0.getRadius();
      dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.hashCode();
      DialTextAnnotation dialTextAnnotation1 = new DialTextAnnotation("");
      dialTextAnnotation1.equals(dialTextAnnotation0);
      dialTextAnnotation0.equals(dialTextAnnotation1);
      dialTextAnnotation1.setAngle(842.604);
      dialTextAnnotation1.getAnchor();
      dialTextAnnotation0.setLabel("");
      dialTextAnnotation0.setRadius(842.604);
      Font font1 = dialTextAnnotation1.getFont();
      dialTextAnnotation1.setFont(font1);
      dialTextAnnotation0.getAnchor();
      dialTextAnnotation1.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("-Ix");
      Object object0 = dialTextAnnotation0.clone();
      dialTextAnnotation0.equals(object0);
      Font font0 = null;
      dialTextAnnotation0.equals("-Ix");
      // Undeclared exception!
      try { 
        dialTextAnnotation0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      Object object0 = dialTextAnnotation0.clone();
      dialTextAnnotation0.setAngle(1.0);
      TextUtils.setUseFontMetricsGetStringBounds(false);
      TextUtils.setDrawStringsWithFontAttributes(false);
      dialTextAnnotation0.equals(object0);
      dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.getPaint();
      dialTextAnnotation0.getPaint();
      dialTextAnnotation0.getFont();
      dialTextAnnotation0.setAngle((-90.0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("kkxKX-=]");
      DialLayerChangeEvent dialLayerChangeEvent0 = mock(DialLayerChangeEvent.class, new ViolatedAssumptionAnswer());
      dialTextAnnotation0.notifyListeners(dialLayerChangeEvent0);
      Font font0 = dialTextAnnotation0.getFont();
      dialTextAnnotation0.setFont(font0);
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.setAnchor(textAnchor0);
      dialTextAnnotation0.setAngle(3672.2);
      dialTextAnnotation0.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Font) null).when(graphics2D0).getFont();
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      doReturn((FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getCenterX();
      doReturn(0.0).when(rectangle2D0).getCenterY();
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dialTextAnnotation0.draw(graphics2D0, dialPlot0, rectangle2D0, rectangle2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation(",6~>E(:");
      dialTextAnnotation0.setRadius(0.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertNotNull(dialTextAnnotation0);
      
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertNotNull(textAnchor0);
      
      Object object0 = dialTextAnnotation0.clone();
      dialTextAnnotation0.equals(object0);
      dialTextAnnotation0.setLabel("");
      dialTextAnnotation0.getAngle();
      dialTextAnnotation0.getLabel();
      dialTextAnnotation0.setLabel("+P+e81kL<s,Qaw");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("font");
      dialTextAnnotation0.getLabel();
      TextUtils.setDrawStringsWithFontAttributes(false);
      dialTextAnnotation0.setAngle(0.0);
      dialTextAnnotation0.setRadius(8.0);
      dialTextAnnotation0.getAngle();
      Paint paint0 = dialTextAnnotation0.getPaint();
      dialTextAnnotation0.setPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      dialTextAnnotation0.getAnchor();
      // Undeclared exception!
      try { 
        dialTextAnnotation0.setAnchor((TextAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      dialTextAnnotation0.setRadius(2252.81446289);
      Paint paint0 = dialTextAnnotation0.getPaint();
      dialTextAnnotation0.setPaint(paint0);
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.setAnchor(textAnchor0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("i-gj\"E[Fo#'+hZQ?A6:");
      DialTextAnnotation dialTextAnnotation1 = new DialTextAnnotation("i-gj\"E[Fo#'+hZQ?A6:");
      Font font0 = dialTextAnnotation1.getFont();
      dialTextAnnotation0.setFont(font0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        dialTextAnnotation1.draw(graphics2D0, dialPlot0, (Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rect' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("oS;Sr/PN;/6R+AM=q");
      dialTextAnnotation0.setAngle(1.0);
      dialTextAnnotation0.hashCode();
      dialTextAnnotation0.setRadius(1.0);
      Font font0 = dialTextAnnotation0.getFont();
      dialTextAnnotation0.setRadius(1.0);
      dialTextAnnotation0.getLabel();
      dialTextAnnotation0.clone();
      dialTextAnnotation0.getLabel();
      dialTextAnnotation0.getLabel();
      dialTextAnnotation0.getAngle();
      dialTextAnnotation0.getRadius();
      dialTextAnnotation0.setFont(font0);
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.setAnchor(textAnchor0);
      dialTextAnnotation0.isClippedToWindow();
      dialTextAnnotation0.getLabel();
      dialTextAnnotation0.setFont(font0);
      // Undeclared exception!
      try { 
        dialTextAnnotation0.setRadius((-4408.57776962));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'radius' cannot be negative.
         //
         verifyException("org.jfree.chart.plot.dial.DialTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertNotNull(dialTextAnnotation0);
      
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      assertNotNull(textAnchor0);
      
      dialTextAnnotation0.setAnchor(textAnchor0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      
      boolean boolean0 = dialTextAnnotation0.isClippedToWindow();
      assertTrue(boolean0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      
      dialTextAnnotation0.setAnchor(textAnchor0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      
      double double0 = dialTextAnnotation0.getAngle();
      assertEquals((-90.0), double0, 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      
      boolean boolean1 = dialTextAnnotation0.isClippedToWindow();
      assertTrue(boolean1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(boolean1 == boolean0);
      
      double double1 = dialTextAnnotation0.getRadius();
      assertEquals(0.3, double1, 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertNotEquals(double1, double0, 0.01);
      
      Color color0 = (Color)dialTextAnnotation0.getPaint();
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      
      boolean boolean2 = dialTextAnnotation0.equals(dialTextAnnotation1);
      assertTrue(boolean2);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      dialTextAnnotation0.setAngle((-90.0));
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      
      dialTextAnnotation0.setAngle(0.3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      
      dialTextAnnotation0.hashCode();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      
      Font font0 = dialTextAnnotation0.getFont();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(1, font0.getStyle());
      assertTrue(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertEquals(14, font0.getSize());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isPlain());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertNotNull(dialTextAnnotation0);
      
      Color color0 = (Color)dialTextAnnotation0.getPaint();
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      dialTextAnnotation0.setPaint(color0);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      
      dialTextAnnotation0.setAngle(0.0);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      
      dialTextAnnotation0.setLabel("");
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      
      TextUtils.setUseFontMetricsGetStringBounds(true);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = dialTextAnnotation0.hasListener(eventListener0);
      assertFalse(boolean0);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Font) null).when(graphics2D0).getFont();
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      doReturn((FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getCenterX();
      doReturn(0.0).when(rectangle2D0).getCenterY();
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      dialTextAnnotation0.setRadius(1.0F);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(1.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      
      // Undeclared exception!
      try { 
        dialTextAnnotation0.draw(graphics2D0, dialPlot0, rectangle2D0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = null;
      DialTextAnnotation dialTextAnnotation0 = null;
      try {
        dialTextAnnotation0 = new DialTextAnnotation((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("J");
      assertEquals("J", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertNotNull(dialTextAnnotation0);
      
      TextUtils.setDrawStringsWithFontAttributes(false);
      dialTextAnnotation0.hashCode();
      assertEquals("J", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      
      boolean boolean0 = dialTextAnnotation0.equals("J");
      assertFalse(boolean0);
      assertEquals("J", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("yhc");
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("yhc", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertNotNull(dialTextAnnotation0);
      
      String string0 = dialTextAnnotation0.getLabel();
      assertEquals("yhc", string0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("yhc", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertNotNull(dialTextAnnotation0);
      
      // Undeclared exception!
      try { 
        dialTextAnnotation0.setRadius((-856.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'radius' cannot be negative.
         //
         verifyException("org.jfree.chart.plot.dial.DialTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("org.jfree.chart.plot.dial.DialPlot");
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals("org.jfree.chart.plot.dial.DialPlot", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertNotNull(dialTextAnnotation0);
      
      // Undeclared exception!
      try { 
        dialTextAnnotation0.setRadius((-856.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'radius' cannot be negative.
         //
         verifyException("org.jfree.chart.plot.dial.DialTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("TextAnchor.HALF_ASCENT_CENTER");
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertNotNull(dialTextAnnotation0);
      
      DialLayerChangeListener dialLayerChangeListener0 = mock(DialLayerChangeListener.class, new ViolatedAssumptionAnswer());
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      
      dialTextAnnotation0.removeChangeListener(dialLayerChangeListener0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      
      Font font0 = dialTextAnnotation0.getFont();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(1, font0.getStyle());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isBold());
      assertEquals(14, font0.getSize());
      assertFalse(font0.isItalic());
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font0);
      
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isTop());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(textAnchor0);
      
      dialTextAnnotation0.setFont(font0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(1, font0.getStyle());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isBold());
      assertEquals(14, font0.getSize());
      assertFalse(font0.isItalic());
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      
      DialTextAnnotation dialTextAnnotation2 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation2.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation2.getRadius(), 0.01);
      assertTrue(dialTextAnnotation2.isClippedToWindow());
      assertTrue(dialTextAnnotation2.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation2.getLabel());
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation2.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation2.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation2);
      
      DialTextAnnotation dialTextAnnotation3 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation3, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation3, dialTextAnnotation0);
      assertNotSame(dialTextAnnotation3, dialTextAnnotation2);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals(0.3, dialTextAnnotation3.getRadius(), 0.01);
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation3.getLabel());
      assertTrue(dialTextAnnotation3.isClippedToWindow());
      assertTrue(dialTextAnnotation3.isVisible());
      assertEquals((-90.0), dialTextAnnotation3.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertTrue(dialTextAnnotation3.equals((Object)dialTextAnnotation0));
      assertTrue(dialTextAnnotation3.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation3.equals((Object)dialTextAnnotation2));
      assertNotNull(dialTextAnnotation3);
      
      Color color0 = (Color)dialTextAnnotation0.getPaint();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      assertNotNull(color0);
      
      dialTextAnnotation0.setPaint(color0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      
      dialTextAnnotation0.setPaint(color0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      
      dialTextAnnotation0.setAngle(0.0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      
      TextUtils.setUseFontMetricsGetStringBounds(false);
      dialTextAnnotation0.setPaint(color0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      
      dialTextAnnotation0.setLabel("TextAnchor.HALF_ASCENT_CENTER");
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      
      dialTextAnnotation0.setAngle(0.0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      
      dialTextAnnotation0.setAnchor(textAnchor0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isTop());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      
      boolean boolean0 = dialTextAnnotation0.equals(dialTextAnnotation2);
      assertFalse(boolean0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation2.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation2.getRadius(), 0.01);
      assertTrue(dialTextAnnotation2.isClippedToWindow());
      assertTrue(dialTextAnnotation2.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation2.getLabel());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertTrue(dialTextAnnotation2.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation2.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation0));
      
      dialTextAnnotation0.setRadius(0.0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      
      dialTextAnnotation0.setLabel("TextAnchor.HALF_ASCENT_CENTER");
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      
      dialTextAnnotation0.setFont(font0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(1, font0.getStyle());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isBold());
      assertEquals(14, font0.getSize());
      assertFalse(font0.isItalic());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      
      Color color1 = (Color)dialTextAnnotation0.getPaint();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertSame(color1, color0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals(0, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getBlue());
      assertEquals(1, color1.getTransparency());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertNotNull(color1);
      
      DialTextAnnotation dialTextAnnotation4 = new DialTextAnnotation("Requires index >= 0.");
      assertTrue(dialTextAnnotation4.isVisible());
      assertTrue(dialTextAnnotation4.isClippedToWindow());
      assertEquals("Requires index >= 0.", dialTextAnnotation4.getLabel());
      assertEquals((-90.0), dialTextAnnotation4.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation4.getRadius(), 0.01);
      assertFalse(dialTextAnnotation4.equals((Object)dialTextAnnotation0));
      assertFalse(dialTextAnnotation4.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation4.equals((Object)dialTextAnnotation2));
      assertFalse(dialTextAnnotation4.equals((Object)dialTextAnnotation1));
      assertNotNull(dialTextAnnotation4);
      
      boolean boolean1 = dialTextAnnotation0.equals(dialTextAnnotation4);
      assertFalse(boolean1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation4);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation4, dialTextAnnotation0);
      assertNotSame(dialTextAnnotation4, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation4, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation4, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", dialTextAnnotation0.getLabel());
      assertEquals(0.0, dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation4.isVisible());
      assertTrue(dialTextAnnotation4.isClippedToWindow());
      assertEquals("Requires index >= 0.", dialTextAnnotation4.getLabel());
      assertEquals((-90.0), dialTextAnnotation4.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation4.getRadius(), 0.01);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation4));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertFalse(dialTextAnnotation4.equals((Object)dialTextAnnotation0));
      assertFalse(dialTextAnnotation4.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation4.equals((Object)dialTextAnnotation2));
      assertFalse(dialTextAnnotation4.equals((Object)dialTextAnnotation1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation(",'R&fs~v!(u8&MhRU");
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(",'R&fs~v!(u8&MhRU", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertNotNull(dialTextAnnotation0);
      
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(",'R&fs~v!(u8&MhRU", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      assertNotNull(textAnchor0);
      
      DialTextAnnotation dialTextAnnotation1 = new DialTextAnnotation("");
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertFalse(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      
      boolean boolean0 = dialTextAnnotation0.equals(dialTextAnnotation1);
      assertFalse(boolean0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(",'R&fs~v!(u8&MhRU", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      
      Font font0 = dialTextAnnotation1.getFont();
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isTransformed());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertTrue(font0.isBold());
      assertEquals(14, font0.getSize());
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertFalse(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(font0);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(font0).when(graphics2D0).getFont();
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      doReturn(fontRenderContext0).when(graphics2D0).getFontRenderContext();
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((double)10).when(rectangle2D0).getCenterX();
      doReturn((double)10).when(rectangle2D0).getCenterY();
      doReturn(1003.36).when(rectangle2D0).getHeight();
      doReturn(1003.36).when(rectangle2D0).getWidth();
      dialTextAnnotation0.draw(graphics2D0, dialPlot0, rectangle2D0, rectangle2D0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(",'R&fs~v!(u8&MhRU", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation1.getLabel());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isTransformed());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertTrue(font0.isBold());
      assertEquals(14, font0.getSize());
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      
      dialTextAnnotation0.setAnchor(textAnchor0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(",'R&fs~v!(u8&MhRU", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      
      double double0 = dialTextAnnotation0.getAngle();
      assertEquals((-90.0), double0, 0.01);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(",'R&fs~v!(u8&MhRU", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      
      dialTextAnnotation0.setPaint(dialPlot0.DEFAULT_OUTLINE_PAINT);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(",'R&fs~v!(u8&MhRU", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      
      TextAnchor textAnchor1 = dialTextAnnotation0.getAnchor();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(textAnchor1, textAnchor0);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(",'R&fs~v!(u8&MhRU", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isBottom());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isTop());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(textAnchor1);
      
      dialTextAnnotation0.setAngle(Double.NaN);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(",'R&fs~v!(u8&MhRU", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals(Double.NaN, dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      
      Font font1 = dialTextAnnotation0.getFont();
      assertNotSame(font1, font0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals("Dialog", font1.getName());
      assertEquals(14, font1.getSize());
      assertFalse(font1.hasUniformLineMetrics());
      assertEquals(14.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.isTransformed());
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.isPlain());
      assertTrue(font1.isBold());
      assertFalse(font1.isItalic());
      assertEquals(1, font1.getStyle());
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(",'R&fs~v!(u8&MhRU", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals(Double.NaN, dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(font1.equals((Object)font0));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(font1);
      
      TextAnchor textAnchor2 = dialTextAnnotation0.getAnchor();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(textAnchor2, textAnchor0);
      assertSame(textAnchor2, textAnchor1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(",'R&fs~v!(u8&MhRU", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals(Double.NaN, dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(textAnchor2.isRight());
      assertFalse(textAnchor2.isHalfAscent());
      assertFalse(textAnchor2.isVerticalCenter());
      assertTrue(textAnchor2.isTop());
      assertFalse(textAnchor2.isBottom());
      assertFalse(textAnchor2.isLeft());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor2.toString());
      assertFalse(textAnchor2.isBaseline());
      assertTrue(textAnchor2.isHorizontalCenter());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(textAnchor2);
      
      Font font2 = dialTextAnnotation0.getFont();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(font2, font0);
      assertSame(font2, font1);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(",'R&fs~v!(u8&MhRU", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals(Double.NaN, dialTextAnnotation0.getAngle(), 0.01);
      assertFalse(font2.isTransformed());
      assertFalse(font2.isPlain());
      assertFalse(font2.hasLayoutAttributes());
      assertEquals(1, font2.getStyle());
      assertEquals(14.0F, font2.getSize2D(), 0.01F);
      assertEquals("Dialog", font2.getName());
      assertEquals(14, font2.getSize());
      assertFalse(font2.hasUniformLineMetrics());
      assertFalse(font2.isItalic());
      assertTrue(font2.isBold());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(font2.equals((Object)font0));
      assertNotNull(font2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DialLayerChangeEvent dialLayerChangeEvent0 = mock(DialLayerChangeEvent.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      DialPlot dialPlot1 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      DialLayerChangeEvent dialLayerChangeEvent1 = mock(DialLayerChangeEvent.class, new ViolatedAssumptionAnswer());
      DialLayerChangeListener dialLayerChangeListener0 = mock(DialLayerChangeListener.class, new ViolatedAssumptionAnswer());
      DialLayerChangeEvent dialLayerChangeEvent2 = mock(DialLayerChangeEvent.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("");
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertNotNull(dialTextAnnotation0);
      
      Color color0 = (Color)dialTextAnnotation0.getPaint();
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      Font font0 = dialTextAnnotation0.getFont();
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(font0.isItalic());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(14, font0.getSize());
      assertNotNull(font0);
      
      dialTextAnnotation0.setFont(font0);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(font0.isItalic());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(14, font0.getSize());
      
      dialTextAnnotation0.setLabel("");
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      Color color1 = (Color)dialTextAnnotation0.getPaint();
      assertSame(color1, color0);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getBlue());
      assertNotNull(color1);
      
      Font font1 = dialTextAnnotation0.getFont();
      assertSame(font1, font0);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(font1.isBold());
      assertEquals(14.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.hasUniformLineMetrics());
      assertEquals("Dialog", font1.getName());
      assertFalse(font1.isPlain());
      assertFalse(font1.isTransformed());
      assertFalse(font1.isItalic());
      assertEquals(1, font1.getStyle());
      assertEquals(14, font1.getSize());
      assertNotNull(font1);
      
      boolean boolean0 = dialTextAnnotation0.equals(color1);
      assertFalse(boolean0);
      assertSame(color1, color0);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getBlue());
      
      boolean boolean1 = dialTextAnnotation0.isClippedToWindow();
      assertTrue(boolean1);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(boolean1 == boolean0);
      
      dialTextAnnotation0.setPaint(color1);
      assertSame(color1, color0);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getBlue());
      
      dialTextAnnotation0.setFont(font1);
      assertSame(font1, font0);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(font1.isBold());
      assertEquals(14.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.hasUniformLineMetrics());
      assertEquals("Dialog", font1.getName());
      assertFalse(font1.isPlain());
      assertFalse(font1.isTransformed());
      assertFalse(font1.isItalic());
      assertEquals(1, font1.getStyle());
      assertEquals(14, font1.getSize());
      
      dialTextAnnotation0.setRadius(1765.323348);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(1765.323348, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(1765.323348, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertNotNull(textAnchor0);
      
      dialTextAnnotation0.setAnchor(textAnchor0);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(1765.323348, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isHorizontalCenter());
      
      DialTextAnnotation dialTextAnnotation1 = (DialTextAnnotation)dialTextAnnotation0.clone();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(1765.323348, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(1765.323348, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals("", dialTextAnnotation1.getLabel());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation1);
      
      boolean boolean2 = dialTextAnnotation0.equals(dialTextAnnotation1);
      assertTrue(boolean2);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation1, dialTextAnnotation0);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(1765.323348, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals(1765.323348, dialTextAnnotation1.getRadius(), 0.01);
      assertTrue(dialTextAnnotation1.isVisible());
      assertTrue(dialTextAnnotation1.isClippedToWindow());
      assertEquals("", dialTextAnnotation1.getLabel());
      assertEquals((-90.0), dialTextAnnotation1.getAngle(), 0.01);
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation1.equals((Object)dialTextAnnotation0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = dialTextAnnotation0.equals(font0);
      assertFalse(boolean3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertSame(font0, font1);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(1765.323348, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(font0.isItalic());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(14, font0.getSize());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      
      dialTextAnnotation0.setLabel("");
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(1765.323348, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      
      double double0 = dialTextAnnotation0.getAngle();
      assertEquals((-90.0), double0, 0.01);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(1765.323348, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      
      DialTextAnnotation dialTextAnnotation2 = new DialTextAnnotation("");
      assertEquals((-90.0), dialTextAnnotation2.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation2.getRadius(), 0.01);
      assertTrue(dialTextAnnotation2.isVisible());
      assertEquals("", dialTextAnnotation2.getLabel());
      assertTrue(dialTextAnnotation2.isClippedToWindow());
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation2);
      
      boolean boolean4 = dialTextAnnotation0.equals(dialTextAnnotation2);
      assertFalse(boolean4);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation0);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(1765.323348, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation2.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation2.getRadius(), 0.01);
      assertTrue(dialTextAnnotation2.isVisible());
      assertEquals("", dialTextAnnotation2.getLabel());
      assertTrue(dialTextAnnotation2.isClippedToWindow());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation0));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      DialTextAnnotation dialTextAnnotation3 = (DialTextAnnotation)dialTextAnnotation2.clone();
      assertNotSame(dialTextAnnotation2, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation0);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation3, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation3, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation3, dialTextAnnotation0);
      assertEquals((-90.0), dialTextAnnotation2.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation2.getRadius(), 0.01);
      assertTrue(dialTextAnnotation2.isVisible());
      assertEquals("", dialTextAnnotation2.getLabel());
      assertTrue(dialTextAnnotation2.isClippedToWindow());
      assertTrue(dialTextAnnotation3.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation3.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation3.getLabel());
      assertTrue(dialTextAnnotation3.isVisible());
      assertEquals(0.3, dialTextAnnotation3.getRadius(), 0.01);
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation1));
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation0));
      assertFalse(dialTextAnnotation3.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation3.equals((Object)dialTextAnnotation2));
      assertFalse(dialTextAnnotation3.equals((Object)dialTextAnnotation0));
      assertNotNull(dialTextAnnotation3);
      
      boolean boolean5 = dialTextAnnotation2.equals(dialTextAnnotation3);
      assertTrue(boolean5);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation0);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation3, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation3, dialTextAnnotation2);
      assertNotSame(dialTextAnnotation3, dialTextAnnotation0);
      assertEquals((-90.0), dialTextAnnotation2.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation2.getRadius(), 0.01);
      assertTrue(dialTextAnnotation2.isVisible());
      assertEquals("", dialTextAnnotation2.getLabel());
      assertTrue(dialTextAnnotation2.isClippedToWindow());
      assertTrue(dialTextAnnotation3.isClippedToWindow());
      assertEquals((-90.0), dialTextAnnotation3.getAngle(), 0.01);
      assertEquals("", dialTextAnnotation3.getLabel());
      assertTrue(dialTextAnnotation3.isVisible());
      assertEquals(0.3, dialTextAnnotation3.getRadius(), 0.01);
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation2.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation0));
      assertFalse(dialTextAnnotation3.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation3.equals((Object)dialTextAnnotation2));
      assertFalse(dialTextAnnotation3.equals((Object)dialTextAnnotation0));
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      
      dialTextAnnotation0.setAnchor(textAnchor0);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(1765.323348, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      
      TextAnchor textAnchor1 = dialTextAnnotation0.getAnchor();
      assertNotSame(dialTextAnnotation0, dialTextAnnotation3);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation0, dialTextAnnotation2);
      assertSame(textAnchor1, textAnchor0);
      assertEquals("", dialTextAnnotation0.getLabel());
      assertTrue(dialTextAnnotation0.isVisible());
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
      assertEquals(1765.323348, dialTextAnnotation0.getRadius(), 0.01);
      assertTrue(dialTextAnnotation0.isClippedToWindow());
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isTop());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation0.equals((Object)dialTextAnnotation2));
      assertTrue(dialTextAnnotation0.equals((Object)dialTextAnnotation1));
      assertNotNull(textAnchor1);
      
      double double1 = dialTextAnnotation2.getRadius();
      assertEquals(0.3, double1, 0.01);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation1);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation0);
      assertNotSame(dialTextAnnotation2, dialTextAnnotation3);
      assertEquals((-90.0), dialTextAnnotation2.getAngle(), 0.01);
      assertEquals(0.3, dialTextAnnotation2.getRadius(), 0.01);
      assertTrue(dialTextAnnotation2.isVisible());
      assertEquals("", dialTextAnnotation2.getLabel());
      assertTrue(dialTextAnnotation2.isClippedToWindow());
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation1));
      assertTrue(dialTextAnnotation2.equals((Object)dialTextAnnotation3));
      assertFalse(dialTextAnnotation2.equals((Object)dialTextAnnotation0));
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("Dk964b)6Qt(N9YCjVO");
      dialTextAnnotation0.setAngle((-4.0));
      dialTextAnnotation0.equals(dialTextAnnotation0);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      dialTextAnnotation0.hasListener(eventListener0);
      dialTextAnnotation0.hashCode();
      TextUtils.setUseFontMetricsGetStringBounds(false);
      Paint paint0 = dialTextAnnotation0.getPaint();
      dialTextAnnotation0.setPaint(paint0);
      dialTextAnnotation0.getLabel();
      dialTextAnnotation0.getPaint();
      assertEquals((-4.0), dialTextAnnotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("^Xx=j`qdfcXuq");
      DialLayerChangeListener dialLayerChangeListener0 = mock(DialLayerChangeListener.class, new ViolatedAssumptionAnswer());
      dialTextAnnotation0.addChangeListener(dialLayerChangeListener0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      dialTextAnnotation0.setLabel("^Xx=j`qdfcXuq");
      TextAnchor textAnchor0 = dialTextAnnotation0.getAnchor();
      dialTextAnnotation0.setAnchor(textAnchor0);
      dialTextAnnotation0.setAnchor(textAnchor0);
      assertEquals(0.3, dialTextAnnotation0.getRadius(), 0.01);
      assertEquals((-90.0), dialTextAnnotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DialTextAnnotation dialTextAnnotation0 = new DialTextAnnotation("D@Q2vwM2Lgck<oO+h");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Font) null).when(graphics2D0).getFont();
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      doReturn((FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getCenterX();
      doReturn(0.0).when(rectangle2D0).getCenterY();
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      // Undeclared exception!
      try { 
        dialTextAnnotation0.draw(graphics2D0, dialPlot0, rectangle2D0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }
}
