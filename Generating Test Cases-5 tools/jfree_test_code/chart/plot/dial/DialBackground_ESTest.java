/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:14:27 GMT 2023
 */

package org.jfree.chart.plot.dial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.plot.dial.DialBackground;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DialBackground_ESTest extends DialBackground_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      dialBackground0.draw(graphics2D0, dialPlot0, rectangle2D0, rectangle2D1);
      assertTrue(dialBackground0.isClippedToWindow());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      DialBackground dialBackground0 = new DialBackground(paint0);
      // Undeclared exception!
      try { 
        dialBackground0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      DialBackground dialBackground0 = new DialBackground(paint0);
      // Undeclared exception!
      try { 
        dialBackground0.setGradientPaintTransformer((GradientPaintTransformer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 't' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      DialBackground dialBackground0 = new DialBackground(paint0);
      DialPlot dialPlot0 = mock(DialPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dialBackground0.draw((Graphics2D) null, dialPlot0, rectangle2D0, rectangle2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.dial.DialBackground", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DialBackground dialBackground0 = null;
      try {
        dialBackground0 = new DialBackground((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      DialBackground dialBackground1 = new DialBackground(paint0);
      boolean boolean0 = dialBackground0.equals(dialBackground1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      boolean boolean0 = dialBackground0.equals(dialBackground0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      boolean boolean0 = dialBackground0.equals("J~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      dialBackground0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      Object object0 = dialBackground0.clone();
      boolean boolean0 = dialBackground0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      boolean boolean0 = dialBackground0.isClippedToWindow();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      GradientPaintTransformer gradientPaintTransformer0 = dialBackground0.getGradientPaintTransformer();
      dialBackground0.setGradientPaintTransformer(gradientPaintTransformer0);
      assertTrue(dialBackground0.isClippedToWindow());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      Paint paint0 = dialBackground0.getPaint();
      dialBackground0.setPaint(paint0);
      assertEquals(1, paint0.getTransparency());
  }
}
