/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:51:54 GMT 2023
 */

package org.jfree.chart.plot.dial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.event.PlotChangeListener;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.dial.DialCap;
import org.jfree.chart.plot.dial.DialFrame;
import org.jfree.chart.plot.dial.DialLayerChangeEvent;
import org.jfree.chart.plot.dial.DialLayerChangeListener;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.ValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DialCap_ESTest extends DialCap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialPlot dialPlot0 = new DialPlot();
      dialCap0.removeChangeListener(dialPlot0);
      Paint paint0 = dialPlot0.getBackgroundPaint();
      dialCap0.setOutlinePaint(paint0);
      DialCap dialCap1 = new DialCap();
      dialCap1.removeChangeListener(dialPlot0);
      dialCap0.equals(dialCap1);
      dialCap1.setOutlineStroke(dialPlot0.DEFAULT_OUTLINE_STROKE);
      dialCap0.setOutlinePaint(dialPlot0.DEFAULT_OUTLINE_PAINT);
      dialCap1.setRadius(3238.24726757871);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(3238.24726757871).when(rectangle2D0).getCenterX();
      doReturn((double)10).when(rectangle2D0).getCenterY();
      doReturn(3238.24726757871).when(rectangle2D0).getHeight();
      doReturn((double)10).when(rectangle2D0).getWidth();
      Rectangle2D rectangle2D1 = DialPlot.rectangleByRadius(rectangle2D0, 0.0, 10);
      dialCap0.draw(graphics2D0, dialPlot0, rectangle2D1, rectangle2D1);
      Object object0 = dialCap1.clone();
      dialCap0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      dialCap0.setVisible(true);
      Object object0 = dialCap0.clone();
      dialCap0.equals(object0);
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      DialPlot dialPlot0 = new DialPlot(valueDataset0);
      dialCap0.removeChangeListener(dialPlot0);
      dialCap0.setOutlinePaint(color0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      ValueDataset valueDataset1 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      DialPlot dialPlot1 = new DialPlot(valueDataset1);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      dialCap0.equals(dialCap0);
      Object object1 = dialCap0.clone();
      dialCap0.equals(object1);
      dialCap0.equals((Object) null);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialPlot dialPlot0 = new DialPlot();
      DialLayerChangeEvent dialLayerChangeEvent0 = mock(DialLayerChangeEvent.class, new ViolatedAssumptionAnswer());
      dialCap0.notifyListeners(dialLayerChangeEvent0);
      Stroke stroke0 = dialPlot0.getOutlineStroke();
      dialCap0.setOutlineStroke(stroke0);
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      dialPlot0.datasetChanged(datasetChangeEvent0);
      dialCap0.getRadius();
      Stroke stroke1 = dialCap0.getOutlineStroke();
      dialPlot0.getDatasetCount();
      DialCap dialCap1 = new DialCap();
      dialCap1.hashCode();
      dialCap1.removeChangeListener((DialLayerChangeListener) null);
      dialCap0.equals(dialCap1);
      dialCap1.setVisible(false);
      dialCap1.getRadius();
      dialCap1.equals(dialPlot0);
      dialCap0.setOutlineStroke(stroke0);
      dialCap1.hashCode();
      dialCap1.setFillPaint(dialPlot0.DEFAULT_BACKGROUND_PAINT);
      dialCap1.getOutlinePaint();
      dialCap1.clone();
      dialCap1.setRadius(0.05);
      dialCap1.isClippedToWindow();
      dialPlot0.getDataset();
      dialCap1.setOutlineStroke(stroke1);
      dialCap1.setOutlinePaint(dialPlot0.DEFAULT_OUTLINE_PAINT);
      dialCap0.setOutlineStroke(stroke0);
      dialCap1.clone();
      dialCap0.setOutlineStroke(stroke0);
      Object object0 = dialCap0.clone();
      dialCap0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialLayerChangeEvent dialLayerChangeEvent0 = mock(DialLayerChangeEvent.class, new ViolatedAssumptionAnswer());
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dialCap0.setOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      DialPlot dialPlot0 = new DialPlot(valueDataset0);
      dialCap0.hasListener(dialPlot0);
      dialPlot0.setNotify(false);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = null;
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      dialPlot0.setBackgroundPaint(color0);
      dialPlot0.drawOutline(graphics2D0, (Rectangle2D) null);
      dialCap0.getFillPaint();
      dialCap0.setOutlinePaint(dialPlot0.DEFAULT_BACKGROUND_PAINT);
      dialCap0.setOutlinePaint(dialPlot0.DEFAULT_BACKGROUND_PAINT);
      dialCap0.getFillPaint();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dialCap0.draw(graphics2D1, dialPlot0, (Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rect' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialPlot dialPlot0 = new DialPlot();
      dialCap0.hasListener(dialPlot0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      DialPlot dialPlot1 = new DialPlot();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getCenterX();
      doReturn(0.0).when(rectangle2D0).getCenterY();
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      Rectangle2D rectangle2D1 = DialPlot.rectangleByRadius(rectangle2D0, 10, 10);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = DialPlot.rectangleByRadius(rectangle2D1, (-1622.0), (-1.0));
      dialCap0.draw(graphics2D1, dialPlot1, rectangle2D2, rectangle2D1);
      dialCap0.draw(graphics2D0, dialPlot1, rectangle2D1, rectangle2D1);
      Paint paint0 = dialCap0.getOutlinePaint();
      dialCap0.getOutlinePaint();
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      dialCap0.setFillPaint(color0);
      dialCap0.getFillPaint();
      dialCap0.setFillPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      dialCap0.hashCode();
      Stroke stroke0 = dialCap0.getOutlineStroke();
      dialCap0.setOutlineStroke(stroke0);
      dialCap0.equals(stroke0);
      dialCap0.clone();
      dialCap0.setVisible(false);
      DialPlot dialPlot0 = new DialPlot();
      Paint paint0 = dialPlot0.getOutlinePaint();
      dialCap0.setOutlinePaint(paint0);
      dialCap0.setRadius(1059.0382832939);
      dialCap0.equals("");
      dialCap0.clone();
      dialCap0.setRadius(1.0F);
      dialCap0.setFillPaint(dialPlot0.DEFAULT_BACKGROUND_PAINT);
      dialCap0.equals(stroke0);
      dialCap0.getRadius();
      DialCap dialCap1 = new DialCap();
      dialCap0.addChangeListener(dialPlot0);
      dialCap0.equals(dialCap1);
      dialCap0.getOutlinePaint();
      dialCap0.clone();
      dialCap1.setOutlineStroke(dialPlot0.DEFAULT_OUTLINE_STROKE);
      dialCap0.getOutlineStroke();
      dialCap0.getRadius();
      dialCap1.getOutlinePaint();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      Object object0 = dialCap0.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      DialPlot dialPlot0 = new DialPlot(valueDataset0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getCenterX();
      doReturn(0.0).when(rectangle2D0).getCenterY();
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      Rectangle2D rectangle2D1 = DialPlot.rectangleByRadius(rectangle2D0, 10, 0.0);
      dialCap0.draw(graphics2D0, dialPlot0, rectangle2D1, rectangle2D1);
      dialCap0.equals(object0);
      // Undeclared exception!
      try { 
        dialCap0.setFillPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      // Undeclared exception!
      try { 
        dialCap0.setOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      dialCap0.setFillPaint(color0);
      dialCap0.getRadius();
      Graphics2D graphics2D0 = null;
      ValueDataset valueDataset0 = mock(ValueDataset.class, new ViolatedAssumptionAnswer());
      DialPlot dialPlot0 = new DialPlot(valueDataset0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getCenterX();
      doReturn(0.0).when(rectangle2D0).getCenterY();
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      Rectangle2D rectangle2D1 = DialPlot.rectangleByRadius(rectangle2D0, 1.0F, 0.75);
      // Undeclared exception!
      try { 
        dialCap0.draw((Graphics2D) null, dialPlot0, rectangle2D1, rectangle2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.dial.DialCap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      dialCap0.getOutlinePaint();
      dialCap0.getOutlineStroke();
      dialCap0.isClippedToWindow();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialPlot dialPlot0 = new DialPlot();
      Stroke stroke0 = dialPlot0.getOutlineStroke();
      dialCap0.setOutlineStroke(stroke0);
      Paint paint0 = dialCap0.getFillPaint();
      dialCap0.getOutlineStroke();
      dialCap0.getRadius();
      dialCap0.setOutlinePaint(paint0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      // Undeclared exception!
      try { 
        dialCap0.setRadius(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires radius > 0.0.
         //
         verifyException("org.jfree.chart.plot.dial.DialCap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialPlot dialPlot0 = new DialPlot();
      dialPlot0.getChart();
      dialPlot0.removeChangeListener((PlotChangeListener) null);
      dialPlot0.getParent();
      dialCap0.hasListener((EventListener) null);
      Object object0 = dialCap0.clone();
      dialCap0.equals(object0);
      Object object1 = dialCap0.clone();
      dialCap0.setFillPaint(dialPlot0.DEFAULT_OUTLINE_PAINT);
      dialCap0.hashCode();
      dialCap0.equals(object1);
      // Undeclared exception!
      try { 
        dialCap0.setRadius((-276.6801432226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires radius > 0.0.
         //
         verifyException("org.jfree.chart.plot.dial.DialCap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      dialCap0.equals((Object) null);
      dialCap0.setRadius(1989.4801946305404);
      // Undeclared exception!
      try { 
        dialCap0.setRadius(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires radius > 0.0.
         //
         verifyException("org.jfree.chart.plot.dial.DialCap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialCap dialCap1 = new DialCap();
      dialCap0.equals(dialCap1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialPlot dialPlot0 = new DialPlot((ValueDataset) null);
      Paint paint0 = dialPlot0.getOutlinePaint();
      dialCap0.setFillPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      dialCap0.getFillPaint();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      boolean boolean0 = dialCap0.isClippedToWindow();
      assertTrue(boolean0);
      
      dialCap0.getFillPaint();
      assertEquals(0.05, dialCap0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      dialCap0.getRadius();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      dialCap0.setFillPaint(color0);
      dialCap0.equals("xHP$");
      Object object0 = dialCap0.clone();
      dialCap0.equals(object0);
      DialCap dialCap1 = new DialCap();
      Object object1 = dialCap1.clone();
      dialCap0.equals(object1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      dialCap0.setRadius(0.7);
      dialCap0.hashCode();
      dialCap0.isClippedToWindow();
      Stroke stroke0 = dialCap0.getOutlineStroke();
      dialCap0.equals(stroke0);
      dialCap0.getRadius();
      // Undeclared exception!
      try { 
        dialCap0.setRadius(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires radius > 0.0.
         //
         verifyException("org.jfree.chart.plot.dial.DialCap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialPlot dialPlot0 = new DialPlot();
      Paint paint0 = dialPlot0.getBackgroundPaint();
      dialCap0.setOutlinePaint(paint0);
      dialCap0.removeChangeListener(dialPlot0);
      dialCap0.equals(dialCap0);
      dialCap0.setOutlineStroke(dialPlot0.DEFAULT_OUTLINE_STROKE);
      dialCap0.setOutlinePaint(dialPlot0.DEFAULT_OUTLINE_PAINT);
      dialCap0.setRadius(3238.24726757871);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(3238.24726757871).when(rectangle2D0).getCenterX();
      doReturn((double)1.0F).when(rectangle2D0).getCenterY();
      doReturn((-1198.789834)).when(rectangle2D0).getHeight();
      doReturn((-3744.337114)).when(rectangle2D0).getWidth();
      Rectangle2D rectangle2D1 = DialPlot.rectangleByRadius(rectangle2D0, 0.0, 10);
      dialCap0.draw(graphics2D0, dialPlot0, rectangle2D1, rectangle2D1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialPlot dialPlot0 = new DialPlot();
      dialCap0.removeChangeListener(dialPlot0);
      Paint paint0 = dialPlot0.getBackgroundPaint();
      dialCap0.setOutlinePaint(paint0);
      DialCap dialCap1 = new DialCap();
      dialCap1.removeChangeListener(dialPlot0);
      dialCap0.equals(dialCap1);
      dialCap1.setOutlineStroke(dialPlot0.DEFAULT_OUTLINE_STROKE);
      dialCap0.setOutlinePaint(dialPlot0.DEFAULT_OUTLINE_PAINT);
      dialCap1.setRadius(3238.24726757871);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getCenterX();
      doReturn(0.0).when(rectangle2D0).getCenterY();
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      Rectangle2D rectangle2D1 = DialPlot.rectangleByRadius(rectangle2D0, 0.0, 10);
      dialCap0.draw(graphics2D0, dialPlot0, rectangle2D1, rectangle2D1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      dialCap0.hashCode();
      Stroke stroke0 = dialCap0.getOutlineStroke();
      dialCap0.setOutlineStroke(stroke0);
      dialCap0.equals(stroke0);
      Object object0 = dialCap0.clone();
      object0.equals(dialCap0);
      dialCap0.setVisible(false);
      DialPlot dialPlot0 = new DialPlot();
      dialCap0.setRadius(1059.0382832939);
      dialCap0.equals("");
      dialCap0.setOutlinePaint(dialPlot0.DEFAULT_OUTLINE_PAINT);
      dialCap0.clone();
      dialCap0.setRadius(1.0F);
      dialCap0.setFillPaint(dialPlot0.DEFAULT_BACKGROUND_PAINT);
      dialCap0.equals(stroke0);
      dialCap0.getRadius();
      DialCap dialCap1 = new DialCap();
      dialCap0.addChangeListener(dialPlot0);
      dialCap0.equals(dialCap1);
      dialCap0.getOutlinePaint();
      Object object1 = dialCap0.clone();
      dialCap1.setOutlineStroke(dialPlot0.DEFAULT_OUTLINE_STROKE);
      dialCap0.getOutlineStroke();
      dialCap0.getRadius();
      dialCap1.getOutlinePaint();
      DialCap dialCap2 = new DialCap();
      DialLayerChangeEvent dialLayerChangeEvent0 = mock(DialLayerChangeEvent.class, new ViolatedAssumptionAnswer());
      dialCap2.notifyListeners(dialLayerChangeEvent0);
      Object object2 = dialCap2.clone();
      boolean boolean0 = object1.equals(object2);
      assertEquals(1.0, dialCap0.getRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      BasicStroke basicStroke0 = (BasicStroke)dialCap0.getOutlineStroke();
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.05, dialCap0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      dialCap0.hashCode();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      DialCap dialCap1 = new DialCap();
      DialPlot dialPlot0 = new DialPlot();
      Stroke stroke0 = dialPlot0.getOutlineStroke();
      dialCap1.setOutlineStroke(stroke0);
      dialCap0.equals(dialCap1);
      DialPlot dialPlot1 = new DialPlot();
      dialPlot1.getScale(0);
      Stroke stroke1 = dialCap0.getOutlineStroke();
      dialPlot1.setOutlineStroke(stroke1);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      dialCap1.removeChangeListener(dialPlot1);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((double)10).when(rectangle2D0).getCenterX();
      doReturn((double)10).when(rectangle2D0).getCenterY();
      doReturn((double)1.0F).when(rectangle2D0).getHeight();
      doReturn((double)0).when(rectangle2D0).getWidth();
      Rectangle2D rectangle2D1 = DialPlot.rectangleByRadius(rectangle2D0, 1.0F, 1.0F);
      dialCap1.draw(graphics2D1, dialPlot0, rectangle2D1, rectangle2D1);
      dialPlot1.getDataset(0);
      // Undeclared exception!
      try { 
        dialCap0.draw(graphics2D0, dialPlot1, (Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rect' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
