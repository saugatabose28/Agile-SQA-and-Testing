/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:57:34 GMT 2023
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Stroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntervalMarker_ESTest extends IntervalMarker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0, 2868.290510463);
      Object object0 = intervalMarker0.clone();
      assertEquals(2868.290510463, intervalMarker0.getEndValue(), 0.01);
      
      intervalMarker0.setEndValue(1.0);
      boolean boolean0 = intervalMarker0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0);
      IntervalMarker intervalMarker1 = new IntervalMarker(3186.277, 0.0);
      boolean boolean0 = intervalMarker0.equals(intervalMarker1);
      assertEquals(0.0, intervalMarker1.getEndValue(), 0.01);
      assertFalse(intervalMarker1.equals((Object)intervalMarker0));
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-180.0), (-2615.35852066));
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      IntervalMarker intervalMarker1 = new IntervalMarker(2475.257, (-2615.35852066), color0);
      assertEquals((-2615.35852066), intervalMarker1.getEndValue(), 0.01);
      assertEquals(2475.257, intervalMarker1.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(4744.686293, 0.0);
      assertEquals(4744.686293, intervalMarker0.getStartValue(), 0.01);
      
      intervalMarker0.setStartValue(0.0);
      double double0 = intervalMarker0.getStartValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-1873.109), (-1873.109));
      double double0 = intervalMarker0.getStartValue();
      assertEquals((-1873.109), double0, 0.01);
      assertEquals((-1873.109), intervalMarker0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-186.902396), 14.0);
      double double0 = intervalMarker0.getEndValue();
      assertEquals(14.0, double0, 0.01);
      assertEquals((-186.902396), intervalMarker0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-3631.0273043798607), (-3631.0273043798607));
      double double0 = intervalMarker0.getEndValue();
      assertEquals((-3631.0273043798607), double0, 0.01);
      assertEquals((-3631.0273043798607), intervalMarker0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-292.78), (-1775.170337872871));
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker1 = null;
      try {
        intervalMarker1 = new IntervalMarker(3523.43823874, (-510.8331565069014), color0, stroke0, color0, stroke0, 2210.467F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntervalMarker intervalMarker0 = null;
      try {
        intervalMarker0 = new IntervalMarker(542.1887, (-1154.1169996709564), (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-3631.0273043798607), (-3631.0273043798607));
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker1 = new IntervalMarker((-3631.0273043798607), (-3631.0273043798607), color0, stroke0, color0, stroke0, 0.8F);
      assertEquals((-3631.0273043798607), intervalMarker1.getEndValue(), 0.01);
      assertEquals((-3631.0273043798607), intervalMarker1.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker((-293.8986748617), 0.0, paint0);
      Object object0 = intervalMarker0.clone();
      intervalMarker0.setEndValue(1085.44015567667);
      boolean boolean0 = intervalMarker0.equals(object0);
      assertEquals(1085.44015567667, intervalMarker0.getEndValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(4744.686293, 0.0);
      IntervalMarker intervalMarker1 = new IntervalMarker(2190.1069129163, 0.0);
      boolean boolean0 = intervalMarker0.equals(intervalMarker1);
      assertEquals(2190.1069129163, intervalMarker1.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker1.getEndValue(), 0.01);
      assertFalse(intervalMarker1.equals((Object)intervalMarker0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker((-293.8986748617), 0.0, paint0);
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      IntervalMarker intervalMarker1 = new IntervalMarker((-2333.535713385), (-2333.535713385), color0);
      boolean boolean0 = intervalMarker1.equals(intervalMarker0);
      assertEquals((-293.8986748617), intervalMarker0.getStartValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(4744.686293, 0.0);
      boolean boolean0 = intervalMarker0.equals(intervalMarker0);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertTrue(boolean0);
      assertEquals(4744.686293, intervalMarker0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker((-293.8986748617), 0.0, paint0);
      boolean boolean0 = intervalMarker0.equals("Cl\"%7.Xst;:");
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals((-293.8986748617), intervalMarker0.getStartValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker((-293.8986748617), 0.0, paint0);
      intervalMarker0.getGradientPaintTransformer();
      assertEquals((-293.8986748617), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker((-293.8986748617), 0.0, paint0);
      intervalMarker0.setGradientPaintTransformer((GradientPaintTransformer) null);
      assertEquals((-293.8986748617), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(4744.686293, 0.0);
      double double0 = intervalMarker0.getStartValue();
      assertEquals(4744.686293, double0, 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker((-293.8986748617), 0.0, paint0);
      IntervalMarker intervalMarker1 = (IntervalMarker)intervalMarker0.clone();
      boolean boolean0 = intervalMarker0.equals(intervalMarker1);
      assertEquals((-293.8986748617), intervalMarker1.getStartValue(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, intervalMarker1.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker((-293.8986748617), 0.0, paint0);
      double double0 = intervalMarker0.getEndValue();
      assertEquals((-293.8986748617), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }
}
