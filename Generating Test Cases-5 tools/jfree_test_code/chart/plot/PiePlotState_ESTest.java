/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:40:37 GMT 2023
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.geom.Dimension2D;
import java.awt.geom.Line2D;
import java.awt.geom.PathIterator;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Collection;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.PiePlotState;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PiePlotState_ESTest extends PiePlotState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PiePlotState piePlotState0 = new PiePlotState((PlotRenderingInfo) null);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertNotNull(piePlotState0);
      
      Dimension dimension0 = new Dimension((-1268), 0);
      assertEquals((-1268), dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals((-1268.0), dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      
      Dimension dimension1 = new Dimension(dimension0);
      assertEquals((-1268), dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension1.height);
      assertEquals((-1268), dimension1.width);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals((-1268.0), dimension0.getWidth(), 0.01);
      assertEquals((-1268.0), dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertNotNull(dimension1);
      assertTrue(dimension1.equals((Object)dimension0));
      
      Rectangle rectangle0 = new Rectangle(dimension1);
      assertEquals((-1268), dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension1.height);
      assertEquals((-1268), dimension1.width);
      assertEquals((-1268), rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals((-1268.0), dimension0.getWidth(), 0.01);
      assertEquals((-1268.0), dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals((-634.0), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-1268.0), rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1268.0), rectangle0.getWidth(), 0.01);
      assertNotNull(rectangle0);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      
      rectangle0.setSize(dimension0);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertEquals((-1268), dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension1.height);
      assertEquals((-1268), dimension1.width);
      assertEquals((-1268), rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals((-1268.0), dimension0.getWidth(), 0.01);
      assertEquals((-1268.0), dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals((-634.0), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-1268.0), rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1268.0), rectangle0.getWidth(), 0.01);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      
      piePlotState0.setExplodedPieArea(rectangle0);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertEquals((-1268), dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension1.height);
      assertEquals((-1268), dimension1.width);
      assertEquals((-1268), rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals((-1268.0), dimension0.getWidth(), 0.01);
      assertEquals((-1268.0), dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals((-634.0), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-1268.0), rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1268.0), rectangle0.getWidth(), 0.01);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      
      Rectangle rectangle1 = (Rectangle)piePlotState0.getExplodedPieArea();
      assertSame(rectangle1, rectangle0);
      assertEquals(0, rectangle1.x);
      assertEquals((-1268), rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals((-1268.0), rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals((-634.0), rectangle1.getCenterX(), 0.01);
      assertEquals((-1268.0), rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertNotNull(rectangle1);
      
      Rectangle rectangle2 = (Rectangle)piePlotState0.getExplodedPieArea();
      assertSame(rectangle2, rectangle1);
      assertSame(rectangle2, rectangle0);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.x);
      assertEquals((-1268), rectangle2.width);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals((-634.0), rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals((-1268.0), rectangle2.getWidth(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals((-1268.0), rectangle2.getMaxX(), 0.01);
      assertNotNull(rectangle2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PiePlotState piePlotState0 = new PiePlotState((PlotRenderingInfo) null);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertNotNull(piePlotState0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1797.16, 1797.16, 1.0, (-1.0));
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.height, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.y, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.x, 0.01);
      assertEquals(1796.66, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1798.16, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1797.16, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1796.16, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1797.16, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1797.66, rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.height, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.y, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.x, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(1796.66, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1798.16, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1797.16, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1796.16, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1797.16, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1797.66, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertNotNull(rectangle0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double((-1241.991149001536), 1797.16);
      assertEquals((-1241.991149001536), point2D_Double0.x, 0.01);
      assertEquals(1797.16, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Dimension dimension0 = new Dimension(0, 0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      
      Dimension dimension1 = new Dimension(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension1.height);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertNotNull(dimension1);
      assertTrue(dimension1.equals((Object)dimension0));
      
      rectangle0.setFrame((Point2D) point2D_Double0, (Dimension2D) dimension1);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.height, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.y, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.x, 0.01);
      assertEquals(1797, rectangle0.y);
      assertEquals((-1242), rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals(1, rectangle0.width);
      assertEquals((-1241.991149001536), point2D_Double0.x, 0.01);
      assertEquals(1797.16, point2D_Double0.y, 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension1.height);
      assertEquals(1796.66, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1798.16, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1797.16, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1796.16, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1797.16, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1797.66, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(1797.5, rectangle0.getCenterY(), 0.01);
      assertEquals(1797.0, rectangle0.getMinY(), 0.01);
      assertEquals(1797.0, rectangle0.getY(), 0.01);
      assertEquals(1798.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-1241.5), rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals((-1241.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-1242.0), rectangle0.getX(), 0.01);
      assertEquals((-1242.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      
      piePlotState0.setExplodedPieArea(rectangle0);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.height, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.y, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.x, 0.01);
      assertEquals(1797, rectangle0.y);
      assertEquals((-1242), rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals(1, rectangle0.width);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(1796.66, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1798.16, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1797.16, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1796.16, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1797.16, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1797.66, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(1797.5, rectangle0.getCenterY(), 0.01);
      assertEquals(1797.0, rectangle0.getMinY(), 0.01);
      assertEquals(1797.0, rectangle0.getY(), 0.01);
      assertEquals(1798.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-1241.5), rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals((-1241.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-1242.0), rectangle0.getX(), 0.01);
      assertEquals((-1242.0), rectangle0.getMinX(), 0.01);
      
      Rectangle rectangle1 = (Rectangle)piePlotState0.getExplodedPieArea();
      assertSame(rectangle1, rectangle0);
      assertEquals(1797, rectangle1.y);
      assertEquals((-1242), rectangle1.x);
      assertEquals(1, rectangle1.height);
      assertEquals(1, rectangle1.width);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(1797.0, rectangle1.getY(), 0.01);
      assertEquals(1797.0, rectangle1.getMinY(), 0.01);
      assertEquals((-1242.0), rectangle1.getX(), 0.01);
      assertEquals(1.0, rectangle1.getHeight(), 0.01);
      assertEquals(1797.5, rectangle1.getCenterY(), 0.01);
      assertEquals((-1241.5), rectangle1.getCenterX(), 0.01);
      assertEquals(1.0, rectangle1.getWidth(), 0.01);
      assertEquals((-1241.0), rectangle1.getMaxX(), 0.01);
      assertEquals(1798.0, rectangle1.getMaxY(), 0.01);
      assertEquals((-1242.0), rectangle1.getMinX(), 0.01);
      assertFalse(rectangle1.isEmpty());
      assertNotNull(rectangle1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNotNull(piePlotState0);
      
      int int0 = piePlotState0.getPassesRequired();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, int0);
      
      boolean boolean0 = plotRenderingInfo0.equals(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertFalse(boolean0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1, 1, 1, 1);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.getFrame();
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      piePlotState0.setLinkArea(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Rectangle2D.intersect(rectangle2D_Double1, rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1, rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals(1, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(1.5, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(1.5, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(1.0, rectangle0.getMinX(), 0.01);
      assertEquals(1.0, rectangle0.getX(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(2.0, rectangle0.getMaxX(), 0.01);
      assertEquals(2.0, rectangle0.getMaxY(), 0.01);
      assertNotNull(rectangle0);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      
      piePlotState0.setPieArea(rectangle0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1, rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals(1, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(1.5, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(1.5, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(1.0, rectangle0.getMinX(), 0.01);
      assertEquals(1.0, rectangle0.getX(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(2.0, rectangle0.getMaxX(), 0.01);
      assertEquals(2.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      
      piePlotState0.setPassesRequired(634);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      piePlotState0.setPieHRadius(1.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      double double0 = piePlotState0.getPieHRadius();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = piePlotState0.getPieHRadius();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      piePlotState0.setPieCenterY(1.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      piePlotState0.setLatestAngle(1.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getLatestAngle(), 0.01);
      
      piePlotState0.setLatestAngle(2255.414678917);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      
      Rectangle2D rectangle2D0 = piePlotState0.getExplodedPieArea();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertNull(rectangle2D0);
      
      Rectangle rectangle1 = (Rectangle)piePlotState0.getPieArea();
      assertSame(rectangle1, rectangle0);
      assertEquals(1, rectangle1.x);
      assertEquals(1, rectangle1.width);
      assertEquals(1, rectangle1.y);
      assertEquals(1, rectangle1.height);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, rectangle1.getWidth(), 0.01);
      assertEquals(1.0, rectangle1.getY(), 0.01);
      assertEquals(1.5, rectangle1.getCenterX(), 0.01);
      assertEquals(1.5, rectangle1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle1.getMaxX(), 0.01);
      assertEquals(1.0, rectangle1.getHeight(), 0.01);
      assertEquals(1.0, rectangle1.getMinY(), 0.01);
      assertEquals(2.0, rectangle1.getMaxY(), 0.01);
      assertEquals(1.0, rectangle1.getX(), 0.01);
      assertEquals(1.0, rectangle1.getMinX(), 0.01);
      assertFalse(rectangle1.isEmpty());
      assertNotNull(rectangle1);
      
      double double2 = piePlotState0.getTotal();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      piePlotState0.setPieWRadius(1.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      
      double double3 = piePlotState0.getPieCenterY();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      double double4 = piePlotState0.getPieWRadius();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(1.0, double4, 0.01);
      
      double double5 = piePlotState0.getLatestAngle();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(2255.414678917, double5, 0.01);
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)piePlotState0.getLinkArea();
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertSame(rectangle2D_Double2, rectangle2D_Double1);
      assertEquals(1.0, rectangle2D_Double2.x, 0.01);
      assertEquals(1.0, rectangle2D_Double2.width, 0.01);
      assertEquals(1.0, rectangle2D_Double2.y, 0.01);
      assertEquals(1.0, rectangle2D_Double2.height, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(2.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(1.5, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double2.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double2);
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      
      double double6 = piePlotState0.getPieCenterY();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(1.0, double6, 0.01);
      
      double double7 = piePlotState0.getPieCenterY();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(1.0, double7, 0.01);
      
      double double8 = piePlotState0.getPieCenterX();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(0.0, double8, 0.01);
      
      double double9 = piePlotState0.getPieHRadius();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double0, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double7, 0.01);
      assertEquals(double9, double3, 0.01);
      assertEquals(1.0, double9, 0.01);
      
      piePlotState0.setPieArea(rectangle2D_Double0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(634, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PiePlotState piePlotState0 = new PiePlotState((PlotRenderingInfo) null);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertNotNull(piePlotState0);
      
      Rectangle rectangle0 = new Rectangle((-575), (-575), 37, (-1));
      assertEquals((-1), rectangle0.height);
      assertEquals((-575), rectangle0.x);
      assertEquals((-575), rectangle0.y);
      assertEquals(37, rectangle0.width);
      assertEquals((-575.5), rectangle0.getCenterY(), 0.01);
      assertEquals((-556.5), rectangle0.getCenterX(), 0.01);
      assertEquals(37.0, rectangle0.getWidth(), 0.01);
      assertEquals((-575.0), rectangle0.getMinX(), 0.01);
      assertEquals((-575.0), rectangle0.getMinY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-1.0), rectangle0.getHeight(), 0.01);
      assertEquals((-538.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-575.0), rectangle0.getY(), 0.01);
      assertEquals((-575.0), rectangle0.getX(), 0.01);
      assertEquals((-576.0), rectangle0.getMaxY(), 0.01);
      assertNotNull(rectangle0);
      
      rectangle0.height = 0;
      assertEquals((-556.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-575.0), rectangle0.getCenterY(), 0.01);
      assertEquals(37.0, rectangle0.getWidth(), 0.01);
      assertEquals((-575.0), rectangle0.getMinX(), 0.01);
      assertEquals((-575.0), rectangle0.getMinY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-538.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-575.0), rectangle0.getY(), 0.01);
      assertEquals((-575.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-575.0), rectangle0.getX(), 0.01);
      
      piePlotState0.setPieArea(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals((-575), rectangle0.x);
      assertEquals((-575), rectangle0.y);
      assertEquals(37, rectangle0.width);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals((-556.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-575.0), rectangle0.getCenterY(), 0.01);
      assertEquals(37.0, rectangle0.getWidth(), 0.01);
      assertEquals((-575.0), rectangle0.getMinX(), 0.01);
      assertEquals((-575.0), rectangle0.getMinY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-538.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-575.0), rectangle0.getY(), 0.01);
      assertEquals((-575.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-575.0), rectangle0.getX(), 0.01);
      
      piePlotState0.setExplodedPieArea((Rectangle2D) null);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      
      piePlotState0.setLatestAngle(586.65060084765);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(586.65060084765, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      
      piePlotState0.setPieHRadius(586.65060084765);
      assertEquals(586.65060084765, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(586.65060084765, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      
      Rectangle2D rectangle2D0 = piePlotState0.getExplodedPieArea();
      assertEquals(586.65060084765, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(586.65060084765, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertNull(rectangle2D0);
      
      Rectangle rectangle1 = (Rectangle)piePlotState0.getPieArea();
      assertSame(rectangle1, rectangle0);
      assertEquals(0, rectangle1.height);
      assertEquals((-575), rectangle1.y);
      assertEquals((-575), rectangle1.x);
      assertEquals(37, rectangle1.width);
      assertEquals(586.65060084765, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(586.65060084765, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals((-575.0), rectangle1.getCenterY(), 0.01);
      assertEquals((-538.0), rectangle1.getMaxX(), 0.01);
      assertEquals((-556.5), rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(37.0, rectangle1.getWidth(), 0.01);
      assertEquals((-575.0), rectangle1.getMaxY(), 0.01);
      assertEquals((-575.0), rectangle1.getMinY(), 0.01);
      assertEquals((-575.0), rectangle1.getY(), 0.01);
      assertEquals((-575.0), rectangle1.getX(), 0.01);
      assertEquals((-575.0), rectangle1.getMinX(), 0.01);
      assertNotNull(rectangle1);
      
      Rectangle2D rectangle2D1 = piePlotState0.getExplodedPieArea();
      assertEquals(586.65060084765, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(586.65060084765, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertNull(rectangle2D1);
      
      Rectangle2D rectangle2D2 = piePlotState0.getExplodedPieArea();
      assertEquals(586.65060084765, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(586.65060084765, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertNull(rectangle2D2);
      
      Rectangle2D rectangle2D3 = piePlotState0.getExplodedPieArea();
      assertEquals(586.65060084765, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(586.65060084765, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertNull(rectangle2D3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      chartRenderingInfo0.clear();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertNotNull(piePlotState0);
      
      Point point0 = new Point(8, 8);
      assertEquals(8, point0.x);
      assertEquals(8, point0.y);
      assertEquals(8.0, point0.getX(), 0.01);
      assertEquals(8.0, point0.getY(), 0.01);
      assertNotNull(point0);
      
      Dimension dimension0 = new Dimension();
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      
      Dimension dimension1 = new Dimension(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension1.height);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertNotNull(dimension1);
      assertTrue(dimension1.equals((Object)dimension0));
      
      Rectangle rectangle0 = new Rectangle(point0, dimension1);
      assertEquals(8, point0.x);
      assertEquals(8, point0.y);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension1.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(8, rectangle0.x);
      assertEquals(8, rectangle0.y);
      assertEquals(8.0, point0.getX(), 0.01);
      assertEquals(8.0, point0.getY(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(8.0, rectangle0.getCenterY(), 0.01);
      assertEquals(8.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(8.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(8.0, rectangle0.getMinY(), 0.01);
      assertEquals(8.0, rectangle0.getX(), 0.01);
      assertEquals(8.0, rectangle0.getMaxY(), 0.01);
      assertEquals(8.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(8.0, rectangle0.getMaxX(), 0.01);
      assertNotNull(rectangle0);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      
      piePlotState0.setLinkArea(rectangle0);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertEquals(8, point0.x);
      assertEquals(8, point0.y);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension1.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(8, rectangle0.x);
      assertEquals(8, rectangle0.y);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(8.0, point0.getX(), 0.01);
      assertEquals(8.0, point0.getY(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(8.0, rectangle0.getCenterY(), 0.01);
      assertEquals(8.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(8.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(8.0, rectangle0.getMinY(), 0.01);
      assertEquals(8.0, rectangle0.getX(), 0.01);
      assertEquals(8.0, rectangle0.getMaxY(), 0.01);
      assertEquals(8.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(8.0, rectangle0.getMaxX(), 0.01);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      
      Rectangle2D rectangle2D0 = piePlotState0.getPieArea();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertNull(rectangle2D0);
      
      Rectangle rectangle1 = (Rectangle)piePlotState0.getLinkArea();
      assertSame(rectangle1, rectangle0);
      assertEquals(8, rectangle1.x);
      assertEquals(8, rectangle1.y);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(8.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(8.0, rectangle1.getMaxX(), 0.01);
      assertEquals(8.0, rectangle1.getMinY(), 0.01);
      assertEquals(8.0, rectangle1.getY(), 0.01);
      assertEquals(8.0, rectangle1.getCenterX(), 0.01);
      assertEquals(8.0, rectangle1.getMaxY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(8.0, rectangle1.getMinX(), 0.01);
      assertEquals(8.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertNotNull(rectangle1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PiePlotState piePlotState0 = new PiePlotState((PlotRenderingInfo) null);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertNotNull(piePlotState0);
      
      piePlotState0.setTotal(1.0);
      assertEquals(1.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1778.74176008836, 1778.74176008836, 1.0, (-1.0));
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1778.74176008836, rectangle2D_Double0.y, 0.01);
      assertEquals(1778.74176008836, rectangle2D_Double0.x, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.height, 0.01);
      assertEquals(1777.74176008836, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1778.74176008836, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1779.74176008836, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1778.74176008836, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1779.24176008836, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1778.24176008836, rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      rectangle2D_Double0.y = 0.0;
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1778.74176008836, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1779.74176008836, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1779.24176008836, rectangle2D_Double0.getCenterX(), 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1778.74176008836, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.height, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1778.74176008836, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1779.74176008836, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1779.24176008836, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertNotNull(rectangle0);
      
      piePlotState0.setExplodedPieArea(rectangle0);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1778.74176008836, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.height, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1778.74176008836, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1779.74176008836, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1779.24176008836, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      
      Rectangle rectangle1 = (Rectangle)piePlotState0.getExplodedPieArea();
      assertSame(rectangle1, rectangle0);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(1.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertNotNull(rectangle1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PiePlotState piePlotState0 = new PiePlotState((PlotRenderingInfo) null);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNotNull(piePlotState0);
      
      int int0 = piePlotState0.getPassesRequired();
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, int0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1797.16, 1797.16, 1.0, (-1.0));
      assertEquals(1797.16, rectangle2D_Double0.x, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.height, 0.01);
      assertEquals(1796.66, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1797.16, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1797.16, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1796.16, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1798.16, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1797.66, rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Point point0 = new Point(1, (-1));
      assertEquals(1, point0.x);
      assertEquals((-1), point0.y);
      assertEquals(1.0, point0.getX(), 0.01);
      assertEquals((-1.0), point0.getY(), 0.01);
      assertNotNull(point0);
      
      rectangle2D_Double0.add((Point2D) point0);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.height, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.width, 0.01);
      assertEquals(1, point0.x);
      assertEquals((-1), point0.y);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(897.58, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(899.58, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1796.16, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1798.16, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, point0.getX(), 0.01);
      assertEquals((-1.0), point0.getY(), 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.height, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.width, 0.01);
      assertEquals(1, rectangle0.x);
      assertEquals((-1), rectangle0.y);
      assertEquals(1798, rectangle0.width);
      assertEquals(1798, rectangle0.height);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(897.58, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(899.58, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1796.16, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1798.16, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertEquals(1.0, rectangle0.getX(), 0.01);
      assertEquals(1797.0, rectangle0.getMaxY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(1798.0, rectangle0.getWidth(), 0.01);
      assertEquals(1798.0, rectangle0.getHeight(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getMinX(), 0.01);
      assertEquals(898.0, rectangle0.getCenterY(), 0.01);
      assertEquals(900.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1799.0, rectangle0.getMaxX(), 0.01);
      assertNotNull(rectangle0);
      
      piePlotState0.setExplodedPieArea(rectangle0);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.height, 0.01);
      assertEquals(1797.16, rectangle2D_Double0.width, 0.01);
      assertEquals(1, rectangle0.x);
      assertEquals((-1), rectangle0.y);
      assertEquals(1798, rectangle0.width);
      assertEquals(1798, rectangle0.height);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(897.58, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(899.58, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1796.16, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1798.16, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertEquals(1.0, rectangle0.getX(), 0.01);
      assertEquals(1797.0, rectangle0.getMaxY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(1798.0, rectangle0.getWidth(), 0.01);
      assertEquals(1798.0, rectangle0.getHeight(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getMinX(), 0.01);
      assertEquals(898.0, rectangle0.getCenterY(), 0.01);
      assertEquals(900.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1799.0, rectangle0.getMaxX(), 0.01);
      
      Rectangle rectangle1 = (Rectangle)piePlotState0.getExplodedPieArea();
      assertSame(rectangle1, rectangle0);
      assertEquals((-1), rectangle1.y);
      assertEquals(1798, rectangle1.height);
      assertEquals(1798, rectangle1.width);
      assertEquals(1, rectangle1.x);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1797.0, rectangle1.getMaxY(), 0.01);
      assertEquals(1.0, rectangle1.getX(), 0.01);
      assertEquals(1.0, rectangle1.getMinX(), 0.01);
      assertEquals((-1.0), rectangle1.getY(), 0.01);
      assertEquals((-1.0), rectangle1.getMinY(), 0.01);
      assertEquals(1798.0, rectangle1.getHeight(), 0.01);
      assertEquals(898.0, rectangle1.getCenterY(), 0.01);
      assertEquals(1798.0, rectangle1.getWidth(), 0.01);
      assertFalse(rectangle1.isEmpty());
      assertEquals(900.0, rectangle1.getCenterX(), 0.01);
      assertEquals(1799.0, rectangle1.getMaxX(), 0.01);
      assertNotNull(rectangle1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertNotNull(piePlotState0);
      
      double double0 = piePlotState0.getPieCenterX();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      piePlotState0.setPieWRadius(1.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertNotNull(rectangle0);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle0.createIntersection(rectangle2D_Double0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      chartRenderingInfo0.setChartArea(rectangle2D_Double0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      
      piePlotState0.setExplodedPieArea(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      double double1 = piePlotState0.getPieCenterY();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Rectangle2D.Double rectangle2D_Double2 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double2);
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      
      chartRenderingInfo0.setChartArea(rectangle2D_Double2);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      
      rectangle2D_Double0.height = 0.0;
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      
      piePlotState0.setPassesRequired(843);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(843, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      
      chartRenderingInfo0.setChartArea(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double2));
      
      double double2 = piePlotState0.getPieHRadius();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(843, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = piePlotState0.getPieWRadius();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(843, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      piePlotState0.setPieCenterY(1563.61712);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1563.61712, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(843, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      
      piePlotState0.setPieArea(rectangle0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1563.61712, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(843, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      
      double double4 = piePlotState0.getPieCenterX();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1563.61712, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(843, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      piePlotState0.setExplodedPieArea(rectangle2D_Double0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1563.61712, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(843, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      
      piePlotState0.setPieCenterY(0.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(843, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      
      piePlotState0.setPieCenterX(1.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(843, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      
      piePlotState0.setPieCenterY(0.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(843, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      
      double double5 = piePlotState0.getPieCenterY();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(843, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      Rectangle rectangle1 = (Rectangle)piePlotState0.getPieArea();
      assertSame(rectangle1, rectangle0);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(843, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertNotNull(rectangle1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertNotNull(piePlotState0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-4046.0947F), 1009.33F, 0.0F, (-865.85834F));
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-865.85834F), rectangle2D_Float0.height, 0.01F);
      assertEquals(1009.33F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-4046.0947F), rectangle2D_Float0.x, 0.01F);
      assertEquals(143.4716796875, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(1009.3300170898438, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(576.4008483886719, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Float0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Float0);
      
      Point point0 = new Point();
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertNotNull(point0);
      
      Dimension dimension0 = new Dimension(40, 0);
      assertEquals(0, dimension0.height);
      assertEquals(40, dimension0.width);
      assertEquals(40.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      Dimension dimension1 = new Dimension(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals(40, dimension0.width);
      assertEquals(0, dimension1.height);
      assertEquals(40, dimension1.width);
      assertEquals(40.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(40.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertNotNull(dimension1);
      assertTrue(dimension1.equals((Object)dimension0));
      
      Rectangle rectangle0 = new Rectangle(point0, dimension1);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, dimension0.height);
      assertEquals(40, dimension0.width);
      assertEquals(0, dimension1.height);
      assertEquals(40, dimension1.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(40, rectangle0.width);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(40.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(40.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(40.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(20.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(40.0, rectangle0.getWidth(), 0.01);
      assertNotNull(rectangle0);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangle2D_Float0.createIntersection(rectangle0);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-865.85834F), rectangle2D_Float0.height, 0.01F);
      assertEquals(1009.33F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-4046.0947F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, dimension0.height);
      assertEquals(40, dimension0.width);
      assertEquals(0, dimension1.height);
      assertEquals(40, dimension1.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(40, rectangle0.width);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Double0.width, 0.01);
      assertEquals(1009.3300170898438, rectangle2D_Double0.y, 0.01);
      assertEquals((-1009.3300170898438), rectangle2D_Double0.height, 0.01);
      assertEquals(143.4716796875, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(1009.3300170898438, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(576.4008483886719, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(40.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(40.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(40.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(20.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(40.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2023.04736328125), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(504.6650085449219, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1009.3300170898438, rectangle2D_Double0.getMinY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      
      piePlotState0.setExplodedPieArea(rectangle2D_Double0);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-865.85834F), rectangle2D_Float0.height, 0.01F);
      assertEquals(1009.33F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-4046.0947F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, dimension0.height);
      assertEquals(40, dimension0.width);
      assertEquals(0, dimension1.height);
      assertEquals(40, dimension1.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(40, rectangle0.width);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Double0.width, 0.01);
      assertEquals(1009.3300170898438, rectangle2D_Double0.y, 0.01);
      assertEquals((-1009.3300170898438), rectangle2D_Double0.height, 0.01);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(143.4716796875, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(1009.3300170898438, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(576.4008483886719, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(40.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(40.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(40.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(20.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(40.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2023.04736328125), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(504.6650085449219, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1009.3300170898438, rectangle2D_Double0.getMinY(), 0.01);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      
      Rectangle2D rectangle2D0 = piePlotState0.getPieArea();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertNull(rectangle2D0);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)piePlotState0.getExplodedPieArea();
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Double1.width, 0.01);
      assertEquals((-1009.3300170898438), rectangle2D_Double1.height, 0.01);
      assertEquals(1009.3300170898438, rectangle2D_Double1.y, 0.01);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals((-4046.0947265625), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(1009.3300170898438, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-2023.04736328125), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(504.6650085449219, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double1);
      
      Rectangle2D rectangle2D1 = piePlotState0.getLinkArea();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertNull(rectangle2D1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      Collection collection0 = standardEntityCollection0.getEntities();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(collection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertNotNull(plotRenderingInfo1);
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      
      plotRenderingInfo0.addSubplotInfo(plotRenderingInfo1);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(1, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertFalse(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertFalse(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(1, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNotNull(piePlotState0);
      assertFalse(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      
      Rectangle rectangle0 = new Rectangle((-148), (-1565), (-1565), (-1565));
      assertEquals((-148), rectangle0.x);
      assertEquals((-1565), rectangle0.width);
      assertEquals((-1565), rectangle0.y);
      assertEquals((-1565), rectangle0.height);
      assertEquals((-148.0), rectangle0.getX(), 0.01);
      assertEquals((-930.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-2347.5), rectangle0.getCenterY(), 0.01);
      assertEquals((-1713.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-1565.0), rectangle0.getHeight(), 0.01);
      assertEquals((-1565.0), rectangle0.getWidth(), 0.01);
      assertEquals((-148.0), rectangle0.getMinX(), 0.01);
      assertEquals((-3130.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-1565.0), rectangle0.getY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-1565.0), rectangle0.getMinY(), 0.01);
      assertNotNull(rectangle0);
      
      piePlotState0.setPieArea(rectangle0);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals((-148), rectangle0.x);
      assertEquals((-1565), rectangle0.width);
      assertEquals((-1565), rectangle0.y);
      assertEquals((-1565), rectangle0.height);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(1, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-148.0), rectangle0.getX(), 0.01);
      assertEquals((-930.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-2347.5), rectangle0.getCenterY(), 0.01);
      assertEquals((-1713.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-1565.0), rectangle0.getHeight(), 0.01);
      assertEquals((-1565.0), rectangle0.getWidth(), 0.01);
      assertEquals((-148.0), rectangle0.getMinX(), 0.01);
      assertEquals((-3130.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-1565.0), rectangle0.getY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-1565.0), rectangle0.getMinY(), 0.01);
      assertFalse(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      
      piePlotState0.setPieCenterX(0.0);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(1, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      
      Point2D.Float point2D_Float0 = new Point2D.Float((-1.0F), 0.0F);
      assertEquals((-1.0F), point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertNotNull(point2D_Float0);
      
      int int0 = plotRenderingInfo0.getSubplotIndex(point2D_Float0);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals((-1.0F), point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(1, plotRenderingInfo0.getSubplotCount());
      assertFalse(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertEquals((-1), int0);
      
      piePlotState0.setPieCenterY(2643.034490349562);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(1, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(2643.034490349562, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      
      double double0 = piePlotState0.getPieCenterY();
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(1, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(2643.034490349562, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertEquals(2643.034490349562, double0, 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2643.034490349562, (-1), 2643.034490349562, (-1.0F));
      assertEquals(2643.034490349562, rectangle2D_Double0.x, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals(2643.034490349562, rectangle2D_Double0.width, 0.01);
      assertEquals(2643.034490349562, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(5286.068980699124, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(3964.551735524343, rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      piePlotState0.setExplodedPieArea(rectangle2D_Double0);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals(2643.034490349562, rectangle2D_Double0.x, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals(2643.034490349562, rectangle2D_Double0.width, 0.01);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(1, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(2643.034490349562, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(2643.034490349562, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(5286.068980699124, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1.5), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(3964.551735524343, rectangle2D_Double0.getCenterX(), 0.01);
      assertFalse(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      
      Rectangle rectangle1 = (Rectangle)piePlotState0.getPieArea();
      assertSame(rectangle1, rectangle0);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals((-1565), rectangle1.width);
      assertEquals((-148), rectangle1.x);
      assertEquals((-1565), rectangle1.y);
      assertEquals((-1565), rectangle1.height);
      assertEquals((-148.0), rectangle1.getMinX(), 0.01);
      assertEquals((-1565.0), rectangle1.getY(), 0.01);
      assertEquals((-1565.0), rectangle1.getWidth(), 0.01);
      assertEquals((-1713.0), rectangle1.getMaxX(), 0.01);
      assertEquals((-1565.0), rectangle1.getHeight(), 0.01);
      assertEquals((-2347.5), rectangle1.getCenterY(), 0.01);
      assertEquals((-930.5), rectangle1.getCenterX(), 0.01);
      assertEquals((-148.0), rectangle1.getX(), 0.01);
      assertEquals((-3130.0), rectangle1.getMaxY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals((-1565.0), rectangle1.getMinY(), 0.01);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(1, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(2643.034490349562, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNotNull(rectangle1);
      assertFalse(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)piePlotState0.getExplodedPieArea();
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals(2643.034490349562, rectangle2D_Double1.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.height, 0.01);
      assertEquals(2643.034490349562, rectangle2D_Double1.x, 0.01);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(3964.551735524343, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(2643.034490349562, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-1.5), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(5286.068980699124, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(2643.034490349562, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertFalse(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      chartRenderingInfo0.clear();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Float0);
      
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertNotNull(rectangle0);
      
      boolean boolean0 = rectangle2D_Float0.contains((Rectangle2D) rectangle0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertFalse(boolean0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(0, (-3302.08), (-1.0));
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertNotNull(affineTransform0);
      
      PathIterator pathIterator0 = rectangle0.getPathIterator(affineTransform0, (-977.77612957));
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertFalse(pathIterator0.isDone());
      assertEquals(1, pathIterator0.getWindingRule());
      assertNotNull(pathIterator0);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.getFrame();
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Rectangle2D.union(rectangle2D_Double1, rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)rectangle2D_Float0.createIntersection(rectangle0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double2);
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      
      chartRenderingInfo0.setChartArea(rectangle2D_Double2);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertNotNull(piePlotState0);
      
      piePlotState0.setPassesRequired((-2025));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-2025), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      
      piePlotState0.setPieCenterY(0.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-2025), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      
      int int0 = piePlotState0.getPassesRequired();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-2025), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-2025), int0);
      
      piePlotState0.setExplodedPieArea(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-2025), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      
      int int1 = piePlotState0.getPassesRequired();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-2025), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertTrue(int1 == int0);
      assertEquals((-2025), int1);
      
      piePlotState0.setPieHRadius((-2025));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-2025.0), piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-2025), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      
      piePlotState0.setPieHRadius(0.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-2025), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      
      double double0 = piePlotState0.getPieWRadius();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-2025), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNotNull(piePlotState0);
      
      int int0 = piePlotState0.getPassesRequired();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, int0);
      
      boolean boolean0 = plotRenderingInfo0.equals(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertFalse(boolean0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1, 1, 1, 1);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.getFrame();
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinY(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      piePlotState0.setLinkArea(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinY(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Rectangle2D.intersect(rectangle2D_Double1, rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinY(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      piePlotState0.setPassesRequired(634);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      piePlotState0.setPieHRadius(1.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      double double0 = piePlotState0.getPieHRadius();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = piePlotState0.getPieHRadius();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      piePlotState0.setPieCenterY(1.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      piePlotState0.setLatestAngle(1.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.0, piePlotState0.getLatestAngle(), 0.01);
      
      piePlotState0.setLatestAngle(2255.414678917);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      
      Rectangle2D rectangle2D0 = piePlotState0.getExplodedPieArea();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertNull(rectangle2D0);
      
      Rectangle2D rectangle2D1 = piePlotState0.getPieArea();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertNull(rectangle2D1);
      
      double double2 = piePlotState0.getTotal();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      piePlotState0.setPieWRadius(1.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      
      double double3 = piePlotState0.getPieCenterY();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      double double4 = piePlotState0.getPieWRadius();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(1.0, double4, 0.01);
      
      double double5 = piePlotState0.getLatestAngle();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(2255.414678917, double5, 0.01);
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)piePlotState0.getLinkArea();
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertSame(rectangle2D_Double2, rectangle2D_Double1);
      assertEquals(1.0, rectangle2D_Double2.x, 0.01);
      assertEquals(1.0, rectangle2D_Double2.y, 0.01);
      assertEquals(1.0, rectangle2D_Double2.height, 0.01);
      assertEquals(1.0, rectangle2D_Double2.width, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(2.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double2);
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      
      double double6 = piePlotState0.getPieCenterY();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(1.0, double6, 0.01);
      
      double double7 = piePlotState0.getPieCenterY();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(1.0, double7, 0.01);
      
      double double8 = piePlotState0.getPieCenterX();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(0.0, double8, 0.01);
      
      double double9 = piePlotState0.getPieHRadius();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(double9, double6, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(double9, double3, 0.01);
      assertEquals(double9, double7, 0.01);
      assertEquals(double9, double0, 0.01);
      assertEquals(1.0, double9, 0.01);
      
      piePlotState0.setPieArea(rectangle2D_Double0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(2255.414678917, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(634, piePlotState0.getPassesRequired());
      assertEquals(1.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNotNull(piePlotState0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 0.0F, (-2851.248F));
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-2851.248F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-2851.248046875), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1425.6240234375), rectangle2D_Float0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Float0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      rectangle2D_Double0.add((-1.0), (double) 0.0F);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.getFrame();
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-0.5), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)rectangle2D_Float0.createUnion(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-2851.248F), rectangle2D_Float0.height, 0.01F);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double2.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals((-2851.248046875), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1425.6240234375), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-0.5), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double2.getMinX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double2);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      
      piePlotState0.setExplodedPieArea(rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-2851.248F), rectangle2D_Float0.height, 0.01F);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double2.width, 0.01);
      assertEquals((-1.0), rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-2851.248046875), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1425.6240234375), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-0.5), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double2.getMinX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double2));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      
      int int0 = piePlotState0.getPassesRequired();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, int0);
      
      Rectangle2D.Double rectangle2D_Double3 = (Rectangle2D.Double)piePlotState0.getExplodedPieArea();
      assertNotSame(rectangle2D_Double3, rectangle2D_Double1);
      assertSame(rectangle2D_Double3, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double3.width, 0.01);
      assertEquals(0.0, rectangle2D_Double3.y, 0.01);
      assertEquals(0.0, rectangle2D_Double3.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double3.x, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double3.getMinX(), 0.01);
      assertEquals((-0.5), rectangle2D_Double3.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double3);
      assertTrue(rectangle2D_Double3.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double3.equals((Object)rectangle2D_Double0));
      
      rectangle2D_Double0.setRect((-500.527377713), (-500.527377713), (double) 0.0F, (-670.71040401268));
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-670.71040401268), rectangle2D_Double0.height, 0.01);
      assertEquals((-500.527377713), rectangle2D_Double0.y, 0.01);
      assertEquals((-500.527377713), rectangle2D_Double0.x, 0.01);
      assertEquals((-1171.23778172568), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-500.527377713), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-500.527377713), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-835.88257971934), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-500.527377713), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-500.527377713), rectangle2D_Double0.getMinY(), 0.01);
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double3));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      
      double double0 = piePlotState0.getPieHRadius();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int int1 = piePlotState0.getPassesRequired();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      double double1 = piePlotState0.getTotal();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Rectangle2D rectangle2D0 = piePlotState0.getLinkArea();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNull(rectangle2D0);
      
      piePlotState0.setPieCenterY((-670.71040401268));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-670.71040401268), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      Rectangle2D rectangle2D1 = piePlotState0.getLinkArea();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-670.71040401268), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNull(rectangle2D1);
      
      piePlotState0.setPieCenterX(0.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-670.71040401268), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      piePlotState0.setPieArea(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-2851.248F), rectangle2D_Float0.height, 0.01F);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-670.71040401268), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-2851.248046875), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1425.6240234375), rectangle2D_Float0.getCenterY(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double4 = (Rectangle2D.Double)piePlotState0.getExplodedPieArea();
      assertSame(rectangle2D_Double4, rectangle2D_Double3);
      assertSame(rectangle2D_Double4, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double4.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double4.x, 0.01);
      assertEquals(1.0, rectangle2D_Double4.width, 0.01);
      assertEquals(0.0, rectangle2D_Double4.height, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-670.71040401268), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double4.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getMaxY(), 0.01);
      assertEquals((-0.5), rectangle2D_Double4.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double4.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double4);
      assertTrue(rectangle2D_Double4.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double4.equals((Object)rectangle2D_Double0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNotNull(piePlotState0);
      
      Point point0 = new Point((-979), 3195);
      assertEquals((-979), point0.x);
      assertEquals(3195, point0.y);
      assertEquals(3195.0, point0.getY(), 0.01);
      assertEquals((-979.0), point0.getX(), 0.01);
      assertNotNull(point0);
      
      point0.move(304, 942);
      assertEquals(942, point0.y);
      assertEquals(304, point0.x);
      assertEquals(942.0, point0.getY(), 0.01);
      assertEquals(304.0, point0.getX(), 0.01);
      
      point0.setLocation((double) 3195, (-1404.7295083));
      assertEquals((-1405), point0.y);
      assertEquals(3195, point0.x);
      assertEquals((-1405.0), point0.getY(), 0.01);
      assertEquals(3195.0, point0.getX(), 0.01);
      
      Line2D.Float line2D_Float0 = new Line2D.Float(point0, point0);
      assertEquals((-1405), point0.y);
      assertEquals(3195, point0.x);
      assertEquals(3195.0F, line2D_Float0.x2, 0.01F);
      assertEquals(3195.0F, line2D_Float0.x1, 0.01F);
      assertEquals((-1405.0F), line2D_Float0.y1, 0.01F);
      assertEquals((-1405.0F), line2D_Float0.y2, 0.01F);
      assertEquals((-1405.0), point0.getY(), 0.01);
      assertEquals(3195.0, point0.getX(), 0.01);
      assertNotNull(line2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)line2D_Float0.getBounds2D();
      assertEquals((-1405), point0.y);
      assertEquals(3195, point0.x);
      assertEquals(3195.0F, line2D_Float0.x2, 0.01F);
      assertEquals(3195.0F, line2D_Float0.x1, 0.01F);
      assertEquals((-1405.0F), line2D_Float0.y1, 0.01F);
      assertEquals((-1405.0F), line2D_Float0.y2, 0.01F);
      assertEquals((-1405.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(3195.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-1405.0), point0.getY(), 0.01);
      assertEquals(3195.0, point0.getX(), 0.01);
      assertEquals(3195.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1405.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(3195.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-1405.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(3195.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1405.0), rectangle2D_Float0.getMinY(), 0.01);
      assertNotNull(rectangle2D_Float0);
      
      piePlotState0.setLinkArea(rectangle2D_Float0);
      assertEquals((-1405), point0.y);
      assertEquals(3195, point0.x);
      assertEquals(3195.0F, line2D_Float0.x2, 0.01F);
      assertEquals(3195.0F, line2D_Float0.x1, 0.01F);
      assertEquals((-1405.0F), line2D_Float0.y1, 0.01F);
      assertEquals((-1405.0F), line2D_Float0.y2, 0.01F);
      assertEquals((-1405.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(3195.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-1405.0), point0.getY(), 0.01);
      assertEquals(3195.0, point0.getX(), 0.01);
      assertEquals(3195.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1405.0), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(3195.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-1405.0), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(3195.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1405.0), rectangle2D_Float0.getMinY(), 0.01);
      
      double double0 = piePlotState0.getPieHRadius();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = piePlotState0.getTotal();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      piePlotState0.setTotal(0.0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      piePlotState0.setTotal((-1101.158960867848));
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-1101.158960867848), piePlotState0.getTotal(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)piePlotState0.getLinkArea();
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals((-1405.0F), rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(3195.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-1101.158960867848), piePlotState0.getTotal(), 0.01);
      assertEquals(3195.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-1405.0), rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(3195.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(3195.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals((-1405.0), rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-1405.0), rectangle2D_Float1.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Float1);
      
      double double2 = piePlotState0.getPieHRadius();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-1101.158960867848), piePlotState0.getTotal(), 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = piePlotState0.getPieHRadius();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-1101.158960867848), piePlotState0.getTotal(), 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = piePlotState0.getPieWRadius();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-1101.158960867848), piePlotState0.getTotal(), 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      piePlotState0.setPieArea(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-1101.158960867848), piePlotState0.getTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertNotNull(piePlotState0);
      
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-1.0));
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals((-0.8414709848078965), affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.8414709848078965, affineTransform0.getShearX(), 0.01);
      assertEquals(0.5403023058681398, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.5403023058681398, affineTransform0.getScaleY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertNotNull(affineTransform0);
      
      affineTransform0.setToQuadrantRotation((-1));
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.getShearY(), 0.01);
      
      piePlotState0.setPassesRequired((-1));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-1), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      
      Point2D.Float point2D_Float0 = new Point2D.Float((-1902.59F), (-1902.59F));
      assertEquals((-1902.59F), point2D_Float0.y, 0.01F);
      assertEquals((-1902.59F), point2D_Float0.x, 0.01F);
      assertNotNull(point2D_Float0);
      
      piePlotState0.setPieCenterY((-990.2033524));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-1), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals((-990.2033524), piePlotState0.getPieCenterY(), 0.01);
      
      Point2D.Float point2D_Float1 = (Point2D.Float)affineTransform0.deltaTransform((Point2D) point2D_Float0, (Point2D) point2D_Float0);
      assertSame(point2D_Float0, point2D_Float1);
      assertSame(point2D_Float1, point2D_Float0);
      assertEquals(1902.59F, point2D_Float0.y, 0.01F);
      assertEquals((-1902.59F), point2D_Float0.x, 0.01F);
      assertEquals(1902.59F, point2D_Float1.y, 0.01F);
      assertEquals((-1902.59F), point2D_Float1.x, 0.01F);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.getShearY(), 0.01);
      assertNotNull(point2D_Float1);
      
      int int0 = plotRenderingInfo0.getSubplotIndex(point2D_Float1);
      assertSame(point2D_Float0, point2D_Float1);
      assertSame(point2D_Float1, point2D_Float0);
      assertEquals(1902.59F, point2D_Float0.y, 0.01F);
      assertEquals((-1902.59F), point2D_Float0.x, 0.01F);
      assertEquals(1902.59F, point2D_Float1.y, 0.01F);
      assertEquals((-1902.59F), point2D_Float1.x, 0.01F);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.getShearY(), 0.01);
      assertEquals((-1), int0);
      
      piePlotState0.setLatestAngle((-990.2033524));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-1), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-990.2033524), piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals((-990.2033524), piePlotState0.getPieCenterY(), 0.01);
      
      piePlotState0.setTotal((-1.0));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-1), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-990.2033524), piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-1.0), piePlotState0.getTotal(), 0.01);
      assertEquals((-990.2033524), piePlotState0.getPieCenterY(), 0.01);
      
      double double0 = piePlotState0.getLatestAngle();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-1), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-990.2033524), piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-1.0), piePlotState0.getTotal(), 0.01);
      assertEquals((-990.2033524), piePlotState0.getPieCenterY(), 0.01);
      assertEquals((-990.2033524), double0, 0.01);
      
      piePlotState0.setPieWRadius(1009.0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-1), piePlotState0.getPassesRequired());
      assertEquals(1009.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-990.2033524), piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-1.0), piePlotState0.getTotal(), 0.01);
      assertEquals((-990.2033524), piePlotState0.getPieCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PiePlotState piePlotState0 = new PiePlotState((PlotRenderingInfo) null);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertNotNull(piePlotState0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Point point0 = new Point(1, 1);
      assertEquals(1, point0.x);
      assertEquals(1, point0.y);
      assertEquals(1.0, point0.getX(), 0.01);
      assertEquals(1.0, point0.getY(), 0.01);
      assertNotNull(point0);
      
      Point point1 = new Point(point0);
      assertEquals(1, point0.x);
      assertEquals(1, point0.y);
      assertEquals(1, point1.y);
      assertEquals(1, point1.x);
      assertEquals(1.0, point0.getX(), 0.01);
      assertEquals(1.0, point0.getY(), 0.01);
      assertEquals(1.0, point1.getX(), 0.01);
      assertEquals(1.0, point1.getY(), 0.01);
      assertNotNull(point1);
      assertTrue(point1.equals((Object)point0));
      
      boolean boolean0 = polygon0.contains(point1);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertEquals(0, polygon0.npoints);
      assertEquals(1, point0.x);
      assertEquals(1, point0.y);
      assertEquals(1, point1.y);
      assertEquals(1, point1.x);
      assertEquals(1.0, point0.getX(), 0.01);
      assertEquals(1.0, point0.getY(), 0.01);
      assertEquals(1.0, point1.getX(), 0.01);
      assertEquals(1.0, point1.getY(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertFalse(boolean0);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertNotNull(rectangle0);
      
      piePlotState0.setExplodedPieArea(rectangle0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      
      piePlotState0.setElementHinting(false);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      
      piePlotState0.setTotal(650.9076927204792);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(650.9076927204792, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      
      EntityCollection entityCollection0 = piePlotState0.getEntityCollection();
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(650.9076927204792, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertNull(entityCollection0);
      
      piePlotState0.setElementHinting(false);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(650.9076927204792, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      
      piePlotState0.setLatestAngle(0.0);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(650.9076927204792, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      
      double double0 = piePlotState0.getTotal();
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(650.9076927204792, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(650.9076927204792, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNotNull(piePlotState0);
      
      EntityCollection entityCollection0 = chartRenderingInfo0.getEntityCollection();
      assertSame(standardEntityCollection0, entityCollection0);
      assertSame(entityCollection0, standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, entityCollection0.getEntityCount());
      assertNotNull(entityCollection0);
      
      EntityCollection entityCollection1 = piePlotState0.getEntityCollection();
      assertSame(standardEntityCollection0, entityCollection0);
      assertSame(standardEntityCollection0, entityCollection1);
      assertSame(entityCollection1, entityCollection0);
      assertSame(entityCollection1, standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0, entityCollection1.getEntityCount());
      assertNotNull(entityCollection1);
      
      piePlotState0.setPassesRequired(0);
      assertSame(standardEntityCollection0, entityCollection0);
      assertSame(standardEntityCollection0, entityCollection1);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      EntityCollection entityCollection2 = chartRenderingInfo0.getEntityCollection();
      assertSame(standardEntityCollection0, entityCollection0);
      assertSame(standardEntityCollection0, entityCollection1);
      assertSame(standardEntityCollection0, entityCollection2);
      assertSame(entityCollection2, entityCollection0);
      assertSame(entityCollection2, entityCollection1);
      assertSame(entityCollection2, standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, entityCollection2.getEntityCount());
      assertNotNull(entityCollection2);
      
      piePlotState0.setPieHRadius(0.0);
      assertSame(standardEntityCollection0, entityCollection0);
      assertSame(standardEntityCollection0, entityCollection1);
      assertSame(standardEntityCollection0, entityCollection2);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      Rectangle2D rectangle2D0 = piePlotState0.getPieArea();
      assertSame(standardEntityCollection0, entityCollection0);
      assertSame(standardEntityCollection0, entityCollection1);
      assertSame(standardEntityCollection0, entityCollection2);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNull(rectangle2D0);
      
      piePlotState0.setLinkArea((Rectangle2D) null);
      assertSame(standardEntityCollection0, entityCollection0);
      assertSame(standardEntityCollection0, entityCollection1);
      assertSame(standardEntityCollection0, entityCollection2);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      piePlotState0.setExplodedPieArea((Rectangle2D) null);
      assertSame(standardEntityCollection0, entityCollection0);
      assertSame(standardEntityCollection0, entityCollection1);
      assertSame(standardEntityCollection0, entityCollection2);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      piePlotState0.setPieCenterX(878.946);
      assertSame(standardEntityCollection0, entityCollection0);
      assertSame(standardEntityCollection0, entityCollection1);
      assertSame(standardEntityCollection0, entityCollection2);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(878.946, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      piePlotState0.setTotal(4052.74917);
      assertSame(standardEntityCollection0, entityCollection0);
      assertSame(standardEntityCollection0, entityCollection1);
      assertSame(standardEntityCollection0, entityCollection2);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(4052.74917, piePlotState0.getTotal(), 0.01);
      assertEquals(878.946, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      double double0 = piePlotState0.getPieCenterX();
      assertSame(standardEntityCollection0, entityCollection0);
      assertSame(standardEntityCollection0, entityCollection1);
      assertSame(standardEntityCollection0, entityCollection2);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(4052.74917, piePlotState0.getTotal(), 0.01);
      assertEquals(878.946, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(878.946, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PiePlotState piePlotState0 = new PiePlotState((PlotRenderingInfo) null);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertNotNull(piePlotState0);
      
      piePlotState0.setPieWRadius((-1007.118724425));
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-331.0), (-331.0), (-331.0), (-3797.9));
      assertEquals((-3797.9), rectangle2D_Double0.height, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-2229.95), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-4128.9), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-331.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-331.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-662.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-496.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      piePlotState0.setLinkArea(rectangle2D_Double0);
      assertEquals((-3797.9), rectangle2D_Double0.height, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals((-2229.95), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-4128.9), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-331.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-331.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-662.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-496.5), rectangle2D_Double0.getCenterX(), 0.01);
      
      piePlotState0.setLinkArea(rectangle2D_Double0);
      assertEquals((-3797.9), rectangle2D_Double0.height, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals((-2229.95), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-4128.9), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-331.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-331.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-662.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-496.5), rectangle2D_Double0.getCenterX(), 0.01);
      
      piePlotState0.setTotal((-331.0));
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-331.0), piePlotState0.getTotal(), 0.01);
      
      piePlotState0.setPieArea(rectangle2D_Double0);
      assertEquals((-3797.9), rectangle2D_Double0.height, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-331.0), piePlotState0.getTotal(), 0.01);
      assertEquals((-2229.95), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-4128.9), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-331.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-331.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-662.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-496.5), rectangle2D_Double0.getCenterX(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(6, 0, 6, (-1654));
      assertEquals(0, rectangle0.y);
      assertEquals((-1654), rectangle0.height);
      assertEquals(6, rectangle0.width);
      assertEquals(6, rectangle0.x);
      assertEquals(9.0, rectangle0.getCenterX(), 0.01);
      assertEquals(6.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(12.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1654.0), rectangle0.getHeight(), 0.01);
      assertEquals(6.0, rectangle0.getWidth(), 0.01);
      assertEquals(6.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals((-1654.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-827.0), rectangle0.getCenterY(), 0.01);
      assertNotNull(rectangle0);
      
      Rectangle rectangle1 = (Rectangle)rectangle0.clone();
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals((-1654), rectangle0.height);
      assertEquals(6, rectangle0.width);
      assertEquals(6, rectangle0.x);
      assertEquals(6, rectangle1.x);
      assertEquals(6, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals((-1654), rectangle1.height);
      assertEquals(9.0, rectangle0.getCenterX(), 0.01);
      assertEquals(6.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(12.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1654.0), rectangle0.getHeight(), 0.01);
      assertEquals(6.0, rectangle0.getWidth(), 0.01);
      assertEquals(6.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals((-1654.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-827.0), rectangle0.getCenterY(), 0.01);
      assertEquals(6.0, rectangle1.getWidth(), 0.01);
      assertEquals(6.0, rectangle1.getMinX(), 0.01);
      assertEquals((-1654.0), rectangle1.getHeight(), 0.01);
      assertEquals(12.0, rectangle1.getMaxX(), 0.01);
      assertEquals(6.0, rectangle1.getX(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals((-827.0), rectangle1.getCenterY(), 0.01);
      assertEquals(9.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals((-1654.0), rectangle1.getMaxY(), 0.01);
      assertNotNull(rectangle1);
      assertTrue(rectangle1.equals((Object)rectangle0));
      
      piePlotState0.setPieHRadius((-1409.7650931));
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-1409.7650931), piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-331.0), piePlotState0.getTotal(), 0.01);
      
      rectangle0.add(0, 0);
      assertNotSame(rectangle0, rectangle1);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertFalse(rectangle0.equals((Object)rectangle1));
      
      rectangle0.width = (-1654);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-1654.0), rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-1654.0), rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-827.0), rectangle0.getCenterX(), 0.01);
      
      piePlotState0.setLinkArea(rectangle0);
      assertNotSame(rectangle0, rectangle1);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals((-1654), rectangle0.width);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-1409.7650931), piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-331.0), piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-1654.0), rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-1654.0), rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-827.0), rectangle0.getCenterX(), 0.01);
      assertFalse(rectangle0.equals((Object)rectangle1));
      
      Rectangle rectangle2 = (Rectangle)piePlotState0.getLinkArea();
      assertSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertEquals((-1654), rectangle2.width);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-1409.7650931), piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-331.0), piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals((-1654.0), rectangle2.getWidth(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals((-827.0), rectangle2.getCenterX(), 0.01);
      assertEquals((-1654.0), rectangle2.getMaxX(), 0.01);
      assertNotNull(rectangle2);
      assertFalse(rectangle2.equals((Object)rectangle1));
      
      double double0 = piePlotState0.getPieHRadius();
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-1409.7650931), piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-331.0), piePlotState0.getTotal(), 0.01);
      assertEquals((-1409.7650931), double0, 0.01);
      
      piePlotState0.setPieHRadius((-2528.00047));
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-2528.00047), piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-331.0), piePlotState0.getTotal(), 0.01);
      
      double double1 = piePlotState0.getPieWRadius();
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-2528.00047), piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-331.0), piePlotState0.getTotal(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1007.118724425), double1, 0.01);
      
      piePlotState0.setPieHRadius((-3797.9));
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-3797.9), piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-331.0), piePlotState0.getTotal(), 0.01);
      
      piePlotState0.setPieCenterX(0.0);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-3797.9), piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-331.0), piePlotState0.getTotal(), 0.01);
      
      piePlotState0.setTotal(0.0);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-3797.9), piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      
      piePlotState0.setPassesRequired(6);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-3797.9), piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals(6, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      
      double double2 = piePlotState0.getPieWRadius();
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-3797.9), piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals(6, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals((-1007.118724425), double2, 0.01);
      
      piePlotState0.setLinkArea(rectangle2D_Double0);
      assertEquals((-3797.9), rectangle2D_Double0.height, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-331.0), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-3797.9), piePlotState0.getPieHRadius(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-1007.118724425), piePlotState0.getPieWRadius(), 0.01);
      assertEquals(6, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals((-2229.95), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-4128.9), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-331.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-331.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-662.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-496.5), rectangle2D_Double0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      boolean boolean0 = plotRenderingInfo0.equals(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertFalse(boolean0);
      
      chartRenderingInfo0.clear();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertNotNull(piePlotState0);
      
      chartRenderingInfo0.clear();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = chartRenderingInfo0.equals(object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      piePlotState0.setPieHRadius(2510.4458128);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(2510.4458128, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      
      Iterator iterator0 = standardEntityCollection0.iterator();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(iterator0);
      
      double double0 = piePlotState0.getPieWRadius();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(2510.4458128, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      piePlotState0.setTotal(70.3);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(2510.4458128, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(70.3, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      
      double double1 = piePlotState0.getLatestAngle();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(2510.4458128, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(70.3, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = piePlotState0.getPieHRadius();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(2510.4458128, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(70.3, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2510.4458128, double2, 0.01);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1182.1555F), (-453.5571F), (-453.5571F), (-453.5571F));
      assertEquals((-453.5571F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-1182.1555F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-453.5571F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-453.5571F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-907.1141967773438), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1182.155517578125), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-680.3356475830078), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-453.5570983886719), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-1635.7126159667969), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1408.934066772461), rectangle2D_Float0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Float0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.createIntersection(rectangle2D_Float0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-907.1141967773438), rectangle2D_Double1.height, 0.01);
      assertEquals((-1635.7126159667969), rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals((-453.5571F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-1182.1555F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-453.5571F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-453.5571F), rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-453.5570983886719), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-1635.7126159667969), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-817.8563079833984), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-907.1141967773438), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-907.1141967773438), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1182.155517578125), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-680.3356475830078), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-453.5570983886719), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-1635.7126159667969), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1408.934066772461), rectangle2D_Float0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)rectangle2D_Float0.createUnion(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-907.1141967773438), rectangle2D_Double1.height, 0.01);
      assertEquals((-1635.7126159667969), rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals((-907.1141967773438), rectangle2D_Double2.y, 0.01);
      assertEquals(453.5570983886719, rectangle2D_Double2.height, 0.01);
      assertEquals(453.5570983886719, rectangle2D_Double2.width, 0.01);
      assertEquals((-1635.7126159667969), rectangle2D_Double2.x, 0.01);
      assertEquals((-453.5571F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-1182.1555F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-453.5571F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-453.5571F), rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-453.5570983886719), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-1635.7126159667969), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-817.8563079833984), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-907.1141967773438), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-1408.934066772461), rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals((-907.1141967773438), rectangle2D_Double2.getMinY(), 0.01);
      assertEquals((-680.3356475830078), rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals((-453.5570983886719), rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals((-1182.155517578125), rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals((-1635.7126159667969), rectangle2D_Double2.getMinX(), 0.01);
      assertEquals((-907.1141967773438), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1182.155517578125), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-680.3356475830078), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-453.5570983886719), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-1635.7126159667969), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1408.934066772461), rectangle2D_Float0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double2);
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      
      piePlotState0.setPieArea(rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-907.1141967773438), rectangle2D_Double1.height, 0.01);
      assertEquals((-1635.7126159667969), rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals((-907.1141967773438), rectangle2D_Double2.y, 0.01);
      assertEquals(453.5570983886719, rectangle2D_Double2.height, 0.01);
      assertEquals(453.5570983886719, rectangle2D_Double2.width, 0.01);
      assertEquals((-1635.7126159667969), rectangle2D_Double2.x, 0.01);
      assertEquals((-453.5571F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-1182.1555F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-453.5571F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-453.5571F), rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals((-453.5570983886719), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-1635.7126159667969), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-817.8563079833984), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-907.1141967773438), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-1408.934066772461), rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals((-907.1141967773438), rectangle2D_Double2.getMinY(), 0.01);
      assertEquals((-680.3356475830078), rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals((-453.5570983886719), rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals((-1182.155517578125), rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals((-1635.7126159667969), rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(2510.4458128, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(70.3, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-907.1141967773438), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1182.155517578125), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-680.3356475830078), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-453.5570983886719), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-1635.7126159667969), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-1408.934066772461), rectangle2D_Float0.getCenterX(), 0.01);
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      Object object0 = chartRenderingInfo0.clone();
      assertNotSame(chartRenderingInfo0, object0);
      assertNotSame(object0, chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(object0);
      assertTrue(object0.equals((Object)chartRenderingInfo0));
      
      StandardEntityCollection standardEntityCollection1 = (StandardEntityCollection)standardEntityCollection0.clone();
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(standardEntityCollection1, standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, standardEntityCollection1.getEntityCount());
      assertNotNull(standardEntityCollection1);
      assertTrue(standardEntityCollection1.equals((Object)standardEntityCollection0));
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertNotNull(piePlotState0);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      Rectangle2D rectangle2D0 = piePlotState0.getExplodedPieArea();
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertNull(rectangle2D0);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      Collection collection0 = standardEntityCollection0.getEntities();
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(collection0);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      
      piePlotState0.setPieArea((Rectangle2D) null);
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      Rectangle2D rectangle2D1 = piePlotState0.getPieArea();
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertNull(rectangle2D1);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      piePlotState0.setLinkArea((Rectangle2D) null);
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      boolean boolean0 = chartRenderingInfo0.equals("M-");
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      assertFalse(boolean0);
      
      piePlotState0.setElementHinting(false);
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      piePlotState0.setTotal(1761.6329410054);
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1761.6329410054, piePlotState0.getTotal(), 0.01);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      piePlotState0.setPieArea((Rectangle2D) null);
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1761.6329410054, piePlotState0.getTotal(), 0.01);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      piePlotState0.setPieCenterY(234.07901743715);
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(234.07901743715, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1761.6329410054, piePlotState0.getTotal(), 0.01);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      piePlotState0.setPieWRadius(234.07901743715);
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(234.07901743715, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(234.07901743715, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1761.6329410054, piePlotState0.getTotal(), 0.01);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      double double0 = piePlotState0.getLatestAngle();
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(234.07901743715, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(234.07901743715, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1761.6329410054, piePlotState0.getTotal(), 0.01);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      assertEquals(0.0, double0, 0.01);
      
      piePlotState0.setPieArea((Rectangle2D) null);
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(234.07901743715, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(234.07901743715, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1761.6329410054, piePlotState0.getTotal(), 0.01);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      piePlotState0.setPassesRequired(1);
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(234.07901743715, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(234.07901743715, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1761.6329410054, piePlotState0.getTotal(), 0.01);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      double double1 = piePlotState0.getPieWRadius();
      assertNotSame(standardEntityCollection0, standardEntityCollection1);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(234.07901743715, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(234.07901743715, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1761.6329410054, piePlotState0.getTotal(), 0.01);
      assertTrue(standardEntityCollection0.equals((Object)standardEntityCollection1));
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(234.07901743715, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertNotNull(piePlotState0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartRenderingInfo0.getChartArea();
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      PlotRenderingInfo plotRenderingInfo1 = (PlotRenderingInfo)plotRenderingInfo0.clone();
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertNotNull(plotRenderingInfo1);
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      
      piePlotState0.setPieArea(rectangle2D_Double0);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      
      PlotRenderingInfo plotRenderingInfo2 = (PlotRenderingInfo)plotRenderingInfo0.clone();
      assertNotSame(plotRenderingInfo0, plotRenderingInfo2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertNotSame(plotRenderingInfo2, plotRenderingInfo0);
      assertNotSame(plotRenderingInfo2, plotRenderingInfo1);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, plotRenderingInfo2.getSubplotCount());
      assertNotNull(plotRenderingInfo2);
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertTrue(plotRenderingInfo2.equals((Object)plotRenderingInfo0));
      assertTrue(plotRenderingInfo2.equals((Object)plotRenderingInfo1));
      
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double(1.0, 1.0, 1.0, 1.0);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      boolean boolean0 = rectangle2D_Double1.contains((Point2D) point2D_Double0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(boolean0);
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)rectangle2D_Double1.getBounds2D();
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(1.0, rectangle2D_Double2.x, 0.01);
      assertEquals(1.0, rectangle2D_Double2.height, 0.01);
      assertEquals(1.0, rectangle2D_Double2.width, 0.01);
      assertEquals(1.0, rectangle2D_Double2.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(1.5, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(2.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double2);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      
      piePlotState0.setExplodedPieArea(rectangle2D_Double2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(1.0, rectangle2D_Double2.x, 0.01);
      assertEquals(1.0, rectangle2D_Double2.height, 0.01);
      assertEquals(1.0, rectangle2D_Double2.width, 0.01);
      assertEquals(1.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(1.5, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(2.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo2));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double2));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      
      boolean boolean1 = plotRenderingInfo0.equals(chartRenderingInfo0);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo2));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      piePlotState0.setPieArea(rectangle2D_Double1);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo2));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double2));
      
      piePlotState0.setPieArea(rectangle2D_Double1);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo2));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double2));
      
      piePlotState0.setExplodedPieArea(rectangle2D_Double2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(1.0, rectangle2D_Double2.x, 0.01);
      assertEquals(1.0, rectangle2D_Double2.height, 0.01);
      assertEquals(1.0, rectangle2D_Double2.width, 0.01);
      assertEquals(1.0, rectangle2D_Double2.y, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(1.5, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(2.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo2));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double2));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      
      Rectangle2D rectangle2D0 = piePlotState0.getLinkArea();
      assertNotSame(plotRenderingInfo0, plotRenderingInfo2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertNull(rectangle2D0);
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo2));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      
      Rectangle2D.Double rectangle2D_Double3 = (Rectangle2D.Double)piePlotState0.getPieArea();
      assertNotSame(rectangle2D_Double3, rectangle2D_Double2);
      assertSame(rectangle2D_Double3, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double0);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals(1.0, rectangle2D_Double3.width, 0.01);
      assertEquals(1.0, rectangle2D_Double3.height, 0.01);
      assertEquals(1.0, rectangle2D_Double3.x, 0.01);
      assertEquals(1.0, rectangle2D_Double3.y, 0.01);
      assertEquals(2.0, rectangle2D_Double3.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double3.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double3.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double3.getCenterY(), 0.01);
      assertEquals(1.5, rectangle2D_Double3.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double3.getMinX(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertNotNull(rectangle2D_Double3);
      assertTrue(rectangle2D_Double3.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double0));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo2));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      
      piePlotState0.setLatestAngle(0.0);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo2));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      
      piePlotState0.setLinkArea(rectangle2D_Double0);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo2));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double3));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      
      piePlotState0.setTotal((-1134.9454801274405));
      assertNotSame(plotRenderingInfo0, plotRenderingInfo2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-1134.9454801274405), piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo2));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      
      Rectangle2D.Double rectangle2D_Double4 = (Rectangle2D.Double)piePlotState0.getExplodedPieArea();
      assertNotSame(plotRenderingInfo0, plotRenderingInfo2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertSame(rectangle2D_Double4, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double3);
      assertNotSame(rectangle2D_Double4, rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double4.x, 0.01);
      assertEquals(1.0, rectangle2D_Double4.y, 0.01);
      assertEquals(1.0, rectangle2D_Double4.width, 0.01);
      assertEquals(1.0, rectangle2D_Double4.height, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-1134.9454801274405), piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(1.0, rectangle2D_Double4.getMinX(), 0.01);
      assertEquals(2.0, rectangle2D_Double4.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double4.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double4.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double4.getCenterY(), 0.01);
      assertEquals(1.5, rectangle2D_Double4.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double4);
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo2));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertTrue(rectangle2D_Double4.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double4.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double4.equals((Object)rectangle2D_Double3));
      
      Line2D.Float line2D_Float0 = new Line2D.Float(point2D_Double0, point2D_Double0);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(line2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)line2D_Float0.getBounds2D();
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Float0);
      
      piePlotState0.setExplodedPieArea(rectangle2D_Float0);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo2);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-1134.9454801274405), piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo2));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PiePlotState piePlotState0 = new PiePlotState((PlotRenderingInfo) null);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertNotNull(piePlotState0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(1.0, 1.0, 1.0, 1.0);
      assertEquals(1.0, line2D_Double0.x1, 0.01);
      assertEquals(1.0, line2D_Double0.y2, 0.01);
      assertEquals(1.0, line2D_Double0.y1, 0.01);
      assertEquals(1.0, line2D_Double0.x2, 0.01);
      assertNotNull(line2D_Double0);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertEquals(1.0, line2D_Double0.x1, 0.01);
      assertEquals(1.0, line2D_Double0.y2, 0.01);
      assertEquals(1.0, line2D_Double0.y1, 0.01);
      assertEquals(1.0, line2D_Double0.x2, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(1, rectangle0.x);
      assertEquals(1, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(1.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle0.getX(), 0.01);
      assertEquals(1.0, rectangle0.getMinX(), 0.01);
      assertNotNull(rectangle0);
      
      piePlotState0.setElementHinting(false);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      
      boolean boolean0 = rectangle0.contains((-1.0), 1.0);
      assertEquals(1.0, line2D_Double0.x1, 0.01);
      assertEquals(1.0, line2D_Double0.y2, 0.01);
      assertEquals(1.0, line2D_Double0.y1, 0.01);
      assertEquals(1.0, line2D_Double0.x2, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(1, rectangle0.x);
      assertEquals(1, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(1.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle0.getX(), 0.01);
      assertEquals(1.0, rectangle0.getMinX(), 0.01);
      assertFalse(boolean0);
      
      Rectangle rectangle1 = line2D_Double0.getBounds();
      assertNotSame(rectangle1, rectangle0);
      assertEquals(1.0, line2D_Double0.x1, 0.01);
      assertEquals(1.0, line2D_Double0.y2, 0.01);
      assertEquals(1.0, line2D_Double0.y1, 0.01);
      assertEquals(1.0, line2D_Double0.x2, 0.01);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(1, rectangle1.x);
      assertEquals(1, rectangle1.y);
      assertEquals(1.0, rectangle1.getMaxX(), 0.01);
      assertEquals(1.0, rectangle1.getMaxY(), 0.01);
      assertEquals(1.0, rectangle1.getX(), 0.01);
      assertEquals(1.0, rectangle1.getY(), 0.01);
      assertEquals(1.0, rectangle1.getCenterX(), 0.01);
      assertEquals(1.0, rectangle1.getCenterY(), 0.01);
      assertEquals(1.0, rectangle1.getMinY(), 0.01);
      assertEquals(1.0, rectangle1.getMinX(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertNotNull(rectangle1);
      assertTrue(rectangle1.equals((Object)rectangle0));
      
      rectangle1.setSize(0, 1);
      assertNotSame(rectangle1, rectangle0);
      assertEquals(1.0, line2D_Double0.x1, 0.01);
      assertEquals(1.0, line2D_Double0.y2, 0.01);
      assertEquals(1.0, line2D_Double0.y1, 0.01);
      assertEquals(1.0, line2D_Double0.x2, 0.01);
      assertEquals(0, rectangle1.width);
      assertEquals(1, rectangle1.x);
      assertEquals(1, rectangle1.height);
      assertEquals(1, rectangle1.y);
      assertEquals(1.0, rectangle1.getMaxX(), 0.01);
      assertEquals(2.0, rectangle1.getMaxY(), 0.01);
      assertEquals(1.0, rectangle1.getX(), 0.01);
      assertEquals(1.0, rectangle1.getY(), 0.01);
      assertEquals(1.0, rectangle1.getCenterX(), 0.01);
      assertEquals(1.0, rectangle1.getMinY(), 0.01);
      assertEquals(1.0, rectangle1.getMinX(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(1.0, rectangle1.getHeight(), 0.01);
      assertEquals(1.5, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertFalse(rectangle1.equals((Object)rectangle0));
      
      Rectangle2D.intersect(rectangle0, rectangle1, rectangle1);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertEquals(1.0, line2D_Double0.x1, 0.01);
      assertEquals(1.0, line2D_Double0.y2, 0.01);
      assertEquals(1.0, line2D_Double0.y1, 0.01);
      assertEquals(1.0, line2D_Double0.x2, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(1, rectangle0.x);
      assertEquals(1, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(1, rectangle1.x);
      assertEquals(1, rectangle1.y);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(1.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle0.getX(), 0.01);
      assertEquals(1.0, rectangle0.getMinX(), 0.01);
      assertEquals(1.0, rectangle1.getMaxX(), 0.01);
      assertEquals(1.0, rectangle1.getMaxY(), 0.01);
      assertEquals(1.0, rectangle1.getX(), 0.01);
      assertEquals(1.0, rectangle1.getY(), 0.01);
      assertEquals(1.0, rectangle1.getCenterX(), 0.01);
      assertEquals(1.0, rectangle1.getCenterY(), 0.01);
      assertEquals(1.0, rectangle1.getMinY(), 0.01);
      assertEquals(1.0, rectangle1.getMinX(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle0));
      
      Rectangle rectangle2 = new Rectangle(rectangle1);
      assertEquals(1.0, line2D_Double0.x1, 0.01);
      assertEquals(1.0, line2D_Double0.y2, 0.01);
      assertEquals(1.0, line2D_Double0.y1, 0.01);
      assertEquals(1.0, line2D_Double0.x2, 0.01);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(1, rectangle1.x);
      assertEquals(1, rectangle1.y);
      assertEquals(1, rectangle2.y);
      assertEquals(1, rectangle2.x);
      assertEquals(0, rectangle2.width);
      assertEquals(0, rectangle2.height);
      assertEquals(1.0, rectangle1.getMaxX(), 0.01);
      assertEquals(1.0, rectangle1.getMaxY(), 0.01);
      assertEquals(1.0, rectangle1.getX(), 0.01);
      assertEquals(1.0, rectangle1.getY(), 0.01);
      assertEquals(1.0, rectangle1.getCenterX(), 0.01);
      assertEquals(1.0, rectangle1.getCenterY(), 0.01);
      assertEquals(1.0, rectangle1.getMinY(), 0.01);
      assertEquals(1.0, rectangle1.getMinX(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(1.0, rectangle2.getY(), 0.01);
      assertEquals(1.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertEquals(1.0, rectangle2.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2.getMinY(), 0.01);
      assertEquals(1.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals(1.0, rectangle2.getMinX(), 0.01);
      assertNotNull(rectangle2);
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertTrue(rectangle2.equals((Object)rectangle0));
      
      piePlotState0.setPieCenterY(0);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      
      piePlotState0.setExplodedPieArea(rectangle2);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertEquals(1.0, line2D_Double0.x1, 0.01);
      assertEquals(1.0, line2D_Double0.y2, 0.01);
      assertEquals(1.0, line2D_Double0.y1, 0.01);
      assertEquals(1.0, line2D_Double0.x2, 0.01);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(1, rectangle1.x);
      assertEquals(1, rectangle1.y);
      assertEquals(1, rectangle2.y);
      assertEquals(1, rectangle2.x);
      assertEquals(0, rectangle2.width);
      assertEquals(0, rectangle2.height);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1.0, rectangle1.getMaxX(), 0.01);
      assertEquals(1.0, rectangle1.getMaxY(), 0.01);
      assertEquals(1.0, rectangle1.getX(), 0.01);
      assertEquals(1.0, rectangle1.getY(), 0.01);
      assertEquals(1.0, rectangle1.getCenterX(), 0.01);
      assertEquals(1.0, rectangle1.getCenterY(), 0.01);
      assertEquals(1.0, rectangle1.getMinY(), 0.01);
      assertEquals(1.0, rectangle1.getMinX(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(1.0, rectangle2.getY(), 0.01);
      assertEquals(1.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertEquals(1.0, rectangle2.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2.getMinY(), 0.01);
      assertEquals(1.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals(1.0, rectangle2.getMinX(), 0.01);
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertTrue(rectangle1.equals((Object)rectangle2));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertTrue(rectangle2.equals((Object)rectangle0));
      
      double double0 = piePlotState0.getPieCenterY();
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, double0, 0.01);
      
      Rectangle rectangle3 = (Rectangle)piePlotState0.getExplodedPieArea();
      assertSame(rectangle3, rectangle2);
      assertNotSame(rectangle3, rectangle0);
      assertNotSame(rectangle3, rectangle1);
      assertEquals(0, rectangle3.width);
      assertEquals(1, rectangle3.x);
      assertEquals(1, rectangle3.y);
      assertEquals(0, rectangle3.height);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1.0, rectangle3.getMaxX(), 0.01);
      assertEquals(0.0, rectangle3.getHeight(), 0.01);
      assertEquals(1.0, rectangle3.getMinY(), 0.01);
      assertEquals(1.0, rectangle3.getCenterX(), 0.01);
      assertEquals(1.0, rectangle3.getMaxY(), 0.01);
      assertEquals(1.0, rectangle3.getX(), 0.01);
      assertEquals(1.0, rectangle3.getMinX(), 0.01);
      assertEquals(1.0, rectangle3.getCenterY(), 0.01);
      assertEquals(0.0, rectangle3.getWidth(), 0.01);
      assertEquals(1.0, rectangle3.getY(), 0.01);
      assertTrue(rectangle3.isEmpty());
      assertNotNull(rectangle3);
      assertTrue(rectangle3.equals((Object)rectangle0));
      assertTrue(rectangle3.equals((Object)rectangle1));
      
      double double1 = piePlotState0.getTotal();
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = piePlotState0.getPieCenterY();
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = piePlotState0.getPieCenterX();
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      Object object0 = chartRenderingInfo0.clone();
      assertNotSame(chartRenderingInfo0, object0);
      assertNotSame(object0, chartRenderingInfo0);
      assertNotNull(object0);
      assertTrue(object0.equals((Object)chartRenderingInfo0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean0 = chartRenderingInfo0.equals(object1);
      assertNotSame(chartRenderingInfo0, object0);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      assertFalse(boolean0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertNotNull(piePlotState0);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      piePlotState0.setPieCenterY((-2510.78158441));
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      Rectangle2D rectangle2D0 = piePlotState0.getLinkArea();
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertNull(rectangle2D0);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      double double0 = piePlotState0.getPieCenterY();
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      assertEquals((-2510.78158441), double0, 0.01);
      
      EntityCollection entityCollection0 = piePlotState0.getEntityCollection();
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0, entityCollection0.getEntityCount());
      assertNotNull(entityCollection0);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      Rectangle2D rectangle2D1 = piePlotState0.getLinkArea();
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertNull(rectangle2D1);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      
      boolean boolean1 = chartRenderingInfo0.equals(object2);
      assertNotSame(chartRenderingInfo0, object0);
      assertNotSame(object2, object1);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      chartRenderingInfo0.setEntityCollection(entityCollection0);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0, entityCollection0.getEntityCount());
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartRenderingInfo0.getChartArea();
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      piePlotState0.setLinkArea(rectangle2D_Double0);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      piePlotState0.setExplodedPieArea((Rectangle2D) null);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      piePlotState0.setPassesRequired(0);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      piePlotState0.setPieCenterX((-2510.78158441));
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-2510.78158441), piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      double double1 = piePlotState0.getPieCenterX();
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-2510.78158441), piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      assertEquals(double1, double0, 0.01);
      assertEquals((-2510.78158441), double1, 0.01);
      
      piePlotState0.setPieArea((Rectangle2D) null);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-2510.78158441), piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)piePlotState0.getLinkArea();
      assertNotSame(chartRenderingInfo0, object0);
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      piePlotState0.setPieArea((Rectangle2D) null);
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-2510.78158441), piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      
      double double2 = piePlotState0.getPieCenterY();
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-2510.78158441), piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals((-2510.78158441), double2, 0.01);
      
      double double3 = piePlotState0.getPieCenterX();
      assertNotSame(chartRenderingInfo0, object0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-2510.78158441), piePlotState0.getPieCenterX(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-2510.78158441), piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals((-2510.78158441), double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PiePlotState piePlotState0 = new PiePlotState((PlotRenderingInfo) null);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertNotNull(piePlotState0);
      
      piePlotState0.setPieHRadius(0.0);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      
      double double0 = piePlotState0.getPieCenterX();
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = piePlotState0.getPieCenterX();
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-18), (-18), 0.0, 154.299345205613);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-18.0), rectangle2D_Double0.y, 0.01);
      assertEquals(154.299345205613, rectangle2D_Double0.height, 0.01);
      assertEquals((-18.0), rectangle2D_Double0.x, 0.01);
      assertEquals(136.299345205613, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(59.149672602806504, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-18.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-18.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-18.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-18.0), rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.getBounds2D();
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-18.0), rectangle2D_Double0.y, 0.01);
      assertEquals(154.299345205613, rectangle2D_Double0.height, 0.01);
      assertEquals((-18.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-18.0), rectangle2D_Double1.x, 0.01);
      assertEquals((-18.0), rectangle2D_Double1.y, 0.01);
      assertEquals(154.299345205613, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(136.299345205613, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(59.149672602806504, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-18.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-18.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-18.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-18.0), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-18.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-18.0), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-18.0), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(136.299345205613, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(59.149672602806504, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-18.0), rectangle2D_Double1.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      piePlotState0.setPieArea(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-18.0), rectangle2D_Double0.y, 0.01);
      assertEquals(154.299345205613, rectangle2D_Double0.height, 0.01);
      assertEquals((-18.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-18.0), rectangle2D_Double1.x, 0.01);
      assertEquals((-18.0), rectangle2D_Double1.y, 0.01);
      assertEquals(154.299345205613, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(136.299345205613, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(59.149672602806504, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-18.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-18.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-18.0), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-18.0), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-18.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-18.0), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-18.0), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(136.299345205613, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(59.149672602806504, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-18.0), rectangle2D_Double1.getMaxX(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Point point0 = new Point((-18), (-621));
      assertEquals((-621), point0.y);
      assertEquals((-18), point0.x);
      assertEquals((-18.0), point0.getX(), 0.01);
      assertEquals((-621.0), point0.getY(), 0.01);
      assertNotNull(point0);
      
      Point point1 = new Point(point0);
      assertEquals((-621), point0.y);
      assertEquals((-18), point0.x);
      assertEquals((-18), point1.x);
      assertEquals((-621), point1.y);
      assertEquals((-18.0), point0.getX(), 0.01);
      assertEquals((-621.0), point0.getY(), 0.01);
      assertEquals((-18.0), point1.getX(), 0.01);
      assertEquals((-621.0), point1.getY(), 0.01);
      assertNotNull(point1);
      assertTrue(point1.equals((Object)point0));
      
      Line2D.Double line2D_Double0 = new Line2D.Double(point1, point0);
      assertEquals((-621), point0.y);
      assertEquals((-18), point0.x);
      assertEquals((-18), point1.x);
      assertEquals((-621), point1.y);
      assertEquals((-621.0), line2D_Double0.y1, 0.01);
      assertEquals((-621.0), line2D_Double0.y2, 0.01);
      assertEquals((-18.0), line2D_Double0.x1, 0.01);
      assertEquals((-18.0), line2D_Double0.x2, 0.01);
      assertEquals((-18.0), point0.getX(), 0.01);
      assertEquals((-621.0), point0.getY(), 0.01);
      assertEquals((-18.0), point1.getX(), 0.01);
      assertEquals((-621.0), point1.getY(), 0.01);
      assertNotNull(line2D_Double0);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      
      point1.translate(0, 0);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertEquals((-621), point0.y);
      assertEquals((-18), point0.x);
      assertEquals((-18), point1.x);
      assertEquals((-621), point1.y);
      assertEquals((-18.0), point0.getX(), 0.01);
      assertEquals((-621.0), point0.getY(), 0.01);
      assertEquals((-18.0), point1.getX(), 0.01);
      assertEquals((-621.0), point1.getY(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      
      line2D_Double0.x1 = (double) (-18);
      assertEquals((-18.0), point0.getX(), 0.01);
      assertEquals((-621.0), point0.getY(), 0.01);
      assertEquals((-18.0), point1.getX(), 0.01);
      assertEquals((-621.0), point1.getY(), 0.01);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertEquals((-621), point0.y);
      assertEquals((-18), point0.x);
      assertEquals((-18), point1.x);
      assertEquals((-621), point1.y);
      assertEquals((-621.0), line2D_Double0.y1, 0.01);
      assertEquals((-621.0), line2D_Double0.y2, 0.01);
      assertEquals((-18.0), line2D_Double0.x1, 0.01);
      assertEquals((-18.0), line2D_Double0.x2, 0.01);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals((-18), rectangle0.x);
      assertEquals((-621), rectangle0.y);
      assertEquals((-18.0), point0.getX(), 0.01);
      assertEquals((-621.0), point0.getY(), 0.01);
      assertEquals((-18.0), point1.getX(), 0.01);
      assertEquals((-621.0), point1.getY(), 0.01);
      assertEquals((-18.0), rectangle0.getCenterX(), 0.01);
      assertEquals((-18.0), rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-621.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-18.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-621.0), rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals((-621.0), rectangle0.getMinY(), 0.01);
      assertEquals((-18.0), rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-621.0), rectangle0.getCenterY(), 0.01);
      assertNotNull(rectangle0);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      
      Rectangle rectangle1 = line2D_Double0.getBounds();
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertNotSame(rectangle1, rectangle0);
      assertEquals((-621), point0.y);
      assertEquals((-18), point0.x);
      assertEquals((-18), point1.x);
      assertEquals((-621), point1.y);
      assertEquals((-621.0), line2D_Double0.y1, 0.01);
      assertEquals((-621.0), line2D_Double0.y2, 0.01);
      assertEquals((-18.0), line2D_Double0.x1, 0.01);
      assertEquals((-18.0), line2D_Double0.x2, 0.01);
      assertEquals((-621), rectangle1.y);
      assertEquals(0, rectangle1.width);
      assertEquals((-18), rectangle1.x);
      assertEquals(0, rectangle1.height);
      assertEquals((-18.0), point0.getX(), 0.01);
      assertEquals((-621.0), point0.getY(), 0.01);
      assertEquals((-18.0), point1.getX(), 0.01);
      assertEquals((-621.0), point1.getY(), 0.01);
      assertEquals((-621.0), rectangle1.getY(), 0.01);
      assertEquals((-18.0), rectangle1.getMaxX(), 0.01);
      assertEquals((-18.0), rectangle1.getX(), 0.01);
      assertEquals((-18.0), rectangle1.getMinX(), 0.01);
      assertEquals((-18.0), rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals((-621.0), rectangle1.getCenterY(), 0.01);
      assertEquals((-621.0), rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals((-621.0), rectangle1.getMinY(), 0.01);
      assertNotNull(rectangle1);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertTrue(rectangle1.equals((Object)rectangle0));
      
      rectangle0.setFrameFromCenter((Point2D) point1, (Point2D) point0);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertNotSame(rectangle0, rectangle1);
      assertEquals((-621), point0.y);
      assertEquals((-18), point0.x);
      assertEquals((-18), point1.x);
      assertEquals((-621), point1.y);
      assertEquals((-621.0), line2D_Double0.y1, 0.01);
      assertEquals((-621.0), line2D_Double0.y2, 0.01);
      assertEquals((-18.0), line2D_Double0.x1, 0.01);
      assertEquals((-18.0), line2D_Double0.x2, 0.01);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals((-18), rectangle0.x);
      assertEquals((-621), rectangle0.y);
      assertEquals((-18.0), point0.getX(), 0.01);
      assertEquals((-621.0), point0.getY(), 0.01);
      assertEquals((-18.0), point1.getX(), 0.01);
      assertEquals((-621.0), point1.getY(), 0.01);
      assertEquals((-18.0), rectangle0.getCenterX(), 0.01);
      assertEquals((-18.0), rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-621.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-18.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-621.0), rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals((-621.0), rectangle0.getMinY(), 0.01);
      assertEquals((-18.0), rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-621.0), rectangle0.getCenterY(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertTrue(rectangle0.equals((Object)rectangle1));
      
      piePlotState0.setLinkArea(rectangle0);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertNotSame(rectangle0, rectangle1);
      assertEquals((-621), point0.y);
      assertEquals((-18), point0.x);
      assertEquals((-18), point1.x);
      assertEquals((-621), point1.y);
      assertEquals((-621.0), line2D_Double0.y1, 0.01);
      assertEquals((-621.0), line2D_Double0.y2, 0.01);
      assertEquals((-18.0), line2D_Double0.x1, 0.01);
      assertEquals((-18.0), line2D_Double0.x2, 0.01);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals((-18), rectangle0.x);
      assertEquals((-621), rectangle0.y);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals((-18.0), point0.getX(), 0.01);
      assertEquals((-621.0), point0.getY(), 0.01);
      assertEquals((-18.0), point1.getX(), 0.01);
      assertEquals((-621.0), point1.getY(), 0.01);
      assertEquals((-18.0), rectangle0.getCenterX(), 0.01);
      assertEquals((-18.0), rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-621.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-18.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-621.0), rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals((-621.0), rectangle0.getMinY(), 0.01);
      assertEquals((-18.0), rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-621.0), rectangle0.getCenterY(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertTrue(rectangle0.equals((Object)rectangle1));
      
      double double2 = piePlotState0.getLatestAngle();
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      piePlotState0.setPassesRequired((-621));
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-621), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)piePlotState0.getPieArea();
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertSame(rectangle2D_Double2, rectangle2D_Double1);
      assertEquals((-18.0), rectangle2D_Double2.y, 0.01);
      assertEquals((-18.0), rectangle2D_Double2.x, 0.01);
      assertEquals(154.299345205613, rectangle2D_Double2.height, 0.01);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-621), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(59.149672602806504, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals((-18.0), rectangle2D_Double2.getMinY(), 0.01);
      assertEquals((-18.0), rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals((-18.0), rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals((-18.0), rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(136.299345205613, rectangle2D_Double2.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double2);
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      
      Rectangle2D rectangle2D0 = piePlotState0.getExplodedPieArea();
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-621), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertNull(rectangle2D0);
      
      double double3 = piePlotState0.getLatestAngle();
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-621), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      Rectangle rectangle2 = (Rectangle)piePlotState0.getLinkArea();
      assertNotSame(rectangle2, rectangle1);
      assertSame(rectangle2, rectangle0);
      assertEquals((-621), rectangle2.y);
      assertEquals(0, rectangle2.width);
      assertEquals((-18), rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-621), piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals((-621.0), rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals((-18.0), rectangle2.getX(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals((-18.0), rectangle2.getCenterX(), 0.01);
      assertEquals((-18.0), rectangle2.getMaxX(), 0.01);
      assertEquals((-621.0), rectangle2.getMaxY(), 0.01);
      assertEquals((-18.0), rectangle2.getMinX(), 0.01);
      assertEquals((-621.0), rectangle2.getMinY(), 0.01);
      assertEquals((-621.0), rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertNotNull(rectangle2);
      assertTrue(rectangle2.equals((Object)rectangle1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      chartRenderingInfo0.clear();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      chartRenderingInfo0.setEntityCollection(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertNotNull(piePlotState0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Point2D.Float point2D_Float0 = new Point2D.Float(1743.2002F, 1743.2002F);
      assertEquals(1743.2002F, point2D_Float0.y, 0.01F);
      assertEquals(1743.2002F, point2D_Float0.x, 0.01F);
      assertNotNull(point2D_Float0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(point2D_Double0, point2D_Float0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(1743.2002F, point2D_Float0.y, 0.01F);
      assertEquals(1743.2002F, point2D_Float0.x, 0.01F);
      assertEquals(1743.2001953125, line2D_Double0.x2, 0.01);
      assertEquals(1743.2001953125, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertNotNull(line2D_Double0);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(1743.2002F, point2D_Float0.y, 0.01F);
      assertEquals(1743.2002F, point2D_Float0.x, 0.01F);
      assertEquals(1743.2001953125, line2D_Double0.x2, 0.01);
      assertEquals(1743.2001953125, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(1744, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(1744, rectangle0.height);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(1744.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(1744.0, rectangle0.getHeight(), 0.01);
      assertEquals(872.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(1744.0, rectangle0.getMaxY(), 0.01);
      assertEquals(872.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1744.0, rectangle0.getMaxX(), 0.01);
      assertNotNull(rectangle0);
      
      Rectangle rectangle1 = new Rectangle();
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.width);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertNotNull(rectangle1);
      assertFalse(rectangle1.equals((Object)rectangle0));
      
      Rectangle rectangle2 = (Rectangle)rectangle0.createUnion(rectangle1);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(1743.2002F, point2D_Float0.y, 0.01F);
      assertEquals(1743.2002F, point2D_Float0.x, 0.01F);
      assertEquals(1743.2001953125, line2D_Double0.x2, 0.01);
      assertEquals(1743.2001953125, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(1744, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(1744, rectangle0.height);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle2.x);
      assertEquals(1744, rectangle2.width);
      assertEquals(0, rectangle2.y);
      assertEquals(1744, rectangle2.height);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(1744.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(1744.0, rectangle0.getHeight(), 0.01);
      assertEquals(872.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(1744.0, rectangle0.getMaxY(), 0.01);
      assertEquals(872.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1744.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(872.0, rectangle2.getCenterY(), 0.01);
      assertEquals(1744.0, rectangle2.getWidth(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(1744.0, rectangle2.getMaxY(), 0.01);
      assertEquals(872.0, rectangle2.getCenterX(), 0.01);
      assertEquals(1744.0, rectangle2.getMaxX(), 0.01);
      assertEquals(1744.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertFalse(rectangle2.isEmpty());
      assertNotNull(rectangle2);
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle1));
      
      piePlotState0.setLinkArea(rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(1743.2002F, point2D_Float0.y, 0.01F);
      assertEquals(1743.2002F, point2D_Float0.x, 0.01F);
      assertEquals(1743.2001953125, line2D_Double0.x2, 0.01);
      assertEquals(1743.2001953125, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(1744, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(1744, rectangle0.height);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle2.x);
      assertEquals(1744, rectangle2.width);
      assertEquals(0, rectangle2.y);
      assertEquals(1744, rectangle2.height);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(1744.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(1744.0, rectangle0.getHeight(), 0.01);
      assertEquals(872.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(1744.0, rectangle0.getMaxY(), 0.01);
      assertEquals(872.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1744.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(872.0, rectangle2.getCenterY(), 0.01);
      assertEquals(1744.0, rectangle2.getWidth(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(1744.0, rectangle2.getMaxY(), 0.01);
      assertEquals(872.0, rectangle2.getCenterX(), 0.01);
      assertEquals(1744.0, rectangle2.getMaxX(), 0.01);
      assertEquals(1744.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertFalse(rectangle2.isEmpty());
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle1.equals((Object)rectangle2));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle1));
      
      piePlotState0.setPieHRadius((-2089.121270367654));
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-2089.121270367654), piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      
      Rectangle rectangle3 = (Rectangle)piePlotState0.getLinkArea();
      assertSame(rectangle3, rectangle2);
      assertNotSame(rectangle3, rectangle0);
      assertNotSame(rectangle3, rectangle1);
      assertEquals(1744, rectangle3.width);
      assertEquals(0, rectangle3.y);
      assertEquals(0, rectangle3.x);
      assertEquals(1744, rectangle3.height);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-2089.121270367654), piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(872.0, rectangle3.getCenterY(), 0.01);
      assertEquals(0.0, rectangle3.getY(), 0.01);
      assertEquals(1744.0, rectangle3.getMaxX(), 0.01);
      assertEquals(872.0, rectangle3.getCenterX(), 0.01);
      assertEquals(1744.0, rectangle3.getMaxY(), 0.01);
      assertEquals(0.0, rectangle3.getMinY(), 0.01);
      assertEquals(0.0, rectangle3.getX(), 0.01);
      assertEquals(0.0, rectangle3.getMinX(), 0.01);
      assertEquals(1744.0, rectangle3.getWidth(), 0.01);
      assertEquals(1744.0, rectangle3.getHeight(), 0.01);
      assertFalse(rectangle3.isEmpty());
      assertNotNull(rectangle3);
      assertFalse(rectangle3.equals((Object)rectangle1));
      assertTrue(rectangle3.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNotNull(piePlotState0);
      
      double double0 = piePlotState0.getPieWRadius();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Rectangle2D rectangle2D0 = piePlotState0.getLinkArea();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertNull(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PiePlotState piePlotState0 = new PiePlotState((PlotRenderingInfo) null);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertNotNull(piePlotState0);
      
      piePlotState0.setPassesRequired(3984);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(3984, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      
      piePlotState0.setPieCenterX(0.0);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(3984, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-857.674), 0.0, (-857.674), (-979.30375));
      assertEquals((-857.674), rectangle2D_Double0.x, 0.01);
      assertEquals((-857.674), rectangle2D_Double0.width, 0.01);
      assertEquals((-979.30375), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-979.30375), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-857.674), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1715.348), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1286.511), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-489.651875), rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Float0);
      
      piePlotState0.setPieWRadius((-2406.109878753));
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(3984, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-2406.109878753), piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)rectangle2D_Float0.getBounds2D();
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Float1);
      assertTrue(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      
      rectangle2D_Float0.setRect((Rectangle2D) rectangle2D_Double0);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertEquals((-857.674), rectangle2D_Double0.x, 0.01);
      assertEquals((-857.674), rectangle2D_Double0.width, 0.01);
      assertEquals((-979.30375), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-979.3038F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-857.674F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-857.674F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-979.30375), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-857.674), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1715.348), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1286.511), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-489.651875), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-489.6518859863281), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-979.3037719726562), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1286.5110168457031), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-1715.3480224609375), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-857.6740112304688), rectangle2D_Float0.getMinX(), 0.01);
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.clone();
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals((-857.674), rectangle2D_Double0.x, 0.01);
      assertEquals((-857.674), rectangle2D_Double0.width, 0.01);
      assertEquals((-979.30375), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-857.674), rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals((-979.30375), rectangle2D_Double1.height, 0.01);
      assertEquals((-857.674), rectangle2D_Double1.x, 0.01);
      assertEquals((-979.30375), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-857.674), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1715.348), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1286.511), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-489.651875), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-979.30375), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-1715.348), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-857.674), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-489.651875), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-1286.511), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)rectangle2D_Double0.createIntersection(rectangle2D_Float1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertEquals((-857.674), rectangle2D_Double0.x, 0.01);
      assertEquals((-857.674), rectangle2D_Double0.width, 0.01);
      assertEquals((-979.30375), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-979.3038F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-857.674F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-857.674F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals((-1715.348), rectangle2D_Double2.width, 0.01);
      assertEquals((-979.30375), rectangle2D_Double2.height, 0.01);
      assertEquals((-979.30375), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-857.674), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1715.348), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1286.511), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-489.651875), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-489.6518859863281), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-979.3037719726562), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1286.5110168457031), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-1715.3480224609375), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-857.6740112304688), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals((-489.651875), rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals((-979.30375), rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals((-1715.348), rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals((-857.674), rectangle2D_Double2.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double2);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      
      piePlotState0.setLinkArea(rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Float0, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float1, rectangle2D_Float0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertEquals((-857.674), rectangle2D_Double0.x, 0.01);
      assertEquals((-857.674), rectangle2D_Double0.width, 0.01);
      assertEquals((-979.30375), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-979.3038F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-857.674F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-857.674F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01);
      assertEquals((-1715.348), rectangle2D_Double2.width, 0.01);
      assertEquals((-979.30375), rectangle2D_Double2.height, 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(3984, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-2406.109878753), piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-979.30375), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-857.674), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1715.348), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1286.511), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-489.651875), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-489.6518859863281), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-979.3037719726562), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-1286.5110168457031), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-1715.3480224609375), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-857.6740112304688), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals((-489.651875), rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals((-979.30375), rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals((-1715.348), rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals((-857.674), rectangle2D_Double2.getCenterX(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Float0.equals((Object)rectangle2D_Float1));
      assertFalse(rectangle2D_Float1.equals((Object)rectangle2D_Float0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      
      piePlotState0.setTotal((-1015.0939945557641));
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(3984, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-2406.109878753), piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-1015.0939945557641), piePlotState0.getTotal(), 0.01);
      
      piePlotState0.setLatestAngle((-857.674));
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-857.674), piePlotState0.getLatestAngle(), 0.01);
      assertEquals(3984, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-2406.109878753), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-1015.0939945557641), piePlotState0.getTotal(), 0.01);
      
      piePlotState0.setPassesRequired(0);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-857.674), piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-2406.109878753), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-1015.0939945557641), piePlotState0.getTotal(), 0.01);
      
      double double0 = piePlotState0.getPieWRadius();
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-857.674), piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-2406.109878753), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-1015.0939945557641), piePlotState0.getTotal(), 0.01);
      assertEquals((-2406.109878753), double0, 0.01);
      
      Rectangle2D.Double rectangle2D_Double3 = (Rectangle2D.Double)piePlotState0.getLinkArea();
      assertNotSame(rectangle2D_Double3, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double0);
      assertSame(rectangle2D_Double3, rectangle2D_Double2);
      assertEquals((-979.30375), rectangle2D_Double3.height, 0.01);
      assertEquals((-1715.348), rectangle2D_Double3.width, 0.01);
      assertEquals(0.0, rectangle2D_Double3.y, 0.01);
      assertEquals(0.0, rectangle2D_Double3.x, 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-857.674), piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-2406.109878753), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-1015.0939945557641), piePlotState0.getTotal(), 0.01);
      assertEquals((-489.651875), rectangle2D_Double3.getCenterY(), 0.01);
      assertEquals((-1715.348), rectangle2D_Double3.getMaxX(), 0.01);
      assertEquals((-857.674), rectangle2D_Double3.getCenterX(), 0.01);
      assertEquals((-979.30375), rectangle2D_Double3.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double3);
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double0));
      
      Rectangle2D.Float rectangle2D_Float2 = new Rectangle2D.Float((-1.0F), 0.0F, 3984, (-979.3038F));
      assertEquals(3984.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals((-979.3038F), rectangle2D_Float2.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals((-979.3037719726562), rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(3983.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(1991.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals((-489.6518859863281), rectangle2D_Float2.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Float2);
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float1));
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float0));
      
      piePlotState0.setExplodedPieArea(rectangle2D_Float2);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float1);
      assertNotSame(rectangle2D_Float2, rectangle2D_Float0);
      assertEquals(3984.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals((-979.3038F), rectangle2D_Float2.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals((-979.3037719726562), rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(3983.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(1991.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals((-489.6518859863281), rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-857.674), piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-2406.109878753), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-1015.0939945557641), piePlotState0.getTotal(), 0.01);
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float1));
      assertFalse(rectangle2D_Float2.equals((Object)rectangle2D_Float0));
      
      double double1 = piePlotState0.getPieCenterX();
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals((-857.674), piePlotState0.getLatestAngle(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-2406.109878753), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-1015.0939945557641), piePlotState0.getTotal(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      piePlotState0.setLatestAngle((-1.0F));
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-2406.109878753), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-1.0), piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-1015.0939945557641), piePlotState0.getTotal(), 0.01);
      
      double double2 = piePlotState0.getPieHRadius();
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-2406.109878753), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-1.0), piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-1015.0939945557641), piePlotState0.getTotal(), 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = piePlotState0.getTotal();
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-2406.109878753), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-1.0), piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-1015.0939945557641), piePlotState0.getTotal(), 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-1015.0939945557641), double3, 0.01);
      
      int int0 = piePlotState0.getPassesRequired();
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01);
      assertEquals(0, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01);
      assertFalse(piePlotState0.getElementHinting());
      assertEquals((-2406.109878753), piePlotState0.getPieWRadius(), 0.01);
      assertEquals((-1.0), piePlotState0.getLatestAngle(), 0.01);
      assertEquals((-1015.0939945557641), piePlotState0.getTotal(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      Dimension dimension0 = new Dimension(37, (-2691));
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle0.createUnion(rectangle2D_Double0);
      piePlotState0.setLinkArea(rectangle2D0);
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      Rectangle2D rectangle2D1 = rectangle2D_Double1.getFrame();
      plotRenderingInfo0.setPlotArea(rectangle2D_Double1);
      piePlotState0.setPieArea(rectangle2D1);
      piePlotState0.setPieCenterY(4824.665794673);
      piePlotState0.getPieWRadius();
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 37);
      plotRenderingInfo0.getSubplotIndex(point2D_Double0);
      piePlotState0.getPieCenterY();
      piePlotState0.setPieHRadius(0.0);
      piePlotState0.getPieArea();
      int int0 = piePlotState0.getPassesRequired();
      assertEquals(4824.665794673, piePlotState0.getPieCenterY(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      double double0 = piePlotState0.getPieCenterX();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      chartRenderingInfo0.getEntityCollection();
      double double0 = piePlotState0.getPieHRadius();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = piePlotState0.getTotal();
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 1, (-402.4), 0.0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.addSubplotInfo(plotRenderingInfo1);
      piePlotState0.setLinkArea(rectangle2D_Double0);
      plotRenderingInfo0.clone();
      piePlotState0.setPieWRadius((-402.4));
      Rectangle rectangle0 = new Rectangle(1, 1);
      rectangle0.setFrame((Rectangle2D) rectangle2D_Double0);
      rectangle0.contains(0.0, 2252.758);
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      Rectangle2D rectangle2D1 = rectangle0.createIntersection(rectangle2D0);
      piePlotState0.setLinkArea(rectangle2D1);
      piePlotState0.getPassesRequired();
      piePlotState0.getLinkArea();
      piePlotState0.getPieHRadius();
      chartRenderingInfo0.clear();
      piePlotState0.getLinkArea();
      piePlotState0.setPieCenterY(0.0);
      assertEquals((-402.4), piePlotState0.getPieWRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      standardEntityCollection0.iterator();
      standardEntityCollection0.iterator();
      standardEntityCollection0.iterator();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.equals((Object) null);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getFrame();
      piePlotState0.setLinkArea(rectangle2D0);
      piePlotState0.getLinkArea();
      piePlotState0.setPieWRadius(0.0);
      piePlotState0.setPieWRadius(0.0);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PiePlotState piePlotState0 = new PiePlotState((PlotRenderingInfo) null);
      piePlotState0.setPieWRadius((-4247.793932582276));
      piePlotState0.setElementHinting(true);
      piePlotState0.setPieWRadius((-4247.793932582276));
      piePlotState0.setPassesRequired(0);
      piePlotState0.getPieHRadius();
      piePlotState0.setPieWRadius(0.0);
      piePlotState0.setPieCenterX((-1.0));
      piePlotState0.setPieHRadius(0);
      piePlotState0.getPieCenterX();
      piePlotState0.getPieCenterX();
      piePlotState0.setLatestAngle((-2000.13331677749));
      piePlotState0.getPieCenterY();
      piePlotState0.setLatestAngle(0.0);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle();
      plotRenderingInfo0.setDataArea(rectangle0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      double double0 = piePlotState0.getLatestAngle();
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      piePlotState0.getLinkArea();
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PiePlotState piePlotState0 = new PiePlotState((PlotRenderingInfo) null);
      piePlotState0.getExplodedPieArea();
      piePlotState0.setPieCenterX((-1.0));
      assertEquals((-1.0), piePlotState0.getPieCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      piePlotState0.setExplodedPieArea(rectangle2D_Float0);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      chartRenderingInfo0.equals((Object) null);
      int int0 = piePlotState0.getPassesRequired();
      assertEquals(1, int0);
      
      double double0 = piePlotState0.getPieCenterX();
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.clone();
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      double double0 = piePlotState0.getPieHRadius();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = piePlotState0.getTotal();
      assertEquals(0.0, double1, 0.01);
      
      piePlotState0.setLinkArea((Rectangle2D) null);
      assertEquals(1, piePlotState0.getPassesRequired());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      piePlotState0.setPieWRadius(3112.131402287);
      assertEquals(3112.131402287, piePlotState0.getPieWRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      plotRenderingInfo0.clone();
      piePlotState0.setPieHRadius(92.9688512);
      piePlotState0.getPieCenterY();
      piePlotState0.setLatestAngle(0.0);
      assertEquals(92.9688512, piePlotState0.getPieHRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      piePlotState0.setPieCenterY((-3646.0128448467));
      assertEquals((-3646.0128448467), piePlotState0.getPieCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      piePlotState0.getExplodedPieArea();
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      piePlotState0.setPieArea(rectangle2D0);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      piePlotState0.getPieArea();
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PiePlotState piePlotState0 = new PiePlotState((PlotRenderingInfo) null);
      piePlotState0.setPassesRequired(178);
      assertEquals(178, piePlotState0.getPassesRequired());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      piePlotState0.setTotal(2046.411709051611);
      assertEquals(2046.411709051611, piePlotState0.getTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      double double0 = piePlotState0.getPieHRadius();
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      double double0 = piePlotState0.getPieCenterY();
      assertEquals(0.0, double0, 0.01);
      
      piePlotState0.setTotal(0.0);
      piePlotState0.setPieCenterX(0.0);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PiePlotState piePlotState0 = new PiePlotState((PlotRenderingInfo) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1797.16, 1797.16, 1797.16, 1797.16);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      piePlotState0.setExplodedPieArea(rectangle0);
      assertEquals(1, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      PiePlotState piePlotState0 = new PiePlotState(plotRenderingInfo0);
      piePlotState0.getPassesRequired();
      plotRenderingInfo0.equals(chartRenderingInfo0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1, 1, 1, 1);
      piePlotState0.setLinkArea(rectangle2D_Double0);
      Rectangle2D.intersect(rectangle2D_Double0, rectangle2D_Double0, rectangle2D_Double0);
      piePlotState0.setPassesRequired(1);
      piePlotState0.setPieHRadius(1.0);
      piePlotState0.getPieHRadius();
      piePlotState0.setPieCenterY(1.0);
      piePlotState0.setLatestAngle(1.0);
      piePlotState0.getExplodedPieArea();
      piePlotState0.getPieArea();
      piePlotState0.getTotal();
      piePlotState0.setPieWRadius(1.0);
      piePlotState0.getPieCenterX();
      piePlotState0.getPieWRadius();
      piePlotState0.getLatestAngle();
      piePlotState0.getLinkArea();
      piePlotState0.getPieCenterX();
      piePlotState0.getPieHRadius();
      piePlotState0.setPieArea(rectangle2D_Double0);
      assertEquals(1.0, piePlotState0.getPieHRadius(), 0.01);
  }
}
