/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:51:02 GMT 2023
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Stroke;
import java.beans.PropertyChangeListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.labels.CrosshairLabelGenerator;
import org.jfree.chart.labels.StandardCrosshairLabelGenerator;
import org.jfree.chart.plot.Crosshair;
import org.jfree.chart.ui.RectangleAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Crosshair_ESTest extends Crosshair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair(2401.342276958875, paint0, stroke0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.removePropertyChangeListener(propertyChangeListener0);
      crosshair0.getLabelFont();
      crosshair0.equals(crosshair0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(2728.421355);
      crosshair0.hashCode();
      Object object0 = crosshair0.clone();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint0).toString();
      crosshair0.setLabelOutlinePaint(paint0);
      crosshair0.equals(object0);
      crosshair0.getLabelOutlinePaint();
      crosshair0.getLabelAnchor();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelVisible(false);
      crosshair0.clone();
      crosshair0.setLabelOutlinePaint(paint0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("`{POdc]m+'i", "`{POdc]m+'i").when(paint1).toString();
      crosshair0.setLabelPaint(paint1);
      Crosshair crosshair1 = new Crosshair((-2010.136));
      Font font0 = crosshair1.getLabelFont();
      crosshair0.setVisible(false);
      crosshair0.setLabelFont(font0);
      Crosshair crosshair2 = (Crosshair)crosshair0.clone();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair2.setLabelOutlineStroke(stroke0);
      crosshair0.equals(crosshair2);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.addPropertyChangeListener(propertyChangeListener0);
      Paint paint2 = crosshair0.getLabelPaint();
      crosshair0.getValue();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelOutlineStroke(stroke1);
      crosshair0.setLabelFont(font0);
      crosshair1.getLabelOutlinePaint();
      BasicStroke basicStroke0 = (BasicStroke)crosshair0.getStroke();
      crosshair0.getLabelPaint();
      crosshair1.isLabelVisible();
      crosshair1.getValue();
      crosshair1.equals(font0);
      crosshair1.getLabelFont();
      crosshair1.getValue();
      crosshair0.setLabelPaint(paint2);
      crosshair0.getPaint();
      crosshair1.setStroke(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Paint paint0 = crosshair0.getPaint();
      CrosshairLabelGenerator crosshairLabelGenerator0 = crosshair0.getLabelGenerator();
      crosshair0.setLabelGenerator(crosshairLabelGenerator0);
      crosshair0.setValue((-1.0));
      crosshair0.isVisible();
      crosshair0.getLabelYOffset();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.addPropertyChangeListener(propertyChangeListener0);
      crosshair0.getLabelYOffset();
      crosshair0.setLabelYOffset(0.0);
      crosshair0.setLabelYOffset(0.0);
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.addPropertyChangeListener(propertyChangeListener1);
      crosshair0.removePropertyChangeListener((PropertyChangeListener) null);
      crosshair0.setLabelOutlinePaint(paint0);
      crosshair0.setPaint(paint0);
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      crosshair0.isLabelVisible();
      crosshair0.setLabelOutlineVisible(true);
      crosshair0.setLabelYOffset(3.0);
      crosshair0.getLabelBackgroundPaint();
      crosshair0.getPaint();
      crosshair0.setPaint(paint0);
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelOutlineStroke(stroke0);
      Crosshair crosshair2 = (Crosshair)crosshair1.clone();
      crosshair0.equals(crosshair2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(1.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelVisible(true);
      crosshair0.removePropertyChangeListener(propertyChangeListener0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      crosshair0.setLabelAnchor(rectangleAnchor0);
      crosshair0.isVisible();
      crosshair0.hashCode();
      crosshair0.getPaint();
      crosshair0.getLabelPaint();
      crosshair0.getLabelPaint();
      crosshair0.getLabelYOffset();
      Stroke stroke0 = crosshair0.getLabelOutlineStroke();
      crosshair0.isVisible();
      crosshair0.hashCode();
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.removePropertyChangeListener(propertyChangeListener1);
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      crosshair0.getPaint();
      crosshair0.setStroke(stroke0);
      Crosshair crosshair2 = (Crosshair)crosshair0.clone();
      crosshair2.setLabelVisible(false);
      crosshair0.equals(crosshair2);
      crosshair0.getLabelYOffset();
      crosshair1.getLabelGenerator();
      crosshair2.getLabelBackgroundPaint();
      crosshair0.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair(1102.990442278607, paint0, stroke0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.addPropertyChangeListener(propertyChangeListener0);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelPaint(paint2);
      crosshair0.setVisible(true);
      crosshair0.setPaint(paint1);
      Paint paint3 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(paint3).toString();
      crosshair0.setLabelPaint(paint3);
      crosshair0.getLabelBackgroundPaint();
      crosshair0.getLabelPaint();
      crosshair0.getLabelOutlinePaint();
      Object object0 = crosshair0.clone();
      Font font0 = crosshair0.getLabelFont();
      crosshair0.setLabelFont(font0);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setStroke(stroke1);
      crosshair0.setLabelYOffset((-2445.3));
      crosshair0.equals(object0);
      crosshair0.equals(object0);
      crosshair0.hashCode();
      crosshair0.getLabelAnchor();
      crosshair0.getLabelPaint();
      crosshair0.getLabelFont();
      crosshair0.clone();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      crosshair0.setLabelYOffset(4820.566661221701);
      crosshair0.setLabelYOffset(4820.566661221701);
      crosshair0.hashCode();
      crosshair0.isLabelVisible();
      crosshair0.setLabelOutlineVisible(false);
      CrosshairLabelGenerator crosshairLabelGenerator0 = crosshair0.getLabelGenerator();
      Paint paint0 = crosshair0.getPaint();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke0).toString();
      crosshair0.setStroke(stroke0);
      Stroke stroke1 = crosshair0.getStroke();
      crosshair0.setLabelOutlinePaint(paint0);
      crosshair0.getLabelBackgroundPaint();
      crosshair0.setLabelYOffset(4820.566661221701);
      crosshair0.getLabelYOffset();
      crosshair0.isLabelVisible();
      crosshair0.setLabelOutlineStroke(stroke1);
      crosshair0.setVisible(true);
      crosshair0.isVisible();
      Crosshair crosshair1 = new Crosshair(2.0);
      crosshair1.setLabelGenerator(crosshairLabelGenerator0);
      crosshair0.equals(crosshair1);
      crosshair1.setLabelGenerator(crosshairLabelGenerator0);
      crosshair0.setLabelGenerator(crosshairLabelGenerator0);
      crosshair1.setLabelXOffset(4820.566661221701);
      Object object0 = crosshair0.clone();
      crosshair1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(950.9037);
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(paint0).toString();
      crosshair0.setLabelBackgroundPaint(paint0);
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setStroke(stroke0);
      crosshair0.setLabelXOffset(0.0);
      Paint paint1 = crosshair0.getLabelBackgroundPaint();
      Font font0 = crosshair0.getLabelFont();
      crosshair0.setLabelVisible(true);
      crosshair0.setLabelFont(font0);
      crosshair0.setLabelOutlinePaint(paint1);
      crosshair0.setStroke((Stroke) null);
      crosshair0.setLabelVisible(true);
      crosshair0.setLabelVisible(false);
      crosshair0.getLabelYOffset();
      crosshair0.setLabelXOffset((-1.0));
      crosshair0.getLabelFont();
      crosshair0.setLabelBackgroundPaint(paint1);
      CrosshairLabelGenerator crosshairLabelGenerator0 = crosshair0.getLabelGenerator();
      crosshair0.setLabelGenerator(crosshairLabelGenerator0);
      crosshair0.setLabelOutlinePaint(paint1);
      crosshair0.getStroke();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.removePropertyChangeListener(propertyChangeListener0);
      crosshair0.getLabelGenerator();
      crosshair0.getValue();
      crosshair0.getLabelPaint();
      crosshair0.setValue((-3498.604726724604));
      crosshair0.isLabelVisible();
      crosshair0.isVisible();
      crosshair0.getLabelBackgroundPaint();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      CrosshairLabelGenerator crosshairLabelGenerator0 = crosshair0.getLabelGenerator();
      crosshair0.setLabelGenerator(crosshairLabelGenerator0);
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelOutlineStroke(stroke0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.removePropertyChangeListener(propertyChangeListener0);
      crosshair0.setLabelOutlineVisible(true);
      crosshair0.hashCode();
      Crosshair crosshair1 = new Crosshair(1.0);
      crosshair1.setLabelBackgroundPaint((Paint) null);
      crosshair1.setPaint((Paint) null);
      crosshair0.equals(crosshair1);
      crosshair1.getLabelBackgroundPaint();
      crosshair1.clone();
      crosshair1.setLabelXOffset(1.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Object object0 = crosshair0.clone();
      Paint paint0 = crosshair0.getLabelPaint();
      crosshair0.setLabelPaint(paint0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.addPropertyChangeListener(propertyChangeListener0);
      crosshair0.getLabelYOffset();
      Stroke stroke0 = null;
      crosshair0.setStroke((Stroke) null);
      crosshair0.setLabelVisible(true);
      // Undeclared exception!
      try { 
        crosshair0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Crosshair", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-1906.0178);
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair((-1906.0178), paint0, stroke0);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelOutlineStroke(stroke1);
      crosshair0.clone();
      crosshair0.setVisible(false);
      // Undeclared exception!
      try { 
        crosshair0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-3150.2396950843568));
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CrosshairLabelGenerator crosshairLabelGenerator0 = crosshair0.getLabelGenerator();
      crosshair0.setLabelGenerator(crosshairLabelGenerator0);
      crosshair0.setLabelOutlineStroke(stroke0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.addPropertyChangeListener(propertyChangeListener0);
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint0).toString();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair1 = new Crosshair((-3150.2396950843568), paint1, stroke1);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair1.setLabelBackgroundPaint(paint2);
      crosshair0.equals(crosshair1);
      crosshair0.setPaint(paint0);
      Paint paint3 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelPaint(paint3);
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair1.setVisible(false);
      crosshair0.addPropertyChangeListener(propertyChangeListener1);
      crosshair0.getLabelXOffset();
      crosshair0.getValue();
      PropertyChangeListener propertyChangeListener2 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.addPropertyChangeListener(propertyChangeListener2);
      CrosshairLabelGenerator crosshairLabelGenerator1 = crosshair0.getLabelGenerator();
      crosshair0.setLabelGenerator(crosshairLabelGenerator1);
      crosshair0.getLabelFont();
      crosshair1.setVisible(false);
      crosshair0.setLabelXOffset((-3150.2396950843568));
      crosshair0.getPaint();
      Crosshair crosshair2 = new Crosshair();
      crosshair1.equals(crosshair2);
      crosshair2.getLabelFont();
      crosshair1.getLabelFont();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      crosshair0.setValue(0.0);
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.hashCode();
      crosshair0.setLabelBackgroundPaint((Paint) null);
      crosshair0.setStroke(stroke0);
      CrosshairLabelGenerator crosshairLabelGenerator0 = crosshair0.getLabelGenerator();
      crosshair0.setLabelGenerator(crosshairLabelGenerator0);
      crosshair0.isLabelOutlineVisible();
      crosshair0.setLabelYOffset(0.0);
      crosshair0.setValue(0.0);
      crosshair0.clone();
      crosshair0.getLabelYOffset();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.removePropertyChangeListener(propertyChangeListener0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair((-788.2), paint0, stroke0);
      crosshair0.setLabelOutlineVisible(true);
      crosshair0.setLabelYOffset((-3677.152128972));
      CrosshairLabelGenerator crosshairLabelGenerator0 = crosshair0.getLabelGenerator();
      crosshair0.setLabelGenerator(crosshairLabelGenerator0);
      crosshair0.getLabelXOffset();
      crosshair0.setLabelYOffset((-788.2));
      crosshair0.getLabelYOffset();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.removePropertyChangeListener(propertyChangeListener0);
      crosshair0.getLabelFont();
      crosshair0.getLabelYOffset();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Stroke stroke0 = null;
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair0.equals((Object) null);
      crosshair0.setLabelPaint(paint0);
      crosshair0.equals((Object) null);
      // Undeclared exception!
      try { 
        crosshair0.setLabelOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      CrosshairLabelGenerator crosshairLabelGenerator0 = crosshair0.getLabelGenerator();
      crosshair0.setLabelGenerator(crosshairLabelGenerator0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelVisible(true);
      crosshair0.addPropertyChangeListener(propertyChangeListener0);
      crosshair0.isLabelVisible();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelBackgroundPaint(paint0);
      crosshair0.getLabelOutlineStroke();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint1).toString();
      crosshair0.setLabelBackgroundPaint(paint1);
      crosshair0.setLabelOutlineVisible(true);
      crosshair0.getLabelBackgroundPaint();
      crosshair0.getLabelAnchor();
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.addPropertyChangeListener(propertyChangeListener1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair((-3489.87037046246), paint0, stroke0);
      assertNotNull(crosshair0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-3489.87037046246), crosshair0.getValue(), 0.01);
      
      Font font0 = crosshair0.getLabelFont();
      assertNotNull(font0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-3489.87037046246), crosshair0.getValue(), 0.01);
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12, font0.getSize());
      assertFalse(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      
      crosshair0.setLabelFont(font0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-3489.87037046246), crosshair0.getValue(), 0.01);
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(12, font0.getSize());
      assertFalse(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      
      // Undeclared exception!
      try { 
        crosshair0.setLabelGenerator((CrosshairLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair(0.0, paint0, stroke0);
      assertNotNull(crosshair0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      crosshair0.setLabelAnchor(rectangleAnchor0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      crosshair0.setLabelXOffset(0.0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      
      Crosshair crosshair1 = new Crosshair();
      assertNotNull(crosshair1);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertFalse(boolean0);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      
      Crosshair crosshair2 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair2);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair2, crosshair1);
      assertNotSame(crosshair2, crosshair0);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair2.equals((Object)crosshair0));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(0.0, crosshair2.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, crosshair2.getLabelAnchor());
      assertEquals(0.0, crosshair2.getLabelXOffset(), 0.01);
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertEquals(3.0, crosshair2.getLabelYOffset(), 0.01);
      assertTrue(crosshair2.isVisible());
      
      crosshair0.setLabelYOffset(0.0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair1.removePropertyChangeListener(propertyChangeListener0);
      assertNotSame(crosshair1, crosshair0);
      assertNotSame(crosshair1, crosshair2);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertFalse(crosshair1.equals((Object)crosshair2));
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      
      Crosshair crosshair3 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair3);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair3);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair3, crosshair2);
      assertNotSame(crosshair3, crosshair1);
      assertNotSame(crosshair3, crosshair0);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair3.equals((Object)crosshair0));
      assertFalse(crosshair3.equals((Object)crosshair2));
      assertFalse(crosshair3.equals((Object)crosshair1));
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair3.getLabelYOffset(), 0.01);
      assertFalse(crosshair3.isLabelVisible());
      assertTrue(crosshair3.isVisible());
      assertTrue(crosshair3.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, crosshair3.getLabelAnchor());
      assertEquals(0.0, crosshair3.getValue(), 0.01);
      assertEquals(0.0, crosshair3.getLabelXOffset(), 0.01);
      
      crosshair1.setLabelOutlineVisible(true);
      assertNotSame(crosshair1, crosshair3);
      assertNotSame(crosshair1, crosshair0);
      assertNotSame(crosshair1, crosshair2);
      assertFalse(crosshair1.equals((Object)crosshair3));
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertFalse(crosshair1.equals((Object)crosshair2));
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.TOP_RIGHT;
      crosshair1.setLabelAnchor(rectangleAnchor1);
      assertNotSame(crosshair1, crosshair3);
      assertNotSame(crosshair1, crosshair0);
      assertNotSame(crosshair1, crosshair2);
      assertNotSame(rectangleAnchor1, rectangleAnchor0);
      assertFalse(crosshair1.equals((Object)crosshair3));
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertFalse(crosshair1.equals((Object)crosshair2));
      assertFalse(rectangleAnchor1.equals((Object)rectangleAnchor0));
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_RIGHT, crosshair1.getLabelAnchor());
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-2573.9479574401));
      assertNotNull(crosshair0);
      assertEquals((-2573.9479574401), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair0.setPaint(paint0);
      assertEquals((-2573.9479574401), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelBackgroundPaint(paint1);
      assertEquals((-2573.9479574401), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      
      RectangleAnchor rectangleAnchor0 = crosshair0.getLabelAnchor();
      assertEquals(RectangleAnchor.BOTTOM_LEFT, rectangleAnchor0);
      assertEquals((-2573.9479574401), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      
      crosshair0.setPaint((Paint) null);
      assertEquals((-2573.9479574401), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      
      crosshair0.setLabelVisible(false);
      assertEquals((-2573.9479574401), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.CENTER;
      crosshair0.hashCode();
      assertEquals((-2573.9479574401), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      
      crosshair0.setLabelAnchor(rectangleAnchor1);
      assertNotSame(rectangleAnchor1, rectangleAnchor0);
      assertFalse(rectangleAnchor1.equals((Object)rectangleAnchor0));
      assertEquals((-2573.9479574401), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(RectangleAnchor.CENTER, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      RectangleAnchor rectangleAnchor2 = crosshair0.getLabelAnchor();
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor2);
      assertNotSame(rectangleAnchor2, rectangleAnchor0);
      assertSame(rectangleAnchor2, rectangleAnchor1);
      assertFalse(rectangleAnchor2.equals((Object)rectangleAnchor0));
      assertEquals((-2573.9479574401), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(RectangleAnchor.CENTER, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor2.toString());
      
      Font font0 = crosshair0.getLabelFont();
      assertNotNull(font0);
      assertEquals((-2573.9479574401), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(RectangleAnchor.CENTER, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("Tahoma", font0.getName());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      
      Paint paint2 = crosshair0.getPaint();
      assertNull(paint2);
      assertEquals((-2573.9479574401), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(RectangleAnchor.CENTER, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      boolean boolean0 = crosshair0.isVisible();
      assertTrue(boolean0);
      assertEquals((-2573.9479574401), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(RectangleAnchor.CENTER, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair1);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertEquals((-2573.9479574401), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(RectangleAnchor.CENTER, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals((-2573.9479574401), crosshair1.getValue(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.CENTER, crosshair1.getLabelAnchor());
      assertTrue(crosshair1.isVisible());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)crosshair0.getLabelOutlineStroke();
      assertNotNull(basicStroke0);
      assertNotSame(crosshair0, crosshair1);
      assertTrue(crosshair0.equals((Object)crosshair1));
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals((-2573.9479574401), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(RectangleAnchor.CENTER, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(3.0);
      assertNotNull(crosshair0);
      assertEquals(3.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      
      crosshair0.setLabelXOffset(2.0);
      assertEquals(3.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(2.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      
      crosshair0.setLabelVisible(false);
      assertEquals(3.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(2.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      
      double double0 = crosshair0.getValue();
      assertEquals(3.0, double0, 0.01);
      assertEquals(3.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(2.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.removePropertyChangeListener(propertyChangeListener0);
      assertEquals(3.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(2.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair(3201.1415, paint0, stroke0);
      assertNotNull(crosshair0);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3201.1415, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      
      crosshair0.hashCode();
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3201.1415, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair1);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3201.1415, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertFalse(crosshair1.isLabelVisible());
      assertTrue(crosshair1.isVisible());
      assertEquals(3201.1415, crosshair1.getValue(), 0.01);
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      
      crosshair0.setLabelOutlineVisible(false);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3201.1415, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      
      crosshair0.setVisible(true);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3201.1415, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      
      crosshair0.setLabelXOffset((-1861.4267593));
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertEquals(3201.1415, crosshair0.getValue(), 0.01);
      assertEquals((-1861.4267593), crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      
      crosshair0.setVisible(false);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isVisible());
      assertEquals(3201.1415, crosshair0.getValue(), 0.01);
      assertEquals((-1861.4267593), crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      crosshair0.setLabelYOffset(0.0);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isVisible());
      assertEquals(3201.1415, crosshair0.getValue(), 0.01);
      assertEquals((-1861.4267593), crosshair0.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      Crosshair crosshair2 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair2);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair2, crosshair0);
      assertNotSame(crosshair2, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertTrue(crosshair2.equals((Object)crosshair0));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isVisible());
      assertEquals(3201.1415, crosshair0.getValue(), 0.01);
      assertEquals((-1861.4267593), crosshair0.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3201.1415, crosshair2.getValue(), 0.01);
      assertFalse(crosshair2.isVisible());
      assertFalse(crosshair2.isLabelOutlineVisible());
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(0.0, crosshair2.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      assertEquals((-1861.4267593), crosshair2.getLabelXOffset(), 0.01);
      
      crosshair0.setVisible(false);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertTrue(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isVisible());
      assertEquals(3201.1415, crosshair0.getValue(), 0.01);
      assertEquals((-1861.4267593), crosshair0.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      crosshair0.setValue((-2118.901493));
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isVisible());
      assertEquals((-1861.4267593), crosshair0.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-2118.901493), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      double double0 = crosshair0.getLabelXOffset();
      assertEquals((-1861.4267593), double0, 0.01);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isVisible());
      assertEquals((-1861.4267593), crosshair0.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-2118.901493), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      crosshair0.setLabelXOffset(0.0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-2118.901493), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      Font font0 = crosshair0.getLabelFont();
      assertNotNull(font0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-2118.901493), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("Tahoma", font0.getName());
      
      crosshair0.setLabelFont(font0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-2118.901493), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("Tahoma", font0.getName());
      
      boolean boolean0 = crosshair0.isVisible();
      assertFalse(boolean0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-2118.901493), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      double double1 = crosshair0.getLabelXOffset();
      assertEquals(0.0, double1, 0.01);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-2118.901493), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      crosshair0.setVisible(true);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-2118.901493), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      
      // Undeclared exception!
      try { 
        crosshair0.setLabelOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair(0.0, paint0, stroke0);
      assertNotNull(crosshair0);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      RectangleAnchor rectangleAnchor0 = crosshair0.getLabelAnchor();
      assertEquals(RectangleAnchor.BOTTOM_LEFT, rectangleAnchor0);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair(1.0, paint0, stroke0);
      assertNotNull(crosshair0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(1.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      crosshair0.setValue(0.0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      crosshair0.setLabelOutlineVisible(false);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertFalse(crosshair0.isLabelOutlineVisible());
      
      Color color0 = (Color)crosshair0.getLabelPaint();
      assertNotNull(color0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      
      crosshair0.setLabelOutlinePaint(color0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      
      boolean boolean0 = crosshair0.isLabelOutlineVisible();
      assertFalse(boolean0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertFalse(crosshair0.isLabelOutlineVisible());
      
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair1);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertFalse(crosshair1.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertFalse(crosshair1.isLabelVisible());
      
      boolean boolean1 = crosshair0.equals(crosshair1);
      assertTrue(boolean1);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertTrue(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertFalse(boolean1 == boolean0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertFalse(crosshair1.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertFalse(crosshair1.isLabelVisible());
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setStroke(stroke1);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertFalse(crosshair0.isLabelOutlineVisible());
      
      crosshair0.setVisible(false);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      assertNotNull(crosshair0);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      
      crosshair0.setValue(0.0);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      
      boolean boolean0 = crosshair0.isLabelVisible();
      assertFalse(boolean0);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      
      double double0 = crosshair0.getLabelXOffset();
      assertEquals(3.0, double0, 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      
      Color color0 = (Color)crosshair0.getLabelPaint();
      assertNotNull(color0);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      assertNotNull(crosshair0);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      
      crosshair0.setValue(41.997808);
      assertEquals(41.997808, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      crosshair0.setLabelOutlineVisible(false);
      assertEquals(41.997808, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      crosshair0.setPaint((Paint) null);
      assertEquals(41.997808, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      crosshair0.setLabelVisible(false);
      assertEquals(41.997808, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)crosshair0.getLabelOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(41.997808, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      assertNotNull(crosshair0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair1);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair1.isVisible());
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertTrue(boolean0);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertTrue(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair1.isVisible());
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      
      boolean boolean1 = crosshair0.isVisible();
      assertTrue(boolean1);
      assertNotSame(crosshair0, crosshair1);
      assertTrue(crosshair0.equals((Object)crosshair1));
      assertTrue(boolean1 == boolean0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      
      crosshair0.setLabelVisible(true);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isLabelVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair((-730.869), paint0, stroke0);
      assertNotNull(crosshair0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals((-730.869), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      Stroke stroke1 = null;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = (StandardCrosshairLabelGenerator)crosshair0.getLabelGenerator();
      assertNotNull(standardCrosshairLabelGenerator0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals((-730.869), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals("{0}", standardCrosshairLabelGenerator0.getLabelTemplate());
      
      crosshair0.setLabelGenerator(standardCrosshairLabelGenerator0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals((-730.869), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals("{0}", standardCrosshairLabelGenerator0.getLabelTemplate());
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelOutlinePaint(paint1);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals((-730.869), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      crosshair0.setValue((-730.869));
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals((-730.869), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      double double0 = 1033.239725503961;
      crosshair0.setLabelXOffset(1033.239725503961);
      assertEquals(1033.239725503961, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals((-730.869), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      Paint paint2 = null;
      // Undeclared exception!
      try { 
        crosshair0.setLabelOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1777.1081));
      assertNotNull(crosshair0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-1777.1081), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelPaint(paint0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-1777.1081), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = (StandardCrosshairLabelGenerator)crosshair0.getLabelGenerator();
      assertNotNull(standardCrosshairLabelGenerator0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-1777.1081), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals("{0}", standardCrosshairLabelGenerator0.getLabelTemplate());
      
      crosshair0.setLabelGenerator(standardCrosshairLabelGenerator0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-1777.1081), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals("{0}", standardCrosshairLabelGenerator0.getLabelTemplate());
      
      BasicStroke basicStroke0 = (BasicStroke)crosshair0.getLabelOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-1777.1081), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      Color color0 = (Color)crosshair0.getLabelOutlinePaint();
      assertNotNull(color0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-1777.1081), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      
      crosshair0.setLabelPaint(color0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-1777.1081), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      
      crosshair0.setLabelGenerator(standardCrosshairLabelGenerator0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-1777.1081), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals("{0}", standardCrosshairLabelGenerator0.getLabelTemplate());
      
      crosshair0.setLabelOutlinePaint(color0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-1777.1081), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      
      double double0 = crosshair0.getLabelYOffset();
      assertEquals(3.0, double0, 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-1777.1081), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      // Undeclared exception!
      try { 
        crosshair0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      assertNotNull(crosshair0);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair1 = new Crosshair(285.39);
      assertNotNull(crosshair1);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertEquals(285.39, crosshair1.getValue(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = (StandardCrosshairLabelGenerator)crosshair1.getLabelGenerator();
      assertNotNull(standardCrosshairLabelGenerator0);
      assertNotSame(crosshair1, crosshair0);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertEquals(285.39, crosshair1.getValue(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals("{0}", standardCrosshairLabelGenerator0.getLabelTemplate());
      
      crosshair0.setLabelGenerator(standardCrosshairLabelGenerator0);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(285.39, crosshair1.getValue(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals("{0}", standardCrosshairLabelGenerator0.getLabelTemplate());
      
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelOutlineStroke(stroke0);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      
      crosshair0.setLabelOutlinePaint(paint0);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      
      boolean boolean0 = crosshair0.equals("");
      assertFalse(boolean0);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 0.0;
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = null;
      Crosshair crosshair0 = null;
      try {
        crosshair0 = new Crosshair(0.0, paint0, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(0.0);
      assertNotNull(crosshair0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      crosshair0.setVisible(true);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      
      crosshair0.setLabelAnchor(rectangleAnchor0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      
      crosshair0.hashCode();
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair1);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, crosshair1.getLabelAnchor());
      assertTrue(crosshair1.isLabelOutlineVisible());
      
      Color color0 = (Color)crosshair0.getLabelBackgroundPaint();
      assertNotNull(color0);
      assertNotSame(crosshair0, crosshair1);
      assertTrue(crosshair0.equals((Object)crosshair1));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(0, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(63, color0.getAlpha());
      assertEquals(1056964863, color0.getRGB());
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      assertNotNull(crosshair0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      
      boolean boolean0 = crosshair0.isVisible();
      assertTrue(boolean0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      
      boolean boolean1 = crosshair0.isLabelOutlineVisible();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = (StandardCrosshairLabelGenerator)crosshair0.getLabelGenerator();
      assertNotNull(standardCrosshairLabelGenerator0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals("{0}", standardCrosshairLabelGenerator0.getLabelTemplate());
      
      crosshair0.setLabelGenerator(standardCrosshairLabelGenerator0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals("{0}", standardCrosshairLabelGenerator0.getLabelTemplate());
      
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator1 = (StandardCrosshairLabelGenerator)crosshair0.getLabelGenerator();
      assertNotNull(standardCrosshairLabelGenerator1);
      assertSame(standardCrosshairLabelGenerator1, standardCrosshairLabelGenerator0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals("{0}", standardCrosshairLabelGenerator1.getLabelTemplate());
      
      Crosshair crosshair1 = new Crosshair();
      assertNotNull(crosshair1);
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      
      Font font0 = crosshair1.getLabelFont();
      assertNotNull(font0);
      assertNotSame(crosshair1, crosshair0);
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      
      crosshair0.setLabelFont(font0);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertTrue(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      assertNotNull(crosshair0);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      Color color0 = (Color)crosshair0.getPaint();
      assertNotNull(color0);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      
      crosshair0.setVisible(true);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      // Undeclared exception!
      try { 
        crosshair0.setLabelGenerator((CrosshairLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      assertNotNull(crosshair0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      
      crosshair0.hashCode();
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair(1102.990442278607, paint0, stroke0);
      assertNotNull(crosshair0);
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.addPropertyChangeListener(propertyChangeListener0);
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelPaint(paint2);
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      crosshair0.setVisible(true);
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      crosshair0.setPaint(paint1);
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Paint paint3 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("WsG8IUe'Q|", "").when(paint3).toString();
      crosshair0.setLabelPaint(paint3);
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Color color0 = (Color)crosshair0.getLabelBackgroundPaint();
      assertNotNull(color0);
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(1056964863, color0.getRGB());
      assertEquals(3, color0.getTransparency());
      assertEquals(63, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      
      Paint paint4 = crosshair0.getLabelPaint();
      assertNotNull(paint4);
      assertNotSame(paint4, paint1);
      assertNotSame(paint4, paint2);
      assertSame(paint4, paint3);
      assertNotSame(paint4, paint0);
      assertFalse(paint4.equals((Object)paint1));
      assertFalse(paint4.equals((Object)paint2));
      assertFalse(paint4.equals((Object)paint0));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(0, paint4.getTransparency());
      
      Color color1 = (Color)crosshair0.getLabelOutlinePaint();
      assertNotNull(color1);
      assertNotSame(color1, color0);
      assertFalse(color1.equals((Object)color0));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(0, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair1);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(1102.990442278607, crosshair1.getValue(), 0.01);
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertFalse(crosshair1.isLabelVisible());
      
      Font font0 = crosshair0.getLabelFont();
      assertNotNull(font0);
      assertNotSame(crosshair0, crosshair1);
      assertTrue(crosshair0.equals((Object)crosshair1));
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      crosshair0.setLabelFont(font0);
      assertNotSame(crosshair0, crosshair1);
      assertTrue(crosshair0.equals((Object)crosshair1));
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setStroke(stroke1);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      crosshair0.setLabelYOffset((-2445.3));
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-2445.3), crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Crosshair crosshair2 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair2);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair2, crosshair1);
      assertNotSame(crosshair2, crosshair0);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertTrue(crosshair2.equals((Object)crosshair0));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-2445.3), crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertTrue(crosshair2.isVisible());
      assertEquals(1102.990442278607, crosshair2.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      assertEquals((-2445.3), crosshair2.getLabelYOffset(), 0.01);
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelXOffset(), 0.01);
      
      boolean boolean0 = crosshair1.equals(crosshair2);
      assertFalse(boolean0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair2, crosshair1);
      assertNotSame(crosshair2, crosshair0);
      assertNotSame(crosshair1, crosshair0);
      assertNotSame(crosshair1, crosshair2);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertTrue(crosshair2.equals((Object)crosshair0));
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertFalse(crosshair1.equals((Object)crosshair2));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-2445.3), crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertTrue(crosshair2.isVisible());
      assertEquals(1102.990442278607, crosshair2.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      assertEquals((-2445.3), crosshair2.getLabelYOffset(), 0.01);
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(1102.990442278607, crosshair1.getValue(), 0.01);
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertFalse(crosshair1.isLabelVisible());
      
      boolean boolean1 = crosshair0.equals(crosshair1);
      assertFalse(boolean1);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertNotSame(crosshair1, crosshair2);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair0.equals((Object)crosshair2));
      assertTrue(boolean1 == boolean0);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertFalse(crosshair1.equals((Object)crosshair2));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-2445.3), crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(1102.990442278607, crosshair1.getValue(), 0.01);
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertFalse(crosshair1.isLabelVisible());
      
      boolean boolean2 = crosshair0.equals(crosshair1);
      assertFalse(boolean2);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertNotSame(crosshair1, crosshair2);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair0.equals((Object)crosshair2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertFalse(crosshair1.equals((Object)crosshair2));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-2445.3), crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(1102.990442278607, crosshair1.getValue(), 0.01);
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertFalse(crosshair1.isLabelVisible());
      
      crosshair0.hashCode();
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair0.equals((Object)crosshair2));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-2445.3), crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      RectangleAnchor rectangleAnchor0 = crosshair0.getLabelAnchor();
      assertEquals(RectangleAnchor.BOTTOM_LEFT, rectangleAnchor0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair0.equals((Object)crosshair2));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-2445.3), crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      
      Paint paint5 = crosshair0.getLabelPaint();
      assertNotNull(paint5);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(paint5, paint0);
      assertSame(paint5, paint4);
      assertNotSame(paint5, paint1);
      assertSame(paint5, paint3);
      assertNotSame(paint5, paint2);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair0.equals((Object)crosshair2));
      assertFalse(paint5.equals((Object)paint0));
      assertFalse(paint5.equals((Object)paint1));
      assertFalse(paint5.equals((Object)paint2));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-2445.3), crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(0, paint5.getTransparency());
      
      Font font1 = crosshair0.getLabelFont();
      assertNotNull(font1);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertSame(font1, font0);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair0.equals((Object)crosshair2));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-2445.3), crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(12, font1.getSize());
      assertEquals(12.0F, font1.getSize2D(), 0.01F);
      assertEquals(0, font1.getStyle());
      assertTrue(font1.isPlain());
      assertFalse(font1.isItalic());
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.hasUniformLineMetrics());
      assertEquals("Tahoma", font1.getName());
      assertFalse(font1.isBold());
      assertFalse(font1.isTransformed());
      
      Crosshair crosshair3 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair3);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair3);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair3, crosshair0);
      assertNotSame(crosshair3, crosshair1);
      assertNotSame(crosshair3, crosshair2);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair3.equals((Object)crosshair1));
      assertTrue(crosshair3.equals((Object)crosshair0));
      assertTrue(crosshair3.equals((Object)crosshair2));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-2445.3), crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals((-2445.3), crosshair3.getLabelYOffset(), 0.01);
      assertTrue(crosshair3.isLabelOutlineVisible());
      assertTrue(crosshair3.isVisible());
      assertFalse(crosshair3.isLabelVisible());
      assertEquals(3.0, crosshair3.getLabelXOffset(), 0.01);
      assertEquals(1102.990442278607, crosshair3.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair3.getLabelAnchor());
      
      RectangleAnchor rectangleAnchor1 = crosshair0.getLabelAnchor();
      assertEquals(RectangleAnchor.BOTTOM_LEFT, rectangleAnchor1);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair3);
      assertNotSame(crosshair0, crosshair1);
      assertSame(rectangleAnchor1, rectangleAnchor0);
      assertTrue(crosshair0.equals((Object)crosshair3));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair0.equals((Object)crosshair2));
      assertTrue(crosshair0.isVisible());
      assertEquals(1102.990442278607, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals((-2445.3), crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor1.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("h-R").when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair(2401.342276958875, paint0, stroke0);
      assertNotNull(crosshair0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(2401.342276958875, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.removePropertyChangeListener(propertyChangeListener0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(2401.342276958875, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Font font0 = crosshair0.getLabelFont();
      assertNotNull(font0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(2401.342276958875, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      
      Paint paint1 = crosshair0.getPaint();
      assertNotNull(paint1);
      assertSame(paint1, paint0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(2401.342276958875, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(0, paint1.getTransparency());
      
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair1);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(2401.342276958875, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(2401.342276958875, crosshair1.getValue(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertFalse(crosshair1.isLabelVisible());
      
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertTrue(boolean0);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertTrue(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(2401.342276958875, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(2401.342276958875, crosshair1.getValue(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertFalse(crosshair1.isLabelVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("]").when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair(0.0, paint0, stroke0);
      assertNotNull(crosshair0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      Crosshair crosshair1 = new Crosshair(0.0);
      assertNotNull(crosshair1);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair1.setPaint(paint1);
      assertNotSame(crosshair1, crosshair0);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertFalse(boolean0);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelOutlineStroke(stroke1);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      Font font0 = crosshair0.getLabelFont();
      assertNotNull(font0);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      
      crosshair1.setLabelFont(font0);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      
      boolean boolean1 = crosshair1.equals(crosshair0);
      assertFalse(boolean1);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      
      crosshair1.setLabelXOffset(2943.2258);
      assertNotSame(crosshair1, crosshair0);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertEquals(2943.2258, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      
      boolean boolean2 = crosshair0.isLabelOutlineVisible();
      assertTrue(boolean2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      boolean boolean3 = crosshair0.isLabelOutlineVisible();
      assertTrue(boolean3);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      Crosshair crosshair2 = (Crosshair)crosshair1.clone();
      assertNotNull(crosshair2);
      assertNotSame(crosshair1, crosshair0);
      assertNotSame(crosshair1, crosshair2);
      assertNotSame(crosshair2, crosshair1);
      assertNotSame(crosshair2, crosshair0);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertFalse(crosshair2.equals((Object)crosshair0));
      assertTrue(crosshair2.equals((Object)crosshair1));
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertEquals(2943.2258, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertEquals(0.0, crosshair2.getValue(), 0.01);
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelYOffset(), 0.01);
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      assertTrue(crosshair2.isVisible());
      assertEquals(2943.2258, crosshair2.getLabelXOffset(), 0.01);
      
      Paint paint2 = crosshair0.getPaint();
      assertNotNull(paint2);
      assertSame(paint2, paint0);
      assertNotSame(paint2, paint1);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(paint2.equals((Object)paint1));
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(0, paint2.getTransparency());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = (StandardCrosshairLabelGenerator)crosshair0.getLabelGenerator();
      assertNotNull(standardCrosshairLabelGenerator0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals("{0}", standardCrosshairLabelGenerator0.getLabelTemplate());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      crosshair1.setLabelGenerator(standardCrosshairLabelGenerator0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertNotSame(crosshair1, crosshair2);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair1.equals((Object)crosshair2));
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertEquals("{0}", standardCrosshairLabelGenerator0.getLabelTemplate());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertEquals(2943.2258, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      
      Font font1 = crosshair0.getLabelFont();
      assertNotNull(font1);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertSame(font1, font0);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(12, font1.getSize());
      assertEquals(12.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.isItalic());
      assertEquals(0, font1.getStyle());
      assertTrue(font1.isPlain());
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.isBold());
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isTransformed());
      assertEquals("Tahoma", font1.getName());
      
      crosshair0.setLabelFont(font1);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertSame(font1, font0);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(12, font1.getSize());
      assertEquals(12.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.isItalic());
      assertEquals(0, font1.getStyle());
      assertTrue(font1.isPlain());
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.isBold());
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isTransformed());
      assertEquals("Tahoma", font1.getName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      assertNotNull(crosshair0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      
      double double0 = crosshair0.getLabelXOffset();
      assertEquals(3.0, double0, 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair0.setValue((-897.7372));
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals((-897.7372), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      crosshair0.setLabelXOffset(0.0);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals((-897.7372), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      crosshair0.setLabelPaint(paint0);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals((-897.7372), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.removePropertyChangeListener(propertyChangeListener0);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals((-897.7372), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      crosshair0.hashCode();
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals((-897.7372), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      Color color0 = (Color)crosshair0.getLabelBackgroundPaint();
      assertNotNull(color0);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals((-897.7372), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(255, color0.getBlue());
      assertEquals(63, color0.getAlpha());
      assertEquals(1056964863, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(3, color0.getTransparency());
      
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.addPropertyChangeListener(propertyChangeListener1);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals((-897.7372), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      
      crosshair0.setLabelYOffset(0.0);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals((-897.7372), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      
      Font font0 = crosshair0.getLabelFont();
      assertNotNull(font0);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals((-897.7372), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setStroke(stroke0);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals((-897.7372), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-576.371621352254));
      assertNotNull(crosshair0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelOutlineStroke(stroke0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair1);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertFalse(crosshair1.isLabelVisible());
      assertEquals((-576.371621352254), crosshair1.getValue(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelOutlineStroke(stroke1);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      Stroke stroke2 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setStroke(stroke2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      crosshair0.setLabelYOffset((-2121.361007575327));
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals((-2121.361007575327), crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelOutlinePaint(paint0);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals((-2121.361007575327), crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.addPropertyChangeListener(propertyChangeListener0);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals((-2121.361007575327), crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      Stroke stroke3 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelOutlineStroke(stroke3);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals((-2121.361007575327), crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      crosshair0.setVisible(true);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals((-2121.361007575327), crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      crosshair0.setLabelYOffset((-2121.361007575327));
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals((-2121.361007575327), crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      crosshair0.setLabelOutlineVisible(true);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals((-2121.361007575327), crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      Font font0 = crosshair0.getLabelFont();
      assertNotNull(font0);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals((-2121.361007575327), crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      
      Crosshair crosshair2 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair2);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair2, crosshair1);
      assertNotSame(crosshair2, crosshair0);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertTrue(crosshair2.equals((Object)crosshair0));
      assertEquals((-2121.361007575327), crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals((-576.371621352254), crosshair2.getValue(), 0.01);
      assertTrue(crosshair2.isVisible());
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelXOffset(), 0.01);
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertEquals((-2121.361007575327), crosshair2.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      
      Color color0 = (Color)crosshair0.getLabelPaint();
      assertNotNull(color0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertTrue(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals((-2121.361007575327), crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = (StandardCrosshairLabelGenerator)crosshair0.getLabelGenerator();
      assertNotNull(standardCrosshairLabelGenerator0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertTrue(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals((-2121.361007575327), crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals("{0}", standardCrosshairLabelGenerator0.getLabelTemplate());
      
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator1 = (StandardCrosshairLabelGenerator)crosshair1.getLabelGenerator();
      assertNotNull(standardCrosshairLabelGenerator1);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertNotSame(crosshair1, crosshair2);
      assertSame(standardCrosshairLabelGenerator1, standardCrosshairLabelGenerator0);
      assertTrue(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertFalse(crosshair1.equals((Object)crosshair2));
      assertEquals((-2121.361007575327), crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-576.371621352254), crosshair0.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertFalse(crosshair1.isLabelVisible());
      assertEquals((-576.371621352254), crosshair1.getValue(), 0.01);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals("{0}", standardCrosshairLabelGenerator1.getLabelTemplate());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair((-2599.121), paint0, stroke0);
      assertNotNull(crosshair0);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-2599.121), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.removePropertyChangeListener(propertyChangeListener0);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-2599.121), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Crosshair crosshair1 = new Crosshair(5424.0);
      assertNotNull(crosshair1);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(5424.0, crosshair1.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertFalse(boolean0);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-2599.121), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(5424.0, crosshair1.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair1.setLabelPaint(paint1);
      assertNotSame(crosshair1, crosshair0);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(5424.0, crosshair1.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair0.setPaint(paint2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-2599.121), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      boolean boolean1 = crosshair0.isLabelOutlineVisible();
      assertTrue(boolean1);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(boolean1 == boolean0);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-2599.121), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Paint paint3 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair1.setLabelBackgroundPaint(paint3);
      assertNotSame(crosshair1, crosshair0);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(5424.0, crosshair1.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      
      boolean boolean2 = crosshair1.isLabelVisible();
      assertFalse(boolean2);
      assertNotSame(crosshair1, crosshair0);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertTrue(crosshair1.isVisible());
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertEquals(5424.0, crosshair1.getValue(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      assertNotNull(crosshair0);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelVisible(false);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair1);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair1, crosshair0);
      assertTrue(crosshair1.equals((Object)crosshair0));
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertFalse(crosshair1.isLabelVisible());
      assertTrue(crosshair1.isLabelOutlineVisible());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair1.getLabelAnchor());
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      
      crosshair0.setLabelOutlinePaint(paint0);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(paint1).toString();
      crosshair0.setLabelPaint(paint1);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Crosshair crosshair2 = new Crosshair((-2010.136));
      assertNotNull(crosshair2);
      assertFalse(crosshair2.equals((Object)crosshair0));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelXOffset(), 0.01);
      assertEquals((-2010.136), crosshair2.getValue(), 0.01);
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertTrue(crosshair2.isVisible());
      assertEquals(3.0, crosshair2.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      
      Font font0 = crosshair2.getLabelFont();
      assertNotNull(font0);
      assertNotSame(crosshair2, crosshair0);
      assertNotSame(crosshair2, crosshair1);
      assertFalse(crosshair2.equals((Object)crosshair0));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelXOffset(), 0.01);
      assertEquals((-2010.136), crosshair2.getValue(), 0.01);
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertTrue(crosshair2.isVisible());
      assertEquals(3.0, crosshair2.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      
      crosshair0.setVisible(false);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      crosshair0.setLabelFont(font0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair2, crosshair0);
      assertNotSame(crosshair2, crosshair1);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair2.equals((Object)crosshair0));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelXOffset(), 0.01);
      assertEquals((-2010.136), crosshair2.getValue(), 0.01);
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertTrue(crosshair2.isVisible());
      assertEquals(3.0, crosshair2.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      
      Crosshair crosshair3 = (Crosshair)crosshair0.clone();
      assertNotNull(crosshair3);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair0, crosshair3);
      assertNotSame(crosshair3, crosshair1);
      assertNotSame(crosshair3, crosshair0);
      assertNotSame(crosshair3, crosshair2);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair3.equals((Object)crosshair1));
      assertTrue(crosshair3.equals((Object)crosshair0));
      assertFalse(crosshair3.equals((Object)crosshair2));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair3.getLabelXOffset(), 0.01);
      assertFalse(crosshair3.isVisible());
      assertEquals(0.0, crosshair3.getValue(), 0.01);
      assertTrue(crosshair3.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair3.getLabelAnchor());
      assertEquals(3.0, crosshair3.getLabelYOffset(), 0.01);
      assertFalse(crosshair3.isLabelVisible());
      
      boolean boolean0 = crosshair0.equals(crosshair3);
      assertTrue(boolean0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair0, crosshair3);
      assertNotSame(crosshair3, crosshair1);
      assertNotSame(crosshair3, crosshair0);
      assertNotSame(crosshair3, crosshair2);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertTrue(crosshair0.equals((Object)crosshair3));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair3.equals((Object)crosshair1));
      assertTrue(crosshair3.equals((Object)crosshair0));
      assertFalse(crosshair3.equals((Object)crosshair2));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair3.getLabelXOffset(), 0.01);
      assertFalse(crosshair3.isVisible());
      assertEquals(0.0, crosshair3.getValue(), 0.01);
      assertTrue(crosshair3.isLabelOutlineVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair3.getLabelAnchor());
      assertEquals(3.0, crosshair3.getLabelYOffset(), 0.01);
      assertFalse(crosshair3.isLabelVisible());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.addPropertyChangeListener(propertyChangeListener0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair0, crosshair3);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertTrue(crosshair0.equals((Object)crosshair3));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Paint paint2 = crosshair0.getLabelPaint();
      assertNotNull(paint2);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair0, crosshair3);
      assertSame(paint2, paint1);
      assertNotSame(paint2, paint0);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertTrue(crosshair0.equals((Object)crosshair3));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(paint2.equals((Object)paint0));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(0, paint2.getTransparency());
      
      double double0 = crosshair0.getValue();
      assertEquals(0.0, double0, 0.01);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair0, crosshair3);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertTrue(crosshair0.equals((Object)crosshair3));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelOutlineStroke(stroke0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair0, crosshair3);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair0.equals((Object)crosshair3));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      
      crosshair0.setLabelFont(font0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair0, crosshair3);
      assertNotSame(crosshair2, crosshair0);
      assertNotSame(crosshair2, crosshair1);
      assertNotSame(crosshair2, crosshair3);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair0.equals((Object)crosshair3));
      assertFalse(crosshair2.equals((Object)crosshair0));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertFalse(crosshair2.equals((Object)crosshair3));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelXOffset(), 0.01);
      assertEquals((-2010.136), crosshair2.getValue(), 0.01);
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertTrue(crosshair2.isVisible());
      assertEquals(3.0, crosshair2.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      
      Color color0 = (Color)crosshair2.getLabelOutlinePaint();
      assertNotNull(color0);
      assertNotSame(crosshair2, crosshair0);
      assertNotSame(crosshair2, crosshair1);
      assertNotSame(crosshair2, crosshair3);
      assertFalse(crosshair2.equals((Object)crosshair0));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertFalse(crosshair2.equals((Object)crosshair3));
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelXOffset(), 0.01);
      assertEquals((-2010.136), crosshair2.getValue(), 0.01);
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertTrue(crosshair2.isVisible());
      assertEquals(3.0, crosshair2.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      
      BasicStroke basicStroke0 = (BasicStroke)crosshair0.getStroke();
      assertNotNull(basicStroke0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair0, crosshair3);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair0.equals((Object)crosshair3));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      Paint paint3 = crosshair0.getLabelPaint();
      assertNotNull(paint3);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair0, crosshair3);
      assertSame(paint3, paint1);
      assertNotSame(paint3, paint0);
      assertSame(paint3, paint2);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair0.equals((Object)crosshair3));
      assertFalse(paint3.equals((Object)paint0));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(0, paint3.getTransparency());
      
      boolean boolean1 = crosshair2.isLabelVisible();
      assertFalse(boolean1);
      assertNotSame(crosshair2, crosshair0);
      assertNotSame(crosshair2, crosshair1);
      assertNotSame(crosshair2, crosshair3);
      assertFalse(boolean1 == boolean0);
      assertFalse(crosshair2.equals((Object)crosshair0));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertFalse(crosshair2.equals((Object)crosshair3));
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelXOffset(), 0.01);
      assertEquals((-2010.136), crosshair2.getValue(), 0.01);
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertTrue(crosshair2.isVisible());
      assertEquals(3.0, crosshair2.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      
      double double1 = crosshair2.getValue();
      assertEquals((-2010.136), double1, 0.01);
      assertNotSame(crosshair2, crosshair0);
      assertNotSame(crosshair2, crosshair1);
      assertNotSame(crosshair2, crosshair3);
      assertFalse(crosshair2.equals((Object)crosshair0));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertFalse(crosshair2.equals((Object)crosshair3));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelXOffset(), 0.01);
      assertEquals((-2010.136), crosshair2.getValue(), 0.01);
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertTrue(crosshair2.isVisible());
      assertEquals(3.0, crosshair2.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      
      boolean boolean2 = crosshair2.equals(font0);
      assertFalse(boolean2);
      assertNotSame(crosshair2, crosshair0);
      assertNotSame(crosshair2, crosshair1);
      assertNotSame(crosshair2, crosshair3);
      assertFalse(crosshair2.equals((Object)crosshair0));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertFalse(crosshair2.equals((Object)crosshair3));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelXOffset(), 0.01);
      assertEquals((-2010.136), crosshair2.getValue(), 0.01);
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertTrue(crosshair2.isVisible());
      assertEquals(3.0, crosshair2.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      
      Font font1 = crosshair2.getLabelFont();
      assertNotNull(font1);
      assertNotSame(crosshair2, crosshair0);
      assertNotSame(crosshair2, crosshair1);
      assertNotSame(crosshair2, crosshair3);
      assertSame(font1, font0);
      assertFalse(crosshair2.equals((Object)crosshair0));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertFalse(crosshair2.equals((Object)crosshair3));
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelXOffset(), 0.01);
      assertEquals((-2010.136), crosshair2.getValue(), 0.01);
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertTrue(crosshair2.isVisible());
      assertEquals(3.0, crosshair2.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      assertTrue(font1.isPlain());
      assertFalse(font1.isBold());
      assertEquals("Tahoma", font1.getName());
      assertFalse(font1.hasUniformLineMetrics());
      assertEquals(12, font1.getSize());
      assertFalse(font1.hasLayoutAttributes());
      assertEquals(12.0F, font1.getSize2D(), 0.01F);
      assertEquals(0, font1.getStyle());
      assertFalse(font1.isTransformed());
      assertFalse(font1.isItalic());
      
      double double2 = crosshair2.getValue();
      assertEquals((-2010.136), double2, 0.01);
      assertNotSame(crosshair2, crosshair0);
      assertNotSame(crosshair2, crosshair1);
      assertNotSame(crosshair2, crosshair3);
      assertFalse(crosshair2.equals((Object)crosshair0));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertFalse(crosshair2.equals((Object)crosshair3));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelXOffset(), 0.01);
      assertEquals((-2010.136), crosshair2.getValue(), 0.01);
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertTrue(crosshair2.isVisible());
      assertEquals(3.0, crosshair2.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
      
      crosshair0.setLabelPaint(paint2);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair0, crosshair3);
      assertSame(paint2, paint1);
      assertNotSame(paint2, paint0);
      assertSame(paint2, paint3);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair0.equals((Object)crosshair3));
      assertFalse(paint2.equals((Object)paint0));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(0, paint2.getTransparency());
      
      Color color1 = (Color)crosshair0.getPaint();
      assertNotNull(color1);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair0, crosshair3);
      assertSame(color1, color0);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair0.equals((Object)crosshair3));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getGreen());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getRed());
      
      crosshair2.setStroke(basicStroke0);
      assertNotSame(crosshair0, crosshair2);
      assertNotSame(crosshair0, crosshair1);
      assertNotSame(crosshair0, crosshair3);
      assertNotSame(crosshair2, crosshair0);
      assertNotSame(crosshair2, crosshair1);
      assertNotSame(crosshair2, crosshair3);
      assertFalse(crosshair0.equals((Object)crosshair2));
      assertFalse(crosshair0.equals((Object)crosshair1));
      assertFalse(crosshair0.equals((Object)crosshair3));
      assertFalse(crosshair2.equals((Object)crosshair0));
      assertFalse(crosshair2.equals((Object)crosshair1));
      assertFalse(crosshair2.equals((Object)crosshair3));
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertFalse(crosshair2.isLabelVisible());
      assertEquals(3.0, crosshair2.getLabelXOffset(), 0.01);
      assertEquals((-2010.136), crosshair2.getValue(), 0.01);
      assertTrue(crosshair2.isLabelOutlineVisible());
      assertTrue(crosshair2.isVisible());
      assertEquals(3.0, crosshair2.getLabelYOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair2.getLabelAnchor());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair0 = new Crosshair(1404.19624662868, paint0, stroke0);
      assertNotNull(crosshair0);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(1404.19624662868, crosshair0.getValue(), 0.01);
      
      crosshair0.setValue(1404.19624662868);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(1404.19624662868, crosshair0.getValue(), 0.01);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.removePropertyChangeListener(propertyChangeListener0);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(1404.19624662868, crosshair0.getValue(), 0.01);
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelOutlineStroke(stroke1);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(1404.19624662868, crosshair0.getValue(), 0.01);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      crosshair0.setLabelYOffset(1404.19624662868);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(1404.19624662868, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(1404.19624662868, crosshair0.getValue(), 0.01);
      
      crosshair0.setLabelAnchor(rectangleAnchor0);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.TOP_RIGHT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(1404.19624662868, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(1404.19624662868, crosshair0.getValue(), 0.01);
      
      crosshair0.setLabelBackgroundPaint((Paint) null);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.TOP_RIGHT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(1404.19624662868, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(1404.19624662868, crosshair0.getValue(), 0.01);
      
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = (StandardCrosshairLabelGenerator)crosshair0.getLabelGenerator();
      assertNotNull(standardCrosshairLabelGenerator0);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.TOP_RIGHT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(1404.19624662868, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(1404.19624662868, crosshair0.getValue(), 0.01);
      assertEquals("{0}", standardCrosshairLabelGenerator0.getLabelTemplate());
      
      boolean boolean0 = crosshair0.isVisible();
      assertTrue(boolean0);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.TOP_RIGHT, crosshair0.getLabelAnchor());
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(1404.19624662868, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(1404.19624662868, crosshair0.getValue(), 0.01);
      
      // Undeclared exception!
      try { 
        crosshair0.setLabelOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      assertNotNull(crosshair0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      
      crosshair0.setLabelXOffset((-3245.0));
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-3245.0), crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = crosshair0.getLabelAnchor();
      assertEquals(RectangleAnchor.BOTTOM_LEFT, rectangleAnchor0);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, crosshair0.getLabelAnchor());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-3245.0), crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isLabelOutlineVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      crosshair0.setStroke(stroke0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      
      crosshair0.setLabelXOffset(2.0);
      crosshair0.setLabelXOffset(2.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.setLabelBackgroundPaint((Paint) null);
      crosshair0.removePropertyChangeListener(propertyChangeListener0);
      crosshair0.setPaint((Paint) null);
      crosshair0.getLabelYOffset();
      crosshair0.getLabelXOffset();
      CrosshairLabelGenerator crosshairLabelGenerator0 = crosshair0.getLabelGenerator();
      crosshair0.setPaint((Paint) null);
      crosshair0.equals(crosshairLabelGenerator0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      crosshair0.setLabelAnchor(rectangleAnchor0);
      Stroke stroke1 = crosshair0.getLabelOutlineStroke();
      Font font0 = crosshair0.getLabelFont();
      crosshair0.setLabelFont(font0);
      crosshair0.getLabelGenerator();
      crosshair0.getLabelOutlinePaint();
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.addPropertyChangeListener(propertyChangeListener1);
      PropertyChangeListener propertyChangeListener2 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      crosshair0.addPropertyChangeListener(propertyChangeListener2);
      crosshair0.setLabelOutlineStroke(stroke1);
      assertEquals(2.0, crosshair0.getLabelXOffset(), 0.01);
  }
}
