/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:03:09 GMT 2023
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.PlotChangeListener;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.WaferMapDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WaferMapPlot_ESTest extends WaferMapPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      WaferMapPlot waferMapPlot1 = new WaferMapPlot();
      waferMapPlot1.getBackgroundImage();
      waferMapPlot0.setBackgroundImage((Image) null);
      waferMapPlot0.getDataset();
      WaferMapRenderer waferMapRenderer0 = mock(WaferMapRenderer.class, new ViolatedAssumptionAnswer());
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      waferMapPlot0.datasetChanged(datasetChangeEvent0);
      waferMapPlot0.setRenderer(waferMapRenderer0);
      waferMapPlot0.setDataset((WaferMapDataset) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D0).getClip();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0, 0.0).when(rectangle2D0).getX();
      doReturn(0.0, 0.0).when(rectangle2D0).getY();
      // Undeclared exception!
      try { 
        waferMapPlot0.drawChipGrid(graphics2D0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = mock(WaferMapDataset.class, new ViolatedAssumptionAnswer());
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      assertNotNull(waferMapPlot0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      WaferMapDataset waferMapDataset1 = mock(WaferMapDataset.class, new ViolatedAssumptionAnswer());
      WaferMapPlot waferMapPlot1 = new WaferMapPlot();
      assertNotNull(waferMapPlot1);
      assertTrue(waferMapPlot1.isNotify());
      assertEquals(1.0F, waferMapPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot1.isSubplot());
      assertTrue(waferMapPlot1.isOutlineVisible());
      assertEquals("WMAP_Plot", waferMapPlot1.getPlotType());
      assertFalse(waferMapPlot1.fetchElementHintingFlag());
      assertEquals(0.5F, waferMapPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot1.getNoDataMessage());
      assertEquals(15, waferMapPlot1.getBackgroundImageAlignment());
      assertTrue(waferMapPlot1.equals((Object)waferMapPlot0));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      DrawingSupplier drawingSupplier0 = waferMapPlot1.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
      assertTrue(waferMapPlot1.isNotify());
      assertEquals(1.0F, waferMapPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot1.isSubplot());
      assertTrue(waferMapPlot1.isOutlineVisible());
      assertEquals("WMAP_Plot", waferMapPlot1.getPlotType());
      assertFalse(waferMapPlot1.fetchElementHintingFlag());
      assertEquals(0.5F, waferMapPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot1.getNoDataMessage());
      assertEquals(15, waferMapPlot1.getBackgroundImageAlignment());
      assertTrue(waferMapPlot1.equals((Object)waferMapPlot0));
      assertNotSame(waferMapPlot1, waferMapPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      waferMapPlot0.setDrawingSupplier(drawingSupplier0, false);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot1.isNotify());
      assertEquals(1.0F, waferMapPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot1.isSubplot());
      assertTrue(waferMapPlot1.isOutlineVisible());
      assertEquals("WMAP_Plot", waferMapPlot1.getPlotType());
      assertFalse(waferMapPlot1.fetchElementHintingFlag());
      assertEquals(0.5F, waferMapPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot1.getNoDataMessage());
      assertEquals(15, waferMapPlot1.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.equals((Object)waferMapPlot1));
      assertTrue(waferMapPlot1.equals((Object)waferMapPlot0));
      assertNotSame(waferMapPlot0, waferMapPlot1);
      assertNotSame(waferMapPlot1, waferMapPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      WaferMapRenderer waferMapRenderer0 = mock(WaferMapRenderer.class, new ViolatedAssumptionAnswer());
      WaferMapPlot waferMapPlot2 = new WaferMapPlot(waferMapDataset1, waferMapRenderer0);
      assertNotNull(waferMapPlot2);
      assertEquals(1.0F, waferMapPlot2.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot2.getNoDataMessage());
      assertTrue(waferMapPlot2.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot2.getPlotType());
      assertEquals(15, waferMapPlot2.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot2.fetchElementHintingFlag());
      assertTrue(waferMapPlot2.isOutlineVisible());
      assertFalse(waferMapPlot2.isSubplot());
      assertEquals(1.0F, waferMapPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot2.equals((Object)waferMapPlot1));
      assertTrue(waferMapPlot2.equals((Object)waferMapPlot0));
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Integer integer0 = (Integer)Plot.ZERO;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = waferMapPlot2.equals(integer0);
      assertFalse(boolean0);
      assertEquals(1.0F, waferMapPlot2.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot2.getNoDataMessage());
      assertTrue(waferMapPlot2.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot2.getPlotType());
      assertEquals(15, waferMapPlot2.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot2.fetchElementHintingFlag());
      assertTrue(waferMapPlot2.isOutlineVisible());
      assertFalse(waferMapPlot2.isSubplot());
      assertEquals(1.0F, waferMapPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot2.equals((Object)waferMapPlot1));
      assertTrue(waferMapPlot2.equals((Object)waferMapPlot0));
      assertNotSame(waferMapPlot2, waferMapPlot0);
      assertNotSame(waferMapPlot2, waferMapPlot1);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      waferMapPlot0.setParent(waferMapPlot2);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertTrue(waferMapPlot0.isSubplot());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, waferMapPlot2.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot2.getNoDataMessage());
      assertTrue(waferMapPlot2.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot2.getPlotType());
      assertEquals(15, waferMapPlot2.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot2.fetchElementHintingFlag());
      assertTrue(waferMapPlot2.isOutlineVisible());
      assertFalse(waferMapPlot2.isSubplot());
      assertEquals(1.0F, waferMapPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.equals((Object)waferMapPlot1));
      assertTrue(waferMapPlot0.equals((Object)waferMapPlot2));
      assertTrue(waferMapPlot2.equals((Object)waferMapPlot1));
      assertTrue(waferMapPlot2.equals((Object)waferMapPlot0));
      assertNotSame(waferMapPlot0, waferMapPlot1);
      assertNotSame(waferMapPlot0, waferMapPlot2);
      assertNotSame(waferMapPlot2, waferMapPlot0);
      assertNotSame(waferMapPlot2, waferMapPlot1);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)waferMapPlot0.getWaferEdge(rectangle2D0);
      assertNotNull(ellipse2D_Double0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertTrue(waferMapPlot0.isSubplot());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertTrue(waferMapPlot0.equals((Object)waferMapPlot1));
      assertTrue(waferMapPlot0.equals((Object)waferMapPlot2));
      assertNotSame(waferMapPlot0, waferMapPlot1);
      assertNotSame(waferMapPlot0, waferMapPlot2);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01);
      
      String string0 = waferMapPlot0.getPlotType();
      assertNotNull(string0);
      assertEquals("WMAP_Plot", string0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertTrue(waferMapPlot0.isSubplot());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.equals((Object)waferMapPlot1));
      assertTrue(waferMapPlot0.equals((Object)waferMapPlot2));
      assertNotSame(waferMapPlot0, waferMapPlot1);
      assertNotSame(waferMapPlot0, waferMapPlot2);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        waferMapPlot2.drawWaferEdge(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = mock(WaferMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(waferMapDataset0).getChipSpace();
      doReturn((Number) null, (Number) null, (Number) null, (Number) null).when(waferMapDataset0).getChipValue(anyInt() , anyInt());
      doReturn(0).when(waferMapDataset0).getMaxChipX();
      doReturn(0).when(waferMapDataset0).getMaxChipY();
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      assertNotNull(waferMapPlot0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      WaferMapRenderer waferMapRenderer0 = mock(WaferMapRenderer.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItemCollection) null).when(waferMapRenderer0).getLegendCollection();
      RendererChangeEvent rendererChangeEvent0 = mock(RendererChangeEvent.class, new ViolatedAssumptionAnswer());
      waferMapPlot0.rendererChanged(rendererChangeEvent0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = waferMapPlot0.getChart();
      assertNull(jFreeChart0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      waferMapPlot0.addChangeListener((PlotChangeListener) null);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      waferMapPlot0.setRenderer(waferMapRenderer0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      String string0 = waferMapPlot0.getPlotType();
      assertNotNull(string0);
      assertEquals("WMAP_Plot", string0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D0).getClip();
      waferMapPlot0.setOutlineStroke(waferMapRenderer0.DEFAULT_STROKE);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0, 0.0).when(rectangle2D0).getX();
      doReturn(0.0, 0.0).when(rectangle2D0).getY();
      waferMapPlot0.drawChipGrid(graphics2D0, rectangle2D0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      String string1 = waferMapPlot0.getPlotType();
      assertNotNull(string1);
      assertEquals("WMAP_Plot", string1);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      LegendItemCollection legendItemCollection0 = waferMapPlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      assertNotNull(waferMapPlot0);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color0 = (Color)WaferMapPlot.DEFAULT_GRIDLINE_PAINT;
      assertNotNull(color0);
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getRed());
      
      waferMapPlot0.setBackgroundPaint(color0);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getRed());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      // Undeclared exception!
      try { 
        waferMapPlot0.getLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      assertNotNull(waferMapPlot0);
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      assertNotNull(stackedAreaRenderer0);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getDefaultCreateEntities());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      
      BasicStroke basicStroke0 = (BasicStroke)stackedAreaRenderer0.getItemStroke(274, 10);
      assertNotNull(basicStroke0);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getDefaultCreateEntities());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      waferMapPlot0.setOutlineStroke(basicStroke0);
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getDefaultCreateEntities());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getDefaultItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      assertNotNull(waferMapRenderer0);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)waferMapRenderer0.getItemShape(10, 10);
      assertNotNull(rectangle2D_Double0);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer0.getDefaultItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisible());
      assertTrue(waferMapRenderer0.getDefaultSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getDefaultCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      
      // Undeclared exception!
      try { 
        waferMapPlot0.setRenderer(waferMapRenderer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.WaferMapRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      assertNotNull(waferMapPlot0);
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertTrue(waferMapPlot0.isNotify());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      WaferMapPlot waferMapPlot1 = new WaferMapPlot();
      assertNotNull(waferMapPlot1);
      assertEquals("WMAP_Plot", waferMapPlot1.getPlotType());
      assertEquals(1.0F, waferMapPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(waferMapPlot1.isSubplot());
      assertTrue(waferMapPlot1.isNotify());
      assertTrue(waferMapPlot1.isOutlineVisible());
      assertEquals(1.0F, waferMapPlot1.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot1.getNoDataMessage());
      assertEquals(15, waferMapPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot1.fetchElementHintingFlag());
      assertTrue(waferMapPlot1.equals((Object)waferMapPlot0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Composite) null).when(graphics2D0).getComposite();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      waferMapPlot1.fillBackground(graphics2D0, rectangle2D0, plotOrientation0);
      assertEquals("WMAP_Plot", waferMapPlot1.getPlotType());
      assertEquals(1.0F, waferMapPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(waferMapPlot1.isSubplot());
      assertTrue(waferMapPlot1.isNotify());
      assertTrue(waferMapPlot1.isOutlineVisible());
      assertEquals(1.0F, waferMapPlot1.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot1.getNoDataMessage());
      assertEquals(15, waferMapPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot1.fetchElementHintingFlag());
      assertTrue(waferMapPlot1.equals((Object)waferMapPlot0));
      assertNotSame(waferMapPlot1, waferMapPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      waferMapPlot1.setBackgroundPaint(waferMapPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertTrue(waferMapPlot0.isNotify());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot1.getPlotType());
      assertEquals(1.0F, waferMapPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(waferMapPlot1.isSubplot());
      assertTrue(waferMapPlot1.isNotify());
      assertTrue(waferMapPlot1.isOutlineVisible());
      assertEquals(1.0F, waferMapPlot1.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot1.getNoDataMessage());
      assertEquals(15, waferMapPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot1.fetchElementHintingFlag());
      assertTrue(waferMapPlot0.equals((Object)waferMapPlot1));
      assertTrue(waferMapPlot1.equals((Object)waferMapPlot0));
      assertNotSame(waferMapPlot0, waferMapPlot1);
      assertNotSame(waferMapPlot1, waferMapPlot0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      // Undeclared exception!
      try { 
        waferMapPlot1.getWaferEdge((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = mock(WaferMapDataset.class, new ViolatedAssumptionAnswer());
      WaferMapRenderer waferMapRenderer0 = mock(WaferMapRenderer.class, new ViolatedAssumptionAnswer());
      doReturn((LegendItemCollection) null).when(waferMapRenderer0).getLegendCollection();
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      assertNotNull(waferMapPlot0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      waferMapPlot0.setNoDataMessage("=OA=M3Ii;aA");
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals("=OA=M3Ii;aA", waferMapPlot0.getNoDataMessage());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      waferMapPlot0.setNoDataMessage("");
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("", waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      waferMapPlot0.setDataset((WaferMapDataset) null);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("", waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      String string0 = waferMapPlot0.getPlotType();
      assertNotNull(string0);
      assertEquals("WMAP_Plot", string0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("", waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      waferMapPlot0.draw(graphics2D0, rectangle2D0, point2D0, plotState0, plotRenderingInfo0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("", waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      LegendItemCollection legendItemCollection0 = waferMapPlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("", waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      WaferMapRenderer waferMapRenderer1 = mock(WaferMapRenderer.class, new ViolatedAssumptionAnswer());
      waferMapPlot0.setRenderer(waferMapRenderer1);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertFalse(waferMapPlot0.isSubplot());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("", waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      assertNotNull(waferMapPlot0);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D0).getClip();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0, 0.0).when(rectangle2D0).getX();
      doReturn(0.0, 0.0).when(rectangle2D0).getY();
      // Undeclared exception!
      try { 
        waferMapPlot0.drawChipGrid(graphics2D0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      assertNotNull(waferMapPlot0);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      DrawingSupplier drawingSupplier0 = waferMapPlot0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      waferMapPlot0.setDrawingSupplier(drawingSupplier0, false);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      RendererChangeEvent rendererChangeEvent0 = mock(RendererChangeEvent.class, new ViolatedAssumptionAnswer());
      waferMapPlot0.rendererChanged(rendererChangeEvent0);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)waferMapPlot0.getWaferEdge(rectangle2D0);
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01);
      
      String string0 = waferMapPlot0.getPlotType();
      assertNotNull(string0);
      assertEquals("WMAP_Plot", string0);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      RendererChangeEvent rendererChangeEvent1 = mock(RendererChangeEvent.class, new ViolatedAssumptionAnswer());
      waferMapPlot0.rendererChanged(rendererChangeEvent1);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      RendererChangeEvent rendererChangeEvent2 = mock(RendererChangeEvent.class, new ViolatedAssumptionAnswer());
      waferMapPlot0.rendererChanged(rendererChangeEvent2);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D1).getHeight();
      doReturn(0.0).when(rectangle2D1).getWidth();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      waferMapPlot0.draw(graphics2D0, rectangle2D1, point2D0, plotState0, plotRenderingInfo0);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertTrue(waferMapPlot0.isNotify());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      assertNotNull(waferMapPlot0);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      waferMapPlot0.setNoDataMessage("###<>DPNFwm6");
      assertEquals("###<>DPNFwm6", waferMapPlot0.getNoDataMessage());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      WaferMapDataset waferMapDataset0 = mock(WaferMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn((DatasetGroup) null).when(waferMapDataset0).getGroup();
      doReturn(0.0).when(waferMapDataset0).getChipSpace();
      doReturn((Number) null, (Number) null, (Number) null, (Number) null).when(waferMapDataset0).getChipValue(anyInt() , anyInt());
      doReturn(0).when(waferMapDataset0).getMaxChipX();
      doReturn(0).when(waferMapDataset0).getMaxChipY();
      waferMapPlot0.setDataset(waferMapDataset0);
      assertEquals("###<>DPNFwm6", waferMapPlot0.getNoDataMessage());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D0).getClip();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0, 0.0).when(rectangle2D0).getX();
      doReturn(0.0, 0.0).when(rectangle2D0).getY();
      waferMapPlot0.drawChipGrid(graphics2D0, rectangle2D0);
      assertEquals("###<>DPNFwm6", waferMapPlot0.getNoDataMessage());
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertFalse(waferMapPlot0.isSubplot());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(waferMapPlot0.fetchElementHintingFlag());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      WaferMapDataset waferMapDataset1 = mock(WaferMapDataset.class, new ViolatedAssumptionAnswer());
      WaferMapRenderer waferMapRenderer0 = mock(WaferMapRenderer.class, new ViolatedAssumptionAnswer());
      WaferMapPlot waferMapPlot1 = new WaferMapPlot(waferMapDataset1, waferMapRenderer0);
      assertNotNull(waferMapPlot1);
      assertFalse(waferMapPlot1.isSubplot());
      assertEquals(1.0F, waferMapPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(waferMapPlot1.isOutlineVisible());
      assertEquals(1.0F, waferMapPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, waferMapPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot1.isNotify());
      assertEquals(15, waferMapPlot1.getBackgroundImageAlignment());
      assertEquals("WMAP_Plot", waferMapPlot1.getPlotType());
      assertNull(waferMapPlot1.getNoDataMessage());
      assertFalse(waferMapPlot1.fetchElementHintingFlag());
      assertFalse(waferMapPlot1.equals((Object)waferMapPlot0));
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      // Undeclared exception!
      try { 
        waferMapPlot1.setBackgroundImageAlpha((-121.3017F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f.
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = mock(WaferMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(waferMapDataset0).toString();
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, (WaferMapRenderer) null);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      waferMapPlot0.annotationChanged(annotationChangeEvent0);
      RendererChangeEvent rendererChangeEvent0 = mock(RendererChangeEvent.class, new ViolatedAssumptionAnswer());
      waferMapPlot0.rendererChanged(rendererChangeEvent0);
      String string0 = waferMapPlot0.getPlotType();
      assertEquals("WMAP_Plot", string0);
      
      waferMapPlot0.getDataset();
      PlotChangeEvent plotChangeEvent0 = mock(PlotChangeEvent.class, new ViolatedAssumptionAnswer());
      waferMapPlot0.notifyListeners(plotChangeEvent0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)waferMapPlot0.getWaferEdge(rectangle2D0);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D1).getHeight();
      doReturn(0.0).when(rectangle2D1).getWidth();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      waferMapPlot0.draw(graphics2D0, rectangle2D1, point2D0, plotState0, plotRenderingInfo0);
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
  }
}
