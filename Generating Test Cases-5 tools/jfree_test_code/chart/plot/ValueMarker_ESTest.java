/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:00:18 GMT 2023
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Stroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.plot.ValueMarker;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValueMarker_ESTest extends ValueMarker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      Object object0 = valueMarker0.clone();
      valueMarker0.setValue(4403.0948401);
      boolean boolean0 = object0.equals(valueMarker0);
      assertEquals(4403.0948401, valueMarker0.getValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-2629.37));
      valueMarker0.setValue(1048.964084025283);
      double double0 = valueMarker0.getValue();
      assertEquals(1048.964084025283, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-3001.5813));
      Color color0 = valueMarker0.getLabelBackgroundColor();
      ValueMarker valueMarker1 = null;
      try {
        valueMarker1 = new ValueMarker((-3001.5813), color0, (Stroke) null, color0, (Stroke) null, 1052.9514F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      ValueMarker valueMarker0 = null;
      try {
        valueMarker0 = new ValueMarker((-10.0), paint0, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(1.0);
      Color color0 = valueMarker0.getLabelBackgroundColor();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      ValueMarker valueMarker1 = new ValueMarker(1.0, color0, stroke0, color0, stroke0, 0.0F);
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0, valueMarker1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-2629.37));
      ValueMarker valueMarker1 = new ValueMarker((-2629.37));
      valueMarker0.setValue(0.0);
      boolean boolean0 = valueMarker0.equals(valueMarker1);
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-2629.37));
      ValueMarker valueMarker1 = new ValueMarker((-2629.37));
      boolean boolean0 = valueMarker0.equals(valueMarker1);
      assertTrue(boolean0);
      assertEquals((-2629.37), valueMarker1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-2629.37));
      boolean boolean0 = valueMarker0.equals(valueMarker0);
      assertEquals((-2629.37), valueMarker0.getValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-2629.37));
      boolean boolean0 = valueMarker0.equals("");
      assertFalse(boolean0);
      assertEquals((-2629.37), valueMarker0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-2654.997140798356));
      Color color0 = valueMarker0.getLabelBackgroundColor();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      ValueMarker valueMarker1 = new ValueMarker((-2344.6584), color0, stroke0);
      assertEquals((-2654.997140798356), valueMarker0.getValue(), 0.01);
      assertEquals((-2344.6584), valueMarker1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-2629.37));
      valueMarker0.setValue(0.0);
      double double0 = valueMarker0.getValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-2629.37));
      double double0 = valueMarker0.getValue();
      assertEquals((-2629.37), double0, 0.01);
  }
}
