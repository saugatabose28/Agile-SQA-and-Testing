/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:46:28 GMT 2023
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultDrawingSupplier_ESTest extends DefaultDrawingSupplier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      defaultDrawingSupplier0.getNextOutlinePaint();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier0.getNextShape();
      defaultDrawingSupplier0.getNextFillPaint();
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier0.getNextPaint();
      defaultDrawingSupplier0.getNextPaint();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier0.getNextOutlineStroke();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      DefaultDrawingSupplier defaultDrawingSupplier1 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      defaultDrawingSupplier1.getNextOutlineStroke();
      defaultDrawingSupplier0.equals(defaultDrawingSupplier1);
      defaultDrawingSupplier0.getNextFillPaint();
      defaultDrawingSupplier0.getNextStroke();
      defaultDrawingSupplier0.getNextStroke();
      defaultDrawingSupplier0.getNextOutlineStroke();
      DefaultDrawingSupplier defaultDrawingSupplier2 = new DefaultDrawingSupplier();
      DefaultDrawingSupplier defaultDrawingSupplier3 = (DefaultDrawingSupplier)defaultDrawingSupplier2.clone();
      defaultDrawingSupplier0.equals(defaultDrawingSupplier3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier0.getNextShape();
      defaultDrawingSupplier0.getNextFillPaint();
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier0.getNextPaint();
      defaultDrawingSupplier0.getNextPaint();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier0.getNextOutlineStroke();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      DefaultDrawingSupplier defaultDrawingSupplier1 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      defaultDrawingSupplier1.getNextStroke();
      defaultDrawingSupplier0.getNextShape();
      defaultDrawingSupplier0.equals(defaultDrawingSupplier1);
      defaultDrawingSupplier0.getNextFillPaint();
      defaultDrawingSupplier0.getNextStroke();
      defaultDrawingSupplier0.getNextStroke();
      defaultDrawingSupplier0.getNextOutlineStroke();
      DefaultDrawingSupplier defaultDrawingSupplier2 = new DefaultDrawingSupplier();
      defaultDrawingSupplier2.getNextStroke();
      DefaultDrawingSupplier defaultDrawingSupplier3 = (DefaultDrawingSupplier)defaultDrawingSupplier2.clone();
      defaultDrawingSupplier0.equals(defaultDrawingSupplier3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Paint[] paintArray0 = new Paint[6];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Paint paint0 = defaultDrawingSupplier0.getNextFillPaint();
      paintArray0[0] = paint0;
      Paint paint1 = defaultDrawingSupplier0.getNextPaint();
      paintArray0[1] = paint1;
      Paint paint2 = defaultDrawingSupplier0.getNextOutlinePaint();
      paintArray0[2] = paint2;
      Paint paint3 = defaultDrawingSupplier0.getNextFillPaint();
      paintArray0[3] = paint3;
      Paint paint4 = defaultDrawingSupplier0.getNextOutlinePaint();
      paintArray0[4] = paint4;
      Paint paint5 = defaultDrawingSupplier0.getNextFillPaint();
      paintArray0[5] = paint5;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(paintArray0, defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_FILL_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      defaultDrawingSupplier1.getNextFillPaint();
      defaultDrawingSupplier0.getNextPaint();
      Object object0 = defaultDrawingSupplier1.clone();
      defaultDrawingSupplier1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Stroke stroke0 = defaultDrawingSupplier0.getNextStroke();
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier0.equals(stroke0);
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier0.equals(stroke0);
      DefaultDrawingSupplier.createStandardSeriesShapes();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier0.clone();
      defaultDrawingSupplier0.equals(defaultDrawingSupplier0);
      Object object0 = defaultDrawingSupplier0.clone();
      defaultDrawingSupplier0.getNextStroke();
      defaultDrawingSupplier0.getNextPaint();
      defaultDrawingSupplier0.getNextOutlineStroke();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier0.getNextOutlineStroke();
      defaultDrawingSupplier0.getNextOutlineStroke();
      defaultDrawingSupplier0.equals(object0);
      defaultDrawingSupplier0.getNextOutlineStroke();
      defaultDrawingSupplier0.getNextPaint();
      defaultDrawingSupplier0.getNextPaint();
      defaultDrawingSupplier0.getNextFillPaint();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier0.getNextStroke();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier0.getNextStroke();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier0.clone();
      defaultDrawingSupplier0.getNextFillPaint();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Paint[] paintArray0 = new Paint[2];
      Stroke[] strokeArray0 = new Stroke[1];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Stroke stroke0 = defaultDrawingSupplier0.getNextStroke();
      strokeArray0[0] = stroke0;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(paintArray0, paintArray0, strokeArray0, strokeArray0, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      Paint paint0 = defaultDrawingSupplier1.getNextFillPaint();
      paintArray0[0] = paint0;
      Paint paint1 = defaultDrawingSupplier1.getNextOutlinePaint();
      paintArray0[1] = paint1;
      defaultDrawingSupplier0.getNextOutlinePaint();
      DefaultDrawingSupplier defaultDrawingSupplier2 = new DefaultDrawingSupplier(paintArray0, defaultDrawingSupplier1.DEFAULT_FILL_PAINT_SEQUENCE, paintArray0, strokeArray0, defaultDrawingSupplier1.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      defaultDrawingSupplier2.clone();
      DefaultDrawingSupplier defaultDrawingSupplier3 = (DefaultDrawingSupplier)defaultDrawingSupplier2.clone();
      defaultDrawingSupplier2.getNextShape();
      defaultDrawingSupplier2.getNextOutlinePaint();
      defaultDrawingSupplier2.equals(defaultDrawingSupplier3);
      defaultDrawingSupplier2.clone();
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier1.getNextPaint();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier2.getNextPaint();
      defaultDrawingSupplier2.getNextFillPaint();
      defaultDrawingSupplier0.getNextOutlineStroke();
      DefaultDrawingSupplier defaultDrawingSupplier4 = (DefaultDrawingSupplier)defaultDrawingSupplier2.clone();
      defaultDrawingSupplier4.getNextStroke();
      defaultDrawingSupplier0.getNextStroke();
      defaultDrawingSupplier2.getNextShape();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier1.getNextStroke();
      defaultDrawingSupplier2.getNextStroke();
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier3.getNextOutlinePaint();
      DefaultDrawingSupplier defaultDrawingSupplier5 = (DefaultDrawingSupplier)defaultDrawingSupplier2.clone();
      defaultDrawingSupplier1.equals(defaultDrawingSupplier5);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Stroke stroke0 = defaultDrawingSupplier0.getNextOutlineStroke();
      defaultDrawingSupplier0.getNextShape();
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier0.equals(stroke0);
      defaultDrawingSupplier0.getNextOutlinePaint();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier0.getNextShape();
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier();
      defaultDrawingSupplier0.equals(defaultDrawingSupplier1);
      defaultDrawingSupplier0.getNextStroke();
      defaultDrawingSupplier0.getNextFillPaint();
      Object object0 = defaultDrawingSupplier0.clone();
      defaultDrawingSupplier0.getNextStroke();
      defaultDrawingSupplier0.getNextStroke();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier0.equals(object0);
      defaultDrawingSupplier0.getNextShape();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier0.getNextPaint();
      defaultDrawingSupplier0.getNextOutlineStroke();
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier0.getNextOutlineStroke();
      defaultDrawingSupplier0.getNextShape();
      defaultDrawingSupplier0.getNextPaint();
      defaultDrawingSupplier0.getNextStroke();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Paint[] paintArray0 = new Paint[1];
      Stroke[] strokeArray0 = new Stroke[0];
      Shape[] shapeArray0 = new Shape[7];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Shape shape0 = defaultDrawingSupplier0.getNextShape();
      shapeArray0[0] = shape0;
      Shape shape1 = defaultDrawingSupplier0.getNextShape();
      shapeArray0[1] = shape1;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier();
      Shape shape2 = defaultDrawingSupplier1.getNextShape();
      shapeArray0[2] = shape2;
      Shape shape3 = defaultDrawingSupplier1.getNextShape();
      shapeArray0[3] = shape3;
      Shape shape4 = defaultDrawingSupplier1.getNextShape();
      shapeArray0[4] = shape4;
      Shape shape5 = defaultDrawingSupplier0.getNextShape();
      shapeArray0[5] = shape5;
      Shape shape6 = defaultDrawingSupplier0.getNextShape();
      shapeArray0[6] = shape6;
      DefaultDrawingSupplier defaultDrawingSupplier2 = new DefaultDrawingSupplier(paintArray0, paintArray0, paintArray0, strokeArray0, strokeArray0, shapeArray0);
      defaultDrawingSupplier2.getNextFillPaint();
      paintArray0[0] = null;
      Stroke[] strokeArray1 = new Stroke[2];
      Stroke stroke0 = defaultDrawingSupplier1.getNextStroke();
      strokeArray1[0] = stroke0;
      // Undeclared exception!
      try { 
        defaultDrawingSupplier2.getNextStroke();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.plot.DefaultDrawingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Paint[] paintArray0 = new Paint[7];
      Stroke[] strokeArray0 = new Stroke[0];
      Shape[] shapeArray0 = new Shape[8];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Shape shape0 = defaultDrawingSupplier0.getNextShape();
      shapeArray0[0] = shape0;
      Shape shape1 = defaultDrawingSupplier0.getNextShape();
      shapeArray0[1] = shape1;
      Shape shape2 = defaultDrawingSupplier0.getNextShape();
      shapeArray0[2] = shape2;
      Shape shape3 = defaultDrawingSupplier0.getNextShape();
      shapeArray0[3] = shape3;
      Shape shape4 = defaultDrawingSupplier0.getNextShape();
      shapeArray0[4] = shape4;
      Shape shape5 = defaultDrawingSupplier0.getNextShape();
      shapeArray0[5] = shape5;
      Shape shape6 = defaultDrawingSupplier0.getNextShape();
      shapeArray0[6] = shape6;
      Shape shape7 = defaultDrawingSupplier0.getNextShape();
      shapeArray0[7] = shape7;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(paintArray0, paintArray0, strokeArray0, strokeArray0, shapeArray0);
      defaultDrawingSupplier1.getNextOutlinePaint();
      paintArray0[0] = null;
      DefaultDrawingSupplier defaultDrawingSupplier2 = new DefaultDrawingSupplier();
      Paint paint0 = defaultDrawingSupplier2.getNextPaint();
      paintArray0[1] = paint0;
      Paint paint1 = defaultDrawingSupplier2.getNextOutlinePaint();
      paintArray0[2] = paint1;
      Paint paint2 = defaultDrawingSupplier0.getNextFillPaint();
      paintArray0[3] = paint2;
      Paint paint3 = defaultDrawingSupplier2.getNextOutlinePaint();
      paintArray0[4] = paint3;
      defaultDrawingSupplier1.getNextPaint();
      paintArray0[5] = null;
      Paint paint4 = defaultDrawingSupplier2.getNextFillPaint();
      paintArray0[6] = paint4;
      Stroke[] strokeArray1 = new Stroke[6];
      // Undeclared exception!
      try { 
        defaultDrawingSupplier1.getNextOutlineStroke();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.plot.DefaultDrawingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      defaultDrawingSupplier0.getNextFillPaint();
      Shape shape0 = defaultDrawingSupplier0.getNextShape();
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(defaultDrawingSupplier0.DEFAULT_OUTLINE_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, shapeArray0);
      defaultDrawingSupplier1.getNextShape();
      defaultDrawingSupplier0.equals(defaultDrawingSupplier1);
      DefaultDrawingSupplier.createStandardSeriesShapes();
      defaultDrawingSupplier1.getNextShape();
      Object object0 = defaultDrawingSupplier1.clone();
      defaultDrawingSupplier0.getNextStroke();
      defaultDrawingSupplier1.equals(object0);
      defaultDrawingSupplier0.equals(shape0);
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier0.getNextPaint();
      defaultDrawingSupplier1.getNextFillPaint();
      defaultDrawingSupplier0.clone();
      defaultDrawingSupplier1.getNextStroke();
      Object object1 = defaultDrawingSupplier0.clone();
      defaultDrawingSupplier1.equals(object1);
      defaultDrawingSupplier1.getNextPaint();
      defaultDrawingSupplier0.getNextOutlineStroke();
      defaultDrawingSupplier0.getNextOutlineStroke();
      defaultDrawingSupplier0.getNextShape();
      defaultDrawingSupplier1.getNextOutlineStroke();
      defaultDrawingSupplier0.getNextPaint();
      defaultDrawingSupplier0.getNextShape();
      defaultDrawingSupplier0.clone();
      defaultDrawingSupplier1.getNextOutlineStroke();
      defaultDrawingSupplier1.getNextShape();
      defaultDrawingSupplier0.clone();
      defaultDrawingSupplier1.getNextOutlinePaint();
      defaultDrawingSupplier0.clone();
      defaultDrawingSupplier0.clone();
      defaultDrawingSupplier1.getNextFillPaint();
      DefaultDrawingSupplier defaultDrawingSupplier2 = new DefaultDrawingSupplier();
      defaultDrawingSupplier1.equals(defaultDrawingSupplier2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Paint[] paintArray0 = new Paint[4];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      paintArray0[0] = (Paint) color0;
      Color color1 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(color1.equals((Object)color0));
      assertEquals(85, color1.getBlue());
      assertEquals((-43691), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getRed());
      assertEquals(85, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      paintArray0[1] = (Paint) color1;
      Color color2 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(color2.equals((Object)color1));
      assertFalse(color2.equals((Object)color0));
      assertEquals((-4144960), color2.getRGB());
      assertEquals(192, color2.getRed());
      assertEquals(255, color2.getAlpha());
      assertEquals(1, color2.getTransparency());
      assertEquals(192, color2.getBlue());
      assertEquals(192, color2.getGreen());
      assertNotSame(color2, color1);
      assertNotSame(color2, color0);
      assertNotNull(color2);
      
      paintArray0[2] = (Paint) color2;
      Color color3 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(color3.equals((Object)color2));
      assertFalse(color3.equals((Object)color0));
      assertFalse(color3.equals((Object)color1));
      assertEquals(255, color3.getAlpha());
      assertEquals(1, color3.getTransparency());
      assertEquals(85, color3.getGreen());
      assertEquals((-11184641), color3.getRGB());
      assertEquals(85, color3.getRed());
      assertEquals(255, color3.getBlue());
      assertNotSame(color3, color2);
      assertNotSame(color3, color0);
      assertNotSame(color3, color1);
      assertNotNull(color3);
      
      paintArray0[3] = (Paint) color3;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(paintArray0, defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, paintArray0, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(4, paintArray0.length);
      assertNotNull(defaultDrawingSupplier1);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertEquals(4, paintArray0.length);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Color color4 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color4.equals((Object)color0));
      assertFalse(color4.equals((Object)color1));
      assertFalse(color4.equals((Object)color3));
      assertEquals((-4144960), color4.getRGB());
      assertEquals(192, color4.getRed());
      assertEquals(255, color4.getAlpha());
      assertEquals(192, color4.getGreen());
      assertEquals(1, color4.getTransparency());
      assertEquals(192, color4.getBlue());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color4, color0);
      assertNotSame(color4, color1);
      assertSame(color4, color2);
      assertNotSame(color4, color3);
      assertNotNull(color4);
      
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals((-3.0), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertEquals(4, paintArray0.length);
      assertEquals((-3.0), ellipse2D_Double0.x, 0.01);
      assertEquals(6.0, ellipse2D_Double0.width, 0.01);
      assertEquals((-3.0), ellipse2D_Double0.y, 0.01);
      assertEquals(6.0, ellipse2D_Double0.height, 0.01);
      assertNotNull(ellipse2D_Double0);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(basicStroke1.equals((Object)basicStroke0));
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      BasicStroke basicStroke2 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertTrue(basicStroke2.equals((Object)basicStroke1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(2, basicStroke2.getLineJoin());
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke2.getLineWidth(), 0.01F);
      assertSame(basicStroke2, basicStroke0);
      assertNotSame(basicStroke2, basicStroke1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotNull(basicStroke2);
      
      BasicStroke basicStroke3 = (BasicStroke)defaultDrawingSupplier1.getNextOutlineStroke();
      assertTrue(basicStroke3.equals((Object)basicStroke1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(0.0F, basicStroke3.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke3.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke3.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke3.getEndCap());
      assertEquals(2, basicStroke3.getLineJoin());
      assertSame(basicStroke3, basicStroke0);
      assertNotSame(basicStroke3, basicStroke1);
      assertSame(basicStroke3, basicStroke2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertEquals(4, paintArray0.length);
      assertNotNull(basicStroke3);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotNull(defaultDrawingSupplier2);
      
      Polygon polygon0 = (Polygon)defaultDrawingSupplier1.getNextShape();
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertEquals(4, paintArray0.length);
      assertEquals(3, polygon0.npoints);
      assertNotNull(polygon0);
      
      DefaultDrawingSupplier defaultDrawingSupplier3 = (DefaultDrawingSupplier)defaultDrawingSupplier1.clone();
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertEquals(4, paintArray0.length);
      assertNotNull(defaultDrawingSupplier3);
      
      Color color5 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color5.equals((Object)color4));
      assertFalse(color5.equals((Object)color2));
      assertFalse(color5.equals((Object)color0));
      assertFalse(color5.equals((Object)color1));
      assertFalse(color5.equals((Object)color3));
      assertEquals(1, color5.getTransparency());
      assertEquals(85, color5.getBlue());
      assertEquals(255, color5.getAlpha());
      assertEquals(255, color5.getGreen());
      assertEquals((-11141291), color5.getRGB());
      assertEquals(85, color5.getRed());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color5, color4);
      assertNotSame(color5, color2);
      assertNotSame(color5, color0);
      assertNotSame(color5, color1);
      assertNotSame(color5, color3);
      assertNotNull(color5);
      
      Polygon polygon1 = (Polygon)defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(polygon1, polygon0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertEquals(4, paintArray0.length);
      assertEquals(4, polygon1.npoints);
      assertNotNull(polygon1);
      
      BasicStroke basicStroke4 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(basicStroke4.equals((Object)basicStroke1));
      assertEquals(0.0F, basicStroke4.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke4.getLineJoin());
      assertEquals(1.0F, basicStroke4.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke4.getEndCap());
      assertEquals(10.0F, basicStroke4.getMiterLimit(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(basicStroke4, basicStroke1);
      assertSame(basicStroke4, basicStroke2);
      assertSame(basicStroke4, basicStroke3);
      assertSame(basicStroke4, basicStroke0);
      assertNotNull(basicStroke4);
      
      Color color6 = (Color)defaultDrawingSupplier1.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color6.equals((Object)color5));
      assertFalse(color6.equals((Object)color2));
      assertFalse(color6.equals((Object)color3));
      assertFalse(color6.equals((Object)color4));
      assertFalse(color6.equals((Object)color1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertEquals(255, color6.getRed());
      assertEquals(255, color6.getBlue());
      assertEquals(255, color6.getAlpha());
      assertEquals((-1), color6.getRGB());
      assertEquals(1, color6.getTransparency());
      assertEquals(255, color6.getGreen());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertSame(color6, color0);
      assertNotSame(color6, color5);
      assertNotSame(color6, color2);
      assertNotSame(color6, color3);
      assertNotSame(color6, color4);
      assertNotSame(color6, color1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertEquals(4, paintArray0.length);
      assertNotNull(color6);
      
      Color color7 = (Color)defaultDrawingSupplier1.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color7.equals((Object)color5));
      assertFalse(color7.equals((Object)color6));
      assertFalse(color7.equals((Object)color0));
      assertFalse(color7.equals((Object)color2));
      assertFalse(color7.equals((Object)color4));
      assertFalse(color7.equals((Object)color3));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertEquals(255, color7.getRed());
      assertEquals(85, color7.getBlue());
      assertEquals(255, color7.getAlpha());
      assertEquals(85, color7.getGreen());
      assertEquals(1, color7.getTransparency());
      assertEquals((-43691), color7.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color7, color5);
      assertNotSame(color7, color6);
      assertNotSame(color7, color0);
      assertSame(color7, color1);
      assertNotSame(color7, color2);
      assertNotSame(color7, color4);
      assertNotSame(color7, color3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertEquals(4, paintArray0.length);
      assertNotNull(color7);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertEquals(1.5, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertEquals(4, paintArray0.length);
      assertEquals(6.0, rectangle2D_Double1.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double1.x, 0.01);
      assertEquals((-1.5), rectangle2D_Double1.y, 0.01);
      assertEquals(3.0, rectangle2D_Double1.height, 0.01);
      assertNotNull(rectangle2D_Double1);
      
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertEquals(10, shapeArray0.length);
      assertNotNull(shapeArray0);
      
      Color color8 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color8.equals((Object)color7));
      assertFalse(color8.equals((Object)color3));
      assertFalse(color8.equals((Object)color6));
      assertFalse(color8.equals((Object)color5));
      assertFalse(color8.equals((Object)color1));
      assertFalse(color8.equals((Object)color0));
      assertEquals(192, color8.getGreen());
      assertEquals(1, color8.getTransparency());
      assertEquals(255, color8.getAlpha());
      assertEquals(192, color8.getBlue());
      assertEquals((-4144960), color8.getRGB());
      assertEquals(192, color8.getRed());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color8, color7);
      assertNotSame(color8, color3);
      assertSame(color8, color2);
      assertNotSame(color8, color6);
      assertNotSame(color8, color5);
      assertNotSame(color8, color1);
      assertSame(color8, color4);
      assertNotSame(color8, color0);
      assertNotNull(color8);
      
      BasicStroke basicStroke5 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(basicStroke5.equals((Object)basicStroke2));
      assertTrue(basicStroke5.equals((Object)basicStroke3));
      assertTrue(basicStroke5.equals((Object)basicStroke4));
      assertTrue(basicStroke5.equals((Object)basicStroke0));
      assertEquals(0.0F, basicStroke5.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke5.getLineJoin());
      assertEquals(1.0F, basicStroke5.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke5.getEndCap());
      assertEquals(10.0F, basicStroke5.getMiterLimit(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertSame(basicStroke5, basicStroke1);
      assertNotSame(basicStroke5, basicStroke3);
      assertNotSame(basicStroke5, basicStroke4);
      assertNotSame(basicStroke5, basicStroke2);
      assertNotSame(basicStroke5, basicStroke0);
      assertNotNull(basicStroke5);
      
      Color color9 = (Color)defaultDrawingSupplier1.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(color9.equals((Object)color3));
      assertFalse(color9.equals((Object)color7));
      assertFalse(color9.equals((Object)color4));
      assertFalse(color9.equals((Object)color1));
      assertFalse(color9.equals((Object)color8));
      assertFalse(color9.equals((Object)color2));
      assertFalse(color9.equals((Object)color5));
      assertEquals(255, color9.getAlpha());
      assertEquals(255, color9.getGreen());
      assertEquals(255, color9.getBlue());
      assertEquals(255, color9.getRed());
      assertEquals((-1), color9.getRGB());
      assertEquals(1, color9.getTransparency());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(color9, color3);
      assertNotSame(color9, color7);
      assertSame(color9, color6);
      assertSame(color9, color0);
      assertNotSame(color9, color4);
      assertNotSame(color9, color1);
      assertNotSame(color9, color8);
      assertNotSame(color9, color2);
      assertNotSame(color9, color5);
      assertEquals(4, paintArray0.length);
      assertNotNull(color9);
      
      DefaultDrawingSupplier defaultDrawingSupplier4 = (DefaultDrawingSupplier)defaultDrawingSupplier1.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier1);
      assertEquals(4, paintArray0.length);
      assertNotNull(defaultDrawingSupplier4);
      
      boolean boolean0 = defaultDrawingSupplier1.equals(defaultDrawingSupplier4);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier1);
      assertEquals(4, paintArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stroke[] strokeArray0 = new Stroke[3];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      strokeArray0[0] = (Stroke) basicStroke0;
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertTrue(basicStroke1.equals((Object)basicStroke0));
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertNotSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      strokeArray0[1] = (Stroke) basicStroke1;
      BasicStroke basicStroke2 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertTrue(basicStroke2.equals((Object)basicStroke0));
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke2.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke2.getLineJoin());
      assertSame(basicStroke2, basicStroke1);
      assertNotSame(basicStroke2, basicStroke0);
      assertNotNull(basicStroke2);
      
      strokeArray0[2] = (Stroke) basicStroke2;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier((Paint[]) null, (Paint[]) null, (Paint[]) null, strokeArray0, strokeArray0, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(3, strokeArray0.length);
      assertNotNull(defaultDrawingSupplier1);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = (DefaultDrawingSupplier)defaultDrawingSupplier1.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertEquals(3, strokeArray0.length);
      assertNotNull(defaultDrawingSupplier2);
      
      // Undeclared exception!
      try { 
        defaultDrawingSupplier1.getNextFillPaint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.DefaultDrawingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Paint[] paintArray0 = new Paint[4];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertEquals(85, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(85, color0.getGreen());
      assertEquals((-43691), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      paintArray0[0] = (Paint) color0;
      Color color1 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(color1.equals((Object)color0));
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getBlue());
      assertEquals((-11184641), color1.getRGB());
      assertEquals(85, color1.getRed());
      assertEquals(85, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      paintArray0[1] = (Paint) color1;
      Color color2 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(color2.equals((Object)color0));
      assertFalse(color2.equals((Object)color1));
      assertEquals(255, color2.getGreen());
      assertEquals((-1), color2.getRGB());
      assertEquals(255, color2.getRed());
      assertEquals(255, color2.getAlpha());
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getBlue());
      assertNotSame(color2, color0);
      assertNotSame(color2, color1);
      assertNotNull(color2);
      
      paintArray0[2] = (Paint) color2;
      Color color3 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(color3.equals((Object)color0));
      assertFalse(color3.equals((Object)color1));
      assertEquals((-1), color3.getRGB());
      assertEquals(1, color3.getTransparency());
      assertEquals(255, color3.getRed());
      assertEquals(255, color3.getAlpha());
      assertEquals(255, color3.getGreen());
      assertEquals(255, color3.getBlue());
      assertNotSame(color3, color0);
      assertNotSame(color3, color1);
      assertSame(color3, color2);
      assertNotNull(color3);
      
      paintArray0[3] = (Paint) color3;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier((Paint[]) null, paintArray0, defaultDrawingSupplier0.DEFAULT_OUTLINE_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(4, paintArray0.length);
      assertNotNull(defaultDrawingSupplier1);
      
      // Undeclared exception!
      try { 
        defaultDrawingSupplier1.getNextPaint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.DefaultDrawingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Object object0 = defaultDrawingSupplier0.clone();
      assertTrue(object0.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(object0, defaultDrawingSupplier0);
      assertNotNull(object0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotNull(basicStroke0);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertEquals(1, color0.getTransparency());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotNull(color0);
      
      boolean boolean0 = defaultDrawingSupplier0.equals(object0);
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(object0.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(object0, defaultDrawingSupplier0);
      assertFalse(boolean0);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      Color color1 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertEquals(255, color1.getAlpha());
      assertEquals((-1), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getRed());
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getGreen());
      assertNotSame(defaultDrawingSupplier0, object0);
      assertSame(color1, color0);
      assertNotNull(color1);
      
      Color color2 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(color2.equals((Object)color0));
      assertFalse(color2.equals((Object)color1));
      assertEquals((-4144960), color2.getRGB());
      assertEquals(192, color2.getRed());
      assertEquals(192, color2.getGreen());
      assertEquals(1, color2.getTransparency());
      assertEquals(192, color2.getBlue());
      assertEquals(255, color2.getAlpha());
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(color2, color0);
      assertNotSame(color2, color1);
      assertNotNull(color2);
      
      BasicStroke basicStroke2 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertEquals(2, basicStroke2.getLineJoin());
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(1.0F, basicStroke2.getLineWidth(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertSame(basicStroke2, basicStroke1);
      assertSame(basicStroke2, basicStroke0);
      assertNotNull(basicStroke2);
      
      Color color3 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(color3.equals((Object)color0));
      assertFalse(color3.equals((Object)color1));
      assertEquals(1, color3.getTransparency());
      assertEquals(255, color3.getAlpha());
      assertEquals(192, color3.getGreen());
      assertEquals(192, color3.getBlue());
      assertEquals((-4144960), color3.getRGB());
      assertEquals(192, color3.getRed());
      assertNotSame(defaultDrawingSupplier0, object0);
      assertSame(color3, color2);
      assertNotSame(color3, color0);
      assertNotSame(color3, color1);
      assertNotNull(color3);
      
      BasicStroke basicStroke3 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertEquals(2, basicStroke3.getLineJoin());
      assertEquals(0.0F, basicStroke3.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke3.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke3.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke3.getEndCap());
      assertNotSame(defaultDrawingSupplier0, object0);
      assertSame(basicStroke3, basicStroke1);
      assertSame(basicStroke3, basicStroke2);
      assertSame(basicStroke3, basicStroke0);
      assertNotNull(basicStroke3);
      
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertEquals(10, shapeArray0.length);
      assertNotNull(shapeArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      boolean boolean0 = defaultDrawingSupplier0.equals((Object) null);
      assertFalse(boolean0);
      
      Object object0 = defaultDrawingSupplier0.clone();
      assertTrue(object0.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(object0, defaultDrawingSupplier0);
      assertNotNull(object0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotNull(basicStroke0);
      
      boolean boolean1 = defaultDrawingSupplier0.equals(object0);
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(object0.equals((Object)defaultDrawingSupplier0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(object0, defaultDrawingSupplier0);
      assertFalse(boolean1);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      DefaultDrawingSupplier defaultDrawingSupplier1 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(defaultDrawingSupplier1.equals((Object)object0));
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, object0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotNull(defaultDrawingSupplier1);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultDrawingSupplier0.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)object0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, object0);
      assertNotNull(defaultDrawingSupplier2);
      
      BasicStroke basicStroke2 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(basicStroke2.equals((Object)basicStroke0));
      assertTrue(basicStroke2.equals((Object)basicStroke1));
      assertEquals(2, basicStroke2.getLineJoin());
      assertEquals(1.0F, basicStroke2.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(basicStroke2, basicStroke1);
      assertNotSame(basicStroke2, basicStroke0);
      assertNotNull(basicStroke2);
      
      Stroke[] strokeArray0 = new Stroke[1];
      Color color0 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(1, color0.getTransparency());
      assertEquals(85, color0.getGreen());
      assertEquals(85, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-43691), color0.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotNull(color0);
      
      strokeArray0[0] = (Stroke) basicStroke2;
      DefaultDrawingSupplier defaultDrawingSupplier3 = new DefaultDrawingSupplier(defaultDrawingSupplier0.DEFAULT_FILL_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, (Stroke[]) null, strokeArray0, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)object0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertEquals(1, strokeArray0.length);
      assertNotNull(defaultDrawingSupplier3);
      
      DefaultDrawingSupplier defaultDrawingSupplier4 = (DefaultDrawingSupplier)defaultDrawingSupplier3.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)object0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier4.equals((Object)object0));
      assertTrue(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier1));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, object0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier4, object0);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier1);
      assertEquals(1, strokeArray0.length);
      assertNotNull(defaultDrawingSupplier4);
      
      boolean boolean2 = defaultDrawingSupplier0.equals(defaultDrawingSupplier4);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)object0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier4.equals((Object)object0));
      assertTrue(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, object0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier4, object0);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier1);
      assertEquals(1, strokeArray0.length);
      assertFalse(boolean2);
      
      BasicStroke basicStroke3 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertTrue(basicStroke3.equals((Object)basicStroke1));
      assertTrue(basicStroke3.equals((Object)basicStroke0));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(2, basicStroke3.getEndCap());
      assertEquals(2, basicStroke3.getLineJoin());
      assertEquals(1.0F, basicStroke3.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke3.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke3.getMiterLimit(), 0.01F);
      assertNotSame(basicStroke3, basicStroke0);
      assertNotSame(basicStroke3, basicStroke1);
      assertSame(basicStroke3, basicStroke2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotNull(basicStroke3);
      
      DefaultDrawingSupplier defaultDrawingSupplier5 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier5.equals((Object)object0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier5, object0);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier0);
      assertNotNull(defaultDrawingSupplier5);
      
      boolean boolean3 = defaultDrawingSupplier0.equals(defaultDrawingSupplier5);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier5.equals((Object)object0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier5, object0);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier0);
      assertTrue(boolean3);
      
      BasicStroke basicStroke4 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(basicStroke4.equals((Object)basicStroke3));
      assertTrue(basicStroke4.equals((Object)basicStroke2));
      assertEquals(0.0F, basicStroke4.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke4.getLineJoin());
      assertEquals(10.0F, basicStroke4.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke4.getEndCap());
      assertEquals(1.0F, basicStroke4.getLineWidth(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(basicStroke4, basicStroke2);
      assertSame(basicStroke4, basicStroke1);
      assertSame(basicStroke4, basicStroke0);
      assertNotSame(basicStroke4, basicStroke3);
      assertNotNull(basicStroke4);
      
      // Undeclared exception!
      try { 
        defaultDrawingSupplier3.getNextStroke();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.DefaultDrawingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Stroke[] strokeArray0 = new Stroke[8];
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      strokeArray0[0] = (Stroke) basicStroke0;
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      strokeArray0[1] = (Stroke) basicStroke1;
      BasicStroke basicStroke2 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertEquals(2, basicStroke2.getLineJoin());
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke2.getLineWidth(), 0.01F);
      assertSame(basicStroke2, basicStroke1);
      assertSame(basicStroke2, basicStroke0);
      assertNotNull(basicStroke2);
      
      strokeArray0[2] = (Stroke) basicStroke2;
      BasicStroke basicStroke3 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertEquals(1.0F, basicStroke3.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke3.getLineJoin());
      assertEquals(0.0F, basicStroke3.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke3.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke3.getEndCap());
      assertSame(basicStroke3, basicStroke2);
      assertSame(basicStroke3, basicStroke0);
      assertSame(basicStroke3, basicStroke1);
      assertNotNull(basicStroke3);
      
      strokeArray0[3] = (Stroke) basicStroke3;
      BasicStroke basicStroke4 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertTrue(basicStroke4.equals((Object)basicStroke3));
      assertTrue(basicStroke4.equals((Object)basicStroke0));
      assertTrue(basicStroke4.equals((Object)basicStroke1));
      assertTrue(basicStroke4.equals((Object)basicStroke2));
      assertEquals(10.0F, basicStroke4.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke4.getEndCap());
      assertEquals(0.0F, basicStroke4.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke4.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke4.getLineJoin());
      assertNotSame(basicStroke4, basicStroke1);
      assertNotSame(basicStroke4, basicStroke2);
      assertNotSame(basicStroke4, basicStroke3);
      assertNotSame(basicStroke4, basicStroke0);
      assertNotNull(basicStroke4);
      
      strokeArray0[4] = (Stroke) basicStroke4;
      BasicStroke basicStroke5 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertTrue(basicStroke5.equals((Object)basicStroke1));
      assertTrue(basicStroke5.equals((Object)basicStroke2));
      assertTrue(basicStroke5.equals((Object)basicStroke3));
      assertTrue(basicStroke5.equals((Object)basicStroke0));
      assertEquals(2, basicStroke5.getLineJoin());
      assertEquals(0.0F, basicStroke5.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke5.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke5.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke5.getEndCap());
      assertNotSame(basicStroke5, basicStroke0);
      assertNotSame(basicStroke5, basicStroke1);
      assertNotSame(basicStroke5, basicStroke2);
      assertSame(basicStroke5, basicStroke4);
      assertNotSame(basicStroke5, basicStroke3);
      assertNotNull(basicStroke5);
      
      strokeArray0[5] = (Stroke) basicStroke5;
      BasicStroke basicStroke6 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertTrue(basicStroke6.equals((Object)basicStroke1));
      assertTrue(basicStroke6.equals((Object)basicStroke0));
      assertTrue(basicStroke6.equals((Object)basicStroke2));
      assertTrue(basicStroke6.equals((Object)basicStroke3));
      assertEquals(10.0F, basicStroke6.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke6.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke6.getLineJoin());
      assertEquals(2, basicStroke6.getEndCap());
      assertEquals(0.0F, basicStroke6.getDashPhase(), 0.01F);
      assertNotSame(basicStroke6, basicStroke2);
      assertNotSame(basicStroke6, basicStroke3);
      assertSame(basicStroke6, basicStroke4);
      assertSame(basicStroke6, basicStroke5);
      assertNotSame(basicStroke6, basicStroke0);
      assertNotSame(basicStroke6, basicStroke1);
      assertNotNull(basicStroke6);
      
      strokeArray0[6] = (Stroke) basicStroke6;
      BasicStroke basicStroke7 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertTrue(basicStroke7.equals((Object)basicStroke6));
      assertTrue(basicStroke7.equals((Object)basicStroke4));
      assertTrue(basicStroke7.equals((Object)basicStroke5));
      assertEquals(10.0F, basicStroke7.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke7.getEndCap());
      assertEquals(2, basicStroke7.getLineJoin());
      assertEquals(0.0F, basicStroke7.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke7.getLineWidth(), 0.01F);
      assertSame(basicStroke7, basicStroke3);
      assertNotSame(basicStroke7, basicStroke5);
      assertSame(basicStroke7, basicStroke0);
      assertSame(basicStroke7, basicStroke1);
      assertSame(basicStroke7, basicStroke2);
      assertNotSame(basicStroke7, basicStroke6);
      assertNotSame(basicStroke7, basicStroke4);
      assertNotNull(basicStroke7);
      
      strokeArray0[7] = (Stroke) basicStroke7;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, strokeArray0, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(8, strokeArray0.length);
      assertNotNull(defaultDrawingSupplier1);
      
      boolean boolean0 = defaultDrawingSupplier0.equals(defaultDrawingSupplier1);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertEquals(8, strokeArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Paint[] paintArray0 = new Paint[3];
      Paint[] paintArray1 = new Paint[0];
      assertFalse(paintArray1.equals((Object)paintArray0));
      
      Stroke[] strokeArray0 = new Stroke[9];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      strokeArray0[0] = (Stroke) basicStroke0;
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertTrue(basicStroke1.equals((Object)basicStroke0));
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(2, basicStroke1.getLineJoin());
      assertNotSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      strokeArray0[1] = (Stroke) basicStroke1;
      BasicStroke basicStroke2 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertTrue(basicStroke2.equals((Object)basicStroke1));
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke2.getLineJoin());
      assertEquals(1.0F, basicStroke2.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertNotSame(basicStroke2, basicStroke1);
      assertSame(basicStroke2, basicStroke0);
      assertNotNull(basicStroke2);
      
      strokeArray0[2] = (Stroke) basicStroke2;
      BasicStroke basicStroke3 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertTrue(basicStroke3.equals((Object)basicStroke2));
      assertTrue(basicStroke3.equals((Object)basicStroke0));
      assertEquals(1.0F, basicStroke3.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke3.getEndCap());
      assertEquals(10.0F, basicStroke3.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke3.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke3.getLineJoin());
      assertNotSame(basicStroke3, basicStroke0);
      assertNotSame(basicStroke3, basicStroke2);
      assertSame(basicStroke3, basicStroke1);
      assertNotNull(basicStroke3);
      
      strokeArray0[3] = (Stroke) basicStroke3;
      BasicStroke basicStroke4 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertTrue(basicStroke4.equals((Object)basicStroke0));
      assertTrue(basicStroke4.equals((Object)basicStroke2));
      assertEquals(0.0F, basicStroke4.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke4.getLineJoin());
      assertEquals(10.0F, basicStroke4.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke4.getEndCap());
      assertEquals(1.0F, basicStroke4.getLineWidth(), 0.01F);
      assertSame(basicStroke4, basicStroke1);
      assertNotSame(basicStroke4, basicStroke0);
      assertSame(basicStroke4, basicStroke3);
      assertNotSame(basicStroke4, basicStroke2);
      assertNotNull(basicStroke4);
      
      strokeArray0[4] = (Stroke) basicStroke4;
      BasicStroke basicStroke5 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertTrue(basicStroke5.equals((Object)basicStroke1));
      assertTrue(basicStroke5.equals((Object)basicStroke3));
      assertTrue(basicStroke5.equals((Object)basicStroke4));
      assertEquals(10.0F, basicStroke5.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke5.getEndCap());
      assertEquals(2, basicStroke5.getLineJoin());
      assertEquals(0.0F, basicStroke5.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke5.getLineWidth(), 0.01F);
      assertNotSame(basicStroke5, basicStroke1);
      assertNotSame(basicStroke5, basicStroke4);
      assertNotSame(basicStroke5, basicStroke3);
      assertSame(basicStroke5, basicStroke2);
      assertSame(basicStroke5, basicStroke0);
      assertNotNull(basicStroke5);
      
      strokeArray0[5] = (Stroke) basicStroke5;
      BasicStroke basicStroke6 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertTrue(basicStroke6.equals((Object)basicStroke4));
      assertTrue(basicStroke6.equals((Object)basicStroke1));
      assertTrue(basicStroke6.equals((Object)basicStroke3));
      assertEquals(2, basicStroke6.getEndCap());
      assertEquals(1.0F, basicStroke6.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke6.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke6.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke6.getLineJoin());
      assertSame(basicStroke6, basicStroke2);
      assertNotSame(basicStroke6, basicStroke1);
      assertNotSame(basicStroke6, basicStroke3);
      assertSame(basicStroke6, basicStroke5);
      assertSame(basicStroke6, basicStroke0);
      assertNotSame(basicStroke6, basicStroke4);
      assertNotNull(basicStroke6);
      
      strokeArray0[6] = (Stroke) basicStroke6;
      BasicStroke basicStroke7 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertTrue(basicStroke7.equals((Object)basicStroke3));
      assertTrue(basicStroke7.equals((Object)basicStroke4));
      assertTrue(basicStroke7.equals((Object)basicStroke1));
      assertEquals(1.0F, basicStroke7.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke7.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke7.getEndCap());
      assertEquals(0.0F, basicStroke7.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke7.getLineJoin());
      assertSame(basicStroke7, basicStroke2);
      assertSame(basicStroke7, basicStroke6);
      assertSame(basicStroke7, basicStroke5);
      assertNotSame(basicStroke7, basicStroke1);
      assertNotSame(basicStroke7, basicStroke3);
      assertNotSame(basicStroke7, basicStroke4);
      assertSame(basicStroke7, basicStroke0);
      assertNotNull(basicStroke7);
      
      strokeArray0[7] = (Stroke) basicStroke7;
      BasicStroke basicStroke8 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertTrue(basicStroke8.equals((Object)basicStroke1));
      assertTrue(basicStroke8.equals((Object)basicStroke3));
      assertTrue(basicStroke8.equals((Object)basicStroke4));
      assertEquals(10.0F, basicStroke8.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke8.getEndCap());
      assertEquals(2, basicStroke8.getLineJoin());
      assertEquals(1.0F, basicStroke8.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke8.getDashPhase(), 0.01F);
      assertSame(basicStroke8, basicStroke6);
      assertSame(basicStroke8, basicStroke7);
      assertSame(basicStroke8, basicStroke2);
      assertNotSame(basicStroke8, basicStroke1);
      assertSame(basicStroke8, basicStroke5);
      assertNotSame(basicStroke8, basicStroke4);
      assertNotSame(basicStroke8, basicStroke3);
      assertSame(basicStroke8, basicStroke0);
      assertNotNull(basicStroke8);
      
      strokeArray0[8] = (Stroke) basicStroke8;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(paintArray0, paintArray1, strokeArray0, strokeArray0, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(paintArray0.equals((Object)paintArray1));
      assertFalse(paintArray1.equals((Object)paintArray0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(3, paintArray0.length);
      assertEquals(0, paintArray1.length);
      assertEquals(9, strokeArray0.length);
      assertNotNull(defaultDrawingSupplier1);
      
      Color color0 = (Color)defaultDrawingSupplier1.getNextFillPaint();
      assertFalse(paintArray0.equals((Object)paintArray1));
      assertFalse(paintArray1.equals((Object)paintArray0));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertNotSame(paintArray0, paintArray1);
      assertNotSame(paintArray1, paintArray0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertEquals(3, paintArray0.length);
      assertEquals(0, paintArray1.length);
      assertEquals(9, strokeArray0.length);
      assertNotNull(color0);
      
      paintArray0[0] = (Paint) color0;
      // Undeclared exception!
      try { 
        defaultDrawingSupplier1.getNextOutlinePaint();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.plot.DefaultDrawingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stroke[] strokeArray0 = new Stroke[1];
      Paint[] paintArray0 = new Paint[2];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getRed());
      assertNotNull(color0);
      
      paintArray0[0] = (Paint) color0;
      Color color1 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertEquals(192, color1.getRed());
      assertEquals(192, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(192, color1.getBlue());
      assertEquals((-4144960), color1.getRGB());
      assertSame(color1, color0);
      assertNotNull(color1);
      
      paintArray0[1] = (Paint) color1;
      Shape[] shapeArray0 = new Shape[8];
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultDrawingSupplier0.getNextShape();
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      shapeArray0[0] = (Shape) rectangle2D_Double0;
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)defaultDrawingSupplier0.getNextShape();
      assertEquals(3.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.x, 0.01);
      assertEquals(6.0, ellipse2D_Double0.width, 0.01);
      assertEquals(6.0, ellipse2D_Double0.height, 0.01);
      assertEquals((-3.0), ellipse2D_Double0.y, 0.01);
      assertNotNull(ellipse2D_Double0);
      
      shapeArray0[1] = (Shape) ellipse2D_Double0;
      Polygon polygon0 = (Polygon)defaultDrawingSupplier0.getNextShape();
      assertEquals(3, polygon0.npoints);
      assertNotNull(polygon0);
      
      shapeArray0[2] = (Shape) polygon0;
      Polygon polygon1 = (Polygon)defaultDrawingSupplier0.getNextShape();
      assertFalse(polygon1.equals((Object)polygon0));
      assertNotSame(polygon1, polygon0);
      assertEquals(4, polygon1.npoints);
      assertNotNull(polygon1);
      
      shapeArray0[3] = (Shape) polygon1;
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)defaultDrawingSupplier0.getNextShape();
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals((-3.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals((-3.0), rectangle2D_Double1.x, 0.01);
      assertEquals((-1.5), rectangle2D_Double1.y, 0.01);
      assertEquals(6.0, rectangle2D_Double1.width, 0.01);
      assertEquals(3.0, rectangle2D_Double1.height, 0.01);
      assertNotNull(rectangle2D_Double1);
      
      shapeArray0[4] = (Shape) rectangle2D_Double1;
      Polygon polygon2 = (Polygon)defaultDrawingSupplier0.getNextShape();
      assertFalse(polygon2.equals((Object)polygon1));
      assertFalse(polygon2.equals((Object)polygon0));
      assertNotSame(polygon2, polygon1);
      assertNotSame(polygon2, polygon0);
      assertEquals(3, polygon2.npoints);
      assertNotNull(polygon2);
      
      shapeArray0[5] = (Shape) polygon2;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotNull(defaultDrawingSupplier1);
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertEquals((-3.0), rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertSame(rectangle2D_Double2, rectangle2D_Double0);
      assertEquals((-3.0), rectangle2D_Double2.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double2.x, 0.01);
      assertEquals(6.0, rectangle2D_Double2.width, 0.01);
      assertEquals(6.0, rectangle2D_Double2.height, 0.01);
      assertNotNull(rectangle2D_Double2);
      
      shapeArray0[6] = (Shape) rectangle2D_Double2;
      Ellipse2D.Double ellipse2D_Double1 = (Ellipse2D.Double)defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(3.0, ellipse2D_Double1.getMaxX(), 0.01);
      assertEquals(3.0, ellipse2D_Double1.getMaxY(), 0.01);
      assertEquals((-3.0), ellipse2D_Double1.getMinX(), 0.01);
      assertEquals((-3.0), ellipse2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Double1.getCenterY(), 0.01);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertSame(ellipse2D_Double1, ellipse2D_Double0);
      assertEquals((-3.0), ellipse2D_Double1.y, 0.01);
      assertEquals((-3.0), ellipse2D_Double1.x, 0.01);
      assertEquals(6.0, ellipse2D_Double1.width, 0.01);
      assertEquals(6.0, ellipse2D_Double1.height, 0.01);
      assertNotNull(ellipse2D_Double1);
      
      shapeArray0[7] = (Shape) ellipse2D_Double1;
      DefaultDrawingSupplier defaultDrawingSupplier2 = new DefaultDrawingSupplier((Paint[]) null, paintArray0, defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, strokeArray0, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, shapeArray0);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertEquals(1, strokeArray0.length);
      assertEquals(2, paintArray0.length);
      assertEquals(8, shapeArray0.length);
      assertNotNull(defaultDrawingSupplier2);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier2.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertEquals(1, strokeArray0.length);
      assertEquals(2, paintArray0.length);
      assertEquals(8, shapeArray0.length);
      assertNotNull(basicStroke0);
      
      strokeArray0[0] = (Stroke) basicStroke0;
      DefaultDrawingSupplier defaultDrawingSupplier3 = new DefaultDrawingSupplier((Paint[]) null, (Paint[]) null, strokeArray0, defaultDrawingSupplier1.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier1.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertEquals(1, strokeArray0.length);
      assertNotNull(defaultDrawingSupplier3);
      
      // Undeclared exception!
      try { 
        defaultDrawingSupplier3.getNextOutlinePaint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.DefaultDrawingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier();
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotNull(defaultDrawingSupplier1);
      
      Object object0 = defaultDrawingSupplier1.clone();
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertTrue(object0.equals((Object)defaultDrawingSupplier0));
      assertTrue(object0.equals((Object)defaultDrawingSupplier1));
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, object0);
      assertNotSame(object0, defaultDrawingSupplier1);
      assertNotSame(object0, defaultDrawingSupplier0);
      assertNotNull(object0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier1.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)object0));
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, object0);
      assertNotNull(basicStroke0);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier1.getNextStroke();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)object0));
      assertTrue(basicStroke1.equals((Object)basicStroke0));
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getLineJoin());
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, object0);
      assertNotSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      Color color0 = (Color)defaultDrawingSupplier1.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)object0));
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertEquals(192, color0.getRed());
      assertEquals((-4144960), color0.getRGB());
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, object0);
      assertNotNull(color0);
      
      BasicStroke basicStroke2 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertTrue(basicStroke2.equals((Object)basicStroke1));
      assertEquals(1.0F, basicStroke2.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke2.getLineJoin());
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertSame(basicStroke2, basicStroke0);
      assertNotSame(basicStroke2, basicStroke1);
      assertNotNull(basicStroke2);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultDrawingSupplier0.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Color color1 = (Color)defaultDrawingSupplier1.getNextFillPaint();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)object0));
      assertFalse(color1.equals((Object)color0));
      assertEquals(255, color1.getGreen());
      assertEquals((-1), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, object0);
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertEquals(10, shapeArray0.length);
      assertNotNull(shapeArray0);
      
      Color color2 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(color2.equals((Object)color0));
      assertEquals(255, color2.getBlue());
      assertEquals(255, color2.getRed());
      assertEquals(255, color2.getGreen());
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
      assertEquals((-1), color2.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertSame(color2, color1);
      assertNotSame(color2, color0);
      assertNotNull(color2);
      
      BasicStroke basicStroke3 = (BasicStroke)defaultDrawingSupplier1.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)object0));
      assertTrue(basicStroke3.equals((Object)basicStroke1));
      assertEquals(2, basicStroke3.getLineJoin());
      assertEquals(0.0F, basicStroke3.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke3.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke3.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke3.getEndCap());
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, object0);
      assertSame(basicStroke3, basicStroke0);
      assertSame(basicStroke3, basicStroke2);
      assertNotSame(basicStroke3, basicStroke1);
      assertNotNull(basicStroke3);
      
      BasicStroke basicStroke4 = (BasicStroke)defaultDrawingSupplier1.getNextStroke();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)object0));
      assertTrue(basicStroke4.equals((Object)basicStroke2));
      assertTrue(basicStroke4.equals((Object)basicStroke3));
      assertTrue(basicStroke4.equals((Object)basicStroke0));
      assertEquals(2, basicStroke4.getLineJoin());
      assertEquals(0.0F, basicStroke4.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke4.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke4.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke4.getEndCap());
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, object0);
      assertNotSame(basicStroke4, basicStroke0);
      assertSame(basicStroke4, basicStroke1);
      assertNotSame(basicStroke4, basicStroke2);
      assertNotSame(basicStroke4, basicStroke3);
      assertNotNull(basicStroke4);
      
      boolean boolean0 = defaultDrawingSupplier0.equals(defaultDrawingSupplier1);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)object0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, object0);
      assertFalse(boolean0);
      
      Color color3 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(color3.equals((Object)color0));
      assertFalse(color3.equals((Object)color1));
      assertFalse(color3.equals((Object)color2));
      assertEquals(255, color3.getRed());
      assertEquals(85, color3.getGreen());
      assertEquals((-43691), color3.getRGB());
      assertEquals(1, color3.getTransparency());
      assertEquals(255, color3.getAlpha());
      assertEquals(85, color3.getBlue());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(color3, color0);
      assertNotSame(color3, color1);
      assertNotSame(color3, color2);
      assertNotNull(color3);
      
      BasicStroke basicStroke5 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertTrue(basicStroke5.equals((Object)basicStroke4));
      assertTrue(basicStroke5.equals((Object)basicStroke1));
      assertEquals(0.0F, basicStroke5.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke5.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke5.getEndCap());
      assertEquals(1.0F, basicStroke5.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke5.getLineJoin());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(basicStroke5, basicStroke4);
      assertSame(basicStroke5, basicStroke2);
      assertNotSame(basicStroke5, basicStroke1);
      assertSame(basicStroke5, basicStroke0);
      assertSame(basicStroke5, basicStroke3);
      assertNotNull(basicStroke5);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)object0));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, object0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotNull(defaultDrawingSupplier2);
      
      Color color4 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)object0));
      assertFalse(color4.equals((Object)color1));
      assertFalse(color4.equals((Object)color3));
      assertFalse(color4.equals((Object)color2));
      assertEquals((-4144960), color4.getRGB());
      assertEquals(192, color4.getRed());
      assertEquals(255, color4.getAlpha());
      assertEquals(1, color4.getTransparency());
      assertEquals(192, color4.getBlue());
      assertEquals(192, color4.getGreen());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(color4, color1);
      assertNotSame(color4, color3);
      assertNotSame(color4, color2);
      assertSame(color4, color0);
      assertNotNull(color4);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Paint[] paintArray0 = new Paint[0];
      Shape[] shapeArray0 = new Shape[7];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray0, (Stroke[]) null, (Stroke[]) null, shapeArray0);
      assertEquals(0, paintArray0.length);
      assertEquals(7, shapeArray0.length);
      assertNotNull(defaultDrawingSupplier0);
      
      Shape shape0 = defaultDrawingSupplier0.getNextShape();
      assertEquals(0, paintArray0.length);
      assertEquals(7, shapeArray0.length);
      assertNull(shape0);
      
      shapeArray0[0] = null;
      Shape shape1 = defaultDrawingSupplier0.getNextShape();
      assertEquals(0, paintArray0.length);
      assertEquals(7, shapeArray0.length);
      assertNull(shape1);
      
      shapeArray0[1] = null;
      Shape shape2 = defaultDrawingSupplier0.getNextShape();
      assertEquals(0, paintArray0.length);
      assertEquals(7, shapeArray0.length);
      assertNull(shape2);
      
      shapeArray0[2] = null;
      Shape shape3 = defaultDrawingSupplier0.getNextShape();
      assertEquals(0, paintArray0.length);
      assertEquals(7, shapeArray0.length);
      assertNull(shape3);
      
      shapeArray0[3] = null;
      Shape shape4 = defaultDrawingSupplier0.getNextShape();
      assertEquals(0, paintArray0.length);
      assertEquals(7, shapeArray0.length);
      assertNull(shape4);
      
      shapeArray0[4] = null;
      Shape shape5 = defaultDrawingSupplier0.getNextShape();
      assertEquals(0, paintArray0.length);
      assertEquals(7, shapeArray0.length);
      assertNull(shape5);
      
      shapeArray0[5] = null;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(paintArray0, paintArray0, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, shapeArray0);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(0, paintArray0.length);
      assertEquals(7, shapeArray0.length);
      assertNotNull(defaultDrawingSupplier1);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier1.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertEquals(0, paintArray0.length);
      assertEquals(7, shapeArray0.length);
      assertNotNull(basicStroke0);
      
      Shape shape6 = defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertEquals(0, paintArray0.length);
      assertEquals(7, shapeArray0.length);
      assertNull(shape6);
      
      shapeArray0[6] = null;
      DefaultDrawingSupplier defaultDrawingSupplier2 = new DefaultDrawingSupplier((Paint[]) null, paintArray0, paintArray0, (Stroke[]) null, (Stroke[]) null, shapeArray0);
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertEquals(0, paintArray0.length);
      assertEquals(7, shapeArray0.length);
      assertNotNull(defaultDrawingSupplier2);
      
      // Undeclared exception!
      try { 
        defaultDrawingSupplier2.getNextFillPaint();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.plot.DefaultDrawingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Paint[] paintArray0 = new Paint[2];
      Stroke[] strokeArray0 = new Stroke[6];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      strokeArray0[0] = (Stroke) basicStroke0;
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getLineJoin());
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      strokeArray0[1] = (Stroke) basicStroke1;
      BasicStroke basicStroke2 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(1.0F, basicStroke2.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke2.getLineJoin());
      assertSame(basicStroke2, basicStroke1);
      assertSame(basicStroke2, basicStroke0);
      assertNotNull(basicStroke2);
      
      strokeArray0[2] = (Stroke) basicStroke2;
      BasicStroke basicStroke3 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(10.0F, basicStroke3.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke3.getLineJoin());
      assertEquals(2, basicStroke3.getEndCap());
      assertEquals(1.0F, basicStroke3.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke3.getDashPhase(), 0.01F);
      assertSame(basicStroke3, basicStroke0);
      assertSame(basicStroke3, basicStroke2);
      assertSame(basicStroke3, basicStroke1);
      assertNotNull(basicStroke3);
      
      strokeArray0[3] = (Stroke) basicStroke3;
      BasicStroke basicStroke4 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertTrue(basicStroke4.equals((Object)basicStroke2));
      assertTrue(basicStroke4.equals((Object)basicStroke0));
      assertTrue(basicStroke4.equals((Object)basicStroke3));
      assertTrue(basicStroke4.equals((Object)basicStroke1));
      assertEquals(2, basicStroke4.getEndCap());
      assertEquals(0.0F, basicStroke4.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke4.getLineJoin());
      assertEquals(1.0F, basicStroke4.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke4.getMiterLimit(), 0.01F);
      assertNotSame(basicStroke4, basicStroke1);
      assertNotSame(basicStroke4, basicStroke0);
      assertNotSame(basicStroke4, basicStroke3);
      assertNotSame(basicStroke4, basicStroke2);
      assertNotNull(basicStroke4);
      
      strokeArray0[4] = (Stroke) basicStroke4;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotNull(defaultDrawingSupplier1);
      
      BasicStroke basicStroke5 = (BasicStroke)defaultDrawingSupplier1.getNextStroke();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertTrue(basicStroke5.equals((Object)basicStroke1));
      assertTrue(basicStroke5.equals((Object)basicStroke3));
      assertTrue(basicStroke5.equals((Object)basicStroke0));
      assertTrue(basicStroke5.equals((Object)basicStroke2));
      assertEquals(1.0F, basicStroke5.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke5.getLineJoin());
      assertEquals(10.0F, basicStroke5.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke5.getEndCap());
      assertEquals(0.0F, basicStroke5.getDashPhase(), 0.01F);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(basicStroke5, basicStroke3);
      assertNotSame(basicStroke5, basicStroke1);
      assertNotSame(basicStroke5, basicStroke2);
      assertNotSame(basicStroke5, basicStroke0);
      assertSame(basicStroke5, basicStroke4);
      assertNotNull(basicStroke5);
      
      strokeArray0[5] = (Stroke) basicStroke5;
      DefaultDrawingSupplier defaultDrawingSupplier2 = new DefaultDrawingSupplier(paintArray0, paintArray0, paintArray0, strokeArray0, strokeArray0, defaultDrawingSupplier1.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(2, paintArray0.length);
      assertEquals(6, strokeArray0.length);
      assertNotNull(defaultDrawingSupplier2);
      
      Paint paint0 = defaultDrawingSupplier2.getNextFillPaint();
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertEquals(2, paintArray0.length);
      assertEquals(6, strokeArray0.length);
      assertNull(paint0);
      
      paintArray0[0] = null;
      Paint paint1 = defaultDrawingSupplier2.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertEquals(2, paintArray0.length);
      assertEquals(6, strokeArray0.length);
      assertNull(paint1);
      
      paintArray0[1] = null;
      DefaultDrawingSupplier defaultDrawingSupplier3 = new DefaultDrawingSupplier(paintArray0, defaultDrawingSupplier1.DEFAULT_FILL_PAINT_SEQUENCE, strokeArray0, strokeArray0, defaultDrawingSupplier1.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(2, paintArray0.length);
      assertEquals(6, strokeArray0.length);
      assertNotNull(defaultDrawingSupplier3);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultDrawingSupplier3.getNextShape();
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertEquals(2, paintArray0.length);
      assertEquals(6, strokeArray0.length);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[1];
      Stroke[] strokeArray0 = new Stroke[6];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      strokeArray0[0] = (Stroke) basicStroke0;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotNull(defaultDrawingSupplier1);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier1.getNextStroke();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertTrue(basicStroke1.equals((Object)basicStroke0));
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      strokeArray0[1] = (Stroke) basicStroke1;
      DefaultDrawingSupplier defaultDrawingSupplier2 = new DefaultDrawingSupplier();
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertNotNull(defaultDrawingSupplier2);
      
      BasicStroke basicStroke2 = (BasicStroke)defaultDrawingSupplier2.getNextStroke();
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertTrue(basicStroke2.equals((Object)basicStroke0));
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke2.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke2.getLineJoin());
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertSame(basicStroke2, basicStroke1);
      assertNotSame(basicStroke2, basicStroke0);
      assertNotNull(basicStroke2);
      
      strokeArray0[2] = (Stroke) basicStroke2;
      BasicStroke basicStroke3 = (BasicStroke)defaultDrawingSupplier1.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertTrue(basicStroke3.equals((Object)basicStroke1));
      assertTrue(basicStroke3.equals((Object)basicStroke2));
      assertEquals(2, basicStroke3.getLineJoin());
      assertEquals(2, basicStroke3.getEndCap());
      assertEquals(1.0F, basicStroke3.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke3.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke3.getMiterLimit(), 0.01F);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(basicStroke3, basicStroke2);
      assertNotSame(basicStroke3, basicStroke1);
      assertSame(basicStroke3, basicStroke0);
      assertNotNull(basicStroke3);
      
      Color color0 = (Color)defaultDrawingSupplier2.getNextFillPaint();
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotNull(color0);
      
      strokeArray0[3] = (Stroke) basicStroke3;
      Shape[] shapeArray1 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray1.equals((Object)shapeArray0));
      assertNotSame(shapeArray1, shapeArray0);
      assertEquals(10, shapeArray1.length);
      assertNotNull(shapeArray1);
      
      BasicStroke basicStroke4 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(basicStroke4.equals((Object)basicStroke1));
      assertTrue(basicStroke4.equals((Object)basicStroke2));
      assertEquals(2, basicStroke4.getEndCap());
      assertEquals(0.0F, basicStroke4.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke4.getLineJoin());
      assertEquals(1.0F, basicStroke4.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke4.getMiterLimit(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertSame(basicStroke4, basicStroke0);
      assertNotSame(basicStroke4, basicStroke1);
      assertNotSame(basicStroke4, basicStroke2);
      assertSame(basicStroke4, basicStroke3);
      assertNotNull(basicStroke4);
      
      strokeArray0[4] = (Stroke) basicStroke4;
      BasicStroke basicStroke5 = (BasicStroke)defaultDrawingSupplier2.getNextOutlineStroke();
      assertTrue(basicStroke5.equals((Object)basicStroke1));
      assertTrue(basicStroke5.equals((Object)basicStroke2));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertEquals(2, basicStroke5.getEndCap());
      assertEquals(1.0F, basicStroke5.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke5.getLineJoin());
      assertEquals(0.0F, basicStroke5.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke5.getMiterLimit(), 0.01F);
      assertNotSame(basicStroke5, basicStroke2);
      assertSame(basicStroke5, basicStroke3);
      assertNotSame(basicStroke5, basicStroke1);
      assertSame(basicStroke5, basicStroke0);
      assertSame(basicStroke5, basicStroke4);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotNull(basicStroke5);
      
      strokeArray0[5] = (Stroke) basicStroke5;
      DefaultDrawingSupplier defaultDrawingSupplier3 = new DefaultDrawingSupplier(defaultDrawingSupplier1.DEFAULT_OUTLINE_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_PAINT_SEQUENCE, defaultDrawingSupplier2.DEFAULT_FILL_PAINT_SEQUENCE, strokeArray0, (Stroke[]) null, defaultDrawingSupplier2.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertEquals(6, strokeArray0.length);
      assertNotNull(defaultDrawingSupplier3);
      
      Color color1 = (Color)defaultDrawingSupplier3.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(color1.equals((Object)color0));
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertEquals(192, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(192, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(192, color1.getBlue());
      assertEquals((-4144960), color1.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(color1, color0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertEquals(6, strokeArray0.length);
      assertNotNull(color1);
      
      BasicStroke basicStroke6 = (BasicStroke)defaultDrawingSupplier3.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertTrue(basicStroke6.equals((Object)basicStroke1));
      assertTrue(basicStroke6.equals((Object)basicStroke2));
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertEquals(0.0F, basicStroke6.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke6.getLineJoin());
      assertEquals(1.0F, basicStroke6.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke6.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke6.getEndCap());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(basicStroke6, basicStroke2);
      assertNotSame(basicStroke6, basicStroke1);
      assertSame(basicStroke6, basicStroke5);
      assertSame(basicStroke6, basicStroke4);
      assertSame(basicStroke6, basicStroke0);
      assertSame(basicStroke6, basicStroke3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertEquals(6, strokeArray0.length);
      assertNotNull(basicStroke6);
      
      boolean boolean0 = defaultDrawingSupplier0.equals(defaultDrawingSupplier3);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertEquals(6, strokeArray0.length);
      assertFalse(boolean0);
      
      DefaultDrawingSupplier defaultDrawingSupplier4 = new DefaultDrawingSupplier((Paint[]) null, (Paint[]) null, (Stroke[]) null, strokeArray0, defaultDrawingSupplier2.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertEquals(6, strokeArray0.length);
      assertNotNull(defaultDrawingSupplier4);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultDrawingSupplier4.getNextShape();
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier4));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertEquals(6, strokeArray0.length);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      shapeArray0[0] = (Shape) rectangle2D_Double0;
      DefaultDrawingSupplier defaultDrawingSupplier5 = new DefaultDrawingSupplier((Paint[]) null, (Paint[]) null, (Paint[]) null, (Stroke[]) null, (Stroke[]) null, shapeArray0);
      assertFalse(shapeArray0.equals((Object)shapeArray1));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier2));
      assertEquals(1, shapeArray0.length);
      assertNotNull(defaultDrawingSupplier5);
      
      // Undeclared exception!
      try { 
        defaultDrawingSupplier5.getNextOutlineStroke();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.DefaultDrawingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Paint[] paintArray0 = new Paint[0];
      Stroke[] strokeArray0 = new Stroke[7];
      Shape[] shapeArray0 = new Shape[0];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray0, paintArray0, strokeArray0, strokeArray0, shapeArray0);
      assertEquals(0, paintArray0.length);
      assertEquals(7, strokeArray0.length);
      assertEquals(0, shapeArray0.length);
      assertNotNull(defaultDrawingSupplier0);
      
      Stroke stroke0 = defaultDrawingSupplier0.getNextStroke();
      assertEquals(0, paintArray0.length);
      assertEquals(7, strokeArray0.length);
      assertEquals(0, shapeArray0.length);
      assertNull(stroke0);
      
      strokeArray0[0] = null;
      Stroke stroke1 = defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(0, paintArray0.length);
      assertEquals(7, strokeArray0.length);
      assertEquals(0, shapeArray0.length);
      assertNull(stroke1);
      
      strokeArray0[1] = null;
      Stroke stroke2 = defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(0, paintArray0.length);
      assertEquals(7, strokeArray0.length);
      assertEquals(0, shapeArray0.length);
      assertNull(stroke2);
      
      strokeArray0[2] = null;
      Stroke stroke3 = defaultDrawingSupplier0.getNextStroke();
      assertEquals(0, paintArray0.length);
      assertEquals(7, strokeArray0.length);
      assertEquals(0, shapeArray0.length);
      assertNull(stroke3);
      
      strokeArray0[3] = null;
      Stroke stroke4 = defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(0, paintArray0.length);
      assertEquals(7, strokeArray0.length);
      assertEquals(0, shapeArray0.length);
      assertNull(stroke4);
      
      strokeArray0[4] = null;
      Stroke stroke5 = defaultDrawingSupplier0.getNextStroke();
      assertEquals(0, paintArray0.length);
      assertEquals(7, strokeArray0.length);
      assertEquals(0, shapeArray0.length);
      assertNull(stroke5);
      
      strokeArray0[5] = null;
      Stroke stroke6 = defaultDrawingSupplier0.getNextStroke();
      assertEquals(0, paintArray0.length);
      assertEquals(7, strokeArray0.length);
      assertEquals(0, shapeArray0.length);
      assertNull(stroke6);
      
      strokeArray0[6] = null;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(paintArray0, paintArray0, strokeArray0, strokeArray0, shapeArray0);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(0, paintArray0.length);
      assertEquals(7, strokeArray0.length);
      assertEquals(0, shapeArray0.length);
      assertNotNull(defaultDrawingSupplier1);
      
      // Undeclared exception!
      try { 
        defaultDrawingSupplier1.getNextPaint();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.plot.DefaultDrawingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Paint[] paintArray0 = new Paint[2];
      Shape[] shapeArray0 = new Shape[9];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray0, (Stroke[]) null, (Stroke[]) null, shapeArray0);
      assertEquals(2, paintArray0.length);
      assertEquals(9, shapeArray0.length);
      assertNotNull(defaultDrawingSupplier0);
      
      Paint paint0 = defaultDrawingSupplier0.getNextPaint();
      assertEquals(2, paintArray0.length);
      assertEquals(9, shapeArray0.length);
      assertNull(paint0);
      
      paintArray0[0] = null;
      Paint[] paintArray1 = new Paint[5];
      assertFalse(paintArray1.equals((Object)paintArray0));
      
      paintArray1[2] = null;
      Shape[] shapeArray1 = new Shape[1];
      assertFalse(shapeArray1.equals((Object)shapeArray0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Paint[] paintArray0 = new Paint[2];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(192, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getRed());
      assertNotNull(color0);
      
      paintArray0[0] = (Paint) color0;
      Color color1 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(color1.equals((Object)color0));
      assertEquals(85, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertEquals((-43691), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getRed());
      assertEquals(85, color1.getBlue());
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      paintArray0[1] = (Paint) color1;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(paintArray0, paintArray0, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(2, paintArray0.length);
      assertNotNull(defaultDrawingSupplier1);
      
      Color color2 = (Color)defaultDrawingSupplier1.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(color2.equals((Object)color1));
      assertEquals((-4144960), color2.getRGB());
      assertEquals(192, color2.getRed());
      assertEquals(192, color2.getGreen());
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
      assertEquals(192, color2.getBlue());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(color2, color1);
      assertSame(color2, color0);
      assertEquals(2, paintArray0.length);
      assertNotNull(color2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      Color color1 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertEquals((-1), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getGreen());
      assertSame(color1, color0);
      assertNotNull(color1);
      
      Stroke[] strokeArray0 = new Stroke[1];
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
      
      strokeArray0[0] = (Stroke) basicStroke0;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, strokeArray0, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(1, strokeArray0.length);
      assertNotNull(defaultDrawingSupplier1);
      
      Color color2 = (Color)defaultDrawingSupplier1.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(color2.equals((Object)color1));
      assertFalse(color2.equals((Object)color0));
      assertEquals(85, color2.getBlue());
      assertEquals(255, color2.getRed());
      assertEquals(255, color2.getAlpha());
      assertEquals(85, color2.getGreen());
      assertEquals((-43691), color2.getRGB());
      assertEquals(1, color2.getTransparency());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(color2, color1);
      assertNotSame(color2, color0);
      assertEquals(1, strokeArray0.length);
      assertNotNull(color2);
      
      boolean boolean0 = defaultDrawingSupplier0.equals(defaultDrawingSupplier1);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertEquals(1, strokeArray0.length);
      assertFalse(boolean0);
      
      Color color3 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color3.equals((Object)color2));
      assertFalse(color3.equals((Object)color1));
      assertFalse(color3.equals((Object)color0));
      assertEquals(192, color3.getGreen());
      assertEquals(1, color3.getTransparency());
      assertEquals(192, color3.getRed());
      assertEquals((-4144960), color3.getRGB());
      assertEquals(192, color3.getBlue());
      assertEquals(255, color3.getAlpha());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color3, color2);
      assertNotSame(color3, color1);
      assertNotSame(color3, color0);
      assertNotNull(color3);
      
      Color color4 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color4.equals((Object)color3));
      assertFalse(color4.equals((Object)color1));
      assertFalse(color4.equals((Object)color0));
      assertEquals((-43691), color4.getRGB());
      assertEquals(85, color4.getBlue());
      assertEquals(255, color4.getAlpha());
      assertEquals(255, color4.getRed());
      assertEquals(1, color4.getTransparency());
      assertEquals(85, color4.getGreen());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color4, color3);
      assertNotSame(color4, color1);
      assertSame(color4, color2);
      assertNotSame(color4, color0);
      assertNotNull(color4);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = new DefaultDrawingSupplier();
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertNotNull(defaultDrawingSupplier2);
      
      boolean boolean1 = defaultDrawingSupplier1.equals(defaultDrawingSupplier2);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertEquals(1, strokeArray0.length);
      assertFalse(boolean1);
      
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertEquals(10, shapeArray0.length);
      assertNotNull(shapeArray0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultDrawingSupplier0.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      DefaultDrawingSupplier defaultDrawingSupplier3 = (DefaultDrawingSupplier)defaultDrawingSupplier1.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertEquals(1, strokeArray0.length);
      assertNotNull(defaultDrawingSupplier3);
      
      boolean boolean2 = defaultDrawingSupplier0.equals(defaultDrawingSupplier3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertEquals(1, strokeArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Paint[] paintArray0 = new Paint[2];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertEquals((-43691), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(85, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(85, color0.getBlue());
      assertNotNull(color0);
      
      paintArray0[0] = (Paint) color0;
      Color color1 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(color1.equals((Object)color0));
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals(192, color1.getBlue());
      assertEquals(192, color1.getGreen());
      assertEquals((-4144960), color1.getRGB());
      assertEquals(192, color1.getRed());
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      paintArray0[1] = (Paint) color1;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(paintArray0, defaultDrawingSupplier0.DEFAULT_OUTLINE_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(2, paintArray0.length);
      assertNotNull(defaultDrawingSupplier1);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertEquals(2, paintArray0.length);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Color color2 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color2.equals((Object)color1));
      assertFalse(color2.equals((Object)color0));
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
      assertEquals(85, color2.getRed());
      assertEquals(255, color2.getBlue());
      assertEquals(85, color2.getGreen());
      assertEquals((-11184641), color2.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color2, color1);
      assertNotSame(color2, color0);
      assertNotNull(color2);
      
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertEquals(10, shapeArray0.length);
      assertNotNull(shapeArray0);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = (DefaultDrawingSupplier)defaultDrawingSupplier1.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertEquals(2, paintArray0.length);
      assertNotNull(defaultDrawingSupplier2);
      
      Color color3 = (Color)defaultDrawingSupplier1.getNextFillPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(color3.equals((Object)color2));
      assertFalse(color3.equals((Object)color0));
      assertEquals(255, color3.getAlpha());
      assertEquals(192, color3.getGreen());
      assertEquals(192, color3.getBlue());
      assertEquals((-4144960), color3.getRGB());
      assertEquals(192, color3.getRed());
      assertEquals(1, color3.getTransparency());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(color3, color2);
      assertNotSame(color3, color0);
      assertSame(color3, color1);
      assertEquals(2, paintArray0.length);
      assertNotNull(color3);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotNull(basicStroke0);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier1.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertTrue(basicStroke1.equals((Object)basicStroke0));
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(basicStroke1, basicStroke0);
      assertEquals(2, paintArray0.length);
      assertNotNull(basicStroke1);
      
      BasicStroke basicStroke2 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertTrue(basicStroke2.equals((Object)basicStroke0));
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke2.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke2.getLineJoin());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertSame(basicStroke2, basicStroke1);
      assertNotSame(basicStroke2, basicStroke0);
      assertNotNull(basicStroke2);
      
      Color color4 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(color4.equals((Object)color2));
      assertFalse(color4.equals((Object)color3));
      assertFalse(color4.equals((Object)color0));
      assertFalse(color4.equals((Object)color1));
      assertEquals(85, color4.getRed());
      assertEquals(85, color4.getBlue());
      assertEquals((-11141291), color4.getRGB());
      assertEquals(255, color4.getGreen());
      assertEquals(1, color4.getTransparency());
      assertEquals(255, color4.getAlpha());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(color4, color2);
      assertNotSame(color4, color3);
      assertNotSame(color4, color0);
      assertNotSame(color4, color1);
      assertNotNull(color4);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertEquals(10, shapeArray0.length);
      assertNotNull(shapeArray0);
      
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      Color color1 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(color1.equals((Object)color0));
      assertEquals((-4144960), color1.getRGB());
      assertEquals(192, color1.getRed());
      assertEquals(192, color1.getBlue());
      assertEquals(192, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      DefaultDrawingSupplier defaultDrawingSupplier1 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotNull(defaultDrawingSupplier1);
      
      Color color2 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color2.equals((Object)color1));
      assertEquals(255, color2.getBlue());
      assertEquals(255, color2.getRed());
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
      assertEquals(255, color2.getGreen());
      assertEquals((-1), color2.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertSame(color2, color0);
      assertNotSame(color2, color1);
      assertNotNull(color2);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotNull(defaultDrawingSupplier2);
      
      DefaultDrawingSupplier defaultDrawingSupplier3 = new DefaultDrawingSupplier(defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, shapeArray0);
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertEquals(10, shapeArray0.length);
      assertNotNull(defaultDrawingSupplier3);
      
      boolean boolean0 = defaultDrawingSupplier0.equals(defaultDrawingSupplier3);
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertEquals(10, shapeArray0.length);
      assertFalse(boolean0);
      
      Shape[] shapeArray1 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray1.equals((Object)shapeArray0));
      assertNotSame(shapeArray1, shapeArray0);
      assertEquals(10, shapeArray1.length);
      assertNotNull(shapeArray1);
      
      Color color3 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(color3.equals((Object)color1));
      assertEquals(255, color3.getGreen());
      assertEquals(255, color3.getRed());
      assertEquals(255, color3.getBlue());
      assertEquals(255, color3.getAlpha());
      assertEquals((-1), color3.getRGB());
      assertEquals(1, color3.getTransparency());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertSame(color3, color0);
      assertNotSame(color3, color1);
      assertSame(color3, color2);
      assertNotNull(color3);
      
      Shape[] shapeArray2 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray2.equals((Object)shapeArray1));
      assertFalse(shapeArray2.equals((Object)shapeArray0));
      assertNotSame(shapeArray2, shapeArray1);
      assertNotSame(shapeArray2, shapeArray0);
      assertEquals(10, shapeArray2.length);
      assertNotNull(shapeArray2);
      
      Shape[] shapeArray3 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray3.equals((Object)shapeArray2));
      assertFalse(shapeArray3.equals((Object)shapeArray1));
      assertFalse(shapeArray3.equals((Object)shapeArray0));
      assertNotSame(shapeArray3, shapeArray2);
      assertNotSame(shapeArray3, shapeArray1);
      assertNotSame(shapeArray3, shapeArray0);
      assertEquals(10, shapeArray3.length);
      assertNotNull(shapeArray3);
      
      Color color4 = (Color)defaultDrawingSupplier3.getNextFillPaint();
      assertFalse(shapeArray0.equals((Object)shapeArray1));
      assertFalse(shapeArray0.equals((Object)shapeArray2));
      assertFalse(shapeArray0.equals((Object)shapeArray3));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(color4.equals((Object)color1));
      assertEquals(255, color4.getRed());
      assertEquals(255, color4.getBlue());
      assertEquals(255, color4.getAlpha());
      assertEquals(255, color4.getGreen());
      assertEquals((-1), color4.getRGB());
      assertEquals(1, color4.getTransparency());
      assertNotSame(shapeArray0, shapeArray1);
      assertNotSame(shapeArray0, shapeArray2);
      assertNotSame(shapeArray0, shapeArray3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(color4, color1);
      assertSame(color4, color0);
      assertSame(color4, color2);
      assertSame(color4, color3);
      assertEquals(10, shapeArray0.length);
      assertNotNull(color4);
      
      Color color5 = (Color)defaultDrawingSupplier3.getNextFillPaint();
      assertFalse(shapeArray0.equals((Object)shapeArray1));
      assertFalse(shapeArray0.equals((Object)shapeArray2));
      assertFalse(shapeArray0.equals((Object)shapeArray3));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(color5.equals((Object)color1));
      assertEquals(255, color5.getRed());
      assertEquals(1, color5.getTransparency());
      assertEquals(255, color5.getAlpha());
      assertEquals((-1), color5.getRGB());
      assertEquals(255, color5.getBlue());
      assertEquals(255, color5.getGreen());
      assertNotSame(shapeArray0, shapeArray1);
      assertNotSame(shapeArray0, shapeArray2);
      assertNotSame(shapeArray0, shapeArray3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertSame(color5, color2);
      assertSame(color5, color3);
      assertSame(color5, color0);
      assertNotSame(color5, color1);
      assertSame(color5, color4);
      assertEquals(10, shapeArray0.length);
      assertNotNull(color5);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultDrawingSupplier0.getNextShape();
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      DefaultDrawingSupplier defaultDrawingSupplier1 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotNull(defaultDrawingSupplier1);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotNull(defaultDrawingSupplier2);
      
      DefaultDrawingSupplier defaultDrawingSupplier3 = new DefaultDrawingSupplier(defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertNotNull(defaultDrawingSupplier3);
      
      Color color1 = (Color)defaultDrawingSupplier3.getNextPaint();
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(color1.equals((Object)color0));
      assertEquals(85, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertEquals(85, color1.getGreen());
      assertEquals((-43691), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      boolean boolean0 = defaultDrawingSupplier0.equals(defaultDrawingSupplier3);
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertFalse(boolean0);
      
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)defaultDrawingSupplier0.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertEquals((-3.0), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertEquals(6.0, ellipse2D_Double0.height, 0.01);
      assertEquals(6.0, ellipse2D_Double0.width, 0.01);
      assertEquals((-3.0), ellipse2D_Double0.x, 0.01);
      assertEquals((-3.0), ellipse2D_Double0.y, 0.01);
      assertNotNull(ellipse2D_Double0);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      Color color2 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(color2.equals((Object)color0));
      assertEquals(1, color2.getTransparency());
      assertEquals(85, color2.getBlue());
      assertEquals(255, color2.getRed());
      assertEquals(85, color2.getGreen());
      assertEquals(255, color2.getAlpha());
      assertEquals((-43691), color2.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(color2, color0);
      assertSame(color2, color1);
      assertNotNull(color2);
      
      Color color3 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(color3.equals((Object)color1));
      assertFalse(color3.equals((Object)color2));
      assertEquals(1, color3.getTransparency());
      assertEquals(255, color3.getRed());
      assertEquals(255, color3.getBlue());
      assertEquals(255, color3.getAlpha());
      assertEquals(255, color3.getGreen());
      assertEquals((-1), color3.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(color3, color1);
      assertNotSame(color3, color2);
      assertSame(color3, color0);
      assertNotNull(color3);
      
      boolean boolean1 = defaultDrawingSupplier0.equals(rectangle2D_Double0);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(boolean1 == boolean0);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertFalse(boolean1);
      
      Color color4 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(color4.equals((Object)color3));
      assertFalse(color4.equals((Object)color0));
      assertFalse(color4.equals((Object)color1));
      assertFalse(color4.equals((Object)color2));
      assertEquals(192, color4.getGreen());
      assertEquals(1, color4.getTransparency());
      assertEquals(255, color4.getAlpha());
      assertEquals(192, color4.getRed());
      assertEquals((-4144960), color4.getRGB());
      assertEquals(192, color4.getBlue());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(color4, color3);
      assertNotSame(color4, color0);
      assertNotSame(color4, color1);
      assertNotSame(color4, color2);
      assertNotNull(color4);
      
      Color color5 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(color5.equals((Object)color2));
      assertFalse(color5.equals((Object)color1));
      assertFalse(color5.equals((Object)color4));
      assertFalse(color5.equals((Object)color0));
      assertFalse(color5.equals((Object)color3));
      assertEquals(255, color5.getBlue());
      assertEquals(85, color5.getRed());
      assertEquals((-11184641), color5.getRGB());
      assertEquals(255, color5.getAlpha());
      assertEquals(85, color5.getGreen());
      assertEquals(1, color5.getTransparency());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(color5, color2);
      assertNotSame(color5, color1);
      assertNotSame(color5, color4);
      assertNotSame(color5, color0);
      assertNotSame(color5, color3);
      assertNotNull(color5);
      
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertEquals(10, shapeArray0.length);
      assertNotNull(shapeArray0);
      
      Color color6 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(color6.equals((Object)color5));
      assertFalse(color6.equals((Object)color0));
      assertFalse(color6.equals((Object)color3));
      assertFalse(color6.equals((Object)color1));
      assertFalse(color6.equals((Object)color2));
      assertFalse(color6.equals((Object)color4));
      assertEquals(255, color6.getAlpha());
      assertEquals(1, color6.getTransparency());
      assertEquals(85, color6.getBlue());
      assertEquals(255, color6.getGreen());
      assertEquals((-11141291), color6.getRGB());
      assertEquals(85, color6.getRed());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(color6, color5);
      assertNotSame(color6, color0);
      assertNotSame(color6, color3);
      assertNotSame(color6, color1);
      assertNotSame(color6, color2);
      assertNotSame(color6, color4);
      assertNotNull(color6);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)defaultDrawingSupplier3.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertEquals(6.0, rectangle2D_Double1.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double1.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double1.x, 0.01);
      assertEquals(6.0, rectangle2D_Double1.width, 0.01);
      assertNotNull(rectangle2D_Double1);
      
      DefaultDrawingSupplier defaultDrawingSupplier4 = (DefaultDrawingSupplier)defaultDrawingSupplier3.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotNull(defaultDrawingSupplier4);
      
      boolean boolean2 = defaultDrawingSupplier0.equals(defaultDrawingSupplier4);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertFalse(boolean2);
      
      BasicStroke basicStroke2 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(basicStroke2.equals((Object)basicStroke0));
      assertTrue(basicStroke2.equals((Object)basicStroke1));
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(2, basicStroke2.getLineJoin());
      assertEquals(1.0F, basicStroke2.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(basicStroke2, basicStroke1);
      assertNotSame(basicStroke2, basicStroke0);
      assertNotNull(basicStroke2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Paint[] paintArray0 = new Paint[1];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertEquals((-43691), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(85, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(85, color0.getBlue());
      assertNotNull(color0);
      
      paintArray0[0] = (Paint) color0;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(paintArray0, defaultDrawingSupplier0.DEFAULT_FILL_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(1, paintArray0.length);
      assertNotNull(defaultDrawingSupplier1);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = new DefaultDrawingSupplier(defaultDrawingSupplier1.DEFAULT_PAINT_SEQUENCE, defaultDrawingSupplier1.DEFAULT_FILL_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier1.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertEquals(1, paintArray0.length);
      assertNotNull(defaultDrawingSupplier2);
      
      Color color1 = (Color)defaultDrawingSupplier2.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(color1.equals((Object)color0));
      assertEquals((-4144960), color1.getRGB());
      assertEquals(192, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(192, color1.getBlue());
      assertEquals(192, color1.getGreen());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(color1, color0);
      assertEquals(1, paintArray0.length);
      assertNotNull(color1);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultDrawingSupplier2.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertEquals(1, paintArray0.length);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      boolean boolean0 = defaultDrawingSupplier0.equals(defaultDrawingSupplier2);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertEquals(1, paintArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = defaultDrawingSupplier2.equals(defaultDrawingSupplier1);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertEquals(1, paintArray0.length);
      assertFalse(boolean1);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(1, paintArray0.length);
      assertEquals(6.0, rectangle2D_Double1.height, 0.01);
      assertEquals(6.0, rectangle2D_Double1.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double1.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double1.y, 0.01);
      assertNotNull(rectangle2D_Double1);
      
      boolean boolean2 = defaultDrawingSupplier1.equals(color1);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(color1.equals((Object)color0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((-4144960), color1.getRGB());
      assertEquals(192, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(192, color1.getBlue());
      assertEquals(192, color1.getGreen());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(color1, color0);
      assertEquals(1, paintArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = defaultDrawingSupplier1.equals(defaultDrawingSupplier2);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertEquals(1, paintArray0.length);
      assertFalse(boolean3);
      
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertEquals(1, paintArray0.length);
      assertEquals(6.0, ellipse2D_Double0.width, 0.01);
      assertEquals((-3.0), ellipse2D_Double0.x, 0.01);
      assertEquals(6.0, ellipse2D_Double0.height, 0.01);
      assertEquals((-3.0), ellipse2D_Double0.y, 0.01);
      assertNotNull(ellipse2D_Double0);
      
      DefaultDrawingSupplier defaultDrawingSupplier3 = (DefaultDrawingSupplier)defaultDrawingSupplier2.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertEquals(1, paintArray0.length);
      assertNotNull(defaultDrawingSupplier3);
      
      Color color2 = (Color)defaultDrawingSupplier2.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(color2.equals((Object)color1));
      assertEquals(1, color2.getTransparency());
      assertEquals((-43691), color2.getRGB());
      assertEquals(255, color2.getAlpha());
      assertEquals(85, color2.getGreen());
      assertEquals(255, color2.getRed());
      assertEquals(85, color2.getBlue());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertSame(color2, color0);
      assertNotSame(color2, color1);
      assertEquals(1, paintArray0.length);
      assertNotNull(color2);
      
      Color color3 = (Color)defaultDrawingSupplier1.getNextFillPaint();
      assertFalse(color3.equals((Object)color0));
      assertFalse(color3.equals((Object)color2));
      assertFalse(color3.equals((Object)color1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertEquals(255, color3.getGreen());
      assertEquals(255, color3.getAlpha());
      assertEquals(255, color3.getRed());
      assertEquals(255, color3.getBlue());
      assertEquals((-1), color3.getRGB());
      assertEquals(1, color3.getTransparency());
      assertNotSame(color3, color0);
      assertNotSame(color3, color2);
      assertNotSame(color3, color1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertEquals(1, paintArray0.length);
      assertNotNull(color3);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier1.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertEquals(1, paintArray0.length);
      assertNotNull(basicStroke0);
      
      Ellipse2D.Double ellipse2D_Double1 = (Ellipse2D.Double)defaultDrawingSupplier2.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertEquals(0.0, ellipse2D_Double1.getCenterY(), 0.01);
      assertEquals(3.0, ellipse2D_Double1.getMaxY(), 0.01);
      assertEquals(3.0, ellipse2D_Double1.getMaxX(), 0.01);
      assertEquals((-3.0), ellipse2D_Double1.getMinY(), 0.01);
      assertEquals((-3.0), ellipse2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Double1.getCenterX(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertSame(ellipse2D_Double1, ellipse2D_Double0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertEquals(1, paintArray0.length);
      assertEquals((-3.0), ellipse2D_Double1.y, 0.01);
      assertEquals(6.0, ellipse2D_Double1.width, 0.01);
      assertEquals((-3.0), ellipse2D_Double1.x, 0.01);
      assertEquals(6.0, ellipse2D_Double1.height, 0.01);
      assertNotNull(ellipse2D_Double1);
      
      Polygon polygon0 = (Polygon)defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertEquals(1, paintArray0.length);
      assertEquals(3, polygon0.npoints);
      assertNotNull(polygon0);
      
      Polygon polygon1 = (Polygon)defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(polygon1, polygon0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertEquals(1, paintArray0.length);
      assertEquals(4, polygon1.npoints);
      assertNotNull(polygon1);
      
      Color color4 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color4.equals((Object)color0));
      assertFalse(color4.equals((Object)color2));
      assertFalse(color4.equals((Object)color3));
      assertFalse(color4.equals((Object)color1));
      assertEquals(85, color4.getRed());
      assertEquals((-11184641), color4.getRGB());
      assertEquals(255, color4.getBlue());
      assertEquals(255, color4.getAlpha());
      assertEquals(1, color4.getTransparency());
      assertEquals(85, color4.getGreen());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color4, color0);
      assertNotSame(color4, color2);
      assertNotSame(color4, color3);
      assertNotSame(color4, color1);
      assertNotNull(color4);
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertEquals((-3.0), rectangle2D_Double2.getMinX(), 0.01);
      assertEquals((-1.5), rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(1.5, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertEquals(1, paintArray0.length);
      assertEquals(3.0, rectangle2D_Double2.height, 0.01);
      assertEquals(6.0, rectangle2D_Double2.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double2.x, 0.01);
      assertEquals((-1.5), rectangle2D_Double2.y, 0.01);
      assertNotNull(rectangle2D_Double2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultDrawingSupplier0.getNextShape();
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(defaultDrawingSupplier0.DEFAULT_OUTLINE_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_FILL_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_FILL_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotNull(defaultDrawingSupplier1);
      
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertEquals(10, shapeArray0.length);
      assertNotNull(shapeArray0);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = (DefaultDrawingSupplier)defaultDrawingSupplier1.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotNull(defaultDrawingSupplier2);
      
      Color color0 = (Color)defaultDrawingSupplier1.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotNull(color0);
      
      Color color1 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getGreen());
      assertEquals((-1), color1.getRGB());
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertSame(color1, color0);
      assertNotNull(color1);
      
      boolean boolean0 = defaultDrawingSupplier0.equals(defaultDrawingSupplier1);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertFalse(boolean0);
      
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)defaultDrawingSupplier0.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertEquals((-3.0), ellipse2D_Double0.y, 0.01);
      assertEquals((-3.0), ellipse2D_Double0.x, 0.01);
      assertEquals(6.0, ellipse2D_Double0.width, 0.01);
      assertEquals(6.0, ellipse2D_Double0.height, 0.01);
      assertNotNull(ellipse2D_Double0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotNull(basicStroke0);
      
      Polygon polygon0 = (Polygon)defaultDrawingSupplier0.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertEquals(3, polygon0.npoints);
      assertNotNull(polygon0);
      
      Shape[] shapeArray1 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray1.equals((Object)shapeArray0));
      assertNotSame(shapeArray1, shapeArray0);
      assertEquals(10, shapeArray1.length);
      assertNotNull(shapeArray1);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(2, basicStroke1.getLineJoin());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      Polygon polygon1 = (Polygon)defaultDrawingSupplier0.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(polygon1.equals((Object)polygon0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(polygon1, polygon0);
      assertEquals(4, polygon1.npoints);
      assertNotNull(polygon1);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)defaultDrawingSupplier0.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-1.5), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(3.0, rectangle2D_Double1.height, 0.01);
      assertEquals(6.0, rectangle2D_Double1.width, 0.01);
      assertEquals((-1.5), rectangle2D_Double1.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double1.x, 0.01);
      assertNotNull(rectangle2D_Double1);
      
      DefaultDrawingSupplier defaultDrawingSupplier3 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertTrue(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotNull(defaultDrawingSupplier3);
      
      Shape[] shapeArray2 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray2.equals((Object)shapeArray0));
      assertFalse(shapeArray2.equals((Object)shapeArray1));
      assertNotSame(shapeArray2, shapeArray0);
      assertNotSame(shapeArray2, shapeArray1);
      assertEquals(10, shapeArray2.length);
      assertNotNull(shapeArray2);
      
      DefaultDrawingSupplier defaultDrawingSupplier4 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier2));
      assertTrue(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier1));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier0);
      assertNotNull(defaultDrawingSupplier4);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Stroke[] strokeArray0 = new Stroke[1];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      strokeArray0[0] = (Stroke) basicStroke0;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier((Paint[]) null, (Paint[]) null, strokeArray0, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(1, strokeArray0.length);
      assertNotNull(defaultDrawingSupplier1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Stroke[] strokeArray0 = new Stroke[2];
      Shape[] shapeArray0 = new Shape[0];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier((Paint[]) null, (Paint[]) null, (Paint[]) null, strokeArray0, strokeArray0, shapeArray0);
      assertEquals(2, strokeArray0.length);
      assertEquals(0, shapeArray0.length);
      assertNotNull(defaultDrawingSupplier0);
      
      Stroke stroke0 = defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(2, strokeArray0.length);
      assertEquals(0, shapeArray0.length);
      assertNull(stroke0);
      
      strokeArray0[0] = null;
      Stroke stroke1 = defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(2, strokeArray0.length);
      assertEquals(0, shapeArray0.length);
      assertNull(stroke1);
      
      strokeArray0[1] = null;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier((Paint[]) null, (Paint[]) null, strokeArray0, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(2, strokeArray0.length);
      assertEquals(0, shapeArray0.length);
      assertNotNull(defaultDrawingSupplier1);
      
      Object object0 = defaultDrawingSupplier1.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(object0.equals((Object)defaultDrawingSupplier0));
      assertTrue(object0.equals((Object)defaultDrawingSupplier1));
      assertNotSame(defaultDrawingSupplier0, object0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, object0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(object0, defaultDrawingSupplier0);
      assertNotSame(object0, defaultDrawingSupplier1);
      assertEquals(2, strokeArray0.length);
      assertEquals(0, shapeArray0.length);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertEquals(192, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertNotNull(color0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultDrawingSupplier0.getNextShape();
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      DefaultDrawingSupplier defaultDrawingSupplier1 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotNull(defaultDrawingSupplier1);
      
      Color color1 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(192, color1.getRed());
      assertEquals(192, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals(192, color1.getGreen());
      assertEquals((-4144960), color1.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertSame(color1, color0);
      assertNotNull(color1);
      
      boolean boolean0 = defaultDrawingSupplier0.equals(basicStroke1);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertSame(basicStroke1, basicStroke0);
      assertFalse(boolean0);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = new DefaultDrawingSupplier(defaultDrawingSupplier0.DEFAULT_OUTLINE_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_FILL_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertNotNull(defaultDrawingSupplier2);
      
      DefaultDrawingSupplier defaultDrawingSupplier3 = new DefaultDrawingSupplier(defaultDrawingSupplier2.DEFAULT_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_FILL_PAINT_SEQUENCE, defaultDrawingSupplier1.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier1.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertNotNull(defaultDrawingSupplier3);
      
      boolean boolean1 = defaultDrawingSupplier0.equals(defaultDrawingSupplier3);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertFalse(boolean1);
      
      Color color2 = (Color)defaultDrawingSupplier2.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertEquals(192, color2.getRed());
      assertEquals((-4144960), color2.getRGB());
      assertEquals(192, color2.getGreen());
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
      assertEquals(192, color2.getBlue());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertSame(color2, color0);
      assertSame(color2, color1);
      assertNotNull(color2);
      
      boolean boolean2 = defaultDrawingSupplier0.equals(defaultDrawingSupplier2);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertFalse(boolean2);
      
      DefaultDrawingSupplier defaultDrawingSupplier4 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier2);
      assertNotNull(defaultDrawingSupplier4);
      
      DefaultDrawingSupplier defaultDrawingSupplier5 = (DefaultDrawingSupplier)defaultDrawingSupplier2.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier4));
      assertTrue(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier3));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier3);
      assertNotNull(defaultDrawingSupplier5);
      
      boolean boolean3 = defaultDrawingSupplier2.equals(defaultDrawingSupplier5);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier4));
      assertTrue(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier3));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier3);
      assertTrue(boolean3);
      
      Color color3 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(color3.equals((Object)color0));
      assertFalse(color3.equals((Object)color1));
      assertFalse(color3.equals((Object)color2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertEquals((-1), color3.getRGB());
      assertEquals(255, color3.getGreen());
      assertEquals(1, color3.getTransparency());
      assertEquals(255, color3.getAlpha());
      assertEquals(255, color3.getBlue());
      assertEquals(255, color3.getRed());
      assertNotSame(color3, color0);
      assertNotSame(color3, color1);
      assertNotSame(color3, color2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotNull(color3);
      
      Color color4 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(color4.equals((Object)color2));
      assertFalse(color4.equals((Object)color0));
      assertFalse(color4.equals((Object)color1));
      assertEquals(255, color4.getBlue());
      assertEquals(255, color4.getGreen());
      assertEquals((-1), color4.getRGB());
      assertEquals(1, color4.getTransparency());
      assertEquals(255, color4.getAlpha());
      assertEquals(255, color4.getRed());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertSame(color4, color3);
      assertNotSame(color4, color2);
      assertNotSame(color4, color0);
      assertNotSame(color4, color1);
      assertNotNull(color4);
      
      Color color5 = (Color)defaultDrawingSupplier2.getNextFillPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(color5.equals((Object)color0));
      assertFalse(color5.equals((Object)color1));
      assertFalse(color5.equals((Object)color2));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertEquals(1, color5.getTransparency());
      assertEquals(255, color5.getAlpha());
      assertEquals((-1), color5.getRGB());
      assertEquals(255, color5.getBlue());
      assertEquals(255, color5.getGreen());
      assertEquals(255, color5.getRed());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(color5, color0);
      assertSame(color5, color4);
      assertNotSame(color5, color1);
      assertNotSame(color5, color2);
      assertSame(color5, color3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotNull(color5);
      
      Color color6 = (Color)defaultDrawingSupplier3.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(color6.equals((Object)color3));
      assertFalse(color6.equals((Object)color4));
      assertFalse(color6.equals((Object)color1));
      assertFalse(color6.equals((Object)color2));
      assertFalse(color6.equals((Object)color5));
      assertFalse(color6.equals((Object)color0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertEquals(85, color6.getBlue());
      assertEquals(1, color6.getTransparency());
      assertEquals(255, color6.getAlpha());
      assertEquals(255, color6.getRed());
      assertEquals(85, color6.getGreen());
      assertEquals((-43691), color6.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(color6, color3);
      assertNotSame(color6, color4);
      assertNotSame(color6, color1);
      assertNotSame(color6, color2);
      assertNotSame(color6, color5);
      assertNotSame(color6, color0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotNull(color6);
      
      Color color7 = (Color)defaultDrawingSupplier3.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(color7.equals((Object)color1));
      assertFalse(color7.equals((Object)color2));
      assertFalse(color7.equals((Object)color6));
      assertFalse(color7.equals((Object)color0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertEquals(255, color7.getGreen());
      assertEquals(1, color7.getTransparency());
      assertEquals(255, color7.getRed());
      assertEquals(255, color7.getBlue());
      assertEquals(255, color7.getAlpha());
      assertEquals((-1), color7.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(color7, color1);
      assertSame(color7, color5);
      assertSame(color7, color4);
      assertNotSame(color7, color2);
      assertSame(color7, color3);
      assertNotSame(color7, color6);
      assertNotSame(color7, color0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotNull(color7);
      
      Color color8 = (Color)defaultDrawingSupplier3.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(color8.equals((Object)color6));
      assertFalse(color8.equals((Object)color1));
      assertFalse(color8.equals((Object)color0));
      assertFalse(color8.equals((Object)color2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertEquals(255, color8.getAlpha());
      assertEquals(255, color8.getGreen());
      assertEquals((-1), color8.getRGB());
      assertEquals(1, color8.getTransparency());
      assertEquals(255, color8.getRed());
      assertEquals(255, color8.getBlue());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertSame(color8, color5);
      assertNotSame(color8, color1);
      assertNotSame(color8, color6);
      assertNotSame(color8, color0);
      assertSame(color8, color3);
      assertSame(color8, color4);
      assertNotSame(color8, color2);
      assertSame(color8, color7);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotNull(color8);
      
      Color color9 = (Color)defaultDrawingSupplier3.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(color9.equals((Object)color2));
      assertFalse(color9.equals((Object)color1));
      assertFalse(color9.equals((Object)color6));
      assertFalse(color9.equals((Object)color0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertEquals(255, color9.getRed());
      assertEquals(1, color9.getTransparency());
      assertEquals(255, color9.getAlpha());
      assertEquals(255, color9.getGreen());
      assertEquals((-1), color9.getRGB());
      assertEquals(255, color9.getBlue());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(color9, color2);
      assertSame(color9, color4);
      assertSame(color9, color5);
      assertNotSame(color9, color1);
      assertSame(color9, color7);
      assertSame(color9, color8);
      assertNotSame(color9, color0);
      assertNotSame(color9, color6);
      assertSame(color9, color3);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotNull(color9);
      
      Color color10 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(color10.equals((Object)color0));
      assertFalse(color10.equals((Object)color1));
      assertFalse(color10.equals((Object)color9));
      assertFalse(color10.equals((Object)color4));
      assertFalse(color10.equals((Object)color7));
      assertFalse(color10.equals((Object)color3));
      assertFalse(color10.equals((Object)color5));
      assertFalse(color10.equals((Object)color2));
      assertFalse(color10.equals((Object)color8));
      assertEquals((-43691), color10.getRGB());
      assertEquals(1, color10.getTransparency());
      assertEquals(255, color10.getAlpha());
      assertEquals(85, color10.getGreen());
      assertEquals(255, color10.getRed());
      assertEquals(85, color10.getBlue());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(color10, color0);
      assertNotSame(color10, color1);
      assertNotSame(color10, color9);
      assertNotSame(color10, color4);
      assertNotSame(color10, color7);
      assertSame(color10, color6);
      assertNotSame(color10, color3);
      assertNotSame(color10, color5);
      assertNotSame(color10, color2);
      assertNotSame(color10, color8);
      assertNotNull(color10);
      
      DefaultDrawingSupplier defaultDrawingSupplier6 = (DefaultDrawingSupplier)defaultDrawingSupplier2.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier6.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier6.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier6.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier6.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier6.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier6.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier6);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier6, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier6, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier6, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier6, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier6, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier6, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier6);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotNull(defaultDrawingSupplier6);
      
      boolean boolean4 = defaultDrawingSupplier3.equals(defaultDrawingSupplier6);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier6));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier6));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier6.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier6.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier6.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier6.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier6.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier6.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier6));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier3));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier6));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier6);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier6);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier6, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier6, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier6, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier6, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier6, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier6, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier6);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier6);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultDrawingSupplier0.getNextShape();
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotNull(defaultDrawingSupplier1);
      
      boolean boolean0 = defaultDrawingSupplier0.equals(defaultDrawingSupplier1);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertFalse(boolean0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotNull(basicStroke0);
      
      Color color0 = (Color)defaultDrawingSupplier1.getNextPaint();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(85, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(85, color0.getBlue());
      assertEquals((-43691), color0.getRGB());
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotNull(color0);
      
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertEquals(10, shapeArray0.length);
      assertNotNull(shapeArray0);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier1.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertTrue(basicStroke1.equals((Object)basicStroke0));
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotNull(defaultDrawingSupplier2);
      
      boolean boolean1 = defaultDrawingSupplier1.equals(basicStroke0);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertTrue(basicStroke0.equals((Object)basicStroke1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(basicStroke0, basicStroke1);
      assertFalse(boolean1);
      
      DefaultDrawingSupplier defaultDrawingSupplier3 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertTrue(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotNull(defaultDrawingSupplier3);
      
      Color color1 = (Color)defaultDrawingSupplier1.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(color1.equals((Object)color0));
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals(192, color1.getRed());
      assertEquals((-4144960), color1.getRGB());
      assertEquals(192, color1.getGreen());
      assertEquals(192, color1.getBlue());
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)defaultDrawingSupplier0.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertEquals((-3.0), ellipse2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertEquals(6.0, ellipse2D_Double0.height, 0.01);
      assertEquals((-3.0), ellipse2D_Double0.x, 0.01);
      assertEquals((-3.0), ellipse2D_Double0.y, 0.01);
      assertEquals(6.0, ellipse2D_Double0.width, 0.01);
      assertNotNull(ellipse2D_Double0);
      
      Color color2 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(color2.equals((Object)color0));
      assertEquals(192, color2.getGreen());
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
      assertEquals((-4144960), color2.getRGB());
      assertEquals(192, color2.getRed());
      assertEquals(192, color2.getBlue());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertSame(color2, color1);
      assertNotSame(color2, color0);
      assertNotNull(color2);
      
      BasicStroke basicStroke2 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(basicStroke2.equals((Object)basicStroke0));
      assertEquals(2, basicStroke2.getLineJoin());
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(1.0F, basicStroke2.getLineWidth(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertSame(basicStroke2, basicStroke1);
      assertNotSame(basicStroke2, basicStroke0);
      assertNotNull(basicStroke2);
      
      Color color3 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(color3.equals((Object)color1));
      assertFalse(color3.equals((Object)color0));
      assertFalse(color3.equals((Object)color2));
      assertEquals(255, color3.getRed());
      assertEquals((-1), color3.getRGB());
      assertEquals(1, color3.getTransparency());
      assertEquals(255, color3.getAlpha());
      assertEquals(255, color3.getGreen());
      assertEquals(255, color3.getBlue());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(color3, color1);
      assertNotSame(color3, color0);
      assertNotSame(color3, color2);
      assertNotNull(color3);
      
      boolean boolean2 = defaultDrawingSupplier1.equals(defaultDrawingSupplier0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertFalse(boolean2);
      
      Color color4 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(color4.equals((Object)color2));
      assertFalse(color4.equals((Object)color3));
      assertFalse(color4.equals((Object)color1));
      assertEquals((-43691), color4.getRGB());
      assertEquals(85, color4.getGreen());
      assertEquals(255, color4.getAlpha());
      assertEquals(1, color4.getTransparency());
      assertEquals(85, color4.getBlue());
      assertEquals(255, color4.getRed());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(color4, color2);
      assertNotSame(color4, color3);
      assertNotSame(color4, color1);
      assertSame(color4, color0);
      assertNotNull(color4);
      
      BasicStroke basicStroke3 = (BasicStroke)defaultDrawingSupplier1.getNextStroke();
      assertTrue(basicStroke3.equals((Object)basicStroke1));
      assertTrue(basicStroke3.equals((Object)basicStroke2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertEquals(1.0F, basicStroke3.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke3.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke3.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke3.getEndCap());
      assertEquals(2, basicStroke3.getLineJoin());
      assertSame(basicStroke3, basicStroke0);
      assertNotSame(basicStroke3, basicStroke1);
      assertNotSame(basicStroke3, basicStroke2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotNull(basicStroke3);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertEquals(3.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals((-3.0), rectangle2D_Double1.x, 0.01);
      assertEquals(6.0, rectangle2D_Double1.height, 0.01);
      assertEquals(6.0, rectangle2D_Double1.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double1.y, 0.01);
      assertNotNull(rectangle2D_Double1);
      
      Shape[] shapeArray1 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray1.equals((Object)shapeArray0));
      assertNotSame(shapeArray1, shapeArray0);
      assertEquals(10, shapeArray1.length);
      assertNotNull(shapeArray1);
      
      boolean boolean3 = defaultDrawingSupplier1.equals(color1);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(color1.equals((Object)color3));
      assertFalse(color1.equals((Object)color0));
      assertFalse(color1.equals((Object)color4));
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals(192, color1.getRed());
      assertEquals((-4144960), color1.getRGB());
      assertEquals(192, color1.getGreen());
      assertEquals(192, color1.getBlue());
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(color1, color3);
      assertNotSame(color1, color0);
      assertSame(color1, color2);
      assertNotSame(color1, color4);
      assertFalse(boolean3);
      
      Shape[] shapeArray2 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray2.equals((Object)shapeArray1));
      assertFalse(shapeArray2.equals((Object)shapeArray0));
      assertNotSame(shapeArray2, shapeArray1);
      assertNotSame(shapeArray2, shapeArray0);
      assertEquals(10, shapeArray2.length);
      assertNotNull(shapeArray2);
      
      DefaultDrawingSupplier defaultDrawingSupplier4 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier2);
      assertNotNull(defaultDrawingSupplier4);
      
      DefaultDrawingSupplier defaultDrawingSupplier5 = (DefaultDrawingSupplier)defaultDrawingSupplier1.clone();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier4));
      assertTrue(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier3));
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier3);
      assertNotNull(defaultDrawingSupplier5);
      
      Shape[] shapeArray3 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray3.equals((Object)shapeArray0));
      assertFalse(shapeArray3.equals((Object)shapeArray2));
      assertFalse(shapeArray3.equals((Object)shapeArray1));
      assertNotSame(shapeArray3, shapeArray0);
      assertNotSame(shapeArray3, shapeArray2);
      assertNotSame(shapeArray3, shapeArray1);
      assertEquals(10, shapeArray3.length);
      assertNotNull(shapeArray3);
      
      Color color5 = (Color)defaultDrawingSupplier1.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier4));
      assertFalse(color5.equals((Object)color3));
      assertFalse(color5.equals((Object)color4));
      assertFalse(color5.equals((Object)color0));
      assertEquals(192, color5.getBlue());
      assertEquals(255, color5.getAlpha());
      assertEquals(1, color5.getTransparency());
      assertEquals(192, color5.getRed());
      assertEquals((-4144960), color5.getRGB());
      assertEquals(192, color5.getGreen());
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier4);
      assertNotSame(color5, color3);
      assertSame(color5, color1);
      assertSame(color5, color2);
      assertNotSame(color5, color4);
      assertNotSame(color5, color0);
      assertNotNull(color5);
      
      BasicStroke basicStroke4 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertTrue(basicStroke4.equals((Object)basicStroke1));
      assertTrue(basicStroke4.equals((Object)basicStroke2));
      assertEquals(0.0F, basicStroke4.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke4.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke4.getEndCap());
      assertEquals(10.0F, basicStroke4.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke4.getLineJoin());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertSame(basicStroke4, basicStroke3);
      assertNotSame(basicStroke4, basicStroke1);
      assertSame(basicStroke4, basicStroke0);
      assertNotSame(basicStroke4, basicStroke2);
      assertNotNull(basicStroke4);
      
      Polygon polygon0 = (Polygon)defaultDrawingSupplier0.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertEquals(3, polygon0.npoints);
      assertNotNull(polygon0);
      
      BasicStroke basicStroke5 = (BasicStroke)defaultDrawingSupplier1.getNextStroke();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier4));
      assertTrue(basicStroke5.equals((Object)basicStroke1));
      assertTrue(basicStroke5.equals((Object)basicStroke2));
      assertEquals(1.0F, basicStroke5.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke5.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke5.getEndCap());
      assertEquals(10.0F, basicStroke5.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke5.getLineJoin());
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier4);
      assertSame(basicStroke5, basicStroke4);
      assertSame(basicStroke5, basicStroke0);
      assertSame(basicStroke5, basicStroke3);
      assertNotSame(basicStroke5, basicStroke1);
      assertNotSame(basicStroke5, basicStroke2);
      assertNotNull(basicStroke5);
      
      Ellipse2D.Double ellipse2D_Double1 = (Ellipse2D.Double)defaultDrawingSupplier1.getNextShape();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier4));
      assertEquals(0.0, ellipse2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Double1.getCenterY(), 0.01);
      assertEquals((-3.0), ellipse2D_Double1.getMinX(), 0.01);
      assertEquals((-3.0), ellipse2D_Double1.getMinY(), 0.01);
      assertEquals(3.0, ellipse2D_Double1.getMaxX(), 0.01);
      assertEquals(3.0, ellipse2D_Double1.getMaxY(), 0.01);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier4);
      assertSame(ellipse2D_Double1, ellipse2D_Double0);
      assertEquals((-3.0), ellipse2D_Double1.y, 0.01);
      assertEquals((-3.0), ellipse2D_Double1.x, 0.01);
      assertEquals(6.0, ellipse2D_Double1.width, 0.01);
      assertEquals(6.0, ellipse2D_Double1.height, 0.01);
      assertNotNull(ellipse2D_Double1);
      
      Color color6 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertFalse(color6.equals((Object)color5));
      assertFalse(color6.equals((Object)color1));
      assertFalse(color6.equals((Object)color2));
      assertFalse(color6.equals((Object)color0));
      assertFalse(color6.equals((Object)color4));
      assertEquals(255, color6.getRed());
      assertEquals(255, color6.getAlpha());
      assertEquals(1, color6.getTransparency());
      assertEquals(255, color6.getGreen());
      assertEquals((-1), color6.getRGB());
      assertEquals(255, color6.getBlue());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertSame(color6, color3);
      assertNotSame(color6, color5);
      assertNotSame(color6, color1);
      assertNotSame(color6, color0);
      assertNotSame(color6, color2);
      assertNotSame(color6, color4);
      assertNotNull(color6);
      
      Color color7 = (Color)defaultDrawingSupplier1.getNextPaint();
      assertFalse(color7.equals((Object)color2));
      assertFalse(color7.equals((Object)color3));
      assertFalse(color7.equals((Object)color0));
      assertFalse(color7.equals((Object)color5));
      assertFalse(color7.equals((Object)color1));
      assertFalse(color7.equals((Object)color4));
      assertFalse(color7.equals((Object)color6));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier4));
      assertEquals(255, color7.getAlpha());
      assertEquals(255, color7.getBlue());
      assertEquals((-11184641), color7.getRGB());
      assertEquals(85, color7.getRed());
      assertEquals(85, color7.getGreen());
      assertEquals(1, color7.getTransparency());
      assertNotSame(color7, color2);
      assertNotSame(color7, color3);
      assertNotSame(color7, color0);
      assertNotSame(color7, color5);
      assertNotSame(color7, color1);
      assertNotSame(color7, color4);
      assertNotSame(color7, color6);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier4);
      assertNotNull(color7);
      
      boolean boolean4 = defaultDrawingSupplier0.equals(ellipse2D_Double0);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertEquals((-3.0), ellipse2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertSame(ellipse2D_Double0, ellipse2D_Double1);
      assertEquals(6.0, ellipse2D_Double0.height, 0.01);
      assertEquals((-3.0), ellipse2D_Double0.x, 0.01);
      assertEquals((-3.0), ellipse2D_Double0.y, 0.01);
      assertEquals(6.0, ellipse2D_Double0.width, 0.01);
      assertFalse(boolean4);
      
      Color color8 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertFalse(color8.equals((Object)color1));
      assertFalse(color8.equals((Object)color0));
      assertFalse(color8.equals((Object)color2));
      assertFalse(color8.equals((Object)color3));
      assertFalse(color8.equals((Object)color5));
      assertFalse(color8.equals((Object)color4));
      assertFalse(color8.equals((Object)color6));
      assertEquals(85, color8.getRed());
      assertEquals(85, color8.getGreen());
      assertEquals((-11184641), color8.getRGB());
      assertEquals(1, color8.getTransparency());
      assertEquals(255, color8.getAlpha());
      assertEquals(255, color8.getBlue());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(color8, color1);
      assertNotSame(color8, color0);
      assertNotSame(color8, color2);
      assertNotSame(color8, color3);
      assertNotSame(color8, color5);
      assertSame(color8, color7);
      assertNotSame(color8, color4);
      assertNotSame(color8, color6);
      assertNotNull(color8);
      
      Color color9 = (Color)defaultDrawingSupplier1.getNextPaint();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier4));
      assertFalse(color9.equals((Object)color4));
      assertFalse(color9.equals((Object)color5));
      assertFalse(color9.equals((Object)color1));
      assertFalse(color9.equals((Object)color7));
      assertFalse(color9.equals((Object)color3));
      assertFalse(color9.equals((Object)color8));
      assertFalse(color9.equals((Object)color2));
      assertFalse(color9.equals((Object)color6));
      assertFalse(color9.equals((Object)color0));
      assertEquals(1, color9.getTransparency());
      assertEquals(85, color9.getBlue());
      assertEquals(255, color9.getAlpha());
      assertEquals((-11141291), color9.getRGB());
      assertEquals(85, color9.getRed());
      assertEquals(255, color9.getGreen());
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier4);
      assertNotSame(color9, color4);
      assertNotSame(color9, color5);
      assertNotSame(color9, color1);
      assertNotSame(color9, color7);
      assertNotSame(color9, color3);
      assertNotSame(color9, color8);
      assertNotSame(color9, color2);
      assertNotSame(color9, color6);
      assertNotSame(color9, color0);
      assertNotNull(color9);
      
      boolean boolean5 = defaultDrawingSupplier0.equals(basicStroke0);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(basicStroke0.equals((Object)basicStroke2));
      assertTrue(basicStroke0.equals((Object)basicStroke1));
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(basicStroke0, basicStroke1);
      assertSame(basicStroke0, basicStroke3);
      assertSame(basicStroke0, basicStroke5);
      assertSame(basicStroke0, basicStroke4);
      assertNotSame(basicStroke0, basicStroke2);
      assertFalse(boolean5);
      
      Color color10 = (Color)defaultDrawingSupplier1.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier5));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier4));
      assertFalse(color10.equals((Object)color0));
      assertFalse(color10.equals((Object)color9));
      assertFalse(color10.equals((Object)color6));
      assertFalse(color10.equals((Object)color7));
      assertFalse(color10.equals((Object)color4));
      assertFalse(color10.equals((Object)color3));
      assertFalse(color10.equals((Object)color8));
      assertEquals(192, color10.getRed());
      assertEquals(192, color10.getBlue());
      assertEquals(192, color10.getGreen());
      assertEquals(1, color10.getTransparency());
      assertEquals(255, color10.getAlpha());
      assertEquals((-4144960), color10.getRGB());
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier4);
      assertNotSame(color10, color0);
      assertNotSame(color10, color9);
      assertNotSame(color10, color6);
      assertNotSame(color10, color7);
      assertSame(color10, color5);
      assertSame(color10, color1);
      assertNotSame(color10, color4);
      assertSame(color10, color2);
      assertNotSame(color10, color3);
      assertNotSame(color10, color8);
      assertNotNull(color10);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Paint[] paintArray0 = new Paint[4];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertEquals((-43691), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(85, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(85, color0.getBlue());
      assertNotNull(color0);
      
      paintArray0[0] = (Paint) color0;
      Color color1 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(color1.equals((Object)color0));
      assertEquals(255, color1.getGreen());
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals((-1), color1.getRGB());
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      Color color2 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(color2.equals((Object)color0));
      assertEquals(255, color2.getGreen());
      assertEquals((-1), color2.getRGB());
      assertEquals(255, color2.getBlue());
      assertEquals(255, color2.getRed());
      assertEquals(255, color2.getAlpha());
      assertEquals(1, color2.getTransparency());
      assertNotSame(color2, color0);
      assertSame(color2, color1);
      assertNotNull(color2);
      
      paintArray0[1] = (Paint) color2;
      Color color3 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(color3.equals((Object)color0));
      assertEquals(255, color3.getRed());
      assertEquals(255, color3.getBlue());
      assertEquals(255, color3.getAlpha());
      assertEquals(1, color3.getTransparency());
      assertEquals(255, color3.getGreen());
      assertEquals((-1), color3.getRGB());
      assertNotSame(color3, color0);
      assertSame(color3, color2);
      assertSame(color3, color1);
      assertNotNull(color3);
      
      paintArray0[2] = (Paint) color3;
      Color color4 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(color4.equals((Object)color0));
      assertFalse(color4.equals((Object)color3));
      assertFalse(color4.equals((Object)color2));
      assertFalse(color4.equals((Object)color1));
      assertEquals(255, color4.getBlue());
      assertEquals((-11184641), color4.getRGB());
      assertEquals(85, color4.getRed());
      assertEquals(85, color4.getGreen());
      assertEquals(1, color4.getTransparency());
      assertEquals(255, color4.getAlpha());
      assertNotSame(color4, color0);
      assertNotSame(color4, color3);
      assertNotSame(color4, color2);
      assertNotSame(color4, color1);
      assertNotNull(color4);
      
      paintArray0[3] = (Paint) color4;
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(paintArray0, defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertEquals(4, paintArray0.length);
      assertNotNull(defaultDrawingSupplier1);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotNull(defaultDrawingSupplier2);
      
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertEquals(10, shapeArray0.length);
      assertNotNull(shapeArray0);
      
      Color color5 = (Color)defaultDrawingSupplier1.getNextFillPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(color5.equals((Object)color4));
      assertFalse(color5.equals((Object)color0));
      assertEquals(255, color5.getGreen());
      assertEquals((-1), color5.getRGB());
      assertEquals(255, color5.getBlue());
      assertEquals(255, color5.getRed());
      assertEquals(255, color5.getAlpha());
      assertEquals(1, color5.getTransparency());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertSame(color5, color1);
      assertNotSame(color5, color4);
      assertNotSame(color5, color0);
      assertSame(color5, color2);
      assertSame(color5, color3);
      assertEquals(4, paintArray0.length);
      assertNotNull(color5);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertEquals(85, color0.getGreen());
      assertEquals((-43691), color0.getRGB());
      assertEquals(85, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertEquals(10, shapeArray0.length);
      assertNotNull(shapeArray0);
      
      Color color1 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(color1.equals((Object)color0));
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertEquals(255, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals((-1), color1.getRGB());
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultDrawingSupplier0.getNextShape();
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Color color2 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(color2.equals((Object)color0));
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
      assertEquals((-1), color2.getRGB());
      assertEquals(255, color2.getBlue());
      assertEquals(255, color2.getGreen());
      assertEquals(255, color2.getRed());
      assertSame(color2, color1);
      assertNotSame(color2, color0);
      assertNotNull(color2);
      
      Color color3 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(color3.equals((Object)color0));
      assertFalse(color3.equals((Object)color1));
      assertFalse(color3.equals((Object)color2));
      assertEquals(1, color3.getTransparency());
      assertEquals(255, color3.getAlpha());
      assertEquals(192, color3.getBlue());
      assertEquals(192, color3.getGreen());
      assertEquals((-4144960), color3.getRGB());
      assertEquals(192, color3.getRed());
      assertNotSame(color3, color0);
      assertNotSame(color3, color1);
      assertNotSame(color3, color2);
      assertNotNull(color3);
      
      Color color4 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(color4.equals((Object)color0));
      assertFalse(color4.equals((Object)color3));
      assertEquals(255, color4.getRed());
      assertEquals(1, color4.getTransparency());
      assertEquals(255, color4.getAlpha());
      assertEquals((-1), color4.getRGB());
      assertEquals(255, color4.getBlue());
      assertEquals(255, color4.getGreen());
      assertSame(color4, color1);
      assertNotSame(color4, color0);
      assertNotSame(color4, color3);
      assertSame(color4, color2);
      assertNotNull(color4);
      
      Shape[] shapeArray1 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray1.equals((Object)shapeArray0));
      assertNotSame(shapeArray1, shapeArray0);
      assertEquals(10, shapeArray1.length);
      assertNotNull(shapeArray1);
      
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)defaultDrawingSupplier0.getNextShape();
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.y, 0.01);
      assertEquals((-3.0), ellipse2D_Double0.x, 0.01);
      assertEquals(6.0, ellipse2D_Double0.height, 0.01);
      assertEquals(6.0, ellipse2D_Double0.width, 0.01);
      assertNotNull(ellipse2D_Double0);
      
      DefaultDrawingSupplier defaultDrawingSupplier1 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotNull(defaultDrawingSupplier1);
      
      Color color5 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color5.equals((Object)color0));
      assertFalse(color5.equals((Object)color3));
      assertEquals(255, color5.getBlue());
      assertEquals(255, color5.getGreen());
      assertEquals(255, color5.getAlpha());
      assertEquals(1, color5.getTransparency());
      assertEquals((-1), color5.getRGB());
      assertEquals(255, color5.getRed());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertSame(color5, color2);
      assertSame(color5, color4);
      assertSame(color5, color1);
      assertNotSame(color5, color0);
      assertNotSame(color5, color3);
      assertNotNull(color5);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotNull(basicStroke0);
      
      Color color6 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color6.equals((Object)color0));
      assertFalse(color6.equals((Object)color3));
      assertEquals(1, color6.getTransparency());
      assertEquals(255, color6.getRed());
      assertEquals(255, color6.getGreen());
      assertEquals(255, color6.getBlue());
      assertEquals((-1), color6.getRGB());
      assertEquals(255, color6.getAlpha());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color6, color0);
      assertSame(color6, color1);
      assertSame(color6, color4);
      assertSame(color6, color2);
      assertSame(color6, color5);
      assertNotSame(color6, color3);
      assertNotNull(color6);
      
      boolean boolean0 = defaultDrawingSupplier0.equals(ellipse2D_Double0);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals((-3.0), ellipse2D_Double0.getMinX(), 0.01);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertEquals((-3.0), ellipse2D_Double0.y, 0.01);
      assertEquals((-3.0), ellipse2D_Double0.x, 0.01);
      assertEquals(6.0, ellipse2D_Double0.height, 0.01);
      assertEquals(6.0, ellipse2D_Double0.width, 0.01);
      assertFalse(boolean0);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotNull(defaultDrawingSupplier2);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke1.getLineJoin());
      assertSame(basicStroke1, basicStroke0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotNull(basicStroke1);
      
      Color color7 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color7.equals((Object)color6));
      assertFalse(color7.equals((Object)color0));
      assertFalse(color7.equals((Object)color1));
      assertFalse(color7.equals((Object)color4));
      assertFalse(color7.equals((Object)color2));
      assertFalse(color7.equals((Object)color5));
      assertFalse(color7.equals((Object)color3));
      assertEquals(85, color7.getRed());
      assertEquals(255, color7.getBlue());
      assertEquals(85, color7.getGreen());
      assertEquals(255, color7.getAlpha());
      assertEquals(1, color7.getTransparency());
      assertEquals((-11184641), color7.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color7, color6);
      assertNotSame(color7, color0);
      assertNotSame(color7, color1);
      assertNotSame(color7, color4);
      assertNotSame(color7, color2);
      assertNotSame(color7, color5);
      assertNotSame(color7, color3);
      assertNotNull(color7);
      
      Color color8 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color8.equals((Object)color3));
      assertFalse(color8.equals((Object)color4));
      assertFalse(color8.equals((Object)color5));
      assertFalse(color8.equals((Object)color0));
      assertFalse(color8.equals((Object)color2));
      assertFalse(color8.equals((Object)color7));
      assertFalse(color8.equals((Object)color1));
      assertFalse(color8.equals((Object)color6));
      assertEquals(85, color8.getRed());
      assertEquals(85, color8.getBlue());
      assertEquals(255, color8.getGreen());
      assertEquals((-11141291), color8.getRGB());
      assertEquals(1, color8.getTransparency());
      assertEquals(255, color8.getAlpha());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color8, color3);
      assertNotSame(color8, color4);
      assertNotSame(color8, color5);
      assertNotSame(color8, color0);
      assertNotSame(color8, color2);
      assertNotSame(color8, color7);
      assertNotSame(color8, color1);
      assertNotSame(color8, color6);
      assertNotNull(color8);
      
      Color color9 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color9.equals((Object)color5));
      assertFalse(color9.equals((Object)color6));
      assertFalse(color9.equals((Object)color2));
      assertFalse(color9.equals((Object)color0));
      assertFalse(color9.equals((Object)color1));
      assertFalse(color9.equals((Object)color8));
      assertFalse(color9.equals((Object)color4));
      assertFalse(color9.equals((Object)color7));
      assertEquals(192, color9.getBlue());
      assertEquals(192, color9.getRed());
      assertEquals(192, color9.getGreen());
      assertEquals(1, color9.getTransparency());
      assertEquals(255, color9.getAlpha());
      assertEquals((-4144960), color9.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color9, color5);
      assertNotSame(color9, color6);
      assertNotSame(color9, color2);
      assertSame(color9, color3);
      assertNotSame(color9, color0);
      assertNotSame(color9, color1);
      assertNotSame(color9, color8);
      assertNotSame(color9, color4);
      assertNotSame(color9, color7);
      assertNotNull(color9);
      
      Polygon polygon0 = (Polygon)defaultDrawingSupplier0.getNextShape();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertEquals(3, polygon0.npoints);
      assertNotNull(polygon0);
      
      BasicStroke basicStroke2 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke2.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke2.getLineJoin());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertSame(basicStroke2, basicStroke0);
      assertSame(basicStroke2, basicStroke1);
      assertNotNull(basicStroke2);
      
      Color color10 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color10.equals((Object)color1));
      assertFalse(color10.equals((Object)color6));
      assertFalse(color10.equals((Object)color9));
      assertFalse(color10.equals((Object)color2));
      assertFalse(color10.equals((Object)color7));
      assertFalse(color10.equals((Object)color5));
      assertFalse(color10.equals((Object)color4));
      assertFalse(color10.equals((Object)color8));
      assertFalse(color10.equals((Object)color3));
      assertFalse(color10.equals((Object)color0));
      assertEquals((-171), color10.getRGB());
      assertEquals(255, color10.getRed());
      assertEquals(255, color10.getGreen());
      assertEquals(85, color10.getBlue());
      assertEquals(255, color10.getAlpha());
      assertEquals(1, color10.getTransparency());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color10, color1);
      assertNotSame(color10, color6);
      assertNotSame(color10, color9);
      assertNotSame(color10, color2);
      assertNotSame(color10, color7);
      assertNotSame(color10, color5);
      assertNotSame(color10, color4);
      assertNotSame(color10, color8);
      assertNotSame(color10, color3);
      assertNotSame(color10, color0);
      assertNotNull(color10);
      
      Color color11 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color11.equals((Object)color10));
      assertFalse(color11.equals((Object)color2));
      assertFalse(color11.equals((Object)color4));
      assertFalse(color11.equals((Object)color6));
      assertFalse(color11.equals((Object)color0));
      assertFalse(color11.equals((Object)color1));
      assertFalse(color11.equals((Object)color7));
      assertFalse(color11.equals((Object)color8));
      assertFalse(color11.equals((Object)color5));
      assertEquals(192, color11.getGreen());
      assertEquals(255, color11.getAlpha());
      assertEquals(192, color11.getRed());
      assertEquals(192, color11.getBlue());
      assertEquals(1, color11.getTransparency());
      assertEquals((-4144960), color11.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color11, color10);
      assertNotSame(color11, color2);
      assertNotSame(color11, color4);
      assertSame(color11, color9);
      assertNotSame(color11, color6);
      assertNotSame(color11, color0);
      assertNotSame(color11, color1);
      assertSame(color11, color3);
      assertNotSame(color11, color7);
      assertNotSame(color11, color8);
      assertNotSame(color11, color5);
      assertNotNull(color11);
      
      BasicStroke basicStroke3 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertTrue(basicStroke3.equals((Object)basicStroke2));
      assertTrue(basicStroke3.equals((Object)basicStroke0));
      assertTrue(basicStroke3.equals((Object)basicStroke1));
      assertEquals(2, basicStroke3.getEndCap());
      assertEquals(2, basicStroke3.getLineJoin());
      assertEquals(1.0F, basicStroke3.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke3.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke3.getMiterLimit(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(basicStroke3, basicStroke2);
      assertNotSame(basicStroke3, basicStroke1);
      assertNotSame(basicStroke3, basicStroke0);
      assertNotNull(basicStroke3);
      
      DefaultDrawingSupplier defaultDrawingSupplier3 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertTrue(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotNull(defaultDrawingSupplier3);
      
      boolean boolean1 = defaultDrawingSupplier0.equals(defaultDrawingSupplier3);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertTrue(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertTrue(boolean1);
      
      Color color12 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color12.equals((Object)color11));
      assertFalse(color12.equals((Object)color8));
      assertFalse(color12.equals((Object)color3));
      assertFalse(color12.equals((Object)color10));
      assertFalse(color12.equals((Object)color9));
      assertFalse(color12.equals((Object)color0));
      assertFalse(color12.equals((Object)color7));
      assertEquals(255, color12.getBlue());
      assertEquals(255, color12.getRed());
      assertEquals(1, color12.getTransparency());
      assertEquals(255, color12.getGreen());
      assertEquals((-1), color12.getRGB());
      assertEquals(255, color12.getAlpha());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertSame(color12, color2);
      assertSame(color12, color5);
      assertSame(color12, color4);
      assertNotSame(color12, color11);
      assertNotSame(color12, color8);
      assertNotSame(color12, color3);
      assertNotSame(color12, color10);
      assertSame(color12, color6);
      assertNotSame(color12, color9);
      assertNotSame(color12, color7);
      assertNotSame(color12, color0);
      assertSame(color12, color1);
      assertNotNull(color12);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getRed());
      assertNotNull(color0);
      
      boolean boolean0 = defaultDrawingSupplier0.equals(basicStroke0);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertFalse(boolean0);
      
      Color color1 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertEquals(1, color1.getTransparency());
      assertEquals(192, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(192, color1.getBlue());
      assertEquals((-4144960), color1.getRGB());
      assertEquals(192, color1.getGreen());
      assertSame(color1, color0);
      assertNotNull(color1);
      
      boolean boolean1 = defaultDrawingSupplier0.equals(basicStroke0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertFalse(boolean1);
      
      DefaultDrawingSupplier defaultDrawingSupplier1 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertNotNull(defaultDrawingSupplier1);
      
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertEquals(10, shapeArray0.length);
      assertNotNull(shapeArray0);
      
      Shape[] shapeArray1 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray1.equals((Object)shapeArray0));
      assertNotSame(shapeArray1, shapeArray0);
      assertEquals(10, shapeArray1.length);
      assertNotNull(shapeArray1);
      
      Color color2 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertEquals(255, color2.getAlpha());
      assertEquals(192, color2.getGreen());
      assertEquals(1, color2.getTransparency());
      assertEquals(192, color2.getBlue());
      assertEquals(192, color2.getRed());
      assertEquals((-4144960), color2.getRGB());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertSame(color2, color0);
      assertSame(color2, color1);
      assertNotNull(color2);
      
      DefaultDrawingSupplier defaultDrawingSupplier2 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier2.equals((Object)defaultDrawingSupplier0));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier2, defaultDrawingSupplier1);
      assertNotNull(defaultDrawingSupplier2);
      
      boolean boolean2 = defaultDrawingSupplier0.equals(defaultDrawingSupplier1);
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier1, defaultDrawingSupplier0);
      assertFalse(boolean2);
      
      Color color3 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(color3.equals((Object)color0));
      assertFalse(color3.equals((Object)color1));
      assertFalse(color3.equals((Object)color2));
      assertEquals(255, color3.getRed());
      assertEquals(255, color3.getBlue());
      assertEquals(255, color3.getGreen());
      assertEquals((-1), color3.getRGB());
      assertEquals(1, color3.getTransparency());
      assertEquals(255, color3.getAlpha());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(color3, color0);
      assertNotSame(color3, color1);
      assertNotSame(color3, color2);
      assertNotNull(color3);
      
      DefaultDrawingSupplier defaultDrawingSupplier3 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertNotNull(defaultDrawingSupplier3);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      BasicStroke basicStroke2 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(basicStroke2.equals((Object)basicStroke1));
      assertTrue(basicStroke2.equals((Object)basicStroke0));
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(2, basicStroke2.getLineJoin());
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke2.getLineWidth(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(basicStroke2, basicStroke0);
      assertNotSame(basicStroke2, basicStroke1);
      assertNotNull(basicStroke2);
      
      Shape[] shapeArray2 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray2.equals((Object)shapeArray1));
      assertFalse(shapeArray2.equals((Object)shapeArray0));
      assertNotSame(shapeArray2, shapeArray1);
      assertNotSame(shapeArray2, shapeArray0);
      assertEquals(10, shapeArray2.length);
      assertNotNull(shapeArray2);
      
      BasicStroke basicStroke3 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(basicStroke3.equals((Object)basicStroke0));
      assertTrue(basicStroke3.equals((Object)basicStroke1));
      assertEquals(1.0F, basicStroke3.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke3.getLineJoin());
      assertEquals(2, basicStroke3.getEndCap());
      assertEquals(0.0F, basicStroke3.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke3.getMiterLimit(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertSame(basicStroke3, basicStroke2);
      assertNotSame(basicStroke3, basicStroke0);
      assertNotSame(basicStroke3, basicStroke1);
      assertNotNull(basicStroke3);
      
      BasicStroke basicStroke4 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(basicStroke4.equals((Object)basicStroke0));
      assertTrue(basicStroke4.equals((Object)basicStroke1));
      assertEquals(0.0F, basicStroke4.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke4.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke4.getEndCap());
      assertEquals(1.0F, basicStroke4.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke4.getLineJoin());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertSame(basicStroke4, basicStroke2);
      assertNotSame(basicStroke4, basicStroke1);
      assertSame(basicStroke4, basicStroke3);
      assertNotSame(basicStroke4, basicStroke0);
      assertNotNull(basicStroke4);
      
      boolean boolean3 = defaultDrawingSupplier0.equals(defaultDrawingSupplier3);
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier1));
      assertTrue(defaultDrawingSupplier3.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier3, defaultDrawingSupplier1);
      assertFalse(boolean3);
      
      BasicStroke basicStroke5 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(basicStroke5.equals((Object)basicStroke1));
      assertTrue(basicStroke5.equals((Object)basicStroke0));
      assertEquals(2, basicStroke5.getLineJoin());
      assertEquals(10.0F, basicStroke5.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke5.getEndCap());
      assertEquals(0.0F, basicStroke5.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke5.getLineWidth(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(basicStroke5, basicStroke1);
      assertSame(basicStroke5, basicStroke3);
      assertNotSame(basicStroke5, basicStroke0);
      assertSame(basicStroke5, basicStroke4);
      assertSame(basicStroke5, basicStroke2);
      assertNotNull(basicStroke5);
      
      Color color4 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(color4.equals((Object)color1));
      assertFalse(color4.equals((Object)color2));
      assertFalse(color4.equals((Object)color3));
      assertFalse(color4.equals((Object)color0));
      assertEquals(255, color4.getRed());
      assertEquals(85, color4.getGreen());
      assertEquals((-43691), color4.getRGB());
      assertEquals(1, color4.getTransparency());
      assertEquals(255, color4.getAlpha());
      assertEquals(85, color4.getBlue());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(color4, color1);
      assertNotSame(color4, color2);
      assertNotSame(color4, color3);
      assertNotSame(color4, color0);
      assertNotNull(color4);
      
      Shape[] shapeArray3 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray3.equals((Object)shapeArray1));
      assertFalse(shapeArray3.equals((Object)shapeArray0));
      assertFalse(shapeArray3.equals((Object)shapeArray2));
      assertNotSame(shapeArray3, shapeArray1);
      assertNotSame(shapeArray3, shapeArray0);
      assertNotSame(shapeArray3, shapeArray2);
      assertEquals(10, shapeArray3.length);
      assertNotNull(shapeArray3);
      
      Shape[] shapeArray4 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray4.equals((Object)shapeArray2));
      assertFalse(shapeArray4.equals((Object)shapeArray1));
      assertFalse(shapeArray4.equals((Object)shapeArray3));
      assertFalse(shapeArray4.equals((Object)shapeArray0));
      assertNotSame(shapeArray4, shapeArray2);
      assertNotSame(shapeArray4, shapeArray1);
      assertNotSame(shapeArray4, shapeArray3);
      assertNotSame(shapeArray4, shapeArray0);
      assertEquals(10, shapeArray4.length);
      assertNotNull(shapeArray4);
      
      BasicStroke basicStroke6 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(basicStroke6.equals((Object)basicStroke2));
      assertTrue(basicStroke6.equals((Object)basicStroke3));
      assertTrue(basicStroke6.equals((Object)basicStroke5));
      assertTrue(basicStroke6.equals((Object)basicStroke4));
      assertEquals(0.0F, basicStroke6.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke6.getLineJoin());
      assertEquals(10.0F, basicStroke6.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke6.getEndCap());
      assertEquals(1.0F, basicStroke6.getLineWidth(), 0.01F);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(basicStroke6, basicStroke3);
      assertNotSame(basicStroke6, basicStroke4);
      assertNotSame(basicStroke6, basicStroke5);
      assertNotSame(basicStroke6, basicStroke2);
      assertSame(basicStroke6, basicStroke1);
      assertSame(basicStroke6, basicStroke0);
      assertNotNull(basicStroke6);
      
      Shape[] shapeArray5 = DefaultDrawingSupplier.createStandardSeriesShapes();
      assertFalse(shapeArray5.equals((Object)shapeArray3));
      assertFalse(shapeArray5.equals((Object)shapeArray2));
      assertFalse(shapeArray5.equals((Object)shapeArray4));
      assertFalse(shapeArray5.equals((Object)shapeArray1));
      assertFalse(shapeArray5.equals((Object)shapeArray0));
      assertNotSame(shapeArray5, shapeArray3);
      assertNotSame(shapeArray5, shapeArray2);
      assertNotSame(shapeArray5, shapeArray4);
      assertNotSame(shapeArray5, shapeArray1);
      assertNotSame(shapeArray5, shapeArray0);
      assertEquals(10, shapeArray5.length);
      assertNotNull(shapeArray5);
      
      DefaultDrawingSupplier defaultDrawingSupplier4 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier0));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier4.equals((Object)defaultDrawingSupplier2));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier4, defaultDrawingSupplier2);
      assertNotNull(defaultDrawingSupplier4);
      
      DefaultDrawingSupplier defaultDrawingSupplier5 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier0));
      assertTrue(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier5.equals((Object)defaultDrawingSupplier3));
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier3);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier0);
      assertNotSame(defaultDrawingSupplier5, defaultDrawingSupplier4);
      assertNotNull(defaultDrawingSupplier5);
      
      Color color5 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier4));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier2));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier1));
      assertFalse(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier3));
      assertTrue(defaultDrawingSupplier0.equals((Object)defaultDrawingSupplier5));
      assertFalse(color5.equals((Object)color1));
      assertFalse(color5.equals((Object)color0));
      assertFalse(color5.equals((Object)color2));
      assertFalse(color5.equals((Object)color4));
      assertEquals(255, color5.getRed());
      assertEquals(255, color5.getGreen());
      assertEquals((-1), color5.getRGB());
      assertEquals(1, color5.getTransparency());
      assertEquals(255, color5.getBlue());
      assertEquals(255, color5.getAlpha());
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier5);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier2);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier1);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier4);
      assertNotSame(defaultDrawingSupplier0, defaultDrawingSupplier3);
      assertNotSame(color5, color1);
      assertNotSame(color5, color0);
      assertNotSame(color5, color2);
      assertSame(color5, color3);
      assertNotSame(color5, color4);
      assertNotNull(color5);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      DefaultDrawingSupplier defaultDrawingSupplier1 = (DefaultDrawingSupplier)defaultDrawingSupplier0.clone();
      assertTrue(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      
      defaultDrawingSupplier0.getNextOutlineStroke();
      Color color0 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      boolean boolean0 = defaultDrawingSupplier0.equals(defaultDrawingSupplier1);
      assertFalse(defaultDrawingSupplier1.equals((Object)defaultDrawingSupplier0));
      assertFalse(boolean0);
      
      defaultDrawingSupplier0.getNextOutlineStroke();
      defaultDrawingSupplier0.getNextFillPaint();
      defaultDrawingSupplier0.getNextOutlinePaint();
      defaultDrawingSupplier0.getNextOutlineStroke();
      Shape[] shapeArray0 = DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE;
      Color color1 = (Color)defaultDrawingSupplier1.getNextPaint();
      assertNotSame(color1, color0);
  }
}
