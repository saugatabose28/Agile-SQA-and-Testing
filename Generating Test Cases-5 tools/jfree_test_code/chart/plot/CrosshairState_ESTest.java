/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:31:35 GMT 2023
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.awt.geom.Point2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.PlotOrientation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CrosshairState_ESTest extends CrosshairState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(false);
      crosshairState0.setDatasetIndex(3408);
      int int0 = crosshairState0.getDatasetIndex();
      assertEquals(3408, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setDatasetIndex((-1176));
      int int0 = crosshairState0.getDatasetIndex();
      assertEquals((-1176), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setCrosshairY((-1.0));
      double double0 = crosshairState0.getCrosshairY();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setCrosshairX(460.469);
      double double0 = crosshairState0.getCrosshairX();
      assertEquals(460.469, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setCrosshairX((-818.5683939));
      double double0 = crosshairState0.getCrosshairX();
      assertEquals((-818.5683939), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setCrosshairDistance(3591.060943196081);
      double double0 = crosshairState0.getCrosshairDistance();
      assertEquals(3591.060943196081, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setCrosshairDistance((-1.0));
      double double0 = crosshairState0.getCrosshairDistance();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setAnchorY(3663.7954037764775);
      double double0 = crosshairState0.getAnchorY();
      assertEquals(3663.7954037764775, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setAnchorY((-1052.3293128736784));
      double double0 = crosshairState0.getAnchorY();
      assertEquals((-1052.3293128736784), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      crosshairState0.setAnchorX(2216.222116929498);
      double double0 = crosshairState0.getAnchorX();
      assertEquals(2216.222116929498, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setAnchorX((-818.5683939));
      double double0 = crosshairState0.getAnchorX();
      assertEquals((-818.5683939), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.updateCrosshairY(0.0, 0.0, 1);
      assertEquals(0.0, crosshairState0.getCrosshairX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(false);
      crosshairState0.updateCrosshairX((-3444.82977157454), (-3444.82977157454), (-3086));
      assertEquals(0.0, crosshairState0.getCrosshairDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(false);
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      crosshairState0.updateCrosshairPoint((-3444.82977157454), (-3444.82977157454), (-3086), (-3086), (-3444.82977157454), plotOrientation0);
      assertEquals(0.0, crosshairState0.getCrosshairDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      double double0 = crosshairState0.getCrosshairDistance();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      Point2D point2D0 = crosshairState0.getAnchor();
      assertNull(point2D0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      double double0 = crosshairState0.getAnchorX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      double double0 = crosshairState0.getAnchorY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      double double0 = crosshairState0.getCrosshairX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(false);
      double double0 = crosshairState0.getCrosshairY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      int int0 = crosshairState0.getDatasetIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setAnchor((Point2D) null);
      assertEquals(0.0, crosshairState0.getAnchorY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(false);
      crosshairState0.setCrosshairY(2883.312633356);
      double double0 = crosshairState0.getCrosshairY();
      assertEquals(2883.312633356, double0, 0.01);
  }
}
