/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:27:43 GMT 2023
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Stroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.event.MarkerChangeListener;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryMarkerTest;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.IntervalMarkerTest;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.jfree.chart.ui.LengthAdjustmentType;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.TextAnchor;
import org.jfree.chart.util.UnitType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Marker_ESTest extends Marker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<CategoryMarker> comparable0 = (Comparable<CategoryMarker>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker(comparable0);
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryMarker0.setStroke(stroke0);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryMarker0.setStroke(stroke1);
      LengthAdjustmentType lengthAdjustmentType0 = categoryMarker0.getLabelOffsetType();
      categoryMarker0.setLabelOffsetType(lengthAdjustmentType0);
      ValueMarker valueMarker0 = new ValueMarker(1075.0);
      valueMarker0.getValue();
      valueMarker0.setValue(1173.260104);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      categoryMarker0.setKey(rectangleAnchor0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 4126.2342);
      Stroke stroke2 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      intervalMarker0.setOutlineStroke(stroke2);
      intervalMarker0.setEndValue(1173.260104);
      valueMarker0.equals(intervalMarker0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<IntervalMarker> comparable0 = (Comparable<IntervalMarker>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker(comparable0);
      assertNotNull(categoryMarker0);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      Color color0 = categoryMarker0.getLabelBackgroundColor();
      assertNotNull(color0);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1684300900, color0.getRGB());
      
      CategoryMarker categoryMarker1 = (CategoryMarker)categoryMarker0.clone();
      assertNotNull(categoryMarker1);
      assertTrue(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker1.getLabelAnchor());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertNull(categoryMarker1.getLabel());
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      categoryMarker0.setLabelBackgroundColor(color0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1684300900, color0.getRGB());
      assertNotSame(categoryMarker0, categoryMarker1);
      
      BasicStroke basicStroke0 = (BasicStroke)categoryMarker0.getStroke();
      assertNotNull(basicStroke0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertNotSame(categoryMarker0, categoryMarker1);
      
      MarkerChangeListener markerChangeListener0 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      categoryMarker0.removeChangeListener(markerChangeListener0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotSame(categoryMarker0, categoryMarker1);
      
      CategoryMarker categoryMarker2 = (CategoryMarker)categoryMarker0.clone();
      assertNotNull(categoryMarker2);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker2.equals((Object)categoryMarker0));
      assertTrue(categoryMarker2.equals((Object)categoryMarker1));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker2.getLabel());
      assertEquals(1.0F, categoryMarker2.getAlpha(), 0.01F);
      assertFalse(categoryMarker2.getDrawAsLine());
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker2.getLabelAnchor());
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      assertNotSame(categoryMarker2, categoryMarker0);
      assertNotSame(categoryMarker2, categoryMarker1);
      
      Font font0 = categoryMarker0.getLabelFont();
      assertNotNull(font0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker0.equals((Object)categoryMarker2));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertEquals(9, font0.getSize());
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      categoryMarker0.setLabelFont(font0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker0.equals((Object)categoryMarker2));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertEquals(9, font0.getSize());
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      categoryMarker0.setDrawAsLine(false);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker0.equals((Object)categoryMarker2));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      String string0 = categoryMarker0.getLabel();
      assertNull(string0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker0.equals((Object)categoryMarker2));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      CategoryMarker categoryMarker3 = (CategoryMarker)categoryMarker0.clone();
      assertNotNull(categoryMarker3);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker0.equals((Object)categoryMarker2));
      assertTrue(categoryMarker3.equals((Object)categoryMarker1));
      assertTrue(categoryMarker3.equals((Object)categoryMarker2));
      assertTrue(categoryMarker3.equals((Object)categoryMarker0));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker3.getLabelAnchor());
      assertNull(categoryMarker3.getLabel());
      assertFalse(categoryMarker3.getDrawAsLine());
      assertEquals(1.0F, categoryMarker3.getAlpha(), 0.01F);
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      assertNotSame(categoryMarker3, categoryMarker2);
      assertNotSame(categoryMarker3, categoryMarker0);
      assertNotSame(categoryMarker3, categoryMarker1);
      
      TextAnchor textAnchor0 = categoryMarker0.getLabelTextAnchor();
      assertNotNull(textAnchor0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker0.equals((Object)categoryMarker2));
      assertTrue(categoryMarker0.equals((Object)categoryMarker3));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      MarkerChangeEvent markerChangeEvent0 = mock(MarkerChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryMarker0.notifyListeners(markerChangeEvent0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker0.equals((Object)categoryMarker2));
      assertTrue(categoryMarker0.equals((Object)categoryMarker3));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(3.0, 0.0, color0);
      assertNotNull(intervalMarker0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker0.equals((Object)categoryMarker2));
      assertTrue(categoryMarker0.equals((Object)categoryMarker3));
      assertEquals(3.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1684300900, color0.getRGB());
      
      GradientPaintTransformer gradientPaintTransformer0 = intervalMarker0.getGradientPaintTransformer();
      assertNull(gradientPaintTransformer0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker0.equals((Object)categoryMarker2));
      assertTrue(categoryMarker0.equals((Object)categoryMarker3));
      assertEquals(3.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1684300900, color0.getRGB());
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      Font font1 = intervalMarker0.getLabelFont();
      assertNotNull(font1);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker0.equals((Object)categoryMarker2));
      assertTrue(categoryMarker0.equals((Object)categoryMarker3));
      assertTrue(font1.equals((Object)font0));
      assertEquals(3.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1684300900, color0.getRGB());
      assertFalse(font1.isBold());
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.isTransformed());
      assertEquals(9, font1.getSize());
      assertEquals(9.0F, font1.getSize2D(), 0.01F);
      assertEquals(0, font1.getStyle());
      assertFalse(font1.isItalic());
      assertTrue(font1.isPlain());
      assertEquals("SansSerif", font1.getName());
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      assertNotSame(font1, font0);
      
      LengthAdjustmentType lengthAdjustmentType0 = categoryMarker0.getLabelOffsetType();
      assertNotNull(lengthAdjustmentType0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker0.equals((Object)categoryMarker2));
      assertTrue(categoryMarker0.equals((Object)categoryMarker3));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("EXPAND", lengthAdjustmentType0.toString());
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      categoryMarker0.setLabelOffsetType(lengthAdjustmentType0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker0.equals((Object)categoryMarker2));
      assertTrue(categoryMarker0.equals((Object)categoryMarker3));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("EXPAND", lengthAdjustmentType0.toString());
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      GradientPaintTransformer gradientPaintTransformer1 = intervalMarker0.getGradientPaintTransformer();
      assertNull(gradientPaintTransformer1);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker0.equals((Object)categoryMarker2));
      assertTrue(categoryMarker0.equals((Object)categoryMarker3));
      assertEquals(3.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1684300900, color0.getRGB());
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      categoryMarker0.setPaint(color0);
      assertFalse(categoryMarker0.equals((Object)categoryMarker3));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1684300900, color0.getRGB());
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      categoryMarker0.setLabelPaint(color0);
      assertFalse(categoryMarker0.equals((Object)categoryMarker3));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1684300900, color0.getRGB());
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      RectangleInsets rectangleInsets0 = intervalMarker0.getLabelOffset();
      assertNotNull(rectangleInsets0);
      assertFalse(categoryMarker0.equals((Object)categoryMarker3));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertEquals(3.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1684300900, color0.getRGB());
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      intervalMarker0.setLabelOffset(rectangleInsets0);
      assertFalse(categoryMarker0.equals((Object)categoryMarker3));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertEquals(3.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1684300900, color0.getRGB());
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      boolean boolean0 = categoryMarker0.getDrawAsLine();
      assertFalse(categoryMarker0.equals((Object)categoryMarker3));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertFalse(boolean0);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      double double0 = intervalMarker0.getEndValue();
      assertFalse(categoryMarker0.equals((Object)categoryMarker3));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertEquals(0.0, double0, 0.01);
      assertEquals(3.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1684300900, color0.getRGB());
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      boolean boolean1 = intervalMarker0.equals((Object) null);
      assertFalse(categoryMarker0.equals((Object)categoryMarker3));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1684300900, color0.getRGB());
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      MarkerChangeListener markerChangeListener1 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      intervalMarker0.removeChangeListener(markerChangeListener1);
      assertFalse(categoryMarker0.equals((Object)categoryMarker3));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertEquals(3.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1684300900, color0.getRGB());
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      Color color1 = (Color)categoryMarker0.getLabelPaint();
      assertNotNull(color1);
      assertFalse(categoryMarker0.equals((Object)categoryMarker3));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertEquals(1684300900, color1.getRGB());
      assertEquals(100, color1.getBlue());
      assertEquals(100, color1.getAlpha());
      assertEquals(3, color1.getTransparency());
      assertEquals(100, color1.getGreen());
      assertEquals(100, color1.getRed());
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertSame(color1, color0);
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      Color color2 = (Color)intervalMarker0.getLabelPaint();
      assertNotNull(color2);
      assertFalse(color2.equals((Object)color1));
      assertFalse(color2.equals((Object)color0));
      assertFalse(categoryMarker0.equals((Object)categoryMarker3));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertEquals(0, color2.getGreen());
      assertEquals(255, color2.getAlpha());
      assertEquals((-16777216), color2.getRGB());
      assertEquals(1, color2.getTransparency());
      assertEquals(0, color2.getBlue());
      assertEquals(0, color2.getRed());
      assertEquals(3.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1684300900, color0.getRGB());
      assertNotSame(color2, color1);
      assertNotSame(color2, color0);
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      assertNotSame(color0, color2);
      assertSame(color0, color1);
      
      Color color3 = (Color)categoryMarker0.getOutlinePaint();
      assertNotNull(color3);
      assertFalse(categoryMarker0.equals((Object)categoryMarker3));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertFalse(color3.equals((Object)color0));
      assertFalse(color3.equals((Object)color1));
      assertFalse(color3.equals((Object)color2));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(1, color3.getTransparency());
      assertEquals(128, color3.getGreen());
      assertEquals((-8355712), color3.getRGB());
      assertEquals(255, color3.getAlpha());
      assertEquals(128, color3.getRed());
      assertEquals(128, color3.getBlue());
      assertNotSame(categoryMarker0, categoryMarker3);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      assertNotSame(color3, color0);
      assertNotSame(color3, color1);
      assertNotSame(color3, color2);
      
      CategoryMarker categoryMarker4 = new CategoryMarker((Comparable) null, color0, basicStroke0, (Paint) null, basicStroke0, 0.8F);
      categoryMarker0.equals(categoryMarker4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = (-918.0111368139);
      double double1 = 0.0;
      IntervalMarker intervalMarker0 = new IntervalMarker((-918.0111368139), 0.0);
      intervalMarker0.setEndValue(2578.0);
      IntervalMarker intervalMarker1 = new IntervalMarker(0.25, 0.25);
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      intervalMarker0.setStroke(stroke0);
      intervalMarker0.equals(intervalMarker1);
      float float0 = 0.9F;
      intervalMarker0.setAlpha(0.9F);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      // Undeclared exception!
      try { 
        intervalMarker1.setLabelAnchor((RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-2166.35602));
      IntervalMarker intervalMarker0 = new IntervalMarker((-2166.35602), (-2166.35602));
      MarkerChangeListener markerChangeListener0 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      valueMarker0.setLabelBackgroundColor(color0);
      Color color1 = intervalMarker0.getLabelBackgroundColor();
      intervalMarker0.setLabelPaint(color1);
      valueMarker0.removeChangeListener(markerChangeListener0);
      RectangleInsets rectangleInsets0 = valueMarker0.getLabelOffset();
      intervalMarker0.setLabelOffset(rectangleInsets0);
      Object object0 = intervalMarker0.clone();
      valueMarker0.equals(object0);
      valueMarker0.getLabelAnchor();
      intervalMarker0.setStartValue((-826.156338146478));
      valueMarker0.getOutlinePaint();
      intervalMarker0.clone();
      intervalMarker0.setAlpha(0.0F);
      valueMarker0.equals(color1);
      valueMarker0.setLabelBackgroundColor(color1);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      intervalMarker0.setLabelOffsetType(lengthAdjustmentType0);
      intervalMarker0.getLabelOffset();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0, 5050.0, paint0, stroke0, paint0, stroke0, 1.0F);
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      IntervalMarker intervalMarker1 = new IntervalMarker((-813.53817494), 3287.52503, color0);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      intervalMarker1.setStroke(stroke1);
      intervalMarker0.setEndValue((-813.53817494));
      Comparable<CombinedDomainCategoryPlot> comparable0 = (Comparable<CombinedDomainCategoryPlot>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker(comparable0);
      categoryMarker0.setAlpha(1.0F);
      categoryMarker0.setOutlinePaint(color0);
      categoryMarker0.equals(intervalMarker1);
      categoryMarker0.setLabel("offset");
      intervalMarker0.clone();
      intervalMarker1.getOutlineStroke();
      ValueMarker valueMarker0 = null;
      try {
        valueMarker0 = new ValueMarker(1.0, color0, (Stroke) null, color0, (Stroke) null, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-4.0));
      Color color0 = valueMarker0.getLabelBackgroundColor();
      valueMarker0.setLabelPaint(color0);
      IntervalMarker intervalMarker0 = new IntervalMarker((-4.0), (-4.0), color0);
      valueMarker0.setLabelPaint(color0);
      intervalMarker0.getOutlinePaint();
      Class<CategoryMarkerTest> class0 = CategoryMarkerTest.class;
      valueMarker0.getListeners(class0);
      Class<RingPlot> class1 = RingPlot.class;
      valueMarker0.getListeners(class1);
      Comparable<IntervalMarkerTest> comparable0 = (Comparable<IntervalMarkerTest>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker(comparable0);
      MarkerChangeEvent markerChangeEvent0 = mock(MarkerChangeEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        intervalMarker0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      Color color0 = valueMarker0.getLabelBackgroundColor();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0, color0);
      intervalMarker0.getLabelFont();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      intervalMarker0.setOutlineStroke(stroke0);
      valueMarker0.getLabel();
      Stroke stroke1 = valueMarker0.getOutlineStroke();
      MarkerChangeListener markerChangeListener0 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      valueMarker0.clone();
      intervalMarker0.addChangeListener(markerChangeListener0);
      intervalMarker0.getGradientPaintTransformer();
      intervalMarker0.setGradientPaintTransformer((GradientPaintTransformer) null);
      valueMarker0.getLabelFont();
      MarkerChangeListener markerChangeListener1 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      valueMarker0.addChangeListener(markerChangeListener1);
      valueMarker0.getLabelOffsetType();
      intervalMarker0.clone();
      intervalMarker0.getStartValue();
      MarkerChangeListener markerChangeListener2 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      valueMarker0.addChangeListener(markerChangeListener2);
      Class<CombinedDomainCategoryPlot> class0 = CombinedDomainCategoryPlot.class;
      valueMarker0.getListeners(class0);
      valueMarker0.setOutlineStroke(stroke1);
      intervalMarker0.getGradientPaintTransformer();
      Color color1 = intervalMarker0.getLabelBackgroundColor();
      intervalMarker0.setLabelBackgroundColor(color1);
      intervalMarker0.setEndValue(0.0);
      valueMarker0.getLabelTextAnchor();
      valueMarker0.setOutlinePaint(color1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-1.0);
      IntervalMarker intervalMarker0 = new IntervalMarker((-1.0), (-2176.82524002559));
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      intervalMarker0.setLabelBackgroundColor(color0);
      Color color1 = null;
      // Undeclared exception!
      try { 
        intervalMarker0.setLabelBackgroundColor((Color) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'color' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 0.0;
      IntervalMarker intervalMarker0 = new IntervalMarker(45.6, 0.0);
      Paint paint0 = intervalMarker0.getLabelPaint();
      intervalMarker0.setOutlinePaint(paint0);
      MarkerChangeListener markerChangeListener0 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      intervalMarker0.addChangeListener(markerChangeListener0);
      MarkerChangeEvent markerChangeEvent0 = mock(MarkerChangeEvent.class, new ViolatedAssumptionAnswer());
      intervalMarker0.notifyListeners(markerChangeEvent0);
      intervalMarker0.setOutlinePaint(paint0);
      IntervalMarker intervalMarker1 = new IntervalMarker(45.6, 45.6, paint0);
      TextAnchor textAnchor0 = intervalMarker1.getLabelTextAnchor();
      intervalMarker0.setLabelTextAnchor(textAnchor0);
      intervalMarker0.clone();
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker1.getLabelOffsetType();
      intervalMarker1.setLabelOffsetType(lengthAdjustmentType0);
      intervalMarker0.setLabelTextAnchor(textAnchor0);
      RectangleAnchor rectangleAnchor0 = intervalMarker1.getLabelAnchor();
      intervalMarker0.setLabelOffsetType(lengthAdjustmentType0);
      CategoryMarker categoryMarker0 = null;
      try {
        categoryMarker0 = new CategoryMarker(rectangleAnchor0, paint0, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-3040.31728579273));
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = null;
      // Undeclared exception!
      try { 
        valueMarker0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<CombinedRangeCategoryPlot> comparable0 = (Comparable<CombinedRangeCategoryPlot>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker(comparable0, paint0, stroke0, paint0, stroke0, 1.0F);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryMarker0.setOutlineStroke(stroke1);
      Color color0 = categoryMarker0.getLabelBackgroundColor();
      Stroke stroke2 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0, color0, stroke2, color0, stroke2, 1.0F);
      double double0 = 1123.9060851461527;
      intervalMarker0.setStartValue(1123.9060851461527);
      MarkerChangeListener markerChangeListener0 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      Color color1 = categoryMarker0.getLabelBackgroundColor();
      intervalMarker0.setPaint(color1);
      intervalMarker0.addChangeListener(markerChangeListener0);
      intervalMarker0.setOutlinePaint(color0);
      intervalMarker0.getStartValue();
      categoryMarker0.setDrawAsLine(false);
      // Undeclared exception!
      try { 
        intervalMarker0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0);
      Comparable<MultiplePiePlot> comparable0 = (Comparable<MultiplePiePlot>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker(comparable0, color0, stroke0);
      intervalMarker0.equals(categoryMarker0);
      RectangleInsets rectangleInsets0 = intervalMarker0.getLabelOffset();
      intervalMarker0.setLabelOffset(rectangleInsets0);
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      categoryMarker0.setLabelPaint(color0);
      categoryMarker0.setLabelOffset(rectangleInsets0);
      intervalMarker0.setLabelOffsetType(lengthAdjustmentType0);
      categoryMarker0.setDrawAsLine(true);
      intervalMarker0.setLabel("");
      MarkerChangeListener markerChangeListener0 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      categoryMarker0.addChangeListener(markerChangeListener0);
      intervalMarker0.setLabelPaint(color0);
      intervalMarker0.clone();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryMarker0.setOutlineStroke(stroke1);
      intervalMarker0.getLabel();
      intervalMarker0.setLabelBackgroundColor(color0);
      intervalMarker0.setStartValue(0.0);
      intervalMarker0.getGradientPaintTransformer();
      intervalMarker0.setGradientPaintTransformer((GradientPaintTransformer) null);
      intervalMarker0.getLabel();
      categoryMarker0.setDrawAsLine(true);
      Stroke stroke2 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke2).toString();
      categoryMarker0.setStroke(stroke2);
      intervalMarker0.getStroke();
      categoryMarker0.getStroke();
      intervalMarker0.clone();
      MarkerChangeListener markerChangeListener1 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      categoryMarker0.removeChangeListener(markerChangeListener1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<ValueMarker> comparable0 = (Comparable<ValueMarker>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker((-1045.418999148472), (-2790.1383038737), paint0);
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Class<CombinedDomainCategoryPlot> class0 = CombinedDomainCategoryPlot.class;
      intervalMarker0.getListeners(class0);
      CategoryMarker categoryMarker0 = new CategoryMarker(comparable0, color0, stroke0, color0, stroke0, 0.0F);
      categoryMarker0.setPaint(color0);
      Class<PolarPlot> class1 = PolarPlot.class;
      categoryMarker0.getListeners(class1);
      Comparable<MeterPlot> comparable1 = (Comparable<MeterPlot>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryMarker0.setKey(comparable1);
      Font font0 = categoryMarker0.getLabelFont();
      intervalMarker0.setLabelFont(font0);
      intervalMarker0.clone();
      intervalMarker0.setAlpha(0.0F);
      intervalMarker0.setLabelBackgroundColor(color0);
      intervalMarker0.getLabelPaint();
      // Undeclared exception!
      try { 
        categoryMarker0.setLabelOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 305.293838;
      IntervalMarker intervalMarker0 = new IntervalMarker(305.293838, 305.293838);
      intervalMarker0.clone();
      float float0 = 0.0F;
      intervalMarker0.setAlpha(0.0F);
      intervalMarker0.setEndValue(0.0F);
      TextAnchor textAnchor0 = null;
      String string0 = "xj!W4:1a<pmwZEl:y{S";
      intervalMarker0.setLabel("xj!W4:1a<pmwZEl:y{S");
      IntervalMarker intervalMarker1 = new IntervalMarker(0.0F, 0.0F);
      intervalMarker0.equals(intervalMarker1);
      // Undeclared exception!
      try { 
        intervalMarker0.setLabelTextAnchor((TextAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(8.0, 8.0);
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      MarkerChangeEvent markerChangeEvent0 = mock(MarkerChangeEvent.class, new ViolatedAssumptionAnswer());
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      intervalMarker0.setLabelOffsetType(lengthAdjustmentType0);
      intervalMarker0.notifyListeners(markerChangeEvent0);
      ValueMarker valueMarker0 = new ValueMarker(2185.1867686597175, color0, stroke0);
      intervalMarker0.getStartValue();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        intervalMarker0.getListeners(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [Ljava.lang.String; cannot be cast to [Ljava.util.EventListener;
         //
         verifyException("javax.swing.event.EventListenerList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(551.62);
      Color color0 = valueMarker0.getLabelBackgroundColor();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = valueMarker0.getLabelTextAnchor();
      valueMarker0.setLabelTextAnchor(textAnchor0);
      IntervalMarker intervalMarker0 = new IntervalMarker(551.62, 551.62, color0, stroke0, color0, stroke0, 0.0F);
      intervalMarker0.setLabelTextAnchor(textAnchor0);
      Font font0 = valueMarker0.getLabelFont();
      intervalMarker0.setLabelFont(font0);
      intervalMarker0.getGradientPaintTransformer();
      intervalMarker0.setGradientPaintTransformer((GradientPaintTransformer) null);
      valueMarker0.clone();
      intervalMarker0.setEndValue((-4286.32224));
      // Undeclared exception!
      try { 
        valueMarker0.setStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null, paint0, stroke0, paint0, stroke0, 0.0F);
      Color color0 = categoryMarker0.getLabelBackgroundColor();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker1 = new CategoryMarker((Comparable) null, color0, stroke1);
      Stroke stroke2 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryMarker0.setOutlineStroke(stroke2);
      Font font0 = categoryMarker0.getLabelFont();
      categoryMarker1.setLabelFont(font0);
      MarkerChangeListener markerChangeListener0 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      categoryMarker1.removeChangeListener(markerChangeListener0);
      categoryMarker1.getAlpha();
      Stroke stroke3 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryMarker0.setStroke(stroke3);
      categoryMarker0.equals((Object) null);
      categoryMarker0.getAlpha();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 1.0F, color0);
      intervalMarker0.equals((Object) null);
      categoryMarker1.setLabelFont(font0);
      MarkerChangeListener markerChangeListener1 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      categoryMarker0.removeChangeListener(markerChangeListener1);
      ValueMarker valueMarker0 = new ValueMarker((-960.3859471699));
      valueMarker0.setPaint(color0);
      Stroke stroke4 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      valueMarker0.setOutlineStroke(stroke4);
      valueMarker0.setValue(0.0);
      valueMarker0.equals(color0);
      intervalMarker0.getLabelOffset();
      MarkerChangeEvent markerChangeEvent0 = mock(MarkerChangeEvent.class, new ViolatedAssumptionAnswer());
      intervalMarker0.notifyListeners(markerChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(1933.180884748);
      valueMarker0.equals("u+$1#l{B6!Fvt/]#E2");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-817.222980652));
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      valueMarker0.setStroke(stroke0);
      ValueMarker valueMarker1 = new ValueMarker(0.0);
      valueMarker0.equals(valueMarker1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = (-1576.183600286408);
      double double1 = 0.0;
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      ValueMarker valueMarker0 = new ValueMarker(0.0, paint0, stroke0);
      // Undeclared exception!
      try { 
        valueMarker0.setLabelTextAnchor((TextAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      valueMarker0.getPaint();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0);
      intervalMarker0.getAlpha();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparable<FastScatterPlot> comparable0 = (Comparable<FastScatterPlot>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double double0 = (-800.41849);
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      ValueMarker valueMarker0 = new ValueMarker((-800.41849), paint0, stroke0, paint0, stroke0, 0.0F);
      valueMarker0.clone();
      Color color0 = valueMarker0.getLabelBackgroundColor();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker(comparable0, color0, stroke1, color0, stroke1, 0.0F);
      Stroke stroke2 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryMarker0.setStroke(stroke2);
      valueMarker0.setOutlinePaint(color0);
      valueMarker0.setValue(0.0);
      // Undeclared exception!
      try { 
        categoryMarker0.setLabelOffsetType((LengthAdjustmentType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'adj' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparable<CombinedDomainCategoryPlot> comparable0 = (Comparable<CombinedDomainCategoryPlot>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker(comparable0);
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryMarker0.setStroke(stroke0);
      Object object0 = categoryMarker0.clone();
      categoryMarker0.equals(object0);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = categoryMarker0.getLabelOffset();
      categoryMarker0.setLabelOffset(rectangleInsets0);
      categoryMarker0.setOutlineStroke(stroke1);
      categoryMarker0.setDrawAsLine(true);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparable<CombinedDomainXYPlot> comparable0 = null;
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null, paint0, stroke0);
      Color color0 = categoryMarker0.getLabelBackgroundColor();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      ValueMarker valueMarker0 = new ValueMarker((-459.0), color0, stroke1, color0, stroke1, 0.0F);
      // Undeclared exception!
      try { 
        valueMarker0.setAlpha((-468.4373F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(260.6504292282);
      Color color0 = valueMarker0.getLabelBackgroundColor();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = null;
      try {
        intervalMarker0 = new IntervalMarker(260.6504292282, 260.6504292282, color0, stroke0, color0, stroke0, 971.54F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(2479.645388281);
      Color color0 = valueMarker0.getLabelBackgroundColor();
      valueMarker0.setLabelPaint(color0);
      Color color1 = valueMarker0.getLabelBackgroundColor();
      valueMarker0.setOutlinePaint(color1);
      MarkerChangeListener markerChangeListener0 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      valueMarker0.addChangeListener(markerChangeListener0);
      Comparable<XYPlot> comparable0 = (Comparable<XYPlot>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Color color2 = valueMarker0.getLabelBackgroundColor();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker(comparable0, color2, stroke0);
      categoryMarker0.getDrawAsLine();
      double double0 = 3.0;
      // Undeclared exception!
      try { 
        valueMarker0.setAlpha((-484.367F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(3.0);
      RectangleInsets rectangleInsets0 = valueMarker0.getLabelOffset();
      valueMarker0.setLabelOffset(rectangleInsets0);
      RectangleInsets rectangleInsets1 = valueMarker0.getLabelOffset();
      valueMarker0.setLabelOffset(rectangleInsets1);
      valueMarker0.setLabelOffset(rectangleInsets1);
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      MarkerChangeListener markerChangeListener0 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      categoryMarker0.addChangeListener(markerChangeListener0);
      categoryMarker0.equals(rectangleInsets1);
      categoryMarker0.clone();
      categoryMarker0.setLabelOffset(rectangleInsets0);
      Color color0 = categoryMarker0.getLabelBackgroundColor();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(0.01, 4468.0, color0, stroke0, color0, stroke0, 0.0F);
      intervalMarker0.getGradientPaintTransformer();
      intervalMarker0.setGradientPaintTransformer((GradientPaintTransformer) null);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      intervalMarker0.setLabelAnchor(rectangleAnchor0);
      IntervalMarker intervalMarker1 = new IntervalMarker(4468.0, 0.0F);
      valueMarker0.equals(intervalMarker1);
      MarkerChangeListener markerChangeListener1 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      intervalMarker0.removeChangeListener(markerChangeListener1);
      Paint paint0 = intervalMarker1.getOutlinePaint();
      categoryMarker0.getLabelAnchor();
      MarkerChangeListener markerChangeListener2 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      valueMarker0.addChangeListener(markerChangeListener2);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker2 = null;
      try {
        intervalMarker2 = new IntervalMarker((-3466.7), 3.0, paint0, stroke1, color0, stroke1, (-877.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntervalMarker intervalMarker0 = new IntervalMarker((-2681.0227964192), 0.0);
      Font font0 = intervalMarker0.getLabelFont();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null, paint0, stroke0);
      Color color0 = categoryMarker0.getLabelBackgroundColor();
      intervalMarker0.setOutlinePaint(color0);
      categoryMarker0.setOutlineStroke((Stroke) null);
      categoryMarker0.setDrawAsLine(true);
      intervalMarker0.setLabelFont(font0);
      intervalMarker0.getLabelOffsetType();
      Class<MultiplePiePlot> class0 = MultiplePiePlot.class;
      categoryMarker0.getListeners(class0);
      TextAnchor textAnchor0 = intervalMarker0.getLabelTextAnchor();
      intervalMarker0.setLabelTextAnchor(textAnchor0);
      intervalMarker0.getGradientPaintTransformer();
      categoryMarker0.clone();
      intervalMarker0.setLabel((String) null);
      intervalMarker0.setLabelTextAnchor(textAnchor0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = (-1852.41454987);
      double double1 = 0.0;
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, (-1852.41454987));
      assertNotNull(intervalMarker0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1852.41454987), intervalMarker0.getEndValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      assertNotNull(color0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1852.41454987), intervalMarker0.getEndValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1684300900, color0.getRGB());
      assertEquals(100, color0.getBlue());
      assertEquals(100, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(100, color0.getAlpha());
      assertEquals(100, color0.getRed());
      
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      intervalMarker0.setStroke(stroke1);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1852.41454987), intervalMarker0.getEndValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      float float0 = 567.4087F;
      GradientPaintTransformer gradientPaintTransformer0 = intervalMarker0.getGradientPaintTransformer();
      assertNull(gradientPaintTransformer0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1852.41454987), intervalMarker0.getEndValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      intervalMarker0.setGradientPaintTransformer((GradientPaintTransformer) null);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1852.41454987), intervalMarker0.getEndValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      IntervalMarker intervalMarker1 = (IntervalMarker)intervalMarker0.clone();
      assertNotNull(intervalMarker1);
      assertTrue(intervalMarker1.equals((Object)intervalMarker0));
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1852.41454987), intervalMarker0.getEndValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.8F, intervalMarker1.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker1.getLabelAnchor());
      assertNull(intervalMarker1.getLabel());
      assertEquals(0.0, intervalMarker1.getStartValue(), 0.01);
      assertEquals((-1852.41454987), intervalMarker1.getEndValue(), 0.01);
      assertNotSame(intervalMarker0, intervalMarker1);
      assertNotSame(intervalMarker1, intervalMarker0);
      
      boolean boolean0 = intervalMarker0.equals(intervalMarker1);
      assertTrue(intervalMarker0.equals((Object)intervalMarker1));
      assertTrue(intervalMarker1.equals((Object)intervalMarker0));
      assertTrue(boolean0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1852.41454987), intervalMarker0.getEndValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.8F, intervalMarker1.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker1.getLabelAnchor());
      assertNull(intervalMarker1.getLabel());
      assertEquals(0.0, intervalMarker1.getStartValue(), 0.01);
      assertEquals((-1852.41454987), intervalMarker1.getEndValue(), 0.01);
      assertNotSame(intervalMarker0, intervalMarker1);
      assertNotSame(intervalMarker1, intervalMarker0);
      
      Comparable<XYPlot> comparable0 = (Comparable<XYPlot>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker(comparable0);
      assertNotNull(categoryMarker0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      
      LengthAdjustmentType lengthAdjustmentType0 = categoryMarker0.getLabelOffsetType();
      assertNotNull(lengthAdjustmentType0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertEquals("EXPAND", lengthAdjustmentType0.toString());
      
      MarkerChangeListener markerChangeListener0 = mock(MarkerChangeListener.class, new ViolatedAssumptionAnswer());
      categoryMarker0.addChangeListener(markerChangeListener0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      
      // Undeclared exception!
      try { 
        categoryMarker0.setAlpha(567.4087F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparable<PiePlot3D> comparable0 = (Comparable<PiePlot3D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker(comparable0);
      assertNotNull(categoryMarker0);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      Comparable comparable1 = categoryMarker0.getKey();
      assertNotNull(comparable1);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1323.36771, (-1.0));
      assertNotNull(intervalMarker0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1323.36771, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1.0), intervalMarker0.getEndValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      intervalMarker0.setStroke(stroke0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1323.36771, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1.0), intervalMarker0.getEndValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      assertNotNull(lengthAdjustmentType0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1323.36771, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1.0), intervalMarker0.getEndValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      assertEquals("CONTRACT", lengthAdjustmentType0.toString());
      
      CategoryMarker categoryMarker1 = new CategoryMarker(comparable1);
      assertNotNull(categoryMarker1);
      assertTrue(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker1.getLabelAnchor());
      assertNull(categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.getDrawAsLine());
      
      Font font0 = categoryMarker1.getLabelFont();
      assertNotNull(font0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker1.getLabelAnchor());
      assertNull(categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(9, font0.getSize());
      assertFalse(font0.isBold());
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      categoryMarker1.setLabelFont(font0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker1.getLabelAnchor());
      assertNull(categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals(9.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(9, font0.getSize());
      assertFalse(font0.isBold());
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      RectangleInsets rectangleInsets0 = categoryMarker1.getLabelOffset();
      assertNotNull(rectangleInsets0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker1.getLabelAnchor());
      assertNull(categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      categoryMarker0.setLabelOffset(rectangleInsets0);
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertTrue(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker1.getLabelAnchor());
      assertNull(categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      double double0 = intervalMarker0.getEndValue();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1323.36771, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-1.0), intervalMarker0.getEndValue(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, intervalMarker0.getLabelAnchor());
      
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      assertTrue(categoryMarker0.equals((Object)categoryMarker1));
      assertEquals(RectangleAnchor.TOP_LEFT, rectangleAnchor0);
      assertEquals(RectangleAnchor.TOP_LEFT, categoryMarker0.getLabelAnchor());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNotSame(categoryMarker0, categoryMarker1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparable<PiePlot3D> comparable0 = (Comparable<PiePlot3D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = null;
      try {
        categoryMarker0 = new CategoryMarker(comparable0, paint0, stroke0, paint0, stroke0, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(2143.18337);
      LengthAdjustmentType lengthAdjustmentType0 = valueMarker0.getLabelOffsetType();
      valueMarker0.setAlpha(0.0F);
      valueMarker0.setLabelOffsetType(lengthAdjustmentType0);
      MarkerChangeEvent markerChangeEvent0 = mock(MarkerChangeEvent.class, new ViolatedAssumptionAnswer());
      valueMarker0.notifyListeners(markerChangeEvent0);
      Color color0 = valueMarker0.getLabelBackgroundColor();
      IntervalMarker intervalMarker0 = new IntervalMarker((-772.463), 2143.18337, color0);
      MarkerChangeEvent markerChangeEvent1 = mock(MarkerChangeEvent.class, new ViolatedAssumptionAnswer());
      valueMarker0.notifyListeners(markerChangeEvent1);
      intervalMarker0.equals(lengthAdjustmentType0);
      valueMarker0.getOutlineStroke();
      intervalMarker0.getEndValue();
      assertEquals(0.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(100, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparable<ThermometerPlot> comparable0 = (Comparable<ThermometerPlot>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0, paint0);
      Color color0 = intervalMarker0.getLabelBackgroundColor();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryMarker categoryMarker0 = new CategoryMarker(comparable0, color0, stroke0);
      categoryMarker0.getDrawAsLine();
      categoryMarker0.setLabel("");
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      ValueMarker valueMarker0 = new ValueMarker(0.0, color0, stroke1);
      IntervalMarker intervalMarker1 = new IntervalMarker(0.0, 0.0);
      valueMarker0.equals(intervalMarker1);
      assertEquals(1684300900, color0.getRGB());
      
      intervalMarker0.getLabelAnchor();
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertFalse(intervalMarker0.equals((Object)intervalMarker1));
  }
}
