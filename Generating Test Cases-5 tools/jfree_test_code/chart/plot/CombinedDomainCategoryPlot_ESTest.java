/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:48:14 GMT 2023
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Composite;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.ui.Layer;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.util.ShadowGenerator;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CombinedDomainCategoryPlot_ESTest extends CombinedDomainCategoryPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setWeight((-482));
      combinedDomainCategoryPlot0.getGap();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.drawAnnotations(graphics2D0, rectangle2D0);
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      combinedDomainCategoryPlot0.setOrientation(plotOrientation0);
      combinedDomainCategoryPlot0.getGap();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation((-328));
      combinedDomainCategoryPlot0.setDomainAxisLocation(axisLocation0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(rectangle2D1).contains(anyDouble() , anyDouble());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(rectangle2D1).when(plotRenderingInfo0).getDataArea();
      RectangleInsets rectangleInsets0 = Plot.DEFAULT_INSETS;
      combinedDomainCategoryPlot0.setInsets(rectangleInsets0);
      combinedDomainCategoryPlot0.handleClick((-482), (-482), plotRenderingInfo0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D2).getHeight();
      doReturn(0.0).when(rectangle2D2).getWidth();
      doReturn(0.0).when(rectangle2D2).getX();
      doReturn(0.0).when(rectangle2D2).getY();
      combinedDomainCategoryPlot0.calculateAxisSpace(graphics2D1, rectangle2D2);
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(plotRenderingInfo1).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoomRangeAxes(5.0, plotRenderingInfo1, point2D0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.removeRangeMarker(marker0);
      combinedDomainCategoryPlot0.getDataset((-1));
      combinedDomainCategoryPlot0.getRendererForDataset((CategoryDataset) null);
      combinedDomainCategoryPlot0.setRenderer((CategoryItemRenderer) null, false);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(plotRenderingInfo0).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.zoomRangeAxes((-2433.7982229899926), plotRenderingInfo0, point2D0);
      combinedDomainCategoryPlot0.getLegendItems();
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(plotRenderingInfo1).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D1 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.findSubplot(plotRenderingInfo1, point2D1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      doReturn(combinedDomainCategoryPlot0).when(categoryAxis0).clone();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot(categoryAxis0);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot1.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.CombinedDomainCategoryPlot cannot be cast to org.jfree.chart.axis.CategoryAxis
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      CategoryAxis categoryAxis1 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot(categoryAxis1);
      combinedDomainCategoryPlot0.clearDomainAxes();
      CategoryAxis categoryAxis2 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      CombinedDomainCategoryPlot combinedDomainCategoryPlot2 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot2.getRangeAxis(10);
      valueAxisArray0[0] = null;
      combinedDomainCategoryPlot2.getRangeAxisForDataset(10);
      valueAxisArray0[1] = null;
      combinedDomainCategoryPlot0.getRangeAxisForDataset(5286);
      valueAxisArray0[2] = null;
      combinedDomainCategoryPlot2.getRangeAxis();
      valueAxisArray0[3] = null;
      CategoryAxis categoryAxis3 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot3 = new CombinedDomainCategoryPlot(categoryAxis3);
      combinedDomainCategoryPlot0.setFixedLegendItems((LegendItemCollection) null);
      combinedDomainCategoryPlot3.getRangeAxisForDataset(221);
      valueAxisArray0[4] = null;
      combinedDomainCategoryPlot1.setRangeAxes(valueAxisArray0);
      combinedDomainCategoryPlot1.setDomainAxis(categoryAxis2);
      combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot1, 10);
      combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot2, 50);
      combinedDomainCategoryPlot2.getLegendItems();
      combinedDomainCategoryPlot1.getGap();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      combinedDomainCategoryPlot0.annotationChanged((AnnotationChangeEvent) null);
      PlotChangeEvent plotChangeEvent0 = mock(PlotChangeEvent.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.plotChanged(plotChangeEvent0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(rectangle2D0).contains(anyDouble() , anyDouble());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(rectangle2D0).when(plotRenderingInfo0).getDataArea();
      combinedDomainCategoryPlot0.handleClick(4055, 4055, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(marker0).clone();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainCategoryPlot0.clearAnnotations();
      combinedDomainCategoryPlot0.addRangeMarker(2492, marker0, layer0, false);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.panRangeAxes(2492, plotRenderingInfo0, (Point2D) null);
      combinedDomainCategoryPlot0.setNotify(true);
      LegendItemCollection legendItemCollection0 = combinedDomainCategoryPlot0.getLegendItems();
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      combinedDomainCategoryPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
      combinedDomainCategoryPlot0.equals("");
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot1);
      combinedDomainCategoryPlot1.getLegendItems();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot2 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(combinedDomainCategoryPlot2, legendItemCollection0).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(135.0, (double)0.0F, (double)1.0F, 0.05, 2.5).when(rectangle2D0).getHeight();
      doReturn(5.0, 1834.641164120015, (double)10, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn((double)10, (-3.0), 1.0).when(rectangle2D0).getX();
      doReturn((double)1.0F, 0.0, (double)10).when(rectangle2D0).getY();
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(plotState0).getSharedAxisStates();
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo1).getOwner();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.draw(graphics2D0, rectangle2D0, (Point2D) null, plotState0, plotRenderingInfo1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((double)1.0F, (double)10).when(rectangle2D0).getHeight();
      doReturn((double)1.0F, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn((double)1.0F).when(rectangle2D0).getX();
      doReturn(95.8333333).when(rectangle2D0).getY();
      AxisSpace axisSpace0 = combinedDomainCategoryPlot0.calculateAxisSpace(graphics2D0, rectangle2D0);
      combinedDomainCategoryPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D0, axisSpace0);
      combinedDomainCategoryPlot0.getSubplots();
      combinedDomainCategoryPlot0.setGap((-1.0));
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot();
      Object object0 = combinedDomainCategoryPlot0.clone();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(combinedDomainCategoryPlot1, object0).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(95.8333333, 251.2607259450012, (-1.0), (-1086.253547993), 891.034).when(rectangle2D1).getHeight();
      doReturn((-1086.253547993), 0.0, 891.034, 0.0, 0.0).when(rectangle2D1).getWidth();
      doReturn(251.2607259450012, 1227.802, (-1086.253547993)).when(rectangle2D1).getX();
      doReturn((-1.0), 2021.870988072864, (double)1.0F).when(rectangle2D1).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(chartRenderingInfo0, (ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      combinedDomainCategoryPlot0.draw(graphics2D1, rectangle2D1, point2D0, (PlotState) null, plotRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((-1807)).when(plotRenderingInfo1).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D1 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.findSubplot(plotRenderingInfo1, point2D1);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.add((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subplot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      combinedDomainCategoryPlot0.setColumnRenderingOrder(sortOrder0);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((-4941)).when(plotRenderingInfo0).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.zoomRangeAxes(4309.0266, plotRenderingInfo0, point2D0, true);
      PlotChangeEvent plotChangeEvent0 = mock(PlotChangeEvent.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.plotChanged(plotChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setGap(1.7976931348623157E308);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(plotRenderingInfo0).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.findSubplot(plotRenderingInfo0, point2D0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAnnotation categoryAnnotation0 = mock(CategoryAnnotation.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.addAnnotation(categoryAnnotation0);
      combinedDomainCategoryPlot0.setBackgroundPaint(combinedDomainCategoryPlot0.DEFAULT_BACKGROUND_PAINT);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Composite) null).when(graphics2D0).getComposite();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Composite) null).when(graphics2D1).getComposite();
      combinedDomainCategoryPlot1.fillBackground(graphics2D1, (Rectangle2D) null);
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      combinedDomainCategoryPlot1.clearDomainMarkers(1500);
      combinedDomainCategoryPlot1.fillBackground(graphics2D0, rectangle2D0, plotOrientation0);
      combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot1, 10);
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot1.getCategoriesForAxis(categoryAxis0);
      Object object0 = combinedDomainCategoryPlot1.clone();
      combinedDomainCategoryPlot0.equals(object0);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot1.add((CategoryPlot) combinedDomainCategoryPlot0, 10);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      combinedDomainCategoryPlot0.getChart();
      combinedDomainCategoryPlot0.setChart((JFreeChart) null);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getX();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D1).getHeight();
      doReturn(0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      AxisSpace axisSpace0 = combinedDomainCategoryPlot0.calculateAxisSpace(graphics2D1, rectangle2D1);
      combinedDomainCategoryPlot0.setFixedDomainAxisSpace(axisSpace0, true);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      combinedDomainCategoryPlot0.draw(graphics2D0, rectangle2D0, point2D0, (PlotState) null, plotRenderingInfo0);
      PlotChangeEvent plotChangeEvent0 = mock(PlotChangeEvent.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.plotChanged(plotChangeEvent0);
      combinedDomainCategoryPlot0.getGap();
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(plotRenderingInfo1).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D1 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoomRangeAxes(5.0, 5.0, plotRenderingInfo1, point2D1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      combinedDomainCategoryPlot0.setFixedRangeAxisSpaceForSubplots((AxisSpace) null);
      combinedDomainCategoryPlot0.setFixedRangeAxisSpaceForSubplots((AxisSpace) null);
      CategoryPlot categoryPlot0 = null;
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.add((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subplot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.getRangeAxisForDataset(0);
      combinedDomainCategoryPlot0.getDataRange((ValueAxis) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot();
      CategoryAnchor categoryAnchor0 = combinedDomainCategoryPlot0.getDomainGridlinePosition();
      combinedDomainCategoryPlot0.setDomainGridlinePosition(categoryAnchor0);
      combinedDomainCategoryPlot1.setRangeCrosshairLockedOnData(true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Layer layer0 = Layer.BACKGROUND;
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainCategoryPlot1.getDomainMarkers(layer1);
      combinedDomainCategoryPlot1.drawDomainMarkers(graphics2D0, rectangle2D0, 10, layer0);
      combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot1);
      combinedDomainCategoryPlot0.getCategories();
      PlotChangeEvent plotChangeEvent0 = mock(PlotChangeEvent.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot1.plotChanged(plotChangeEvent0);
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot1.getOrientation();
      combinedDomainCategoryPlot1.setOrientation(plotOrientation0);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(plotRenderingInfo0).getDataArea();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.handleClick(0, 0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      doReturn((AxisSpace) null).when(categoryAxis0).reserveSpace(any(java.awt.Graphics2D.class) , any(org.jfree.chart.plot.Plot.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.axis.AxisSpace.class));
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Graphics2D graphics2D1 = null;
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.getFixedRangeAxisSpace();
      AxisSpace axisSpace0 = combinedDomainCategoryPlot0.calculateRangeAxisSpace((Graphics2D) null, rectangle2D1, (AxisSpace) null);
      combinedDomainCategoryPlot0.setFixedRangeAxisSpaceForSubplots(axisSpace0);
      combinedDomainCategoryPlot0.setDomainCrosshairStroke(categoryAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainCategoryPlot0.getDomainAxisLocation(1);
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = null;
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.draw(graphics2D0, rectangle2D0, point2D0, plotState0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getRangeMinorGridlineStroke();
      combinedDomainCategoryPlot0.getDataset(1814);
      combinedDomainCategoryPlot0.getRendererForDataset((CategoryDataset) null);
      combinedDomainCategoryPlot0.setRenderer(1814, (CategoryItemRenderer) null);
      combinedDomainCategoryPlot0.getLegendItems();
      combinedDomainCategoryPlot0.getGap();
      combinedDomainCategoryPlot0.getSubplots();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((double)1.0F, (-3379.291)).when(rectangle2D0).getHeight();
      doReturn((double)10, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn((double)1814).when(rectangle2D0).getX();
      doReturn((double)10).when(rectangle2D0).getY();
      combinedDomainCategoryPlot0.calculateAxisSpace(graphics2D0, rectangle2D0);
      combinedDomainCategoryPlot0.getRangeAxis(0);
      combinedDomainCategoryPlot0.getDataRange((ValueAxis) null);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((-885)).when(plotRenderingInfo0).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.zoomRangeAxes((double) 1814, plotRenderingInfo0, point2D0, true);
      combinedDomainCategoryPlot0.getSubplots();
      combinedDomainCategoryPlot0.getGap();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(rectangle2D1).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getWidth();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getX();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getY();
      Point2D point2D1 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(plotState0).getSharedAxisStates();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.draw(graphics2D1, rectangle2D1, point2D1, plotState0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot(categoryAxis0);
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainCategoryPlot1.removeDomainMarker(10, marker0, layer0, false);
      combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot1);
      combinedDomainCategoryPlot0.setShadowGenerator((ShadowGenerator) null);
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot1.zoomRangeAxes((double) 1.0F, 91.875, (PlotRenderingInfo) null, point2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Font font0 = CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
      combinedDomainCategoryPlot0.setNoDataMessageFont(font0);
      combinedDomainCategoryPlot0.setGap(251.2607259450012);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.getFixedRangeAxisSpace();
      AxisSpace axisSpace0 = combinedDomainCategoryPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D0, (AxisSpace) null);
      combinedDomainCategoryPlot0.setFixedRangeAxisSpaceForSubplots(axisSpace0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.equals(combinedDomainCategoryPlot1);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(plotRenderingInfo0).getDataArea();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.handleClick(10, 0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainCategoryPlot0.clearAnnotations();
      combinedDomainCategoryPlot0.addRangeMarker(2492, marker0, layer0, false);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.panRangeAxes(2492, plotRenderingInfo0, (Point2D) null);
      combinedDomainCategoryPlot0.setNotify(true);
      combinedDomainCategoryPlot0.getLegendItems();
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      combinedDomainCategoryPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
      combinedDomainCategoryPlot0.equals("");
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot1);
      combinedDomainCategoryPlot1.getLegendItems();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getX();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getY();
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null, (Map) null).when(plotState0).getSharedAxisStates();
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null, (ChartRenderingInfo) null).when(plotRenderingInfo1).getOwner();
      combinedDomainCategoryPlot0.draw(graphics2D0, rectangle2D0, (Point2D) null, plotState0, plotRenderingInfo1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getX();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.draw(graphics2D0, rectangle2D0, point2D0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis1 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot(categoryAxis1);
      combinedDomainCategoryPlot0.setRangeGridlineStroke(categoryAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainCategoryPlot0.remove(combinedDomainCategoryPlot1);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot2 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.remove(combinedDomainCategoryPlot2);
      combinedDomainCategoryPlot2.setDrawingSupplier((DrawingSupplier) null);
      combinedDomainCategoryPlot0.setDomainGridlinePaint(categoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedDomainCategoryPlot2.getRangeAxis(0);
      combinedDomainCategoryPlot2.getDataRange((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot2.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'object' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Paint paint0 = combinedDomainCategoryPlot0.getRangeCrosshairPaint();
      combinedDomainCategoryPlot0.setRangeMinorGridlinePaint(paint0);
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.getCategoriesForAxis(categoryAxis0);
      PlotRenderingInfo plotRenderingInfo0 = null;
      combinedDomainCategoryPlot0.clearDomainMarkers();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoomRangeAxes(841.4029313719069, 5.0, (PlotRenderingInfo) null, point2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getX();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getY();
      Marker marker0 = mock(Marker.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.removeDomainMarker(marker0);
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      combinedDomainCategoryPlot0.draw(graphics2D0, rectangle2D0, point2D0, (PlotState) null, plotRenderingInfo0);
      combinedDomainCategoryPlot0.getLegendItems();
      combinedDomainCategoryPlot0.getGap();
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(plotRenderingInfo1).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D1 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoomRangeAxes(5.0, plotRenderingInfo1, point2D1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      doReturn((AxisSpace) null).when(categoryAxis0).reserveSpace(any(java.awt.Graphics2D.class) , any(org.jfree.chart.plot.Plot.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.axis.AxisSpace.class));
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.equals(combinedDomainCategoryPlot1);
      combinedDomainCategoryPlot0.getCategories();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot1.draw(graphics2D0, rectangle2D0, point2D0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.getSubplots();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.findSubplot(plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot();
      CategoryAnnotation categoryAnnotation0 = mock(CategoryAnnotation.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot1.addAnnotation(categoryAnnotation0);
      combinedDomainCategoryPlot1.setBackgroundPaint(combinedDomainCategoryPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainCategoryPlot1.add((CategoryPlot) combinedDomainCategoryPlot0);
      // Undeclared exception!
      combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot1, 2532);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      combinedDomainCategoryPlot0.setOrientation(plotOrientation0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require weight >= 1.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Integer integer0 = (Integer)Plot.ZERO;
      combinedDomainCategoryPlot0.equals(integer0);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(plotRenderingInfo0).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.setDomainCrosshairColumnKey(comparable0, false);
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoomRangeAxes(1244.06, plotRenderingInfo0, point2D0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(plotRenderingInfo0).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoomRangeAxes(5.0, 0.05, plotRenderingInfo0, point2D0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(plotRenderingInfo0).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoomRangeAxes(0.0, 0.0, plotRenderingInfo0, point2D0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getRangeAxisEdge();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation((-920));
      combinedDomainCategoryPlot0.setDomainAxisLocation((-920), axisLocation0);
      combinedDomainCategoryPlot0.getGap();
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      combinedDomainCategoryPlot0.setFixedRangeAxisSpaceForSubplots((AxisSpace) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(categoryAxis0).clone();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.getDomainAxisForDataset(178);
      Object object0 = combinedDomainCategoryPlot0.clone();
      combinedDomainCategoryPlot0.equals(object0);
      combinedDomainCategoryPlot0.setGap((-2173.4722231612263));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(categoryAxis0).clone();
      doReturn((AxisSpace) null).when(categoryAxis0).reserveSpace(any(java.awt.Graphics2D.class) , any(org.jfree.chart.plot.Plot.class) , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class) , any(org.jfree.chart.axis.AxisSpace.class));
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.getChart();
      combinedDomainCategoryPlot0.setChart((JFreeChart) null);
      combinedDomainCategoryPlot0.getSubplots();
      combinedDomainCategoryPlot0.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.calculateAxisSpace(graphics2D0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      double double0 = 0.0;
      CategoryAnnotation categoryAnnotation0 = mock(CategoryAnnotation.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.removeAnnotation(categoryAnnotation0);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoomRangeAxes(0.2, (PlotRenderingInfo) null, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot();
      Object object0 = combinedDomainCategoryPlot1.clone();
      combinedDomainCategoryPlot0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(plotRenderingInfo0).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoomRangeAxes(0.0, plotRenderingInfo0, point2D0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedDomainCategoryPlot0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot();
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertNotNull(combinedDomainCategoryPlot1);
      
      combinedDomainCategoryPlot0.removeChangeListener(combinedDomainCategoryPlot1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainCategoryPlot0.setRangeAxisLocation(axisLocation0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(plotRenderingInfo0).getDataArea();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.handleClick(548, 0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      combinedDomainCategoryPlot0.annotationChanged((AnnotationChangeEvent) null);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      
      PlotChangeEvent plotChangeEvent0 = mock(PlotChangeEvent.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.plotChanged(plotChangeEvent0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(plotRenderingInfo0).getDataArea();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.handleClick(4055, 4055, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertNotNull(combinedDomainCategoryPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      Collection collection0 = combinedDomainCategoryPlot0.getRangeMarkers(0, layer0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertNull(collection0);
      
      LegendItemCollection legendItemCollection0 = combinedDomainCategoryPlot0.getLegendItems();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
      
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.handleClick(0, (-456), (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      List list0 = combinedDomainCategoryPlot0.getCategoriesForAxis((CategoryAxis) null);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      combinedDomainCategoryPlot0.setDomainCrosshairVisible(true);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(plotRenderingInfo0).getSubplotIndex(any(java.awt.geom.Point2D.class));
      combinedDomainCategoryPlot0.clearRangeAxes();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.findSubplot(plotRenderingInfo0, point2D0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertNotNull(combinedDomainCategoryPlot0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot();
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertNotNull(combinedDomainCategoryPlot1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Composite) null).when(graphics2D0).getComposite();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot2 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot2.equals((Object)combinedDomainCategoryPlot0));
      assertFalse(combinedDomainCategoryPlot2.equals((Object)combinedDomainCategoryPlot1));
      assertFalse(combinedDomainCategoryPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot2.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot2.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot2.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot2.isNotify());
      assertTrue(combinedDomainCategoryPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot2.getRendererCount());
      assertNull(combinedDomainCategoryPlot2.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot2.isSubplot());
      assertFalse(combinedDomainCategoryPlot2.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot2.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot2.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot2.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot2.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot2.getColumnRenderingOrder());
      assertEquals(5.0, combinedDomainCategoryPlot2.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot2.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot2.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot2.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot2.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot2.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot2.getWeight());
      assertFalse(combinedDomainCategoryPlot2.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot2.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot2.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot2.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot2.getRowRenderingOrder());
      assertNotNull(combinedDomainCategoryPlot2);
      
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot2.getOrientation();
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot2.equals((Object)combinedDomainCategoryPlot0));
      assertFalse(combinedDomainCategoryPlot2.equals((Object)combinedDomainCategoryPlot1));
      assertNotSame(combinedDomainCategoryPlot2, combinedDomainCategoryPlot0);
      assertNotSame(combinedDomainCategoryPlot2, combinedDomainCategoryPlot1);
      assertFalse(combinedDomainCategoryPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot2.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot2.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot2.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot2.isNotify());
      assertTrue(combinedDomainCategoryPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot2.getRendererCount());
      assertNull(combinedDomainCategoryPlot2.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot2.isSubplot());
      assertFalse(combinedDomainCategoryPlot2.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot2.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot2.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot2.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot2.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot2.getColumnRenderingOrder());
      assertEquals(5.0, combinedDomainCategoryPlot2.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot2.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot2.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot2.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot2.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot2.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot2.getWeight());
      assertFalse(combinedDomainCategoryPlot2.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot2.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot2.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot2.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot2.getRowRenderingOrder());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertFalse(plotOrientation0.isHorizontal());
      assertTrue(plotOrientation0.isVertical());
      assertNotNull(plotOrientation0);
      
      combinedDomainCategoryPlot1.fillBackground(graphics2D0, (Rectangle2D) null, plotOrientation0);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot2));
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertFalse(combinedDomainCategoryPlot2.equals((Object)combinedDomainCategoryPlot0));
      assertFalse(combinedDomainCategoryPlot2.equals((Object)combinedDomainCategoryPlot1));
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot2);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertNotSame(combinedDomainCategoryPlot2, combinedDomainCategoryPlot0);
      assertNotSame(combinedDomainCategoryPlot2, combinedDomainCategoryPlot1);
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot2.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot2.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot2.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot2.isNotify());
      assertTrue(combinedDomainCategoryPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot2.getRendererCount());
      assertNull(combinedDomainCategoryPlot2.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot2.isSubplot());
      assertFalse(combinedDomainCategoryPlot2.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot2.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot2.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot2.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot2.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot2.getColumnRenderingOrder());
      assertEquals(5.0, combinedDomainCategoryPlot2.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot2.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot2.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot2.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot2.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot2.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot2.getWeight());
      assertFalse(combinedDomainCategoryPlot2.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot2.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot2.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot2.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot2.getRowRenderingOrder());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertFalse(plotOrientation0.isHorizontal());
      assertTrue(plotOrientation0.isVertical());
      
      combinedDomainCategoryPlot0.remove(combinedDomainCategoryPlot1);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot2));
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot2));
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot2);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot2);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      
      ShadowGenerator shadowGenerator0 = combinedDomainCategoryPlot1.getShadowGenerator();
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot2));
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot2);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertNull(shadowGenerator0);
      
      combinedDomainCategoryPlot0.setShadowGenerator((ShadowGenerator) null);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot2));
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot2);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(plotRenderingInfo0).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot2.zoomRangeAxes((-4083.2), plotRenderingInfo0, point2D0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertNotNull(combinedDomainCategoryPlot0);
      
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainCategoryPlot1);
      
      combinedDomainCategoryPlot0.remove(combinedDomainCategoryPlot1);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertNotNull(combinedDomainCategoryPlot0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot();
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertNotNull(combinedDomainCategoryPlot1);
      
      ShadowGenerator shadowGenerator0 = combinedDomainCategoryPlot1.getShadowGenerator();
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertNull(shadowGenerator0);
      
      combinedDomainCategoryPlot0.setShadowGenerator((ShadowGenerator) null);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainCategoryPlot0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.drawAnnotations(graphics2D0, rectangle2D0);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainCategoryPlot0.getDomainGridlineStroke();
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
      
      combinedDomainCategoryPlot0.setRangeCrosshairStroke(basicStroke0);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot1);
      
      combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot1);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertTrue(combinedDomainCategoryPlot1.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getWeight());
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      
      combinedDomainCategoryPlot0.remove(combinedDomainCategoryPlot1);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getWeight());
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(rectangle2D1).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getWidth();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getX();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      PlotState plotState0 = mock(PlotState.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(plotState0).getSharedAxisStates();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.draw(graphics2D1, rectangle2D1, point2D0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(plotRenderingInfo0).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.findSubplot(plotRenderingInfo0, point2D0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertNotNull(combinedDomainCategoryPlot0);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      CategoryCrosshairState categoryCrosshairState0 = mock(CategoryCrosshairState.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = combinedDomainCategoryPlot0.render((Graphics2D) null, rectangle2D0, 0, plotRenderingInfo0, categoryCrosshairState0);
      assertFalse(boolean0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      
      combinedDomainCategoryPlot0.setGap(0.0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoomRangeAxes(0.0, plotRenderingInfo1, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertNotNull(combinedDomainCategoryPlot0);
      
      CategoryAxis categoryAxis1 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot(categoryAxis1);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertNotNull(combinedDomainCategoryPlot1);
      
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot1, (-1656));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require weight >= 1.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertNotNull(combinedDomainCategoryPlot0);
      
      CategoryAnchor categoryAnchor0 = combinedDomainCategoryPlot0.getDomainGridlinePosition();
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals("CategoryAnchor.MIDDLE", categoryAnchor0.toString());
      assertNotNull(categoryAnchor0);
      
      combinedDomainCategoryPlot0.setDomainGridlinePosition(categoryAnchor0);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals("CategoryAnchor.MIDDLE", categoryAnchor0.toString());
      
      CategoryAxis categoryAxis1 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot(categoryAxis1);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertFalse(combinedDomainCategoryPlot1.isSubplot());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertNotNull(combinedDomainCategoryPlot1);
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation();
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot2 = new CombinedDomainCategoryPlot();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainCategoryPlot2.equals((Object)combinedDomainCategoryPlot1));
      assertFalse(combinedDomainCategoryPlot2.equals((Object)combinedDomainCategoryPlot0));
      assertTrue(combinedDomainCategoryPlot2.isNotify());
      assertTrue(combinedDomainCategoryPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot2.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot2.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot2.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot2.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot2.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot2.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot2.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot2.isRangeZeroBaselineVisible());
      assertNull(combinedDomainCategoryPlot2.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot2.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot2.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot2.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot2.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot2.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot2.getWeight());
      assertEquals(0, combinedDomainCategoryPlot2.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot2.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot2.getColumnRenderingOrder());
      assertEquals(1, combinedDomainCategoryPlot2.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot2.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot2.getRangeAxisCount());
      assertTrue(combinedDomainCategoryPlot2.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot2.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot2.getRendererCount());
      assertFalse(combinedDomainCategoryPlot2.isSubplot());
      assertNotNull(combinedDomainCategoryPlot2);
      
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot2.getOrientation();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainCategoryPlot2.equals((Object)combinedDomainCategoryPlot1));
      assertFalse(combinedDomainCategoryPlot2.equals((Object)combinedDomainCategoryPlot0));
      assertNotSame(combinedDomainCategoryPlot2, combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot2, combinedDomainCategoryPlot0);
      assertTrue(combinedDomainCategoryPlot2.isNotify());
      assertTrue(combinedDomainCategoryPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot2.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot2.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot2.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot2.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot2.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot2.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot2.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot2.isRangeZeroBaselineVisible());
      assertNull(combinedDomainCategoryPlot2.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot2.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot2.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot2.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot2.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot2.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot2.getWeight());
      assertEquals(0, combinedDomainCategoryPlot2.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot2.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot2.getColumnRenderingOrder());
      assertEquals(1, combinedDomainCategoryPlot2.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot2.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot2.getRangeAxisCount());
      assertTrue(combinedDomainCategoryPlot2.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot2.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot2.getRendererCount());
      assertFalse(combinedDomainCategoryPlot2.isSubplot());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertFalse(plotOrientation0.isHorizontal());
      assertTrue(plotOrientation0.isVertical());
      assertNotNull(plotOrientation0);
      
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot2));
      assertFalse(combinedDomainCategoryPlot2.equals((Object)combinedDomainCategoryPlot1));
      assertFalse(combinedDomainCategoryPlot2.equals((Object)combinedDomainCategoryPlot0));
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot2);
      assertNotSame(combinedDomainCategoryPlot2, combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot2, combinedDomainCategoryPlot0);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertTrue(combinedDomainCategoryPlot2.isNotify());
      assertTrue(combinedDomainCategoryPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot2.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot2.fetchElementHintingFlag());
      assertFalse(combinedDomainCategoryPlot2.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot2.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot2.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot2.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot2.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot2.isRangeZeroBaselineVisible());
      assertNull(combinedDomainCategoryPlot2.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot2.isRangeMinorGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot2.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot2.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot2.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot2.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot2.getWeight());
      assertEquals(0, combinedDomainCategoryPlot2.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot2.isRangePannable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot2.getColumnRenderingOrder());
      assertEquals(1, combinedDomainCategoryPlot2.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot2.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot2.getRangeAxisCount());
      assertTrue(combinedDomainCategoryPlot2.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot2.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot2.getRendererCount());
      assertFalse(combinedDomainCategoryPlot2.isSubplot());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertFalse(plotOrientation0.isHorizontal());
      assertTrue(plotOrientation0.isVertical());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      combinedDomainCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot1, 10);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot2));
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot2));
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot2);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot2);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot1.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot1.getRangeAxisCount());
      assertEquals(1, combinedDomainCategoryPlot1.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot1.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot1.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getRowRenderingOrder());
      assertFalse(combinedDomainCategoryPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot1.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot1.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot1.getRendererCount());
      assertTrue(combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot1.getColumnRenderingOrder());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot1.isRangePannable());
      assertFalse(combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot1.fetchElementHintingFlag());
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot1.isNotify());
      assertEquals(10, combinedDomainCategoryPlot1.getWeight());
      
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot1.add((CategoryPlot) combinedDomainCategoryPlot0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertNotNull(combinedDomainCategoryPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainCategoryPlot0.getRangeMinorGridlineStroke();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      combinedDomainCategoryPlot0.setRangeCrosshairStroke(basicStroke0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset(1814);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertNull(categoryDataset0);
      
      CategoryItemRenderer categoryItemRenderer0 = combinedDomainCategoryPlot0.getRendererForDataset((CategoryDataset) null);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertNull(categoryItemRenderer0);
      
      combinedDomainCategoryPlot0.setRenderer(1814, (CategoryItemRenderer) null);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      
      LegendItemCollection legendItemCollection0 = combinedDomainCategoryPlot0.getLegendItems();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
      
      double double0 = combinedDomainCategoryPlot0.getGap();
      assertEquals(5.0, double0, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      
      List list0 = combinedDomainCategoryPlot0.getSubplots();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      AxisSpace axisSpace0 = combinedDomainCategoryPlot0.calculateAxisSpace(graphics2D0, rectangle2D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(4.0, axisSpace0.getBottom(), 0.01);
      assertNotNull(axisSpace0);
      
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxis(0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertNull(valueAxis0);
      
      Range range0 = combinedDomainCategoryPlot0.getDataRange((ValueAxis) null);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertNull(range0);
      
      List list1 = combinedDomainCategoryPlot0.getCategories();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertEquals(2, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.fetchElementHintingFlag());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getColumnRenderingOrder());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(SortOrder.ASCENDING, combinedDomainCategoryPlot0.getRowRenderingOrder());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(plotRenderingInfo0).getSubplotIndex(any(java.awt.geom.Point2D.class));
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoomRangeAxes((double) 1814, plotRenderingInfo0, point2D0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(rectangle2D0).contains(anyDouble() , anyDouble());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(rectangle2D0).when(plotRenderingInfo0).getDataArea();
      combinedDomainCategoryPlot0.handleClick(5, 5, plotRenderingInfo0);
      CategoryAxis categoryAxis1 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      combinedDomainCategoryPlot0.getCategoriesForAxis(categoryAxis1);
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      combinedDomainCategoryPlot0.setOrientation(plotOrientation0);
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(plotRenderingInfo1).getDataArea();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.handleClick(1, 2883, plotRenderingInfo1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = combinedDomainCategoryPlot0.equals(combinedDomainCategoryPlot1);
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertTrue(boolean0);
  }
}
