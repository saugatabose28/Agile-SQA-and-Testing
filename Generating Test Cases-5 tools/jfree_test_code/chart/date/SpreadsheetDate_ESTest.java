/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:39:41 GMT 2023
 */

package org.jfree.chart.date;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.jfree.chart.date.MonthConstants;
import org.jfree.chart.date.SerialDate;
import org.jfree.chart.date.SpreadsheetDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SpreadsheetDate_ESTest extends SpreadsheetDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3200);
      SerialDate serialDate0 = SerialDate.getPreviousDayOfWeek(3, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 3);
      spreadsheetDate0.equals("DyR3c]yFRFpCl#");
      SerialDate serialDate1 = SerialDate.addDays((-1232), spreadsheetDate0);
      spreadsheetDate0.isInRange(serialDate1, serialDate1, 2);
      spreadsheetDate0.isOnOrAfter(serialDate0);
      spreadsheetDate0.isOnOrAfter(serialDate0);
      spreadsheetDate0.getDayOfMonth();
      System.setCurrentTimeMillis(0);
      serialDate0.isInRange(serialDate1, (SerialDate) spreadsheetDate0, 4825);
      serialDate0.toDate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3200);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(9999);
      spreadsheetDate0.isInRange((SerialDate) spreadsheetDate1, (SerialDate) spreadsheetDate1, 3);
      spreadsheetDate0.equals("DyR3c]yFRFpCl#");
      SerialDate serialDate0 = SerialDate.addDays((-1232), spreadsheetDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 2);
      spreadsheetDate0.isOnOrAfter(spreadsheetDate1);
      spreadsheetDate0.getDayOfMonth();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2958465);
      // Undeclared exception!
      try { 
        spreadsheetDate0.isAfter((SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(151);
      SerialDate serialDate0 = SerialDate.addYears(2, spreadsheetDate0);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.isInRange(serialDate0, serialDate0);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.toDate();
      spreadsheetDate0.getMonth();
      spreadsheetDate0.getDayOfMonth();
      spreadsheetDate0.getMonth();
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.isBefore(serialDate0);
      spreadsheetDate0.isAfter(serialDate0);
      SerialDate serialDate1 = spreadsheetDate0.getPreviousDayOfWeek(4);
      spreadsheetDate0.isBefore(serialDate1);
      serialDate1.isInRange(serialDate0, (SerialDate) spreadsheetDate0, 1);
      spreadsheetDate0.isBefore(serialDate1);
      spreadsheetDate0.compareTo(serialDate1);
      spreadsheetDate0.hashCode();
      spreadsheetDate0.getDayOfMonth();
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.getMonth();
      spreadsheetDate0.toSerial();
      spreadsheetDate0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(150);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(6);
      spreadsheetDate0.isBefore(spreadsheetDate1);
      Date date0 = spreadsheetDate0.toDate();
      SerialDate.createInstance(date0);
      SerialDate.isValidWeekInMonthCode(2);
      spreadsheetDate0.isInRange((SerialDate) spreadsheetDate1, (SerialDate) spreadsheetDate1, 2);
      spreadsheetDate1.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0, 1);
      spreadsheetDate0.getYYYY();
      spreadsheetDate1.getDayOfWeek();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(244);
      spreadsheetDate0.hashCode();
      SerialDate serialDate0 = spreadsheetDate0.getEndOfCurrentMonth(spreadsheetDate0);
      spreadsheetDate0.equals(serialDate0);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getDayOfWeek();
      // Undeclared exception!
      try { 
        serialDate0.isOnOrBefore((SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(151);
      SerialDate serialDate0 = SerialDate.addYears(2, spreadsheetDate0);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.isInRange(serialDate0, serialDate0);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.toDate();
      // Undeclared exception!
      try { 
        serialDate0.isBefore((SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(150);
      spreadsheetDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0, 2);
      spreadsheetDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0, 1);
      spreadsheetDate0.getYYYY();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3200);
      SerialDate serialDate0 = SerialDate.getPreviousDayOfWeek(3, (SerialDate) spreadsheetDate0);
      SerialDate.isLeapYear(2);
      spreadsheetDate0.equals("DyR3c]yFRFpCl#");
      SerialDate serialDate1 = SerialDate.addDays((-1232), spreadsheetDate0);
      spreadsheetDate0.isInRange(serialDate1, serialDate1, 2);
      spreadsheetDate0.isOnOrAfter(serialDate0);
      serialDate0.getDayOfMonth();
      serialDate0.isInRange(serialDate1, (SerialDate) spreadsheetDate0, 2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3200);
      SerialDate serialDate0 = SerialDate.getPreviousDayOfWeek(3, (SerialDate) spreadsheetDate0);
      SerialDate.isLeapYear(2);
      spreadsheetDate0.equals("DyR3c]yFRFpCl#");
      SerialDate serialDate1 = SerialDate.addDays((-1232), spreadsheetDate0);
      spreadsheetDate0.isInRange(serialDate1, serialDate1, 2);
      spreadsheetDate0.isOnOrAfter(serialDate0);
      serialDate0.isInRange(serialDate1, (SerialDate) spreadsheetDate0, 2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1827);
      SerialDate.addMonths(630, spreadsheetDate0);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(3);
      spreadsheetDate1.equals(spreadsheetDate0);
      spreadsheetDate1.isAfter(spreadsheetDate0);
      spreadsheetDate0.equals(spreadsheetDate1);
      spreadsheetDate0.toDate();
      SerialDate.monthCodeToQuarter(2);
      spreadsheetDate1.isOnOrAfter(spreadsheetDate0);
      SerialDate serialDate0 = null;
      SerialDate.monthCodeToString(4);
      // Undeclared exception!
      try { 
        spreadsheetDate1.isOnOrAfter((SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(2958492);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(150);
      SerialDate serialDate0 = SerialDate.addDays(4, spreadsheetDate0);
      spreadsheetDate0.isBefore(serialDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 2);
      serialDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0, 1);
      spreadsheetDate0.getYYYY();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(28);
      System.setCurrentTimeMillis((-1));
      SerialDate serialDate0 = SerialDate.getNearestDayOfWeek(1, (SerialDate) spreadsheetDate0);
      SerialDate serialDate1 = SerialDate.getFollowingDayOfWeek(3, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.equals(serialDate0);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.isInRange(serialDate0, serialDate1);
      spreadsheetDate0.getMonth();
      spreadsheetDate0.getDayOfMonth();
      SerialDate serialDate2 = SerialDate.addDays(0, spreadsheetDate0);
      spreadsheetDate0.compareTo(serialDate2);
      spreadsheetDate0.getDayOfMonth();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(9999);
      spreadsheetDate0.getDayOfMonth();
      Date date0 = spreadsheetDate0.toDate();
      SerialDate.createInstance(date0);
      spreadsheetDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0, 3);
      spreadsheetDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0, 1355);
      spreadsheetDate0.isOnOrBefore(spreadsheetDate0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2979);
      SerialDate serialDate0 = SerialDate.getNearestDayOfWeek(1, (SerialDate) spreadsheetDate0);
      SerialDate serialDate1 = SerialDate.getFollowingDayOfWeek(3, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.equals(serialDate0);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.isInRange(serialDate0, serialDate1);
      spreadsheetDate0.getMonth();
      spreadsheetDate0.getDayOfMonth();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3013);
      SerialDate.stringToMonthCode("Invalid 'day' argument.");
      SerialDate.addMonths(4, spreadsheetDate0);
      SerialDate serialDate0 = SerialDate.addMonths(2, spreadsheetDate0);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.getDayOfMonth();
      spreadsheetDate0.compareTo(serialDate0);
      String string0 = "";
      // Undeclared exception!
      try { 
        spreadsheetDate0.compareTo("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.chart.date.SerialDate
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      int int0 = 2958465;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2958465);
      int int1 = (-4157);
      int int2 = (-2081);
      int int3 = 1907;
      // Undeclared exception!
      try { 
        SerialDate.createInstance(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(91);
      Date date0 = spreadsheetDate0.toDate();
      SerialDate serialDate0 = SerialDate.createInstance(date0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      SerialDate serialDate1 = null;
      // Undeclared exception!
      try { 
        spreadsheetDate0.isInRange((SerialDate) null, (SerialDate) null, 2958465);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1415);
      SerialDate serialDate0 = SerialDate.getNearestDayOfWeek(4, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.compare(serialDate0);
      SpreadsheetDate spreadsheetDate1 = null;
      try {
        spreadsheetDate1 = new SpreadsheetDate(0, (-1656), (-743));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(182);
      SerialDate.monthCodeToString(4, true);
      spreadsheetDate0.isBefore(spreadsheetDate0);
      spreadsheetDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0, 2);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(2953);
      spreadsheetDate0.isBefore(spreadsheetDate1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      SerialDate serialDate0 = SerialDate.addMonths(1, spreadsheetDate0);
      SerialDate serialDate1 = spreadsheetDate0.getFollowingDayOfWeek(1);
      spreadsheetDate0.isBefore(serialDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 9999);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 0);
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.isInRange(serialDate1, serialDate0);
      // Undeclared exception!
      try { 
        SerialDate.addYears(9999, serialDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3200);
      SerialDate serialDate0 = SerialDate.getPreviousDayOfWeek(3, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 3);
      spreadsheetDate0.equals("DyR3c]yFRFpCl#");
      SerialDate serialDate1 = SerialDate.addDays((-1232), spreadsheetDate0);
      spreadsheetDate0.isInRange(serialDate1, serialDate1, 2);
      spreadsheetDate0.isOnOrAfter(serialDate0);
      spreadsheetDate0.getDayOfMonth();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1086);
      SpreadsheetDate spreadsheetDate1 = null;
      try {
        spreadsheetDate1 = new SpreadsheetDate(1, 2, 2958465);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(213);
      SerialDate serialDate0 = SerialDate.addYears(4, spreadsheetDate0);
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      spreadsheetDate0.isOnOrAfter(serialDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      // Undeclared exception!
      try { 
        SerialDate.getPreviousDayOfWeek((-1312), serialDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(1316, 7, 3308);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'day' argument.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(151);
      int int0 = (-114);
      int int1 = 0;
      SerialDate serialDate0 = null;
      // Undeclared exception!
      try { 
        spreadsheetDate0.compare((SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2697);
      SerialDate serialDate0 = SerialDate.addYears(0, spreadsheetDate0);
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 0);
      spreadsheetDate0.hashCode();
      SpreadsheetDate spreadsheetDate1 = null;
      try {
        spreadsheetDate1 = new SpreadsheetDate(0, (-2009), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1900);
      spreadsheetDate0.equals("Fourth");
      SerialDate serialDate0 = SerialDate.createInstance(2);
      SerialDate.monthCodeToString(2);
      spreadsheetDate0.isOn(serialDate0);
      spreadsheetDate0.hashCode();
      SerialDate serialDate1 = SerialDate.addMonths(0, spreadsheetDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0);
      spreadsheetDate0.isOnOrAfter(serialDate0);
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.isOnOrAfter(serialDate0);
      spreadsheetDate0.getDayOfMonth();
      spreadsheetDate0.isOn(serialDate0);
      spreadsheetDate0.isAfter(serialDate1);
      spreadsheetDate0.hashCode();
      spreadsheetDate0.hashCode();
      spreadsheetDate0.isOnOrBefore(serialDate1);
      spreadsheetDate0.isAfter(serialDate1);
      spreadsheetDate0.isAfter(serialDate1);
      spreadsheetDate0.getYYYY();
      // Undeclared exception!
      try { 
        spreadsheetDate0.compareTo("February");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.chart.date.SerialDate
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 957;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(957);
      SerialDate serialDate0 = SerialDate.createInstance(957);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.getDayOfMonth();
      spreadsheetDate0.getMonth();
      spreadsheetDate0.getDayOfMonth();
      spreadsheetDate0.isOnOrAfter(serialDate0);
      spreadsheetDate0.getMonth();
      SerialDate.addDays(4, spreadsheetDate0);
      spreadsheetDate0.getMonth();
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.compare(serialDate0);
      SerialDate serialDate1 = SerialDate.getPreviousDayOfWeek(3, serialDate0);
      spreadsheetDate0.isOn(serialDate1);
      // Undeclared exception!
      try { 
        spreadsheetDate0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(182);
      SerialDate serialDate0 = SerialDate.addDays(366, spreadsheetDate0);
      spreadsheetDate0.isBefore(serialDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2135);
      SerialDate.getNearestDayOfWeek(2, (SerialDate) spreadsheetDate0);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(2, 2, 1900);
      spreadsheetDate0.isOnOrAfter(spreadsheetDate1);
      SerialDate serialDate0 = SerialDate.getPreviousDayOfWeek(1, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.isOn(serialDate0);
      spreadsheetDate1.isOn(serialDate0);
      spreadsheetDate1.toDate();
      spreadsheetDate0.toDate();
      spreadsheetDate1.isOnOrBefore(serialDate0);
      spreadsheetDate1.getDayOfWeek();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(365);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(3);
      spreadsheetDate0.isOnOrAfter(spreadsheetDate1);
      // Undeclared exception!
      try { 
        SerialDate.getPreviousDayOfWeek((-329), (SerialDate) spreadsheetDate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate((-3935), (-3935), 4405);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      SerialDate serialDate0 = SerialDate.createInstance(7);
      spreadsheetDate0.isBefore(serialDate0);
      spreadsheetDate0.hashCode();
      spreadsheetDate0.isOn(serialDate0);
      spreadsheetDate0.equals(serialDate0);
      SerialDate serialDate1 = spreadsheetDate0.getNearestDayOfWeek(2);
      spreadsheetDate0.equals(serialDate1);
      spreadsheetDate0.getDayOfMonth();
      spreadsheetDate0.isOn(serialDate1);
      spreadsheetDate0.isInRange(serialDate1, serialDate0, 3);
      SpreadsheetDate spreadsheetDate1 = null;
      try {
        spreadsheetDate1 = new SpreadsheetDate(2, 1, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3106);
      spreadsheetDate0.toDate();
      // Undeclared exception!
      try { 
        SerialDate.createInstance(9999, 3, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(18);
      spreadsheetDate0.equals("");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(1432, 1432, 3555);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 1063;
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(1063, 1063, 1063);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-1952);
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate((-1952));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(667, 667, 667);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 2958466;
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(2958466, 2958466, 2958159);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(121);
      spreadsheetDate0.toDate();
      SerialDate serialDate0 = SerialDate.addDays(3, spreadsheetDate0);
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.toDate();
      SerialDate serialDate1 = SerialDate.addMonths(7, serialDate0);
      spreadsheetDate0.isOnOrAfter(serialDate1);
      // Undeclared exception!
      try { 
        SerialDate.createInstance((-4869), 2, 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(9999);
      spreadsheetDate0.getDayOfMonth();
      SerialDate serialDate0 = SerialDate.getPreviousDayOfWeek(2, (SerialDate) spreadsheetDate0);
      int int0 = 0;
      int int1 = 2958465;
      serialDate0.getPreviousDayOfWeek(6);
      SpreadsheetDate spreadsheetDate1 = null;
      try {
        spreadsheetDate1 = new SpreadsheetDate((-3626), 3, 1900);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'day' argument.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(150);
      SerialDate serialDate0 = SerialDate.addDays(4, spreadsheetDate0);
      spreadsheetDate0.isBefore(serialDate0);
      Date date0 = spreadsheetDate0.toDate();
      SerialDate.createInstance(date0);
      serialDate0.isAfter(spreadsheetDate0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 2);
      serialDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0, 1);
      spreadsheetDate0.getYYYY();
      serialDate0.getDayOfWeek();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      SerialDate serialDate0 = SerialDate.getFollowingDayOfWeek(4, (SerialDate) spreadsheetDate0);
      SerialDate serialDate1 = spreadsheetDate0.getEndOfCurrentMonth(serialDate0);
      SerialDate.monthCodeToQuarter(10);
      SerialDate.stringToWeekdayCode("AHmEHUXv");
      spreadsheetDate0.toDate();
      spreadsheetDate0.getYYYY();
      SerialDate serialDate2 = spreadsheetDate0.getFollowingDayOfWeek(3);
      spreadsheetDate0.isInRange(serialDate2, serialDate0, 273);
      spreadsheetDate0.isInRange(serialDate1, serialDate1, 6);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.toDate();
      System.setCurrentTimeMillis(1);
      spreadsheetDate0.isInRange(serialDate2, serialDate1, 152);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2958465);
      spreadsheetDate0.toDate();
      spreadsheetDate0.getDayOfMonth();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(151);
      SerialDate serialDate0 = SerialDate.addYears(2, spreadsheetDate0);
      spreadsheetDate0.compare(serialDate0);
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.isInRange(serialDate0, serialDate0);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.toDate();
      spreadsheetDate0.getMonth();
      spreadsheetDate0.getDayOfMonth();
      spreadsheetDate0.getMonth();
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.isAfter(serialDate0);
      spreadsheetDate0.isBefore(serialDate0);
      spreadsheetDate0.isAfter(serialDate0);
      SerialDate serialDate1 = spreadsheetDate0.getPreviousDayOfWeek(4);
      spreadsheetDate0.isBefore(serialDate1);
      spreadsheetDate0.isBefore(serialDate1);
      spreadsheetDate0.compareTo(serialDate1);
      spreadsheetDate0.hashCode();
      spreadsheetDate0.getDayOfMonth();
      spreadsheetDate0.getYYYY();
      spreadsheetDate0.getMonth();
      spreadsheetDate0.toSerial();
      spreadsheetDate0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(9999);
      spreadsheetDate0.getDayOfMonth();
      SerialDate serialDate0 = SerialDate.getPreviousDayOfWeek(6, (SerialDate) spreadsheetDate0);
      Date date0 = spreadsheetDate0.toDate();
      SerialDate.createInstance(date0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 1355);
      spreadsheetDate0.isOnOrBefore(serialDate0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3200);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(2);
      spreadsheetDate0.isInRange((SerialDate) spreadsheetDate1, (SerialDate) spreadsheetDate1, 3);
      spreadsheetDate0.isOnOrAfter(spreadsheetDate1);
      spreadsheetDate0.equals("DyR3c]yFRFpCl#");
      SerialDate serialDate0 = SerialDate.addDays((-1232), spreadsheetDate0);
      SpreadsheetDate spreadsheetDate2 = new SpreadsheetDate(3);
      serialDate0.isOn(spreadsheetDate2);
      SerialDate.stringToWeekdayCode("H7c");
      SerialDate serialDate1 = SerialDate.addYears(3, serialDate0);
      Date date0 = serialDate0.toDate();
      SerialDate.createInstance(date0);
      spreadsheetDate0.isInRange(serialDate0, serialDate0, 2);
      spreadsheetDate0.isOnOrAfter(spreadsheetDate1);
      int int0 = MonthConstants.SEPTEMBER;
      spreadsheetDate0.getYYYY();
      spreadsheetDate2.isInRange(serialDate1, serialDate0, 60);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(0, 0, 2031);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(9999);
      SerialDate serialDate0 = SerialDate.getNearestDayOfWeek(1, (SerialDate) spreadsheetDate0);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(4, 4, 1900);
      SerialDate serialDate1 = SerialDate.getFollowingDayOfWeek(3, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.getYYYY();
      serialDate0.setDescription("");
      spreadsheetDate0.equals(serialDate0);
      spreadsheetDate0.getDayOfWeek();
      spreadsheetDate0.isInRange(serialDate0, serialDate1);
      spreadsheetDate0.getMonth();
      spreadsheetDate0.getDayOfMonth();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(244);
      spreadsheetDate0.hashCode();
      spreadsheetDate0.isOnOrBefore(spreadsheetDate0);
      SerialDate serialDate0 = spreadsheetDate0.getEndOfCurrentMonth(spreadsheetDate0);
      spreadsheetDate0.equals(serialDate0);
      // Undeclared exception!
      try { 
        SerialDate.addDays((-1717), spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }
}
