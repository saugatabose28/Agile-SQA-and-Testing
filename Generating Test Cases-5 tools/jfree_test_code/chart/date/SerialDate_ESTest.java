/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:50:03 GMT 2023
 */

package org.jfree.chart.date;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.jfree.chart.date.MonthConstants;
import org.jfree.chart.date.SerialDate;
import org.jfree.chart.date.SpreadsheetDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SerialDate_ESTest extends SerialDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1074);
      SerialDate.addDays(1286, spreadsheetDate0);
      String string0 = "Thu";
      int int0 = 9;
      SerialDate.monthCodeToString(6);
      SerialDate.monthCodeToQuarter(9);
      // Undeclared exception!
      try { 
        spreadsheetDate0.compareTo("Thu");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.chart.date.SerialDate
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(122);
      spreadsheetDate0.getDayOfMonth();
      SerialDate serialDate0 = SerialDate.getFollowingDayOfWeek(1, (SerialDate) spreadsheetDate0);
      serialDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0);
      SerialDate serialDate1 = SerialDate.addDays(1900, spreadsheetDate0);
      spreadsheetDate0.compare(serialDate0);
      SerialDate serialDate2 = SerialDate.getNearestDayOfWeek(5, serialDate0);
      SerialDate serialDate3 = SerialDate.addMonths(2, serialDate0);
      serialDate3.compare(serialDate0);
      serialDate2.isInRange(serialDate3, (SerialDate) spreadsheetDate0, (-3328));
      serialDate2.getMonth();
      int int0 = 2730;
      serialDate0.isAfter(serialDate1);
      spreadsheetDate0.getPreviousDayOfWeek(1);
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToQuarter(9999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToQuarter: invalid month code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 122;
      // Undeclared exception!
      try { 
        SerialDate.stringToMonthCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(122);
      spreadsheetDate0.getDayOfMonth();
      SerialDate serialDate0 = SerialDate.getFollowingDayOfWeek(1, (SerialDate) spreadsheetDate0);
      serialDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.compare(serialDate0);
      SerialDate serialDate1 = SerialDate.getNearestDayOfWeek(5, serialDate0);
      SerialDate serialDate2 = SerialDate.addMonths(2, serialDate0);
      serialDate2.compare(serialDate0);
      SerialDate.isValidWeekdayCode(6);
      serialDate1.getMonth();
      int int0 = 2730;
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToQuarter(9999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToQuarter: invalid month code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(122);
      int int0 = MonthConstants.FEBRUARY;
      SerialDate serialDate0 = SerialDate.getFollowingDayOfWeek(1, (SerialDate) spreadsheetDate0);
      SerialDate.isValidWeekdayCode(2);
      spreadsheetDate0.compare(serialDate0);
      SerialDate serialDate1 = SerialDate.getNearestDayOfWeek(5, serialDate0);
      serialDate1.compare(serialDate0);
      serialDate1.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0, (-3328));
      serialDate1.getMonth();
      int int1 = SerialDate.INCLUDE_FIRST;
      // Undeclared exception!
      try { 
        SerialDate.getPreviousDayOfWeek(2730, serialDate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2958465);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(11);
      SerialDate serialDate1 = SerialDate.addYears(349, spreadsheetDate0);
      spreadsheetDate0.getFollowingDayOfWeek(1);
      spreadsheetDate0.isBefore(serialDate1);
      SerialDate serialDate2 = SerialDate.addMonths(1315, spreadsheetDate0);
      serialDate2.setDescription("]3Ot%)ju~(w^aoBx`T");
      SerialDate.getPreviousDayOfWeek(3, serialDate0);
      serialDate2.isBefore(serialDate0);
      serialDate2.isBefore(serialDate0);
      serialDate0.isOnOrAfter(serialDate2);
      SerialDate serialDate3 = SerialDate.createInstance(4);
      serialDate3.setDescription("");
      SerialDate.isValidMonthCode(3);
      serialDate3.getYYYY();
      serialDate2.isBefore(serialDate0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SerialDate.isValidWeekInMonthCode(3);
      int int0 = 855;
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString(855, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SerialDate.createInstance(2958465);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(11);
      SerialDate.addYears(349, spreadsheetDate0);
      spreadsheetDate0.getFollowingDayOfWeek(1);
      SerialDate.isValidWeekInMonthCode(3);
      SpreadsheetDate spreadsheetDate1 = null;
      try {
        spreadsheetDate1 = new SpreadsheetDate(2, 0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SerialDate.getMonths(false);
      SerialDate.lastDayOfMonth(0, 0);
      SerialDate.weekInMonthToString(3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SerialDate.getMonths(false);
      SerialDate.lastDayOfMonth(0, 0);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2958465);
      Date date0 = spreadsheetDate0.toDate();
      SerialDate serialDate0 = SerialDate.createInstance(date0);
      SerialDate serialDate1 = SerialDate.addDays(183, serialDate0);
      SerialDate serialDate2 = SerialDate.addYears((-1), serialDate0);
      serialDate1.isOnOrBefore(serialDate2);
      spreadsheetDate0.isBefore(serialDate2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SerialDate.isValidMonthCode((-4549));
      SerialDate.monthCodeToString(5, false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2958465);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(11);
      SerialDate serialDate1 = SerialDate.addYears(349, spreadsheetDate0);
      spreadsheetDate0.getFollowingDayOfWeek(1);
      serialDate1.setDescription("]3Ot%)ju~(w^aoBx`T");
      SerialDate.getPreviousDayOfWeek(3, serialDate0);
      serialDate0.isBefore(serialDate0);
      serialDate1.isBefore(serialDate0);
      serialDate0.isOnOrAfter(serialDate0);
      SerialDate.createInstance(4);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 3;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3);
      // Undeclared exception!
      try { 
        spreadsheetDate0.isOnOrBefore((SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SerialDate.stringToMonthCode("");
      SerialDate.isValidWeekdayCode(0);
      SerialDate.stringToWeekdayCode("");
      SerialDate.stringToWeekdayCode("");
      SerialDate.stringToWeekdayCode("");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(83);
      int int0 = 17;
      SerialDate.getNearestDayOfWeek(5, serialDate0);
      SerialDate.isValidMonthCode(4);
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString(4153);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialDate.stringToWeekdayCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SerialDate.isValidMonthCode(8);
      SerialDate.weekInMonthToString(8);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1808);
      Date date0 = spreadsheetDate0.toDate();
      SerialDate serialDate0 = SerialDate.createInstance(date0);
      // Undeclared exception!
      try { 
        SerialDate.getNearestDayOfWeek(4207, serialDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(122);
      spreadsheetDate0.getDayOfMonth();
      SerialDate serialDate0 = SerialDate.getFollowingDayOfWeek(1, (SerialDate) spreadsheetDate0);
      serialDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.compare(serialDate0);
      SerialDate serialDate1 = SerialDate.getNearestDayOfWeek(5, serialDate0);
      SerialDate serialDate2 = SerialDate.addMonths(2, serialDate0);
      serialDate2.compare(serialDate0);
      SerialDate.isValidWeekInMonthCode(4);
      serialDate1.getMonth();
      int int0 = 2730;
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToQuarter(9999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToQuarter: invalid month code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2958465);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(11);
      SerialDate serialDate1 = SerialDate.addYears(349, spreadsheetDate0);
      spreadsheetDate0.getFollowingDayOfWeek(1);
      spreadsheetDate0.isBefore(serialDate1);
      SerialDate serialDate2 = SerialDate.addMonths(1315, spreadsheetDate0);
      SerialDate.monthCodeToQuarter(1);
      serialDate2.setDescription("]3Ot%)ju~(w^aoBx`T");
      SerialDate.getPreviousDayOfWeek(3, serialDate0);
      serialDate2.isBefore(serialDate0);
      serialDate2.isBefore(serialDate0);
      serialDate0.isOnOrAfter(serialDate2);
      SerialDate serialDate3 = SerialDate.createInstance(4);
      serialDate3.setDescription("");
      serialDate3.isAfter(serialDate0);
      SerialDate.isValidWeekInMonthCode(1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2958465);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(11);
      spreadsheetDate0.getFollowingDayOfWeek(1);
      spreadsheetDate0.isBefore(serialDate0);
      SerialDate serialDate1 = SerialDate.addMonths(5, spreadsheetDate0);
      SerialDate.monthCodeToQuarter(1);
      serialDate1.setDescription("]3Ot%)ju~(w^aoBx`T");
      SerialDate.getPreviousDayOfWeek(3, serialDate0);
      serialDate1.isBefore(serialDate0);
      serialDate1.isBefore(serialDate0);
      serialDate0.isOnOrAfter(serialDate1);
      SerialDate serialDate2 = SerialDate.createInstance(4);
      serialDate2.setDescription("");
      serialDate2.isAfter(serialDate0);
      SerialDate.isValidWeekInMonthCode(1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SerialDate.getMonths();
      SerialDate.monthCodeToQuarter(3);
      SerialDate serialDate0 = SerialDate.createInstance(1634);
      SerialDate serialDate1 = SerialDate.getPreviousDayOfWeek(5, serialDate0);
      serialDate0.isOn(serialDate1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(83);
      int int0 = 0;
      SerialDate.getNearestDayOfWeek(5, serialDate0);
      SerialDate.isValidMonthCode(6);
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString(4153);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SerialDate.getMonths();
      SerialDate.monthCodeToQuarter(3);
      SerialDate serialDate0 = SerialDate.createInstance(1634);
      SerialDate serialDate1 = SerialDate.getPreviousDayOfWeek(5, serialDate0);
      serialDate1.toString();
      serialDate0.isOn(serialDate1);
      serialDate0.toDate();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SerialDate.relativeToString(1317);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(7);
      spreadsheetDate0.getYYYY();
      SerialDate serialDate0 = SerialDate.addYears(3, spreadsheetDate0);
      spreadsheetDate0.isOnOrBefore(serialDate0);
      SpreadsheetDate spreadsheetDate1 = null;
      try {
        spreadsheetDate1 = new SpreadsheetDate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SerialDate.stringToWeekdayCode("December");
      SerialDate serialDate0 = SerialDate.createInstance(7);
      Date date0 = serialDate0.toDate();
      SerialDate serialDate1 = SerialDate.createInstance(date0);
      SerialDate serialDate2 = serialDate0.getEndOfCurrentMonth(serialDate1);
      serialDate1.getMonth();
      serialDate2.isAfter(serialDate0);
      // Undeclared exception!
      try { 
        serialDate1.getPreviousDayOfWeek((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SerialDate.lastDayOfMonth(3, 3);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2958439);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(11);
      SerialDate serialDate1 = SerialDate.addYears(349, spreadsheetDate0);
      spreadsheetDate0.getFollowingDayOfWeek(1);
      spreadsheetDate0.isBefore(serialDate1);
      SerialDate serialDate2 = SerialDate.addMonths(1315, spreadsheetDate0);
      serialDate2.setDescription("]3Ot%)ju~(w^aoBx`T");
      SerialDate.getPreviousDayOfWeek(3, serialDate0);
      serialDate2.isBefore(serialDate0);
      serialDate2.isBefore(serialDate0);
      serialDate0.isOnOrAfter(serialDate2);
      SerialDate serialDate3 = SerialDate.createInstance(4);
      serialDate3.setDescription("");
      serialDate3.isAfter(serialDate0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2958465);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(11);
      SerialDate.addYears(349, spreadsheetDate0);
      spreadsheetDate0.getFollowingDayOfWeek(1);
      SerialDate.isValidMonthCode(2);
      SerialDate serialDate1 = SerialDate.addMonths(1315, spreadsheetDate0);
      serialDate1.setDescription("]3Ot%)ju~(w^aoBx`T");
      SerialDate.getPreviousDayOfWeek(3, serialDate0);
      serialDate1.isBefore(serialDate0);
      serialDate1.isBefore(serialDate0);
      serialDate0.isOnOrAfter(serialDate1);
      SerialDate serialDate2 = SerialDate.createInstance(4);
      serialDate2.setDescription("");
      serialDate2.isAfter(serialDate0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(83);
      int int0 = 817;
      SerialDate.getNearestDayOfWeek(5, serialDate0);
      SerialDate.isValidWeekInMonthCode(2);
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString(4153);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(1900);
      spreadsheetDate1.isAfter(spreadsheetDate0);
      SerialDate.isValidWeekInMonthCode(2);
      SerialDate serialDate0 = SerialDate.getNearestDayOfWeek(3, (SerialDate) spreadsheetDate1);
      serialDate0.toString();
      spreadsheetDate0.isOnOrAfter(serialDate0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SerialDate.isLeapYear((-4552));
      int int0 = 0;
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString(0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 846;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(846);
      // Undeclared exception!
      try { 
        spreadsheetDate0.getPreviousDayOfWeek(846);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(9999);
      Date date0 = spreadsheetDate0.toDate();
      SerialDate serialDate0 = SerialDate.createInstance(date0);
      serialDate0.getEndOfCurrentMonth(spreadsheetDate0);
      spreadsheetDate0.toDate();
      SerialDate serialDate1 = SerialDate.addYears(1520, spreadsheetDate0);
      serialDate1.getPreviousDayOfWeek(4);
      SerialDate.createInstance(5);
      SerialDate.addYears(4, serialDate0);
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString((-1842688678));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2958465);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(11);
      SerialDate serialDate1 = SerialDate.addYears(349, spreadsheetDate0);
      spreadsheetDate0.getFollowingDayOfWeek(1);
      spreadsheetDate0.isBefore(serialDate1);
      SerialDate serialDate2 = SerialDate.addMonths(1315, spreadsheetDate0);
      serialDate2.setDescription("]3Ot%)ju~(w^aoBx`T");
      SerialDate.getPreviousDayOfWeek(3, serialDate0);
      serialDate2.isBefore(serialDate0);
      serialDate2.isBefore(serialDate0);
      serialDate0.isOnOrAfter(serialDate2);
      SerialDate serialDate3 = SerialDate.createInstance(4);
      serialDate3.setDescription("");
      serialDate3.isAfter(serialDate0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerialDate.isLeapYear((-2500));
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate((-2500));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(8);
      serialDate0.isInRange(serialDate0, serialDate0);
      serialDate0.getYYYY();
      // Undeclared exception!
      try { 
        SerialDate.getPreviousDayOfWeek(0, serialDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SerialDate.leapYearCount(4202);
      // Undeclared exception!
      try { 
        SerialDate.createInstance(4202, 558, 2322);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(24);
      Date date0 = spreadsheetDate0.toDate();
      SerialDate serialDate0 = SerialDate.createInstance(date0);
      SerialDate serialDate1 = SerialDate.addDays(24, serialDate0);
      SerialDate serialDate2 = serialDate1.getFollowingDayOfWeek(1);
      SerialDate.addDays(24, serialDate1);
      serialDate1.getYYYY();
      SerialDate.weekdayCodeToString(3);
      serialDate1.getDayOfWeek();
      spreadsheetDate0.isAfter(serialDate2);
      // Undeclared exception!
      try { 
        SerialDate.getNearestDayOfWeek(9999, serialDate2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 6;
      SerialDate.monthCodeToQuarter(6);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      spreadsheetDate0.toDate();
      // Undeclared exception!
      try { 
        SerialDate.getFollowingDayOfWeek(3814, (SerialDate) spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SerialDate.weekInMonthToString(0);
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2958465);
      // Undeclared exception!
      try { 
        SerialDate.addYears(2958465, spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(366);
      serialDate0.toString();
      SerialDate.monthCodeToString(3);
      int int0 = 2958465;
      serialDate0.toSerial();
      serialDate0.setDescription("m)`L4qHY?R.)");
      // Undeclared exception!
      try { 
        SerialDate.getPreviousDayOfWeek(1700, serialDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(8);
      SerialDate serialDate1 = SerialDate.addDays(7, serialDate0);
      serialDate0.isInRange(serialDate1, serialDate1);
      serialDate0.getYYYY();
      // Undeclared exception!
      try { 
        SerialDate.getPreviousDayOfWeek(0, serialDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SerialDate.isValidMonthCode(1);
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(1, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 2405;
      // Undeclared exception!
      try { 
        SerialDate.lastDayOfMonth(2405, 1808);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2405
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(1900);
      // Undeclared exception!
      try { 
        serialDate0.isOnOrAfter((SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(10);
      int int0 = 8;
      int int1 = 365;
      // Undeclared exception!
      try { 
        spreadsheetDate0.getFollowingDayOfWeek(309);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      SerialDate.isLeapYear(0);
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToQuarter(2299);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToQuarter: invalid month code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SerialDate.isValidWeekdayCode(450);
      SerialDate.weekdayCodeToString(0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(83);
      int int0 = 0;
      SerialDate serialDate1 = SerialDate.getNearestDayOfWeek(5, serialDate0);
      serialDate1.isInRange(serialDate0, serialDate0, 0);
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString(4153);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SerialDate.isValidMonthCode((-1));
      // Undeclared exception!
      try { 
        SerialDate.createInstance((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SerialDate.isValidWeekInMonthCode(0);
      // Undeclared exception!
      try { 
        SerialDate.createInstance(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SerialDate.monthCodeToString(8, false);
      int int0 = (-2991);
      // Undeclared exception!
      try { 
        SerialDate.createInstance(244, (-2991), (-70));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SerialDate.getMonths();
      SerialDate.getMonths(false);
      SerialDate.monthCodeToString(7);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(11);
      SerialDate.monthCodeToQuarter(11);
      int int0 = 0;
      // Undeclared exception!
      try { 
        spreadsheetDate0.getNearestDayOfWeek(1753);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 2144;
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString(2144);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(6);
      SerialDate serialDate1 = SerialDate.getFollowingDayOfWeek(6, serialDate0);
      SerialDate.monthCodeToString(3);
      serialDate1.compare(serialDate0);
      // Undeclared exception!
      try { 
        SerialDate.getPreviousDayOfWeek(6, serialDate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(760);
      spreadsheetDate0.equals("");
      // Undeclared exception!
      try { 
        SerialDate.addDays((-3457), spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1183);
      SerialDate serialDate0 = SerialDate.getPreviousDayOfWeek(2, (SerialDate) spreadsheetDate0);
      Date date0 = spreadsheetDate0.toDate();
      SerialDate.createInstance(date0);
      spreadsheetDate0.isOn(serialDate0);
      serialDate0.getEndOfCurrentMonth(spreadsheetDate0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialDate.weekdayCodeToString(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(389);
      SerialDate serialDate0 = SerialDate.addDays(548, spreadsheetDate0);
      spreadsheetDate0.isBefore(serialDate0);
      // Undeclared exception!
      try { 
        SerialDate.createInstance(9999, 389, 1900);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SerialDate serialDate0 = null;
      // Undeclared exception!
      try { 
        SerialDate.addYears(2167, (SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 2958465;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2958465);
      // Undeclared exception!
      try { 
        SerialDate.addMonths(2958465, spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialDate.getNearestDayOfWeek(1, (SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2958465);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(11);
      SerialDate serialDate1 = SerialDate.addYears(349, spreadsheetDate0);
      spreadsheetDate0.getFollowingDayOfWeek(1);
      spreadsheetDate0.isBefore(serialDate1);
      SerialDate serialDate2 = SerialDate.addMonths(1315, spreadsheetDate0);
      serialDate2.setDescription("]3Ot%)ju~(w^aoBx`T");
      // Undeclared exception!
      try { 
        SerialDate.getPreviousDayOfWeek(12, serialDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 100;
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString(100, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(1582);
      serialDate0.getDescription();
      serialDate0.getDayOfWeek();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      SerialDate serialDate0 = null;
      // Undeclared exception!
      try { 
        SerialDate.addMonths(0, (SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3);
      SerialDate serialDate0 = spreadsheetDate0.getFollowingDayOfWeek(3);
      int int0 = 1967;
      int int1 = 1806;
      // Undeclared exception!
      try { 
        SerialDate.getFollowingDayOfWeek(9999, serialDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 121;
      int int1 = (-1955);
      int int2 = 0;
      // Undeclared exception!
      try { 
        SerialDate.addDays((-1955), (SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 3380;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3380);
      // Undeclared exception!
      try { 
        SerialDate.getNearestDayOfWeek(9999, (SerialDate) spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2398);
      SerialDate.isValidWeekInMonthCode((-846));
      SerialDate.monthCodeToString(8);
      // Undeclared exception!
      try { 
        SerialDate.getPreviousDayOfWeek(1900, (SerialDate) spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialDate.getPreviousDayOfWeek((-2158), (SerialDate) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3);
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(1900);
      spreadsheetDate1.isAfter(spreadsheetDate0);
      spreadsheetDate0.isOnOrBefore(spreadsheetDate1);
      SerialDate serialDate0 = SerialDate.getNearestDayOfWeek(3, (SerialDate) spreadsheetDate1);
      serialDate0.toString();
      spreadsheetDate0.isOnOrAfter(serialDate0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 1016;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1016);
      Date date0 = spreadsheetDate0.toDate();
      SerialDate.createInstance(date0);
      // Undeclared exception!
      try { 
        spreadsheetDate0.getNearestDayOfWeek(212);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        SerialDate.createInstance(0, 0, (-705));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(832);
      SerialDate.monthCodeToQuarter(4);
      SerialDate serialDate0 = SerialDate.getPreviousDayOfWeek(5, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.isBefore(serialDate0);
      spreadsheetDate0.compareTo(serialDate0);
      spreadsheetDate0.compare(serialDate0);
      serialDate0.isBefore(spreadsheetDate0);
      serialDate0.getNearestDayOfWeek(1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SerialDate.leapYearCount(0);
      int int0 = 273;
      // Undeclared exception!
      try { 
        SerialDate.createInstance((-646), (-460), 273);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(625);
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToQuarter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToQuarter: invalid month code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SerialDate.isLeapYear((-2487));
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate((-2686));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SerialDate.getMonths(true);
      int int0 = 0;
      int int1 = (-1877);
      // Undeclared exception!
      try { 
        SerialDate.createInstance(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SerialDate.getMonths(true);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1900);
      SerialDate serialDate0 = SerialDate.createInstance(1900);
      Date date0 = serialDate0.toDate();
      SerialDate serialDate1 = SerialDate.createInstance(date0);
      spreadsheetDate0.isInRange(serialDate0, serialDate1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SerialDate.stringToWeekdayCode("VWI8}<xLzi");
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(7);
      spreadsheetDate0.equals("VWI8}<xLzi");
      spreadsheetDate0.getDayOfMonth();
      // Undeclared exception!
      try { 
        SerialDate.getFollowingDayOfWeek(2601, (SerialDate) spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SerialDate.stringToMonthCode("_wY6L&dV~5;Ba$K");
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialDate.getFollowingDayOfWeek(0, (SerialDate) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerialDate.relativeToString(0);
      SerialDate.stringToWeekdayCode("-");
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SerialDate.stringToWeekdayCode("");
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2958465);
      // Undeclared exception!
      try { 
        SerialDate.getNearestDayOfWeek(2958465, serialDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SerialDate.isValidWeekInMonthCode(610);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(610);
      spreadsheetDate0.toSerial();
      spreadsheetDate0.toSerial();
      SerialDate.isValidMonthCode(0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SerialDate.isValidMonthCode((-4549));
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString(0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SerialDate.isValidMonthCode(8);
      SerialDate.weekInMonthToString(8);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1808);
      Date date0 = spreadsheetDate0.toDate();
      SerialDate serialDate0 = SerialDate.createInstance(date0);
      // Undeclared exception!
      try { 
        SerialDate.getNearestDayOfWeek(8, serialDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SerialDate.getMonths();
      SerialDate.monthCodeToQuarter(3);
      SerialDate serialDate0 = SerialDate.createInstance(1634);
      SerialDate.getFollowingDayOfWeek(3, serialDate0);
      SerialDate serialDate1 = SerialDate.getPreviousDayOfWeek(5, serialDate0);
      serialDate0.isOn(serialDate1);
      SerialDate.addYears(746, serialDate0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(122);
      spreadsheetDate0.getDayOfMonth();
      SerialDate serialDate0 = SerialDate.getFollowingDayOfWeek(1, (SerialDate) spreadsheetDate0);
      serialDate0.isInRange((SerialDate) spreadsheetDate0, (SerialDate) spreadsheetDate0);
      spreadsheetDate0.compare(serialDate0);
      SerialDate serialDate1 = SerialDate.getNearestDayOfWeek(5, serialDate0);
      SerialDate serialDate2 = SerialDate.addMonths(2, serialDate0);
      serialDate2.compare(serialDate0);
      serialDate1.isInRange(serialDate2, (SerialDate) spreadsheetDate0, (-3328));
      serialDate1.getMonth();
      int int0 = 2730;
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToQuarter(9999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToQuarter: invalid month code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SerialDate.isValidWeekInMonthCode(1939);
      int int0 = 855;
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString(855, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SerialDate.isValidWeekInMonthCode(1939);
      int int0 = 855;
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString(855, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SerialDate.stringToMonthCode("#");
      SerialDate.isValidWeekdayCode((-26));
      SerialDate.stringToWeekdayCode("#");
      int int0 = 2968;
      // Undeclared exception!
      try { 
        SerialDate.createInstance(2968, (-26), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SerialDate.relativeToString(1317);
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(7, 14, 1317);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(83);
      int int0 = 0;
      SerialDate serialDate1 = SerialDate.getNearestDayOfWeek(5, serialDate0);
      serialDate1.isInRange(serialDate0, serialDate0, 0);
      // Undeclared exception!
      try { 
        SerialDate.monthCodeToString(4153);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SerialDate.monthCodeToString: month outside valid range.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SerialDate.lastDayOfMonth(0, 0);
      SerialDate.relativeToString(149);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2958465);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(11);
      SerialDate serialDate1 = SerialDate.addYears(349, spreadsheetDate0);
      assertEquals(127481, serialDate1.toSerial());
      
      SerialDate serialDate2 = spreadsheetDate0.getFollowingDayOfWeek(1);
      assertEquals(14, serialDate2.getDayOfMonth());
      
      SerialDate.isValidMonthCode(2);
      SerialDate serialDate3 = SerialDate.addMonths(1315, spreadsheetDate0);
      serialDate3.setDescription("]3Ot%)ju~(w^aoBx`T");
      String string0 = SerialDate.monthCodeToString(4);
      assertEquals("April", string0);
      
      SerialDate serialDate4 = SerialDate.getPreviousDayOfWeek(3, serialDate0);
      assertEquals(2958462, serialDate4.toSerial());
      
      serialDate3.isBefore(serialDate0);
      serialDate3.isBefore(serialDate0);
      serialDate0.isOnOrAfter(serialDate3);
      assertEquals(2, serialDate3.getDayOfWeek());
      
      SerialDate serialDate5 = SerialDate.createInstance(4);
      serialDate5.setDescription("");
      serialDate5.isAfter(serialDate0);
      assertEquals(31, serialDate0.getDayOfMonth());
      assertEquals(9999, serialDate0.getYYYY());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerialDate.weekdayCodeToString((-4562));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4562
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SerialDate.getMonths();
      SerialDate.weekInMonthToString((-1045));
      // Undeclared exception!
      try { 
        SerialDate.createInstance((-1045), (-1045), (-1045));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }
}
