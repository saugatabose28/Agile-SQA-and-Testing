/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:34:16 GMT 2023
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.ChartChangeEvent;
import org.jfree.chart.event.ChartChangeListener;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.ChartProgressListener;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JFreeChart_ESTest extends JFreeChart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("{t>vwEB$b5M53", font0, plot0, true);
      jFreeChart0.setBorderVisible(true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart(plot0);
      assertNotNull(jFreeChart0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartChangeListener chartChangeListener0 = mock(ChartChangeListener.class, new ViolatedAssumptionAnswer());
      jFreeChart0.removeChangeListener(chartChangeListener0);
      jFreeChart0.getTitle();
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "TDW=PMoHRwza\"R*@8W";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("", plot0);
      jFreeChart0.setPadding(plot0.DEFAULT_INSETS);
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("{t>vwEB$b5M53", font0, plot0, true);
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      jFreeChart0.setRenderingHints(renderingHints0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      ChartChangeListener chartChangeListener0 = mock(ChartChangeListener.class, new ViolatedAssumptionAnswer());
      PlotChangeEvent plotChangeEvent0 = mock(PlotChangeEvent.class, new ViolatedAssumptionAnswer());
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("", font0, plot0, false);
      jFreeChart0.removeSubtitle((Title) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "{t>vwEB$b5M53";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("{t>vwEB$b5M53", font0, plot0, true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jFreeChart0.drawTitle((Title) null, graphics2D1, rectangle2D1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 't' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      ChartProgressListener chartProgressListener0 = mock(ChartProgressListener.class, new ViolatedAssumptionAnswer());
      ChartChangeEvent chartChangeEvent0 = mock(ChartChangeEvent.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("", font0, plot0, false);
      ChartProgressEvent chartProgressEvent0 = mock(ChartProgressEvent.class, new ViolatedAssumptionAnswer());
      jFreeChart0.notifyListeners(chartProgressEvent0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("{t>vwEB$b5M53", font0, plot0, true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ChartChangeListener chartChangeListener0 = mock(ChartChangeListener.class, new ViolatedAssumptionAnswer());
      jFreeChart0.removeChangeListener(chartChangeListener0);
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      jFreeChart0.setBackgroundImageAlignment(192);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo1 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      ChartChangeListener chartChangeListener0 = mock(ChartChangeListener.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("L^qgQfvvZ|r,Fs", font0, plot0, false);
      jFreeChart0.setBackgroundImageAlignment(10);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "d|me5L-";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart(" nohref=\"nohref\"", plot0);
      TextTitle textTitle0 = jFreeChart0.getTitle();
      jFreeChart0.setTitle(textTitle0);
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "R\\Y&:t";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("RakB%F^&,k\"^", plot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      jFreeChart0.addLegend(legendTitle0);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "2;}p>RS";
      Font font0 = null;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.JFreeChart", plot0);
      jFreeChart0.setTextAntiAlias(false);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = null;
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("&w3vM5", font0, plot0, false);
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10, 575, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 575
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "base";
      Font font0 = null;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("", plot0);
      PlotChangeEvent plotChangeEvent0 = mock(PlotChangeEvent.class, new ViolatedAssumptionAnswer());
      jFreeChart0.plotChanged(plotChangeEvent0);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("", font0, plot0, true);
      jFreeChart0.setNotify(false);
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "1\\\"j]aP#/ foW";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("1\"j]aP#/ foW", plot0);
      jFreeChart0.setNotify(true);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "%4yP#vp_0 U@";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("%4yP#vp_0 U@", plot0);
      ChartProgressListener chartProgressListener0 = mock(ChartProgressListener.class, new ViolatedAssumptionAnswer());
      jFreeChart0.removeProgressListener(chartProgressListener0);
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = null;
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, plot0, true);
      jFreeChart0.setElementHinting(true);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = null;
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, plot0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = ">0,Cdn\\)jzuo!";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart(">0,Cdn)jzuo!", plot0);
      Stroke stroke0 = jFreeChart0.getBorderStroke();
      jFreeChart0.setBorderStroke(stroke0);
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "horizontalAlignment";
      Font font0 = null;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("horizontalAlignment", plot0);
      jFreeChart0.getLegend(10);
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      assertNotNull(font0);
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(18, font0.getSize());
      assertTrue(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      
      String string1 = "subtitle";
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("subtitle", plot0);
      assertNotNull(jFreeChart0);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartChangeListener chartChangeListener0 = mock(ChartChangeListener.class, new ViolatedAssumptionAnswer());
      jFreeChart0.removeChangeListener(chartChangeListener0);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "oO,AnJxnG}pUL).x7>";
      Font font0 = null;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart(".,uv_m", plot0);
      assertNotNull(jFreeChart0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      TitleChangeEvent titleChangeEvent0 = mock(TitleChangeEvent.class, new ViolatedAssumptionAnswer());
      jFreeChart0.titleChanged(titleChangeEvent0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Plot plot0 = null;
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("ZN=KuZ@efq", (Plot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "JFREECHART_TOP_LEVEL";
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("JFREECHART_TOP_LEVEL", (Font) null, plot0, true);
      assertNotNull(jFreeChart0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "6.5I4{";
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("", (Font) null, plot0, true);
      assertNotNull(jFreeChart0);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      assertNotNull(font0);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertEquals(18, font0.getSize());
      assertTrue(font0.isBold());
      
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("", font0, plot0, false);
      assertNotNull(jFreeChart0);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertEquals(18, font0.getSize());
      assertTrue(font0.isBold());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      assertNotNull(font0);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertEquals(18, font0.getSize());
      assertTrue(font0.isBold());
      
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("id", font0, (Plot) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "Panel.background";
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      assertNotNull(font0);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(18, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(plot0).clone();
      JFreeChart jFreeChart0 = new JFreeChart("", plot0);
      assertNotNull(jFreeChart0);
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      int int0 = 238;
      // Undeclared exception!
      try { 
        jFreeChart0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "\n";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      assertNotNull(font0);
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals(18, font0.getSize());
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("Title", font0, plot0, false);
      assertNotNull(jFreeChart0);
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals(18, font0.getSize());
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      assertFalse(jFreeChart0.getElementHinting());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "\"}; nm<0h?,PF";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      assertNotNull(font0);
      assertFalse(font0.isItalic());
      assertTrue(font0.isBold());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(1, font0.getStyle());
      assertEquals(18, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart(plot0);
      assertNotNull(jFreeChart0);
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "{t>vwEB$b5M53";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      assertNotNull(font0);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(18, font0.getSize());
      assertFalse(font0.isPlain());
      assertTrue(font0.isBold());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("{t>vwEB$b5M53", font0, plot0, true);
      assertNotNull(jFreeChart0);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(18, font0.getSize());
      assertFalse(font0.isPlain());
      assertTrue(font0.isBold());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D0).getClip();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      doReturn((PlotRenderingInfo) null).when(chartRenderingInfo0).getPlotInfo();
      jFreeChart0.draw(graphics2D0, rectangle2D0, point2D0, chartRenderingInfo0);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(18, font0.getSize());
      assertFalse(font0.isPlain());
      assertTrue(font0.isBold());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "TitleEntity: ";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      assertNotNull(font0);
      assertEquals(18, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isPlain());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("TitleEntity: ", font0, plot0, true);
      assertNotNull(jFreeChart0);
      assertEquals(18, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isPlain());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      jFreeChart0.removeLegend();
      assertEquals(18, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isPlain());
      assertEquals(18.0F, font0.getSize2D(), 0.01F);
      assertTrue(font0.isBold());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertFalse(jFreeChart0.getElementHinting());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertNull(jFreeChart0.getID());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "2wo8>Ke@BO*^aW=1";
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("2wo8>Ke@BO*^aW=1", plot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$988594710 cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }
}
