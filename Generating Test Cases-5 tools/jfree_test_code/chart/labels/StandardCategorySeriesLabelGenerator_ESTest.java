/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:44:44 GMT 2023
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.data.category.CategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardCategorySeriesLabelGenerator_ESTest extends StandardCategorySeriesLabelGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator1 = new StandardCategorySeriesLabelGenerator("");
      boolean boolean0 = standardCategorySeriesLabelGenerator0.equals(standardCategorySeriesLabelGenerator1);
      assertFalse(boolean0);
      assertFalse(standardCategorySeriesLabelGenerator1.equals((Object)standardCategorySeriesLabelGenerator0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("");
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn("").when(categoryDataset0).getRowKey(anyInt());
      String string0 = standardCategorySeriesLabelGenerator0.generateLabel(categoryDataset0, (-891));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("^,M5");
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{0}").when(categoryDataset0).getRowKey(anyInt());
      Object[] objectArray0 = standardCategorySeriesLabelGenerator0.createItemArray(categoryDataset0, 2168);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("");
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      // Undeclared exception!
      try { 
        standardCategorySeriesLabelGenerator0.generateLabel(categoryDataset0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      // Undeclared exception!
      try { 
        standardCategorySeriesLabelGenerator0.generateLabel((CategoryDataset) null, (-1696));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("aD\t>OU,t/pBOuS*48");
      // Undeclared exception!
      try { 
        standardCategorySeriesLabelGenerator0.createItemArray((CategoryDataset) null, (-788));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = null;
      try {
        standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'format' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      Object object0 = standardCategorySeriesLabelGenerator0.clone();
      boolean boolean0 = standardCategorySeriesLabelGenerator0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      boolean boolean0 = standardCategorySeriesLabelGenerator0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("^,M5");
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator1 = new StandardCategorySeriesLabelGenerator();
      boolean boolean0 = standardCategorySeriesLabelGenerator0.equals(standardCategorySeriesLabelGenerator1);
      assertFalse(standardCategorySeriesLabelGenerator1.equals((Object)standardCategorySeriesLabelGenerator0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("^,M5");
      standardCategorySeriesLabelGenerator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("^,M5");
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{0}").when(categoryDataset0).getRowKey(anyInt());
      String string0 = standardCategorySeriesLabelGenerator0.generateLabel(categoryDataset0, 2364);
      assertEquals("^,M5", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      boolean boolean0 = standardCategorySeriesLabelGenerator0.equals(standardCategorySeriesLabelGenerator0);
      assertTrue(boolean0);
  }
}
