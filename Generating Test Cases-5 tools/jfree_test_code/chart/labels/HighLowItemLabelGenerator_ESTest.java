/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:57:08 GMT 2023
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.NumberFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HighLowItemLabelGenerator_ESTest extends HighLowItemLabelGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(numberFormat0).clone();
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, numberFormat0);
      assertNotNull(highLowItemLabelGenerator0);
      
      Object object0 = highLowItemLabelGenerator0.clone();
      assertNotSame(highLowItemLabelGenerator0, object0);
      assertNotSame(object0, highLowItemLabelGenerator0);
      assertNotNull(object0);
      
      DateFormat dateFormat1 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn("H,8N`JUm").when(dateFormat1).clone();
      HighLowItemLabelGenerator highLowItemLabelGenerator1 = new HighLowItemLabelGenerator();
      assertFalse(highLowItemLabelGenerator1.equals((Object)object0));
      assertFalse(highLowItemLabelGenerator1.equals((Object)highLowItemLabelGenerator0));
      assertNotNull(highLowItemLabelGenerator1);
      
      Object object1 = highLowItemLabelGenerator1.clone();
      assertFalse(highLowItemLabelGenerator1.equals((Object)object0));
      assertFalse(highLowItemLabelGenerator1.equals((Object)highLowItemLabelGenerator0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)highLowItemLabelGenerator0));
      assertTrue(object1.equals((Object)highLowItemLabelGenerator1));
      assertNotSame(highLowItemLabelGenerator1, object1);
      assertNotSame(highLowItemLabelGenerator1, object0);
      assertNotSame(highLowItemLabelGenerator1, highLowItemLabelGenerator0);
      assertNotSame(object1, object0);
      assertNotSame(object1, highLowItemLabelGenerator0);
      assertNotSame(object1, highLowItemLabelGenerator1);
      assertNotNull(object1);
      
      HighLowItemLabelGenerator highLowItemLabelGenerator2 = new HighLowItemLabelGenerator();
      assertFalse(highLowItemLabelGenerator2.equals((Object)highLowItemLabelGenerator0));
      assertFalse(highLowItemLabelGenerator2.equals((Object)object0));
      assertTrue(highLowItemLabelGenerator2.equals((Object)object1));
      assertTrue(highLowItemLabelGenerator2.equals((Object)highLowItemLabelGenerator1));
      assertNotNull(highLowItemLabelGenerator2);
      
      NumberFormat numberFormat1 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      HighLowItemLabelGenerator highLowItemLabelGenerator3 = new HighLowItemLabelGenerator(dateFormat1, numberFormat1);
      assertFalse(highLowItemLabelGenerator3.equals((Object)highLowItemLabelGenerator1));
      assertFalse(highLowItemLabelGenerator3.equals((Object)highLowItemLabelGenerator2));
      assertFalse(highLowItemLabelGenerator3.equals((Object)object0));
      assertFalse(highLowItemLabelGenerator3.equals((Object)object1));
      assertFalse(highLowItemLabelGenerator3.equals((Object)highLowItemLabelGenerator0));
      assertNotNull(highLowItemLabelGenerator3);
      
      highLowItemLabelGenerator3.hashCode();
      assertFalse(highLowItemLabelGenerator3.equals((Object)highLowItemLabelGenerator1));
      assertFalse(highLowItemLabelGenerator3.equals((Object)highLowItemLabelGenerator2));
      assertFalse(highLowItemLabelGenerator3.equals((Object)object0));
      assertFalse(highLowItemLabelGenerator3.equals((Object)object1));
      assertFalse(highLowItemLabelGenerator3.equals((Object)highLowItemLabelGenerator0));
      assertNotSame(highLowItemLabelGenerator3, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator3, highLowItemLabelGenerator2);
      assertNotSame(highLowItemLabelGenerator3, object0);
      assertNotSame(highLowItemLabelGenerator3, object1);
      assertNotSame(highLowItemLabelGenerator3, highLowItemLabelGenerator0);
      
      // Undeclared exception!
      try { 
        highLowItemLabelGenerator3.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.text.DateFormat
         //
         verifyException("org.jfree.chart.labels.HighLowItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = null;
      try {
        highLowItemLabelGenerator0 = new HighLowItemLabelGenerator((DateFormat) null, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dateFormatter' argument.
         //
         verifyException("org.jfree.chart.labels.HighLowItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = null;
      try {
        highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'numberFormatter' argument.
         //
         verifyException("org.jfree.chart.labels.HighLowItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = null;
      try {
        highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'numberFormatter' argument.
         //
         verifyException("org.jfree.chart.labels.HighLowItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      assertNotNull(highLowItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      highLowItemLabelGenerator0.hashCode();
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      String string0 = highLowItemLabelGenerator0.generateToolTip(xYDataset1, 0, 0);
      assertNull(string0);
      
      highLowItemLabelGenerator0.hashCode();
      String string1 = highLowItemLabelGenerator0.generateLabel(xYDataset0, 0, 0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      assertNotNull(highLowItemLabelGenerator0);
      
      String string0 = highLowItemLabelGenerator0.generateToolTip((XYDataset) null, 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      assertNotNull(highLowItemLabelGenerator0);
      
      String string0 = highLowItemLabelGenerator0.generateLabel((XYDataset) null, (-1587), 0);
      assertNull(string0);
      
      String string1 = highLowItemLabelGenerator0.generateLabel((XYDataset) null, 0, 0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(numberFormat0).clone();
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, numberFormat0);
      assertNotNull(highLowItemLabelGenerator0);
      
      Object object0 = highLowItemLabelGenerator0.clone();
      assertNotSame(highLowItemLabelGenerator0, object0);
      assertNotSame(object0, highLowItemLabelGenerator0);
      assertNotNull(object0);
      
      boolean boolean0 = highLowItemLabelGenerator0.equals(object0);
      assertFalse(boolean0);
      assertFalse(highLowItemLabelGenerator0.equals((Object)object0));
      assertNotSame(highLowItemLabelGenerator0, object0);
      assertNotSame(object0, highLowItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      assertNotNull(highLowItemLabelGenerator0);
      
      Object object0 = highLowItemLabelGenerator0.clone();
      assertTrue(object0.equals((Object)highLowItemLabelGenerator0));
      assertNotSame(highLowItemLabelGenerator0, object0);
      assertNotSame(object0, highLowItemLabelGenerator0);
      assertNotNull(object0);
      
      highLowItemLabelGenerator0.hashCode();
      assertTrue(highLowItemLabelGenerator0.equals((Object)object0));
      assertNotSame(highLowItemLabelGenerator0, object0);
      
      boolean boolean0 = highLowItemLabelGenerator0.equals("g[Qu##dp");
      assertFalse(boolean0);
      assertTrue(highLowItemLabelGenerator0.equals((Object)object0));
      assertNotSame(highLowItemLabelGenerator0, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      assertNotNull(highLowItemLabelGenerator0);
      
      HighLowItemLabelGenerator highLowItemLabelGenerator1 = new HighLowItemLabelGenerator();
      assertTrue(highLowItemLabelGenerator1.equals((Object)highLowItemLabelGenerator0));
      assertNotNull(highLowItemLabelGenerator1);
      
      boolean boolean0 = highLowItemLabelGenerator0.equals(highLowItemLabelGenerator1);
      assertTrue(boolean0);
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator1.equals((Object)highLowItemLabelGenerator0));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator1, highLowItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      assertNotNull(highLowItemLabelGenerator0);
      
      boolean boolean0 = highLowItemLabelGenerator0.equals(highLowItemLabelGenerator0);
      assertTrue(boolean0);
      
      HighLowItemLabelGenerator highLowItemLabelGenerator1 = new HighLowItemLabelGenerator();
      assertTrue(highLowItemLabelGenerator1.equals((Object)highLowItemLabelGenerator0));
      assertNotNull(highLowItemLabelGenerator1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      assertNotNull(highLowItemLabelGenerator0);
      
      HighLowItemLabelGenerator highLowItemLabelGenerator1 = (HighLowItemLabelGenerator)highLowItemLabelGenerator0.clone();
      assertTrue(highLowItemLabelGenerator1.equals((Object)highLowItemLabelGenerator0));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator1, highLowItemLabelGenerator0);
      assertNotNull(highLowItemLabelGenerator1);
      
      highLowItemLabelGenerator0.hashCode();
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      
      highLowItemLabelGenerator0.hashCode();
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      
      highLowItemLabelGenerator0.hashCode();
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      String string0 = highLowItemLabelGenerator0.generateToolTip(xYDataset0, (-784), 0);
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNull(string0);
      
      HighLowItemLabelGenerator highLowItemLabelGenerator2 = new HighLowItemLabelGenerator();
      assertTrue(highLowItemLabelGenerator2.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator2.equals((Object)highLowItemLabelGenerator0));
      assertNotNull(highLowItemLabelGenerator2);
      
      HighLowItemLabelGenerator highLowItemLabelGenerator3 = (HighLowItemLabelGenerator)highLowItemLabelGenerator2.clone();
      assertTrue(highLowItemLabelGenerator2.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator2.equals((Object)highLowItemLabelGenerator0));
      assertTrue(highLowItemLabelGenerator3.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator3.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator3.equals((Object)highLowItemLabelGenerator0));
      assertNotSame(highLowItemLabelGenerator2, highLowItemLabelGenerator0);
      assertNotSame(highLowItemLabelGenerator2, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator2, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator3, highLowItemLabelGenerator0);
      assertNotSame(highLowItemLabelGenerator3, highLowItemLabelGenerator2);
      assertNotSame(highLowItemLabelGenerator3, highLowItemLabelGenerator1);
      assertNotNull(highLowItemLabelGenerator3);
      
      HighLowItemLabelGenerator highLowItemLabelGenerator4 = (HighLowItemLabelGenerator)highLowItemLabelGenerator0.clone();
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertTrue(highLowItemLabelGenerator4.equals((Object)highLowItemLabelGenerator0));
      assertTrue(highLowItemLabelGenerator4.equals((Object)highLowItemLabelGenerator3));
      assertTrue(highLowItemLabelGenerator4.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator4.equals((Object)highLowItemLabelGenerator1));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      assertNotSame(highLowItemLabelGenerator4, highLowItemLabelGenerator2);
      assertNotSame(highLowItemLabelGenerator4, highLowItemLabelGenerator0);
      assertNotSame(highLowItemLabelGenerator4, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator4, highLowItemLabelGenerator1);
      assertNotNull(highLowItemLabelGenerator4);
      
      boolean boolean0 = highLowItemLabelGenerator0.equals(highLowItemLabelGenerator4);
      assertTrue(boolean0);
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertTrue(highLowItemLabelGenerator4.equals((Object)highLowItemLabelGenerator0));
      assertTrue(highLowItemLabelGenerator4.equals((Object)highLowItemLabelGenerator3));
      assertTrue(highLowItemLabelGenerator4.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator4.equals((Object)highLowItemLabelGenerator1));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      assertNotSame(highLowItemLabelGenerator4, highLowItemLabelGenerator2);
      assertNotSame(highLowItemLabelGenerator4, highLowItemLabelGenerator0);
      assertNotSame(highLowItemLabelGenerator4, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator4, highLowItemLabelGenerator1);
      
      highLowItemLabelGenerator0.hashCode();
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      
      highLowItemLabelGenerator0.hashCode();
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      
      boolean boolean1 = highLowItemLabelGenerator0.equals((Object) null);
      assertFalse(boolean1);
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertFalse(boolean1 == boolean0);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      
      highLowItemLabelGenerator0.hashCode();
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      String string1 = highLowItemLabelGenerator0.generateLabel(xYDataset1, 0, 0);
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      assertNull(string1);
      
      boolean boolean2 = highLowItemLabelGenerator0.equals(highLowItemLabelGenerator1);
      assertTrue(boolean2);
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(highLowItemLabelGenerator1.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator1.equals((Object)highLowItemLabelGenerator0));
      assertTrue(highLowItemLabelGenerator1.equals((Object)highLowItemLabelGenerator3));
      assertTrue(highLowItemLabelGenerator1.equals((Object)highLowItemLabelGenerator4));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      assertNotSame(highLowItemLabelGenerator1, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator1, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator1, highLowItemLabelGenerator0);
      assertNotSame(highLowItemLabelGenerator1, highLowItemLabelGenerator2);
      
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      String string2 = highLowItemLabelGenerator0.generateLabel(xYDataset2, 2, 2);
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      assertNull(string2);
      
      XYDataset xYDataset3 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      String string3 = highLowItemLabelGenerator0.generateLabel(xYDataset3, 0, (-784));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      assertNull(string3);
      
      XYDataset xYDataset4 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      String string4 = highLowItemLabelGenerator0.generateToolTip(xYDataset4, (-1109), 2);
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      assertNull(string4);
      
      XYDataset xYDataset5 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      String string5 = highLowItemLabelGenerator0.generateLabel(xYDataset5, (-1109), (-5834));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      assertNull(string5);
      
      boolean boolean3 = highLowItemLabelGenerator0.equals((Object) null);
      assertFalse(boolean3);
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      
      boolean boolean4 = highLowItemLabelGenerator0.equals("");
      assertFalse(boolean4);
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      
      HighLowItemLabelGenerator highLowItemLabelGenerator5 = (HighLowItemLabelGenerator)highLowItemLabelGenerator1.clone();
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator0.equals((Object)highLowItemLabelGenerator3));
      assertTrue(highLowItemLabelGenerator1.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator1.equals((Object)highLowItemLabelGenerator0));
      assertTrue(highLowItemLabelGenerator1.equals((Object)highLowItemLabelGenerator3));
      assertTrue(highLowItemLabelGenerator1.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator5.equals((Object)highLowItemLabelGenerator1));
      assertTrue(highLowItemLabelGenerator5.equals((Object)highLowItemLabelGenerator2));
      assertTrue(highLowItemLabelGenerator5.equals((Object)highLowItemLabelGenerator3));
      assertTrue(highLowItemLabelGenerator5.equals((Object)highLowItemLabelGenerator4));
      assertTrue(highLowItemLabelGenerator5.equals((Object)highLowItemLabelGenerator0));
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator5);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator1);
      assertNotSame(highLowItemLabelGenerator0, highLowItemLabelGenerator2);
      assertNotSame(highLowItemLabelGenerator1, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator1, highLowItemLabelGenerator5);
      assertNotSame(highLowItemLabelGenerator1, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator1, highLowItemLabelGenerator0);
      assertNotSame(highLowItemLabelGenerator1, highLowItemLabelGenerator2);
      assertNotSame(highLowItemLabelGenerator5, highLowItemLabelGenerator4);
      assertNotSame(highLowItemLabelGenerator5, highLowItemLabelGenerator0);
      assertNotSame(highLowItemLabelGenerator5, highLowItemLabelGenerator3);
      assertNotSame(highLowItemLabelGenerator5, highLowItemLabelGenerator2);
      assertNotSame(highLowItemLabelGenerator5, highLowItemLabelGenerator1);
      assertNotNull(highLowItemLabelGenerator5);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(dateFormat0).clone();
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(numberFormat0).clone();
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, numberFormat0);
      highLowItemLabelGenerator0.hashCode();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      highLowItemLabelGenerator0.clone();
      highLowItemLabelGenerator0.hashCode();
      highLowItemLabelGenerator0.clone();
      highLowItemLabelGenerator0.generateLabel(xYDataset0, (-1777), (-57));
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      highLowItemLabelGenerator0.generateToolTip(xYDataset1, (-1777), 3);
      highLowItemLabelGenerator0.hashCode();
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      highLowItemLabelGenerator0.generateToolTip(xYDataset2, (-57), (-1031));
      highLowItemLabelGenerator0.hashCode();
      Object object0 = highLowItemLabelGenerator0.clone();
      Object object1 = highLowItemLabelGenerator0.clone();
      XYDataset xYDataset3 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      highLowItemLabelGenerator0.generateToolTip(xYDataset3, (-1777), 2696);
      boolean boolean0 = highLowItemLabelGenerator0.equals(object1);
      assertFalse(boolean0);
      
      HighLowItemLabelGenerator highLowItemLabelGenerator1 = (HighLowItemLabelGenerator)highLowItemLabelGenerator0.clone();
      highLowItemLabelGenerator0.equals((Object) null);
      highLowItemLabelGenerator0.equals((Object) null);
      boolean boolean1 = highLowItemLabelGenerator0.equals((Object) null);
      assertFalse(boolean1);
      
      highLowItemLabelGenerator0.generateLabel((XYDataset) null, (-1031), (-57));
      highLowItemLabelGenerator0.hashCode();
      highLowItemLabelGenerator0.hashCode();
      highLowItemLabelGenerator0.generateLabel((XYDataset) null, (-57), (-996));
      highLowItemLabelGenerator0.clone();
      highLowItemLabelGenerator1.clone();
      assertFalse(highLowItemLabelGenerator0.equals((Object)object0));
  }
}
