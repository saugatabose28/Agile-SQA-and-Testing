/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:48:40 GMT 2023
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.general.TestIntervalCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCategoryItemLabelGenerator_ESTest extends AbstractCategoryItemLabelGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      DateFormat dateFormat0 = boxAndWhiskerToolTipGenerator0.getDateFormat();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNull(dateFormat0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      boolean boolean0 = boxAndWhiskerToolTipGenerator0.equals((Object) null);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertFalse(boolean0);
      
      Integer integer1 = Integer.getInteger("start", 0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        boxAndWhiskerToolTipGenerator0.generateLabelString(defaultCategoryDataset0, 13, (-1610612734));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, 13);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(13, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertNotNull(categoryToPieDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.removeChangeListener(categoryToPieDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(13, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        intervalCategoryToolTipGenerator0.generateColumnLabel(defaultBoxAndWhiskerCategoryDataset0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-3214L));
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("}F!", decimalFormat0);
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("}F!", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryItemLabelGenerator0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        intervalCategoryItemLabelGenerator0.createItemArray(defaultMultiValueCategoryDataset0, 19, 19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", numberFormat0);
      assertEquals("", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      TestIntervalCategoryDataset testIntervalCategoryDataset0 = new TestIntervalCategoryDataset();
      assertTrue(testIntervalCategoryDataset0.getNotify());
      assertNotNull(testIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        boxAndWhiskerToolTipGenerator0.generateColumnLabel(testIntervalCategoryDataset0, (-348));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator", numberFormat0);
      assertEquals("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("H", dateFormat0);
      assertEquals("H", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        intervalCategoryToolTipGenerator0.generateRowLabel(defaultCategoryDataset0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator").when(numberFormat0).clone();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator", numberFormat0);
      assertEquals("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.text.NumberFormat
         //
         verifyException("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("J51[(8", dateFormat0);
      assertEquals("J51[(8", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      NumberFormat numberFormat0 = intervalCategoryToolTipGenerator0.getNumberFormat();
      assertEquals("J51[(8", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNull(numberFormat0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn("J51[(8").when(categoryDataset0).getColumnKey(anyInt());
      int int0 = (-876);
      String string0 = intervalCategoryToolTipGenerator0.generateColumnLabel(categoryDataset0, (-876));
      assertEquals("J51[(8", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(string0);
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = null;
      try {
        standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("mVP*d5VFiXb7;Q9q", (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      boxAndWhiskerToolTipGenerator0.hashCode();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn("({0}, {1}) = {2}").when(categoryDataset0).getRowKey(anyInt());
      doReturn(31690246).when(categoryDataset0).getValue(anyInt() , anyInt());
      int int0 = (-1951);
      String string0 = boxAndWhiskerToolTipGenerator0.generateLabelString(categoryDataset0, (-1951), (-1951));
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertEquals("X: 31,690,246 Mean: null Median: null Min: null Max: null Q1: null Q3: null ", string0);
      assertNotNull(string0);
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator1 = (BoxAndWhiskerToolTipGenerator)boxAndWhiskerToolTipGenerator0.clone();
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertNotSame(boxAndWhiskerToolTipGenerator1, boxAndWhiskerToolTipGenerator0);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator1.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator1);
      assertTrue(boxAndWhiskerToolTipGenerator1.equals((Object)boxAndWhiskerToolTipGenerator0));
      
      int int1 = boxAndWhiskerToolTipGenerator0.hashCode();
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertTrue(boxAndWhiskerToolTipGenerator0.equals((Object)boxAndWhiskerToolTipGenerator1));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        boxAndWhiskerToolTipGenerator0.generateColumnLabel((CategoryDataset) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("Z=3YGxlkXeBp$", dateFormat0);
      assertEquals("Z=3YGxlkXeBp$", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn("({0}, {1}) = {2}").when(categoryDataset0).getRowKey(anyInt());
      int int0 = 2;
      int int1 = 0;
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.createItemArray(categoryDataset0, 2, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      assertEquals("{2}", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{2}").when(categoryDataset0).getRowKey(anyInt());
      String string0 = standardCategoryItemLabelGenerator0.generateRowLabel(categoryDataset0, 0);
      assertEquals("{2}", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(string0);
      
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("java.lang.String@0000000002", numberFormat0);
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      NumberFormat numberFormat1 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(numberFormat1).clone();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("({0}, {1}) = {3} - {4}", numberFormat1);
      assertEquals("({0}, {1}) = {3} - {4}", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator1 = (BoxAndWhiskerToolTipGenerator)boxAndWhiskerToolTipGenerator0.clone();
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertNotSame(boxAndWhiskerToolTipGenerator1, boxAndWhiskerToolTipGenerator0);
      assertEquals("({0}, {1}) = {3} - {4}", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertEquals("({0}, {1}) = {3} - {4}", boxAndWhiskerToolTipGenerator1.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator1);
      assertFalse(boxAndWhiskerToolTipGenerator1.equals((Object)boxAndWhiskerToolTipGenerator0));
      
      boolean boolean0 = intervalCategoryToolTipGenerator0.equals(boxAndWhiskerToolTipGenerator1);
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertNotSame(boxAndWhiskerToolTipGenerator1, boxAndWhiskerToolTipGenerator0);
      assertEquals("({0}, {1}) = {3} - {4}", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertEquals("({0}, {1}) = {3} - {4}", boxAndWhiskerToolTipGenerator1.getLabelFormat());
      assertFalse(boolean0);
      assertFalse(boxAndWhiskerToolTipGenerator0.equals((Object)boxAndWhiskerToolTipGenerator1));
      assertFalse(boxAndWhiskerToolTipGenerator1.equals((Object)boxAndWhiskerToolTipGenerator0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("J51[(8", dateFormat0);
      assertEquals("J51[(8", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      NumberFormat numberFormat0 = intervalCategoryToolTipGenerator0.getNumberFormat();
      assertEquals("J51[(8", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNull(numberFormat0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      // Undeclared exception!
      try { 
        intervalCategoryToolTipGenerator0.generateColumnLabel(categoryDataset0, (-876));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator1 = (BoxAndWhiskerToolTipGenerator)boxAndWhiskerToolTipGenerator0.clone();
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertNotSame(boxAndWhiskerToolTipGenerator1, boxAndWhiskerToolTipGenerator0);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator1.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator1);
      assertTrue(boxAndWhiskerToolTipGenerator1.equals((Object)boxAndWhiskerToolTipGenerator0));
      
      boolean boolean0 = boxAndWhiskerToolTipGenerator0.equals(boxAndWhiskerToolTipGenerator1);
      assertNotSame(boxAndWhiskerToolTipGenerator0, boxAndWhiskerToolTipGenerator1);
      assertNotSame(boxAndWhiskerToolTipGenerator1, boxAndWhiskerToolTipGenerator0);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator1.getLabelFormat());
      assertTrue(boolean0);
      assertTrue(boxAndWhiskerToolTipGenerator0.equals((Object)boxAndWhiskerToolTipGenerator1));
      assertTrue(boxAndWhiskerToolTipGenerator1.equals((Object)boxAndWhiskerToolTipGenerator0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      assertEquals("{2}", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      standardCategoryItemLabelGenerator0.hashCode();
      assertEquals("{2}", standardCategoryItemLabelGenerator0.getLabelFormat());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)standardCategoryItemLabelGenerator0.getNumberFormat();
      assertEquals("{2}", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      int int0 = 0;
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.generateLabel(categoryDataset0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("", dateFormat0);
      assertEquals("", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryItemLabelGenerator0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator1 = (StandardCategoryToolTipGenerator)standardCategoryToolTipGenerator0.clone();
      assertNotSame(standardCategoryToolTipGenerator0, standardCategoryToolTipGenerator1);
      assertNotSame(standardCategoryToolTipGenerator1, standardCategoryToolTipGenerator0);
      assertEquals("", standardCategoryToolTipGenerator0.getLabelFormat());
      assertEquals("", standardCategoryToolTipGenerator1.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator1);
      assertFalse(standardCategoryToolTipGenerator1.equals((Object)standardCategoryToolTipGenerator0));
      
      boolean boolean0 = intervalCategoryItemLabelGenerator0.equals(standardCategoryToolTipGenerator0);
      assertNotSame(standardCategoryToolTipGenerator0, standardCategoryToolTipGenerator1);
      assertEquals("", standardCategoryToolTipGenerator0.getLabelFormat());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertFalse(boolean0);
      assertFalse(standardCategoryToolTipGenerator0.equals((Object)standardCategoryToolTipGenerator1));
      
      // Undeclared exception!
      try { 
        intervalCategoryItemLabelGenerator0.createItemArray(categoryDataset0, 2, 219);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      DateFormat dateFormat0 = boxAndWhiskerToolTipGenerator0.getDateFormat();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNull(dateFormat0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        boxAndWhiskerToolTipGenerator0.createItemArray(categoryDataset0, 0, (-56));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "%%'qx?m";
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("%%'qx?m", dateFormat0);
      assertEquals("%%'qx?m", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      boolean boolean0 = standardCategoryToolTipGenerator0.equals("%%'qx?m");
      assertEquals("%%'qx?m", standardCategoryToolTipGenerator0.getLabelFormat());
      assertFalse(boolean0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      int int0 = 312;
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateLabelString(categoryDataset0, 2662, 312);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset1).getRowKey(anyInt());
      doReturn((Number) null).when(categoryDataset1).getValue(anyInt() , anyInt());
      int int0 = (-1);
      int int1 = 37;
      int int2 = boxAndWhiskerToolTipGenerator0.hashCode();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        boxAndWhiskerToolTipGenerator0.generateLabelString(categoryDataset1, (-1), 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("wgJ", dateFormat0);
      assertEquals("wgJ", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      // Undeclared exception!
      try { 
        intervalCategoryToolTipGenerator0.generateLabelString((CategoryDataset) null, (-535), (-535));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(numberFormat0).toString();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("m2}IuJe1t`S$i[*S]7", numberFormat0, numberFormat0);
      assertEquals("m2}IuJe1t`S$i[*S]7", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      NumberFormat numberFormat1 = standardCategoryItemLabelGenerator0.getNumberFormat();
      assertSame(numberFormat1, numberFormat0);
      assertEquals("m2}IuJe1t`S$i[*S]7", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNull(numberFormat1.getRoundingMode());
      assertFalse(numberFormat1.isGroupingUsed());
      assertEquals(0, numberFormat1.getMaximumFractionDigits());
      assertEquals(0, numberFormat1.getMaximumIntegerDigits());
      assertEquals(0, numberFormat1.getMinimumFractionDigits());
      assertEquals(0, numberFormat1.getMinimumIntegerDigits());
      assertFalse(numberFormat1.isParseIntegerOnly());
      assertNotNull(numberFormat1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(numberFormat0).clone();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("sZQ.<:FU9*g", numberFormat0);
      assertEquals("sZQ.<:FU9*g", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator1 = (StandardCategoryToolTipGenerator)standardCategoryToolTipGenerator0.clone();
      assertNotSame(standardCategoryToolTipGenerator0, standardCategoryToolTipGenerator1);
      assertNotSame(standardCategoryToolTipGenerator1, standardCategoryToolTipGenerator0);
      assertEquals("sZQ.<:FU9*g", standardCategoryToolTipGenerator0.getLabelFormat());
      assertEquals("sZQ.<:FU9*g", standardCategoryToolTipGenerator1.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator1);
      assertFalse(standardCategoryToolTipGenerator1.equals((Object)standardCategoryToolTipGenerator0));
      
      boolean boolean0 = standardCategoryToolTipGenerator0.equals("sZQ.<:FU9*g");
      assertNotSame(standardCategoryToolTipGenerator0, standardCategoryToolTipGenerator1);
      assertEquals("sZQ.<:FU9*g", standardCategoryToolTipGenerator0.getLabelFormat());
      assertFalse(boolean0);
      assertFalse(standardCategoryToolTipGenerator0.equals((Object)standardCategoryToolTipGenerator1));
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 1306;
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset1).getRowKey(anyInt());
      int int1 = 7;
      int int2 = standardCategoryToolTipGenerator0.hashCode();
      assertNotSame(standardCategoryToolTipGenerator0, standardCategoryToolTipGenerator1);
      assertEquals("sZQ.<:FU9*g", standardCategoryToolTipGenerator0.getLabelFormat());
      assertFalse(standardCategoryToolTipGenerator0.equals((Object)standardCategoryToolTipGenerator1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateRowLabel(categoryDataset1, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateFormat0).toString();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("percentFormatter", dateFormat0);
      assertEquals("percentFormatter", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      DateFormat dateFormat1 = standardCategoryItemLabelGenerator0.getDateFormat();
      assertSame(dateFormat1, dateFormat0);
      assertEquals("percentFormatter", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertFalse(dateFormat1.isLenient());
      assertNotNull(dateFormat1);
      
      boolean boolean0 = standardCategoryItemLabelGenerator0.equals(dateFormat1);
      assertSame(dateFormat1, dateFormat0);
      assertEquals("percentFormatter", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertFalse(dateFormat1.isLenient());
      assertFalse(boolean0);
      
      String string0 = standardCategoryItemLabelGenerator0.getLabelFormat();
      assertEquals("percentFormatter", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertEquals("percentFormatter", string0);
      assertNotNull(string0);
      
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("{2}", numberFormat0);
      assertEquals("{2}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryItemLabelGenerator0);
      
      boolean boolean1 = standardCategoryItemLabelGenerator0.equals(intervalCategoryItemLabelGenerator0);
      assertEquals("percentFormatter", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertEquals("{2}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      TestIntervalCategoryDataset testIntervalCategoryDataset0 = new TestIntervalCategoryDataset();
      assertTrue(testIntervalCategoryDataset0.getNotify());
      assertNotNull(testIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(testIntervalCategoryDataset0, tableOrder0, (-1272));
      assertTrue(testIntervalCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-1272), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      TestIntervalCategoryDataset testIntervalCategoryDataset1 = (TestIntervalCategoryDataset)categoryToPieDataset0.getUnderlyingDataset();
      assertSame(testIntervalCategoryDataset0, testIntervalCategoryDataset1);
      assertSame(testIntervalCategoryDataset1, testIntervalCategoryDataset0);
      assertTrue(testIntervalCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-1272), categoryToPieDataset0.getExtractIndex());
      assertTrue(testIntervalCategoryDataset1.getNotify());
      assertNotNull(testIntervalCategoryDataset1);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(testIntervalCategoryDataset1, (-1143875944), 332);
      assertTrue(testIntervalCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-1272), categoryToPieDataset0.getExtractIndex());
      assertTrue(testIntervalCategoryDataset1.getNotify());
      assertEquals((-1143875944), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(332, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateRowLabel(slidingCategoryDataset0, (-1272));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("DefaultIntervalCategoryDataset.setValue: series outside valid range.", dateFormat0);
      assertEquals("DefaultIntervalCategoryDataset.setValue: series outside valid range.", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = null;
      try {
        standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator(" ", (DateFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", numberFormat0, numberFormat0);
      assertEquals("", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.createItemArray(categoryDataset0, 1308, (-3078));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      // Undeclared exception!
      try { 
        boxAndWhiskerToolTipGenerator0.generateColumnLabel(categoryDataset0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", numberFormat0);
      assertEquals("", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      int int0 = (-325);
      // Undeclared exception!
      try { 
        boxAndWhiskerToolTipGenerator0.generateColumnLabel(categoryDataset0, (-325));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryItemLabelGenerator0);
      
      boolean boolean0 = boxAndWhiskerToolTipGenerator0.equals(intervalCategoryItemLabelGenerator0);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertFalse(boolean0);
      
      CategoryDataset categoryDataset0 = null;
      int int0 = 1017;
      int int1 = 1;
      // Undeclared exception!
      try { 
        boxAndWhiskerToolTipGenerator0.createItemArray((CategoryDataset) null, 1017, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = null;
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = null;
      try {
        boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator((String) null, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'labelFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("", dateFormat0);
      standardCategoryToolTipGenerator0.equals("");
      standardCategoryToolTipGenerator0.clone();
      standardCategoryToolTipGenerator0.getLabelFormat();
      standardCategoryToolTipGenerator0.equals("");
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn("({0}, {1}) = {2}").when(categoryDataset0).getColumnKey(anyInt());
      doReturn("").when(categoryDataset0).getRowKey(anyInt());
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      int int0 = 0;
      standardCategoryToolTipGenerator0.generateToolTip(categoryDataset0, 0, 535);
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset1).getColumnKey(anyInt());
      int int1 = 1;
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateColumnLabel(categoryDataset1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(numberFormat0).clone();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("", numberFormat0);
      intervalCategoryToolTipGenerator0.clone();
      intervalCategoryToolTipGenerator0.getLabelFormat();
      Object object0 = intervalCategoryToolTipGenerator0.clone();
      boolean boolean0 = intervalCategoryToolTipGenerator0.equals(object0);
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      Object object1 = boxAndWhiskerToolTipGenerator0.clone();
      boolean boolean1 = boxAndWhiskerToolTipGenerator0.equals(object1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      standardCategoryItemLabelGenerator0.getLabelFormat();
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("{2}", numberFormat0);
      Object object0 = standardCategoryItemLabelGenerator0.clone();
      standardCategoryItemLabelGenerator0.hashCode();
      boxAndWhiskerToolTipGenerator0.equals(object0);
      boxAndWhiskerToolTipGenerator0.hashCode();
      boxAndWhiskerToolTipGenerator0.equals("{2}");
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      int int0 = (-4147);
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.generateLabel(categoryDataset0, (-4147), (-4147));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("=i)K", numberFormat0);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.generateLabelString(categoryDataset0, (-3677), (-3677));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
