/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:40:49 GMT 2023
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.labels.IntervalXYItemLabelGenerator;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntervalXYItemLabelGenerator_ESTest extends IntervalXYItemLabelGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator();
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator1 = new IntervalXYItemLabelGenerator("{5} - {6}", dateFormat0, dateFormat0);
      intervalXYItemLabelGenerator0.equals(intervalXYItemLabelGenerator1);
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{5} - {6}").when(xYDataset0).getSeriesKey(anyInt());
      doReturn((-2109.733498)).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn((-1324.557612950258)).when(xYDataset0).getYValue(anyInt() , anyInt());
      intervalXYItemLabelGenerator0.createItemArray(xYDataset0, 220, 220);
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{5} - {6}").when(xYDataset1).getSeriesKey(anyInt());
      doReturn((-3091.2188)).when(xYDataset1).getXValue(anyInt() , anyInt());
      doReturn((-2109.733498)).when(xYDataset1).getYValue(anyInt() , anyInt());
      int int0 = 7;
      int int1 = 0;
      intervalXYItemLabelGenerator0.generateLabel(xYDataset1, 7, 0);
      intervalXYItemLabelGenerator0.clone();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator0.generateLabel(vectorSeriesCollection0, 7, 524);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.VectorSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator("", dateFormat0, decimalFormat0);
      TimeZone timeZone0 = TimeZone.getTimeZone("{5} - {6}");
      Locale locale0 = new Locale("org.jfree.chart.labels.IntervalXYItemLabelGenerator", "l_$(We.");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      TimeZone timeZone1 = mockGregorianCalendar0.getTimeZone();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone1);
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator0.createItemArray(timeSeriesCollection0, (-104), (-256));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (-104).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertNotNull(decimalFormat0);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator0.createItemArray(timeTableXYDataset0, 2148, 2102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2148, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      int int0 = 1816;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.getNotify());
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator("", numberFormat0, (DateFormat) null);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("", intervalXYItemLabelGenerator0.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator0);
      
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator0.createItemArray(categoryTableXYDataset0, (-2716), (-17));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNotNull(xYIntervalSeriesCollection0);
      
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator("", dateFormat0, numberFormat0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals("", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertNotNull(intervalXYItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator0.generateLabelString(xYIntervalSeriesCollection0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator();
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertNotNull(intervalXYItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{5} - {6}").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(2118.71).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn((-3064.2700914910047)).when(xYDataset0).getYValue(anyInt() , anyInt());
      int int0 = 743;
      int int1 = 6;
      Object[] objectArray0 = intervalXYItemLabelGenerator0.createItemArray(xYDataset0, 743, 6);
      assertEquals(7, objectArray0.length);
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertNotNull(objectArray0);
      
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("{5} - {6}", (String) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator();
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertNotNull(intervalXYItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{5} - {6}").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      Object[] objectArray0 = intervalXYItemLabelGenerator0.createItemArray(xYDataset0, 1512, (-2785));
      assertEquals(7, objectArray0.length);
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertNotNull(objectArray0);
      
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator1 = (IntervalXYItemLabelGenerator)intervalXYItemLabelGenerator0.clone();
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("null", intervalXYItemLabelGenerator1.getNullYString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator1.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator1);
      assertTrue(intervalXYItemLabelGenerator1.equals((Object)intervalXYItemLabelGenerator0));
      assertNotSame(intervalXYItemLabelGenerator0, intervalXYItemLabelGenerator1);
      assertNotSame(intervalXYItemLabelGenerator1, intervalXYItemLabelGenerator0);
      
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator2 = (IntervalXYItemLabelGenerator)intervalXYItemLabelGenerator0.clone();
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator2.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator2.getNullYString());
      assertNotNull(intervalXYItemLabelGenerator2);
      assertTrue(intervalXYItemLabelGenerator0.equals((Object)intervalXYItemLabelGenerator1));
      assertTrue(intervalXYItemLabelGenerator2.equals((Object)intervalXYItemLabelGenerator1));
      assertTrue(intervalXYItemLabelGenerator2.equals((Object)intervalXYItemLabelGenerator0));
      assertNotSame(intervalXYItemLabelGenerator0, intervalXYItemLabelGenerator1);
      assertNotSame(intervalXYItemLabelGenerator0, intervalXYItemLabelGenerator2);
      assertNotSame(intervalXYItemLabelGenerator2, intervalXYItemLabelGenerator1);
      assertNotSame(intervalXYItemLabelGenerator2, intervalXYItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "DomainOrder.NONE";
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn("").when(numberFormat0).clone();
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator("DomainOrder.NONE", numberFormat0, numberFormat0);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("DomainOrder.NONE", intervalXYItemLabelGenerator0.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 4;
      int int1 = 0;
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator0.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.text.NumberFormat
         //
         verifyException("org.jfree.chart.labels.AbstractXYItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator();
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{5} - {6}").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      String string0 = intervalXYItemLabelGenerator0.generateLabel(xYDataset0, 4, 2275);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertNotNull(string0);
      assertEquals("0 - 0", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = null;
      try {
        intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator("{2}", (NumberFormat) null, dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator();
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator0);
      
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator1 = new IntervalXYItemLabelGenerator("{5} - {6}", numberFormat0, numberFormat0);
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator1.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator1.getNullYString());
      assertNotNull(intervalXYItemLabelGenerator1);
      assertFalse(intervalXYItemLabelGenerator1.equals((Object)intervalXYItemLabelGenerator0));
      
      boolean boolean0 = intervalXYItemLabelGenerator0.equals(intervalXYItemLabelGenerator1);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator1.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator1.getNullYString());
      assertFalse(boolean0);
      assertFalse(intervalXYItemLabelGenerator0.equals((Object)intervalXYItemLabelGenerator1));
      assertFalse(intervalXYItemLabelGenerator1.equals((Object)intervalXYItemLabelGenerator0));
      assertNotSame(intervalXYItemLabelGenerator0, intervalXYItemLabelGenerator1);
      assertNotSame(intervalXYItemLabelGenerator1, intervalXYItemLabelGenerator0);
      
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator2 = (IntervalXYItemLabelGenerator)intervalXYItemLabelGenerator0.clone();
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator2.getNullYString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator2.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator2);
      assertFalse(intervalXYItemLabelGenerator0.equals((Object)intervalXYItemLabelGenerator1));
      assertFalse(intervalXYItemLabelGenerator2.equals((Object)intervalXYItemLabelGenerator1));
      assertTrue(intervalXYItemLabelGenerator2.equals((Object)intervalXYItemLabelGenerator0));
      assertNotSame(intervalXYItemLabelGenerator0, intervalXYItemLabelGenerator2);
      assertNotSame(intervalXYItemLabelGenerator0, intervalXYItemLabelGenerator1);
      assertNotSame(intervalXYItemLabelGenerator2, intervalXYItemLabelGenerator1);
      assertNotSame(intervalXYItemLabelGenerator2, intervalXYItemLabelGenerator0);
      
      boolean boolean1 = intervalXYItemLabelGenerator0.equals(intervalXYItemLabelGenerator2);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator2.getNullYString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator2.getFormatString());
      assertTrue(boolean1);
      assertTrue(intervalXYItemLabelGenerator0.equals((Object)intervalXYItemLabelGenerator2));
      assertFalse(intervalXYItemLabelGenerator0.equals((Object)intervalXYItemLabelGenerator1));
      assertFalse(intervalXYItemLabelGenerator2.equals((Object)intervalXYItemLabelGenerator1));
      assertTrue(intervalXYItemLabelGenerator2.equals((Object)intervalXYItemLabelGenerator0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(intervalXYItemLabelGenerator0, intervalXYItemLabelGenerator2);
      assertNotSame(intervalXYItemLabelGenerator0, intervalXYItemLabelGenerator1);
      assertNotSame(intervalXYItemLabelGenerator2, intervalXYItemLabelGenerator1);
      assertNotSame(intervalXYItemLabelGenerator2, intervalXYItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      int int0 = 660;
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator1.generateLabel(xYDataset0, 660, 660);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator();
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator0);
      
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator1 = (IntervalXYItemLabelGenerator)intervalXYItemLabelGenerator0.clone();
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator1.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator1.getNullYString());
      assertNotNull(intervalXYItemLabelGenerator1);
      assertTrue(intervalXYItemLabelGenerator1.equals((Object)intervalXYItemLabelGenerator0));
      assertNotSame(intervalXYItemLabelGenerator0, intervalXYItemLabelGenerator1);
      assertNotSame(intervalXYItemLabelGenerator1, intervalXYItemLabelGenerator0);
      
      boolean boolean0 = intervalXYItemLabelGenerator0.equals(intervalXYItemLabelGenerator1);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator1.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator1.getNullYString());
      assertTrue(boolean0);
      assertTrue(intervalXYItemLabelGenerator0.equals((Object)intervalXYItemLabelGenerator1));
      assertTrue(intervalXYItemLabelGenerator1.equals((Object)intervalXYItemLabelGenerator0));
      assertNotSame(intervalXYItemLabelGenerator0, intervalXYItemLabelGenerator1);
      assertNotSame(intervalXYItemLabelGenerator1, intervalXYItemLabelGenerator0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(timePeriodValuesCollection0, 42.0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(42.0, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertNotNull(xYBarDataset0);
      
      boolean boolean1 = intervalXYItemLabelGenerator0.equals(xYBarDataset0);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("{5} - {6}", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(42.0, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertFalse(boolean1);
      assertTrue(intervalXYItemLabelGenerator0.equals((Object)intervalXYItemLabelGenerator1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(intervalXYItemLabelGenerator0, intervalXYItemLabelGenerator1);
      
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator0.createItemArray(timePeriodValuesCollection0, (-115), (-115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = null;
      try {
        intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator((String) null, dateFormat0, dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "wvd#";
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = null;
      try {
        intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator("wvd#", (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator("", numberFormat0, numberFormat0);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("", intervalXYItemLabelGenerator0.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = null;
      try {
        intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator((String) null, numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator("org.jfree.chart.labels.IntervalXYItemLabelGenerator", dateFormat0, numberFormat0);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("org.jfree.chart.labels.IntervalXYItemLabelGenerator", intervalXYItemLabelGenerator0.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator0.createItemArray(xYDataset0, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = null;
      try {
        intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator((String) null, (DateFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator("seriesKeys", numberFormat0, dateFormat0);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("seriesKeys", intervalXYItemLabelGenerator0.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 6;
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset2).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator0.generateLabel(xYDataset2, 0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "%jQ|v/]@uA^!}5";
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((StringBuffer) null).when(dateFormat0).format(any(java.util.Date.class) , any(java.lang.StringBuffer.class) , any(java.text.FieldPosition.class));
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator("%jQ|v/]@uA^!}5", dateFormat0, numberFormat0);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("%jQ|v/]@uA^!}5", intervalXYItemLabelGenerator0.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("%jQ|v/]@uA^!}5").when(xYDataset1).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset1).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset1).getYValue(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator0.createItemArray(xYDataset1, 5, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(numberFormat0).clone();
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator("", numberFormat0, dateFormat0);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("", intervalXYItemLabelGenerator0.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator0);
      
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator1 = (IntervalXYItemLabelGenerator)intervalXYItemLabelGenerator0.clone();
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator1.getNullYString());
      assertEquals("", intervalXYItemLabelGenerator1.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator1);
      assertFalse(intervalXYItemLabelGenerator1.equals((Object)intervalXYItemLabelGenerator0));
      assertNotSame(intervalXYItemLabelGenerator0, intervalXYItemLabelGenerator1);
      assertNotSame(intervalXYItemLabelGenerator1, intervalXYItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset1).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator0.createItemArray(xYDataset1, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertTrue(histogramDataset0.getNotify());
      assertNotNull(histogramDataset0);
      
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator("[", (DateFormat) null, (DateFormat) null);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("[", intervalXYItemLabelGenerator0.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator0);
      
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator0.createItemArray(histogramDataset0, 2247, 1539);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2247, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(dateFormat0).clone();
      doReturn((StringBuffer) null).when(dateFormat0).format(any(java.util.Date.class) , any(java.lang.StringBuffer.class) , any(java.text.FieldPosition.class));
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator("", dateFormat0, dateFormat0);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("", intervalXYItemLabelGenerator0.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator0);
      
      boolean boolean0 = intervalXYItemLabelGenerator0.equals((Object) null);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("", intervalXYItemLabelGenerator0.getFormatString());
      assertFalse(boolean0);
      
      boolean boolean1 = intervalXYItemLabelGenerator0.equals((Object) null);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("", intervalXYItemLabelGenerator0.getFormatString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator1 = (IntervalXYItemLabelGenerator)intervalXYItemLabelGenerator0.clone();
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator1.getNullYString());
      assertEquals("", intervalXYItemLabelGenerator1.getFormatString());
      assertNotNull(intervalXYItemLabelGenerator1);
      assertFalse(intervalXYItemLabelGenerator1.equals((Object)intervalXYItemLabelGenerator0));
      assertNotSame(intervalXYItemLabelGenerator0, intervalXYItemLabelGenerator1);
      assertNotSame(intervalXYItemLabelGenerator1, intervalXYItemLabelGenerator0);
      
      boolean boolean2 = intervalXYItemLabelGenerator0.equals(intervalXYItemLabelGenerator1);
      assertEquals("null", intervalXYItemLabelGenerator0.getNullYString());
      assertEquals("", intervalXYItemLabelGenerator0.getFormatString());
      assertEquals("null", intervalXYItemLabelGenerator1.getNullYString());
      assertEquals("", intervalXYItemLabelGenerator1.getFormatString());
      assertFalse(boolean2);
      assertFalse(intervalXYItemLabelGenerator0.equals((Object)intervalXYItemLabelGenerator1));
      assertFalse(intervalXYItemLabelGenerator1.equals((Object)intervalXYItemLabelGenerator0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(intervalXYItemLabelGenerator0, intervalXYItemLabelGenerator1);
      assertNotSame(intervalXYItemLabelGenerator1, intervalXYItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{5} - {6}").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      int int0 = (-1125);
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator0.generateLabel(xYDataset0, (-1125), (-1125));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator();
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator1 = new IntervalXYItemLabelGenerator("{5} - {6}", dateFormat0, dateFormat0);
      intervalXYItemLabelGenerator0.equals(intervalXYItemLabelGenerator1);
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{5} - {6}").when(xYDataset0).getSeriesKey(anyInt());
      doReturn((-2109.733498)).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn((-1324.557612950258)).when(xYDataset0).getYValue(anyInt() , anyInt());
      intervalXYItemLabelGenerator0.createItemArray(xYDataset0, 220, 220);
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{5} - {6}").when(xYDataset1).getSeriesKey(anyInt());
      doReturn((-1324.557612950258)).when(xYDataset1).getXValue(anyInt() , anyInt());
      doReturn((-1324.557612950258)).when(xYDataset1).getYValue(anyInt() , anyInt());
      int int0 = 7;
      int int1 = 0;
      intervalXYItemLabelGenerator0.generateLabel(xYDataset1, 7, 0);
      intervalXYItemLabelGenerator0.clone();
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("-1,324.558 - -1,324.558").when(xYDataset2).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset2).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset2).getYValue(anyInt() , anyInt());
      intervalXYItemLabelGenerator0.generateLabel(xYDataset2, 7, 524);
      XYDataset xYDataset3 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset3).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        intervalXYItemLabelGenerator0.generateLabel(xYDataset3, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
