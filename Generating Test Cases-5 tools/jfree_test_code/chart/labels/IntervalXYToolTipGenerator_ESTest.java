/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:15:37 GMT 2023
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeEvent;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.Era;
import java.time.chrono.IsoEra;
import java.time.chrono.MinguoDate;
import java.time.temporal.ChronoField;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.jfree.chart.labels.IntervalXYToolTipGenerator;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntervalXYToolTipGenerator_ESTest extends IntervalXYToolTipGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(locale0));
      assertEquals(0, priorityQueue0.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) priorityQueue0);
      assertNotNull(list0);
      assertFalse(priorityQueue0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      MessageFormat messageFormat0 = new MessageFormat("1etov", locale0);
      assertNotNull(messageFormat0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "1etov");
      assertNotNull(stringBuffer0);
      assertEquals("1etov", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((StringBuffer) null).when(dateFormat0).format(any(java.util.Date.class) , any(java.lang.StringBuffer.class) , any(java.text.FieldPosition.class));
      DateFormat dateFormat1 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("|/8S&MsfeIy.lMlDH", dateFormat0, dateFormat1);
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("|/8S&MsfeIy.lMlDH", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{0}: ({1} - {2}), ({5} - {6})").when(xYDataset0).getSeriesKey(anyInt());
      doReturn((-596.05)).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(1.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(xYDataset0, 414, 414);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertNotNull(decimalFormat0);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("~fyh", decimalFormat0, decimalFormat0);
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals("~fyh", intervalXYToolTipGenerator0.getFormatString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("{0}: ({1} - {2}), ({5} - {6})", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(0, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(defaultOHLCDataset0, (-1098), (-1098));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1098
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("{0}: ({1} - {2}), ({5} - {6})");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      boolean boolean0 = intervalXYToolTipGenerator0.equals(defaultIntervalXYDataset0);
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.createItemArray(simpleHistogramDataset0, (-311), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{0}: ({1} - {2}), ({5} - {6})").when(xYDataset1).getSeriesKey(anyInt());
      doReturn(2985.8).when(xYDataset1).getXValue(anyInt() , anyInt());
      doReturn((-94.83)).when(xYDataset1).getYValue(anyInt() , anyInt());
      Object[] objectArray0 = intervalXYToolTipGenerator0.createItemArray(xYDataset1, 1, 127);
      assertNotNull(objectArray0);
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals(7, objectArray0.length);
      
      boolean boolean0 = intervalXYToolTipGenerator0.equals((Object) null);
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertFalse(boolean0);
      
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator1 = (IntervalXYToolTipGenerator)intervalXYToolTipGenerator0.clone();
      assertNotNull(intervalXYToolTipGenerator1);
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals("null", intervalXYToolTipGenerator1.getNullYString());
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator1.getFormatString());
      assertTrue(intervalXYToolTipGenerator1.equals((Object)intervalXYToolTipGenerator0));
      assertNotSame(intervalXYToolTipGenerator0, intervalXYToolTipGenerator1);
      assertNotSame(intervalXYToolTipGenerator1, intervalXYToolTipGenerator0);
      
      boolean boolean1 = intervalXYToolTipGenerator0.equals(intervalXYToolTipGenerator1);
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals("null", intervalXYToolTipGenerator1.getNullYString());
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator1.getFormatString());
      assertTrue(intervalXYToolTipGenerator0.equals((Object)intervalXYToolTipGenerator1));
      assertTrue(intervalXYToolTipGenerator1.equals((Object)intervalXYToolTipGenerator0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(intervalXYToolTipGenerator0, intervalXYToolTipGenerator1);
      assertNotSame(intervalXYToolTipGenerator1, intervalXYToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertTrue(timeTableXYDataset0.getNotify());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = (-463);
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.createItemArray(timeTableXYDataset0, (-463), (-843));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "U?)WJ";
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.getNotify());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 6;
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertNotNull(decimalFormat0);
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(categoryTableXYDataset0, 1, (-111));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      
      XYDataset xYDataset0 = null;
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      String string0 = "";
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getInstance();
      assertNotNull(simpleDateFormat0);
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
      
      IntervalXYToolTipGenerator intervalXYToolTipGenerator1 = new IntervalXYToolTipGenerator("", simpleDateFormat0, decimalFormat0);
      assertNotNull(intervalXYToolTipGenerator1);
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("", intervalXYToolTipGenerator1.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator1.getNullYString());
      assertFalse(intervalXYToolTipGenerator1.equals((Object)intervalXYToolTipGenerator0));
      
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator1.generateToolTip(xYSeriesCollection0, 330, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("", (DateFormat) null, (DateFormat) null);
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      
      IntervalXYToolTipGenerator intervalXYToolTipGenerator1 = (IntervalXYToolTipGenerator)intervalXYToolTipGenerator0.clone();
      assertNotNull(intervalXYToolTipGenerator1);
      assertEquals("", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals("", intervalXYToolTipGenerator1.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator1.getNullYString());
      assertTrue(intervalXYToolTipGenerator1.equals((Object)intervalXYToolTipGenerator0));
      assertNotSame(intervalXYToolTipGenerator0, intervalXYToolTipGenerator1);
      assertNotSame(intervalXYToolTipGenerator1, intervalXYToolTipGenerator0);
      
      double double0 = (-78.744033088176);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator1.createItemArray(defaultWindDataset0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: 0
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      
      IntervalXYToolTipGenerator intervalXYToolTipGenerator1 = (IntervalXYToolTipGenerator)intervalXYToolTipGenerator0.clone();
      assertNotNull(intervalXYToolTipGenerator1);
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals("null", intervalXYToolTipGenerator1.getNullYString());
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator1.getFormatString());
      assertTrue(intervalXYToolTipGenerator1.equals((Object)intervalXYToolTipGenerator0));
      assertNotSame(intervalXYToolTipGenerator0, intervalXYToolTipGenerator1);
      assertNotSame(intervalXYToolTipGenerator1, intervalXYToolTipGenerator0);
      
      boolean boolean0 = intervalXYToolTipGenerator0.equals(intervalXYToolTipGenerator1);
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals("null", intervalXYToolTipGenerator1.getNullYString());
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator1.getFormatString());
      assertTrue(intervalXYToolTipGenerator0.equals((Object)intervalXYToolTipGenerator1));
      assertTrue(intervalXYToolTipGenerator1.equals((Object)intervalXYToolTipGenerator0));
      assertTrue(boolean0);
      assertNotSame(intervalXYToolTipGenerator0, intervalXYToolTipGenerator1);
      assertNotSame(intervalXYToolTipGenerator1, intervalXYToolTipGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{0}: ({1} - {2}), ({5} - {6})").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      String string0 = intervalXYToolTipGenerator0.generateToolTip(xYDataset0, 0, 0);
      assertNotNull(string0);
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertTrue(intervalXYToolTipGenerator0.equals((Object)intervalXYToolTipGenerator1));
      assertNotSame(intervalXYToolTipGenerator0, intervalXYToolTipGenerator1);
      
      IntervalXYToolTipGenerator intervalXYToolTipGenerator2 = (IntervalXYToolTipGenerator)intervalXYToolTipGenerator0.clone();
      assertNotNull(intervalXYToolTipGenerator2);
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals("null", intervalXYToolTipGenerator2.getNullYString());
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator2.getFormatString());
      assertTrue(intervalXYToolTipGenerator0.equals((Object)intervalXYToolTipGenerator1));
      assertTrue(intervalXYToolTipGenerator2.equals((Object)intervalXYToolTipGenerator1));
      assertTrue(intervalXYToolTipGenerator2.equals((Object)intervalXYToolTipGenerator0));
      assertNotSame(intervalXYToolTipGenerator0, intervalXYToolTipGenerator2);
      assertNotSame(intervalXYToolTipGenerator0, intervalXYToolTipGenerator1);
      assertNotSame(intervalXYToolTipGenerator2, intervalXYToolTipGenerator0);
      assertNotSame(intervalXYToolTipGenerator2, intervalXYToolTipGenerator1);
      
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset1).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(xYDataset1, 1654, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("b", numberFormat0, dateFormat0);
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals("b", intervalXYToolTipGenerator0.getFormatString());
      
      NumberFormat numberFormat1 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn("b").when(numberFormat1).clone();
      String string0 = "";
      DateFormat dateFormat1 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator1 = new IntervalXYToolTipGenerator("", dateFormat1, dateFormat1);
      assertNotNull(intervalXYToolTipGenerator1);
      assertEquals("null", intervalXYToolTipGenerator1.getNullYString());
      assertEquals("", intervalXYToolTipGenerator1.getFormatString());
      assertFalse(intervalXYToolTipGenerator1.equals((Object)intervalXYToolTipGenerator0));
      
      DateFormat dateFormat2 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator2 = new IntervalXYToolTipGenerator("b", numberFormat1, dateFormat2);
      assertNotNull(intervalXYToolTipGenerator2);
      assertEquals("b", intervalXYToolTipGenerator2.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator2.getNullYString());
      assertFalse(intervalXYToolTipGenerator2.equals((Object)intervalXYToolTipGenerator0));
      assertFalse(intervalXYToolTipGenerator2.equals((Object)intervalXYToolTipGenerator1));
      
      boolean boolean0 = intervalXYToolTipGenerator2.equals("b");
      assertEquals("b", intervalXYToolTipGenerator2.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator2.getNullYString());
      assertFalse(intervalXYToolTipGenerator2.equals((Object)intervalXYToolTipGenerator0));
      assertFalse(intervalXYToolTipGenerator2.equals((Object)intervalXYToolTipGenerator1));
      assertFalse(boolean0);
      assertNotSame(intervalXYToolTipGenerator2, intervalXYToolTipGenerator0);
      assertNotSame(intervalXYToolTipGenerator2, intervalXYToolTipGenerator1);
      
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator2.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.text.NumberFormat
         //
         verifyException("org.jfree.chart.labels.AbstractXYItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((StringBuffer) null).when(dateFormat0).format(any(java.util.Date.class) , any(java.lang.StringBuffer.class) , any(java.text.FieldPosition.class));
      DateFormat dateFormat1 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("|/8S&MsfeIy.lMlDH", dateFormat0, dateFormat1);
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("|/8S&MsfeIy.lMlDH", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{0}: ({1} - {2}), ({5} - {6})").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(xYDataset0, 414, 414);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = null;
      try {
        intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator((String) null, numberFormat0, dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = null;
      try {
        intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator((String) null, dateFormat0, dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = null;
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = null;
      try {
        intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator((String) null, dateFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("VhJ`cSY#m>\"co~F\u0001>*", dateFormat0, numberFormat0);
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals("VhJ`cSY#m>\"co~F\u0001>*", intervalXYToolTipGenerator0.getFormatString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("_(dE}IZEIye7e.gqK", numberFormat0, numberFormat0);
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals("_(dE}IZEIye7e.gqK", intervalXYToolTipGenerator0.getFormatString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("", numberFormat0, dateFormat0);
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 127;
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset2).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(xYDataset2, 127, 127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      
      boolean boolean0 = intervalXYToolTipGenerator0.equals("{0}: ({1} - {2}), ({5} - {6})");
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertFalse(boolean0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator1 = new IntervalXYToolTipGenerator("{0}: ({1} - {2}), ({5} - {6})", numberFormat0, dateFormat0);
      assertNotNull(intervalXYToolTipGenerator1);
      assertEquals("null", intervalXYToolTipGenerator1.getNullYString());
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator1.getFormatString());
      assertFalse(intervalXYToolTipGenerator1.equals((Object)intervalXYToolTipGenerator0));
      
      boolean boolean1 = intervalXYToolTipGenerator0.equals(intervalXYToolTipGenerator1);
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      assertEquals("null", intervalXYToolTipGenerator1.getNullYString());
      assertEquals("{0}: ({1} - {2}), ({5} - {6})", intervalXYToolTipGenerator1.getFormatString());
      assertFalse(intervalXYToolTipGenerator0.equals((Object)intervalXYToolTipGenerator1));
      assertFalse(intervalXYToolTipGenerator1.equals((Object)intervalXYToolTipGenerator0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(intervalXYToolTipGenerator0, intervalXYToolTipGenerator1);
      assertNotSame(intervalXYToolTipGenerator1, intervalXYToolTipGenerator0);
      
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.createItemArray(xYDataset0, 1977, 423);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = null;
      try {
        intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator((String) null, numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#.##0", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("", decimalFormat0, (DateFormat) null);
      assertNotNull(intervalXYToolTipGenerator0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#.##0", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", intervalXYToolTipGenerator0.getFormatString());
      assertEquals("null", intervalXYToolTipGenerator0.getNullYString());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, (-1.0));
      assertNotNull(xYBarDataset0);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals((-1.0), xYBarDataset0.getBarWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(xYBarDataset0, (-1136), (-1136));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(dateFormat0).clone();
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("{0}: ({1} - {2}), ({5} - {6})", dateFormat0, dateFormat0);
      Object object0 = intervalXYToolTipGenerator0.clone();
      intervalXYToolTipGenerator0.equals(object0);
      intervalXYToolTipGenerator0.equals("{0}: ({1} - {2}), ({5} - {6})");
      intervalXYToolTipGenerator0.equals(object0);
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      int int0 = 1;
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(xYDataset0, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = null;
      try {
        intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("Txo", numberFormat0, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'yFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = (-642);
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{0}: ({1} - {2}), ({5} - {6})").when(xYDataset1).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset1).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset1).getYValue(anyInt() , anyInt());
      intervalXYToolTipGenerator0.createItemArray(xYDataset1, (-915), 0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(defaultXYZDataset0, (-642), (-915));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{0}: ({1} - {2}), ({5} - {6})").when(xYDataset1).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset1).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset1).getYValue(anyInt() , anyInt());
      int int0 = 1;
      intervalXYToolTipGenerator0.createItemArray(xYDataset1, 1, 127);
      intervalXYToolTipGenerator0.equals((Object) null);
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset2).getSeriesKey(anyInt());
      Object object0 = intervalXYToolTipGenerator0.clone();
      intervalXYToolTipGenerator0.equals(object0);
      int int1 = (-625);
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.createItemArray(xYDataset2, 0, (-625));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      intervalXYToolTipGenerator0.clone();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = (-862);
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset1).getSeriesKey(anyInt());
      int int1 = 2773;
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(xYDataset1, (-862), 2773);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      int int0 = 0;
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.generateToolTip(xYDataset0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "series";
      DateFormat dateFormat0 = null;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn(defaultTableXYDataset0).when(numberFormat0).clone();
      IntervalXYToolTipGenerator intervalXYToolTipGenerator0 = new IntervalXYToolTipGenerator("series", (DateFormat) null, numberFormat0);
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        intervalXYToolTipGenerator0.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.text.NumberFormat
         //
         verifyException("org.jfree.chart.labels.AbstractXYItemLabelGenerator", e);
      }
  }
}
