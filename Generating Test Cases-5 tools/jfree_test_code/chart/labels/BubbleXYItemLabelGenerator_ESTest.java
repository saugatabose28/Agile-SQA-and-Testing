/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:00:25 GMT 2023
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jfree.chart.labels.BubbleXYItemLabelGenerator;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.XYZDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BubbleXYItemLabelGenerator_ESTest extends BubbleXYItemLabelGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertNotNull(decimalFormat0);
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      
      Locale locale0 = new Locale("m>-t@Ge|", "}=pi/ahb@N", "}=pi/ahb@N");
      assertNotNull(locale0);
      assertEquals("m>-t@ge|_}=PI/AHB@N_}=pi/ahb@N", locale0.toString());
      assertEquals("}=PI/AHB@N", locale0.getCountry());
      assertEquals("m>-t@ge|", locale0.getLanguage());
      assertEquals("}=pi/ahb@N", locale0.getVariant());
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertNotNull(decimalFormat1);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertNotSame(decimalFormat1, decimalFormat0);
      assertEquals("m>-t@ge|_}=PI/AHB@N_}=pi/ahb@N", locale0.toString());
      assertEquals("}=PI/AHB@N", locale0.getCountry());
      assertEquals("m>-t@ge|", locale0.getLanguage());
      assertEquals("}=pi/ahb@N", locale0.getVariant());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(100, decimalFormat1.getMultiplier());
      assertEquals("#,##0%", decimalFormat1.toPattern());
      assertEquals("#,##0%", decimalFormat1.toLocalizedPattern());
      assertEquals("%", decimalFormat1.getPositiveSuffix());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("%", decimalFormat1.getNegativeSuffix());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals("", decimalFormat1.getPositivePrefix());
      
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator("m>-t@Ge|", decimalFormat0, decimalFormat0, decimalFormat1);
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("m>-t@ge|_}=PI/AHB@N_}=pi/ahb@N", locale0.toString());
      assertEquals("}=PI/AHB@N", locale0.getCountry());
      assertEquals("m>-t@ge|", locale0.getLanguage());
      assertEquals("}=pi/ahb@N", locale0.getVariant());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(100, decimalFormat1.getMultiplier());
      assertEquals("#,##0%", decimalFormat1.toPattern());
      assertEquals("#,##0%", decimalFormat1.toLocalizedPattern());
      assertEquals("%", decimalFormat1.getPositiveSuffix());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("%", decimalFormat1.getNegativeSuffix());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals("m>-t@Ge|", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.createItemArray(defaultXYZDataset0, 2017, 2017);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator("org.jfree.data.general.SeriesChangeEvent", dateFormat0, dateFormat0, dateFormat0);
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("org.jfree.data.general.SeriesChangeEvent", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = (-4);
      int int1 = 0;
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int2 = 3748;
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3748;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3748;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-4);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("org.jfree.data.general.SeriesChangeEvent", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {3748.0, 0.0, 0.0, 3748.0, 0.0, (-4.0)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.generateLabel(defaultHighLowDataset0, 4, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(913, 2162, year0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2161, dynamicTimeSeriesCollection0.getNewestIndex());
      assertTrue(dynamicTimeSeriesCollection0.getNotify());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.generateLabelString(dynamicTimeSeriesCollection0, 9999, (-1623));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9999
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      DateFormat dateFormat1 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn("{3}").when(dateFormat1).toString();
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator("`", dateFormat0, dateFormat1, dateFormat1);
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("`", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      
      DateFormat dateFormat2 = bubbleXYItemLabelGenerator0.getZDateFormat();
      assertNotNull(dateFormat2);
      assertFalse(dateFormat2.equals((Object)dateFormat0));
      assertNotSame(dateFormat2, dateFormat0);
      assertSame(dateFormat2, dateFormat1);
      assertEquals("`", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertFalse(dateFormat2.isLenient());
      
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      int int0 = (-1062);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertTrue(xYSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.generateLabel(xYSeriesCollection0, (-4867), (-1062));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      bubbleXYItemLabelGenerator0.hashCode();
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)bubbleXYItemLabelGenerator0.getZFormat();
      assertNotNull(decimalFormat0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{3}").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      int int0 = (-1375);
      Object[] objectArray0 = bubbleXYItemLabelGenerator0.createItemArray(xYDataset0, 6, (-1375));
      assertNotNull(objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.generateLabelString(timePeriodValuesCollection0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{3}").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      int int0 = (-197);
      String string0 = bubbleXYItemLabelGenerator0.generateLabel(xYDataset0, (-197), (-197));
      assertEquals("{3}", string0);
      assertNotNull(string0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset1).getSeriesKey(anyInt());
      int int1 = bubbleXYItemLabelGenerator0.hashCode();
      assertFalse(int1 == int0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.generateLabelString(xYDataset1, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{3}").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      bubbleXYItemLabelGenerator0.hashCode();
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      String string0 = bubbleXYItemLabelGenerator0.generateLabelString(xYDataset0, 0, 0);
      assertEquals("{3}", string0);
      assertNotNull(string0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.generateLabelString((XYDataset) null, 2, 3439);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.AbstractXYItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      DateFormat dateFormat1 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn("`").when(dateFormat1).toString();
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator("`", dateFormat0, dateFormat1, dateFormat1);
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("`", bubbleXYItemLabelGenerator0.getFormatString());
      
      DateFormat dateFormat2 = bubbleXYItemLabelGenerator0.getZDateFormat();
      assertNotNull(dateFormat2);
      assertFalse(dateFormat2.equals((Object)dateFormat0));
      assertSame(dateFormat2, dateFormat1);
      assertNotSame(dateFormat2, dateFormat0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("`", bubbleXYItemLabelGenerator0.getFormatString());
      assertFalse(dateFormat2.isLenient());
      
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      doReturn("`").when(xYZDataset0).getSeriesKey(anyInt());
      doReturn((Number) null).when(xYZDataset0).getX(anyInt() , anyInt());
      int int0 = (-1064);
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.createItemArray(xYZDataset0, (-1064), (-1064));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(dateFormat0).clone();
      DateFormat dateFormat1 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator1 = new BubbleXYItemLabelGenerator("{3}", dateFormat0, dateFormat0, dateFormat1);
      assertNotNull(bubbleXYItemLabelGenerator1);
      assertFalse(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator0));
      assertEquals("null", bubbleXYItemLabelGenerator1.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator1.getFormatString());
      
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator2 = (BubbleXYItemLabelGenerator)bubbleXYItemLabelGenerator1.clone();
      assertNotNull(bubbleXYItemLabelGenerator2);
      assertFalse(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator0));
      assertFalse(bubbleXYItemLabelGenerator2.equals((Object)bubbleXYItemLabelGenerator1));
      assertFalse(bubbleXYItemLabelGenerator2.equals((Object)bubbleXYItemLabelGenerator0));
      assertNotSame(bubbleXYItemLabelGenerator1, bubbleXYItemLabelGenerator2);
      assertNotSame(bubbleXYItemLabelGenerator1, bubbleXYItemLabelGenerator0);
      assertNotSame(bubbleXYItemLabelGenerator2, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator2, bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator1.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator1.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator2.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator2.getFormatString());
      
      boolean boolean0 = bubbleXYItemLabelGenerator0.equals(bubbleXYItemLabelGenerator2);
      assertFalse(boolean0);
      assertFalse(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator2));
      assertFalse(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator1));
      assertFalse(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator2));
      assertFalse(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator0));
      assertFalse(bubbleXYItemLabelGenerator2.equals((Object)bubbleXYItemLabelGenerator1));
      assertFalse(bubbleXYItemLabelGenerator2.equals((Object)bubbleXYItemLabelGenerator0));
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator2);
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator1, bubbleXYItemLabelGenerator2);
      assertNotSame(bubbleXYItemLabelGenerator1, bubbleXYItemLabelGenerator0);
      assertNotSame(bubbleXYItemLabelGenerator2, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator2, bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator1.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator1.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator2.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator2.getFormatString());
      
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYZDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.createItemArray(xYZDataset0, (-413), (-1280));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator("", dateFormat0, dateFormat0, dateFormat0);
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("", bubbleXYItemLabelGenerator0.getFormatString());
      
      bubbleXYItemLabelGenerator0.hashCode();
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("", bubbleXYItemLabelGenerator0.getFormatString());
      
      NumberFormat numberFormat0 = bubbleXYItemLabelGenerator0.getZFormat();
      assertNull(numberFormat0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("", bubbleXYItemLabelGenerator0.getFormatString());
      
      NumberFormat numberFormat1 = bubbleXYItemLabelGenerator0.getZFormat();
      assertNull(numberFormat1);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("", bubbleXYItemLabelGenerator0.getFormatString());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.generateLabel(xYDataset0, 1877, 1877);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      bubbleXYItemLabelGenerator0.hashCode();
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      DateFormat dateFormat0 = bubbleXYItemLabelGenerator0.getZDateFormat();
      assertNull(dateFormat0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      bubbleXYItemLabelGenerator0.hashCode();
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = null;
      try {
        bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator("", (NumberFormat) null, (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "org.jfree.chart.labels.BubbleXYItemLabelGenerator";
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator("org.jfree.chart.labels.BubbleXYItemLabelGenerator", numberFormat0, numberFormat0, numberFormat0);
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("org.jfree.chart.labels.BubbleXYItemLabelGenerator", bubbleXYItemLabelGenerator0.getFormatString());
      
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYZDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.createItemArray(xYZDataset0, 1654, 1654);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(numberFormat0).clone();
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator("", numberFormat0, numberFormat0, numberFormat0);
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("", bubbleXYItemLabelGenerator0.getFormatString());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      int int0 = 0;
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator1 = (BubbleXYItemLabelGenerator)bubbleXYItemLabelGenerator0.clone();
      assertNotNull(bubbleXYItemLabelGenerator1);
      assertFalse(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator0));
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator1, bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("", bubbleXYItemLabelGenerator1.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator1.getNullYString());
      
      boolean boolean0 = bubbleXYItemLabelGenerator0.equals(bubbleXYItemLabelGenerator1);
      assertFalse(boolean0);
      assertFalse(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator1));
      assertFalse(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator0));
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator1, bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("", bubbleXYItemLabelGenerator1.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator1.getNullYString());
      
      int int1 = (-984);
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.generateLabel(xYDataset0, 0, (-984));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = null;
      try {
        bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator("", (DateFormat) null, (DateFormat) null, (DateFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      String string0 = "";
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.generateLabelString(xYDataset0, (-637), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator("*/s5qqA%Kd0%0", dateFormat0, dateFormat0, dateFormat0);
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("*/s5qqA%Kd0%0", bubbleXYItemLabelGenerator0.getFormatString());
      
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator1 = new BubbleXYItemLabelGenerator("", numberFormat0, numberFormat0, numberFormat0);
      assertNotNull(bubbleXYItemLabelGenerator1);
      assertFalse(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator0));
      assertEquals("", bubbleXYItemLabelGenerator1.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator1.getNullYString());
      
      boolean boolean0 = bubbleXYItemLabelGenerator0.equals(bubbleXYItemLabelGenerator1);
      assertFalse(boolean0);
      assertFalse(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator1));
      assertFalse(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator0));
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator1, bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("*/s5qqA%Kd0%0", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("", bubbleXYItemLabelGenerator1.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator1.getNullYString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      bubbleXYItemLabelGenerator0.hashCode();
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      XYZDataset xYZDataset0 = null;
      int int0 = (-4003);
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.generateLabel((XYDataset) null, (-4003), (-1188));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.AbstractXYItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator1 = (BubbleXYItemLabelGenerator)bubbleXYItemLabelGenerator0.clone();
      assertNotNull(bubbleXYItemLabelGenerator1);
      assertTrue(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator0));
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator1, bubbleXYItemLabelGenerator0);
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator1.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator1.getNullYString());
      
      boolean boolean0 = bubbleXYItemLabelGenerator0.equals(bubbleXYItemLabelGenerator1);
      assertTrue(boolean0);
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator1));
      assertTrue(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator0));
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator1, bubbleXYItemLabelGenerator0);
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator1.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator1.getNullYString());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.generateLabelString(xYDataset0, 0, 2381);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)bubbleXYItemLabelGenerator0.getZFormat();
      assertNotNull(decimalFormat0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      
      boolean boolean0 = bubbleXYItemLabelGenerator0.equals("{3}");
      assertFalse(boolean0);
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      assertNotNull(bubbleXYItemLabelGenerator0);
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator1 = (BubbleXYItemLabelGenerator)bubbleXYItemLabelGenerator0.clone();
      assertNotNull(bubbleXYItemLabelGenerator1);
      assertTrue(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator0));
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator1, bubbleXYItemLabelGenerator0);
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("null", bubbleXYItemLabelGenerator1.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator1.getFormatString());
      
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator2 = new BubbleXYItemLabelGenerator();
      assertNotNull(bubbleXYItemLabelGenerator2);
      assertTrue(bubbleXYItemLabelGenerator2.equals((Object)bubbleXYItemLabelGenerator1));
      assertTrue(bubbleXYItemLabelGenerator2.equals((Object)bubbleXYItemLabelGenerator0));
      assertEquals("{3}", bubbleXYItemLabelGenerator2.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator2.getNullYString());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{3}").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      bubbleXYItemLabelGenerator0.hashCode();
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator1));
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator2));
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator2);
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator1);
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      
      int int0 = (-1388);
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator3 = (BubbleXYItemLabelGenerator)bubbleXYItemLabelGenerator0.clone();
      assertNotNull(bubbleXYItemLabelGenerator3);
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator1));
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator2));
      assertTrue(bubbleXYItemLabelGenerator3.equals((Object)bubbleXYItemLabelGenerator2));
      assertTrue(bubbleXYItemLabelGenerator3.equals((Object)bubbleXYItemLabelGenerator0));
      assertTrue(bubbleXYItemLabelGenerator3.equals((Object)bubbleXYItemLabelGenerator1));
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator2);
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator3);
      assertNotSame(bubbleXYItemLabelGenerator3, bubbleXYItemLabelGenerator2);
      assertNotSame(bubbleXYItemLabelGenerator3, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator3, bubbleXYItemLabelGenerator0);
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("null", bubbleXYItemLabelGenerator3.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator3.getFormatString());
      
      boolean boolean0 = bubbleXYItemLabelGenerator3.equals(bubbleXYItemLabelGenerator1);
      assertTrue(boolean0);
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator1));
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator3));
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator2));
      assertTrue(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator2));
      assertTrue(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator0));
      assertTrue(bubbleXYItemLabelGenerator1.equals((Object)bubbleXYItemLabelGenerator3));
      assertTrue(bubbleXYItemLabelGenerator3.equals((Object)bubbleXYItemLabelGenerator2));
      assertTrue(bubbleXYItemLabelGenerator3.equals((Object)bubbleXYItemLabelGenerator0));
      assertTrue(bubbleXYItemLabelGenerator3.equals((Object)bubbleXYItemLabelGenerator1));
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator2);
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator3);
      assertNotSame(bubbleXYItemLabelGenerator1, bubbleXYItemLabelGenerator0);
      assertNotSame(bubbleXYItemLabelGenerator1, bubbleXYItemLabelGenerator3);
      assertNotSame(bubbleXYItemLabelGenerator1, bubbleXYItemLabelGenerator2);
      assertNotSame(bubbleXYItemLabelGenerator3, bubbleXYItemLabelGenerator2);
      assertNotSame(bubbleXYItemLabelGenerator3, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator3, bubbleXYItemLabelGenerator0);
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("null", bubbleXYItemLabelGenerator1.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator1.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator3.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator3.getFormatString());
      
      DateFormat dateFormat0 = bubbleXYItemLabelGenerator0.getZDateFormat();
      assertNull(dateFormat0);
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator1));
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator3));
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator2));
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator2);
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator3);
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      
      String string0 = bubbleXYItemLabelGenerator2.generateLabel(xYDataset0, 2, (-1388));
      assertEquals("{3}", string0);
      assertNotNull(string0);
      assertTrue(bubbleXYItemLabelGenerator2.equals((Object)bubbleXYItemLabelGenerator3));
      assertTrue(bubbleXYItemLabelGenerator2.equals((Object)bubbleXYItemLabelGenerator1));
      assertTrue(bubbleXYItemLabelGenerator2.equals((Object)bubbleXYItemLabelGenerator0));
      assertNotSame(bubbleXYItemLabelGenerator2, bubbleXYItemLabelGenerator0);
      assertNotSame(bubbleXYItemLabelGenerator2, bubbleXYItemLabelGenerator3);
      assertNotSame(bubbleXYItemLabelGenerator2, bubbleXYItemLabelGenerator1);
      assertEquals("{3}", bubbleXYItemLabelGenerator2.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator2.getNullYString());
      
      boolean boolean1 = bubbleXYItemLabelGenerator0.equals(bubbleXYItemLabelGenerator2);
      assertTrue(boolean1);
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator1));
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator3));
      assertTrue(bubbleXYItemLabelGenerator0.equals((Object)bubbleXYItemLabelGenerator2));
      assertTrue(bubbleXYItemLabelGenerator2.equals((Object)bubbleXYItemLabelGenerator3));
      assertTrue(bubbleXYItemLabelGenerator2.equals((Object)bubbleXYItemLabelGenerator1));
      assertTrue(bubbleXYItemLabelGenerator2.equals((Object)bubbleXYItemLabelGenerator0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator2);
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator1);
      assertNotSame(bubbleXYItemLabelGenerator0, bubbleXYItemLabelGenerator3);
      assertNotSame(bubbleXYItemLabelGenerator2, bubbleXYItemLabelGenerator0);
      assertNotSame(bubbleXYItemLabelGenerator2, bubbleXYItemLabelGenerator3);
      assertNotSame(bubbleXYItemLabelGenerator2, bubbleXYItemLabelGenerator1);
      assertEquals("{3}", bubbleXYItemLabelGenerator0.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator0.getNullYString());
      assertEquals("{3}", bubbleXYItemLabelGenerator2.getFormatString());
      assertEquals("null", bubbleXYItemLabelGenerator2.getNullYString());
      
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset1).getSeriesKey(anyInt());
      int int1 = 3;
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.createItemArray(xYDataset1, 3, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((StringBuffer) null).when(numberFormat0).format(any() , any(java.lang.StringBuffer.class) , any(java.text.FieldPosition.class));
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator("", numberFormat0, numberFormat0, numberFormat0);
      bubbleXYItemLabelGenerator0.hashCode();
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      doReturn("").when(xYZDataset0).getSeriesKey(anyInt());
      doReturn((Number) null).when(xYZDataset0).getX(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.createItemArray(xYZDataset0, (-519), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      bubbleXYItemLabelGenerator0.hashCode();
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.generateLabelString((XYDataset) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.AbstractXYItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator("Duplicate key2", dateFormat0, dateFormat0, dateFormat0);
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      bubbleXYItemLabelGenerator0.hashCode();
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYZDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.createItemArray(xYZDataset0, 3307, 3307);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      Object object0 = bubbleXYItemLabelGenerator0.clone();
      bubbleXYItemLabelGenerator0.equals(object0);
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{3}").when(xYZDataset0).getSeriesKey(anyInt());
      doReturn((Number) null).when(xYZDataset0).getX(anyInt() , anyInt());
      int int0 = 4;
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.createItemArray(xYZDataset0, 4, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator("{3}", numberFormat0, numberFormat0, numberFormat0);
      bubbleXYItemLabelGenerator0.hashCode();
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis(420L);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator0 = new BubbleXYItemLabelGenerator();
      String string0 = "aPslp.P+D=u^p)X@k~";
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      BubbleXYItemLabelGenerator bubbleXYItemLabelGenerator1 = new BubbleXYItemLabelGenerator("aPslp.P+D=u^p)X@k~", dateFormat0, dateFormat0, dateFormat0);
      bubbleXYItemLabelGenerator1.equals("aPslp.P+D=u^p)X@k~");
      bubbleXYItemLabelGenerator0.equals(bubbleXYItemLabelGenerator1);
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("aPslp.P+D=u^p)X@k~").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      bubbleXYItemLabelGenerator0.generateLabel(xYDataset0, 0, 0);
      bubbleXYItemLabelGenerator0.equals("{3}");
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset1).getSeriesKey(anyInt());
      int int0 = (-3181);
      // Undeclared exception!
      try { 
        bubbleXYItemLabelGenerator0.generateLabel(xYDataset1, (-3181), 223);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
