/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:57:19 GMT 2023
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.print.attribute.standard.JobHoldUntil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.labels.AbstractXYItemLabelGenerator;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractXYItemLabelGenerator_ESTest extends AbstractXYItemLabelGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("NDJ9$M9=rh\u0001").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(1.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(1537.653).when(xYDataset0).getYValue(anyInt() , anyInt());
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getTimeInstance();
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertNotNull(simpleDateFormat0);
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("yFormat", simpleDateFormat0, simpleDateFormat0);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("yFormat", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      Object[] objectArray0 = abstractXYItemLabelGenerator0.createItemArray(xYDataset0, 5, 5);
      assertEquals(3, objectArray0.length);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("yFormat", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator();
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      String string0 = abstractXYItemLabelGenerator0.getFormatString();
      assertEquals("{2}", string0);
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(string0);
      
      String string1 = "^";
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("^").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      Object[] objectArray0 = abstractXYItemLabelGenerator0.createItemArray(xYDataset0, (-1376), (-1376));
      assertEquals(3, objectArray0.length);
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(objectArray0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("b9S8\"@/V3`L");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(timeTableXYDataset0.getNotify());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.createItemArray(timeTableXYDataset0, (-2071037449), (-1376));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateTimeInstance();
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("#&=~`N>", simpleDateFormat0, decimalFormat0);
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#&=~`N>", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      SimpleDateFormat simpleDateFormat1 = (SimpleDateFormat)abstractXYItemLabelGenerator0.getXDateFormat();
      assertSame(simpleDateFormat0, simpleDateFormat1);
      assertSame(simpleDateFormat1, simpleDateFormat0);
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#&=~`N>", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertTrue(simpleDateFormat1.isLenient());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat1.toPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat1.toLocalizedPattern());
      assertNotNull(simpleDateFormat1);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("#&=~`N>").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      String string0 = abstractXYItemLabelGenerator0.generateLabelString(xYDataset0, (-3035), (-3035));
      assertSame(simpleDateFormat0, simpleDateFormat1);
      assertEquals("#&=~`N>", string0);
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#&=~`N>", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(string0);
      
      DecimalFormat decimalFormat1 = (DecimalFormat)abstractXYItemLabelGenerator0.getXFormat();
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertNotSame(decimalFormat1, decimalFormat0);
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#&=~`N>", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertNotNull(decimalFormat1);
      
      boolean boolean0 = abstractXYItemLabelGenerator0.equals(simpleDateFormat1);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertSame(simpleDateFormat1, simpleDateFormat0);
      assertFalse(boolean0);
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#&=~`N>", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertTrue(simpleDateFormat1.isLenient());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat1.toPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat1.toLocalizedPattern());
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator1 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertTrue(abstractXYItemLabelGenerator1.equals((Object)abstractXYItemLabelGenerator0));
      assertSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator1, abstractXYItemLabelGenerator0);
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#&=~`N>", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("null", abstractXYItemLabelGenerator1.getNullYString());
      assertEquals("#&=~`N>", abstractXYItemLabelGenerator1.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator1);
      
      boolean boolean1 = abstractXYItemLabelGenerator0.equals(decimalFormat1);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertTrue(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertTrue(boolean1 == boolean0);
      assertSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(decimalFormat1, decimalFormat0);
      assertFalse(boolean1);
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#&=~`N>", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getPositivePrefix());
      
      DecimalFormat decimalFormat2 = (DecimalFormat)abstractXYItemLabelGenerator0.getXFormat();
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertTrue(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(decimalFormat2.equals((Object)decimalFormat0));
      assertSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(decimalFormat0, decimalFormat2);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertSame(decimalFormat2, decimalFormat1);
      assertNotSame(decimalFormat2, decimalFormat0);
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#&=~`N>", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("", decimalFormat2.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat2.toLocalizedPattern());
      assertFalse(decimalFormat2.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat2.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat2.getRoundingMode());
      assertEquals(0, decimalFormat2.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat2.toPattern());
      assertEquals(3, decimalFormat2.getGroupingSize());
      assertEquals(1, decimalFormat2.getMinimumIntegerDigits());
      assertEquals("", decimalFormat2.getPositiveSuffix());
      assertEquals(1, decimalFormat2.getMultiplier());
      assertEquals("-", decimalFormat2.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat2.getMaximumIntegerDigits());
      assertFalse(decimalFormat2.isParseIntegerOnly());
      assertTrue(decimalFormat2.isGroupingUsed());
      assertEquals("", decimalFormat2.getPositivePrefix());
      assertEquals(3, decimalFormat2.getMaximumFractionDigits());
      assertNotNull(decimalFormat2);
      
      DecimalFormat decimalFormat3 = (DecimalFormat)abstractXYItemLabelGenerator0.getYFormat();
      assertFalse(decimalFormat0.equals((Object)decimalFormat2));
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertTrue(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(decimalFormat3.equals((Object)decimalFormat2));
      assertFalse(decimalFormat3.equals((Object)decimalFormat1));
      assertSame(simpleDateFormat0, simpleDateFormat1);
      assertNotSame(decimalFormat0, decimalFormat2);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertSame(decimalFormat0, decimalFormat3);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertSame(decimalFormat3, decimalFormat0);
      assertNotSame(decimalFormat3, decimalFormat2);
      assertNotSame(decimalFormat3, decimalFormat1);
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#&=~`N>", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("", decimalFormat3.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat3.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat3.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat3.getNegativePrefix());
      assertEquals(1, decimalFormat3.getMultiplier());
      assertEquals("", decimalFormat3.getPositivePrefix());
      assertEquals("", decimalFormat3.getNegativeSuffix());
      assertEquals(0, decimalFormat3.getMaximumFractionDigits());
      assertFalse(decimalFormat3.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat3.isParseBigDecimal());
      assertTrue(decimalFormat3.isGroupingUsed());
      assertEquals("#,##0", decimalFormat3.toLocalizedPattern());
      assertEquals(3, decimalFormat3.getGroupingSize());
      assertTrue(decimalFormat3.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat3.getRoundingMode());
      assertEquals(0, decimalFormat3.getMinimumFractionDigits());
      assertEquals(1, decimalFormat3.getMinimumIntegerDigits());
      assertNotNull(decimalFormat3);
      
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.generateLabelString((XYDataset) null, (-3035), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.AbstractXYItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator();
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      String string0 = abstractXYItemLabelGenerator0.getFormatString();
      assertEquals("{2}", string0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(string0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("^").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(202008.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn((-277.03266751)).when(xYDataset0).getYValue(anyInt() , anyInt());
      Object[] objectArray0 = abstractXYItemLabelGenerator0.createItemArray(xYDataset0, (-1376), (-1376));
      assertEquals(3, objectArray0.length);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(objectArray0);
      
      boolean boolean0 = abstractXYItemLabelGenerator0.equals("^");
      assertFalse(boolean0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      
      abstractXYItemLabelGenerator0.hashCode();
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator1 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertTrue(abstractXYItemLabelGenerator1.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator1, abstractXYItemLabelGenerator0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("{2}", abstractXYItemLabelGenerator1.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator1.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator1);
      
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator();
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator1 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertTrue(abstractXYItemLabelGenerator1.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator1, abstractXYItemLabelGenerator0);
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator1.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator1.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator1);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertTrue(vectorSeriesCollection0.getNotify());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.generateLabelString(vectorSeriesCollection0, 56, 56);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.VectorSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertNotNull(decimalFormat0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getTimeInstance();
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("7Z`oz.)0", decimalFormat0, simpleDateFormat0);
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("7Z`oz.)0", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      boolean boolean0 = abstractXYItemLabelGenerator0.equals(decimalFormat0);
      assertFalse(boolean0);
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("7Z`oz.)0", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      
      SimpleDateFormat simpleDateFormat1 = (SimpleDateFormat)abstractXYItemLabelGenerator0.getYDateFormat();
      assertSame(simpleDateFormat0, simpleDateFormat1);
      assertSame(simpleDateFormat1, simpleDateFormat0);
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("7Z`oz.)0", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("h:mm:ss a", simpleDateFormat1.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat1.toPattern());
      assertTrue(simpleDateFormat1.isLenient());
      assertNotNull(simpleDateFormat1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn("rH9}R%eAU:ZIx").when(dateFormat0).toString();
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("rH9}R%eAU:ZIx", numberFormat0, dateFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("rH9}R%eAU:ZIx", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      DateFormat dateFormat1 = abstractXYItemLabelGenerator0.getYDateFormat();
      assertSame(dateFormat1, dateFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("rH9}R%eAU:ZIx", abstractXYItemLabelGenerator0.getFormatString());
      assertFalse(dateFormat1.isLenient());
      assertNotNull(dateFormat1);
      
      DateFormat dateFormat2 = abstractXYItemLabelGenerator0.getXDateFormat();
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("rH9}R%eAU:ZIx", abstractXYItemLabelGenerator0.getFormatString());
      assertNull(dateFormat2);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.createItemArray(xYSeriesCollection0, 5039, 5039);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getTimeInstance(0, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("H.mm.ss z", simpleDateFormat0.toPattern());
      assertEquals("H.mm.ss z", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("*", simpleDateFormat0, simpleDateFormat0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("H.mm.ss z", simpleDateFormat0.toPattern());
      assertEquals("H.mm.ss z", simpleDateFormat0.toLocalizedPattern());
      assertEquals("*", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      SimpleDateFormat simpleDateFormat1 = (SimpleDateFormat)abstractXYItemLabelGenerator0.getXDateFormat();
      assertSame(simpleDateFormat0, simpleDateFormat1);
      assertSame(simpleDateFormat1, simpleDateFormat0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("H.mm.ss z", simpleDateFormat0.toPattern());
      assertEquals("H.mm.ss z", simpleDateFormat0.toLocalizedPattern());
      assertEquals("*", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("H.mm.ss z", simpleDateFormat1.toPattern());
      assertEquals("H.mm.ss z", simpleDateFormat1.toLocalizedPattern());
      assertTrue(simpleDateFormat1.isLenient());
      assertNotNull(simpleDateFormat1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator();
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      Object[] objectArray0 = abstractXYItemLabelGenerator0.createItemArray(xYDataset0, 1808, 1808);
      assertEquals(3, objectArray0.length);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(objectArray0);
      
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset1).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.generateLabelString(xYDataset1, 1988, 1988);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((StringBuffer) null).when(dateFormat0).format(any(java.util.Date.class) , any(java.lang.StringBuffer.class) , any(java.text.FieldPosition.class));
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("org.jfree.data.xy.YIntervalSeriesCollection", dateFormat0, numberFormat0);
      assertEquals("org.jfree.data.xy.YIntervalSeriesCollection", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      abstractXYItemLabelGenerator0.hashCode();
      assertEquals("org.jfree.data.xy.YIntervalSeriesCollection", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      
      boolean boolean0 = abstractXYItemLabelGenerator0.equals("QpAC[lFfm_");
      assertFalse(boolean0);
      assertEquals("org.jfree.data.xy.YIntervalSeriesCollection", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("QpAC[lFfm_").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      int int0 = (-1827);
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.createItemArray(xYDataset0, (-1827), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator();
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      Comparable<AbstractXYItemLabelGenerator> comparable0 = (Comparable<AbstractXYItemLabelGenerator>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0).when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator1 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertTrue(abstractXYItemLabelGenerator1.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator1, abstractXYItemLabelGenerator0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator1.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator1.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator1);
      
      boolean boolean0 = abstractXYItemLabelGenerator0.equals(abstractXYItemLabelGenerator1);
      assertTrue(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertTrue(abstractXYItemLabelGenerator1.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator1, abstractXYItemLabelGenerator0);
      assertTrue(boolean0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator1.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator1.getFormatString());
      
      boolean boolean1 = abstractXYItemLabelGenerator0.equals("-V#~\"*!W");
      assertTrue(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertFalse(boolean1);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      
      String string0 = abstractXYItemLabelGenerator0.generateLabelString(xYDataset0, 0, 5269);
      assertTrue(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertEquals("0", string0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(string0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)abstractXYItemLabelGenerator0.getYFormat();
      assertTrue(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertNotNull(decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn("").when(numberFormat0).clone();
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("", numberFormat0, dateFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      String string0 = abstractXYItemLabelGenerator0.getNullYString();
      assertEquals("null", string0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.text.NumberFormat
         //
         verifyException("org.jfree.chart.labels.AbstractXYItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(numberFormat0).clone();
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateFormat0).toString();
      doReturn((Object) null).when(dateFormat0).clone();
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("fbTt#l=;", numberFormat0, dateFormat0);
      assertEquals("fbTt#l=;", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator1 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertFalse(abstractXYItemLabelGenerator1.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator1, abstractXYItemLabelGenerator0);
      assertEquals("fbTt#l=;", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("null", abstractXYItemLabelGenerator1.getNullYString());
      assertEquals("fbTt#l=;", abstractXYItemLabelGenerator1.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator1);
      
      abstractXYItemLabelGenerator0.hashCode();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertEquals("fbTt#l=;", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      
      abstractXYItemLabelGenerator0.hashCode();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertEquals("fbTt#l=;", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      
      DateFormat dateFormat1 = abstractXYItemLabelGenerator0.getYDateFormat();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertSame(dateFormat1, dateFormat0);
      assertEquals("fbTt#l=;", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertFalse(dateFormat1.isLenient());
      assertNotNull(dateFormat1);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)abstractXYItemLabelGenerator0.getYFormat();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertEquals("fbTt#l=;", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      DateFormat dateFormat2 = abstractXYItemLabelGenerator0.getXDateFormat();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertEquals("fbTt#l=;", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNull(dateFormat2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = null;
      try {
        abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator(";r2GRr<", (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = null;
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = null;
      try {
        abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator((String) null, dateFormat0, dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(numberFormat0).clone();
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(dateFormat0).clone();
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("", numberFormat0, dateFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      abstractXYItemLabelGenerator0.hashCode();
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("", abstractXYItemLabelGenerator0.getFormatString());
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator1 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertFalse(abstractXYItemLabelGenerator1.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator1, abstractXYItemLabelGenerator0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("", abstractXYItemLabelGenerator1.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator1.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator1);
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator2 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator0));
      assertTrue(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator0);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator1);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("", abstractXYItemLabelGenerator2.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator2.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator2);
      
      String string0 = abstractXYItemLabelGenerator0.getFormatString();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertEquals("", string0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(string0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.generateLabelString(xYDataset0, 1145, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(numberFormat0).clone();
      NumberFormat numberFormat1 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(numberFormat1).clone();
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("X4q%%1I]6$L<~jz}", numberFormat0, numberFormat1);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("X4q%%1I]6$L<~jz}", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      abstractXYItemLabelGenerator0.hashCode();
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("X4q%%1I]6$L<~jz}", abstractXYItemLabelGenerator0.getFormatString());
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator1 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertFalse(abstractXYItemLabelGenerator1.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator1, abstractXYItemLabelGenerator0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("X4q%%1I]6$L<~jz}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator1.getNullYString());
      assertEquals("X4q%%1I]6$L<~jz}", abstractXYItemLabelGenerator1.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator1);
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator2 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertTrue(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("X4q%%1I]6$L<~jz}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator2.getNullYString());
      assertEquals("X4q%%1I]6$L<~jz}", abstractXYItemLabelGenerator2.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator2);
      
      boolean boolean0 = abstractXYItemLabelGenerator0.equals(abstractXYItemLabelGenerator2);
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertTrue(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator0);
      assertFalse(boolean0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("X4q%%1I]6$L<~jz}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator2.getNullYString());
      assertEquals("X4q%%1I]6$L<~jz}", abstractXYItemLabelGenerator2.getFormatString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(numberFormat0).toString();
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("45y", dateFormat0, numberFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("45y", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      NumberFormat numberFormat1 = abstractXYItemLabelGenerator0.getYFormat();
      assertSame(numberFormat1, numberFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("45y", abstractXYItemLabelGenerator0.getFormatString());
      assertNull(numberFormat1.getRoundingMode());
      assertFalse(numberFormat1.isParseIntegerOnly());
      assertEquals(0, numberFormat1.getMinimumIntegerDigits());
      assertEquals(0, numberFormat1.getMaximumFractionDigits());
      assertEquals(0, numberFormat1.getMaximumIntegerDigits());
      assertFalse(numberFormat1.isGroupingUsed());
      assertEquals(0, numberFormat1.getMinimumFractionDigits());
      assertNotNull(numberFormat1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateFormat0).toString();
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("rH9}R%eAU:ZIx", numberFormat0, dateFormat0);
      assertEquals("rH9}R%eAU:ZIx", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      DateFormat dateFormat1 = abstractXYItemLabelGenerator0.getYDateFormat();
      assertSame(dateFormat1, dateFormat0);
      assertEquals("rH9}R%eAU:ZIx", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertFalse(dateFormat1.isLenient());
      assertNotNull(dateFormat1);
      
      DateFormat dateFormat2 = abstractXYItemLabelGenerator0.getXDateFormat();
      assertEquals("rH9}R%eAU:ZIx", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNull(dateFormat2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("Receiving events from a series that does not belong to this collection.", dateFormat0, dateFormat0);
      assertEquals("Receiving events from a series that does not belong to this collection.", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      String string0 = abstractXYItemLabelGenerator0.getNullYString();
      assertEquals("null", string0);
      assertEquals("Receiving events from a series that does not belong to this collection.", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("", dateFormat0, (DateFormat) null);
      assertEquals("", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      DateFormat dateFormat1 = abstractXYItemLabelGenerator0.getYDateFormat();
      assertEquals("", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNull(dateFormat1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = null;
      try {
        abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator((String) null, numberFormat0, dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator();
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.generateLabelString(xYDataset0, 0, 5269);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("-ylIJvFo,vVz", dateFormat0, dateFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("-ylIJvFo,vVz", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      boolean boolean0 = abstractXYItemLabelGenerator0.equals("-ylIJvFo,vVz");
      assertFalse(boolean0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("-ylIJvFo,vVz", abstractXYItemLabelGenerator0.getFormatString());
      
      String string0 = abstractXYItemLabelGenerator0.getFormatString();
      assertEquals("-ylIJvFo,vVz", string0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("-ylIJvFo,vVz", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(string0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.generateLabelString(xYDataset0, 1067, 1067);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = null;
      try {
        abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator((String) null, dateFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dateFormat0).toString();
      doReturn((Object) null, (Object) null).when(dateFormat0).clone();
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(numberFormat0).clone();
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("nEq87A7f6", dateFormat0, numberFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator1 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertFalse(abstractXYItemLabelGenerator1.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator1, abstractXYItemLabelGenerator0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator1.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator1.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator1);
      
      boolean boolean0 = abstractXYItemLabelGenerator0.equals("(W9%");
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertFalse(boolean0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator0.getFormatString());
      
      boolean boolean1 = abstractXYItemLabelGenerator0.equals(abstractXYItemLabelGenerator1);
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator1.equals((Object)abstractXYItemLabelGenerator0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator1, abstractXYItemLabelGenerator0);
      assertFalse(boolean1);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator1.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator1.getFormatString());
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator2 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertTrue(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator0);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator1);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator2.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator2.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator2);
      
      abstractXYItemLabelGenerator0.hashCode();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator0.getFormatString());
      
      boolean boolean2 = abstractXYItemLabelGenerator0.equals("nEq87A7f6");
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertFalse(boolean2);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator0.getFormatString());
      
      abstractXYItemLabelGenerator0.hashCode();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator0.getFormatString());
      
      String string0 = abstractXYItemLabelGenerator0.getFormatString();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertEquals("nEq87A7f6", string0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(string0);
      
      DateFormat dateFormat1 = abstractXYItemLabelGenerator0.getXDateFormat();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertSame(dateFormat1, dateFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator0.getFormatString());
      assertFalse(dateFormat1.isLenient());
      assertNotNull(dateFormat1);
      
      DateFormat dateFormat2 = abstractXYItemLabelGenerator0.getXDateFormat();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertSame(dateFormat2, dateFormat0);
      assertSame(dateFormat2, dateFormat1);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator0.getFormatString());
      assertFalse(dateFormat2.isLenient());
      assertNotNull(dateFormat2);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)abstractXYItemLabelGenerator0.getXFormat();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertNotNull(decimalFormat0);
      
      boolean boolean3 = abstractXYItemLabelGenerator0.equals("(W9%");
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertFalse(boolean3);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("nEq87A7f6", abstractXYItemLabelGenerator0.getFormatString());
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.createItemArray(xYDataset0, 1291, 1291);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(dateFormat0).clone();
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("FZ7?Nm}\",anuSp", dateFormat0, dateFormat0);
      assertEquals("FZ7?Nm}\",anuSp", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator1 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertFalse(abstractXYItemLabelGenerator1.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator1, abstractXYItemLabelGenerator0);
      assertEquals("FZ7?Nm}\",anuSp", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("null", abstractXYItemLabelGenerator1.getNullYString());
      assertEquals("FZ7?Nm}\",anuSp", abstractXYItemLabelGenerator1.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator1);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)abstractXYItemLabelGenerator0.getXFormat();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertEquals("FZ7?Nm}\",anuSp", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertNotNull(decimalFormat0);
      
      DecimalFormat decimalFormat1 = (DecimalFormat)abstractXYItemLabelGenerator0.getXFormat();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertSame(decimalFormat1, decimalFormat0);
      assertEquals("FZ7?Nm}\",anuSp", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertNotNull(decimalFormat1);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator2 = new AbstractXYItemLabelGenerator("org.jfree.chart.labels.AbstractXYItemLabelGenerator", decimalFormat0, decimalFormat1);
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator0));
      assertFalse(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator1));
      assertEquals("FZ7?Nm}\",anuSp", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals("null", abstractXYItemLabelGenerator2.getNullYString());
      assertEquals("org.jfree.chart.labels.AbstractXYItemLabelGenerator", abstractXYItemLabelGenerator2.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator2);
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator3 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator2.clone();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertFalse(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator0));
      assertFalse(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator3.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator3.equals((Object)abstractXYItemLabelGenerator0));
      assertTrue(abstractXYItemLabelGenerator3.equals((Object)abstractXYItemLabelGenerator2));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator3);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertSame(decimalFormat0, decimalFormat1);
      assertSame(decimalFormat1, decimalFormat0);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator0);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator3);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator3, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator3, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator3, abstractXYItemLabelGenerator0);
      assertEquals("FZ7?Nm}\",anuSp", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals("null", abstractXYItemLabelGenerator2.getNullYString());
      assertEquals("org.jfree.chart.labels.AbstractXYItemLabelGenerator", abstractXYItemLabelGenerator2.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator3.getNullYString());
      assertEquals("org.jfree.chart.labels.AbstractXYItemLabelGenerator", abstractXYItemLabelGenerator3.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator3);
      
      boolean boolean0 = abstractXYItemLabelGenerator0.equals(abstractXYItemLabelGenerator3);
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator3));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertFalse(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator0));
      assertFalse(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator1));
      assertTrue(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator3));
      assertFalse(abstractXYItemLabelGenerator3.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator3.equals((Object)abstractXYItemLabelGenerator0));
      assertTrue(abstractXYItemLabelGenerator3.equals((Object)abstractXYItemLabelGenerator2));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator3);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertSame(decimalFormat0, decimalFormat1);
      assertSame(decimalFormat1, decimalFormat0);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator0);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator3);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator3, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator3, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator3, abstractXYItemLabelGenerator0);
      assertFalse(boolean0);
      assertEquals("FZ7?Nm}\",anuSp", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals("null", abstractXYItemLabelGenerator2.getNullYString());
      assertEquals("org.jfree.chart.labels.AbstractXYItemLabelGenerator", abstractXYItemLabelGenerator2.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator3.getNullYString());
      assertEquals("org.jfree.chart.labels.AbstractXYItemLabelGenerator", abstractXYItemLabelGenerator3.getFormatString());
      
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.createItemArray(xYDataset0, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(numberFormat0).toString();
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("F", numberFormat0, numberFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("F", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      NumberFormat numberFormat1 = abstractXYItemLabelGenerator0.getXFormat();
      assertSame(numberFormat1, numberFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("F", abstractXYItemLabelGenerator0.getFormatString());
      assertFalse(numberFormat1.isParseIntegerOnly());
      assertEquals(0, numberFormat1.getMinimumIntegerDigits());
      assertFalse(numberFormat1.isGroupingUsed());
      assertEquals(0, numberFormat1.getMaximumIntegerDigits());
      assertEquals(0, numberFormat1.getMinimumFractionDigits());
      assertNull(numberFormat1.getRoundingMode());
      assertEquals(0, numberFormat1.getMaximumFractionDigits());
      assertNotNull(numberFormat1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator();
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      abstractXYItemLabelGenerator0.hashCode();
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      
      String string0 = abstractXYItemLabelGenerator0.getNullYString();
      assertEquals("null", string0);
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(string0);
      
      String string1 = abstractXYItemLabelGenerator0.getFormatString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("{2}", string1);
      assertEquals("{2}", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "The 'data' array must contain six arrays with equal length.";
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(numberFormat0).clone();
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("The 'data' array must contain six arrays with equal length.", numberFormat0, dateFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("The 'data' array must contain six arrays with equal length.", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 369;
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator1 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertFalse(abstractXYItemLabelGenerator1.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator1, abstractXYItemLabelGenerator0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("The 'data' array must contain six arrays with equal length.", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("The 'data' array must contain six arrays with equal length.", abstractXYItemLabelGenerator1.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator1.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator1);
      
      int int1 = abstractXYItemLabelGenerator0.hashCode();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(int1 == int0);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("The 'data' array must contain six arrays with equal length.", abstractXYItemLabelGenerator0.getFormatString());
      
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset1).getSeriesKey(anyInt());
      int int2 = abstractXYItemLabelGenerator0.hashCode();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(int2 == int0);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("The 'data' array must contain six arrays with equal length.", abstractXYItemLabelGenerator0.getFormatString());
      
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.createItemArray(xYDataset1, 369, 369);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateFormat0).toString();
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("#&=~`N>", dateFormat0, numberFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("#&=~`N>", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      DateFormat dateFormat1 = abstractXYItemLabelGenerator0.getXDateFormat();
      assertSame(dateFormat1, dateFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("#&=~`N>", abstractXYItemLabelGenerator0.getFormatString());
      assertFalse(dateFormat1.isLenient());
      assertNotNull(dateFormat1);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.generateLabelString(xYDataset0, (-3035), (-3035));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "formatString";
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(dateFormat0).clone();
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(numberFormat0).clone();
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("formatString", dateFormat0, numberFormat0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("formatString", abstractXYItemLabelGenerator0.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator0);
      
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator1 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertFalse(abstractXYItemLabelGenerator1.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator1, abstractXYItemLabelGenerator0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("formatString", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator1.getNullYString());
      assertEquals("formatString", abstractXYItemLabelGenerator1.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator1);
      
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator2 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertTrue(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator0);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator1);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("formatString", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator2.getNullYString());
      assertEquals("formatString", abstractXYItemLabelGenerator2.getFormatString());
      assertNotNull(abstractXYItemLabelGenerator2);
      
      boolean boolean0 = abstractXYItemLabelGenerator0.equals(abstractXYItemLabelGenerator2);
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertTrue(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator2.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator0);
      assertNotSame(abstractXYItemLabelGenerator2, abstractXYItemLabelGenerator1);
      assertFalse(boolean0);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("formatString", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator2.getNullYString());
      assertEquals("formatString", abstractXYItemLabelGenerator2.getFormatString());
      
      boolean boolean1 = abstractXYItemLabelGenerator0.equals("formatString");
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertFalse(boolean1);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("formatString", abstractXYItemLabelGenerator0.getFormatString());
      
      int int0 = 2177;
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator3 = (AbstractXYItemLabelGenerator)abstractXYItemLabelGenerator0.clone();
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator0.equals((Object)abstractXYItemLabelGenerator2));
      assertTrue(abstractXYItemLabelGenerator3.equals((Object)abstractXYItemLabelGenerator2));
      assertTrue(abstractXYItemLabelGenerator3.equals((Object)abstractXYItemLabelGenerator1));
      assertFalse(abstractXYItemLabelGenerator3.equals((Object)abstractXYItemLabelGenerator0));
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator2);
      assertNotSame(abstractXYItemLabelGenerator0, abstractXYItemLabelGenerator3);
      assertNotSame(abstractXYItemLabelGenerator3, abstractXYItemLabelGenerator1);
      assertNotSame(abstractXYItemLabelGenerator3, abstractXYItemLabelGenerator0);
      assertNotSame(abstractXYItemLabelGenerator3, abstractXYItemLabelGenerator2);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
      assertEquals("formatString", abstractXYItemLabelGenerator0.getFormatString());
      assertEquals("formatString", abstractXYItemLabelGenerator3.getFormatString());
      assertEquals("null", abstractXYItemLabelGenerator3.getNullYString());
      assertNotNull(abstractXYItemLabelGenerator3);
      
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.createItemArray(xYDataset0, 0, 2177);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      JobHoldUntil jobHoldUntil0 = new JobHoldUntil(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(jobHoldUntil0);
      
      Date date0 = jobHoldUntil0.getValue();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Week week0 = null;
      try {
        week0 = new Week(date0, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator();
      abstractXYItemLabelGenerator0.getFormatString();
      abstractXYItemLabelGenerator0.equals("PR");
      abstractXYItemLabelGenerator0.hashCode();
      abstractXYItemLabelGenerator0.getXFormat();
      abstractXYItemLabelGenerator0.getYDateFormat();
      abstractXYItemLabelGenerator0.clone();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("PR").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      abstractXYItemLabelGenerator0.createItemArray(xYDataset0, 0, 0);
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      XYDataset xYDataset2 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset2).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.createItemArray(xYDataset2, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = null;
      try {
        abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("ALH_PmF", dateFormat0, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'yFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("NDJ9$M9=rh\u0001").when(xYDataset0).getSeriesKey(anyInt());
      doReturn(0.0).when(xYDataset0).getXValue(anyInt() , anyInt());
      doReturn(0.0).when(xYDataset0).getYValue(anyInt() , anyInt());
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator("yFormat", dateFormat0, dateFormat0);
      Object[] objectArray0 = abstractXYItemLabelGenerator0.createItemArray(xYDataset0, 5, 5);
      assertEquals(3, objectArray0.length);
      assertEquals("null", abstractXYItemLabelGenerator0.getNullYString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AbstractXYItemLabelGenerator abstractXYItemLabelGenerator0 = new AbstractXYItemLabelGenerator();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      Object object0 = abstractXYItemLabelGenerator0.clone();
      abstractXYItemLabelGenerator0.equals(object0);
      XYDataset xYDataset1 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset1).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        abstractXYItemLabelGenerator0.createItemArray(xYDataset1, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
