/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:02:22 GMT 2023
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.sql.Connection;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JSpinner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.labels.AbstractPieItemLabelGenerator;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractPieItemLabelGenerator_ESTest extends AbstractPieItemLabelGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", choiceFormat0, choiceFormat0);
      NumberFormat numberFormat0 = abstractPieItemLabelGenerator0.getPercentFormat();
      assertEquals(40, numberFormat0.getMaximumIntegerDigits());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("F^8PSR_", decimalFormat0, decimalFormat0);
      DecimalFormat decimalFormat1 = (DecimalFormat)abstractPieItemLabelGenerator0.getNumberFormat();
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("(:k3^Oo@BN@5,.d8s?A", numberFormat0, numberFormat0);
      String string0 = abstractPieItemLabelGenerator0.getLabelFormat();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("y}\"iD dr4GfaxK", numberFormat0, numberFormat0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 0);
      String string0 = abstractPieItemLabelGenerator0.generateSectionLabel(categoryToPieDataset0, "y}\"iD dr4GfaxK");
      assertEquals("y}\"iD dr4GfaxK", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      DecimalFormat decimalFormat0 = jSpinner_NumberEditor0.getFormat();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", decimalFormat0, decimalFormat0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.createItemArray(jDBCPieDataset0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.createItemArray((PieDataset) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      try { 
        abstractPieItemLabelGenerator0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // org.jfree.chart.labels.AbstractPieItemLabelGenerator
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = null;
      try {
        abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("wFk^", (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'numberFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat1 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat1);
      NumberFormat numberFormat2 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator1 = new AbstractPieItemLabelGenerator("F^8PSR_", numberFormat2, numberFormat2);
      boolean boolean0 = abstractPieItemLabelGenerator0.equals(abstractPieItemLabelGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("org.jfree.data.general.DatasetGroup", numberFormat0, numberFormat0);
      NumberFormat numberFormat1 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat2 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator1 = new AbstractPieItemLabelGenerator("org.jfree.data.general.DatasetGroup", numberFormat1, numberFormat2);
      boolean boolean0 = abstractPieItemLabelGenerator0.equals(abstractPieItemLabelGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      String string0 = abstractPieItemLabelGenerator0.generateSectionLabel((PieDataset) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((StringBuffer) null).when(numberFormat0).format(anyDouble() , any(java.lang.StringBuffer.class) , any(java.text.FieldPosition.class));
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("-+DH1Oi4T'e", numberFormat0, numberFormat0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BigInteger bigInteger0 = BigInteger.TEN;
      PieDataset<String> pieDataset0 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(pieDataset0).getKeys();
      doReturn((Number) null).when(pieDataset0).getValue(anyString());
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.createItemArray(pieDataset0, "-+DH1Oi4T'e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.NumberFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(numberFormat0).toString();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      abstractPieItemLabelGenerator0.hashCode();
      NumberFormat numberFormat1 = abstractPieItemLabelGenerator0.getNumberFormat();
      abstractPieItemLabelGenerator0.getLabelFormat();
      abstractPieItemLabelGenerator0.equals(numberFormat1);
      PieDataset<String> pieDataset0 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(pieDataset0).getKeys();
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.generateSectionLabel(pieDataset0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }
}
