/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:25:38 GMT 2023
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYZDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardXYZToolTipGenerator_ESTest extends StandardXYZToolTipGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      DecimalFormat decimalFormat0 = (DecimalFormat)standardXYZToolTipGenerator0.getZFormat();
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{0}: ({1}, {2})").when(xYZDataset0).getSeriesKey(anyInt());
      doReturn(integer0).when(xYZDataset0).getX(anyInt() , anyInt());
      doReturn(integer0).when(xYZDataset0).getY(anyInt() , anyInt());
      doReturn(integer0).when(xYZDataset0).getZ(anyInt() , anyInt());
      String string0 = standardXYZToolTipGenerator0.generateToolTip(xYZDataset0, (-631), (-2302));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("w&1i`", dateFormat0, dateFormat0, dateFormat0);
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYZDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        standardXYZToolTipGenerator0.generateToolTip(xYZDataset0, 3, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        standardXYZToolTipGenerator0.generateToolTip((XYZDataset) matrixSeriesCollection0, 0, (-2599));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        standardXYZToolTipGenerator0.generateToolTip((XYZDataset) matrixSeriesCollection0, (-2876), (-2876));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("[P$l", dateFormat0, dateFormat0, dateFormat0);
      // Undeclared exception!
      try { 
        standardXYZToolTipGenerator0.generateLabelString((XYDataset) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.StandardXYZToolTipGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      doReturn("Negative 'width' argument.").when(xYZDataset0).getSeriesKey(anyInt());
      doReturn((Number) null).when(xYZDataset0).getX(anyInt() , anyInt());
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      // Undeclared exception!
      try { 
        standardXYZToolTipGenerator0.generateLabelString(xYZDataset0, (-878), (-260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{0}: ({1}, {2})").when(xYZDataset0).getSeriesKey(anyInt());
      doReturn(integer0).when(xYZDataset0).getX(anyInt() , anyInt());
      doReturn((Number) null).when(xYZDataset0).getY(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        standardXYZToolTipGenerator0.createItemArray(xYZDataset0, 1060, 1060);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        standardXYZToolTipGenerator0.createItemArray(matrixSeriesCollection0, (-1036), 196);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = null;
      try {
        standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator((String) null, numberFormat0, numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = null;
      try {
        standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator((String) null, dateFormat0, dateFormat0, dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("", numberFormat0, numberFormat0, numberFormat0);
      // Undeclared exception!
      try { 
        standardXYZToolTipGenerator0.createItemArray((XYZDataset) null, 0, 29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.StandardXYZToolTipGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        standardXYZToolTipGenerator0.generateLabelString(xYDataset0, 828, 828);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataset$MockitoMock$1987353609 cannot be cast to org.jfree.data.xy.XYZDataset
         //
         verifyException("org.jfree.chart.labels.StandardXYZToolTipGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      StandardXYZToolTipGenerator standardXYZToolTipGenerator1 = new StandardXYZToolTipGenerator();
      boolean boolean0 = standardXYZToolTipGenerator0.equals(standardXYZToolTipGenerator1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("", dateFormat0, dateFormat0, dateFormat0);
      StandardXYZToolTipGenerator standardXYZToolTipGenerator1 = new StandardXYZToolTipGenerator();
      boolean boolean0 = standardXYZToolTipGenerator0.equals(standardXYZToolTipGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      boolean boolean0 = standardXYZToolTipGenerator0.equals(standardXYZToolTipGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      boolean boolean0 = standardXYZToolTipGenerator0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      MockDate mockDate0 = new MockDate(807L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1237.386405426045, 45.0, 1237.386405426045, 45.0, 45.0);
      Number number0 = oHLCDataItem0.getClose();
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{0}: ({1}, {2})").when(xYZDataset0).getSeriesKey(anyInt());
      doReturn(integer0).when(xYZDataset0).getX(anyInt() , anyInt());
      doReturn(integer0).when(xYZDataset0).getY(anyInt() , anyInt());
      doReturn(number0).when(xYZDataset0).getZ(anyInt() , anyInt());
      Object[] objectArray0 = standardXYZToolTipGenerator0.createItemArray(xYZDataset0, 1060, 1060);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("w&1i`", dateFormat0, dateFormat0, dateFormat0);
      NumberFormat numberFormat0 = standardXYZToolTipGenerator0.getZFormat();
      assertNull(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("", dateFormat0, dateFormat0, dateFormat0);
      XYZDataset xYZDataset0 = mock(XYZDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{0}: ({1}, {2}, {3})").when(xYZDataset0).getSeriesKey(anyInt());
      doReturn((Number) null).when(xYZDataset0).getX(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        standardXYZToolTipGenerator0.generateToolTip(xYZDataset0, 0, (-2669));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      DateFormat dateFormat0 = standardXYZToolTipGenerator0.getZDateFormat();
      assertNull(dateFormat0);
  }
}
