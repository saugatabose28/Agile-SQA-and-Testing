/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:13:03 GMT 2023
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.labels.StandardXYSeriesLabelGenerator;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardXYSeriesLabelGenerator_ESTest extends StandardXYSeriesLabelGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator("");
      standardXYSeriesLabelGenerator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator("org.jfree.data.xy.XYSeriesCollection");
      Object object0 = standardXYSeriesLabelGenerator0.clone();
      boolean boolean0 = standardXYSeriesLabelGenerator0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator("Mmz_t*jq>lNZ");
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("Mmz_t*jq>lNZ").when(xYDataset0).getSeriesKey(anyInt());
      String string0 = standardXYSeriesLabelGenerator0.generateLabel(xYDataset0, (-2924));
      assertEquals("Mmz_t*jq>lNZ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator("");
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("").when(xYDataset0).getSeriesKey(anyInt());
      String string0 = standardXYSeriesLabelGenerator0.generateLabel(xYDataset0, 1353);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("{0}").when(xYDataset0).getSeriesKey(anyInt());
      Object[] objectArray0 = standardXYSeriesLabelGenerator0.createItemArray(xYDataset0, 29);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator("1{U(UoAZv6\"P_]>1X");
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn("1{U(UoAZv6\"P_]>1X").when(xYDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        standardXYSeriesLabelGenerator0.generateLabel(xYDataset0, (-1102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unmatched braces in the pattern.
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator("");
      // Undeclared exception!
      try { 
        standardXYSeriesLabelGenerator0.generateLabel((XYDataset) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator();
      // Undeclared exception!
      try { 
        standardXYSeriesLabelGenerator0.createItemArray((XYDataset) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.StandardXYSeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = null;
      try {
        standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'format' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator("Mmz_t*jq>lNZ");
      boolean boolean0 = standardXYSeriesLabelGenerator0.equals("Mmz_t*jq>lNZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator();
      boolean boolean0 = standardXYSeriesLabelGenerator0.equals(standardXYSeriesLabelGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator();
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator1 = new StandardXYSeriesLabelGenerator("");
      boolean boolean0 = standardXYSeriesLabelGenerator0.equals(standardXYSeriesLabelGenerator1);
      assertFalse(standardXYSeriesLabelGenerator1.equals((Object)standardXYSeriesLabelGenerator0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator();
      XYDataset xYDataset0 = mock(XYDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYDataset0).getSeriesKey(anyInt());
      // Undeclared exception!
      try { 
        standardXYSeriesLabelGenerator0.generateLabel(xYDataset0, (-627));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
