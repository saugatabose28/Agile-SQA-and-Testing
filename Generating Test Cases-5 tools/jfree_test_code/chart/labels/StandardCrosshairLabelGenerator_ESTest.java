/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:04:11 GMT 2023
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeListener;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.labels.StandardCrosshairLabelGenerator;
import org.jfree.chart.plot.Crosshair;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardCrosshairLabelGenerator_ESTest extends StandardCrosshairLabelGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator();
      standardCrosshairLabelGenerator0.getNumberFormat();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((-1455.839942)).when(crosshair0).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((-70.7503059178)).when(crosshair1).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair1);
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((-2378.108989123)).when(crosshair2).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair2);
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair3).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair3);
      Crosshair crosshair4 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((-70.7503059178)).when(crosshair4).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair4);
      Crosshair crosshair5 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((-1455.839942)).when(crosshair5).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair5);
      Crosshair crosshair6 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(2.01).when(crosshair6).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair6);
      standardCrosshairLabelGenerator0.hashCode();
      NumberFormat numberFormat0 = standardCrosshairLabelGenerator0.getNumberFormat();
      Crosshair crosshair7 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(202008.0).when(crosshair7).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair7);
      standardCrosshairLabelGenerator0.getNumberFormat();
      standardCrosshairLabelGenerator0.getNumberFormat();
      boolean boolean0 = standardCrosshairLabelGenerator0.equals(standardCrosshairLabelGenerator0);
      boolean boolean1 = standardCrosshairLabelGenerator0.equals("202,008");
      assertFalse(boolean1);
      
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator1 = new StandardCrosshairLabelGenerator("-1,455.84", numberFormat0);
      boolean boolean2 = standardCrosshairLabelGenerator0.equals(standardCrosshairLabelGenerator1);
      assertFalse(boolean2 == boolean0);
      
      Crosshair crosshair8 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((-648.8617)).when(crosshair8).getValue();
      standardCrosshairLabelGenerator1.generateLabel(crosshair8);
      Crosshair crosshair9 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair9).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair9);
      Crosshair crosshair10 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(202008.0).when(crosshair10).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair10);
      Crosshair crosshair11 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((-2562.421895892)).when(crosshair11).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair11);
      standardCrosshairLabelGenerator0.hashCode();
      standardCrosshairLabelGenerator1.hashCode();
      assertFalse(standardCrosshairLabelGenerator0.equals((Object)standardCrosshairLabelGenerator1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("w");
      decimalFormat0.setNegativeSuffix(";LH k>pk(LB&Ju[/S");
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator("#v>k9", decimalFormat0);
      Crosshair crosshair0 = new Crosshair(99.0);
      crosshair0.addPropertyChangeListener((PropertyChangeListener) null);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      locale0.getDisplayName();
      standardCrosshairLabelGenerator0.generateLabel(crosshair0);
      standardCrosshairLabelGenerator0.getLabelTemplate();
      standardCrosshairLabelGenerator0.generateLabel(crosshair0);
      standardCrosshairLabelGenerator0.equals(decimalFormat0);
      standardCrosshairLabelGenerator0.getNumberFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      numberFormat0.parse(" KH6;%#C\"O?", parsePosition0);
      standardCrosshairLabelGenerator0.getLabelTemplate();
      standardCrosshairLabelGenerator0.getNumberFormat();
      boolean boolean0 = standardCrosshairLabelGenerator0.equals(numberFormat0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((StringBuffer) null).when(numberFormat0).format(anyDouble() , any(java.lang.StringBuffer.class) , any(java.text.FieldPosition.class));
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator("", numberFormat0);
      standardCrosshairLabelGenerator0.equals("");
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator1 = new StandardCrosshairLabelGenerator();
      standardCrosshairLabelGenerator0.equals(standardCrosshairLabelGenerator1);
      standardCrosshairLabelGenerator1.equals(standardCrosshairLabelGenerator0);
      NumberFormat numberFormat1 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator2 = new StandardCrosshairLabelGenerator("", numberFormat1);
      standardCrosshairLabelGenerator0.equals(standardCrosshairLabelGenerator2);
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair0).getValue();
      // Undeclared exception!
      try { 
        standardCrosshairLabelGenerator0.generateLabel(crosshair0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.NumberFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator("", numberFormat0);
      String string0 = standardCrosshairLabelGenerator0.getLabelTemplate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair0).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair1).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair1);
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair2).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair2);
      NumberFormat numberFormat0 = standardCrosshairLabelGenerator0.getNumberFormat();
      standardCrosshairLabelGenerator0.getLabelTemplate();
      standardCrosshairLabelGenerator0.hashCode();
      standardCrosshairLabelGenerator0.getLabelTemplate();
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator1 = new StandardCrosshairLabelGenerator("", numberFormat0);
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair3).getValue();
      standardCrosshairLabelGenerator1.generateLabel(crosshair3);
      standardCrosshairLabelGenerator0.equals(standardCrosshairLabelGenerator1);
      Crosshair crosshair4 = null;
      // Undeclared exception!
      try { 
        standardCrosshairLabelGenerator1.generateLabel((Crosshair) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.StandardCrosshairLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = null;
      try {
        standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator("RectangleAnchor.TOP_LEFT", (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'numberFormat' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCrosshairLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair0).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair0);
      standardCrosshairLabelGenerator0.hashCode();
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair1).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair1);
      standardCrosshairLabelGenerator0.getLabelTemplate();
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair2).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair2);
      standardCrosshairLabelGenerator0.equals("{0}");
      standardCrosshairLabelGenerator0.getNumberFormat();
      Crosshair crosshair3 = null;
      // Undeclared exception!
      try { 
        standardCrosshairLabelGenerator0.generateLabel((Crosshair) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.StandardCrosshairLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = null;
      try {
        standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator("", (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'numberFormat' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCrosshairLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator();
      String string0 = standardCrosshairLabelGenerator0.getLabelTemplate();
      assertEquals("{0}", string0);
      
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair0).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair1).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair1);
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair2).getValue();
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair3).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair3);
      standardCrosshairLabelGenerator0.generateLabel(crosshair2);
      standardCrosshairLabelGenerator0.hashCode();
      standardCrosshairLabelGenerator0.hashCode();
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator1 = new StandardCrosshairLabelGenerator();
      Crosshair crosshair4 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair4).getValue();
      standardCrosshairLabelGenerator1.generateLabel(crosshair4);
      boolean boolean0 = standardCrosshairLabelGenerator0.equals(standardCrosshairLabelGenerator1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = null;
      try {
        standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator((String) null, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'labelTemplate' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCrosshairLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair0).getValue();
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair1).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair1);
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair2).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair2);
      standardCrosshairLabelGenerator0.generateLabel(crosshair0);
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair3).getValue();
      Crosshair crosshair4 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair4).getValue();
      Crosshair crosshair5 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair5).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair5);
      Crosshair crosshair6 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair6).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair6);
      standardCrosshairLabelGenerator0.generateLabel(crosshair4);
      standardCrosshairLabelGenerator0.generateLabel(crosshair3);
      NumberFormat numberFormat0 = standardCrosshairLabelGenerator0.getNumberFormat();
      standardCrosshairLabelGenerator0.hashCode();
      Crosshair crosshair7 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair7).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair7);
      standardCrosshairLabelGenerator0.equals("0");
      standardCrosshairLabelGenerator0.equals("0");
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator1 = new StandardCrosshairLabelGenerator("0", numberFormat0);
      boolean boolean0 = standardCrosshairLabelGenerator0.equals(standardCrosshairLabelGenerator1);
      standardCrosshairLabelGenerator1.getLabelTemplate();
      standardCrosshairLabelGenerator0.getNumberFormat();
      standardCrosshairLabelGenerator1.hashCode();
      standardCrosshairLabelGenerator0.getLabelTemplate();
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator2 = new StandardCrosshairLabelGenerator();
      boolean boolean1 = standardCrosshairLabelGenerator0.equals(standardCrosshairLabelGenerator2);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = standardCrosshairLabelGenerator2.equals("G'|!/cvJ1]*'P,03");
      assertFalse(boolean2);
      
      standardCrosshairLabelGenerator2.getNumberFormat();
      assertTrue(standardCrosshairLabelGenerator2.equals((Object)standardCrosshairLabelGenerator0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator();
      standardCrosshairLabelGenerator0.getLabelTemplate();
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator1 = new StandardCrosshairLabelGenerator("imp%R/Y9Yi", numberFormat0);
      boolean boolean0 = standardCrosshairLabelGenerator0.equals(standardCrosshairLabelGenerator1);
      assertFalse(boolean0);
      
      boolean boolean1 = standardCrosshairLabelGenerator1.equals("{0}");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair0).getValue();
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair1).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair1);
      standardCrosshairLabelGenerator0.generateLabel(crosshair0);
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair2).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair2);
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair3).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair3);
      Crosshair crosshair4 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair4).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair4);
      standardCrosshairLabelGenerator0.getNumberFormat();
      Crosshair crosshair5 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair5).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair5);
      standardCrosshairLabelGenerator0.getNumberFormat();
      Crosshair crosshair6 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair6).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair6);
      standardCrosshairLabelGenerator0.getNumberFormat();
      standardCrosshairLabelGenerator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator("%swG!", numberFormat0);
      Crosshair crosshair0 = null;
      // Undeclared exception!
      try { 
        standardCrosshairLabelGenerator0.generateLabel((Crosshair) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.StandardCrosshairLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair0).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair1).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair1);
      String string0 = ">kD'eLX{`x";
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair2).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair2);
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((StringBuffer) null).when(numberFormat0).format(anyDouble() , any(java.lang.StringBuffer.class) , any(java.text.FieldPosition.class));
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator1 = new StandardCrosshairLabelGenerator(">kD'eLX{`x", numberFormat0);
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair3).getValue();
      // Undeclared exception!
      try { 
        standardCrosshairLabelGenerator1.generateLabel(crosshair3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.NumberFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator();
      Crosshair crosshair0 = new Crosshair(806.77276252);
      standardCrosshairLabelGenerator0.generateLabel(crosshair0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair1).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair1);
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair2).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair2);
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair3).getValue();
      Crosshair crosshair4 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair4).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair4);
      standardCrosshairLabelGenerator0.generateLabel(crosshair3);
      standardCrosshairLabelGenerator0.getLabelTemplate();
      standardCrosshairLabelGenerator0.getLabelTemplate();
      Crosshair crosshair5 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(crosshair5).getValue();
      Crosshair crosshair6 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(crosshair6).getValue();
      standardCrosshairLabelGenerator0.generateLabel(crosshair6);
      standardCrosshairLabelGenerator0.generateLabel(crosshair5);
      Crosshair crosshair7 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
  }
}
