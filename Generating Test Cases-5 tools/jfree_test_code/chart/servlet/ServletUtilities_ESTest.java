/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:20:45 GMT 2023
 */

package org.jfree.chart.servlet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionBindingEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.servlet.ServletUtilities;
import org.jfree.data.category.CategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ServletUtilities_ESTest extends ServletUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ServletUtilities.getTempOneTimeFilePrefix();
      ServletUtilities.setTempFilePrefix("jfreechart-onetime-");
      ServletUtilities.createTempDir();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      doReturn((String) null).when(file0).getAbsolutePath();
      doReturn("org.jfree.chart.entity.JFreeChartEntity").when(file0).getName();
      HttpServletResponse httpServletResponse0 = null;
      try { 
        ServletUtilities.sendTempFile(file0, (HttpServletResponse) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.servlet.ServletUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ServletUtilities.getTempFilePrefix();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).exists();
      doReturn("ime-").when(file0).getAbsolutePath();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      ServletUtilities.getTempOneTimeFilePrefix();
      try { 
        ServletUtilities.sendTempFile(file0, httpServletResponse0, (String) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      doReturn((String) null).when(file0).getAbsolutePath();
      doReturn("chart").when(file0).getName();
      HttpServletResponse httpServletResponse0 = null;
      try { 
        ServletUtilities.sendTempFile(file0, (HttpServletResponse) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.servlet.ServletUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ServletUtilities.getTempFilePrefix();
      ServletUtilities servletUtilities0 = new ServletUtilities();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      doReturn((String) null).when(file0).getAbsolutePath();
      ServletUtilities.createTempDir();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      HttpSessionBindingEvent httpSessionBindingEvent0 = new HttpSessionBindingEvent(httpSession0, (String) null);
      HttpSession httpSession1 = httpSessionBindingEvent0.getSession();
      ServletUtilities.saveChartAsPNG(jFreeChart0, 10, 10, httpSession1);
      try { 
        ServletUtilities.sendTempFile(file0, (HttpServletResponse) null, (String) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.servlet.ServletUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1245), 3134, (-232629076), 60, 60, 10, false, false, false, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      HttpSessionBindingEvent httpSessionBindingEvent0 = new HttpSessionBindingEvent(httpSession0, "q,");
      HttpSession httpSession1 = httpSessionBindingEvent0.getSession();
      ServletUtilities.saveChartAsJPEG(jFreeChart0, 479, 3134, chartRenderingInfo0, httpSession1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ">{P";
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(">{P").when(httpSession0).getAttribute(anyString());
      // Undeclared exception!
      try { 
        ServletUtilities.registerChartForDeletion(file0, httpSession0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.chart.servlet.ChartDeleter
         //
         verifyException("org.jfree.chart.servlet.ServletUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ServletUtilities.searchReplace("*|vh1V{'", "&[I;MGFFlP,sSzy?~w", "*|vh1V{'");
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      // Undeclared exception!
      try { 
        ServletUtilities.registerChartForDeletion((File) null, httpSession0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.servlet.ServletUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ServletUtilities.setTempFilePrefix("&.0_");
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getName();
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      ServletUtilities.registerChartForDeletion(file0, httpSession0);
      ServletUtilities.setTempFilePrefix("6");
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      HttpSession httpSession1 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ServletUtilities.saveChartAsJPEG(jFreeChart0, 15, 15, chartRenderingInfo0, httpSession1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ServletUtilities.sendTempFile((String) null, httpServletResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ServletUtilities.setTempOneTimeFilePrefix("");
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      int int0 = 1149;
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      HttpSession httpSession0 = null;
      // Undeclared exception!
      try { 
        ServletUtilities.saveChartAsPNG(jFreeChart0, 15, 1149, chartRenderingInfo0, (HttpSession) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "Content-Type";
      ServletUtilities.setTempOneTimeFilePrefix("Content-Type");
      ServletUtilities servletUtilities0 = new ServletUtilities();
      ServletUtilities.setTempOneTimeFilePrefix("");
      // Undeclared exception!
      try { 
        ServletUtilities.searchReplace("Content-Type", "", "9V}|;Tx,5yfdr~");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ServletUtilities servletUtilities0 = new ServletUtilities();
      assertEquals("jfreechart-", servletUtilities0.getTempFilePrefix());
      assertEquals("jfreechart-onetime-", servletUtilities0.getTempOneTimeFilePrefix());
      assertNotNull(servletUtilities0);
      
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ServletUtilities.saveChartAsJPEG(jFreeChart0, 15, 15, chartRenderingInfo0, (HttpSession) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        ServletUtilities.setTempOneTimeFilePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "chart";
      ServletUtilities.setTempFilePrefix("chart");
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      try { 
        ServletUtilities.sendTempFile("chart", httpServletResponse0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /var/folders/cn/p_3wvv_s13bcscy_x6n4hrxr0000gn/T/chart
         //
         verifyException("org.jfree.chart.servlet.ServletUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = ServletUtilities.getTempFilePrefix();
      assertEquals("jfreechart-", string0);
      assertNotNull(string0);
      
      File file0 = null;
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      String string1 = "9QOJOOI7{fo&wG@";
      // Undeclared exception!
      try { 
        ServletUtilities.sendTempFile((File) null, httpServletResponse0, "9QOJOOI7{fo&wG@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.servlet.ServletUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ServletUtilities.setTempFilePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "N'%J^<Pih";
      ServletUtilities.setTempOneTimeFilePrefix("N'%J^<Pih");
      String string1 = ServletUtilities.getTempFilePrefix();
      assertEquals("jfreechart-", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      // Undeclared exception!
      try { 
        ServletUtilities.saveChartAsPNG(jFreeChart0, 15, 0, (HttpSession) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ServletUtilities.saveChartAsPNG(jFreeChart0, 5276, 1963, httpSession0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = ServletUtilities.searchReplace("org.jfree.chart.servlet.ServletUtilities", "org.jfree.chart.servlet.ServletUtilities", "org.jfree.chart.servlet.ServletUtilities");
      assertEquals("org.jfree.chart.servlet.ServletUtilities", string0);
      assertNotNull(string0);
      
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      doReturn((String) null).when(file0).getAbsolutePath();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      String string1 = "";
      try { 
        ServletUtilities.sendTempFile(file0, httpServletResponse0, "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.servlet.ServletUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ServletUtilities.setTempOneTimeFilePrefix("EEE, dd MMM yyyy HH:mm:ss z");
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ServletUtilities.saveChartAsPNG(jFreeChart0, 10, 0, chartRenderingInfo0, httpSession0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = ServletUtilities.searchReplace("prefix", "prefix", "prefix");
      assertEquals("prefix", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ServletUtilities.searchReplace("PMe7", "", "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ServletUtilities.searchReplace("", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = ServletUtilities.searchReplace("dR`juSostJ3EAB5$y", "dR`juSostJ3EAB5$y", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = ServletUtilities.searchReplace("", "", "|,fh4zF&");
      assertEquals("|,fh4zF&", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = ServletUtilities.getTempOneTimeFilePrefix();
      assertEquals("jfreechart-onetime-", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      ChartRenderingInfo chartRenderingInfo0 = null;
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ServletUtilities.saveChartAsJPEG(jFreeChart0, 15, 15, (ChartRenderingInfo) null, httpSession0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ServletUtilities.saveChartAsJPEG(jFreeChart0, 15, 0, httpSession0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ServletUtilities.setTempOneTimeFilePrefix("{rl p;if");
      ServletUtilities servletUtilities0 = new ServletUtilities();
      assertEquals("jfreechart-", servletUtilities0.getTempFilePrefix());
      assertEquals("{rl p;if", servletUtilities0.getTempOneTimeFilePrefix());
      assertNotNull(servletUtilities0);
      
      String string0 = ServletUtilities.getTempOneTimeFilePrefix();
      assertEquals("{rl p;if", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      File file0 = null;
      HttpSession httpSession0 = null;
      ServletUtilities.registerChartForDeletion((File) null, (HttpSession) null);
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      // Undeclared exception!
      try { 
        ServletUtilities.saveChartAsJPEG(jFreeChart0, (-3563), 15, (HttpSession) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ServletUtilities.setTempOneTimeFilePrefix("2\"aKv4Y7q@PQ.I3'");
      String string0 = "v-!8AMDOY_1j[Jktw";
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      try { 
        ServletUtilities.sendTempFile("v-!8AMDOY_1j[Jktw", httpServletResponse0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /var/folders/cn/p_3wvv_s13bcscy_x6n4hrxr0000gn/T/v-!8AMDOY_1j[Jktw
         //
         verifyException("org.jfree.chart.servlet.ServletUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ServletUtilities.createTempDir();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getName();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ServletUtilities.sendTempFile(file0, httpServletResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.servlet.ServletUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ServletUtilities.setTempFilePrefix("org.jfree.chart.plot.XYPlot");
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      try { 
        ServletUtilities.sendTempFile("org.jfree.chart.ui.HorizontalAlignment", httpServletResponse0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /var/folders/cn/p_3wvv_s13bcscy_x6n4hrxr0000gn/T/org.jfree.chart.ui.HorizontalAlignment
         //
         verifyException("org.jfree.chart.servlet.ServletUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ServletUtilities.getTempFilePrefix();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ServletUtilities.saveChartAsPNG(jFreeChart0, 3714, 8, chartRenderingInfo0, httpSession0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ServletUtilities.getTempOneTimeFilePrefix();
      ServletUtilities.searchReplace("Nn+l", "Dhk", "kqM,P}>yg");
      ServletUtilities.getTempFilePrefix();
      ServletUtilities.getTempFilePrefix();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      try { 
        ServletUtilities.sendTempFile("kqM,P}>yg", httpServletResponse0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /var/folders/cn/p_3wvv_s13bcscy_x6n4hrxr0000gn/T/kqM,P}>yg
         //
         verifyException("org.jfree.chart.servlet.ServletUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ServletUtilities.setTempOneTimeFilePrefix("Content-Type");
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getName();
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      ServletUtilities.registerChartForDeletion(file0, httpSession0);
      ServletUtilities.searchReplace("Content-Type", "Content-Type", "org.jfree.chart.ui.HorizontalAlignment");
      ServletUtilities.getTempOneTimeFilePrefix();
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file1).exists();
      doReturn((String) null).when(file1).getAbsolutePath();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      try { 
        ServletUtilities.sendTempFile(file1, httpServletResponse0, "jpeg");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.servlet.ServletUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ServletUtilities.setTempOneTimeFilePrefix("");
      ServletUtilities.getTempOneTimeFilePrefix();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      try { 
        ServletUtilities.sendTempFile("", httpServletResponse0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        ServletUtilities.setTempFilePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedImage) null).when(jFreeChart0).createBufferedImage(anyInt() , anyInt() , anyInt() , any(org.jfree.chart.ChartRenderingInfo.class));
      HttpSession httpSession0 = null;
      // Undeclared exception!
      try { 
        ServletUtilities.saveChartAsJPEG(jFreeChart0, 15, 15, (HttpSession) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
