/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:26:38 GMT 2023
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartTransferable;
import org.jfree.chart.JFreeChart;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChartTransferable_ESTest extends ChartTransferable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn("VerticalAlignment.CENTER").when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = null;
      try {
        chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.chart.JFreeChart
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn("image/x-java-image; class=java.awt.Image").when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = null;
      try {
        chartTransferable0 = new ChartTransferable(jFreeChart0, 0, 15, 15, 1678, 85, 85, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.chart.JFreeChart
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn("E\"KMn3}dN87bb%").when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = null;
      try {
        chartTransferable0 = new ChartTransferable(jFreeChart0, 400, 15, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.chart.JFreeChart
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 15, 15, 15, (-1), 15, true);
      assertNotNull(chartTransferable0);
      
      DataFlavor[] dataFlavorArray0 = chartTransferable0.getTransferDataFlavors();
      assertEquals(1, dataFlavorArray0.length);
      assertNotNull(dataFlavorArray0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("image", dataFlavor0.getPrimaryType());
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 4, Integer.MAX_VALUE);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      int int0 = (-908);
      ChartTransferable chartTransferable0 = null;
      try {
        chartTransferable0 = new ChartTransferable((JFreeChart) null, (-908), (-908));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 15, 15, 2146035580, 2146035580, 15, true);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("image", dataFlavor0.getPrimaryType());
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 5, 100, 100, 15, 100, false);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 797, 1474, 15, 301, (-42), true);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      
      boolean boolean0 = chartTransferable0.isDataFlavorSupported(dataFlavor0);
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertTrue(boolean0);
      
      boolean boolean1 = chartTransferable0.isDataFlavorSupported(dataFlavor0);
      assertTrue(boolean1 == boolean0);
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 15, 15, 3325, 3325, 3325, true);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChartTransferable chartTransferable0 = null;
      try {
        chartTransferable0 = new ChartTransferable((JFreeChart) null, 0, 2015, (-2742), (-2742), 15, 2539, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 15, 15, 15, 15, (-1282), true);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChartTransferable chartTransferable0 = null;
      try {
        chartTransferable0 = new ChartTransferable((JFreeChart) null, (-1), (-1), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 15);
      assertNotNull(chartTransferable0);
      
      DataFlavor[] dataFlavorArray0 = chartTransferable0.getTransferDataFlavors();
      assertEquals(1, dataFlavorArray0.length);
      assertNotNull(dataFlavorArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, Integer.MAX_VALUE, 15, false);
      assertNotNull(chartTransferable0);
      
      DataFlavor[] dataFlavorArray0 = chartTransferable0.getTransferDataFlavors();
      assertEquals(1, dataFlavorArray0.length);
      assertNotNull(dataFlavorArray0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      
      // Undeclared exception!
      chartTransferable0.getTransferData(dataFlavor0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 37, false);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = null;
      try { 
        chartTransferable0.getTransferData((DataFlavor) null);
        fail("Expecting exception: UnsupportedFlavorException");
      
      } catch(UnsupportedFlavorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 1318, 15, 1318, 0, 1318, false);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      DataFlavor dataFlavor0 = null;
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 10);
      assertNotNull(chartTransferable0);
      
      boolean boolean0 = chartTransferable0.isDataFlavorSupported((DataFlavor) null);
      assertFalse(boolean0);
      
      try { 
        chartTransferable0.getTransferData((DataFlavor) null);
        fail("Expecting exception: UnsupportedFlavorException");
      
      } catch(UnsupportedFlavorException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 0, 15);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (15) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 15);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      
      boolean boolean0 = chartTransferable0.isDataFlavorSupported(dataFlavor0);
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertTrue(boolean0);
      
      boolean boolean1 = chartTransferable0.isDataFlavorSupported(dataFlavor0);
      assertTrue(boolean1 == boolean0);
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertTrue(boolean1);
      
      boolean boolean2 = chartTransferable0.isDataFlavorSupported(dataFlavor0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertTrue(boolean2);
      
      boolean boolean3 = chartTransferable0.isDataFlavorSupported(dataFlavor0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 781, 781, 781, 15, 15, false);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 15, true);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      
      boolean boolean0 = chartTransferable0.isDataFlavorSupported(dataFlavor0);
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertTrue(boolean0);
      
      DataFlavor[] dataFlavorArray0 = chartTransferable0.getTransferDataFlavors();
      assertEquals(1, dataFlavorArray0.length);
      assertNotNull(dataFlavorArray0);
      
      DataFlavor dataFlavor1 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor1);
      assertEquals("image", dataFlavor1.getPrimaryType());
      assertFalse(dataFlavor1.isRepresentationClassInputStream());
      assertEquals("Image", dataFlavor1.getHumanPresentableName());
      assertFalse(dataFlavor1.isRepresentationClassReader());
      assertEquals("x-java-image", dataFlavor1.getSubType());
      assertFalse(dataFlavor1.isRepresentationClassRemote());
      assertFalse(dataFlavor1.isRepresentationClassByteBuffer());
      assertFalse(dataFlavor1.isFlavorJavaFileListType());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor1.getMimeType());
      assertFalse(dataFlavor1.isRepresentationClassCharBuffer());
      assertFalse(dataFlavor1.isRepresentationClassSerializable());
      assertSame(dataFlavor1, dataFlavor0);
      
      boolean boolean1 = chartTransferable0.isDataFlavorSupported(dataFlavor0);
      assertTrue(boolean1 == boolean0);
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertTrue(boolean1);
      assertSame(dataFlavor0, dataFlavor1);
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 15, Integer.MAX_VALUE, 15, 595, Integer.MAX_VALUE, false);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 1, (-2142953091), true);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertEquals("image", dataFlavor0.getPrimaryType());
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (1) and height (-2142953091) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 15);
      assertNotNull(chartTransferable0);
      
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      assertNotNull(dataFlavor0);
      assertFalse(dataFlavor0.isRepresentationClassCharBuffer());
      assertEquals("Image", dataFlavor0.getHumanPresentableName());
      assertFalse(dataFlavor0.isRepresentationClassByteBuffer());
      assertFalse(dataFlavor0.isRepresentationClassSerializable());
      assertFalse(dataFlavor0.isRepresentationClassReader());
      assertFalse(dataFlavor0.isFlavorJavaFileListType());
      assertEquals("image/x-java-image; class=java.awt.Image", dataFlavor0.getMimeType());
      assertFalse(dataFlavor0.isRepresentationClassRemote());
      assertEquals("x-java-image", dataFlavor0.getSubType());
      assertFalse(dataFlavor0.isRepresentationClassInputStream());
      assertEquals("image", dataFlavor0.getPrimaryType());
      
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jFreeChart0).clone();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 1203, 15, 29, 29, 29, 29, true);
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      chartTransferable0.isDataFlavorSupported(dataFlavor0);
      chartTransferable0.getTransferDataFlavors();
      chartTransferable0.getTransferDataFlavors();
      chartTransferable0.getTransferDataFlavors();
      chartTransferable0.getTransferDataFlavors();
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }
}
