/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:20:12 GMT 2023
 */

package org.jfree.chart.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Polygon;
import java.awt.Rectangle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.entity.JFreeChartEntity;
import org.jfree.chart.plot.Plot;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JFreeChartEntity_ESTest extends JFreeChartEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      JFreeChartEntity jFreeChartEntity0 = null;
      try {
        jFreeChartEntity0 = new JFreeChartEntity(polygon0, (JFreeChart) null, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      JFreeChartEntity jFreeChartEntity0 = null;
      try {
        jFreeChartEntity0 = new JFreeChartEntity(rectangle0, (JFreeChart) null, "V?6L(Gvk~bL3rkd$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[1];
      Polygon polygon0 = new Polygon(intArray0, intArray0, 0);
      JFreeChartEntity jFreeChartEntity0 = null;
      try {
        jFreeChartEntity0 = new JFreeChartEntity(polygon0, (JFreeChart) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("", plot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(polygon0, jFreeChart0, "K[0nRPi>hrL", "");
      JFreeChartEntity jFreeChartEntity1 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_BOX, jFreeChart0, (String) null);
      boolean boolean0 = jFreeChartEntity0.equals(jFreeChartEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.entity.JFreeChartEntity", plot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_BOX, jFreeChart0, "org.jfree.chart.entity.JFreeChartEntity", "org.jfree.chart.entity.JFreeChartEntity");
      Object object0 = jFreeChartEntity0.clone();
      boolean boolean0 = jFreeChartEntity0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.entity.JFreeChartEntity", plot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_BOX, jFreeChart0, "org.jfree.chart.entity.JFreeChartEntity", "org.jfree.chart.entity.JFreeChartEntity");
      boolean boolean0 = jFreeChartEntity0.equals(jFreeChartEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.entity.JFreeChartEntity", plot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_BOX, jFreeChart0, "org.jfree.chart.entity.JFreeChartEntity", "org.jfree.chart.entity.JFreeChartEntity");
      boolean boolean0 = jFreeChartEntity0.equals("zgU9+4HF(hETs;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.entity.JFreeChartEntity", plot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_BOX, jFreeChart0, "org.jfree.chart.entity.JFreeChartEntity", "org.jfree.chart.entity.JFreeChartEntity");
      JFreeChart jFreeChart1 = jFreeChartEntity0.getChart();
      assertNull(jFreeChart1.getID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.entity.JFreeChartEntity", plot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_BOX, jFreeChart0, "org.jfree.chart.entity.JFreeChartEntity", "org.jfree.chart.entity.JFreeChartEntity");
      jFreeChartEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("", plot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_CIRCLE, jFreeChart0);
      Object object0 = jFreeChartEntity0.clone();
      assertNotSame(object0, jFreeChartEntity0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.entity.JFreeChartEntity", plot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(plot0.DEFAULT_LEGEND_ITEM_BOX, jFreeChart0, "org.jfree.chart.entity.JFreeChartEntity", "org.jfree.chart.entity.JFreeChartEntity");
      String string0 = jFreeChartEntity0.toString();
      assertEquals("JFreeChartEntity: tooltip = org.jfree.chart.entity.JFreeChartEntity", string0);
  }
}
