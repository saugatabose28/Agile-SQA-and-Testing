/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:01:32 GMT 2023
 */

package org.jfree.chart.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.entity.AxisEntity;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AxisEntity_ESTest extends AxisEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(axis0).toString();
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0, "");
      Axis axis1 = axisEntity0.getAxis();
      AxisEntity axisEntity1 = null;
      try {
        axisEntity1 = new AxisEntity((Shape) null, axis1, "org.jfree.chart.axis.CyclicNumberAxis", "AxisEntity: tooltip = ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = null;
      try {
        axisEntity0 = new AxisEntity(shape0, (Axis) null, "UE=5?7p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AxisEntity axisEntity0 = null;
      try {
        axisEntity0 = new AxisEntity((Shape) null, (Axis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0, "#/+vUC");
      Object object0 = axisEntity0.clone();
      assertTrue(object0.equals((Object)axisEntity0));
      
      axisEntity0.setURLText("");
      boolean boolean0 = axisEntity0.equals(object0);
      assertFalse(object0.equals((Object)axisEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0, "Date", "[Q'");
      Object object0 = axisEntity0.clone();
      assertTrue(object0.equals((Object)axisEntity0));
      
      axisEntity0.setToolTipText("AxisEntity: tooltip = Date");
      boolean boolean0 = axisEntity0.equals(object0);
      assertFalse(object0.equals((Object)axisEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0, "fUfj[n#M|0i!{%", "fUfj[n#M|0i!{%");
      Object object0 = axisEntity0.clone();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      axisEntity0.setArea(shape1);
      boolean boolean0 = axisEntity0.equals(object0);
      assertFalse(object0.equals((Object)axisEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0, "#/+vUC");
      Object object0 = axisEntity0.clone();
      boolean boolean0 = axisEntity0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0, "#/+vUC");
      boolean boolean0 = axisEntity0.equals(axisEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0, "#/+vUC");
      boolean boolean0 = axisEntity0.equals("AxisEntity: tooltip = #/+vUC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0, "GMT");
      String string0 = axisEntity0.toString();
      assertEquals("AxisEntity: tooltip = GMT", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0);
      AxisEntity axisEntity1 = (AxisEntity)axisEntity0.clone();
      assertNull(axisEntity1.getURLText());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Axis axis0 = mock(Axis.class, new ViolatedAssumptionAnswer());
      AxisEntity axisEntity0 = new AxisEntity(shape0, axis0, "GMT");
      axisEntity0.hashCode();
  }
}
