/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:43:53 GMT 2023
 */

package org.jfree.chart.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.entity.CategoryItemEntity;
import org.jfree.chart.imagemap.ToolTipTagFragmentGenerator;
import org.jfree.chart.imagemap.URLTagFragmentGenerator;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoryItemEntity_ESTest extends CategoryItemEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Dimension dimension0 = mock(Dimension.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(dimension0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertNotNull(rectangle0);
      
      Rectangle rectangle1 = (Rectangle)rectangle0.getBounds2D();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertNotNull(rectangle1);
      
      Rectangle rectangle2 = (Rectangle)rectangle0.createIntersection(rectangle1);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle2.width);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertTrue(rectangle2.equals((Object)rectangle0));
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertNotNull(rectangle2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[3] = "";
      Number[][] numberArray0 = new Number[0][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, stringArray0.length);
      assertEquals(0, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(8, stringArray0.length);
      assertEquals(0, numberArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(rectangle2, "", "", slidingCategoryDataset0, stringArray0[7], "");
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle2.width);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle0.equals((Object)rectangle2));
      assertTrue(rectangle1.equals((Object)rectangle2));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertTrue(rectangle2.equals((Object)rectangle0));
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals("", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals(8, stringArray0.length);
      assertEquals(0, numberArray0.length);
      assertNotNull(categoryItemEntity0);
      
      List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, stringArray0.length);
      assertEquals(0, numberArray0.length);
      assertNotNull(list0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryItemEntity categoryItemEntity1 = new CategoryItemEntity(rectangle1, "", "", slidingCategoryDataset0, 0, comparable0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle0.equals((Object)rectangle2));
      assertFalse(categoryItemEntity1.equals((Object)categoryItemEntity0));
      assertTrue(rectangle1.equals((Object)rectangle2));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals("", categoryItemEntity1.getURLText());
      assertEquals("", categoryItemEntity1.getToolTipText());
      assertEquals("rect", categoryItemEntity1.getShapeType());
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(8, stringArray0.length);
      assertEquals(0, numberArray0.length);
      assertNotNull(categoryItemEntity1);
      
      int int0 = slidingCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(8, stringArray0.length);
      assertEquals(0, numberArray0.length);
      
      // Undeclared exception!
      try { 
        categoryItemEntity0.equals(categoryItemEntity1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.entity.CategoryItemEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(point0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertNotNull(rectangle0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangle0.getFrame();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      boolean boolean0 = rectangle0.contains((Rectangle2D) rectangle2D_Double0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertFalse(boolean0);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      
      rectangle0.setLocation(0, 0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      boolean boolean1 = defaultCategoryDataset0.equals("org.jfree.data.general.DatasetGroup");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(rectangle0, "series.default-prefix", "J\"c1,th~W=zvW'", defaultCategoryDataset0, "series.default-prefix", 0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("J\"c1,th~W=zvW'", categoryItemEntity0.getURLText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertNotNull(categoryItemEntity0);
      
      int int0 = defaultCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      categoryItemEntity0.setURLText("th5{[hT/(l@hFS");
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("th5{[hT/(l@hFS", categoryItemEntity0.getURLText());
      
      categoryItemEntity0.setURLText("");
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      
      String string0 = categoryItemEntity0.getShapeCoords();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals("0,0,1,1", string0);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertNotNull(string0);
      
      categoryItemEntity0.setColumnKey(0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)categoryItemEntity0.getDataset();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertNotNull(defaultCategoryDataset1);
      
      Comparable comparable0 = categoryItemEntity0.getRowKey();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals("series.default-prefix", comparable0);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertNotNull(comparable0);
      
      List list0 = defaultCategoryDataset0.getRowKeys();
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string1 = categoryItemEntity0.toString();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)comparable0));
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertNotNull(string1);
      
      Comparable comparable1 = categoryItemEntity0.getColumnKey();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertFalse(comparable1.equals((Object)comparable0));
      assertEquals(0, comparable1);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertNotNull(comparable1);
      
      String string2 = categoryItemEntity0.toString();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)comparable0));
      assertTrue(string2.equals((Object)string1));
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertNotNull(string2);
      
      categoryItemEntity0.setDataset(defaultCategoryDataset0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      
      Comparable comparable2 = categoryItemEntity0.getColumnKey();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertFalse(comparable2.equals((Object)comparable0));
      assertEquals(0, comparable2);
      assertSame(comparable2, comparable1);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertNotNull(comparable2);
      
      DefaultCategoryDataset defaultCategoryDataset2 = (DefaultCategoryDataset)categoryItemEntity0.getDataset();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertSame(defaultCategoryDataset2, defaultCategoryDataset0);
      assertSame(defaultCategoryDataset2, defaultCategoryDataset1);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset2.getNotify());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertNotNull(defaultCategoryDataset2);
      
      categoryItemEntity0.setRowKey("CategoryItemEntity: rowKey=series.default-prefix, columnKey=0, dataset=org.jfree.data.category.DefaultCategoryDataset@367");
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      
      DefaultCategoryDataset defaultCategoryDataset3 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset2));
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset3.getNotify());
      assertNotNull(defaultCategoryDataset3);
      
      categoryItemEntity0.setDataset(defaultCategoryDataset3);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset2));
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset0));
      assertSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset3, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset3, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset3, defaultCategoryDataset1);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(defaultCategoryDataset3.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      
      Comparable comparable3 = categoryItemEntity0.getColumnKey();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertFalse(comparable3.equals((Object)comparable0));
      assertEquals(0, comparable3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertSame(comparable3, comparable2);
      assertSame(comparable3, comparable1);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertNotNull(comparable3);
      
      boolean boolean2 = categoryItemEntity0.equals(categoryItemEntity0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      
      String string3 = categoryItemEntity0.toString();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)comparable0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertNotNull(string3);
      
      String string4 = categoryItemEntity0.toString();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)comparable0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertNotNull(string4);
      
      DefaultCategoryDataset defaultCategoryDataset4 = (DefaultCategoryDataset)categoryItemEntity0.getDataset();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset4.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset4.equals((Object)defaultCategoryDataset2));
      assertTrue(defaultCategoryDataset4.equals((Object)defaultCategoryDataset1));
      assertSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset4);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset4, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset4, defaultCategoryDataset1);
      assertSame(defaultCategoryDataset4, defaultCategoryDataset3);
      assertNotSame(defaultCategoryDataset4, defaultCategoryDataset0);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("series.default-prefix", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertTrue(defaultCategoryDataset4.getNotify());
      assertNotNull(defaultCategoryDataset4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&t";
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 673;
      intArray0[4] = 0;
      polygon0.ypoints = intArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1, stringArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      slidingCategoryDataset0.validateObject();
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1, stringArray0.length);
      
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(polygon0, "&t", "&t", slidingCategoryDataset0, "&t", "&t");
      assertEquals(0, polygon0.npoints);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals("&t", categoryItemEntity0.getToolTipText());
      assertEquals("poly", categoryItemEntity0.getShapeType());
      assertEquals("&t", categoryItemEntity0.getURLText());
      assertEquals(1, stringArray0.length);
      assertNotNull(categoryItemEntity0);
      
      Comparable comparable0 = categoryItemEntity0.getRowKey();
      assertEquals(0, polygon0.npoints);
      assertEquals("&t", comparable0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals("&t", categoryItemEntity0.getToolTipText());
      assertEquals("poly", categoryItemEntity0.getShapeType());
      assertEquals("&t", categoryItemEntity0.getURLText());
      assertEquals(1, stringArray0.length);
      assertNotNull(comparable0);
      
      String string0 = categoryItemEntity0.toString();
      assertEquals(0, polygon0.npoints);
      assertFalse(string0.equals((Object)comparable0));
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals("&t", categoryItemEntity0.getToolTipText());
      assertEquals("poly", categoryItemEntity0.getShapeType());
      assertEquals("&t", categoryItemEntity0.getURLText());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        categoryItemEntity0.setDataset((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      polygon0.reset();
      assertEquals(0, polygon0.npoints);
      
      Rectangle rectangle0 = (Rectangle)polygon0.getBounds2D();
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertNotNull(rectangle0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(rectangle0, "wsw", "", defaultCategoryDataset0, "wsw", "wsw");
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("wsw", categoryItemEntity0.getToolTipText());
      assertNotNull(categoryItemEntity0);
      
      Comparable comparable0 = categoryItemEntity0.getColumnKey();
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals("wsw", comparable0);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("wsw", categoryItemEntity0.getToolTipText());
      assertNotNull(comparable0);
      
      Comparable comparable1 = categoryItemEntity0.getRowKey();
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals("wsw", comparable1);
      assertSame(comparable1, comparable0);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("wsw", categoryItemEntity0.getToolTipText());
      assertNotNull(comparable1);
      
      categoryItemEntity0.setRowKey(comparable1);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertSame(comparable1, comparable0);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("wsw", categoryItemEntity0.getToolTipText());
      
      CategoryItemEntity categoryItemEntity1 = new CategoryItemEntity(polygon0, "'],Style[", (String) null, defaultCategoryDataset0, comparable0, "");
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertFalse(categoryItemEntity1.equals((Object)categoryItemEntity0));
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("wsw", categoryItemEntity0.getToolTipText());
      assertEquals("'],Style[", categoryItemEntity1.getToolTipText());
      assertEquals("poly", categoryItemEntity1.getShapeType());
      assertNull(categoryItemEntity1.getURLText());
      assertNotNull(categoryItemEntity1);
      
      boolean boolean0 = categoryItemEntity0.equals(categoryItemEntity1);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertFalse(categoryItemEntity0.equals((Object)categoryItemEntity1));
      assertFalse(categoryItemEntity1.equals((Object)categoryItemEntity0));
      assertFalse(boolean0);
      assertNotSame(categoryItemEntity0, categoryItemEntity1);
      assertSame(comparable0, comparable1);
      assertNotSame(categoryItemEntity1, categoryItemEntity0);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("wsw", categoryItemEntity0.getToolTipText());
      assertEquals("'],Style[", categoryItemEntity1.getToolTipText());
      assertEquals("poly", categoryItemEntity1.getShapeType());
      assertNull(categoryItemEntity1.getURLText());
      
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(toolTipTagFragmentGenerator0).generateToolTipFragment(anyString());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      String string0 = categoryItemEntity0.getImageMapAreaTag(toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertFalse(categoryItemEntity0.equals((Object)categoryItemEntity1));
      assertFalse(string0.equals((Object)comparable0));
      assertFalse(string0.equals((Object)comparable1));
      assertEquals("<area shape=\"rect\" coords=\"0,0,1,1\"null nohref=\"nohref\"/>", string0);
      assertNotSame(categoryItemEntity0, categoryItemEntity1);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("wsw", categoryItemEntity0.getToolTipText());
      assertNotNull(string0);
      
      boolean boolean1 = categoryItemEntity0.equals((Object) null);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertFalse(categoryItemEntity0.equals((Object)categoryItemEntity1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(categoryItemEntity0, categoryItemEntity1);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("wsw", categoryItemEntity0.getToolTipText());
      
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getValue((Comparable) "", (Comparable) "<area shape=\"rect\" coords=\"0,0,1,1\"null nohref=\"nohref\"/>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: <area shape=\"rect\" coords=\"0,0,1,1\"null nohref=\"nohref\"/>
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      boolean boolean0 = polygon0.contains(0, 1);
      assertEquals(0, polygon0.npoints);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(polygon0, (String) null, (String) null, defaultIntervalCategoryDataset0, stringArray0[0], (Comparable) null);
      assertEquals(0, polygon0.npoints);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(categoryItemEntity0.getToolTipText());
      assertEquals("poly", categoryItemEntity0.getShapeType());
      assertNull(categoryItemEntity0.getURLText());
      assertEquals(1, stringArray0.length);
      assertNotNull(categoryItemEntity0);
      
      categoryItemEntity0.setRowKey(0);
      assertEquals(0, polygon0.npoints);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(categoryItemEntity0.getToolTipText());
      assertEquals("poly", categoryItemEntity0.getShapeType());
      assertNull(categoryItemEntity0.getURLText());
      assertEquals(1, stringArray0.length);
      
      String string0 = categoryItemEntity0.toString();
      assertEquals(0, polygon0.npoints);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(categoryItemEntity0.getToolTipText());
      assertEquals("poly", categoryItemEntity0.getShapeType());
      assertNull(categoryItemEntity0.getURLText());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      Comparable comparable0 = categoryItemEntity0.getColumnKey();
      assertEquals(0, polygon0.npoints);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(categoryItemEntity0.getToolTipText());
      assertEquals("poly", categoryItemEntity0.getShapeType());
      assertNull(categoryItemEntity0.getURLText());
      assertEquals(1, stringArray0.length);
      assertNull(comparable0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)categoryItemEntity0.getDataset();
      assertEquals(0, polygon0.npoints);
      assertSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(categoryItemEntity0.getToolTipText());
      assertEquals("poly", categoryItemEntity0.getShapeType());
      assertNull(categoryItemEntity0.getURLText());
      assertTrue(defaultIntervalCategoryDataset1.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(1, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      categoryItemEntity0.setColumnKey("CategoryItemEntity: rowKey=0, columnKey=null, dataset=org.jfree.data.category.DefaultIntervalCategoryDataset@2");
      assertEquals(0, polygon0.npoints);
      assertSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(categoryItemEntity0.getToolTipText());
      assertEquals("poly", categoryItemEntity0.getShapeType());
      assertNull(categoryItemEntity0.getURLText());
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertNotNull(rectangle0);
      
      String string0 = "";
      CategoryItemEntity categoryItemEntity0 = null;
      try {
        categoryItemEntity0 = new CategoryItemEntity(rectangle0, "", "", (CategoryDataset) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertNotNull(rectangle0);
      
      Rectangle rectangle1 = (Rectangle)rectangle0.getBounds2D();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertNotNull(rectangle1);
      
      Rectangle rectangle2 = (Rectangle)rectangle0.createIntersection(rectangle1);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.width);
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertNotNull(rectangle2);
      
      rectangle0.setLocation((-1), (-1));
      assertEquals(0, rectangle0.width);
      assertEquals((-1), rectangle0.x);
      assertEquals((-1), rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertEquals((-1.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals((-1.0), rectangle0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      
      rectangle0.add(0.0, 0.0);
      assertEquals(1, rectangle0.width);
      assertEquals((-1), rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals((-1), rectangle0.y);
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(rectangle2, "", "", defaultCategoryDataset0, 1, (-1));
      assertEquals(1, rectangle0.width);
      assertEquals((-1), rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals((-1), rectangle0.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.width);
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle2));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("", categoryItemEntity0.getToolTipText());
      assertNotNull(categoryItemEntity0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset1.getNotify());
      assertNotNull(defaultCategoryDataset1);
      
      defaultCategoryDataset0.clear();
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      categoryItemEntity0.setDataset(defaultCategoryDataset1);
      assertEquals(1, rectangle0.width);
      assertEquals((-1), rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals((-1), rectangle0.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.width);
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle2));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("", categoryItemEntity0.getToolTipText());
      assertTrue(defaultCategoryDataset1.getNotify());
      
      defaultCategoryDataset0.addValue(4.0, (Comparable) (-1), (Comparable) (-1));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      Comparable comparable0 = categoryItemEntity0.getRowKey();
      assertEquals(1, rectangle0.width);
      assertEquals((-1), rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals((-1), rectangle0.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.width);
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle2));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertEquals(1, comparable0);
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("", categoryItemEntity0.getToolTipText());
      assertNotNull(comparable0);
      
      Comparable comparable1 = categoryItemEntity0.getColumnKey();
      assertEquals(1, rectangle0.width);
      assertEquals((-1), rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals((-1), rectangle0.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.width);
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle2));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertFalse(comparable1.equals((Object)comparable0));
      assertEquals((-1), comparable1);
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(comparable1, comparable0);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("", categoryItemEntity0.getToolTipText());
      assertNotNull(comparable1);
      
      DefaultCategoryDataset defaultCategoryDataset2 = (DefaultCategoryDataset)categoryItemEntity0.getDataset();
      assertEquals(1, rectangle0.width);
      assertEquals((-1), rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals((-1), rectangle0.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.width);
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle2));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertFalse(defaultCategoryDataset2.equals((Object)defaultCategoryDataset0));
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset0);
      assertSame(defaultCategoryDataset2, defaultCategoryDataset1);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("", categoryItemEntity0.getToolTipText());
      assertTrue(defaultCategoryDataset2.getNotify());
      assertNotNull(defaultCategoryDataset2);
      
      DefaultCategoryDataset defaultCategoryDataset3 = (DefaultCategoryDataset)categoryItemEntity0.getDataset();
      assertEquals(1, rectangle0.width);
      assertEquals((-1), rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals((-1), rectangle0.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.width);
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle2));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertFalse(defaultCategoryDataset3.equals((Object)defaultCategoryDataset0));
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertSame(defaultCategoryDataset3, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset3, defaultCategoryDataset0);
      assertSame(defaultCategoryDataset3, defaultCategoryDataset2);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("", categoryItemEntity0.getToolTipText());
      assertTrue(defaultCategoryDataset3.getNotify());
      assertNotNull(defaultCategoryDataset3);
      
      categoryItemEntity0.setRowKey("");
      assertEquals(1, rectangle0.width);
      assertEquals((-1), rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals((-1), rectangle0.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.width);
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle2));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("", categoryItemEntity0.getToolTipText());
      
      String string0 = categoryItemEntity0.toString();
      assertEquals(1, rectangle0.width);
      assertEquals((-1), rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals((-1), rectangle0.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.width);
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertTrue(rectangle1.equals((Object)rectangle2));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("", categoryItemEntity0.getToolTipText());
      assertNotNull(string0);
      
      String string1 = categoryItemEntity0.toString();
      assertEquals(1, rectangle0.width);
      assertEquals((-1), rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals((-1), rectangle0.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.width);
      assertFalse(rectangle0.equals((Object)rectangle2));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(rectangle1.equals((Object)rectangle2));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle2.equals((Object)rectangle0));
      assertTrue(rectangle2.equals((Object)rectangle1));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertNotSame(rectangle0, rectangle2);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle1, rectangle2);
      assertNotSame(rectangle2, rectangle0);
      assertNotSame(rectangle2, rectangle1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertEquals((-1.0), rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getY(), 0.01);
      assertEquals(0.0, rectangle2.getX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2.getWidth(), 0.01);
      assertTrue(rectangle2.isEmpty());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("", categoryItemEntity0.getToolTipText());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertNotNull(rectangle0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangle0.getFrame();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(rectangle2D_Double0, "8!RDzgJM[5^", "8!RDzgJM[5^", defaultCategoryDataset0, 0, 0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("8!RDzgJM[5^", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("8!RDzgJM[5^", categoryItemEntity0.getURLText());
      assertNotNull(categoryItemEntity0);
      
      rectangle0.width = (-171);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-171.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-171.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-85.5), rectangle0.getCenterX(), 0.01);
      
      String string0 = categoryItemEntity0.toString();
      assertEquals((-171), rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-171.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-171.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-85.5), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("8!RDzgJM[5^", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("8!RDzgJM[5^", categoryItemEntity0.getURLText());
      assertNotNull(string0);
      
      CategoryItemEntity categoryItemEntity1 = (CategoryItemEntity)categoryItemEntity0.clone();
      assertEquals((-171), rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertTrue(categoryItemEntity1.equals((Object)categoryItemEntity0));
      assertNotSame(categoryItemEntity0, categoryItemEntity1);
      assertNotSame(categoryItemEntity1, categoryItemEntity0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-171.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-171.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-85.5), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("8!RDzgJM[5^", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("8!RDzgJM[5^", categoryItemEntity0.getURLText());
      assertEquals("8!RDzgJM[5^", categoryItemEntity1.getToolTipText());
      assertEquals("rect", categoryItemEntity1.getShapeType());
      assertEquals("8!RDzgJM[5^", categoryItemEntity1.getURLText());
      assertNotNull(categoryItemEntity1);
      
      boolean boolean0 = categoryItemEntity0.equals(categoryItemEntity1);
      assertEquals((-171), rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertTrue(categoryItemEntity0.equals((Object)categoryItemEntity1));
      assertTrue(categoryItemEntity1.equals((Object)categoryItemEntity0));
      assertTrue(boolean0);
      assertNotSame(categoryItemEntity0, categoryItemEntity1);
      assertNotSame(categoryItemEntity1, categoryItemEntity0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-171.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-171.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-85.5), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("8!RDzgJM[5^", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("8!RDzgJM[5^", categoryItemEntity0.getURLText());
      assertEquals("8!RDzgJM[5^", categoryItemEntity1.getToolTipText());
      assertEquals("rect", categoryItemEntity1.getShapeType());
      assertEquals("8!RDzgJM[5^", categoryItemEntity1.getURLText());
      
      categoryItemEntity0.setColumnKey(0);
      assertEquals((-171), rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertTrue(categoryItemEntity0.equals((Object)categoryItemEntity1));
      assertNotSame(categoryItemEntity0, categoryItemEntity1);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-171.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals((-171.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-85.5), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("8!RDzgJM[5^", categoryItemEntity0.getToolTipText());
      assertEquals("rect", categoryItemEntity0.getShapeType());
      assertEquals("8!RDzgJM[5^", categoryItemEntity0.getURLText());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      polygon0.addPoint(0, 0);
      assertEquals(1, polygon0.npoints);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(polygon0, ", dataset=", "/*X+zB.K=IM", defaultCategoryDataset0, 1, "/*X+zB.K=IM");
      assertEquals(1, polygon0.npoints);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("poly", categoryItemEntity0.getShapeType());
      assertEquals(", dataset=", categoryItemEntity0.getToolTipText());
      assertEquals("/*X+zB.K=IM", categoryItemEntity0.getURLText());
      assertNotNull(categoryItemEntity0);
      
      categoryItemEntity0.setRowKey(1);
      assertEquals(1, polygon0.npoints);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("poly", categoryItemEntity0.getShapeType());
      assertEquals(", dataset=", categoryItemEntity0.getToolTipText());
      assertEquals("/*X+zB.K=IM", categoryItemEntity0.getURLText());
      
      Comparable comparable0 = categoryItemEntity0.getRowKey();
      assertEquals(1, polygon0.npoints);
      assertEquals(1, comparable0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("poly", categoryItemEntity0.getShapeType());
      assertEquals(", dataset=", categoryItemEntity0.getToolTipText());
      assertEquals("/*X+zB.K=IM", categoryItemEntity0.getURLText());
      assertNotNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-26);
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (-1);
      intArray1[2] = (-1);
      intArray1[3] = (-26);
      intArray1[4] = (-1);
      intArray1[5] = 443;
      Polygon polygon0 = new Polygon(intArray0, intArray1, 0);
      assertEquals(0, polygon0.npoints);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), (-1), (-1), 0, (-26)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-26), (-1), 443}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(polygon0);
      
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-1);
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) (-1);
      doubleArray4[1] = (-832.029);
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 443;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (double) (-1);
      doubleArray5[1] = (double) (-26);
      doubleArray5[2] = (-832.029);
      doubleArray5[3] = (double) (-1);
      doubleArray5[4] = (double) (-1);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (double) 0;
      doubleArray6[3] = (double) (-26);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (double) (-1);
      doubleArray7[1] = (double) (-1);
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(polygon0, "", "", defaultIntervalCategoryDataset0, (-1.0), (-1.0));
      assertEquals(0, polygon0.npoints);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), (-1), (-1), 0, (-26)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-26), (-1), 443}, intArray1);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals("", categoryItemEntity0.getToolTipText());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("poly", categoryItemEntity0.getShapeType());
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(categoryItemEntity0);
      
      CategoryItemEntity categoryItemEntity1 = new CategoryItemEntity(polygon0, "", "vN[/BIg", defaultIntervalCategoryDataset0, 0.0, (-1));
      assertEquals(0, polygon0.npoints);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(categoryItemEntity1.equals((Object)categoryItemEntity0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), (-1), (-1), 0, (-26)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-26), (-1), 443}, intArray1);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals("", categoryItemEntity1.getToolTipText());
      assertEquals("poly", categoryItemEntity1.getShapeType());
      assertEquals("vN[/BIg", categoryItemEntity1.getURLText());
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(categoryItemEntity1);
      
      boolean boolean0 = categoryItemEntity0.equals(categoryItemEntity1);
      assertEquals(0, polygon0.npoints);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(categoryItemEntity0.equals((Object)categoryItemEntity1));
      assertFalse(categoryItemEntity1.equals((Object)categoryItemEntity0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), (-1), (-1), 0, (-26)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-26), (-1), 443}, intArray1);
      assertFalse(boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(categoryItemEntity0, categoryItemEntity1);
      assertNotSame(categoryItemEntity1, categoryItemEntity0);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals("", categoryItemEntity0.getToolTipText());
      assertEquals("", categoryItemEntity0.getURLText());
      assertEquals("poly", categoryItemEntity0.getShapeType());
      assertEquals("", categoryItemEntity1.getToolTipText());
      assertEquals("poly", categoryItemEntity1.getShapeType());
      assertEquals("vN[/BIg", categoryItemEntity1.getURLText());
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Rectangle2D rectangle2D0 = rectangle0.getFrame();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Rectangle2D.union(rectangle0, rectangle0, rectangle2D0);
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(rectangle2D0, "org.jfree.data.DefaultKeyedValues2D", "org.jfree.data.DefaultKeyedValues2D", defaultCategoryDataset0, 0, 0);
      Object object0 = categoryItemEntity0.clone();
      boolean boolean0 = categoryItemEntity0.equals(object0);
      assertTrue(boolean0);
      
      categoryItemEntity0.getDataset();
      assertTrue(categoryItemEntity0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(6, 6);
      String[] stringArray0 = new String[0];
      Number[][] numberArray0 = new Number[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(rectangle0, "", "", defaultIntervalCategoryDataset0, "", 6);
      boolean boolean0 = categoryItemEntity0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(37, 37);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(rectangle0, "~", "b2_2~", defaultCategoryDataset0, 37, "~");
      Comparable comparable0 = categoryItemEntity0.getColumnKey();
      assertEquals("~", comparable0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Number[][] numberArray0 = new Number[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(polygon0, (String) null, (String) null, defaultIntervalCategoryDataset0, (Comparable) null, (Comparable) null);
      String string0 = categoryItemEntity0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(point0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(rectangle0, "/Eg", "/Eg", defaultCategoryDataset0, 0, 0);
      Comparable comparable0 = categoryItemEntity0.getColumnKey();
      CategoryItemEntity categoryItemEntity1 = (CategoryItemEntity)categoryItemEntity0.clone();
      categoryItemEntity1.setRowKey(0);
      boolean boolean0 = categoryItemEntity0.equals(categoryItemEntity1);
      boolean boolean1 = categoryItemEntity0.equals(categoryItemEntity0);
      assertTrue(boolean1);
      
      Comparable comparable1 = categoryItemEntity0.getRowKey();
      CategoryItemEntity categoryItemEntity2 = new CategoryItemEntity(rectangle0, "Yk*:eNRw!K.~PA", "Yk*:eNRw!K.~PA", defaultCategoryDataset0, comparable1, "/Eg");
      boolean boolean2 = categoryItemEntity0.equals(categoryItemEntity2);
      assertFalse(boolean2 == boolean0);
      assertNotSame(comparable1, comparable0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Dimension dimension0 = mock(Dimension.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle2D rectangle2D0 = rectangle0.getBounds2D();
      Rectangle2D rectangle2D1 = rectangle0.createIntersection(rectangle2D0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Number[][] numberArray0 = new Number[0][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(rectangle2D1, "", "", slidingCategoryDataset0, "", "");
      defaultIntervalCategoryDataset0.getColumnKeys();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("id", (String) null).when(comparable0).toString();
      CategoryItemEntity categoryItemEntity1 = new CategoryItemEntity(rectangle2D0, "", "", slidingCategoryDataset0, 0, comparable0);
      slidingCategoryDataset0.getRowCount();
      boolean boolean0 = categoryItemEntity0.equals(categoryItemEntity1);
      Object object0 = categoryItemEntity0.clone();
      boolean boolean1 = categoryItemEntity0.equals(object0);
      assertFalse(boolean1 == boolean0);
      
      categoryItemEntity0.clone();
      categoryItemEntity0.equals("");
      boolean boolean2 = categoryItemEntity0.equals("zJ)oJir}/I3.5eR*SE");
      String string0 = categoryItemEntity1.toString();
      categoryItemEntity1.equals("zJ)oJir}/I3.5eR*SE");
      CategoryItemEntity categoryItemEntity2 = new CategoryItemEntity(rectangle0, "org.jfree.chart.entity.CategoryItemEntity", "", slidingCategoryDataset0, "", "org.jfree.chart.entity.CategoryItemEntity");
      boolean boolean3 = categoryItemEntity1.equals(categoryItemEntity1);
      assertFalse(boolean3 == boolean2);
      
      categoryItemEntity0.getDataset();
      String string1 = categoryItemEntity1.toString();
      assertFalse(string1.equals((Object)string0));
      
      categoryItemEntity0.getDataset();
      assertTrue(categoryItemEntity0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle2D rectangle2D0 = rectangle0.getFrame();
      rectangle0.contains(rectangle2D0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.equals("J\"c1,th~W=zvW'");
      CategoryItemEntity categoryItemEntity0 = new CategoryItemEntity(rectangle0, "series.default-prefix", "J\"c1,th~W=zvW'", defaultCategoryDataset0, "series.default-prefix", 0);
      defaultCategoryDataset0.getRowCount();
      categoryItemEntity0.setURLText("");
      String string0 = categoryItemEntity0.getShapeCoords();
      categoryItemEntity0.setColumnKey(0);
      defaultCategoryDataset0.getRowKeys();
      categoryItemEntity0.toString();
      categoryItemEntity0.getColumnKey();
      categoryItemEntity0.toString();
      categoryItemEntity0.setDataset(defaultCategoryDataset0);
      categoryItemEntity0.getDataset();
      categoryItemEntity0.setRowKey("CategoryItemEntity: rowKey=series.default-prefix, columnKey=0, dataset=org.jfree.data.category.DefaultCategoryDataset@367");
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      categoryItemEntity0.getColumnKey();
      categoryItemEntity0.clone();
      String string1 = categoryItemEntity0.toString();
      assertFalse(string1.equals((Object)string0));
  }
}
