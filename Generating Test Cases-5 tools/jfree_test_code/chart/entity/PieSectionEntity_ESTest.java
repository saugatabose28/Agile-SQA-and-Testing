/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:54:33 GMT 2023
 */

package org.jfree.chart.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Shape;
import java.awt.geom.PathIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.entity.PieSectionEntity;
import org.jfree.chart.imagemap.ToolTipTagFragmentGenerator;
import org.jfree.chart.imagemap.URLTagFragmentGenerator;
import org.jfree.data.general.PieDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PieSectionEntity_ESTest extends PieSectionEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<String> pieDataset0 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, 6, 3790, comparable0, "7U1X&8]:jFL<p/xv/p", "7U1X&8]:jFL<p/xv/p");
      assertEquals("7U1X&8]:jFL<p/xv/p", pieSectionEntity0.getToolTipText());
      assertEquals(3790, pieSectionEntity0.getSectionIndex());
      assertEquals(6, pieSectionEntity0.getPieIndex());
      assertEquals("7U1X&8]:jFL<p/xv/p", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertNotNull(pieSectionEntity0);
      
      pieSectionEntity0.setURLText("7U1X&8]:jFL<p/xv/p");
      assertEquals("7U1X&8]:jFL<p/xv/p", pieSectionEntity0.getToolTipText());
      assertEquals(3790, pieSectionEntity0.getSectionIndex());
      assertEquals(6, pieSectionEntity0.getPieIndex());
      assertEquals("7U1X&8]:jFL<p/xv/p", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      
      boolean boolean0 = pieSectionEntity0.equals(pieSectionEntity0);
      assertTrue(boolean0);
      assertEquals("7U1X&8]:jFL<p/xv/p", pieSectionEntity0.getToolTipText());
      assertEquals(3790, pieSectionEntity0.getSectionIndex());
      assertEquals(6, pieSectionEntity0.getPieIndex());
      assertEquals("7U1X&8]:jFL<p/xv/p", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      pieSectionEntity0.setArea(shape1);
      assertEquals("7U1X&8]:jFL<p/xv/p", pieSectionEntity0.getToolTipText());
      assertEquals(3790, pieSectionEntity0.getSectionIndex());
      assertEquals(6, pieSectionEntity0.getPieIndex());
      assertEquals("7U1X&8]:jFL<p/xv/p", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      
      PieDataset<String> pieDataset1 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      pieSectionEntity0.setDataset(pieDataset1);
      assertEquals("7U1X&8]:jFL<p/xv/p", pieSectionEntity0.getToolTipText());
      assertEquals(3790, pieSectionEntity0.getSectionIndex());
      assertEquals(6, pieSectionEntity0.getPieIndex());
      assertEquals("7U1X&8]:jFL<p/xv/p", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Comparable<PieSectionEntity> comparable0 = (Comparable<PieSectionEntity>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, (PieDataset) null, 0, 0, comparable0, "');\" onMouseOut=\"return nd();\"", "');\" onMouseOut=\"return nd();\"");
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getURLText());
      assertNotNull(pieSectionEntity0);
      
      PieSectionEntity pieSectionEntity1 = (PieSectionEntity)pieSectionEntity0.clone();
      assertTrue(pieSectionEntity1.equals((Object)pieSectionEntity0));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity1, pieSectionEntity0);
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getURLText());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity1.getToolTipText());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity1.getURLText());
      assertEquals(0, pieSectionEntity1.getPieIndex());
      assertEquals(0, pieSectionEntity1.getSectionIndex());
      assertEquals("poly", pieSectionEntity1.getShapeType());
      assertNotNull(pieSectionEntity1);
      
      boolean boolean0 = pieSectionEntity0.equals(pieSectionEntity1);
      assertTrue(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertTrue(pieSectionEntity1.equals((Object)pieSectionEntity0));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity1, pieSectionEntity0);
      assertTrue(boolean0);
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getURLText());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity1.getToolTipText());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity1.getURLText());
      assertEquals(0, pieSectionEntity1.getPieIndex());
      assertEquals(0, pieSectionEntity1.getSectionIndex());
      assertEquals("poly", pieSectionEntity1.getShapeType());
      
      int int0 = pieSectionEntity0.getPieIndex();
      assertTrue(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals(0, int0);
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getURLText());
      
      pieSectionEntity0.setToolTipText("');\" onMouseOut=\"return nd();\"");
      assertTrue(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getURLText());
      
      int int1 = pieSectionEntity0.hashCode();
      assertTrue(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertFalse(int1 == int0);
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getURLText());
      
      pieSectionEntity0.setDataset((PieDataset) null);
      assertTrue(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getURLText());
      
      PieDataset pieDataset0 = pieSectionEntity0.getDataset();
      assertTrue(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getURLText());
      assertNull(pieDataset0);
      
      pieSectionEntity0.setSectionKey("');\" onMouseOut=\"return nd();\"");
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getURLText());
      
      pieSectionEntity0.setDataset((PieDataset) null);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getURLText());
      
      pieSectionEntity0.setPieIndex(0);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getURLText());
      
      PieDataset pieDataset1 = pieSectionEntity0.getDataset();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("');\" onMouseOut=\"return nd();\"", pieSectionEntity0.getURLText());
      assertNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<Integer> pieDataset0 = (PieDataset<Integer>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pieDataset0).toString();
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, 10, 914, 914, "", "");
      assertEquals(10, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals(914, pieSectionEntity0.getSectionIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertNotNull(pieSectionEntity0);
      
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<Integer> pieDataset1 = (PieDataset<Integer>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity1 = new PieSectionEntity(shape1, pieDataset1, (-3124), 10, "", "V}iV_,", "Jd 9N;?o6gO<\"");
      assertFalse(pieSectionEntity1.equals((Object)pieSectionEntity0));
      assertEquals("V}iV_,", pieSectionEntity1.getToolTipText());
      assertEquals("Jd 9N;?o6gO<\"", pieSectionEntity1.getURLText());
      assertEquals("poly", pieSectionEntity1.getShapeType());
      assertEquals((-3124), pieSectionEntity1.getPieIndex());
      assertEquals(10, pieSectionEntity1.getSectionIndex());
      assertNotNull(pieSectionEntity1);
      
      Shape shape2 = mock(Shape.class, new ViolatedAssumptionAnswer());
      pieSectionEntity1.setArea(shape2);
      assertFalse(pieSectionEntity1.equals((Object)pieSectionEntity0));
      assertNotSame(pieSectionEntity1, pieSectionEntity0);
      assertEquals("V}iV_,", pieSectionEntity1.getToolTipText());
      assertEquals("Jd 9N;?o6gO<\"", pieSectionEntity1.getURLText());
      assertEquals("poly", pieSectionEntity1.getShapeType());
      assertEquals((-3124), pieSectionEntity1.getPieIndex());
      assertEquals(10, pieSectionEntity1.getSectionIndex());
      
      boolean boolean0 = pieSectionEntity0.equals(pieSectionEntity1);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertFalse(pieSectionEntity1.equals((Object)pieSectionEntity0));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity1, pieSectionEntity0);
      assertFalse(boolean0);
      assertEquals(10, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals(914, pieSectionEntity0.getSectionIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("V}iV_,", pieSectionEntity1.getToolTipText());
      assertEquals("Jd 9N;?o6gO<\"", pieSectionEntity1.getURLText());
      assertEquals("poly", pieSectionEntity1.getShapeType());
      assertEquals((-3124), pieSectionEntity1.getPieIndex());
      assertEquals(10, pieSectionEntity1.getSectionIndex());
      
      pieSectionEntity0.setSectionIndex(0);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals(10, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      
      pieSectionEntity0.setPieIndex(914);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(914, pieSectionEntity0.getPieIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      
      PieDataset pieDataset2 = pieSectionEntity0.getDataset();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(914, pieSectionEntity0.getPieIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertNotNull(pieDataset2);
      
      pieSectionEntity0.setPieIndex(10);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals(10, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      
      pieSectionEntity0.setDataset(pieDataset2);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals(10, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((PathIterator) null).when(shape0).getPathIterator(any(java.awt.geom.AffineTransform.class) , anyDouble());
      PieDataset<String> pieDataset0 = null;
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      String string0 = "x`:VzR9Rgs3D?b";
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, (PieDataset) null, 1, 0, comparable0, "x`:VzR9Rgs3D?b", "x`:VzR9Rgs3D?b");
      assertEquals("x`:VzR9Rgs3D?b", pieSectionEntity0.getURLText());
      assertEquals(1, pieSectionEntity0.getPieIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals("x`:VzR9Rgs3D?b", pieSectionEntity0.getToolTipText());
      assertNotNull(pieSectionEntity0);
      
      String string1 = pieSectionEntity0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("x`:VzR9Rgs3D?b", pieSectionEntity0.getURLText());
      assertEquals(1, pieSectionEntity0.getPieIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals("x`:VzR9Rgs3D?b", pieSectionEntity0.getToolTipText());
      assertNotNull(string1);
      
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity1 = new PieSectionEntity(shape1, (PieDataset) null, 0, 0, "PieSection: 1, 0(codegen.java.lang.Comparable$MockitoMock$1947735815@0000000002)", "PieSection: 1, 0(codegen.java.lang.Comparable$MockitoMock$1947735815@0000000002)", "Dv7dr@&Kq$O:");
      assertFalse(pieSectionEntity1.equals((Object)pieSectionEntity0));
      assertEquals("Dv7dr@&Kq$O:", pieSectionEntity1.getURLText());
      assertEquals(0, pieSectionEntity1.getPieIndex());
      assertEquals(0, pieSectionEntity1.getSectionIndex());
      assertEquals("poly", pieSectionEntity1.getShapeType());
      assertNotNull(pieSectionEntity1);
      
      boolean boolean0 = pieSectionEntity0.equals(pieSectionEntity1);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertFalse(pieSectionEntity1.equals((Object)pieSectionEntity0));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity1, pieSectionEntity0);
      assertFalse(boolean0);
      assertEquals("x`:VzR9Rgs3D?b", pieSectionEntity0.getURLText());
      assertEquals(1, pieSectionEntity0.getPieIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals("x`:VzR9Rgs3D?b", pieSectionEntity0.getToolTipText());
      assertEquals("Dv7dr@&Kq$O:", pieSectionEntity1.getURLText());
      assertEquals(0, pieSectionEntity1.getPieIndex());
      assertEquals(0, pieSectionEntity1.getSectionIndex());
      assertEquals("poly", pieSectionEntity1.getShapeType());
      
      pieSectionEntity0.hashCode();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("x`:VzR9Rgs3D?b", pieSectionEntity0.getURLText());
      assertEquals(1, pieSectionEntity0.getPieIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals("x`:VzR9Rgs3D?b", pieSectionEntity0.getToolTipText());
      
      pieSectionEntity0.setSectionIndex(1);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("x`:VzR9Rgs3D?b", pieSectionEntity0.getURLText());
      assertEquals(1, pieSectionEntity0.getPieIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(1, pieSectionEntity0.getSectionIndex());
      assertEquals("x`:VzR9Rgs3D?b", pieSectionEntity0.getToolTipText());
      
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator1 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator1 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pieSectionEntity0.getImageMapAreaTag(toolTipTagFragmentGenerator1, uRLTagFragmentGenerator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.entity.ChartEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<String> pieDataset0 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pieDataset0).toString();
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, (-123), (-123), (Comparable) null, (String) null, (String) null);
      assertEquals((-123), pieSectionEntity0.getPieIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-123), pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertNotNull(pieSectionEntity0);
      
      PieDataset pieDataset1 = pieSectionEntity0.getDataset();
      assertEquals((-123), pieSectionEntity0.getPieIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-123), pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertNotNull(pieDataset1);
      
      Comparable comparable0 = pieSectionEntity0.getSectionKey();
      assertEquals((-123), pieSectionEntity0.getPieIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-123), pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertNull(comparable0);
      
      pieSectionEntity0.setPieIndex(2657);
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-123), pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(2657, pieSectionEntity0.getPieIndex());
      
      boolean boolean0 = pieSectionEntity0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-123), pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(2657, pieSectionEntity0.getPieIndex());
      
      boolean boolean1 = pieSectionEntity0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-123), pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(2657, pieSectionEntity0.getPieIndex());
      
      PieDataset<Integer> pieDataset2 = (PieDataset<Integer>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      pieSectionEntity0.setDataset(pieDataset2);
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-123), pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(2657, pieSectionEntity0.getPieIndex());
      
      pieSectionEntity0.setDataset(pieDataset1);
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-123), pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(2657, pieSectionEntity0.getPieIndex());
      
      pieSectionEntity0.hashCode();
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-123), pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(2657, pieSectionEntity0.getPieIndex());
      
      int int0 = pieSectionEntity0.getPieIndex();
      assertEquals(2657, int0);
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-123), pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(2657, pieSectionEntity0.getPieIndex());
      
      PieDataset pieDataset3 = pieSectionEntity0.getDataset();
      assertSame(pieDataset3, pieDataset1);
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-123), pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(2657, pieSectionEntity0.getPieIndex());
      assertNotNull(pieDataset3);
      
      pieSectionEntity0.setSectionIndex(2657);
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(2657, pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(2657, pieSectionEntity0.getPieIndex());
      
      pieSectionEntity0.setSectionKey((Comparable) null);
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(2657, pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(2657, pieSectionEntity0.getPieIndex());
      
      Comparable comparable1 = pieSectionEntity0.getSectionKey();
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(2657, pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(2657, pieSectionEntity0.getPieIndex());
      assertNull(comparable1);
      
      int int1 = pieSectionEntity0.getPieIndex();
      assertTrue(int1 == int0);
      assertEquals(2657, int1);
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(2657, pieSectionEntity0.getSectionIndex());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(2657, pieSectionEntity0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<String> pieDataset0 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, 1, (-78), comparable0, (String) null, (String) null);
      assertEquals((-78), pieSectionEntity0.getSectionIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(1, pieSectionEntity0.getPieIndex());
      assertNotNull(pieSectionEntity0);
      
      PieSectionEntity pieSectionEntity1 = (PieSectionEntity)pieSectionEntity0.clone();
      assertTrue(pieSectionEntity1.equals((Object)pieSectionEntity0));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity1, pieSectionEntity0);
      assertEquals((-78), pieSectionEntity0.getSectionIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(1, pieSectionEntity0.getPieIndex());
      assertNull(pieSectionEntity1.getToolTipText());
      assertEquals((-78), pieSectionEntity1.getSectionIndex());
      assertNull(pieSectionEntity1.getURLText());
      assertEquals("poly", pieSectionEntity1.getShapeType());
      assertEquals(1, pieSectionEntity1.getPieIndex());
      assertNotNull(pieSectionEntity1);
      
      Comparable comparable1 = pieSectionEntity0.getSectionKey();
      assertTrue(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals((-78), pieSectionEntity0.getSectionIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(1, pieSectionEntity0.getPieIndex());
      assertNotNull(comparable1);
      
      pieSectionEntity0.setSectionKey((Comparable) null);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals((-78), pieSectionEntity0.getSectionIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(1, pieSectionEntity0.getPieIndex());
      
      pieSectionEntity0.setPieIndex(1);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals((-78), pieSectionEntity0.getSectionIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertNull(pieSectionEntity0.getURLText());
      assertNull(pieSectionEntity0.getToolTipText());
      assertEquals(1, pieSectionEntity0.getPieIndex());
      
      // Undeclared exception!
      try { 
        pieSectionEntity0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<Integer> pieDataset0 = (PieDataset<Integer>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, 2526, 2526, 2526, "oy/OuK", "oy/OuK");
      assertEquals("oy/OuK", pieSectionEntity0.getToolTipText());
      assertEquals(2526, pieSectionEntity0.getSectionIndex());
      assertEquals("oy/OuK", pieSectionEntity0.getURLText());
      assertEquals(2526, pieSectionEntity0.getPieIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertNotNull(pieSectionEntity0);
      
      int int0 = pieSectionEntity0.getSectionIndex();
      assertEquals(2526, int0);
      assertEquals("oy/OuK", pieSectionEntity0.getToolTipText());
      assertEquals(2526, pieSectionEntity0.getSectionIndex());
      assertEquals("oy/OuK", pieSectionEntity0.getURLText());
      assertEquals(2526, pieSectionEntity0.getPieIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = null;
      PieDataset<Integer> pieDataset0 = (PieDataset<Integer>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      String string0 = "Ti;.2h0]NQVO-gWo\"^";
      PieSectionEntity pieSectionEntity0 = null;
      try {
        pieSectionEntity0 = new PieSectionEntity((Shape) null, pieDataset0, 0, 1, comparable0, "Ti;.2h0]NQVO-gWo\"^", "Ti;.2h0]NQVO-gWo\"^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<Integer> pieDataset0 = (PieDataset<Integer>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, (-3), (-3), (Comparable) null, "%){0EN=Nju=EL", "%){0EN=Nju=EL");
      assertEquals("%){0EN=Nju=EL", pieSectionEntity0.getToolTipText());
      assertEquals("%){0EN=Nju=EL", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-3), pieSectionEntity0.getSectionIndex());
      assertEquals((-3), pieSectionEntity0.getPieIndex());
      assertNotNull(pieSectionEntity0);
      
      int int0 = pieSectionEntity0.getSectionIndex();
      assertEquals((-3), int0);
      assertEquals("%){0EN=Nju=EL", pieSectionEntity0.getToolTipText());
      assertEquals("%){0EN=Nju=EL", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-3), pieSectionEntity0.getSectionIndex());
      assertEquals((-3), pieSectionEntity0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<String> pieDataset0 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, (-1), (-1), comparable0, "org.jfree.chart.entity.PieSectionEntity", "org.jfree.chart.entity.PieSectionEntity");
      assertEquals((-1), pieSectionEntity0.getPieIndex());
      assertEquals((-1), pieSectionEntity0.getSectionIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("org.jfree.chart.entity.PieSectionEntity", pieSectionEntity0.getURLText());
      assertEquals("org.jfree.chart.entity.PieSectionEntity", pieSectionEntity0.getToolTipText());
      assertNotNull(pieSectionEntity0);
      
      boolean boolean0 = pieSectionEntity0.equals("org.jfree.chart.entity.PieSectionEntity");
      assertFalse(boolean0);
      assertEquals((-1), pieSectionEntity0.getPieIndex());
      assertEquals((-1), pieSectionEntity0.getSectionIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("org.jfree.chart.entity.PieSectionEntity", pieSectionEntity0.getURLText());
      assertEquals("org.jfree.chart.entity.PieSectionEntity", pieSectionEntity0.getToolTipText());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<String> pieDataset0 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pieDataset0).toString();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, 0, 3839, comparable0, "V\";w.@n|s|'fB", "N=&\"8,#QY>s|bu9");
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("V\";w.@n|s|'fB", pieSectionEntity0.getToolTipText());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals(3839, pieSectionEntity0.getSectionIndex());
      assertEquals("N=&\"8,#QY>s|bu9", pieSectionEntity0.getURLText());
      assertNotNull(pieSectionEntity0);
      
      int int0 = pieSectionEntity0.getPieIndex();
      assertEquals(0, int0);
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("V\";w.@n|s|'fB", pieSectionEntity0.getToolTipText());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals(3839, pieSectionEntity0.getSectionIndex());
      assertEquals("N=&\"8,#QY>s|bu9", pieSectionEntity0.getURLText());
      
      String string0 = pieSectionEntity0.toString();
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("V\";w.@n|s|'fB", pieSectionEntity0.getToolTipText());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals(3839, pieSectionEntity0.getSectionIndex());
      assertEquals("N=&\"8,#QY>s|bu9", pieSectionEntity0.getURLText());
      assertNotNull(string0);
      
      PieDataset pieDataset1 = pieSectionEntity0.getDataset();
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("V\";w.@n|s|'fB", pieSectionEntity0.getToolTipText());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals(3839, pieSectionEntity0.getSectionIndex());
      assertEquals("N=&\"8,#QY>s|bu9", pieSectionEntity0.getURLText());
      assertNotNull(pieDataset1);
      
      PieDataset pieDataset2 = pieSectionEntity0.getDataset();
      assertSame(pieDataset2, pieDataset1);
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("V\";w.@n|s|'fB", pieSectionEntity0.getToolTipText());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals(3839, pieSectionEntity0.getSectionIndex());
      assertEquals("N=&\"8,#QY>s|bu9", pieSectionEntity0.getURLText());
      assertNotNull(pieDataset2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<String> pieDataset0 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, 0, 0, 0, "", "~23|~YYXdd{|D?)");
      assertEquals("~23|~YYXdd{|D?)", pieSectionEntity0.getURLText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertNotNull(pieSectionEntity0);
      
      pieSectionEntity0.setSectionIndex(0);
      assertEquals("~23|~YYXdd{|D?)", pieSectionEntity0.getURLText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      
      PieDataset<String> pieDataset1 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pieDataset1).toString();
      pieSectionEntity0.setDataset(pieDataset1);
      assertEquals("~23|~YYXdd{|D?)", pieSectionEntity0.getURLText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      
      PieDataset pieDataset2 = pieSectionEntity0.getDataset();
      assertEquals("~23|~YYXdd{|D?)", pieSectionEntity0.getURLText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals(0, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertNotNull(pieDataset2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PathIterator pathIterator0 = mock(PathIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(pathIterator0).currentSegment(any(float[].class));
      doReturn(false, false, false, false, false).when(pathIterator0).isDone();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn(pathIterator0).when(shape0).getPathIterator(any(java.awt.geom.AffineTransform.class) , anyDouble());
      int int0 = 713;
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, (PieDataset) null, 713, 6, comparable0, "", "data");
      assertEquals(713, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("data", pieSectionEntity0.getURLText());
      assertEquals(6, pieSectionEntity0.getSectionIndex());
      assertNotNull(pieSectionEntity0);
      
      pieSectionEntity0.setToolTipText("");
      assertEquals(713, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("data", pieSectionEntity0.getURLText());
      assertEquals(6, pieSectionEntity0.getSectionIndex());
      
      pieSectionEntity0.setPieIndex(713);
      assertEquals(713, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("data", pieSectionEntity0.getURLText());
      assertEquals(6, pieSectionEntity0.getSectionIndex());
      
      PieSectionEntity pieSectionEntity1 = (PieSectionEntity)pieSectionEntity0.clone();
      assertTrue(pieSectionEntity1.equals((Object)pieSectionEntity0));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity1, pieSectionEntity0);
      assertEquals(713, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("data", pieSectionEntity0.getURLText());
      assertEquals(6, pieSectionEntity0.getSectionIndex());
      assertEquals("", pieSectionEntity1.getToolTipText());
      assertEquals("poly", pieSectionEntity1.getShapeType());
      assertEquals(6, pieSectionEntity1.getSectionIndex());
      assertEquals("data", pieSectionEntity1.getURLText());
      assertEquals(713, pieSectionEntity1.getPieIndex());
      assertNotNull(pieSectionEntity1);
      
      pieSectionEntity0.setPieIndex(712);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals(712, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("data", pieSectionEntity0.getURLText());
      assertEquals(6, pieSectionEntity0.getSectionIndex());
      
      String string0 = pieSectionEntity0.toString();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals(712, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("data", pieSectionEntity0.getURLText());
      assertEquals(6, pieSectionEntity0.getSectionIndex());
      assertNotNull(string0);
      
      String string1 = null;
      pieSectionEntity0.setToolTipText("");
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals(712, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("data", pieSectionEntity0.getURLText());
      assertEquals(6, pieSectionEntity0.getSectionIndex());
      
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity2 = new PieSectionEntity(shape1, (PieDataset) null, 712, (-1697), "PieSection: 712, 6(codegen.java.lang.Comparable$MockitoMock$1947735815@0000000002)", "k@GyV~q3$dY\"ycX", "");
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity0));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity1));
      assertEquals(712, pieSectionEntity2.getPieIndex());
      assertEquals("", pieSectionEntity2.getURLText());
      assertEquals((-1697), pieSectionEntity2.getSectionIndex());
      assertEquals("k@GyV~q3$dY\"ycX", pieSectionEntity2.getToolTipText());
      assertEquals("poly", pieSectionEntity2.getShapeType());
      assertNotNull(pieSectionEntity2);
      
      PieSectionEntity pieSectionEntity3 = (PieSectionEntity)pieSectionEntity2.clone();
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity0));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity1));
      assertFalse(pieSectionEntity3.equals((Object)pieSectionEntity1));
      assertTrue(pieSectionEntity3.equals((Object)pieSectionEntity2));
      assertFalse(pieSectionEntity3.equals((Object)pieSectionEntity0));
      assertNotSame(pieSectionEntity2, pieSectionEntity0);
      assertNotSame(pieSectionEntity2, pieSectionEntity3);
      assertNotSame(pieSectionEntity2, pieSectionEntity1);
      assertNotSame(pieSectionEntity3, pieSectionEntity1);
      assertNotSame(pieSectionEntity3, pieSectionEntity2);
      assertNotSame(pieSectionEntity3, pieSectionEntity0);
      assertEquals(712, pieSectionEntity2.getPieIndex());
      assertEquals("", pieSectionEntity2.getURLText());
      assertEquals((-1697), pieSectionEntity2.getSectionIndex());
      assertEquals("k@GyV~q3$dY\"ycX", pieSectionEntity2.getToolTipText());
      assertEquals("poly", pieSectionEntity2.getShapeType());
      assertEquals((-1697), pieSectionEntity3.getSectionIndex());
      assertEquals("poly", pieSectionEntity3.getShapeType());
      assertEquals("", pieSectionEntity3.getURLText());
      assertEquals("k@GyV~q3$dY\"ycX", pieSectionEntity3.getToolTipText());
      assertEquals(712, pieSectionEntity3.getPieIndex());
      assertNotNull(pieSectionEntity3);
      
      boolean boolean0 = pieSectionEntity0.equals(pieSectionEntity3);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity3));
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity2));
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity0));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity1));
      assertTrue(pieSectionEntity2.equals((Object)pieSectionEntity3));
      assertFalse(pieSectionEntity3.equals((Object)pieSectionEntity1));
      assertTrue(pieSectionEntity3.equals((Object)pieSectionEntity2));
      assertFalse(pieSectionEntity3.equals((Object)pieSectionEntity0));
      assertNotSame(pieSectionEntity0, pieSectionEntity3);
      assertNotSame(pieSectionEntity0, pieSectionEntity2);
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity2, pieSectionEntity0);
      assertNotSame(pieSectionEntity2, pieSectionEntity3);
      assertNotSame(pieSectionEntity2, pieSectionEntity1);
      assertNotSame(pieSectionEntity3, pieSectionEntity1);
      assertNotSame(pieSectionEntity3, pieSectionEntity2);
      assertNotSame(pieSectionEntity3, pieSectionEntity0);
      assertFalse(boolean0);
      assertEquals(712, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("data", pieSectionEntity0.getURLText());
      assertEquals(6, pieSectionEntity0.getSectionIndex());
      assertEquals(712, pieSectionEntity2.getPieIndex());
      assertEquals("", pieSectionEntity2.getURLText());
      assertEquals((-1697), pieSectionEntity2.getSectionIndex());
      assertEquals("k@GyV~q3$dY\"ycX", pieSectionEntity2.getToolTipText());
      assertEquals("poly", pieSectionEntity2.getShapeType());
      assertEquals((-1697), pieSectionEntity3.getSectionIndex());
      assertEquals("poly", pieSectionEntity3.getShapeType());
      assertEquals("", pieSectionEntity3.getURLText());
      assertEquals("k@GyV~q3$dY\"ycX", pieSectionEntity3.getToolTipText());
      assertEquals(712, pieSectionEntity3.getPieIndex());
      
      // Undeclared exception!
      pieSectionEntity0.getShapeCoords();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<String> pieDataset0 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pieDataset0).toString();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, (-688), 1378, comparable0, "~U>wo{Dc|@|", "");
      assertEquals((-688), pieSectionEntity0.getPieIndex());
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      assertNotNull(pieSectionEntity0);
      
      PieDataset pieDataset1 = pieSectionEntity0.getDataset();
      assertEquals((-688), pieSectionEntity0.getPieIndex());
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      assertNotNull(pieDataset1);
      
      pieSectionEntity0.hashCode();
      assertEquals((-688), pieSectionEntity0.getPieIndex());
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      
      String string0 = pieSectionEntity0.toString();
      assertEquals((-688), pieSectionEntity0.getPieIndex());
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      assertNotNull(string0);
      
      PieSectionEntity pieSectionEntity1 = (PieSectionEntity)pieSectionEntity0.clone();
      assertTrue(pieSectionEntity1.equals((Object)pieSectionEntity0));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity1, pieSectionEntity0);
      assertEquals((-688), pieSectionEntity0.getPieIndex());
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      assertEquals("~U>wo{Dc|@|", pieSectionEntity1.getToolTipText());
      assertEquals("", pieSectionEntity1.getURLText());
      assertEquals("poly", pieSectionEntity1.getShapeType());
      assertEquals((-688), pieSectionEntity1.getPieIndex());
      assertEquals(1378, pieSectionEntity1.getSectionIndex());
      assertNotNull(pieSectionEntity1);
      
      boolean boolean0 = pieSectionEntity0.equals("~U>wo{Dc|@|");
      assertTrue(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertFalse(boolean0);
      assertEquals((-688), pieSectionEntity0.getPieIndex());
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      
      pieSectionEntity0.setURLText("PieSection: -688, 1378(codegen.java.lang.Comparable$MockitoMock$1947735815@0000000002)");
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals((-688), pieSectionEntity0.getPieIndex());
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      
      pieSectionEntity0.setPieIndex((-688));
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals((-688), pieSectionEntity0.getPieIndex());
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      
      pieSectionEntity0.setPieIndex((-603));
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      pieSectionEntity0.setArea(shape1);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      
      int int0 = pieSectionEntity0.getPieIndex();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals((-603), int0);
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      
      int int1 = pieSectionEntity0.getPieIndex();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertTrue(int1 == int0);
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals((-603), int1);
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      
      int int2 = pieSectionEntity0.getPieIndex();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals((-603), int2);
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      
      Comparable comparable1 = pieSectionEntity0.getSectionKey();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      assertNotNull(comparable1);
      
      PieDataset pieDataset2 = pieSectionEntity0.getDataset();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertSame(pieDataset2, pieDataset1);
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      assertNotNull(pieDataset2);
      
      Shape shape2 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity2 = new PieSectionEntity(shape2, pieDataset1, 1779, 1378, "PieSection: -688, 1378(codegen.java.lang.Comparable$MockitoMock$1947735815@0000000002)", "f_K~UtH@FV+vp", "ChartEntity: ");
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity0));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity1));
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      assertEquals(1779, pieSectionEntity2.getPieIndex());
      assertEquals("f_K~UtH@FV+vp", pieSectionEntity2.getToolTipText());
      assertEquals("poly", pieSectionEntity2.getShapeType());
      assertEquals(1378, pieSectionEntity2.getSectionIndex());
      assertEquals("ChartEntity: ", pieSectionEntity2.getURLText());
      assertNotNull(pieSectionEntity2);
      
      boolean boolean1 = pieSectionEntity0.equals(pieSectionEntity2);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity2));
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity0));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(pieSectionEntity0, pieSectionEntity2);
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity2, pieSectionEntity0);
      assertNotSame(pieSectionEntity2, pieSectionEntity1);
      assertSame(pieDataset1, pieDataset2);
      assertFalse(boolean1);
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      assertEquals(1779, pieSectionEntity2.getPieIndex());
      assertEquals("f_K~UtH@FV+vp", pieSectionEntity2.getToolTipText());
      assertEquals("poly", pieSectionEntity2.getShapeType());
      assertEquals(1378, pieSectionEntity2.getSectionIndex());
      assertEquals("ChartEntity: ", pieSectionEntity2.getURLText());
      
      int int3 = pieSectionEntity2.hashCode();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity2));
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity0));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotSame(pieSectionEntity0, pieSectionEntity2);
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity2, pieSectionEntity0);
      assertNotSame(pieSectionEntity2, pieSectionEntity1);
      assertSame(pieDataset1, pieDataset2);
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      assertEquals(1779, pieSectionEntity2.getPieIndex());
      assertEquals("f_K~UtH@FV+vp", pieSectionEntity2.getToolTipText());
      assertEquals("poly", pieSectionEntity2.getShapeType());
      assertEquals(1378, pieSectionEntity2.getSectionIndex());
      assertEquals("ChartEntity: ", pieSectionEntity2.getURLText());
      
      int int4 = pieSectionEntity0.hashCode();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity2));
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertNotSame(pieSectionEntity0, pieSectionEntity2);
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      
      int int5 = pieSectionEntity2.getSectionIndex();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity2));
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity0));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity1));
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertNotSame(pieSectionEntity0, pieSectionEntity2);
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity2, pieSectionEntity0);
      assertNotSame(pieSectionEntity2, pieSectionEntity1);
      assertSame(pieDataset1, pieDataset2);
      assertEquals(1378, int5);
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      assertEquals(1779, pieSectionEntity2.getPieIndex());
      assertEquals("f_K~UtH@FV+vp", pieSectionEntity2.getToolTipText());
      assertEquals("poly", pieSectionEntity2.getShapeType());
      assertEquals(1378, pieSectionEntity2.getSectionIndex());
      assertEquals("ChartEntity: ", pieSectionEntity2.getURLText());
      
      int int6 = pieSectionEntity2.getPieIndex();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity2));
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity0));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity1));
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertNotSame(pieSectionEntity0, pieSectionEntity2);
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity2, pieSectionEntity0);
      assertNotSame(pieSectionEntity2, pieSectionEntity1);
      assertSame(pieDataset1, pieDataset2);
      assertEquals(1779, int6);
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      assertEquals(1779, pieSectionEntity2.getPieIndex());
      assertEquals("f_K~UtH@FV+vp", pieSectionEntity2.getToolTipText());
      assertEquals("poly", pieSectionEntity2.getShapeType());
      assertEquals(1378, pieSectionEntity2.getSectionIndex());
      assertEquals("ChartEntity: ", pieSectionEntity2.getURLText());
      
      PieSectionEntity pieSectionEntity3 = (PieSectionEntity)pieSectionEntity2.clone();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity2));
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity0));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity1));
      assertFalse(pieSectionEntity3.equals((Object)pieSectionEntity0));
      assertFalse(pieSectionEntity3.equals((Object)pieSectionEntity1));
      assertTrue(pieSectionEntity3.equals((Object)pieSectionEntity2));
      assertNotSame(pieSectionEntity0, pieSectionEntity3);
      assertNotSame(pieSectionEntity0, pieSectionEntity2);
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity2, pieSectionEntity3);
      assertNotSame(pieSectionEntity2, pieSectionEntity0);
      assertNotSame(pieSectionEntity2, pieSectionEntity1);
      assertSame(pieDataset1, pieDataset2);
      assertNotSame(pieSectionEntity3, pieSectionEntity2);
      assertNotSame(pieSectionEntity3, pieSectionEntity0);
      assertNotSame(pieSectionEntity3, pieSectionEntity1);
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      assertEquals(1779, pieSectionEntity2.getPieIndex());
      assertEquals("f_K~UtH@FV+vp", pieSectionEntity2.getToolTipText());
      assertEquals("poly", pieSectionEntity2.getShapeType());
      assertEquals(1378, pieSectionEntity2.getSectionIndex());
      assertEquals("ChartEntity: ", pieSectionEntity2.getURLText());
      assertEquals("ChartEntity: ", pieSectionEntity3.getURLText());
      assertEquals("poly", pieSectionEntity3.getShapeType());
      assertEquals(1779, pieSectionEntity3.getPieIndex());
      assertEquals("f_K~UtH@FV+vp", pieSectionEntity3.getToolTipText());
      assertEquals(1378, pieSectionEntity3.getSectionIndex());
      assertNotNull(pieSectionEntity3);
      
      boolean boolean2 = pieSectionEntity2.equals(pieSectionEntity3);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity3));
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity2));
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity0));
      assertTrue(pieSectionEntity2.equals((Object)pieSectionEntity3));
      assertFalse(pieSectionEntity2.equals((Object)pieSectionEntity1));
      assertFalse(pieSectionEntity3.equals((Object)pieSectionEntity0));
      assertFalse(pieSectionEntity3.equals((Object)pieSectionEntity1));
      assertTrue(pieSectionEntity3.equals((Object)pieSectionEntity2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(pieSectionEntity0, pieSectionEntity3);
      assertNotSame(pieSectionEntity0, pieSectionEntity2);
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity2, pieSectionEntity3);
      assertNotSame(pieSectionEntity2, pieSectionEntity0);
      assertNotSame(pieSectionEntity2, pieSectionEntity1);
      assertSame(pieDataset1, pieDataset2);
      assertNotSame(pieSectionEntity3, pieSectionEntity2);
      assertNotSame(pieSectionEntity3, pieSectionEntity0);
      assertNotSame(pieSectionEntity3, pieSectionEntity1);
      assertTrue(boolean2);
      assertEquals("~U>wo{Dc|@|", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-603), pieSectionEntity0.getPieIndex());
      assertEquals(1378, pieSectionEntity0.getSectionIndex());
      assertEquals(1779, pieSectionEntity2.getPieIndex());
      assertEquals("f_K~UtH@FV+vp", pieSectionEntity2.getToolTipText());
      assertEquals("poly", pieSectionEntity2.getShapeType());
      assertEquals(1378, pieSectionEntity2.getSectionIndex());
      assertEquals("ChartEntity: ", pieSectionEntity2.getURLText());
      assertEquals("ChartEntity: ", pieSectionEntity3.getURLText());
      assertEquals("poly", pieSectionEntity3.getShapeType());
      assertEquals(1779, pieSectionEntity3.getPieIndex());
      assertEquals("f_K~UtH@FV+vp", pieSectionEntity3.getToolTipText());
      assertEquals(1378, pieSectionEntity3.getSectionIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<String> pieDataset0 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      PieDataset<String> pieDataset1 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      PieDataset<String> pieDataset2 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator1 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape1, pieDataset2, (-1), 0, 0, "PieSection: ", "' (");
      assertEquals("' (", pieSectionEntity0.getURLText());
      assertEquals("PieSection: ", pieSectionEntity0.getToolTipText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-1), pieSectionEntity0.getPieIndex());
      assertNotNull(pieSectionEntity0);
      
      pieSectionEntity0.setToolTipText("");
      assertEquals("' (", pieSectionEntity0.getURLText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-1), pieSectionEntity0.getPieIndex());
      
      String string0 = pieSectionEntity0.toString();
      assertEquals("' (", pieSectionEntity0.getURLText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertEquals("", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-1), pieSectionEntity0.getPieIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((PathIterator) null).when(shape0).getPathIterator(any(java.awt.geom.AffineTransform.class) , anyDouble());
      PieDataset<String> pieDataset0 = null;
      int int0 = 0;
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      String string0 = "*-48D)V=pWW";
      String string1 = "HTTe6";
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, (PieDataset) null, (-2470), 0, comparable0, "*-48D)V=pWW", "HTTe6");
      assertEquals("*-48D)V=pWW", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2470), pieSectionEntity0.getPieIndex());
      assertEquals("HTTe6", pieSectionEntity0.getURLText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      assertNotNull(pieSectionEntity0);
      
      int int1 = pieSectionEntity0.hashCode();
      assertFalse(int1 == int0);
      assertEquals("*-48D)V=pWW", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2470), pieSectionEntity0.getPieIndex());
      assertEquals("HTTe6", pieSectionEntity0.getURLText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      
      pieSectionEntity0.setURLText("*-48D)V=pWW");
      assertEquals("*-48D)V=pWW", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2470), pieSectionEntity0.getPieIndex());
      assertEquals("*-48D)V=pWW", pieSectionEntity0.getURLText());
      assertEquals(0, pieSectionEntity0.getSectionIndex());
      
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      pieSectionEntity0.setSectionIndex((-2470));
      assertEquals((-2470), pieSectionEntity0.getSectionIndex());
      assertEquals("*-48D)V=pWW", pieSectionEntity0.getToolTipText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2470), pieSectionEntity0.getPieIndex());
      assertEquals("*-48D)V=pWW", pieSectionEntity0.getURLText());
      
      // Undeclared exception!
      try { 
        pieSectionEntity0.getImageMapAreaTag((ToolTipTagFragmentGenerator) null, (URLTagFragmentGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.entity.ChartEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<String> pieDataset0 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, (-2090), (-2090), comparable0, "MLgMd_el~(X{xtf", "");
      assertEquals("MLgMd_el~(X{xtf", pieSectionEntity0.getToolTipText());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2090), pieSectionEntity0.getSectionIndex());
      assertEquals((-2090), pieSectionEntity0.getPieIndex());
      assertNotNull(pieSectionEntity0);
      
      PieDataset<Integer> pieDataset1 = (PieDataset<Integer>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      pieSectionEntity0.setDataset(pieDataset1);
      assertEquals("MLgMd_el~(X{xtf", pieSectionEntity0.getToolTipText());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2090), pieSectionEntity0.getSectionIndex());
      assertEquals((-2090), pieSectionEntity0.getPieIndex());
      
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      pieSectionEntity0.setArea(shape1);
      assertEquals("MLgMd_el~(X{xtf", pieSectionEntity0.getToolTipText());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2090), pieSectionEntity0.getSectionIndex());
      assertEquals((-2090), pieSectionEntity0.getPieIndex());
      
      pieSectionEntity0.hashCode();
      assertEquals("MLgMd_el~(X{xtf", pieSectionEntity0.getToolTipText());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2090), pieSectionEntity0.getSectionIndex());
      assertEquals((-2090), pieSectionEntity0.getPieIndex());
      
      PieSectionEntity pieSectionEntity1 = (PieSectionEntity)pieSectionEntity0.clone();
      assertTrue(pieSectionEntity1.equals((Object)pieSectionEntity0));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity1, pieSectionEntity0);
      assertEquals("MLgMd_el~(X{xtf", pieSectionEntity0.getToolTipText());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2090), pieSectionEntity0.getSectionIndex());
      assertEquals((-2090), pieSectionEntity0.getPieIndex());
      assertEquals((-2090), pieSectionEntity1.getPieIndex());
      assertEquals((-2090), pieSectionEntity1.getSectionIndex());
      assertEquals("poly", pieSectionEntity1.getShapeType());
      assertEquals("MLgMd_el~(X{xtf", pieSectionEntity1.getToolTipText());
      assertEquals("", pieSectionEntity1.getURLText());
      assertNotNull(pieSectionEntity1);
      
      boolean boolean0 = pieSectionEntity0.equals(pieSectionEntity1);
      assertTrue(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertTrue(pieSectionEntity1.equals((Object)pieSectionEntity0));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertNotSame(pieSectionEntity1, pieSectionEntity0);
      assertTrue(boolean0);
      assertEquals("MLgMd_el~(X{xtf", pieSectionEntity0.getToolTipText());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2090), pieSectionEntity0.getSectionIndex());
      assertEquals((-2090), pieSectionEntity0.getPieIndex());
      assertEquals((-2090), pieSectionEntity1.getPieIndex());
      assertEquals((-2090), pieSectionEntity1.getSectionIndex());
      assertEquals("poly", pieSectionEntity1.getShapeType());
      assertEquals("MLgMd_el~(X{xtf", pieSectionEntity1.getToolTipText());
      assertEquals("", pieSectionEntity1.getURLText());
      
      Shape shape2 = mock(Shape.class, new ViolatedAssumptionAnswer());
      pieSectionEntity0.setArea(shape2);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("MLgMd_el~(X{xtf", pieSectionEntity0.getToolTipText());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2090), pieSectionEntity0.getSectionIndex());
      assertEquals((-2090), pieSectionEntity0.getPieIndex());
      
      boolean boolean1 = pieSectionEntity0.equals("");
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertFalse(boolean1);
      assertEquals("MLgMd_el~(X{xtf", pieSectionEntity0.getToolTipText());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2090), pieSectionEntity0.getSectionIndex());
      assertEquals((-2090), pieSectionEntity0.getPieIndex());
      
      pieSectionEntity0.setPieIndex(10);
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("MLgMd_el~(X{xtf", pieSectionEntity0.getToolTipText());
      assertEquals(10, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2090), pieSectionEntity0.getSectionIndex());
      
      boolean boolean2 = pieSectionEntity0.equals("MLgMd_el~(X{xtf");
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertFalse(boolean2);
      assertEquals("MLgMd_el~(X{xtf", pieSectionEntity0.getToolTipText());
      assertEquals(10, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2090), pieSectionEntity0.getSectionIndex());
      
      String string0 = pieSectionEntity0.toString();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals("MLgMd_el~(X{xtf", pieSectionEntity0.getToolTipText());
      assertEquals(10, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2090), pieSectionEntity0.getSectionIndex());
      assertNotNull(string0);
      
      int int0 = pieSectionEntity0.getSectionIndex();
      assertFalse(pieSectionEntity0.equals((Object)pieSectionEntity1));
      assertNotSame(pieSectionEntity0, pieSectionEntity1);
      assertEquals((-2090), int0);
      assertEquals("MLgMd_el~(X{xtf", pieSectionEntity0.getToolTipText());
      assertEquals(10, pieSectionEntity0.getPieIndex());
      assertEquals("", pieSectionEntity0.getURLText());
      assertEquals("poly", pieSectionEntity0.getShapeType());
      assertEquals((-2090), pieSectionEntity0.getSectionIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<Integer> pieDataset0 = (PieDataset<Integer>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      doReturn("org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator").when(pieDataset0).toString();
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, 10, 914, 914, "", "");
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<Integer> pieDataset1 = (PieDataset<Integer>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity1 = new PieSectionEntity(shape1, pieDataset1, (-3124), 10, "", "V}iV_,", "Jd 9N;?o6gO<\"");
      Shape shape2 = mock(Shape.class, new ViolatedAssumptionAnswer());
      pieSectionEntity1.setArea(shape2);
      pieSectionEntity0.equals(pieSectionEntity1);
      pieSectionEntity0.setSectionIndex(0);
      pieSectionEntity0.setPieIndex(914);
      PieDataset pieDataset2 = pieSectionEntity0.getDataset();
      pieSectionEntity0.setPieIndex(10);
      pieSectionEntity0.setDataset(pieDataset2);
      assertEquals(0, pieSectionEntity0.getSectionIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<Integer> pieDataset0 = (PieDataset<Integer>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, 193, 193, comparable0, "", "");
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((PathIterator) null).when(shape1).getPathIterator(any(java.awt.geom.AffineTransform.class) , anyDouble());
      pieSectionEntity0.setArea(shape1);
      pieSectionEntity0.setSectionIndex(193);
      pieSectionEntity0.setToolTipText("");
      pieSectionEntity0.toString();
      pieSectionEntity0.getSectionIndex();
      pieSectionEntity0.getSectionIndex();
      ToolTipTagFragmentGenerator toolTipTagFragmentGenerator0 = mock(ToolTipTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      pieSectionEntity0.getImageMapAreaTag(toolTipTagFragmentGenerator0, uRLTagFragmentGenerator0);
      // Undeclared exception!
      try { 
        pieSectionEntity0.getShapeCoords();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.entity.ChartEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((PathIterator) null).when(shape0).getPathIterator(any(java.awt.geom.AffineTransform.class) , anyDouble());
      PieDataset<Integer> pieDataset0 = (PieDataset<Integer>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      Comparable<PieSectionEntity> comparable0 = (Comparable<PieSectionEntity>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      URLTagFragmentGenerator uRLTagFragmentGenerator0 = mock(URLTagFragmentGenerator.class, new ViolatedAssumptionAnswer());
      PieDataset<String> pieDataset1 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, 1231, 301, (Comparable) null, (String) null, "{RIc?`f7s");
      // Undeclared exception!
      try { 
        pieSectionEntity0.getShapeCoords();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.entity.ChartEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      PieDataset<String> pieDataset0 = (PieDataset<String>) mock(PieDataset.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      PieSectionEntity pieSectionEntity0 = new PieSectionEntity(shape0, pieDataset0, 37, 0, comparable0, "", "");
      pieSectionEntity0.getSectionIndex();
      pieSectionEntity0.setURLText("");
      pieSectionEntity0.setSectionIndex(2574);
      pieSectionEntity0.hashCode();
      Comparable comparable1 = pieSectionEntity0.getSectionKey();
      pieSectionEntity0.setSectionKey(comparable1);
      assertEquals(2574, pieSectionEntity0.getSectionIndex());
  }
}
