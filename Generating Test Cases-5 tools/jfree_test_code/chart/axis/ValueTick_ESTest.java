/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:33:31 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedString;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateTick;
import org.jfree.chart.axis.LogTick;
import org.jfree.chart.axis.NumberTick;
import org.jfree.chart.axis.TickType;
import org.jfree.chart.ui.TextAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValueTick_ESTest extends ValueTick_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TickType tickType0 = mock(TickType.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick0 = new NumberTick(tickType0, (-1043.6132930824117), "\"]-skEwB1%(R-", textAnchor0, textAnchor0, (-1043.6132930824117));
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      DateTick dateTick0 = new DateTick(date0, "\"]-skEwB1%(R-", textAnchor1, textAnchor1, 469.988);
      boolean boolean0 = numberTick0.equals(dateTick0);
      assertFalse(boolean0);
      assertEquals(0.0, dateTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TickType tickType0 = mock(TickType.class, new ViolatedAssumptionAnswer());
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick(tickType0, 1625.086504052, attributedString0, textAnchor0);
      double double0 = logTick0.getValue();
      assertEquals(1625.086504052, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TickType tickType0 = mock(TickType.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick0 = new NumberTick(tickType0, (-1043.6132930824117), "\"]-skEwB1%(R-", textAnchor0, textAnchor0, (-1043.6132930824117));
      double double0 = numberTick0.getValue();
      assertEquals((-1043.6132930824117), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick((TickType) null, 1.0, attributedString0, textAnchor0);
      logTick0.getTickType();
      assertEquals(1.0, logTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TickType tickType0 = mock(TickType.class, new ViolatedAssumptionAnswer());
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      DateTick dateTick0 = new DateTick(tickType0, date0, "", textAnchor0, textAnchor0, 0.0);
      TickType tickType1 = mock(TickType.class, new ViolatedAssumptionAnswer());
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick(tickType1, 0.0, attributedString0, textAnchor1);
      boolean boolean0 = logTick0.equals(dateTick0);
      assertFalse(boolean0);
      assertEquals(0.0, logTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TickType tickType0 = mock(TickType.class, new ViolatedAssumptionAnswer());
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick(tickType0, 0.0, attributedString0, textAnchor0);
      LogTick logTick1 = (LogTick)logTick0.clone();
      boolean boolean0 = logTick0.equals(logTick1);
      assertTrue(boolean0);
      assertEquals(0.0, logTick1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TickType tickType0 = mock(TickType.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick0 = new NumberTick(tickType0, (-388.3983986756875), "org.jfree.chart.axis.ValueAxis", textAnchor0, textAnchor0, (-388.3983986756875));
      TickType tickType1 = mock(TickType.class, new ViolatedAssumptionAnswer());
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick(tickType1, (-2910.0), attributedString0, textAnchor1);
      boolean boolean0 = numberTick0.equals(logTick0);
      assertFalse(boolean0);
      assertEquals((-2910.0), logTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick0 = new NumberTick((TickType) null, 1522.6426, "=Z.\")Jl>/7V{%Jp&", textAnchor0, textAnchor0, 1522.6426);
      Object object0 = numberTick0.clone();
      // Undeclared exception!
      try { 
        numberTick0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueTick", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TickType tickType0 = mock(TickType.class, new ViolatedAssumptionAnswer());
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick(tickType0, 0.0, attributedString0, textAnchor0);
      boolean boolean0 = logTick0.equals(logTick0);
      assertTrue(boolean0);
      assertEquals(0.0, logTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TickType tickType0 = mock(TickType.class, new ViolatedAssumptionAnswer());
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick(tickType0, 0.0, attributedString0, textAnchor0);
      boolean boolean0 = logTick0.equals(logTick0.attributedLabel);
      assertFalse(boolean0);
      assertEquals(0.0, logTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TickType tickType0 = mock(TickType.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick0 = new NumberTick(tickType0, 0.0, "", textAnchor0, textAnchor0, (-1.0));
      Number number0 = numberTick0.getNumber();
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(false, number0, "Fqz", textAnchor1, textAnchor1, (-998.3183));
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(0.0, numberTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TickType tickType0 = mock(TickType.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      NumberTick numberTick0 = new NumberTick(tickType0, 0.0, "", textAnchor0, textAnchor0, (-1.0));
      double double0 = numberTick0.getValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      DateTick dateTick0 = new DateTick(date0, "=Z.\")Jl>/7V{%Jp&", textAnchor0, textAnchor0, 1522.6426);
      dateTick0.getTickType();
      assertEquals(0.0, dateTick0.getValue(), 0.01);
  }
}
