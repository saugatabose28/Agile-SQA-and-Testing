/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:10:16 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Composite;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.font.FontRenderContext;
import java.awt.font.LineMetrics;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.MarkerAxisBand;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.text.TextUtils;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MarkerAxisBand_ESTest extends MarkerAxisBand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.0, 0.0, 3744.703016252217, 0.0F, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw(graphics2D0, (Rectangle2D) null, (Rectangle2D) null, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(2.0).when(range0).getLowerBound();
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range1).getUpperBound();
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 2.0).when(numberAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      doReturn(range0, range1).when(numberAxis0).getRange();
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 3778.6077072088, 2.0F, (-1.0), numberAxis0.DEFAULT_TICK_LABEL_FONT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.getHeight(graphics2D0);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      doReturn((double)2.0F).when(intervalMarker0).getEndValue();
      doReturn((double)500).when(intervalMarker0).getStartValue();
      doReturn(0.0F).when(intervalMarker0).getAlpha();
      doReturn(" alt=\"\"").when(intervalMarker0).getLabel();
      doReturn(numberAxis0.DEFAULT_AXIS_LABEL_PAINT).when(intervalMarker0).getOutlinePaint();
      doReturn(numberAxis0.DEFAULT_TICK_LABEL_PAINT).when(intervalMarker0).getPaint();
      markerAxisBand0.addMarker(intervalMarker0);
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand((NumberAxis) null, 0.0, 2045.6268883, 0.05, 2.9, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      MarkerAxisBand markerAxisBand2 = new MarkerAxisBand((NumberAxis) null, 0.0, (-2281.8313861695037), 0.0, 0.0, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn(markerAxisBand1, markerAxisBand2, (Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn(markerAxisBand0, "", (Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Composite composite0 = mock(Composite.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      doReturn(composite0).when(graphics2D1).getComposite();
      doReturn(fontRenderContext0, (FontRenderContext) null).when(graphics2D1).getFontRenderContext();
      markerAxisBand0.draw(graphics2D1, (Rectangle2D) null, (Rectangle2D) null, 0.0, 2.0F);
      markerAxisBand0.equals("");
      IntervalMarker intervalMarker1 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D2).getFontRenderContext();
      markerAxisBand0.draw(graphics2D2, (Rectangle2D) null, (Rectangle2D) null, (-1.5707963267948966), (-1.0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 1.0E-8, 1.0E-8, 0.05, 0.05, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.getHeight(graphics2D0);
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 1.0E-8, 500, (-1367.0577), 1.0, numberAxis1.DEFAULT_AXIS_LABEL_FONT);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker0);
      markerAxisBand0.equals(markerAxisBand1);
      IntervalMarker intervalMarker1 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker1);
      markerAxisBand1.equals(markerAxisBand0);
      markerAxisBand1.equals(markerAxisBand0);
      markerAxisBand0.hashCode();
      IntervalMarker intervalMarker2 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand1.addMarker(intervalMarker2);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D1).getFontRenderContext();
      markerAxisBand0.getHeight(graphics2D1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      double double0 = 1.0E-8;
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      TextUtils.setUseFontMetricsGetStringBounds(true);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand((NumberAxis) null, 876.833792022, 0.0F, 215.555, 1442.4274981224, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      markerAxisBand0.equals(graphics2D1);
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, (-46.33085888915194), (-888.312001386), (-251.3453), (-46.33085888915194), numberAxis0.DEFAULT_TICK_LABEL_FONT);
      NumberAxis numberAxis2 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      TextUtils.setUseFontMetricsGetStringBounds(true);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker1 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand((NumberAxis) null, 0.0, 0.0, 0.0, 0.0, font0);
      markerAxisBand0.equals((Object) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw(graphics2D0, rectangle2D0, rectangle2D0, 0.0, 0.0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.getHeight(graphics2D1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      double double1 = 2.0;
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.0, 0.05, 2.0, 8.0, font0);
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 500, 8.0, 8.0, 772.7396786241316, numberAxis1.DEFAULT_AXIS_LABEL_FONT);
      markerAxisBand0.equals(markerAxisBand1);
      markerAxisBand0.addMarker((IntervalMarker) null);
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw((Graphics2D) null, rectangle2D0, rectangle2D0, 1.0E-8, 798.7754);
      NumberAxis numberAxis2 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      double double2 = 2.0;
      MarkerAxisBand markerAxisBand2 = new MarkerAxisBand(numberAxis2, double2, numberAxis2.MAXIMUM_TICK_COUNT, numberAxis0.DEFAULT_TICK_MARK_INSIDE_LENGTH, double0, numberAxis2.DEFAULT_AXIS_LABEL_FONT);
      // Undeclared exception!
      try { 
        markerAxisBand0.equals(markerAxisBand2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.MarkerAxisBand", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 500, 2.0F, 2.0F, 0.0F, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 1.0E-8, 1.0, 2.0F, 1.0, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker0);
      markerAxisBand0.getHeight((Graphics2D) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      doReturn((LineMetrics) null).when(font0).getLineMetrics(anyString() , any(java.awt.font.FontRenderContext.class));
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand((NumberAxis) null, 0.0, 0.0, 0.0, 0.0, font0);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      TextUtils.setUseFontMetricsGetStringBounds(false);
      markerAxisBand0.draw(graphics2D0, (Rectangle2D) null, (Rectangle2D) null, 0.0, 10.0);
      IntervalMarker intervalMarker1 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberAxis numberAxis0 = null;
      double double0 = 466.282076;
      double double1 = 0.0;
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      doReturn((LineMetrics) null).when(font0).getLineMetrics(anyString() , any(java.awt.font.FontRenderContext.class));
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand((NumberAxis) null, 466.282076, (-1.0), 0.0, (-1.0), font0);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker0);
      Object object0 = null;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D0).getFontRenderContext();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw(graphics2D0, rectangle2D0, rectangle2D1, 0.0, 466.282076);
      IntervalMarker intervalMarker1 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 0.0, 0.05, 0.0F, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D1).getFontRenderContext();
      markerAxisBand0.getHeight(graphics2D1);
      double double0 = 969.88347917;
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand((NumberAxis) null, (-1024.57), 0.05, 1916.0, 318.8417, (Font) null);
      markerAxisBand0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 1.0E-8, 2.0F, 0.0F, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      markerAxisBand0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.0, 0.0, 500, 0.05, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      markerAxisBand0.equals("'srX6}K[7n%H.dtID");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand((NumberAxis) null, 3335.98, 3335.98, 3335.98, 0.0, font0);
      markerAxisBand0.getHeight((Graphics2D) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.0F, 0.0F, 4.0, 0.0F, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 53.0, 3.0, 0.05, 500, numberAxis1.DEFAULT_TICK_LABEL_FONT);
      markerAxisBand0.equals(markerAxisBand1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = (-936.2);
      Font font0 = null;
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand((NumberAxis) null, 20.0, (-936.2), 20.0, 1534.91, (Font) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw(graphics2D0, rectangle2D0, rectangle2D0, 1534.91, 1534.91);
      markerAxisBand0.equals("");
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw(graphics2D1, rectangle2D1, rectangle2D1, 20.0, 20.0);
      markerAxisBand0.hashCode();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.getHeight(graphics2D2);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = null;
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 1.0E-8, 0.05, 1.0E-8, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 1.0E-8, 0.05, 500, 1.0E-8, numberAxis1.DEFAULT_TICK_LABEL_FONT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand1.getHeight(graphics2D0);
      markerAxisBand0.equals(markerAxisBand1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.0, 0.05, 1086.0, 500, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.0, 1086.0, 0.0, 1086.0, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      markerAxisBand0.equals(markerAxisBand1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 1.0E-8, 1.0E-8, 0.05, 0.05, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.getHeight(graphics2D0);
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 1.0E-8, 500, (-1367.0577), 1.0, numberAxis1.DEFAULT_AXIS_LABEL_FONT);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker0);
      markerAxisBand0.equals(markerAxisBand1);
      IntervalMarker intervalMarker1 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker1);
      markerAxisBand1.equals(markerAxisBand0);
      markerAxisBand1.equals(markerAxisBand0);
      markerAxisBand0.hashCode();
      IntervalMarker intervalMarker2 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand1.addMarker(intervalMarker2);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D1).getFontRenderContext();
      markerAxisBand0.getHeight(graphics2D1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn((Range) null).when(numberAxis0).getRange();
      double double0 = (-1.0);
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 3778.6077072088, 2.0F, (-1.0), numberAxis0.DEFAULT_TICK_LABEL_FONT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.getHeight(graphics2D0);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(intervalMarker0).getStartValue();
      markerAxisBand0.addMarker(intervalMarker0);
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontRenderContext0).when(graphics2D1).getFontRenderContext();
      Rectangle2D rectangle2D0 = null;
      markerAxisBand0.draw(graphics2D1, (Rectangle2D) null, (Rectangle2D) null, 0.0, 2.0F);
      String string0 = "";
      // Undeclared exception!
      try { 
        markerAxisBand0.equals(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.MarkerAxisBand", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      double double0 = 3953.086;
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 500, (-1440.31937785053), 3953.086, 1267.449830588, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.getHeight(graphics2D0);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker0);
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontRenderContext0).when(graphics2D1).getFontRenderContext();
      markerAxisBand0.getHeight(graphics2D1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D2).getFontRenderContext();
      markerAxisBand0.getHeight(graphics2D2);
      markerAxisBand0.hashCode();
      IntervalMarker intervalMarker1 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 2.0F, 3016.232968888389, 0.0, 1.5707963267948966, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.equals(markerAxisBand0);
      markerAxisBand0.getHeight(graphics2D1);
      markerAxisBand0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NumberAxis numberAxis0 = null;
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand((NumberAxis) null, 2.0, 2.0, 2.0, (-1.5707963267948966), font0);
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand((NumberAxis) null, 2.0, 2.0, 2.0, 3300.8, (Font) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand1.getHeight(graphics2D0);
      markerAxisBand0.equals(markerAxisBand1);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand1.addMarker(intervalMarker0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D1).getFontRenderContext();
      markerAxisBand1.getHeight(graphics2D1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.getHeight(graphics2D2);
      markerAxisBand1.equals(numberAxis0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, (-2218.227459), 0.0, 500, 0.0, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      TextUtils.setUseFontMetricsGetStringBounds(true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker0);
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontRenderContext0).when(graphics2D1).getFontRenderContext();
      markerAxisBand0.getHeight(graphics2D1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D2).getFontRenderContext();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw(graphics2D2, rectangle2D1, rectangle2D1, 0.0, 0.0F);
      double double0 = (-2925.647);
      double double1 = (-1.0);
      markerAxisBand0.draw(graphics2D0, rectangle2D0, rectangle2D0, double0, double1);
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).getLowerBound();
      doReturn(0.0).when(range0).getUpperBound();
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(numberAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      doReturn(range0, (Range) null).when(numberAxis0).getRange();
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.0, 496.8263839931, 0.0, 1.0E-8, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      markerAxisBand0.hashCode();
      TextUtils.setUseFontMetricsGetStringBounds(true);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(intervalMarker0).getEndValue();
      doReturn(0.0).when(intervalMarker0).getStartValue();
      doReturn(0.0F).when(intervalMarker0).getAlpha();
      doReturn((String) null).when(intervalMarker0).getLabel();
      doReturn((Paint) null).when(intervalMarker0).getOutlinePaint();
      doReturn((Paint) null).when(intervalMarker0).getPaint();
      markerAxisBand0.addMarker(intervalMarker0);
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn((Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      doReturn((Composite) null).when(graphics2D0).getComposite();
      doReturn(fontRenderContext0).when(graphics2D0).getFontRenderContext();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.0, 229.65, 0.0, 3210.714120424263, numberAxis1.DEFAULT_TICK_LABEL_FONT);
      markerAxisBand0.equals(markerAxisBand1);
      markerAxisBand0.draw(graphics2D0, rectangle2D0, rectangle2D0, 2.0F, 0.05);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        markerAxisBand0.draw(graphics2D2, rectangle2D2, rectangle2D2, numberAxis0.DEFAULT_LOWER_MARGIN, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range0).getLowerBound();
      doReturn(0.0).when(range0).getUpperBound();
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(numberAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      doReturn(range0, (Range) null).when(numberAxis0).getRange();
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 1.0E-8, 0.05, 4.0, 0.05, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      TextUtils.setUseFontMetricsGetStringBounds(true);
      markerAxisBand0.hashCode();
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn(markerAxisBand0, "RangeType.FULL").when(fontRenderContext0).getAntiAliasingHint();
      doReturn(markerAxisBand0, "RangeType.FULL").when(fontRenderContext0).getFractionalMetricsHint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      doReturn((Composite) null).when(graphics2D0).getComposite();
      doReturn(fontRenderContext0).when(graphics2D0).getFontRenderContext();
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(intervalMarker0).getEndValue();
      doReturn(1.0E-8).when(intervalMarker0).getStartValue();
      doReturn(0.0F).when(intervalMarker0).getAlpha();
      doReturn((String) null).when(intervalMarker0).getLabel();
      doReturn((Paint) null).when(intervalMarker0).getOutlinePaint();
      doReturn((Paint) null).when(intervalMarker0).getPaint();
      markerAxisBand0.addMarker(intervalMarker0);
      Rectangle2D rectangle2D0 = null;
      markerAxisBand0.draw(graphics2D0, (Rectangle2D) null, (Rectangle2D) null, 4.0, 500);
      markerAxisBand0.hashCode();
      markerAxisBand0.hashCode();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(1007.74040295).when(range0).getLowerBound();
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range1).getUpperBound();
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn((-4602.986042207381), (-4602.986042207381)).when(numberAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      doReturn(range0, range1).when(numberAxis0).getRange();
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.0, 496.8263839931, 0.0, 1.0E-8, numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      markerAxisBand0.hashCode();
      TextUtils.setUseFontMetricsGetStringBounds(true);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      doReturn(8.0).when(intervalMarker0).getEndValue();
      doReturn(8.0).when(intervalMarker0).getStartValue();
      doReturn((-1.0F)).when(intervalMarker0).getAlpha();
      markerAxisBand0.addMarker(intervalMarker0);
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn(markerAxisBand0, markerAxisBand0).when(fontRenderContext0).getAntiAliasingHint();
      doReturn(markerAxisBand0, markerAxisBand0).when(fontRenderContext0).getFractionalMetricsHint();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      Composite composite0 = mock(Composite.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(composite0).when(graphics2D0).getComposite();
      doReturn(fontRenderContext0).when(graphics2D0).getFontRenderContext();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.draw(graphics2D0, rectangle2D0, rectangle2D0, 10.0, 0.0F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(269.01).when(range0).getLowerBound();
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range1).getUpperBound();
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 269.01).when(numberAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      doReturn(range0, range1).when(numberAxis0).getRange();
      double double0 = 3778.6077072088;
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 3778.6077072088, 2.0F, 3778.6077072088, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.getHeight(graphics2D0);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      doReturn(269.01).when(intervalMarker0).getEndValue();
      doReturn(1.0E-8).when(intervalMarker0).getStartValue();
      doReturn(2.0F).when(intervalMarker0).getAlpha();
      markerAxisBand0.addMarker(intervalMarker0);
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.05, (-1771.1798543), 0.0F, 828.9315798309781, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      NumberAxis numberAxis2 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand2 = new MarkerAxisBand(numberAxis2, 500, 500, (-1136.42), 2.0, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn(markerAxisBand0, markerAxisBand1).when(fontRenderContext0).getAntiAliasingHint();
      doReturn(markerAxisBand2, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      Composite composite0 = mock(Composite.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(composite0).when(graphics2D1).getComposite();
      doReturn(fontRenderContext0).when(graphics2D1).getFontRenderContext();
      Rectangle2D rectangle2D0 = null;
      markerAxisBand0.draw(graphics2D1, (Rectangle2D) null, (Rectangle2D) null, 0.0, 2.0F);
      String string0 = "";
      markerAxisBand0.equals(string0);
      IntervalMarker intervalMarker1 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double1 = (-1.5707963267948966);
      markerAxisBand0.draw(graphics2D2, rectangle2D0, rectangle2D0, double1, double0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(2076.0).when(range0).getLowerBound();
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range1).getUpperBound();
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-691.338504)).when(numberAxis0).valueToJava2D(anyDouble() , any(java.awt.geom.Rectangle2D.class) , any(org.jfree.chart.ui.RectangleEdge.class));
      doReturn(range0, range1).when(numberAxis0).getRange();
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis0, 0.05, 3778.6077072088, 2.0F, 3778.6077072088, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.getHeight(graphics2D0);
      IntervalMarker intervalMarker0 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      doReturn((-491.0)).when(intervalMarker0).getEndValue();
      doReturn(1.0E-8).when(intervalMarker0).getStartValue();
      doReturn(0.0F).when(intervalMarker0).getAlpha();
      doReturn("").when(intervalMarker0).getLabel();
      doReturn((Paint) null).when(intervalMarker0).getOutlinePaint();
      doReturn((Paint) null).when(intervalMarker0).getPaint();
      markerAxisBand0.addMarker(intervalMarker0);
      NumberAxis numberAxis1 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand1 = new MarkerAxisBand(numberAxis1, 0.05, (-1771.1798543), 0.0F, 828.9315798309781, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      NumberAxis numberAxis2 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      MarkerAxisBand markerAxisBand2 = new MarkerAxisBand(numberAxis2, 500, 500, (-1136.42), 2.0, numberAxis0.DEFAULT_TICK_LABEL_FONT);
      FontRenderContext fontRenderContext0 = mock(FontRenderContext.class, new ViolatedAssumptionAnswer());
      doReturn(markerAxisBand0, markerAxisBand1, (Object) null, (Object) null).when(fontRenderContext0).getAntiAliasingHint();
      doReturn(markerAxisBand2, (Object) null, (Object) null, (Object) null).when(fontRenderContext0).getFractionalMetricsHint();
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Composite composite0 = mock(Composite.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      doReturn(composite0).when(graphics2D1).getComposite();
      doReturn(fontRenderContext0, (FontRenderContext) null).when(graphics2D1).getFontRenderContext();
      Rectangle2D rectangle2D0 = null;
      markerAxisBand0.draw(graphics2D1, (Rectangle2D) null, (Rectangle2D) null, 0.0, 2.0F);
      markerAxisBand0.equals("");
      IntervalMarker intervalMarker1 = mock(IntervalMarker.class, new ViolatedAssumptionAnswer());
      markerAxisBand0.addMarker(intervalMarker1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontRenderContext) null).when(graphics2D2).getFontRenderContext();
      markerAxisBand0.draw(graphics2D2, (Rectangle2D) null, (Rectangle2D) null, (-1.5707963267948966), 3778.6077072088);
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double0 = (-1250.291526);
      double double1 = 1671.5321;
      markerAxisBand1.draw(graphics2D3, rectangle2D0, rectangle2D0, double0, double1);
  }
}
