/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:10:42 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.LinearGradientPaint;
import java.awt.Paint;
import java.awt.RadialGradientPaint;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.TexturePaint;
import java.awt.geom.Rectangle2D;
import java.text.AttributedString;
import java.util.EventListener;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPosition;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.CategoryTick;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.category.CategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoryAxis_ESTest extends CategoryAxis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryAxis categoryAxis1 = new CategoryAxis();
      Plot plot0 = categoryAxis1.getPlot();
      categoryAxis0.hasListener((EventListener) null);
      Comparable<GradientPaint> comparable0 = (Comparable<GradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getTickLabelFont(comparable0);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis1.setTickLabelPaint(plot0.DEFAULT_BACKGROUND_PAINT);
      categoryAxis0.setTickLabelsVisible(false);
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(fontMetrics0).getAscent();
      doReturn((-1)).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(fontMetrics1).getAscent();
      doReturn(0, 0).when(fontMetrics1).getHeight();
      doReturn(0, 0).when(fontMetrics1).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0, fontMetrics1, fontMetrics1).when(graphics2D0).getFontMetrics();
      TextBlock textBlock0 = categoryAxis1.createLabel(1.0F, 1.0F, rectangleEdge0, graphics2D0);
      CategoryLabelPosition categoryLabelPosition0 = mock(CategoryLabelPosition.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(categoryLabelPosition0).getAngle();
      Rectangle2D rectangle2D0 = categoryAxis1.getLabelEnclosure((Graphics2D) null, (RectangleEdge) null);
      categoryAxis0.getCategoryMiddle(0, 10, rectangle2D0, (RectangleEdge) null);
      FontMetrics fontMetrics2 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics2).getAscent();
      doReturn(0).when(fontMetrics2).getHeight();
      doReturn(0).when(fontMetrics2).stringWidth(anyString());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics2).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      categoryAxis1.calculateTextBlockHeight(textBlock0, categoryLabelPosition0, graphics2D1);
      categoryAxis0.equals(categoryAxis1);
      categoryAxis0.setCategoryLabelPositionOffset(83);
      categoryAxis1.getCategorySeriesMiddle((-604), (-1024), 37, 282, (double) 10, rectangle2D0, (RectangleEdge) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Comparable<RadialGradientPaint> comparable0 = (Comparable<RadialGradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-3)).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((-3)).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(241).when(categoryDataset0).getColumnCount();
      doReturn(1).when(categoryDataset0).getRowCount();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategorySeriesMiddle(comparable0, comparable0, categoryDataset0, 814.1600385266, rectangle2D0, rectangleEdge1);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge3 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryStart((-1), (-1), rectangle2D0, rectangleEdge3);
      Comparable<SystemColor> comparable1 = (Comparable<SystemColor>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.addCategoryLabelURL(comparable1, "4v3");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getPlot();
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisSpace axisSpace0 = categoryAxis0.reserveSpace(graphics2D1, (Plot) null, rectangle2D0, rectangleEdge1, (AxisSpace) null);
      categoryAxis0.reserveSpace(graphics2D0, (Plot) null, rectangle2D0, rectangleEdge1, axisSpace0);
      categoryAxis0.setLabel(".%^333~Ax?R");
      categoryAxis0.getUpperMargin();
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(fontMetrics0).getAscent();
      doReturn(10).when(fontMetrics0).getHeight();
      doReturn((-1408)).when(fontMetrics0).stringWidth(anyString());
      FontMetrics fontMetrics1 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(fontMetrics1).getAscent();
      doReturn(0, 0).when(fontMetrics1).getHeight();
      doReturn(0, 0).when(fontMetrics1).stringWidth(anyString());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0, fontMetrics1, fontMetrics1).when(graphics2D2).getFontMetrics();
      TextBlock textBlock0 = categoryAxis0.createLabel(1.0F, 1.0F, (RectangleEdge) null, graphics2D2);
      CategoryLabelPosition categoryLabelPosition0 = mock(CategoryLabelPosition.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(categoryLabelPosition0).getAngle();
      FontMetrics fontMetrics2 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics2).getAscent();
      doReturn(0).when(fontMetrics2).getHeight();
      doReturn(0).when(fontMetrics2).stringWidth(anyString());
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics2).when(graphics2D3).getFontMetrics(any(java.awt.Font.class));
      categoryAxis0.calculateTextBlockWidth(textBlock0, categoryLabelPosition0, graphics2D3);
      categoryAxis0.getCategoryEnd(10, 1770, rectangle2D0, rectangleEdge2);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      categoryAxis0.getCategorySeriesMiddle((Comparable) 1.0F, (Comparable) 1.0F, categoryDataset0, 2.5, rectangle2D0, (RectangleEdge) null);
      categoryAxis0.clearCategoryLabelURLs();
      categoryAxis0.getCategoryEnd(10, 10, rectangle2D0, (RectangleEdge) null);
      categoryAxis0.getMaximumCategoryLabelLines();
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D4).getFontMetrics();
      // Undeclared exception!
      try { 
        categoryAxis0.createLabel(10, (-1898.33F), (RectangleEdge) null, graphics2D4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setCategoryMargin(0.0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Color color0 = (Color)Axis.DEFAULT_AXIS_LINE_PAINT;
      categoryAxis0.setTickLabelPaint((Comparable) comparable0, (Paint) color0);
      Comparable<GradientPaint> comparable1 = (Comparable<GradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = categoryAxis0.getLabelPaint();
      categoryAxis0.setTickLabelPaint(comparable1, paint0);
      categoryAxis0.setLowerMargin(965.5850647984992);
      categoryAxis0.getUpperMargin();
      int int0 = 3023;
      CategoryAxis categoryAxis1 = new CategoryAxis("Yyjv<x~}0yfl");
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis1.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryEnd((-4710), 3023, rectangle2D0, rectangleEdge1);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      // Undeclared exception!
      try { 
        categoryAxis0.draw(graphics2D1, 2.0F, rectangle2D0, rectangle2D0, rectangleEdge2, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Comparable<CategoryPlot> comparable0 = (Comparable<CategoryPlot>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<RadialGradientPaint> comparable1 = (Comparable<RadialGradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-118)).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(1188).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(1188).when(categoryDataset0).getColumnCount();
      doReturn((-1600)).when(categoryDataset0).getRowCount();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategorySeriesMiddle(comparable0, comparable1, categoryDataset0, (-4306.7706), rectangle2D0, rectangleEdge1);
      Comparable<CategoryTick> comparable2 = (Comparable<CategoryTick>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryLabelToolTip(comparable2);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.createAttributedLabel("Unknown 'category' key.");
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.getUpperMargin();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(fontMetrics0).getAscent();
      doReturn(0, 0, 0, 0).when(fontMetrics0).getHeight();
      doReturn(0, 0, 0, 0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0, (FontMetrics) null, (FontMetrics) null, (FontMetrics) null).when(graphics2D0).getFontMetrics();
      TextBlock textBlock0 = categoryAxis0.createLabel(comparable0, 3163.083F, rectangleEdge0, graphics2D0);
      CategoryLabelPosition categoryLabelPosition0 = mock(CategoryLabelPosition.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D1).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        categoryAxis0.calculateTextBlockHeight(textBlock0, categoryLabelPosition0, graphics2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisSpace axisSpace0 = mock(AxisSpace.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(axisSpace0).toString();
      AxisSpace axisSpace1 = categoryAxis0.reserveSpace(graphics2D1, (Plot) null, rectangle2D0, rectangleEdge1, axisSpace0);
      categoryAxis0.reserveSpace(graphics2D0, (Plot) null, rectangle2D0, rectangleEdge1, axisSpace1);
      categoryAxis0.getMaximumCategoryLabelLines();
      categoryAxis0.setUpperMargin((-2311.6148208639415));
      CategoryAnchor categoryAnchor0 = mock(CategoryAnchor.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryJava2DCoordinate(categoryAnchor0, 1, 1, rectangle2D0, rectangleEdge2);
      categoryAxis0.setLowerMargin(0.0);
      categoryAxis0.hashCode();
      Paint paint0 = categoryAxis0.getLabelPaint();
      categoryAxis0.setTickLabelPaint((Comparable) 3, paint0);
      categoryAxis0.getCategoryMargin();
      AxisLabelLocation axisLabelLocation0 = categoryAxis0.getLabelLocation();
      categoryAxis0.labelLocationY(axisLabelLocation0, rectangle2D0);
      categoryAxis0.setMaximumCategoryLabelLines(262);
      categoryAxis0.getLowerMargin();
      categoryAxis0.getCategoryLabelPositionOffset();
      categoryAxis0.getTickLabelPaint((Comparable) 4);
      categoryAxis0.setUpperMargin(0.0);
      categoryAxis0.getCategoryMargin();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge3 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.reserveSpace(graphics2D2, (Plot) null, rectangle2D0, rectangleEdge3, axisSpace1);
      RectangleEdge rectangleEdge4 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.calculateCategorySize(262, rectangle2D0, rectangleEdge4);
      categoryAxis0.getLowerMargin();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.getMaximumCategoryLabelLines();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategorySeriesMiddle((Comparable) 1, (Comparable) comparable0, categoryDataset0, (double) 1, rectangle2D0, rectangleEdge1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      categoryAxis0.setLabelFont(font0);
      categoryAxis0.clearCategoryLabelToolTips();
      categoryAxis0.setCategoryMargin((-1329.65804729268));
      categoryAxis0.configure();
      categoryAxis0.getCategoryMargin();
      Comparable<Color> comparable0 = (Comparable<Color>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategorySeriesMiddle(2358, 2358, 2358, 0, 1425.33785, rectangle2D0, rectangleEdge1);
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D1).getFontMetrics();
      // Undeclared exception!
      try { 
        categoryAxis0.createLabel(comparable0, 2986.9424F, rectangleEdge2, graphics2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = null;
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      // Undeclared exception!
      try { 
        categoryAxis0.getTickLabelPaint((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      categoryAxis0.getPlot();
      categoryAxis0.setPlot((Plot) null);
      categoryAxis0.setTickMarksVisible(false);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getAttributedLabel();
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.draw(graphics2D0, 0.0, rectangle2D0, rectangle2D0, rectangleEdge1, (PlotRenderingInfo) null);
      categoryAxis0.getMaximumCategoryLabelLines();
      categoryAxis0.addCategoryLabelToolTip(1.0F, "");
      categoryAxis0.clearCategoryLabelToolTips();
      categoryAxis0.setMaximumCategoryLabelWidthRatio(10);
      categoryAxis0.clearCategoryLabelToolTips();
      Comparable<GradientPaint> comparable0 = null;
      // Undeclared exception!
      try { 
        categoryAxis0.addCategoryLabelToolTip((Comparable) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setMaximumCategoryLabelWidthRatio(0.0F);
      categoryAxis0.getLabelLocation();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis0.drawCategoryLabels(graphics2D0, rectangle2D0, rectangle2D0, rectangleEdge1, (AxisState) null, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'state' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.getAttributedLabel();
      Comparable<LinearGradientPaint> comparable0 = (Comparable<LinearGradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<GradientPaint> comparable1 = (Comparable<GradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryLabelToolTip(comparable1);
      categoryAxis0.removeCategoryLabelURL(comparable0);
      float float0 = 0.0F;
      Color color0 = (Color)Axis.DEFAULT_AXIS_LABEL_PAINT;
      categoryAxis0.setLabelPaint(color0);
      categoryAxis0.setMaximumCategoryLabelWidthRatio(0.0F);
      categoryAxis0.configure();
      String string0 = "";
      // Undeclared exception!
      try { 
        categoryAxis0.addCategoryLabelURL((Comparable) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = null;
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      // Undeclared exception!
      try { 
        categoryAxis0.getTickLabelFont((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisLabelLocation axisLabelLocation0 = categoryAxis0.getLabelLocation();
      categoryAxis0.labelAnchorH(axisLabelLocation0);
      double double0 = (-1792.7254449624);
      categoryAxis0.setUpperMargin((-1792.7254449624));
      categoryAxis0.configure();
      TextBlock textBlock0 = null;
      CategoryLabelPosition categoryLabelPosition0 = mock(CategoryLabelPosition.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis0.calculateTextBlockHeight((TextBlock) null, categoryLabelPosition0, graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.removeCategoryLabelURL(comparable0);
      CategoryLabelPosition categoryLabelPosition0 = mock(CategoryLabelPosition.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis0.calculateTextBlockHeight((TextBlock) null, categoryLabelPosition0, graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("%WZmwg[Pb_d8qrUK{j");
      categoryAxis0.clearCategoryLabelURLs();
      categoryAxis0.setTickMarkOutsideLength(0.0F);
      // Undeclared exception!
      try { 
        categoryAxis0.setCategoryLabelPositions((CategoryLabelPositions) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'positions' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.getAttributedLabel();
      RectangleInsets rectangleInsets0 = categoryAxis0.getTickLabelInsets();
      categoryAxis0.setTickLabelInsets(rectangleInsets0);
      categoryAxis0.setMinorTickMarksVisible(false);
      categoryAxis0.setUpperMargin(10.0);
      Object object0 = categoryAxis0.clone();
      categoryAxis0.equals(object0);
      categoryAxis0.getCategoryLabelPositionOffset();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryStart((-118), (-118), rectangle2D0, rectangleEdge1);
      Comparable<Color> comparable0 = (Comparable<Color>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D1).getFontMetrics();
      // Undeclared exception!
      try { 
        categoryAxis0.createLabel(comparable0, 4, rectangleEdge2, graphics2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisLabelLocation axisLabelLocation0 = categoryAxis0.getLabelLocation();
      categoryAxis0.labelAnchorH(axisLabelLocation0);
      categoryAxis0.getMaximumCategoryLabelLines();
      categoryAxis0.addCategoryLabelURL(1, "");
      Object object0 = categoryAxis0.clone();
      categoryAxis0.equals(object0);
      categoryAxis0.setLowerMargin(270.0);
      categoryAxis0.configure();
      categoryAxis0.removeCategoryLabelToolTip("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = null;
      CategoryAxis categoryAxis1 = new CategoryAxis("");
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis1.drawLabel("VL9~yel", graphics2D1, rectangle2D0, rectangle2D0, (RectangleEdge) null, (AxisState) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'state' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setTickLabelsVisible(false);
      categoryAxis0.getMaximumCategoryLabelWidthRatio();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = null;
      categoryAxis0.calculateCategoryGapSize((-938), rectangle2D0, (RectangleEdge) null);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getTickLabelPaint(comparable0);
      categoryAxis0.hashCode();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getPlot();
      CategoryAxis categoryAxis1 = new CategoryAxis();
      AxisSpace axisSpace0 = mock(AxisSpace.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(axisSpace0).toString();
      AxisSpace axisSpace1 = categoryAxis1.reserveSpace(graphics2D1, (Plot) null, rectangle2D0, (RectangleEdge) null, axisSpace0);
      categoryAxis0.reserveSpace(graphics2D1, (Plot) null, rectangle2D0, (RectangleEdge) null, axisSpace1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D2).getFontMetrics();
      AxisLabelLocation axisLabelLocation0 = categoryAxis0.getLabelLocation();
      categoryAxis1.labelLocationX(axisLabelLocation0, rectangle2D0);
      // Undeclared exception!
      try { 
        categoryAxis0.createLabel(0.2, (-938), (RectangleEdge) null, graphics2D2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryLabelPosition categoryLabelPosition0 = mock(CategoryLabelPosition.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis0.calculateTextBlockWidth((TextBlock) null, categoryLabelPosition0, graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("/tpe:qOQL!v.HxEjN");
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      categoryAxis0.setTickLabelInsets(rectangleInsets0);
      int int0 = (-1497);
      categoryAxis0.setMaximumCategoryLabelLines((-1497));
      CategoryLabelPosition categoryLabelPosition0 = mock(CategoryLabelPosition.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis0.calculateTextBlockWidth((TextBlock) null, categoryLabelPosition0, graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategorySeriesMiddle((Comparable) "", (Comparable) "", categoryDataset0, (-3820.0), rectangle2D0, rectangleEdge1);
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.calculateCategorySize(16, rectangle2D0, rectangleEdge2);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge3 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.drawTickMarks(graphics2D1, 0.0, rectangle2D0, rectangleEdge3, (AxisState) null);
      categoryAxis0.addCategoryLabelToolTip("", "_`.5y2s+u!");
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset1).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset1).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset1).getColumnCount();
      doReturn(0).when(categoryDataset1).getRowCount();
      RectangleEdge rectangleEdge4 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategorySeriesMiddle((Comparable) "_`.5y2s+u!", (Comparable) "", categoryDataset1, 0.0, rectangle2D0, rectangleEdge4);
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      categoryAxis0.setLabelInsets(rectangleInsets0);
      RectangleEdge rectangleEdge5 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategorySeriesMiddle(16, 0, 16, 16, Double.NaN, rectangle2D0, rectangleEdge5);
      categoryAxis0.setUpperMargin(0);
      categoryAxis0.hashCode();
      categoryAxis0.clearCategoryLabelURLs();
      categoryAxis0.getCategoryMargin();
      RectangleEdge rectangleEdge6 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D2).getFontMetrics();
      // Undeclared exception!
      try { 
        categoryAxis0.createLabel("_`.5y2s+u!", (-1.0F), rectangleEdge6, graphics2D2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D1, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.draw(graphics2D0, 0.0, rectangle2D0, rectangle2D0, rectangleEdge1, (PlotRenderingInfo) null);
      categoryAxis0.getMaximumCategoryLabelWidthRatio();
      categoryAxis0.getCategoryStart(83, 554, rectangle2D0, (RectangleEdge) null);
      CategoryLabelPositions categoryLabelPositions0 = categoryAxis0.getCategoryLabelPositions();
      categoryAxis0.setCategoryLabelPositions(categoryLabelPositions0);
      categoryAxis0.getMaximumCategoryLabelLines();
      categoryAxis0.getMaximumCategoryLabelLines();
      categoryAxis0.getCategoryLabelURL(1);
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      categoryAxis0.getCategorySeriesMiddle((Comparable) null, (Comparable) null, categoryDataset0, 0.0, (Rectangle2D) null, (RectangleEdge) null);
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryLabelURL((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Comparable<RadialGradientPaint> comparable0 = null;
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryLabelToolTip((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      AxisState axisState0 = categoryAxis0.draw(graphics2D1, (-308.8821), rectangle2D0, rectangle2D0, rectangleEdge1, plotRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      AxisState axisState1 = categoryAxis0.drawCategoryLabels(graphics2D1, rectangle2D0, rectangle2D0, rectangleEdge1, axisState0, plotRenderingInfo1);
      AxisState axisState2 = categoryAxis0.drawLabel("", graphics2D1, rectangle2D0, rectangle2D0, rectangleEdge1, axisState1);
      PlotRenderingInfo plotRenderingInfo2 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      categoryAxis0.drawCategoryLabels(graphics2D0, rectangle2D0, rectangle2D0, rectangleEdge1, axisState2, plotRenderingInfo2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisLabelLocation axisLabelLocation0 = categoryAxis0.getLabelLocation();
      categoryAxis0.setVisible(false);
      categoryAxis0.setLabelLocation(axisLabelLocation0);
      categoryAxis0.getCategoryMargin();
      categoryAxis0.hashCode();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      AttributedString attributedString0 = categoryAxis0.createAttributedLabel("_W6(.6'");
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      AxisState axisState0 = categoryAxis0.draw(graphics2D0, 0.2, (Rectangle2D) null, (Rectangle2D) null, rectangleEdge0, plotRenderingInfo0);
      // Undeclared exception!
      try { 
        categoryAxis0.drawAttributedLabel(attributedString0, graphics2D0, (Rectangle2D) null, (Rectangle2D) null, rectangleEdge0, axisState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setMaximumCategoryLabelLines((-112));
      Comparable<CategoryPlot> comparable0 = (Comparable<CategoryPlot>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getTickLabelPaint(comparable0);
      categoryAxis0.getLowerMargin();
      Comparable<Font> comparable1 = (Comparable<Font>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryLabelURL(comparable1);
      categoryAxis0.setMaximumCategoryLabelLines(2426);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "X}z7cx$70ss~i^";
      CategoryAxis categoryAxis0 = new CategoryAxis("X}z7cx$70ss~i^");
      float float0 = (-1807.95F);
      categoryAxis0.getCategoryLabelURL("X}z7cx$70ss~i^");
      Color color0 = (Color)Axis.DEFAULT_TICK_LABEL_PAINT;
      categoryAxis0.setTickLabelPaint(color0);
      categoryAxis0.setTickMarkOutsideLength((-1807.95F));
      Comparable<String> comparable0 = null;
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryLabelURL((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryAxis categoryAxis1 = new CategoryAxis();
      Paint paint0 = categoryAxis1.getTickMarkPaint();
      categoryAxis0.getPlot();
      categoryAxis1.hasListener((EventListener) null);
      categoryAxis0.setAxisLinePaint(paint0);
      categoryAxis0.setLowerMargin((-2813.8));
      categoryAxis0.setMaximumCategoryLabelWidthRatio(2751.9749F);
      categoryAxis1.setCategoryMargin(2751.9749F);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryStart(0, 19, rectangle2D0, rectangleEdge1);
      categoryAxis1.getMaximumCategoryLabelWidthRatio();
      categoryAxis1.addCategoryLabelURL(10, "");
      Object object0 = categoryAxis1.clone();
      categoryAxis0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      categoryAxis0.getTickLabelPaint((Comparable) "");
      Paint paint0 = categoryAxis0.getTickLabelPaint();
      categoryAxis0.setTickLabelPaint((Comparable) "", paint0);
      categoryAxis0.getCategoryLabelToolTip("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.calculateCategorySize(0, rectangle2D0, rectangleEdge1);
      // Undeclared exception!
      try { 
        categoryAxis0.removeCategoryLabelURL((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setCategoryMargin(471.790075);
      categoryAxis0.configure();
      categoryAxis0.setCategoryLabelPositionOffset(2067);
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_AXIS_LINE_STROKE;
      categoryAxis0.setAxisLineStroke(basicStroke0);
      Comparable<LinearGradientPaint> comparable0 = (Comparable<LinearGradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getTickLabelPaint(comparable0);
      categoryAxis0.getMaximumCategoryLabelLines();
      categoryAxis0.getCategoryMargin();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = null;
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, (RectangleEdge) null);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis0.draw(graphics2D1, 988.71389329797, rectangle2D0, rectangle2D0, (RectangleEdge) null, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'edge' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.getCategoryLabelPositionOffset();
      categoryAxis0.setCategoryLabelPositionOffset(4);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      AxisState axisState0 = categoryAxis0.draw(graphics2D1, 4, rectangle2D0, rectangle2D0, rectangleEdge1, plotRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      categoryAxis0.drawCategoryLabels(graphics2D0, rectangle2D0, rectangle2D0, rectangleEdge1, axisState0, plotRenderingInfo1);
      categoryAxis0.setMaximumCategoryLabelWidthRatio(4);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "5pq39]#3J]|cc.(1e:";
      CategoryAxis categoryAxis0 = new CategoryAxis("5pq39]#3J]|cc.(1e:");
      AxisChangeEvent axisChangeEvent0 = mock(AxisChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryAxis0.notifyListeners(axisChangeEvent0);
      categoryAxis0.setMinorTickMarkOutsideLength(0);
      categoryAxis0.addCategoryLabelToolTip("5pq39]#3J]|cc.(1e:", "Wscs?=-sDVEY#.M[");
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryMiddle(0, 0, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: 0
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.getMaximumCategoryLabelWidthRatio();
      int int0 = 0;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryStart(0, 32, rectangle2D0, rectangleEdge1);
      int int1 = 1886;
      Rectangle2D rectangle2D1 = null;
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.calculateCategoryGapSize(1886, (Rectangle2D) null, rectangleEdge2);
      categoryAxis0.getMaximumCategoryLabelLines();
      Font font0 = categoryAxis0.getTickLabelFont();
      categoryAxis0.setTickLabelFont((Comparable) 1, font0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.addCategoryLabelToolTip(comparable0, "`95zpU)-58ci8/2fo");
      categoryAxis0.clone();
      categoryAxis0.setTickLabelPaint((Comparable) "`95zpU)-58ci8/2fo", (Paint) null);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      RectangleEdge rectangleEdge3 = null;
      Rectangle2D rectangle2D2 = categoryAxis0.getLabelEnclosure(graphics2D1, (RectangleEdge) null);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis0.draw(graphics2D1, 0.0F, rectangle2D2, rectangle2D2, (RectangleEdge) null, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'edge' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Comparable<SystemColor> comparable0 = (Comparable<SystemColor>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = null;
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, (RectangleEdge) null);
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryMiddle(comparable0, (List) null, rectangle2D0, (RectangleEdge) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'categories' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisChangeEvent axisChangeEvent0 = mock(AxisChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryAxis0.notifyListeners(axisChangeEvent0);
      Comparable<TexturePaint> comparable0 = (Comparable<TexturePaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryMiddle(comparable0, (List) null, rectangle2D0, rectangleEdge1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'categories' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Comparable<LinearGradientPaint> comparable0 = (Comparable<LinearGradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getTickLabelFont(comparable0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getTickLabelPaint(comparable1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis(">i&r%");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis1 = new CategoryAxis();
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis1.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getAttributedLabel();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      AxisState axisState0 = categoryAxis1.draw(graphics2D1, 15.0, rectangle2D0, rectangle2D0, rectangleEdge1, plotRenderingInfo0);
      AxisState axisState1 = categoryAxis1.drawLabel("", graphics2D1, rectangle2D0, rectangle2D0, rectangleEdge1, axisState0);
      AxisState axisState2 = categoryAxis1.drawAttributedLabel((AttributedString) null, graphics2D1, rectangle2D0, rectangle2D0, rectangleEdge1, axisState1);
      categoryAxis0.drawTickMarks(graphics2D0, 15.0, rectangle2D0, rectangleEdge1, axisState2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = null;
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      int int0 = 193;
      Graphics2D graphics2D0 = null;
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryMiddle((-3024), 193, rectangle2D0, rectangleEdge1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -3024
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.getUpperMargin();
      Comparable<CategoryTick> comparable0 = (Comparable<CategoryTick>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getTickLabelPaint(comparable0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Plot plot0 = categoryAxis0.getPlot();
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.reserveSpace(graphics2D0, (Plot) null, rectangle2D0, rectangleEdge1, (AxisSpace) null);
      categoryAxis0.setMaximumCategoryLabelWidthRatio(0.5F);
      categoryAxis0.removeCategoryLabelToolTip(10);
      categoryAxis0.addCategoryLabelURL(1.0F, "@H>[YXh_c");
      categoryAxis0.setTickLabelPaint((Comparable) 10, plot0.DEFAULT_BACKGROUND_PAINT);
      RectangleEdge rectangleEdge2 = null;
      categoryAxis0.getCategorySeriesMiddle(10, 123, 1920, 2874, 0.0, rectangle2D0, (RectangleEdge) null);
      categoryAxis0.getMaximumCategoryLabelWidthRatio();
      categoryAxis0.addCategoryLabelToolTip(1.0F, "%I0*uKMLf%9S");
      categoryAxis0.getCategoryLabelPositionOffset();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      Rectangle2D rectangle2D1 = categoryAxis0.getLabelEnclosure(graphics2D1, (RectangleEdge) null);
      RectangleEdge rectangleEdge3 = null;
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getAttributedLabel();
      Graphics2D graphics2D3 = null;
      PlotRenderingInfo plotRenderingInfo0 = null;
      // Undeclared exception!
      try { 
        categoryAxis0.draw((Graphics2D) null, 0.5F, rectangle2D1, rectangle2D1, (RectangleEdge) null, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "R p,5x/Tl)l";
      CategoryAxis categoryAxis0 = new CategoryAxis("R p,5x/Tl)l");
      Font font0 = categoryAxis0.getLabelFont();
      categoryAxis0.setTickLabelFont((Comparable) "R p,5x/Tl)l", font0);
      categoryAxis0.getTickLabelFont((Comparable) "R p,5x/Tl)l");
      int int0 = 4369;
      int int1 = 412;
      int int2 = 945;
      double double0 = (-1592.5);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("8fa");
      CategoryAxis categoryAxis1 = new CategoryAxis();
      CategoryLabelPositions categoryLabelPositions0 = categoryAxis1.getCategoryLabelPositions();
      categoryAxis0.setCategoryLabelPositions(categoryLabelPositions0);
      categoryAxis0.removeCategoryLabelToolTip("8fa");
      categoryAxis0.setMaximumCategoryLabelLines((-4200));
      categoryAxis1.setLowerMargin((-4200));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis1.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryMiddle((-4200), 0, rectangle2D0, rectangleEdge1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -4200
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryMiddle(663, 4, rectangle2D0, (RectangleEdge) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: 663
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getPlot();
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisSpace axisSpace0 = categoryAxis0.reserveSpace(graphics2D1, (Plot) null, rectangle2D0, rectangleEdge1, (AxisSpace) null);
      categoryAxis0.reserveSpace(graphics2D0, (Plot) null, rectangle2D0, rectangleEdge1, axisSpace0);
      categoryAxis0.setLabel(".%^333~Ax?R");
      categoryAxis0.getUpperMargin();
      int int0 = 1770;
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D2).getFontMetrics();
      // Undeclared exception!
      try { 
        categoryAxis0.createLabel(1.0F, 1.0F, (RectangleEdge) null, graphics2D2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setAttributedLabel("PZx?S7PwO#3\"L/|Z");
      Color color0 = (Color)Axis.DEFAULT_AXIS_LABEL_PAINT;
      categoryAxis0.setTickMarkPaint(color0);
      categoryAxis0.hashCode();
      categoryAxis0.setLowerMargin(0.0);
      categoryAxis0.getCategoryLabelPositionOffset();
      categoryAxis0.getUpperMargin();
      categoryAxis0.getUpperMargin();
      CategoryLabelPositions categoryLabelPositions0 = categoryAxis0.getCategoryLabelPositions();
      categoryAxis0.setCategoryLabelPositions(categoryLabelPositions0);
      categoryAxis0.addCategoryLabelURL("PZx?S7PwO#3\"L/|Z", "PZx?S7PwO#3\"L/|Z");
      categoryAxis0.setLowerMargin((-1429.108125356));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.getCategoryMargin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      categoryAxis0.draw(graphics2D0, 0.0, rectangle2D0, rectangle2D0, rectangleEdge1, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      int int0 = 0;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategorySeriesMiddle(0, 0, 35, 35, (double) 35, rectangle2D0, rectangleEdge1);
      categoryAxis0.equals("^+h");
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      categoryAxis0.setTickLabelFont(font0);
      Graphics2D graphics2D1 = null;
      categoryAxis0.getPlot();
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      AxisSpace axisSpace0 = mock(AxisSpace.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis0.reserveSpace((Graphics2D) null, (Plot) null, rectangle2D0, rectangleEdge2, axisSpace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setMaximumCategoryLabelWidthRatio(2423.738F);
      categoryAxis0.getCategoryLabelPositions();
      categoryAxis0.setCategoryLabelPositionOffset(3642);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("oCa]`Q4CA?");
      categoryAxis0.equals("oCa]`Q4CA?");
      CategoryAxis categoryAxis1 = new CategoryAxis("oCa]`Q4CA?");
      Font font0 = categoryAxis1.getLabelFont();
      categoryAxis0.setTickLabelFont((Comparable) "oCa]`Q4CA?", font0);
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.removeCategoryLabelToolTip(comparable0);
      categoryAxis0.clone();
      categoryAxis0.setLowerMargin((-252.96155));
      Comparable<Font> comparable1 = null;
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategorySeriesMiddle((Comparable) null, (Comparable) null, categoryDataset0, (-252.96155), rectangle2D0, rectangleEdge1);
      categoryAxis0.hashCode();
      categoryAxis0.setLowerMargin((-252.96155));
      categoryAxis0.setCategoryMargin(Double.NaN);
      categoryAxis0.setLowerMargin((-252.96155));
      Color color0 = (Color)Axis.DEFAULT_TICK_LABEL_PAINT;
      // Undeclared exception!
      try { 
        categoryAxis0.setTickLabelPaint((Comparable) null, (Paint) color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("Icj5t");
      categoryAxis0.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setTickMarksVisible(false);
      categoryAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Comparable<LinearGradientPaint> comparable0 = (Comparable<LinearGradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategorySeriesMiddle(comparable0, comparable0, categoryDataset0, 5.0, rectangle2D0, rectangleEdge1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("bU($.\"}B)N3z0F");
      categoryAxis0.removeCategoryLabelToolTip("bU($.\"}B)N3z0F");
      Paint paint0 = categoryAxis0.getTickLabelPaint();
      categoryAxis0.setTickLabelPaint((Comparable) "bU($.\"}B)N3z0F", paint0);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics();
      // Undeclared exception!
      try { 
        categoryAxis0.createLabel("bU($.\"}B)N3z0F", 2187.8704F, rectangleEdge0, graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Comparable<Color> comparable0 = (Comparable<Color>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Color color0 = (Color)Axis.DEFAULT_TICK_LABEL_PAINT;
      categoryAxis0.setTickLabelPaint((Comparable) comparable0, (Paint) color0);
      categoryAxis0.getCategoryLabelPositionOffset();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      categoryAxis0.setLowerMargin((-1611.796));
      categoryAxis0.setLabel((String) null);
      categoryAxis0.getTickLabelPaint((Comparable) "");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = null;
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      int int0 = 2118;
      int int1 = 0;
      // Undeclared exception!
      try { 
        categoryAxis0.addCategoryLabelToolTip((Comparable) null, "?CLij0,f+Cy?-+E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisLabelLocation axisLabelLocation0 = categoryAxis0.getLabelLocation();
      categoryAxis0.labelAnchorH(axisLabelLocation0);
      categoryAxis0.getMaximumCategoryLabelLines();
      categoryAxis0.addCategoryLabelURL(1, "");
      Object object0 = categoryAxis0.clone();
      categoryAxis0.equals(object0);
      categoryAxis0.setLowerMargin(0.05);
      categoryAxis0.configure();
      categoryAxis0.removeCategoryLabelToolTip("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      CategoryAxis categoryAxis1 = new CategoryAxis("");
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis1.drawLabel("VL9~yel", graphics2D1, rectangle2D0, rectangle2D0, (RectangleEdge) null, (AxisState) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'state' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.addCategoryLabelToolTip(comparable0, "x\"5>F)B");
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryStart((-31), (-6773), rectangle2D0, rectangleEdge1);
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryEnd((-604), (-41), rectangle2D0, rectangleEdge2);
      RectangleEdge rectangleEdge3 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = null;
      // Undeclared exception!
      try { 
        categoryAxis0.createLabel("x\"5>F)B", 0.5F, rectangleEdge3, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.G2TextMeasurer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisLabelLocation axisLabelLocation0 = categoryAxis0.getLabelLocation();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      categoryAxis0.labelLocationY(axisLabelLocation0, rectangle2D0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getPlot();
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      AxisSpace axisSpace0 = mock(AxisSpace.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(axisSpace0).toString();
      AxisSpace axisSpace1 = categoryAxis0.reserveSpace(graphics2D1, (Plot) null, rectangle2D0, rectangleEdge1, axisSpace0);
      categoryAxis0.reserveSpace(graphics2D1, (Plot) null, rectangle2D0, rectangleEdge1, axisSpace1);
      categoryAxis0.setCategoryMargin(1.0);
      categoryAxis0.clearCategoryLabelURLs();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D3).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      RectangleEdge rectangleEdge3 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = categoryAxis0.getLabelEnclosure(graphics2D3, rectangleEdge2);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      AxisState axisState0 = categoryAxis0.draw(graphics2D3, 1541.35799325, rectangle2D0, rectangle2D1, rectangleEdge3, plotRenderingInfo0);
      AxisState axisState1 = categoryAxis0.drawAttributedLabel((AttributedString) null, graphics2D2, rectangle2D0, (Rectangle2D) null, rectangleEdge3, axisState0);
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      AxisState axisState2 = categoryAxis0.drawCategoryLabels(graphics2D3, rectangle2D0, rectangle2D0, rectangleEdge2, axisState1, plotRenderingInfo1);
      AxisState axisState3 = categoryAxis0.drawLabel("", graphics2D2, rectangle2D0, rectangle2D0, rectangleEdge2, axisState2);
      PlotRenderingInfo plotRenderingInfo2 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      categoryAxis0.drawCategoryLabels(graphics2D2, rectangle2D0, rectangle2D0, rectangleEdge2, axisState3, plotRenderingInfo2);
      RectangleEdge rectangleEdge4 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryMiddle(10, 2124, rectangle2D1, rectangleEdge4);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      categoryAxis0.getCategoryLabelToolTip("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryEnd(3097, (-771), rectangle2D0, rectangleEdge1);
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D1).getFontMetrics();
      // Undeclared exception!
      try { 
        categoryAxis0.createLabel("", 0.0F, rectangleEdge2, graphics2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "53/pZt(D|j}[qj33u8E";
      CategoryAxis categoryAxis0 = new CategoryAxis("53/pZt(D|j}[qj33u8E");
      categoryAxis0.getTickLabelPaint((Comparable) "53/pZt(D|j}[qj33u8E");
      // Undeclared exception!
      try { 
        categoryAxis0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "]8NT6wTa";
      CategoryAxis categoryAxis0 = new CategoryAxis("]8NT6wTa");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      double double0 = 285.944778208;
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisLabelLocation axisLabelLocation0 = categoryAxis0.getLabelLocation();
      categoryAxis0.setLabelLocation(axisLabelLocation0);
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      categoryAxis0.setLabelInsets(rectangleInsets0);
      categoryAxis0.setUpperMargin((-304.69));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      AxisState axisState0 = categoryAxis0.draw(graphics2D1, 0.0, rectangle2D0, rectangle2D0, rectangleEdge1, plotRenderingInfo0);
      AxisState axisState1 = categoryAxis0.drawLabel("", graphics2D0, rectangle2D0, rectangle2D0, rectangleEdge1, axisState0);
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.refreshTicks(graphics2D0, axisState1, rectangle2D0, rectangleEdge2);
      categoryAxis0.getCategoryLabelPositionOffset();
      categoryAxis0.clearCategoryLabelToolTips();
      categoryAxis0.setCategoryMargin(4);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge3 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      categoryAxis0.drawCategoryLabels(graphics2D2, rectangle2D0, rectangle2D0, rectangleEdge3, axisState0, plotRenderingInfo1);
      RectangleEdge rectangleEdge4 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.calculateCategoryGapSize(0, rectangle2D0, rectangleEdge4);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      categoryAxis0.getCategoryLabelPositions();
      categoryAxis0.getCategoryLabelURL("");
      categoryAxis0.configure();
      CategoryAxis categoryAxis1 = new CategoryAxis();
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics();
      // Undeclared exception!
      try { 
        categoryAxis1.createLabel(0.0F, 0.0F, rectangleEdge0, graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryAnchor categoryAnchor0 = mock(CategoryAnchor.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = categoryAxis0.getLabelInsets();
      categoryAxis0.setTickLabelInsets(rectangleInsets0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D1, rectangleEdge1);
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.calculateCategorySize(0, rectangle2D0, rectangleEdge2);
      Rectangle2D rectangle2D1 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge3 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryJava2DCoordinate(categoryAnchor0, 0, 0, rectangle2D1, rectangleEdge3);
      categoryAxis0.getAttributedLabel();
      categoryAxis0.setAttributedLabel((AttributedString) null);
      RectangleEdge rectangleEdge4 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategoryStart(1690, 1844, rectangle2D1, rectangleEdge4);
      categoryAxis0.getMaximumCategoryLabelWidthRatio();
      categoryAxis0.setMaximumCategoryLabelLines(2063);
      Comparable<GradientPaint> comparable0 = (Comparable<GradientPaint>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.removeCategoryLabelURL(comparable0);
      RectangleEdge rectangleEdge5 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategorySeriesMiddle(2063, 4, (-1095), 0, 0.0, rectangle2D1, rectangleEdge5);
      RectangleEdge rectangleEdge6 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.calculateCategorySize(1844, rectangle2D1, rectangleEdge6);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("p#JrD");
      categoryAxis0.setUpperMargin(0.0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryAxis0.setUpperMargin((-1360.0));
      categoryAxis0.removeCategoryLabelToolTip(comparable0);
      categoryAxis0.clone();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((-1)).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(3881).when(categoryDataset0).getColumnCount();
      doReturn((-1)).when(categoryDataset0).getRowCount();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      categoryAxis0.getCategorySeriesMiddle(comparable0, comparable0, categoryDataset0, (-3190.77), rectangle2D0, rectangleEdge1);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(categoryAxis0).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(chartRenderingInfo0, (ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      // Undeclared exception!
      try { 
        categoryAxis0.draw(graphics2D1, 0.0, rectangle2D0, rectangle2D0, rectangleEdge2, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }
}
