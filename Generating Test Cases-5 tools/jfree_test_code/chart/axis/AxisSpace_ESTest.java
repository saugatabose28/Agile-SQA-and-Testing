/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:26:23 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.ui.RectangleEdge;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AxisSpace_ESTest extends AxisSpace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      double double0 = (-422.54426373);
      axisSpace0.setBottom((-422.54426373));
      axisSpace0.setLeft((-422.54426373));
      axisSpace0.clone();
      AxisSpace axisSpace1 = new AxisSpace();
      axisSpace0.equals(axisSpace1);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = null;
      axisSpace0.reserved(rectangle2D0, (RectangleEdge) null);
      // Undeclared exception!
      try { 
        axisSpace1.expand((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = new AxisSpace();
      axisSpace0.ensureAtLeast(axisSpace1);
      axisSpace0.getTop();
      AxisSpace axisSpace2 = (AxisSpace)axisSpace1.clone();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(1009.27390983).when(rectangle2D0).getHeight();
      doReturn((-1.0)).when(rectangle2D0).getWidth();
      doReturn(415.31603808162976).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace2.shrink(rectangle2D0, (Rectangle2D) null);
      axisSpace0.clone();
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace2.expand(rectangle2D_Double0, rectangle2D_Double0);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved(rectangle2D_Double1, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved((Rectangle2D) null, rectangleEdge1);
      Rectangle2D rectangle2D1 = null;
      // Undeclared exception!
      try { 
        axisSpace1.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = new AxisSpace();
      axisSpace0.ensureAtLeast(axisSpace1);
      axisSpace0.getTop();
      AxisSpace axisSpace2 = (AxisSpace)axisSpace1.clone();
      axisSpace2.clone();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn((-1.0)).when(rectangle2D0).getWidth();
      doReturn((-1.0)).when(rectangle2D0).getX();
      doReturn((-1.0)).when(rectangle2D0).getY();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace2.shrink(rectangle2D0, (Rectangle2D) null);
      axisSpace0.clone();
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace2.expand(rectangle2D_Double0, rectangle2D_Double0);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved(rectangle2D_Double1, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved((Rectangle2D) null, rectangleEdge1);
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        axisSpace1.ensureAtLeast(0.0, rectangleEdge2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AxisSpace.ensureAtLeast(): unrecognised AxisLocation.
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = new AxisSpace();
      axisSpace0.ensureAtLeast(axisSpace1);
      axisSpace0.getTop();
      AxisSpace axisSpace2 = (AxisSpace)axisSpace1.clone();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(rectangle2D0).getHeight();
      doReturn((-1.0)).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(1150.7).when(rectangle2D0).getY();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace2.shrink(rectangle2D0, (Rectangle2D) null);
      axisSpace0.clone();
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace2.expand(rectangle2D_Double0, rectangle2D_Double0);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved(rectangle2D_Double1, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = null;
      // Undeclared exception!
      try { 
        axisSpace1.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = new AxisSpace();
      axisSpace0.ensureAtLeast(axisSpace1);
      axisSpace0.getTop();
      AxisSpace axisSpace2 = (AxisSpace)axisSpace1.clone();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-929.0924126045)).when(rectangle2D0).getHeight();
      doReturn((-1.0)).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn((-157.5307)).when(rectangle2D0).getY();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace2.shrink(rectangle2D0, (Rectangle2D) null);
      axisSpace0.clone();
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace2.expand(rectangle2D_Double0, rectangle2D_Double0);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved(rectangle2D_Double1, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved((Rectangle2D) null, rectangleEdge1);
      Rectangle2D rectangle2D1 = null;
      // Undeclared exception!
      try { 
        axisSpace1.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = new AxisSpace();
      axisSpace0.ensureAtLeast(axisSpace1);
      axisSpace0.getTop();
      AxisSpace axisSpace2 = (AxisSpace)axisSpace1.clone();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace2.shrink(rectangle2D0, (Rectangle2D) null);
      axisSpace0.clone();
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)axisSpace2.expand(rectangle2D_Double0, rectangle2D_Double0);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved(rectangle2D_Double1, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved((Rectangle2D) null, rectangleEdge1);
      Rectangle2D rectangle2D1 = null;
      // Undeclared exception!
      try { 
        axisSpace1.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertNotNull(axisSpace0);
      
      axisSpace0.setRight((-477.044095457));
      assertEquals((-477.044095457), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertNotNull(axisSpace1);
      
      boolean boolean0 = axisSpace0.equals(axisSpace1);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals((-477.044095457), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertFalse(boolean0);
      
      AxisSpace axisSpace2 = (AxisSpace)axisSpace0.clone();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertFalse(axisSpace2.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals((-477.044095457), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals((-477.044095457), axisSpace2.getRight(), 0.01);
      assertNotNull(axisSpace2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      AxisSpace axisSpace0 = new AxisSpace();
      axisSpace0.reserved(rectangle2D0, rectangleEdge0);
      axisSpace0.expand(rectangle2D0, (Rectangle2D) null);
      RectangleEdge rectangleEdge1 = null;
      // Undeclared exception!
      try { 
        axisSpace0.add(0.0, (RectangleEdge) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'edge' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      axisSpace0.setTop(3177.0731739147377);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      AxisSpace axisSpace1 = new AxisSpace();
      axisSpace0.equals(axisSpace1);
      // Undeclared exception!
      try { 
        axisSpace0.ensureAtLeast(3177.0731739147377, rectangleEdge0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AxisSpace.ensureAtLeast(): unrecognised AxisLocation.
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      double double0 = 1.0;
      axisSpace0.setLeft(1.0);
      AxisSpace axisSpace1 = new AxisSpace();
      axisSpace0.equals(axisSpace1);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = null;
      axisSpace0.reserved(rectangle2D0, (RectangleEdge) null);
      axisSpace0.setLeft((-2449.9319933870847));
      // Undeclared exception!
      try { 
        axisSpace0.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      axisSpace0.equals(axisSpace0);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved((Rectangle2D) null, rectangleEdge0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved((Rectangle2D) null, rectangleEdge1);
      // Undeclared exception!
      try { 
        axisSpace0.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      axisSpace0.setLeft((-1.0));
      axisSpace0.toString();
      axisSpace0.hashCode();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1378.34074588), 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn((-3495.7202045974345), 0.0, 0.0).when(rectangle2D0).getX();
      doReturn(507.74064, (-1378.34074588), (-1.0)).when(rectangle2D0).getY();
      doReturn("org.jfree.chart.axis.AxisSpace@c041bda7[left=-1.0,right=0.0,top=0.0,bottom=0.0]", "org.jfree.chart.axis.AxisSpace@c041bda7[left=-1.0,right=0.0,top=0.0,bottom=0.0]").when(rectangle2D0).toString();
      Rectangle2D rectangle2D1 = axisSpace0.expand(rectangle2D0, rectangle2D0);
      Rectangle2D rectangle2D2 = axisSpace0.shrink(rectangle2D1, rectangle2D1);
      axisSpace0.reserved(rectangle2D2, (RectangleEdge) null);
      axisSpace0.reserved((Rectangle2D) null, (RectangleEdge) null);
      axisSpace0.getLeft();
      axisSpace0.setLeft(0.0);
      axisSpace0.getRight();
      axisSpace0.setTop((-1.0));
      axisSpace0.setLeft((-157.1));
      axisSpace0.expand(rectangle2D2, (Rectangle2D) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = new AxisSpace();
      axisSpace0.setTop(0.0);
      axisSpace1.clone();
      axisSpace0.ensureAtLeast(axisSpace1);
      axisSpace0.setTop(1.0);
      axisSpace0.getRight();
      axisSpace0.toString();
      axisSpace1.setLeft(1.0);
      axisSpace1.ensureAtLeast(axisSpace0);
      axisSpace0.setLeft((-1674.9658));
      axisSpace1.getLeft();
      axisSpace1.setBottom((-1674.9658));
      axisSpace0.setTop(0.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      axisSpace0.setTop((-1823.837224));
      axisSpace0.setLeft(0.0);
      axisSpace0.getTop();
      // Undeclared exception!
      try { 
        axisSpace0.expand((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      double double0 = (-211.755850036);
      axisSpace0.setTop((-211.755850036));
      Object object0 = axisSpace0.clone();
      axisSpace0.equals(object0);
      axisSpace0.setTop(1.0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0, 0.0).when(rectangle2D0).getX();
      doReturn(0.0, 0.0).when(rectangle2D0).getY();
      doReturn((String) null, (String) null).when(rectangle2D0).toString();
      Rectangle2D rectangle2D1 = axisSpace0.shrink(rectangle2D0, rectangle2D0);
      Rectangle2D rectangle2D2 = axisSpace0.expand(rectangle2D1, rectangle2D1);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.setTop(0.0);
      axisSpace0.reserved(rectangle2D2, rectangleEdge0);
      // Undeclared exception!
      try { 
        axisSpace0.expand((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      double double0 = (-782.318724217);
      axisSpace0.setLeft((-782.318724217));
      axisSpace0.toString();
      Object object0 = axisSpace0.clone();
      double double1 = (-3266.0);
      axisSpace0.setTop((-3266.0));
      axisSpace0.equals(object0);
      axisSpace0.setLeft((-1.0));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      doReturn((String) null).when(rectangle2D0).toString();
      Rectangle2D rectangle2D1 = axisSpace0.expand(rectangle2D0, rectangle2D0);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved(rectangle2D1, rectangleEdge0);
      // Undeclared exception!
      try { 
        axisSpace0.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      axisSpace0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      double double0 = (-1187.86363073572);
      axisSpace0.setBottom((-1187.86363073572));
      axisSpace0.clone();
      axisSpace0.hashCode();
      axisSpace0.getBottom();
      axisSpace0.toString();
      axisSpace0.setRight(2404.004755358771);
      axisSpace0.toString();
      AxisSpace axisSpace1 = new AxisSpace();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      doReturn((String) null).when(rectangle2D0).toString();
      Rectangle2D rectangle2D1 = axisSpace1.shrink(rectangle2D0, rectangle2D0);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved(rectangle2D1, rectangleEdge0);
      // Undeclared exception!
      try { 
        axisSpace0.expand((Rectangle2D) null, rectangle2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      Object object0 = null;
      axisSpace0.setBottom(1.0);
      double double0 = 0.0;
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      AxisSpace axisSpace1 = new AxisSpace();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      doReturn((String) null).when(rectangle2D0).toString();
      Rectangle2D rectangle2D1 = axisSpace0.shrink(rectangle2D0, rectangle2D0);
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace1.reserved(rectangle2D1, rectangleEdge1);
      // Undeclared exception!
      try { 
        axisSpace0.expand((Rectangle2D) null, rectangle2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      double double0 = (-2143.268039938);
      axisSpace0.setBottom((-2143.268039938));
      axisSpace0.clone();
      axisSpace0.toString();
      axisSpace0.hashCode();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      doReturn((String) null).when(rectangle2D0).toString();
      Rectangle2D rectangle2D1 = axisSpace0.expand(rectangle2D0, rectangle2D0);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved(rectangle2D1, rectangleEdge0);
      // Undeclared exception!
      try { 
        axisSpace0.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      axisSpace0.clone();
      AxisSpace axisSpace1 = null;
      // Undeclared exception!
      try { 
        axisSpace0.ensureAtLeast((AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = new AxisSpace();
      axisSpace0.setTop(0.0);
      axisSpace1.clone();
      axisSpace0.ensureAtLeast(axisSpace1);
      axisSpace0.setTop(1.0);
      axisSpace0.getRight();
      axisSpace0.toString();
      axisSpace1.setLeft(1.0);
      axisSpace1.ensureAtLeast(axisSpace0);
      axisSpace0.setLeft((-1674.9658));
      axisSpace1.getTop();
      axisSpace1.setBottom((-1674.9658));
      axisSpace0.setTop(0.0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      double double0 = 1.0;
      axisSpace0.setBottom(1.0);
      axisSpace0.setLeft(1.0);
      AxisSpace axisSpace1 = new AxisSpace();
      axisSpace0.equals(axisSpace1);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = null;
      axisSpace0.reserved(rectangle2D0, (RectangleEdge) null);
      // Undeclared exception!
      try { 
        axisSpace1.expand((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      double double0 = 0.0;
      axisSpace0.setTop(0.0);
      axisSpace0.setRight((-3384.659));
      double double1 = 1.0;
      AxisSpace axisSpace1 = new AxisSpace();
      axisSpace1.setLeft(1.0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getX();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getY();
      doReturn((String) null, (String) null).when(rectangle2D0).toString();
      Rectangle2D rectangle2D1 = axisSpace1.expand(rectangle2D0, rectangle2D0);
      Rectangle2D rectangle2D2 = axisSpace1.shrink(rectangle2D1, rectangle2D1);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved(rectangle2D2, rectangleEdge0);
      axisSpace0.expand(rectangle2D1, (Rectangle2D) null);
      // Undeclared exception!
      try { 
        axisSpace0.expand((Rectangle2D) null, rectangle2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      double double0 = (-3595.06599969);
      axisSpace0.clone();
      axisSpace0.setRight((-3595.06599969));
      axisSpace0.toString();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0, 0.0).when(rectangle2D0).getX();
      doReturn(0.0, 0.0).when(rectangle2D0).getY();
      doReturn((String) null, (String) null).when(rectangle2D0).toString();
      Rectangle2D rectangle2D1 = axisSpace0.expand(rectangle2D0, rectangle2D0);
      Rectangle2D rectangle2D2 = axisSpace0.shrink(rectangle2D1, rectangle2D1);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.reserved(rectangle2D2, rectangleEdge0);
      // Undeclared exception!
      try { 
        axisSpace0.expand((Rectangle2D) null, rectangle2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertNotNull(axisSpace0);
      
      axisSpace0.setLeft((-1.0));
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      
      String string0 = axisSpace0.toString();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertNotNull(string0);
      
      axisSpace0.hashCode();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getX();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getY();
      doReturn((String) null, (String) null).when(rectangle2D0).toString();
      Rectangle2D rectangle2D1 = axisSpace0.expand(rectangle2D0, rectangle2D0);
      assertSame(rectangle2D1, rectangle2D0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, rectangle2D1.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D1.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D1.getY(), 0.01);
      assertEquals(0.0, rectangle2D1.getX(), 0.01);
      assertFalse(rectangle2D1.isEmpty());
      assertNotNull(rectangle2D1);
      
      Rectangle2D rectangle2D2 = axisSpace0.shrink(rectangle2D1, rectangle2D1);
      assertSame(rectangle2D1, rectangle2D0);
      assertSame(rectangle2D1, rectangle2D2);
      assertSame(rectangle2D2, rectangle2D0);
      assertSame(rectangle2D2, rectangle2D1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, rectangle2D1.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D1.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D1.getY(), 0.01);
      assertEquals(0.0, rectangle2D1.getX(), 0.01);
      assertFalse(rectangle2D1.isEmpty());
      assertEquals(0.0, rectangle2D2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D2.getX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D2.getY(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterX(), 0.01);
      assertFalse(rectangle2D2.isEmpty());
      assertEquals(0.0, rectangle2D2.getWidth(), 0.01);
      assertNotNull(rectangle2D2);
      
      Rectangle2D rectangle2D3 = axisSpace0.reserved(rectangle2D2, (RectangleEdge) null);
      assertSame(rectangle2D1, rectangle2D0);
      assertSame(rectangle2D1, rectangle2D2);
      assertSame(rectangle2D2, rectangle2D0);
      assertSame(rectangle2D2, rectangle2D1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, rectangle2D1.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D1.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D1.getY(), 0.01);
      assertEquals(0.0, rectangle2D1.getX(), 0.01);
      assertFalse(rectangle2D1.isEmpty());
      assertEquals(0.0, rectangle2D2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D2.getX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D2.getY(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterX(), 0.01);
      assertFalse(rectangle2D2.isEmpty());
      assertEquals(0.0, rectangle2D2.getWidth(), 0.01);
      assertNull(rectangle2D3);
      
      Rectangle2D rectangle2D4 = axisSpace0.reserved((Rectangle2D) null, (RectangleEdge) null);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertNull(rectangle2D4);
      
      double double0 = axisSpace0.getLeft();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1.0), axisSpace0.getLeft(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      
      axisSpace0.setLeft(0.0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      double double1 = axisSpace0.getRight();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, double1, 0.01);
      
      axisSpace0.setTop((-1.0));
      assertEquals((-1.0), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setLeft((-157.1));
      assertEquals((-157.1), axisSpace0.getLeft(), 0.01);
      assertEquals((-1.0), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)axisSpace0.expand(rectangle2D2, (Rectangle2D) null);
      assertSame(rectangle2D1, rectangle2D0);
      assertSame(rectangle2D1, rectangle2D2);
      assertSame(rectangle2D2, rectangle2D0);
      assertSame(rectangle2D2, rectangle2D1);
      assertEquals((-157.1), axisSpace0.getLeft(), 0.01);
      assertEquals((-1.0), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, rectangle2D1.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D1.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D1.getY(), 0.01);
      assertEquals(0.0, rectangle2D1.getX(), 0.01);
      assertFalse(rectangle2D1.isEmpty());
      assertEquals(0.0, rectangle2D2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D2.getX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D2.getY(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterX(), 0.01);
      assertFalse(rectangle2D2.isEmpty());
      assertEquals(0.0, rectangle2D2.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(157.1, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(78.55, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(157.1, rectangle2D_Double0.x, 0.01);
      assertEquals((-157.1), rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertNotNull(axisSpace0);
      
      axisSpace0.setRight((-312.433423914309));
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-312.433423914309), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.hashCode();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-312.433423914309), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      axisSpace0.setBottom(1.0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-312.433423914309), axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertNotNull(axisSpace0);
      
      axisSpace0.setRight(1885.508275126881);
      assertEquals(1885.508275126881, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      double double0 = axisSpace0.getRight();
      assertEquals(1885.508275126881, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(1885.508275126881, double0, 0.01);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertFalse(axisSpace1.equals((Object)axisSpace0));
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertNotNull(axisSpace1);
      
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        axisSpace1.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertNotNull(axisSpace0);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertNotNull(axisSpace1);
      
      axisSpace0.ensureAtLeast(axisSpace1);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      
      double double0 = axisSpace0.getLeft();
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertNotNull(axisSpace0);
      
      double double0 = axisSpace0.getBottom();
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertNotNull(axisSpace0);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertNotNull(axisSpace1);
      
      double double0 = 0.0;
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(rectangle2D1).toString();
      Rectangle2D rectangle2D2 = axisSpace0.expand(rectangle2D0, rectangle2D1);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertFalse(rectangle2D2.equals((Object)rectangle2D0));
      assertNotSame(axisSpace0, axisSpace1);
      assertSame(rectangle2D2, rectangle2D1);
      assertNotSame(rectangle2D2, rectangle2D0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, rectangle2D2.getX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D2.getY(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D2.getWidth(), 0.01);
      assertFalse(rectangle2D2.isEmpty());
      assertNotNull(rectangle2D2);
      
      RectangleEdge rectangleEdge1 = null;
      Rectangle2D rectangle2D3 = axisSpace0.reserved(rectangle2D2, (RectangleEdge) null);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertFalse(rectangle2D2.equals((Object)rectangle2D0));
      assertNotSame(axisSpace0, axisSpace1);
      assertSame(rectangle2D2, rectangle2D1);
      assertNotSame(rectangle2D2, rectangle2D0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, rectangle2D2.getX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D2.getY(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D2.getWidth(), 0.01);
      assertFalse(rectangle2D2.isEmpty());
      assertNull(rectangle2D3);
      
      // Undeclared exception!
      try { 
        axisSpace0.shrink((Rectangle2D) null, rectangle2D2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertNotNull(axisSpace0);
      
      axisSpace0.hashCode();
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(rectangle2D1).toString();
      Rectangle2D rectangle2D2 = axisSpace0.shrink(rectangle2D0, rectangle2D1);
      assertFalse(rectangle2D2.equals((Object)rectangle2D0));
      assertSame(rectangle2D2, rectangle2D1);
      assertNotSame(rectangle2D2, rectangle2D0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterY(), 0.01);
      assertFalse(rectangle2D2.isEmpty());
      assertEquals(0.0, rectangle2D2.getY(), 0.01);
      assertEquals(0.0, rectangle2D2.getX(), 0.01);
      assertEquals(0.0, rectangle2D2.getWidth(), 0.01);
      assertNotNull(rectangle2D2);
      
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D3 = axisSpace0.reserved(rectangle2D2, rectangleEdge0);
      assertFalse(rectangle2D2.equals((Object)rectangle2D0));
      assertSame(rectangle2D2, rectangle2D1);
      assertNotSame(rectangle2D2, rectangle2D0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterY(), 0.01);
      assertFalse(rectangle2D2.isEmpty());
      assertEquals(0.0, rectangle2D2.getY(), 0.01);
      assertEquals(0.0, rectangle2D2.getX(), 0.01);
      assertEquals(0.0, rectangle2D2.getWidth(), 0.01);
      assertNull(rectangle2D3);
      
      // Undeclared exception!
      try { 
        axisSpace0.expand((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertNotNull(axisSpace0);
      
      double double0 = 0.0;
      double double1 = (-602.1279);
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        axisSpace0.add((-602.1279), rectangleEdge0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognised 'edge' argument.
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertNotNull(axisSpace0);
      
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        axisSpace0.add(342.8622946, rectangleEdge0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognised 'edge' argument.
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertNotNull(axisSpace0);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = axisSpace0.reserved(rectangle2D0, rectangleEdge0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertNull(rectangle2D1);
      
      double double0 = (-846.3);
      axisSpace0.setLeft((-846.3));
      assertEquals((-846.3), axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      // Undeclared exception!
      try { 
        axisSpace0.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertNotNull(axisSpace0);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertNotNull(axisSpace1);
      
      AxisSpace axisSpace2 = (AxisSpace)axisSpace1.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertTrue(axisSpace2.equals((Object)axisSpace0));
      assertTrue(axisSpace2.equals((Object)axisSpace1));
      assertNotSame(axisSpace1, axisSpace2);
      assertNotSame(axisSpace1, axisSpace0);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertNotNull(axisSpace2);
      
      double double0 = 2019.189284029023;
      RectangleEdge rectangleEdge0 = null;
      // Undeclared exception!
      try { 
        axisSpace1.add(2019.189284029023, (RectangleEdge) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'edge' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertNotNull(axisSpace0);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertNotNull(axisSpace1);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = axisSpace0.reserved(rectangle2D0, rectangleEdge0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertNull(rectangle2D1);
      
      // Undeclared exception!
      try { 
        axisSpace0.expand((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertNotNull(axisSpace0);
      
      axisSpace0.setRight(0.0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      axisSpace0.setTop(0.0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      // Undeclared exception!
      try { 
        axisSpace0.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertNotNull(axisSpace0);
      
      double double0 = 0.0;
      RectangleEdge rectangleEdge0 = null;
      // Undeclared exception!
      try { 
        axisSpace0.add(0.0, (RectangleEdge) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'edge' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertNotNull(axisSpace0);
      
      String string0 = axisSpace0.toString();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertNotNull(string0);
      
      double double0 = 0.0;
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        axisSpace0.add(0.0, rectangleEdge0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognised 'edge' argument.
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertNotNull(axisSpace0);
      
      // Undeclared exception!
      try { 
        axisSpace0.expand((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertNotNull(axisSpace0);
      
      double double0 = axisSpace0.getTop();
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertNotNull(axisSpace1);
      
      axisSpace1.setLeft(0.0);
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      
      axisSpace0.setLeft(0.0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      axisSpace0.setTop(0.0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      // Undeclared exception!
      try { 
        axisSpace1.ensureAtLeast(0.0, rectangleEdge0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AxisSpace.ensureAtLeast(): unrecognised AxisLocation.
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertNotNull(axisSpace0);
      
      axisSpace0.setBottom((-1903.913718649));
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1903.913718649), axisSpace0.getBottom(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1903.913718649), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals((-1903.913718649), axisSpace1.getBottom(), 0.01);
      assertNotNull(axisSpace1);
      
      axisSpace0.setTop((-1903.913718649));
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals((-1903.913718649), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1903.913718649), axisSpace0.getBottom(), 0.01);
      
      double double0 = axisSpace0.getLeft();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals((-1903.913718649), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals((-1903.913718649), axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      axisSpace0.setBottom(0.0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-1903.913718649), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      double double1 = axisSpace0.getRight();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-1903.913718649), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, double1, 0.01);
      
      axisSpace0.setLeft(0.0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-1903.913718649), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      axisSpace0.hashCode();
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-1903.913718649), axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      axisSpace0.setRight(1.0);
      assertFalse(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals((-1903.913718649), axisSpace0.getTop(), 0.01);
      assertEquals(1.0, axisSpace0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertNotNull(axisSpace0);
      
      boolean boolean0 = axisSpace0.equals(axisSpace0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertTrue(boolean0);
      
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge1 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = axisSpace0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertFalse(boolean1);
      
      RectangleEdge rectangleEdge2 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        axisSpace0.add(0.0, rectangleEdge2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognised 'edge' argument.
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertNotNull(axisSpace0);
      
      axisSpace0.ensureAtLeast(axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      
      double double0 = axisSpace0.getTop();
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = axisSpace0.getTop();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, double1, 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertNotNull(axisSpace1);
      
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        axisSpace0.shrink((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertNotNull(axisSpace0);
      
      double double0 = 1.0;
      axisSpace0.setBottom(1.0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      axisSpace0.setLeft(1.0);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      
      AxisSpace axisSpace1 = (AxisSpace)axisSpace0.clone();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(1.0, axisSpace1.getBottom(), 0.01);
      assertEquals(1.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertNotNull(axisSpace1);
      
      AxisSpace axisSpace2 = new AxisSpace();
      assertFalse(axisSpace2.equals((Object)axisSpace0));
      assertFalse(axisSpace2.equals((Object)axisSpace1));
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertNotNull(axisSpace2);
      
      boolean boolean0 = axisSpace0.equals(axisSpace2);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertFalse(axisSpace2.equals((Object)axisSpace0));
      assertFalse(axisSpace2.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace2, axisSpace0);
      assertNotSame(axisSpace2, axisSpace1);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getTop(), 0.01);
      assertFalse(boolean0);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      RectangleEdge rectangleEdge0 = null;
      Rectangle2D rectangle2D1 = axisSpace0.reserved(rectangle2D0, (RectangleEdge) null);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertFalse(axisSpace0.equals((Object)axisSpace2));
      assertNotSame(axisSpace0, axisSpace2);
      assertNotSame(axisSpace0, axisSpace1);
      assertEquals(1.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(1.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertNull(rectangle2D1);
      
      // Undeclared exception!
      try { 
        axisSpace2.expand((Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertNotNull(axisSpace0);
      
      AxisSpace axisSpace1 = new AxisSpace();
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertNotNull(axisSpace1);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0, 0.0).when(rectangle2D0).getX();
      doReturn(0.0, 0.0).when(rectangle2D0).getY();
      doReturn((String) null, (String) null).when(rectangle2D0).toString();
      Rectangle2D rectangle2D1 = axisSpace0.expand(rectangle2D0, rectangle2D0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertNotSame(axisSpace0, axisSpace1);
      assertSame(rectangle2D1, rectangle2D0);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, rectangle2D1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D1.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D1.getX(), 0.01);
      assertEquals(0.0, rectangle2D1.getY(), 0.01);
      assertFalse(rectangle2D1.isEmpty());
      assertEquals(0.0, rectangle2D1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D1.getHeight(), 0.01);
      assertNotNull(rectangle2D1);
      
      Rectangle2D rectangle2D2 = axisSpace1.shrink(rectangle2D1, rectangle2D1);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertSame(rectangle2D1, rectangle2D2);
      assertSame(rectangle2D1, rectangle2D0);
      assertSame(rectangle2D2, rectangle2D0);
      assertSame(rectangle2D2, rectangle2D1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, rectangle2D1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D1.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D1.getX(), 0.01);
      assertEquals(0.0, rectangle2D1.getY(), 0.01);
      assertFalse(rectangle2D1.isEmpty());
      assertEquals(0.0, rectangle2D1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D1.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D2.getWidth(), 0.01);
      assertFalse(rectangle2D2.isEmpty());
      assertEquals(0.0, rectangle2D2.getX(), 0.01);
      assertEquals(0.0, rectangle2D2.getY(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinX(), 0.01);
      assertNotNull(rectangle2D2);
      
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D3 = axisSpace0.reserved(rectangle2D2, rectangleEdge0);
      assertTrue(axisSpace0.equals((Object)axisSpace1));
      assertTrue(axisSpace1.equals((Object)axisSpace0));
      assertNotSame(axisSpace0, axisSpace1);
      assertNotSame(axisSpace1, axisSpace0);
      assertSame(rectangle2D1, rectangle2D2);
      assertSame(rectangle2D1, rectangle2D0);
      assertSame(rectangle2D2, rectangle2D0);
      assertSame(rectangle2D2, rectangle2D1);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, rectangle2D1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D1.getWidth(), 0.01);
      assertEquals(0.0, rectangle2D1.getX(), 0.01);
      assertEquals(0.0, rectangle2D1.getY(), 0.01);
      assertFalse(rectangle2D1.isEmpty());
      assertEquals(0.0, rectangle2D1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D1.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D2.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D2.getWidth(), 0.01);
      assertFalse(rectangle2D2.isEmpty());
      assertEquals(0.0, rectangle2D2.getX(), 0.01);
      assertEquals(0.0, rectangle2D2.getY(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D2.getMinX(), 0.01);
      assertNull(rectangle2D3);
      
      // Undeclared exception!
      try { 
        axisSpace0.expand((Rectangle2D) null, rectangle2D2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      assertNotNull(axisSpace0);
      
      axisSpace0.setLeft(0.0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01);
      assertEquals(0.0, axisSpace0.getRight(), 0.01);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01);
      
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        axisSpace0.ensureAtLeast(793.0, rectangleEdge0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AxisSpace.ensureAtLeast(): unrecognised AxisLocation.
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AxisSpace axisSpace0 = new AxisSpace();
      axisSpace0.hashCode();
      axisSpace0.hashCode();
      AxisSpace axisSpace1 = new AxisSpace();
      axisSpace0.equals(axisSpace1);
      axisSpace0.getTop();
      axisSpace1.getTop();
      axisSpace1.setLeft((-1.0));
      RectangleEdge rectangleEdge0 = mock(RectangleEdge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        axisSpace0.ensureAtLeast((-1.0), rectangleEdge0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AxisSpace.ensureAtLeast(): unrecognised AxisLocation.
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }
}
