/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:57:57 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.NumberTickUnit;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NumberTickUnit_ESTest extends NumberTickUnit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("NfNchq!&p|rD3");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0, choiceFormat0);
      numberTickUnit0.valueToString(0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0, decimalFormat0);
      decimalFormat0.setNegativePrefix((String) null);
      // Undeclared exception!
      try { 
        numberTickUnit0.valueToString((-2035.1450213));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-1.0), choiceFormat0, 0);
      // Undeclared exception!
      try { 
        numberTickUnit0.valueToString(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-282.144155), numberFormat0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      numberFormat0.setRoundingMode(roundingMode0);
      // Undeclared exception!
      try { 
        numberTickUnit0.valueToString((-282.144155));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding needed with the rounding mode being set to RoundingMode.UNNECESSARY
         //
         verifyException("java.text.DigitList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormatSymbols decimalFormatSymbols0 = mock(DecimalFormatSymbols.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(decimalFormatSymbols0).clone();
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0, decimalFormat0);
      // Undeclared exception!
      try { 
        numberTickUnit0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("org.jfree.chart.util.Args");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0, choiceFormat0, 2195);
      // Undeclared exception!
      try { 
        numberTickUnit0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = null;
      try {
        numberTickUnit0 = new NumberTickUnit((-477.583), (NumberFormat) null, 2492);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = null;
      try {
        numberTickUnit0 = new NumberTickUnit(0.0, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-751.6948651008));
      String string0 = numberTickUnit0.valueToString((-751.6948651008));
      assertEquals("-751.695", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-751.6948651008));
      numberTickUnit0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-751.6948651008));
      NumberTickUnit numberTickUnit1 = new NumberTickUnit((-751.6948651008));
      boolean boolean0 = numberTickUnit0.equals(numberTickUnit1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      NumberTickUnit numberTickUnit1 = new NumberTickUnit(0.0, numberFormat0);
      boolean boolean0 = numberTickUnit0.equals(numberTickUnit1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0);
      boolean boolean0 = numberTickUnit0.equals("[NumberTickUnit: size=0, formatter=java.text.DecimalFormat@674dc]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0, numberFormat0);
      NumberTickUnit numberTickUnit1 = new NumberTickUnit(2564);
      boolean boolean0 = numberTickUnit0.equals(numberTickUnit1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-751.6948651008));
      boolean boolean0 = numberTickUnit0.equals(numberTickUnit0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-282.144155), numberFormat0);
      String string0 = numberTickUnit0.toString();
      assertNotNull(string0);
  }
}
