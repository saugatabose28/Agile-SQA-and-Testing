/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:49:02 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.NumberTickUnit;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TickUnit_ESTest extends TickUnit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(1.0);
      numberTickUnit0.hashCode();
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      NumberTickUnit numberTickUnit1 = new NumberTickUnit(0.0, decimalFormat0, (-1));
      boolean boolean0 = numberTickUnit0.equals(numberTickUnit1);
      assertFalse(boolean0);
      assertFalse(numberTickUnit1.equals((Object)numberTickUnit0));
      assertEquals(0.0, numberTickUnit0.getSize(), 0.01);
      assertEquals((-1), numberTickUnit1.getMinorTickCount());
      assertEquals(0.0, numberTickUnit1.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-1835.054280914));
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      NumberTickUnit numberTickUnit1 = new NumberTickUnit(0.0, numberFormat0);
      numberTickUnit0.equals(numberTickUnit1);
      assertEquals(0.0, numberTickUnit1.getSize(), 0.01);
      assertEquals((-1835.054280914), numberTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 29);
      dateTickUnit0.valueToString((-1029.4056508));
      assertEquals(29000.0, dateTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn(stringBuffer0).when(numberFormat0).format(anyDouble() , any(java.lang.StringBuffer.class) , any(java.text.FieldPosition.class));
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(2299.0943448279245, numberFormat0, (-1024));
      numberTickUnit0.valueToString(1372.282444381);
      assertEquals(2299.0943448279245, numberTickUnit0.getSize(), 0.01);
      assertEquals((-1024), numberTickUnit0.getMinorTickCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0, numberFormat0, (-2225));
      double double0 = numberTickUnit0.getSize();
      assertEquals((-2225), numberTickUnit0.getMinorTickCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-770.852651455), numberFormat0);
      double double0 = numberTickUnit0.getSize();
      assertEquals((-770.852651455), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(462, numberFormat0, 462);
      int int0 = numberTickUnit0.getMinorTickCount();
      assertEquals(462, int0);
      assertEquals(462.0, numberTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(1.0, numberFormat0);
      NumberFormat numberFormat1 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      NumberTickUnit numberTickUnit1 = new NumberTickUnit(1.0, numberFormat1, 3472);
      numberTickUnit0.equals(numberTickUnit1);
      assertEquals(3472, numberTickUnit1.getMinorTickCount());
      assertEquals(1.0, numberTickUnit1.getSize(), 0.01);
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      doReturn((StringBuffer) null).when(numberFormat0).format(anyDouble() , any(java.lang.StringBuffer.class) , any(java.text.FieldPosition.class));
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(2299.0943448279245, numberFormat0, (-1024));
      // Undeclared exception!
      try { 
        numberTickUnit0.valueToString(1372.282444381);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.NumberFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("The 'unit' argument has a value that is not recognised.");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.8988954442753083, choiceFormat0);
      // Undeclared exception!
      try { 
        numberTickUnit0.valueToString(0.8988954442753083);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0);
      numberTickUnit0.hashCode();
      assertEquals(0.0, numberTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberFormat numberFormat0 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0, numberFormat0);
      NumberFormat numberFormat1 = mock(NumberFormat.class, new ViolatedAssumptionAnswer());
      NumberTickUnit numberTickUnit1 = new NumberTickUnit((-537.5047265188476), numberFormat1, 0);
      numberTickUnit0.equals(numberTickUnit1);
      assertEquals(0, numberTickUnit1.getMinorTickCount());
      assertEquals(0.0, numberTickUnit0.getSize(), 0.01);
      assertEquals((-537.5047265188476), numberTickUnit1.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0);
      NumberTickUnit numberTickUnit1 = new NumberTickUnit(0.0);
      boolean boolean0 = numberTickUnit0.equals(numberTickUnit1);
      assertTrue(boolean0);
      assertEquals(0.0, numberTickUnit1.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 29);
      DateTickUnit dateTickUnit1 = new DateTickUnit(dateTickUnitType0, 242);
      int int0 = dateTickUnit0.compareTo(dateTickUnit1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 29);
      int int0 = dateTickUnit0.compareTo(dateTickUnit0);
      assertEquals(29000.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 3472, dateTickUnitType0, 3472, dateFormat0);
      int int0 = dateTickUnit0.compareTo(dateFormat0);
      assertEquals(3472000.0, dateTickUnit0.getSize(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 29);
      double double0 = dateTickUnit0.getSize();
      assertEquals(29000.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 29);
      int int0 = dateTickUnit0.getMinorTickCount();
      assertEquals(29000.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-793.4751399228386), decimalFormat0, 2206);
      numberTickUnit0.hashCode();
      assertEquals((-793.4751399228386), numberTickUnit0.getSize(), 0.01);
      assertEquals(2206, numberTickUnit0.getMinorTickCount());
  }
}
