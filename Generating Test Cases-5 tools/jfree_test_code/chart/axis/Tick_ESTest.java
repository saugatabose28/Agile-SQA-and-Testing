/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:17:44 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.text.AttributedString;
import java.util.Date;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.CategoryTick;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateTick;
import org.jfree.chart.axis.LogTick;
import org.jfree.chart.axis.NumberTick;
import org.jfree.chart.axis.TickType;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.text.TextBlockAnchor;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.TextAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Tick_ESTest extends Tick_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<NumberTick> comparable0 = (Comparable<NumberTick>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      TextBlock textBlock0 = new TextBlock();
      assertNotNull(textBlock0);
      
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.TOP_RIGHT;
      assertEquals("TextBlockAnchor.TOP_RIGHT", textBlockAnchor0.toString());
      assertNotNull(textBlockAnchor0);
      
      TextAnchor textAnchor0 = TextAnchor.BOTTOM_LEFT;
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isBottom());
      assertEquals("TextAnchor.BOTTOM_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertNotNull(textAnchor0);
      
      CategoryTick categoryTick0 = new CategoryTick(comparable0, textBlock0, textBlockAnchor0, textAnchor0, 766.8854458698286);
      assertEquals("TextBlockAnchor.TOP_RIGHT", textBlockAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isBottom());
      assertEquals("TextAnchor.BOTTOM_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertEquals("", categoryTick0.toString());
      assertEquals("", categoryTick0.getText());
      assertEquals(766.8854458698286, categoryTick0.getAngle(), 0.01);
      assertNotNull(categoryTick0);
      
      Comparable<LogTick> comparable1 = (Comparable<LogTick>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryTick categoryTick1 = new CategoryTick(comparable1, textBlock0, textBlockAnchor0, textAnchor0, (-439.97956422238514));
      assertEquals("TextBlockAnchor.TOP_RIGHT", textBlockAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isBottom());
      assertEquals("TextAnchor.BOTTOM_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertEquals("", categoryTick1.getText());
      assertEquals((-439.97956422238514), categoryTick1.getAngle(), 0.01);
      assertEquals("", categoryTick1.toString());
      assertNotNull(categoryTick1);
      assertFalse(categoryTick1.equals((Object)categoryTick0));
      
      CategoryTick categoryTick2 = (CategoryTick)categoryTick1.clone();
      assertEquals("TextBlockAnchor.TOP_RIGHT", textBlockAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isBottom());
      assertEquals("TextAnchor.BOTTOM_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertEquals("", categoryTick1.getText());
      assertEquals((-439.97956422238514), categoryTick1.getAngle(), 0.01);
      assertEquals("", categoryTick1.toString());
      assertEquals("", categoryTick2.getText());
      assertEquals((-439.97956422238514), categoryTick2.getAngle(), 0.01);
      assertEquals("", categoryTick2.toString());
      assertNotSame(categoryTick1, categoryTick2);
      assertNotSame(categoryTick1, categoryTick0);
      assertNotSame(categoryTick2, categoryTick0);
      assertNotSame(categoryTick2, categoryTick1);
      assertNotNull(categoryTick2);
      assertFalse(categoryTick1.equals((Object)categoryTick0));
      assertTrue(categoryTick2.equals((Object)categoryTick1));
      assertFalse(categoryTick2.equals((Object)categoryTick0));
      
      boolean boolean0 = categoryTick0.equals(categoryTick2);
      assertEquals("TextBlockAnchor.TOP_RIGHT", textBlockAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isBottom());
      assertEquals("TextAnchor.BOTTOM_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertEquals("", categoryTick0.toString());
      assertEquals("", categoryTick0.getText());
      assertEquals(766.8854458698286, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick1.getText());
      assertEquals((-439.97956422238514), categoryTick1.getAngle(), 0.01);
      assertEquals("", categoryTick1.toString());
      assertEquals("", categoryTick2.getText());
      assertEquals((-439.97956422238514), categoryTick2.getAngle(), 0.01);
      assertEquals("", categoryTick2.toString());
      assertFalse(boolean0);
      assertNotSame(categoryTick0, categoryTick1);
      assertNotSame(categoryTick0, categoryTick2);
      assertNotSame(categoryTick1, categoryTick2);
      assertNotSame(categoryTick1, categoryTick0);
      assertNotSame(categoryTick2, categoryTick0);
      assertNotSame(categoryTick2, categoryTick1);
      assertFalse(categoryTick0.equals((Object)categoryTick1));
      assertFalse(categoryTick0.equals((Object)categoryTick2));
      assertFalse(categoryTick1.equals((Object)categoryTick0));
      assertTrue(categoryTick1.equals((Object)categoryTick2));
      assertTrue(categoryTick2.equals((Object)categoryTick1));
      assertFalse(categoryTick2.equals((Object)categoryTick0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TickType tickType0 = null;
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = TextAnchor.TOP_RIGHT;
      assertTrue(textAnchor0.isRight());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertNotNull(textAnchor0);
      
      LogTick logTick0 = new LogTick((TickType) null, 1085.0, attributedString0, textAnchor0);
      assertTrue(textAnchor0.isRight());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertEquals(1085.0, logTick0.getValue(), 0.01);
      assertNull(logTick0.getText());
      assertNull(logTick0.toString());
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertNotNull(logTick0);
      
      Float float0 = new Float(1085.0);
      assertEquals(1085.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      AttributedString attributedString1 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      logTick0.attributedLabel = attributedString1;
      assertTrue(textAnchor0.isRight());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertEquals(1085.0, logTick0.getValue(), 0.01);
      assertNull(logTick0.getText());
      assertNull(logTick0.toString());
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      
      double double0 = (-409.01021412);
      LogTick logTick1 = (LogTick)logTick0.clone();
      assertTrue(textAnchor0.isRight());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertEquals(1085.0, logTick0.getValue(), 0.01);
      assertNull(logTick0.getText());
      assertNull(logTick0.toString());
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertNull(logTick1.getText());
      assertEquals(0.0, logTick1.getAngle(), 0.01);
      assertEquals(1085.0, logTick1.getValue(), 0.01);
      assertNull(logTick1.toString());
      assertNotSame(logTick0, logTick1);
      assertNotSame(logTick1, logTick0);
      assertNotNull(logTick1);
      
      AttributedString attributedString2 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      logTick0.attributedLabel = attributedString2;
      assertTrue(textAnchor0.isRight());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertEquals(1085.0, logTick0.getValue(), 0.01);
      assertNull(logTick0.getText());
      assertNull(logTick0.toString());
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      
      NumberTick numberTick0 = new NumberTick(float0, "3OXX", textAnchor0, textAnchor0, (-409.01021412));
      assertTrue(textAnchor0.isRight());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertEquals("3OXX", numberTick0.toString());
      assertEquals("3OXX", numberTick0.getText());
      assertEquals(1085.0, numberTick0.getValue(), 0.01);
      assertEquals((-409.01021412), numberTick0.getAngle(), 0.01);
      assertNotNull(numberTick0);
      
      // Undeclared exception!
      try { 
        logTick0.equals(numberTick0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueTick", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Float float0 = new Float(2732.499F);
      assertEquals(2732.499F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_RIGHT;
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertNotNull(textAnchor0);
      
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(true, float0, "", textAnchor0, textAnchor0, 2732.499F);
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(cyclicNumberAxis_CycleBoundTick0);
      
      TickType tickType0 = cyclicNumberAxis_CycleBoundTick0.getTickType();
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(tickType0);
      
      boolean boolean0 = Float.isFinite(2732.499F);
      assertTrue(boolean0);
      
      NumberTick numberTick0 = new NumberTick(tickType0, 2732.499F, "", textAnchor0, textAnchor0, 2732.499F);
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals("", numberTick0.toString());
      assertEquals(2732.4990234375, numberTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, numberTick0.getAngle(), 0.01);
      assertEquals("", numberTick0.getText());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(numberTick0);
      
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = cyclicNumberAxis_CycleBoundTick0.equals(float0);
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LogTick logTick0 = new LogTick(tickType0, 2028.3789079, attributedString0, textAnchor0);
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertNull(logTick0.toString());
      assertEquals(2028.3789079, logTick0.getValue(), 0.01);
      assertNull(logTick0.getText());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(logTick0);
      
      TextAnchor textAnchor1 = TextAnchor.CENTER_LEFT;
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isLeft());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor1.toString());
      assertNotSame(textAnchor1, textAnchor0);
      assertNotNull(textAnchor1);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick1 = new CyclicNumberAxis.CycleBoundTick(false, float0, "", textAnchor1, textAnchor0, 0.0);
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isLeft());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor1.toString());
      assertEquals("", cyclicNumberAxis_CycleBoundTick1.getText());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick1.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick1.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick1.getValue(), 0.01);
      assertFalse(cyclicNumberAxis_CycleBoundTick1.mapToLastCycle);
      assertNotNull(cyclicNumberAxis_CycleBoundTick1);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(cyclicNumberAxis_CycleBoundTick1.equals((Object)cyclicNumberAxis_CycleBoundTick0));
      
      boolean boolean2 = numberTick0.equals(cyclicNumberAxis_CycleBoundTick1);
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals("", numberTick0.toString());
      assertEquals(2732.4990234375, numberTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, numberTick0.getAngle(), 0.01);
      assertEquals("", numberTick0.getText());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isLeft());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor1.toString());
      assertEquals("", cyclicNumberAxis_CycleBoundTick1.getText());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick1.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick1.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick1.getValue(), 0.01);
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertFalse(cyclicNumberAxis_CycleBoundTick1.mapToLastCycle);
      assertFalse(boolean2);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick1);
      assertNotSame(textAnchor1, textAnchor0);
      assertNotSame(cyclicNumberAxis_CycleBoundTick1, cyclicNumberAxis_CycleBoundTick0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(cyclicNumberAxis_CycleBoundTick1.equals((Object)cyclicNumberAxis_CycleBoundTick0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = numberTick0.equals(logTick0);
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals("", numberTick0.toString());
      assertEquals(2732.4990234375, numberTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, numberTick0.getAngle(), 0.01);
      assertEquals("", numberTick0.getText());
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertNull(logTick0.toString());
      assertEquals(2028.3789079, logTick0.getValue(), 0.01);
      assertNull(logTick0.getText());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertFalse(boolean3);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick1);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String string0 = numberTick0.toString();
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals("", numberTick0.toString());
      assertEquals(2732.4990234375, numberTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, numberTick0.getAngle(), 0.01);
      assertEquals("", numberTick0.getText());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertEquals("", string0);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick1);
      assertNotNull(string0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      
      AttributedString attributedString1 = logTick0.getAttributedLabel();
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertNull(logTick0.toString());
      assertEquals(2028.3789079, logTick0.getValue(), 0.01);
      assertNull(logTick0.getText());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick1);
      assertSame(attributedString1, attributedString0);
      assertNotNull(attributedString1);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      
      Number number0 = numberTick0.getNumber();
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals("", numberTick0.toString());
      assertEquals(2732.4990234375, numberTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, numberTick0.getAngle(), 0.01);
      assertEquals("", numberTick0.getText());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertEquals(2732.4990234375, number0);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick1);
      assertNotNull(number0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      
      String string1 = cyclicNumberAxis_CycleBoundTick0.getText();
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertEquals("", string1);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      
      AttributedString attributedString2 = logTick0.getAttributedLabel();
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertNull(logTick0.toString());
      assertEquals(2028.3789079, logTick0.getValue(), 0.01);
      assertNull(logTick0.getText());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertSame(attributedString2, attributedString0);
      assertSame(attributedString2, attributedString1);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick1);
      assertNotNull(attributedString2);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      TextBlock textBlock0 = new TextBlock();
      assertNotNull(textBlock0);
      
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.CENTER_RIGHT;
      assertEquals("TextBlockAnchor.CENTER_RIGHT", textBlockAnchor0.toString());
      assertNotNull(textBlockAnchor0);
      
      CategoryTick categoryTick0 = new CategoryTick(comparable0, textBlock0, textBlockAnchor0, textAnchor1, 0.0);
      assertEquals("TextBlockAnchor.CENTER_RIGHT", textBlockAnchor0.toString());
      assertEquals("", categoryTick0.getText());
      assertEquals(0.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.toString());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isLeft());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor1.toString());
      assertNotNull(categoryTick0);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      boolean boolean4 = categoryTick0.equals(attributedString2);
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", textBlockAnchor0.toString());
      assertEquals("", categoryTick0.getText());
      assertEquals(0.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.toString());
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertNull(logTick0.toString());
      assertEquals(2028.3789079, logTick0.getValue(), 0.01);
      assertNull(logTick0.getText());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isLeft());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor1.toString());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertFalse(boolean4);
      assertSame(attributedString2, attributedString0);
      assertSame(attributedString2, attributedString1);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick1);
      assertNotSame(textAnchor1, textAnchor0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick2 = (CyclicNumberAxis.CycleBoundTick)cyclicNumberAxis_CycleBoundTick1.clone();
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick2.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick2.getText());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick2.getValue(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick2.toString());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isLeft());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor1.toString());
      assertEquals("", cyclicNumberAxis_CycleBoundTick1.getText());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick1.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick1.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick1.getValue(), 0.01);
      assertFalse(cyclicNumberAxis_CycleBoundTick2.mapToLastCycle);
      assertFalse(cyclicNumberAxis_CycleBoundTick1.mapToLastCycle);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(cyclicNumberAxis_CycleBoundTick2, cyclicNumberAxis_CycleBoundTick0);
      assertNotSame(cyclicNumberAxis_CycleBoundTick2, cyclicNumberAxis_CycleBoundTick1);
      assertNotSame(textAnchor1, textAnchor0);
      assertNotSame(cyclicNumberAxis_CycleBoundTick1, cyclicNumberAxis_CycleBoundTick0);
      assertNotSame(cyclicNumberAxis_CycleBoundTick1, cyclicNumberAxis_CycleBoundTick2);
      assertNotNull(cyclicNumberAxis_CycleBoundTick2);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertTrue(cyclicNumberAxis_CycleBoundTick2.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      assertFalse(cyclicNumberAxis_CycleBoundTick2.equals((Object)cyclicNumberAxis_CycleBoundTick0));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(cyclicNumberAxis_CycleBoundTick1.equals((Object)cyclicNumberAxis_CycleBoundTick0));
      
      NumberTick numberTick1 = new NumberTick(tickType0, 2732.499F, "G&)r+", textAnchor1, textAnchor1, 0.0);
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals(0.0, numberTick1.getAngle(), 0.01);
      assertEquals("G&)r+", numberTick1.toString());
      assertEquals(2732.4990234375, numberTick1.getValue(), 0.01);
      assertEquals("G&)r+", numberTick1.getText());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isLeft());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor1.toString());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(numberTick1);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      assertFalse(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick2));
      assertFalse(numberTick1.equals((Object)numberTick0));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      boolean boolean5 = categoryTick0.equals(numberTick1);
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isRight());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(2732.4990234375, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", textBlockAnchor0.toString());
      assertEquals("", categoryTick0.getText());
      assertEquals(0.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.toString());
      assertEquals(0.0, numberTick1.getAngle(), 0.01);
      assertEquals("G&)r+", numberTick1.toString());
      assertEquals(2732.4990234375, numberTick1.getValue(), 0.01);
      assertEquals("G&)r+", numberTick1.getText());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isLeft());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor1.toString());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertFalse(boolean5);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick1);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick2);
      assertNotSame(numberTick1, numberTick0);
      assertNotSame(textAnchor1, textAnchor0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      assertFalse(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick2));
      assertFalse(numberTick1.equals((Object)numberTick0));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      TextAnchor textAnchor0 = TextAnchor.TOP_LEFT;
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_LEFT", textAnchor0.toString());
      assertNotNull(textAnchor0);
      
      DateTick dateTick0 = new DateTick(date0, "NE.2", textAnchor0, textAnchor0, (-235.074963975));
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_LEFT", textAnchor0.toString());
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals((-235.074963975), dateTick0.getAngle(), 0.01);
      assertEquals("NE.2", dateTick0.getText());
      assertEquals("NE.2", dateTick0.toString());
      assertNotNull(dateTick0);
      
      Date date1 = dateTick0.getDate();
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_LEFT", textAnchor0.toString());
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals((-235.074963975), dateTick0.getAngle(), 0.01);
      assertEquals("NE.2", dateTick0.getText());
      assertEquals("NE.2", dateTick0.toString());
      assertSame(date1, date0);
      assertNotNull(date1);
      
      double double0 = dateTick0.getAngle();
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_LEFT", textAnchor0.toString());
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals((-235.074963975), dateTick0.getAngle(), 0.01);
      assertEquals("NE.2", dateTick0.getText());
      assertEquals("NE.2", dateTick0.toString());
      assertEquals((-235.074963975), double0, 0.01);
      
      TextBlock textBlock0 = new TextBlock();
      assertNotNull(textBlock0);
      
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.BOTTOM_RIGHT;
      assertEquals("TextBlockAnchor.BOTTOM_RIGHT", textBlockAnchor0.toString());
      assertNotNull(textBlockAnchor0);
      
      CategoryTick categoryTick0 = new CategoryTick((Comparable) null, textBlock0, textBlockAnchor0, textAnchor0, 891.0);
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_LEFT", textAnchor0.toString());
      assertEquals("TextBlockAnchor.BOTTOM_RIGHT", textBlockAnchor0.toString());
      assertEquals("", categoryTick0.toString());
      assertEquals(891.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.getText());
      assertNotNull(categoryTick0);
      
      CategoryTick categoryTick1 = (CategoryTick)categoryTick0.clone();
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_LEFT", textAnchor0.toString());
      assertEquals("TextBlockAnchor.BOTTOM_RIGHT", textBlockAnchor0.toString());
      assertEquals("", categoryTick0.toString());
      assertEquals(891.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick1.getText());
      assertEquals(891.0, categoryTick1.getAngle(), 0.01);
      assertEquals("", categoryTick1.toString());
      assertNotSame(categoryTick0, categoryTick1);
      assertNotSame(categoryTick1, categoryTick0);
      assertNotNull(categoryTick1);
      assertTrue(categoryTick1.equals((Object)categoryTick0));
      
      HorizontalAlignment horizontalAlignment0 = textBlock0.getLineAlignment();
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertNotNull(horizontalAlignment0);
      
      textBlock0.setLineAlignment(horizontalAlignment0);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      TextBlockAnchor textBlockAnchor1 = categoryTick0.getLabelAnchor();
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_LEFT", textAnchor0.toString());
      assertEquals("TextBlockAnchor.BOTTOM_RIGHT", textBlockAnchor0.toString());
      assertEquals("", categoryTick0.toString());
      assertEquals(891.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.getText());
      assertEquals("TextBlockAnchor.BOTTOM_RIGHT", textBlockAnchor1.toString());
      assertSame(textBlockAnchor0, textBlockAnchor1);
      assertNotSame(categoryTick0, categoryTick1);
      assertSame(textBlockAnchor1, textBlockAnchor0);
      assertNotNull(textBlockAnchor1);
      assertTrue(categoryTick0.equals((Object)categoryTick1));
      
      boolean boolean0 = categoryTick0.equals(categoryTick1);
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("TextAnchor.TOP_LEFT", textAnchor0.toString());
      assertEquals("TextBlockAnchor.BOTTOM_RIGHT", textBlockAnchor0.toString());
      assertEquals("", categoryTick0.toString());
      assertEquals(891.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick1.getText());
      assertEquals(891.0, categoryTick1.getAngle(), 0.01);
      assertEquals("", categoryTick1.toString());
      assertTrue(boolean0);
      assertSame(textBlockAnchor0, textBlockAnchor1);
      assertNotSame(categoryTick0, categoryTick1);
      assertNotSame(categoryTick1, categoryTick0);
      assertTrue(categoryTick0.equals((Object)categoryTick1));
      assertTrue(categoryTick1.equals((Object)categoryTick0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      assertEquals("TextAnchor.BASELINE_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isBaseline());
      assertNotNull(textAnchor0);
      
      TextAnchor textAnchor1 = TextAnchor.BOTTOM_CENTER;
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isVerticalCenter());
      assertEquals("TextAnchor.BOTTOM_CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isRight());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isTop());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isLeft());
      assertNotSame(textAnchor1, textAnchor0);
      assertNotNull(textAnchor1);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      NumberTick numberTick0 = new NumberTick(byte0, "textAnchor", textAnchor0, textAnchor1, 0.0);
      assertEquals("TextAnchor.BASELINE_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isVerticalCenter());
      assertEquals("TextAnchor.BOTTOM_CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isRight());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isTop());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isLeft());
      assertEquals(0.0, numberTick0.getAngle(), 0.01);
      assertEquals("textAnchor", numberTick0.toString());
      assertEquals("textAnchor", numberTick0.getText());
      assertEquals(0.0, numberTick0.getValue(), 0.01);
      assertNotNull(numberTick0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      double double0 = numberTick0.getAngle();
      assertEquals("TextAnchor.BASELINE_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isVerticalCenter());
      assertEquals("TextAnchor.BOTTOM_CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isRight());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isTop());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isLeft());
      assertEquals(0.0, numberTick0.getAngle(), 0.01);
      assertEquals("textAnchor", numberTick0.toString());
      assertEquals("textAnchor", numberTick0.getText());
      assertEquals(0.0, numberTick0.getValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(textAnchor1, textAnchor0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      TextBlock textBlock0 = new TextBlock();
      assertNotNull(textBlock0);
      
      Integer integer0 = new Integer(1905);
      assertEquals(1905, (int)integer0);
      assertNotNull(integer0);
      
      TextAnchor textAnchor0 = TextAnchor.BASELINE_LEFT;
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertNotNull(textAnchor0);
      
      NumberTick numberTick0 = new NumberTick(integer0, "OO@<_]1F:wBR~Gx", textAnchor0, textAnchor0, 1.0);
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertEquals("OO@<_]1F:wBR~Gx", numberTick0.toString());
      assertEquals(1905.0, numberTick0.getValue(), 0.01);
      assertEquals("OO@<_]1F:wBR~Gx", numberTick0.getText());
      assertEquals(1.0, numberTick0.getAngle(), 0.01);
      assertNotNull(numberTick0);
      
      TextAnchor textAnchor1 = numberTick0.getRotationAnchor();
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertEquals("OO@<_]1F:wBR~Gx", numberTick0.toString());
      assertEquals(1905.0, numberTick0.getValue(), 0.01);
      assertEquals("OO@<_]1F:wBR~Gx", numberTick0.getText());
      assertEquals(1.0, numberTick0.getAngle(), 0.01);
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isRight());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor1.toString());
      assertTrue(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertTrue(textAnchor1.isLeft());
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor1, textAnchor0);
      assertNotNull(textAnchor1);
      
      TextAnchor textAnchor2 = numberTick0.getRotationAnchor();
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertEquals("OO@<_]1F:wBR~Gx", numberTick0.toString());
      assertEquals(1905.0, numberTick0.getValue(), 0.01);
      assertEquals("OO@<_]1F:wBR~Gx", numberTick0.getText());
      assertEquals(1.0, numberTick0.getAngle(), 0.01);
      assertFalse(textAnchor2.isHalfAscent());
      assertFalse(textAnchor2.isRight());
      assertFalse(textAnchor2.isTop());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor2.toString());
      assertFalse(textAnchor2.isVerticalCenter());
      assertTrue(textAnchor2.isBaseline());
      assertFalse(textAnchor2.isHorizontalCenter());
      assertTrue(textAnchor2.isLeft());
      assertFalse(textAnchor2.isBottom());
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor0, textAnchor2);
      assertSame(textAnchor2, textAnchor1);
      assertSame(textAnchor2, textAnchor0);
      assertNotNull(textAnchor2);
      
      Number number0 = numberTick0.getNumber();
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertEquals("OO@<_]1F:wBR~Gx", numberTick0.toString());
      assertEquals(1905.0, numberTick0.getValue(), 0.01);
      assertEquals("OO@<_]1F:wBR~Gx", numberTick0.getText());
      assertEquals(1.0, numberTick0.getAngle(), 0.01);
      assertEquals(1905, number0);
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor0, textAnchor2);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      TextAnchor textAnchor0 = TextAnchor.BASELINE_CENTER;
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.BASELINE_CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertNotNull(textAnchor0);
      
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(true, byte0, "", textAnchor0, textAnchor0, (byte)0);
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.BASELINE_CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(cyclicNumberAxis_CycleBoundTick0);
      
      TickType tickType0 = cyclicNumberAxis_CycleBoundTick0.getTickType();
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.BASELINE_CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("MAJOR", tickType0.toString());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(tickType0);
      
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick(tickType0, (byte)0, attributedString0, textAnchor0);
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.BASELINE_CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("MAJOR", tickType0.toString());
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertNull(logTick0.toString());
      assertEquals(0.0, logTick0.getValue(), 0.01);
      assertNull(logTick0.getText());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(logTick0);
      
      TextBlock textBlock0 = new TextBlock();
      assertNotNull(textBlock0);
      
      CategoryTick categoryTick0 = new CategoryTick(true, textBlock0, (TextBlockAnchor) null, textAnchor0, 891.0);
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.BASELINE_CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("", categoryTick0.getText());
      assertEquals(891.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.toString());
      assertNotNull(categoryTick0);
      
      Comparable comparable0 = categoryTick0.getCategory();
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.BASELINE_CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("", categoryTick0.getText());
      assertEquals(891.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.toString());
      assertEquals(true, comparable0);
      assertNotNull(comparable0);
      
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      DateTick dateTick0 = new DateTick(tickType0, date0, "textAnchor", textAnchor0, textAnchor0, (byte)0);
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.BASELINE_CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("MAJOR", tickType0.toString());
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals("textAnchor", dateTick0.toString());
      assertEquals("textAnchor", dateTick0.getText());
      assertEquals(0.0, dateTick0.getAngle(), 0.01);
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(dateTick0);
      
      Date date1 = dateTick0.getDate();
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.BASELINE_CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("MAJOR", tickType0.toString());
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals("textAnchor", dateTick0.toString());
      assertEquals("textAnchor", dateTick0.getText());
      assertEquals(0.0, dateTick0.getAngle(), 0.01);
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertSame(date1, date0);
      assertNotNull(date1);
      
      TextAnchor textAnchor1 = logTick0.getTextAnchor();
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.BASELINE_CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("MAJOR", tickType0.toString());
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertNull(logTick0.toString());
      assertEquals(0.0, logTick0.getValue(), 0.01);
      assertNull(logTick0.getText());
      assertTrue(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHalfAscent());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isVerticalCenter());
      assertEquals("TextAnchor.BASELINE_CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isTop());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor1, textAnchor0);
      assertNotNull(textAnchor1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double double0 = new Double((-458.91389571229));
      assertEquals((-458.91389571229), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = Double.isFinite((-458.91389571229));
      assertTrue(boolean0);
      
      TextAnchor textAnchor0 = TextAnchor.TOP_CENTER;
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isLeft());
      assertNotNull(textAnchor0);
      
      TextAnchor textAnchor1 = TextAnchor.BOTTOM_RIGHT;
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertEquals("TextAnchor.BOTTOM_RIGHT", textAnchor1.toString());
      assertNotSame(textAnchor1, textAnchor0);
      assertNotNull(textAnchor1);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      double double1 = Double.max((-458.91389571229), 0.0);
      assertEquals(0.0, double1, 0.01);
      
      NumberTick numberTick0 = new NumberTick(double0, ";", textAnchor0, textAnchor1, (-458.91389571229));
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertEquals("TextAnchor.BOTTOM_RIGHT", textAnchor1.toString());
      assertEquals((-458.91389571229), numberTick0.getAngle(), 0.01);
      assertEquals(";", numberTick0.getText());
      assertEquals(";", numberTick0.toString());
      assertEquals((-458.91389571229), numberTick0.getValue(), 0.01);
      assertNotNull(numberTick0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      TextAnchor textAnchor2 = numberTick0.getRotationAnchor();
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertEquals("TextAnchor.BOTTOM_RIGHT", textAnchor1.toString());
      assertEquals((-458.91389571229), numberTick0.getAngle(), 0.01);
      assertEquals(";", numberTick0.getText());
      assertEquals(";", numberTick0.toString());
      assertEquals((-458.91389571229), numberTick0.getValue(), 0.01);
      assertFalse(textAnchor2.isVerticalCenter());
      assertTrue(textAnchor2.isBottom());
      assertEquals("TextAnchor.BOTTOM_RIGHT", textAnchor2.toString());
      assertFalse(textAnchor2.isHalfAscent());
      assertFalse(textAnchor2.isHorizontalCenter());
      assertFalse(textAnchor2.isBaseline());
      assertFalse(textAnchor2.isLeft());
      assertFalse(textAnchor2.isTop());
      assertTrue(textAnchor2.isRight());
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(textAnchor0, textAnchor2);
      assertSame(textAnchor1, textAnchor2);
      assertNotSame(textAnchor1, textAnchor0);
      assertSame(textAnchor2, textAnchor1);
      assertNotSame(textAnchor2, textAnchor0);
      assertNotNull(textAnchor2);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(textAnchor2.equals((Object)textAnchor0));
      
      NumberTick numberTick1 = (NumberTick)numberTick0.clone();
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertEquals("TextAnchor.BOTTOM_RIGHT", textAnchor1.toString());
      assertEquals((-458.91389571229), numberTick0.getAngle(), 0.01);
      assertEquals(";", numberTick0.getText());
      assertEquals(";", numberTick0.toString());
      assertEquals((-458.91389571229), numberTick0.getValue(), 0.01);
      assertEquals(";", numberTick1.toString());
      assertEquals((-458.91389571229), numberTick1.getValue(), 0.01);
      assertEquals((-458.91389571229), numberTick1.getAngle(), 0.01);
      assertEquals(";", numberTick1.getText());
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(textAnchor0, textAnchor2);
      assertSame(textAnchor1, textAnchor2);
      assertNotSame(textAnchor1, textAnchor0);
      assertNotSame(numberTick0, numberTick1);
      assertNotSame(numberTick1, numberTick0);
      assertNotNull(numberTick1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor0.equals((Object)textAnchor2));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertTrue(numberTick1.equals((Object)numberTick0));
      
      boolean boolean1 = numberTick0.equals(numberTick1);
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertEquals("TextAnchor.BOTTOM_RIGHT", textAnchor1.toString());
      assertEquals((-458.91389571229), numberTick0.getAngle(), 0.01);
      assertEquals(";", numberTick0.getText());
      assertEquals(";", numberTick0.toString());
      assertEquals((-458.91389571229), numberTick0.getValue(), 0.01);
      assertEquals(";", numberTick1.toString());
      assertEquals((-458.91389571229), numberTick1.getValue(), 0.01);
      assertEquals((-458.91389571229), numberTick1.getAngle(), 0.01);
      assertEquals(";", numberTick1.getText());
      assertTrue(boolean1);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(textAnchor0, textAnchor2);
      assertSame(textAnchor1, textAnchor2);
      assertNotSame(textAnchor1, textAnchor0);
      assertNotSame(numberTick0, numberTick1);
      assertNotSame(numberTick1, numberTick0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor0.equals((Object)textAnchor2));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertTrue(numberTick0.equals((Object)numberTick1));
      assertTrue(numberTick1.equals((Object)numberTick0));
      assertTrue(boolean1 == boolean0);
      
      String string0 = numberTick0.getText();
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertEquals("TextAnchor.BOTTOM_RIGHT", textAnchor1.toString());
      assertEquals((-458.91389571229), numberTick0.getAngle(), 0.01);
      assertEquals(";", numberTick0.getText());
      assertEquals(";", numberTick0.toString());
      assertEquals((-458.91389571229), numberTick0.getValue(), 0.01);
      assertEquals(";", string0);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(textAnchor0, textAnchor2);
      assertSame(textAnchor1, textAnchor2);
      assertNotSame(textAnchor1, textAnchor0);
      assertNotSame(numberTick0, numberTick1);
      assertNotNull(string0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor0.equals((Object)textAnchor2));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertTrue(numberTick0.equals((Object)numberTick1));
      
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      TextAnchor textAnchor3 = TextAnchor.TOP_CENTER;
      assertFalse(textAnchor3.isBaseline());
      assertFalse(textAnchor3.isVerticalCenter());
      assertTrue(textAnchor3.isTop());
      assertFalse(textAnchor3.isRight());
      assertFalse(textAnchor3.isHalfAscent());
      assertFalse(textAnchor3.isLeft());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor3.toString());
      assertFalse(textAnchor3.isBottom());
      assertTrue(textAnchor3.isHorizontalCenter());
      assertNotSame(textAnchor3, textAnchor2);
      assertSame(textAnchor3, textAnchor0);
      assertNotSame(textAnchor3, textAnchor1);
      assertNotNull(textAnchor3);
      assertFalse(textAnchor3.equals((Object)textAnchor2));
      assertFalse(textAnchor3.equals((Object)textAnchor1));
      
      DateTick dateTick0 = new DateTick(date0, "", textAnchor3, textAnchor1, 0.0);
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertEquals("TextAnchor.BOTTOM_RIGHT", textAnchor1.toString());
      assertFalse(textAnchor3.isBaseline());
      assertFalse(textAnchor3.isVerticalCenter());
      assertTrue(textAnchor3.isTop());
      assertFalse(textAnchor3.isRight());
      assertFalse(textAnchor3.isHalfAscent());
      assertFalse(textAnchor3.isLeft());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor3.toString());
      assertFalse(textAnchor3.isBottom());
      assertTrue(textAnchor3.isHorizontalCenter());
      assertEquals(0.0, dateTick0.getAngle(), 0.01);
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals("", dateTick0.toString());
      assertEquals("", dateTick0.getText());
      assertNotNull(dateTick0);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(textAnchor1.equals((Object)textAnchor3));
      assertFalse(textAnchor3.equals((Object)textAnchor2));
      assertFalse(textAnchor3.equals((Object)textAnchor1));
      
      DateTick dateTick1 = (DateTick)dateTick0.clone();
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertEquals("TextAnchor.BOTTOM_RIGHT", textAnchor1.toString());
      assertFalse(textAnchor3.isBaseline());
      assertFalse(textAnchor3.isVerticalCenter());
      assertTrue(textAnchor3.isTop());
      assertFalse(textAnchor3.isRight());
      assertFalse(textAnchor3.isHalfAscent());
      assertFalse(textAnchor3.isLeft());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor3.toString());
      assertFalse(textAnchor3.isBottom());
      assertTrue(textAnchor3.isHorizontalCenter());
      assertEquals(0.0, dateTick0.getAngle(), 0.01);
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals("", dateTick0.toString());
      assertEquals("", dateTick0.getText());
      assertEquals("", dateTick1.toString());
      assertEquals(0.0, dateTick1.getValue(), 0.01);
      assertEquals(0.0, dateTick1.getAngle(), 0.01);
      assertEquals("", dateTick1.getText());
      assertNotSame(textAnchor1, textAnchor0);
      assertSame(textAnchor1, textAnchor2);
      assertNotSame(textAnchor1, textAnchor3);
      assertNotSame(textAnchor3, textAnchor2);
      assertSame(textAnchor3, textAnchor0);
      assertNotSame(textAnchor3, textAnchor1);
      assertNotSame(dateTick0, dateTick1);
      assertNotSame(dateTick1, dateTick0);
      assertNotNull(dateTick1);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(textAnchor1.equals((Object)textAnchor3));
      assertFalse(textAnchor3.equals((Object)textAnchor2));
      assertFalse(textAnchor3.equals((Object)textAnchor1));
      assertTrue(dateTick1.equals((Object)dateTick0));
      
      boolean boolean2 = dateTick0.equals(";");
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertEquals("TextAnchor.BOTTOM_RIGHT", textAnchor1.toString());
      assertFalse(textAnchor3.isBaseline());
      assertFalse(textAnchor3.isVerticalCenter());
      assertTrue(textAnchor3.isTop());
      assertFalse(textAnchor3.isRight());
      assertFalse(textAnchor3.isHalfAscent());
      assertFalse(textAnchor3.isLeft());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor3.toString());
      assertFalse(textAnchor3.isBottom());
      assertTrue(textAnchor3.isHorizontalCenter());
      assertEquals(0.0, dateTick0.getAngle(), 0.01);
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals("", dateTick0.toString());
      assertEquals("", dateTick0.getText());
      assertFalse(boolean2);
      assertNotSame(textAnchor1, textAnchor0);
      assertSame(textAnchor1, textAnchor2);
      assertNotSame(textAnchor1, textAnchor3);
      assertNotSame(textAnchor3, textAnchor2);
      assertSame(textAnchor3, textAnchor0);
      assertNotSame(textAnchor3, textAnchor1);
      assertNotSame(dateTick0, dateTick1);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(textAnchor1.equals((Object)textAnchor3));
      assertFalse(textAnchor3.equals((Object)textAnchor2));
      assertFalse(textAnchor3.equals((Object)textAnchor1));
      assertTrue(dateTick0.equals((Object)dateTick1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      NumberTick numberTick2 = (NumberTick)numberTick0.clone();
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertEquals("TextAnchor.BOTTOM_RIGHT", textAnchor1.toString());
      assertEquals((-458.91389571229), numberTick0.getAngle(), 0.01);
      assertEquals(";", numberTick0.getText());
      assertEquals(";", numberTick0.toString());
      assertEquals((-458.91389571229), numberTick0.getValue(), 0.01);
      assertEquals(";", numberTick2.toString());
      assertEquals((-458.91389571229), numberTick2.getValue(), 0.01);
      assertEquals((-458.91389571229), numberTick2.getAngle(), 0.01);
      assertEquals(";", numberTick2.getText());
      assertSame(textAnchor0, textAnchor3);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(textAnchor0, textAnchor2);
      assertNotSame(textAnchor1, textAnchor0);
      assertSame(textAnchor1, textAnchor2);
      assertNotSame(textAnchor1, textAnchor3);
      assertNotSame(numberTick0, numberTick1);
      assertNotSame(numberTick0, numberTick2);
      assertNotSame(numberTick2, numberTick1);
      assertNotSame(numberTick2, numberTick0);
      assertNotNull(numberTick2);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor0.equals((Object)textAnchor2));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(textAnchor1.equals((Object)textAnchor3));
      assertTrue(numberTick0.equals((Object)numberTick1));
      assertTrue(numberTick2.equals((Object)numberTick1));
      assertTrue(numberTick2.equals((Object)numberTick0));
      
      TextBlock textBlock0 = new TextBlock();
      assertNotNull(textBlock0);
      
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.CENTER;
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      assertNotNull(textBlockAnchor0);
      
      HorizontalAlignment horizontalAlignment0 = textBlock0.getLineAlignment();
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertNotNull(horizontalAlignment0);
      
      textBlock0.setLineAlignment(horizontalAlignment0);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      CategoryTick categoryTick0 = new CategoryTick(";", textBlock0, textBlockAnchor0, textAnchor0, 0.0);
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isLeft());
      assertEquals("", categoryTick0.getText());
      assertEquals(0.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.toString());
      assertNotNull(categoryTick0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor0.equals((Object)textAnchor2));
      
      Comparable comparable0 = categoryTick0.getCategory();
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isLeft());
      assertEquals("", categoryTick0.getText());
      assertEquals(0.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.toString());
      assertEquals(";", comparable0);
      assertSame(textAnchor0, textAnchor3);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(textAnchor0, textAnchor2);
      assertNotNull(comparable0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor0.equals((Object)textAnchor2));
      
      TextBlock textBlock1 = new TextBlock();
      assertNotNull(textBlock1);
      assertTrue(textBlock1.equals((Object)textBlock0));
      
      CategoryTick categoryTick1 = new CategoryTick(double0, textBlock1, textBlockAnchor0, textAnchor1, (-458.91389571229));
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertEquals("TextAnchor.BOTTOM_RIGHT", textAnchor1.toString());
      assertEquals("", categoryTick1.toString());
      assertEquals((-458.91389571229), categoryTick1.getAngle(), 0.01);
      assertEquals("", categoryTick1.getText());
      assertNotNull(categoryTick1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(textAnchor1.equals((Object)textAnchor3));
      assertTrue(textBlock1.equals((Object)textBlock0));
      assertFalse(categoryTick1.equals((Object)categoryTick0));
      
      boolean boolean3 = numberTick0.equals(categoryTick1);
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertEquals("TextAnchor.BOTTOM_RIGHT", textAnchor1.toString());
      assertEquals((-458.91389571229), numberTick0.getAngle(), 0.01);
      assertEquals(";", numberTick0.getText());
      assertEquals(";", numberTick0.toString());
      assertEquals((-458.91389571229), numberTick0.getValue(), 0.01);
      assertEquals("", categoryTick1.toString());
      assertEquals((-458.91389571229), categoryTick1.getAngle(), 0.01);
      assertEquals("", categoryTick1.getText());
      assertFalse(boolean3);
      assertSame(textAnchor0, textAnchor3);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(textAnchor0, textAnchor2);
      assertNotSame(textAnchor1, textAnchor0);
      assertSame(textAnchor1, textAnchor2);
      assertNotSame(textAnchor1, textAnchor3);
      assertNotSame(numberTick0, numberTick1);
      assertNotSame(numberTick0, numberTick2);
      assertNotSame(textBlock1, textBlock0);
      assertNotSame(categoryTick1, categoryTick0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor0.equals((Object)textAnchor2));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(textAnchor1.equals((Object)textAnchor3));
      assertTrue(numberTick0.equals((Object)numberTick1));
      assertTrue(numberTick0.equals((Object)numberTick2));
      assertTrue(textBlock1.equals((Object)textBlock0));
      assertFalse(categoryTick1.equals((Object)categoryTick0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      TextAnchor textAnchor4 = numberTick0.getTextAnchor();
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isBottom());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertEquals("TextAnchor.BOTTOM_RIGHT", textAnchor1.toString());
      assertEquals((-458.91389571229), numberTick0.getAngle(), 0.01);
      assertEquals(";", numberTick0.getText());
      assertEquals(";", numberTick0.toString());
      assertEquals((-458.91389571229), numberTick0.getValue(), 0.01);
      assertFalse(textAnchor4.isRight());
      assertFalse(textAnchor4.isHalfAscent());
      assertFalse(textAnchor4.isVerticalCenter());
      assertTrue(textAnchor4.isTop());
      assertFalse(textAnchor4.isBottom());
      assertFalse(textAnchor4.isLeft());
      assertFalse(textAnchor4.isBaseline());
      assertTrue(textAnchor4.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor4.toString());
      assertSame(textAnchor0, textAnchor3);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(textAnchor0, textAnchor2);
      assertSame(textAnchor0, textAnchor4);
      assertNotSame(textAnchor1, textAnchor4);
      assertNotSame(textAnchor1, textAnchor0);
      assertSame(textAnchor1, textAnchor2);
      assertNotSame(textAnchor1, textAnchor3);
      assertNotSame(numberTick0, numberTick1);
      assertNotSame(numberTick0, numberTick2);
      assertSame(textAnchor4, textAnchor0);
      assertNotSame(textAnchor4, textAnchor1);
      assertNotSame(textAnchor4, textAnchor2);
      assertSame(textAnchor4, textAnchor3);
      assertNotNull(textAnchor4);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor0.equals((Object)textAnchor2));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(textAnchor1.equals((Object)textAnchor3));
      assertTrue(numberTick0.equals((Object)numberTick1));
      assertTrue(numberTick0.equals((Object)numberTick2));
      assertFalse(textAnchor4.equals((Object)textAnchor1));
      assertFalse(textAnchor4.equals((Object)textAnchor2));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = new Long(1710L);
      assertEquals(1710L, (long)long0);
      assertNotNull(long0);
      
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_RIGHT;
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBottom());
      assertNotNull(textAnchor0);
      
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(true, long0, "tJ]oYP", textAnchor0, textAnchor0, 3915.39733917);
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBottom());
      assertEquals("tJ]oYP", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(1710.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("tJ]oYP", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(3915.39733917, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(cyclicNumberAxis_CycleBoundTick0);
      
      cyclicNumberAxis_CycleBoundTick0.mapToLastCycle = true;
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBottom());
      assertEquals("tJ]oYP", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(1710.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("tJ]oYP", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(3915.39733917, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      
      TextAnchor textAnchor1 = cyclicNumberAxis_CycleBoundTick0.getTextAnchor();
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBottom());
      assertEquals("tJ]oYP", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(1710.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("tJ]oYP", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(3915.39733917, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertFalse(textAnchor1.isVerticalCenter());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor1.toString());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isLeft());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor1, textAnchor0);
      assertNotNull(textAnchor1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_LEFT;
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.HALF_ASCENT_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHalfAscent());
      assertNotNull(textAnchor0);
      
      DateTick dateTick0 = new DateTick(date0, "4<U8", textAnchor0, textAnchor0, 3123.0676288);
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.HALF_ASCENT_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("4<U8", dateTick0.getText());
      assertEquals("4<U8", dateTick0.toString());
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals(3123.0676288, dateTick0.getAngle(), 0.01);
      assertNotNull(dateTick0);
      
      DateTick dateTick1 = (DateTick)dateTick0.clone();
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.HALF_ASCENT_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("4<U8", dateTick0.getText());
      assertEquals("4<U8", dateTick0.toString());
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals(3123.0676288, dateTick0.getAngle(), 0.01);
      assertEquals(0.0, dateTick1.getValue(), 0.01);
      assertEquals("4<U8", dateTick1.toString());
      assertEquals(3123.0676288, dateTick1.getAngle(), 0.01);
      assertEquals("4<U8", dateTick1.getText());
      assertNotSame(dateTick0, dateTick1);
      assertNotSame(dateTick1, dateTick0);
      assertNotNull(dateTick1);
      assertTrue(dateTick1.equals((Object)dateTick0));
      
      boolean boolean0 = dateTick0.equals(textAnchor0);
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.HALF_ASCENT_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("4<U8", dateTick0.getText());
      assertEquals("4<U8", dateTick0.toString());
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals(3123.0676288, dateTick0.getAngle(), 0.01);
      assertFalse(boolean0);
      assertNotSame(dateTick0, dateTick1);
      assertTrue(dateTick0.equals((Object)dateTick1));
      
      boolean boolean1 = dateTick0.equals(dateTick1);
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.HALF_ASCENT_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("4<U8", dateTick0.getText());
      assertEquals("4<U8", dateTick0.toString());
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals(3123.0676288, dateTick0.getAngle(), 0.01);
      assertEquals(0.0, dateTick1.getValue(), 0.01);
      assertEquals("4<U8", dateTick1.toString());
      assertEquals(3123.0676288, dateTick1.getAngle(), 0.01);
      assertEquals("4<U8", dateTick1.getText());
      assertTrue(boolean1);
      assertNotSame(dateTick0, dateTick1);
      assertNotSame(dateTick1, dateTick0);
      assertTrue(dateTick0.equals((Object)dateTick1));
      assertTrue(dateTick1.equals((Object)dateTick0));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = dateTick0.equals(textAnchor0);
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.HALF_ASCENT_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("4<U8", dateTick0.getText());
      assertEquals("4<U8", dateTick0.toString());
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals(3123.0676288, dateTick0.getAngle(), 0.01);
      assertFalse(boolean2);
      assertNotSame(dateTick0, dateTick1);
      assertTrue(dateTick0.equals((Object)dateTick1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Comparable<CyclicNumberAxis.CycleBoundTick> comparable0 = (Comparable<CyclicNumberAxis.CycleBoundTick>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      TextBlock textBlock0 = new TextBlock();
      assertNotNull(textBlock0);
      
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.CENTER_LEFT;
      assertEquals("TextBlockAnchor.CENTER_LEFT", textBlockAnchor0.toString());
      assertNotNull(textBlockAnchor0);
      
      CategoryTick categoryTick0 = new CategoryTick(comparable0, textBlock0, textBlockAnchor0, textAnchor0, (-816.0));
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.HALF_ASCENT_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("TextBlockAnchor.CENTER_LEFT", textBlockAnchor0.toString());
      assertEquals((-816.0), categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick0.toString());
      assertNotNull(categoryTick0);
      
      boolean boolean3 = categoryTick0.equals(dateTick0);
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.HALF_ASCENT_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("4<U8", dateTick0.getText());
      assertEquals("4<U8", dateTick0.toString());
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals(3123.0676288, dateTick0.getAngle(), 0.01);
      assertEquals("TextBlockAnchor.CENTER_LEFT", textBlockAnchor0.toString());
      assertEquals((-816.0), categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick0.toString());
      assertFalse(boolean3);
      assertNotSame(dateTick0, dateTick1);
      assertTrue(dateTick0.equals((Object)dateTick1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1293));
      assertEquals((-1293), (int)integer0);
      assertNotNull(integer0);
      
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_RIGHT;
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertNotNull(textAnchor0);
      
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(false, integer0, "^np", textAnchor0, textAnchor0, (-1293));
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals((-1293.0), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("^np", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-1293.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("^np", cyclicNumberAxis_CycleBoundTick0.getText());
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(cyclicNumberAxis_CycleBoundTick0);
      
      TickType tickType0 = cyclicNumberAxis_CycleBoundTick0.getTickType();
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals((-1293.0), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("^np", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-1293.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("^np", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(tickType0);
      
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick(tickType0, (-1293), attributedString0, textAnchor0);
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals((-1293.0), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("^np", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-1293.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("^np", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertNull(logTick0.toString());
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertEquals((-1293.0), logTick0.getValue(), 0.01);
      assertNull(logTick0.getText());
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(logTick0);
      
      TextAnchor textAnchor1 = logTick0.getRotationAnchor();
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertTrue(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals((-1293.0), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("^np", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-1293.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("^np", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertNull(logTick0.toString());
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertEquals((-1293.0), logTick0.getValue(), 0.01);
      assertNull(logTick0.getText());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isHalfAscent());
      assertEquals("TextAnchor.HALF_ASCENT_RIGHT", textAnchor1.toString());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBottom());
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor1, textAnchor0);
      assertNotNull(textAnchor1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      TextAnchor textAnchor0 = TextAnchor.BASELINE_LEFT;
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertNotNull(textAnchor0);
      
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(true, long0, "JN9Kv<pFIp?|@_QD<o", textAnchor0, textAnchor0, 0L);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(cyclicNumberAxis_CycleBoundTick0);
      
      String string0 = cyclicNumberAxis_CycleBoundTick0.toString();
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertEquals("JN9Kv<pFIp?|@_QD<o", string0);
      assertNotNull(string0);
      
      TextBlock textBlock0 = new TextBlock();
      assertNotNull(textBlock0);
      
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.TOP_LEFT;
      assertEquals("TextBlockAnchor.TOP_LEFT", textBlockAnchor0.toString());
      assertNotNull(textBlockAnchor0);
      
      TextAnchor textAnchor1 = TextAnchor.CENTER;
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isLeft());
      assertNotSame(textAnchor1, textAnchor0);
      assertNotNull(textAnchor1);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      CategoryTick categoryTick0 = new CategoryTick("JN9Kv<pFIp?|@_QD<o", textBlock0, textBlockAnchor0, textAnchor1, 0L);
      assertEquals("TextBlockAnchor.TOP_LEFT", textBlockAnchor0.toString());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isLeft());
      assertEquals("", categoryTick0.toString());
      assertEquals(0.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.getText());
      assertNotNull(categoryTick0);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      CategoryTick categoryTick1 = new CategoryTick("JN9Kv<pFIp?|@_QD<o", textBlock0, textBlockAnchor0, textAnchor0, 0L);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextBlockAnchor.TOP_LEFT", textBlockAnchor0.toString());
      assertEquals("", categoryTick1.getText());
      assertEquals("", categoryTick1.toString());
      assertEquals(0.0, categoryTick1.getAngle(), 0.01);
      assertNotNull(categoryTick1);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(categoryTick1.equals((Object)categoryTick0));
      
      boolean boolean0 = categoryTick0.equals(categoryTick1);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextBlockAnchor.TOP_LEFT", textBlockAnchor0.toString());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isLeft());
      assertEquals("", categoryTick0.toString());
      assertEquals(0.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick1.getText());
      assertEquals("", categoryTick1.toString());
      assertEquals(0.0, categoryTick1.getAngle(), 0.01);
      assertFalse(boolean0);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(textAnchor1, textAnchor0);
      assertNotSame(categoryTick0, categoryTick1);
      assertNotSame(categoryTick1, categoryTick0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(categoryTick0.equals((Object)categoryTick1));
      assertFalse(categoryTick1.equals((Object)categoryTick0));
      
      boolean boolean1 = categoryTick0.equals("JN9Kv<pFIp?|@_QD<o");
      assertEquals("TextBlockAnchor.TOP_LEFT", textBlockAnchor0.toString());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isLeft());
      assertEquals("", categoryTick0.toString());
      assertEquals(0.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.getText());
      assertFalse(boolean1);
      assertNotSame(textAnchor1, textAnchor0);
      assertNotSame(categoryTick0, categoryTick1);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(categoryTick0.equals((Object)categoryTick1));
      assertTrue(boolean1 == boolean0);
      
      TickType tickType0 = cyclicNumberAxis_CycleBoundTick0.getTickType();
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("MAJOR", tickType0.toString());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotNull(tickType0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      DateTick dateTick0 = new DateTick(tickType0, date0, "L21OL*xC_WD\"_B0{", textAnchor1, textAnchor1, 0L);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isLeft());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals("L21OL*xC_WD\"_B0{", dateTick0.toString());
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals("L21OL*xC_WD\"_B0{", dateTick0.getText());
      assertEquals(0.0, dateTick0.getAngle(), 0.01);
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(dateTick0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      Date date1 = dateTick0.getDate();
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isHalfAscent());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isTop());
      assertFalse(textAnchor1.isLeft());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals("L21OL*xC_WD\"_B0{", dateTick0.toString());
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals("L21OL*xC_WD\"_B0{", dateTick0.getText());
      assertEquals(0.0, dateTick0.getAngle(), 0.01);
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(textAnchor1, textAnchor0);
      assertSame(date1, date0);
      assertNotNull(date1);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-4177));
      assertEquals((-4177), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compareUnsigned((-4177), (-4177));
      assertEquals(0, int0);
      
      TextAnchor textAnchor0 = TextAnchor.TOP_RIGHT;
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertNotNull(textAnchor0);
      
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(false, integer0, "TextBlockAnchor.BOTTOM_CENTER", textAnchor0, textAnchor0, 1288.320486301142);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals(1288.320486301142, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals((-4177.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(cyclicNumberAxis_CycleBoundTick0);
      assertFalse(integer0.equals((Object)int0));
      
      TickType tickType0 = cyclicNumberAxis_CycleBoundTick0.getTickType();
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals(1288.320486301142, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals((-4177.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("MAJOR", tickType0.toString());
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(tickType0);
      assertFalse(integer0.equals((Object)int0));
      
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick1 = (CyclicNumberAxis.CycleBoundTick)cyclicNumberAxis_CycleBoundTick0.clone();
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals(1288.320486301142, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals((-4177.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick1.toString());
      assertEquals((-4177.0), cyclicNumberAxis_CycleBoundTick1.getValue(), 0.01);
      assertEquals(1288.320486301142, cyclicNumberAxis_CycleBoundTick1.getAngle(), 0.01);
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick1.getText());
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertFalse(cyclicNumberAxis_CycleBoundTick1.mapToLastCycle);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick1);
      assertNotSame(cyclicNumberAxis_CycleBoundTick1, cyclicNumberAxis_CycleBoundTick0);
      assertNotNull(cyclicNumberAxis_CycleBoundTick1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(cyclicNumberAxis_CycleBoundTick1.equals((Object)cyclicNumberAxis_CycleBoundTick0));
      
      cyclicNumberAxis_CycleBoundTick0.mapToLastCycle = false;
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals(1288.320486301142, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals((-4177.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      
      LogTick logTick0 = new LogTick(tickType0, (-4177), (AttributedString) null, textAnchor0);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals(1288.320486301142, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals((-4177.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("MAJOR", tickType0.toString());
      assertNull(logTick0.getText());
      assertNull(logTick0.toString());
      assertEquals((-4177.0), logTick0.getValue(), 0.01);
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(logTick0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      
      String string0 = logTick0.getText();
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals(1288.320486301142, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals((-4177.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("MAJOR", tickType0.toString());
      assertNull(logTick0.getText());
      assertNull(logTick0.toString());
      assertEquals((-4177.0), logTick0.getValue(), 0.01);
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick1);
      assertNull(string0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      
      logTick0.attributedLabel = null;
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals(1288.320486301142, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals((-4177.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("MAJOR", tickType0.toString());
      assertNull(logTick0.getText());
      assertNull(logTick0.toString());
      assertEquals((-4177.0), logTick0.getValue(), 0.01);
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      
      boolean boolean0 = cyclicNumberAxis_CycleBoundTick0.equals(tickType0);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals(1288.320486301142, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals((-4177.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("MAJOR", tickType0.toString());
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertFalse(boolean0);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      
      double double0 = cyclicNumberAxis_CycleBoundTick0.getAngle();
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals(1288.320486301142, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals((-4177.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertEquals(1288.320486301142, double0, 0.01);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      
      String string1 = logTick0.toString();
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals(1288.320486301142, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals((-4177.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("MAJOR", tickType0.toString());
      assertNull(logTick0.getText());
      assertNull(logTick0.toString());
      assertEquals((-4177.0), logTick0.getValue(), 0.01);
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotSame(cyclicNumberAxis_CycleBoundTick0, cyclicNumberAxis_CycleBoundTick1);
      assertNull(string1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(cyclicNumberAxis_CycleBoundTick0.equals((Object)cyclicNumberAxis_CycleBoundTick1));
      
      TextBlock textBlock0 = new TextBlock();
      assertNotNull(textBlock0);
      
      HorizontalAlignment horizontalAlignment0 = textBlock0.getLineAlignment();
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertNotNull(horizontalAlignment0);
      
      textBlock0.setLineAlignment(horizontalAlignment0);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      CategoryTick categoryTick0 = new CategoryTick("TextBlockAnchor.BOTTOM_CENTER", textBlock0, (TextBlockAnchor) null, textAnchor0, 1288.320486301142);
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick0.toString());
      assertEquals(1288.320486301142, categoryTick0.getAngle(), 0.01);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertNotNull(categoryTick0);
      
      Comparable comparable0 = categoryTick0.getCategory();
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick0.toString());
      assertEquals(1288.320486301142, categoryTick0.getAngle(), 0.01);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertEquals("TextBlockAnchor.BOTTOM_CENTER", comparable0);
      assertNotNull(comparable0);
      
      TextBlock textBlock1 = categoryTick0.getLabel();
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick0.toString());
      assertEquals(1288.320486301142, categoryTick0.getAngle(), 0.01);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertSame(textBlock1, textBlock0);
      assertSame(textBlock0, textBlock1);
      assertNotNull(textBlock1);
      
      TextAnchor textAnchor1 = categoryTick0.getRotationAnchor();
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick0.toString());
      assertEquals(1288.320486301142, categoryTick0.getAngle(), 0.01);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertTrue(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isTop());
      assertEquals("TextAnchor.TOP_RIGHT", textAnchor1.toString());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertTrue(textAnchor1.isRight());
      assertFalse(textAnchor1.isBottom());
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor1, textAnchor0);
      assertSame(textBlock0, textBlock1);
      assertNotNull(textAnchor1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Long long0 = new Long((-2317L));
      assertEquals((-2317L), (long)long0);
      assertNotNull(long0);
      
      TextAnchor textAnchor0 = TextAnchor.TOP_LEFT;
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertNotNull(textAnchor0);
      
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(false, long0, "0jO*Z:RtT7S/+Y*7ZT", textAnchor0, textAnchor0, (-4406.7369975));
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("0jO*Z:RtT7S/+Y*7ZT", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("0jO*Z:RtT7S/+Y*7ZT", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-4406.7369975), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals((-2317.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(cyclicNumberAxis_CycleBoundTick0);
      
      TextAnchor textAnchor1 = cyclicNumberAxis_CycleBoundTick0.getRotationAnchor();
      assertTrue(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.TOP_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertEquals("0jO*Z:RtT7S/+Y*7ZT", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("0jO*Z:RtT7S/+Y*7ZT", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-4406.7369975), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals((-2317.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertFalse(textAnchor1.isVerticalCenter());
      assertTrue(textAnchor1.isTop());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertTrue(textAnchor1.isLeft());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isBottom());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertEquals("TextAnchor.TOP_LEFT", textAnchor1.toString());
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor1, textAnchor0);
      assertNotNull(textAnchor1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-1913));
      assertEquals((-1913), (int)integer0);
      assertNotNull(integer0);
      
      TextAnchor textAnchor0 = TextAnchor.CENTER_LEFT;
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertNotNull(textAnchor0);
      
      int int0 = Integer.divideUnsigned(0, 3684);
      assertEquals(0, int0);
      
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(true, integer0, "TextBlockAnchor.CENTER_RIGHT", textAnchor0, textAnchor0, (-1913));
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(cyclicNumberAxis_CycleBoundTick0);
      assertFalse(integer0.equals((Object)int0));
      
      double double0 = cyclicNumberAxis_CycleBoundTick0.getAngle();
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertEquals((-1913.0), double0, 0.01);
      assertFalse(integer0.equals((Object)int0));
      
      cyclicNumberAxis_CycleBoundTick0.mapToLastCycle = false;
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      
      TextAnchor textAnchor1 = cyclicNumberAxis_CycleBoundTick0.getRotationAnchor();
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isLeft());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor1.toString());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isTop());
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor1, textAnchor0);
      assertNotNull(textAnchor1);
      assertFalse(integer0.equals((Object)int0));
      
      TextAnchor textAnchor2 = cyclicNumberAxis_CycleBoundTick0.getTextAnchor();
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertFalse(textAnchor2.isHorizontalCenter());
      assertTrue(textAnchor2.isLeft());
      assertFalse(textAnchor2.isBaseline());
      assertTrue(textAnchor2.isVerticalCenter());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor2.toString());
      assertFalse(textAnchor2.isRight());
      assertFalse(textAnchor2.isBottom());
      assertFalse(textAnchor2.isTop());
      assertFalse(textAnchor2.isHalfAscent());
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor0, textAnchor2);
      assertSame(textAnchor2, textAnchor1);
      assertSame(textAnchor2, textAnchor0);
      assertNotNull(textAnchor2);
      assertFalse(integer0.equals((Object)int0));
      
      TextAnchor textAnchor3 = cyclicNumberAxis_CycleBoundTick0.getTextAnchor();
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertFalse(textAnchor3.isRight());
      assertFalse(textAnchor3.isHorizontalCenter());
      assertFalse(textAnchor3.isBottom());
      assertTrue(textAnchor3.isLeft());
      assertFalse(textAnchor3.isHalfAscent());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor3.toString());
      assertTrue(textAnchor3.isVerticalCenter());
      assertFalse(textAnchor3.isBaseline());
      assertFalse(textAnchor3.isTop());
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor0, textAnchor2);
      assertSame(textAnchor0, textAnchor3);
      assertSame(textAnchor3, textAnchor2);
      assertSame(textAnchor3, textAnchor1);
      assertSame(textAnchor3, textAnchor0);
      assertNotNull(textAnchor3);
      assertFalse(integer0.equals((Object)int0));
      
      Number number0 = cyclicNumberAxis_CycleBoundTick0.getNumber();
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertEquals((-1913), number0);
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor0, textAnchor2);
      assertSame(textAnchor0, textAnchor3);
      assertNotNull(number0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(number0.equals((Object)int0));
      
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      LogTick logTick0 = new LogTick((TickType) null, 0, attributedString0, textAnchor2);
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertFalse(textAnchor2.isHorizontalCenter());
      assertTrue(textAnchor2.isLeft());
      assertFalse(textAnchor2.isBaseline());
      assertTrue(textAnchor2.isVerticalCenter());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor2.toString());
      assertFalse(textAnchor2.isRight());
      assertFalse(textAnchor2.isBottom());
      assertFalse(textAnchor2.isTop());
      assertFalse(textAnchor2.isHalfAscent());
      assertNull(logTick0.toString());
      assertNull(logTick0.getText());
      assertEquals(0.0, logTick0.getValue(), 0.01);
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(logTick0);
      assertFalse(integer0.equals((Object)int0));
      
      AttributedString attributedString1 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      logTick0.attributedLabel = attributedString1;
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertFalse(textAnchor2.isHorizontalCenter());
      assertTrue(textAnchor2.isLeft());
      assertFalse(textAnchor2.isBaseline());
      assertTrue(textAnchor2.isVerticalCenter());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor2.toString());
      assertFalse(textAnchor2.isRight());
      assertFalse(textAnchor2.isBottom());
      assertFalse(textAnchor2.isTop());
      assertFalse(textAnchor2.isHalfAscent());
      assertNull(logTick0.toString());
      assertNull(logTick0.getText());
      assertEquals(0.0, logTick0.getValue(), 0.01);
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      
      AttributedString attributedString2 = logTick0.getAttributedLabel();
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals((-1913.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertFalse(textAnchor2.isHorizontalCenter());
      assertTrue(textAnchor2.isLeft());
      assertFalse(textAnchor2.isBaseline());
      assertTrue(textAnchor2.isVerticalCenter());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor2.toString());
      assertFalse(textAnchor2.isRight());
      assertFalse(textAnchor2.isBottom());
      assertFalse(textAnchor2.isTop());
      assertFalse(textAnchor2.isHalfAscent());
      assertNull(logTick0.toString());
      assertNull(logTick0.getText());
      assertEquals(0.0, logTick0.getValue(), 0.01);
      assertEquals(0.0, logTick0.getAngle(), 0.01);
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor0, textAnchor2);
      assertSame(textAnchor0, textAnchor3);
      assertSame(textAnchor2, textAnchor3);
      assertSame(textAnchor2, textAnchor1);
      assertSame(textAnchor2, textAnchor0);
      assertSame(attributedString2, attributedString1);
      assertNotSame(attributedString2, attributedString0);
      assertNotNull(attributedString2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(attributedString2.equals((Object)attributedString0));
      
      TextBlock textBlock0 = new TextBlock();
      assertNotNull(textBlock0);
      
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.TOP_LEFT;
      assertEquals("TextBlockAnchor.TOP_LEFT", textBlockAnchor0.toString());
      assertNotNull(textBlockAnchor0);
      
      CategoryTick categoryTick0 = new CategoryTick("TextBlockAnchor.CENTER_RIGHT", textBlock0, textBlockAnchor0, textAnchor0, 957.9198238861);
      assertEquals("TextBlockAnchor.TOP_LEFT", textBlockAnchor0.toString());
      assertEquals("", categoryTick0.toString());
      assertEquals(957.9198238861, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.getText());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertNotNull(categoryTick0);
      
      Comparable comparable0 = categoryTick0.getCategory();
      assertEquals("TextBlockAnchor.TOP_LEFT", textBlockAnchor0.toString());
      assertEquals("", categoryTick0.toString());
      assertEquals(957.9198238861, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.getText());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("TextAnchor.CENTER_LEFT", textAnchor0.toString());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextBlockAnchor.CENTER_RIGHT", comparable0);
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor0, textAnchor2);
      assertSame(textAnchor0, textAnchor3);
      assertNotNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      TextAnchor textAnchor0 = TextAnchor.CENTER;
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertNotNull(textAnchor0);
      
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(false, float0, "location", textAnchor0, textAnchor0, 0.0);
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("location", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("location", cyclicNumberAxis_CycleBoundTick0.getText());
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(cyclicNumberAxis_CycleBoundTick0);
      
      Number number0 = cyclicNumberAxis_CycleBoundTick0.getNumber();
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("location", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("location", cyclicNumberAxis_CycleBoundTick0.getText());
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertEquals(0.0F, number0);
      assertNotNull(number0);
      
      TextAnchor textAnchor1 = cyclicNumberAxis_CycleBoundTick0.getTextAnchor();
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("location", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("location", cyclicNumberAxis_CycleBoundTick0.getText());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isHalfAscent());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isVerticalCenter());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isTop());
      assertFalse(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertSame(textAnchor0, textAnchor1);
      assertSame(textAnchor1, textAnchor0);
      assertNotNull(textAnchor1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Float float0 = new Float(2.0F);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite(2.0F);
      assertTrue(boolean0);
      
      TextAnchor textAnchor0 = TextAnchor.TOP_CENTER;
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertNotNull(textAnchor0);
      
      boolean boolean1 = Float.isFinite((-3321.535F));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      NumberTick numberTick0 = new NumberTick(float0, "", textAnchor0, textAnchor0, 0.0);
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("", numberTick0.toString());
      assertEquals(0.0, numberTick0.getAngle(), 0.01);
      assertEquals(2.0, numberTick0.getValue(), 0.01);
      assertEquals("", numberTick0.getText());
      assertNotNull(numberTick0);
      
      NumberTick numberTick1 = (NumberTick)numberTick0.clone();
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("", numberTick0.toString());
      assertEquals(0.0, numberTick0.getAngle(), 0.01);
      assertEquals(2.0, numberTick0.getValue(), 0.01);
      assertEquals("", numberTick0.getText());
      assertEquals("", numberTick1.toString());
      assertEquals(0.0, numberTick1.getAngle(), 0.01);
      assertEquals(2.0, numberTick1.getValue(), 0.01);
      assertEquals("", numberTick1.getText());
      assertNotSame(numberTick0, numberTick1);
      assertNotSame(numberTick1, numberTick0);
      assertNotNull(numberTick1);
      assertTrue(numberTick1.equals((Object)numberTick0));
      
      TextBlock textBlock0 = new TextBlock();
      assertNotNull(textBlock0);
      
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.BOTTOM_RIGHT;
      assertEquals("TextBlockAnchor.BOTTOM_RIGHT", textBlockAnchor0.toString());
      assertNotNull(textBlockAnchor0);
      
      CategoryTick categoryTick0 = new CategoryTick(float0, textBlock0, textBlockAnchor0, textAnchor0, 2.0F);
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextBlockAnchor.BOTTOM_RIGHT", textBlockAnchor0.toString());
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick0.toString());
      assertEquals(2.0, categoryTick0.getAngle(), 0.01);
      assertNotNull(categoryTick0);
      
      Comparable comparable0 = categoryTick0.getCategory();
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextBlockAnchor.BOTTOM_RIGHT", textBlockAnchor0.toString());
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick0.toString());
      assertEquals(2.0, categoryTick0.getAngle(), 0.01);
      assertEquals(2.0F, comparable0);
      assertSame(float0, comparable0);
      assertNotNull(comparable0);
      
      String string0 = numberTick0.getText();
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("", numberTick0.toString());
      assertEquals(0.0, numberTick0.getAngle(), 0.01);
      assertEquals(2.0, numberTick0.getValue(), 0.01);
      assertEquals("", numberTick0.getText());
      assertEquals("", string0);
      assertSame(float0, comparable0);
      assertNotSame(numberTick0, numberTick1);
      assertNotNull(string0);
      assertTrue(numberTick0.equals((Object)numberTick1));
      
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(true, float0, "", textAnchor0, textAnchor0, 2.0F);
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals(2.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(2.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(cyclicNumberAxis_CycleBoundTick0);
      
      boolean boolean2 = numberTick0.equals(cyclicNumberAxis_CycleBoundTick0);
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("", numberTick0.toString());
      assertEquals(0.0, numberTick0.getAngle(), 0.01);
      assertEquals(2.0, numberTick0.getValue(), 0.01);
      assertEquals("", numberTick0.getText());
      assertEquals(2.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals(2.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("", cyclicNumberAxis_CycleBoundTick0.toString());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertFalse(boolean2);
      assertSame(float0, comparable0);
      assertNotSame(numberTick0, numberTick1);
      assertTrue(numberTick0.equals((Object)numberTick1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = categoryTick0.toString();
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.TOP_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isTop());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextBlockAnchor.BOTTOM_RIGHT", textBlockAnchor0.toString());
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick0.toString());
      assertEquals(2.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", string1);
      assertSame(float0, comparable0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      TextAnchor textAnchor0 = TextAnchor.BASELINE_LEFT;
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertNotNull(textAnchor0);
      
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(true, long0, "JN9Kv<pFIp?|@_QD<o", textAnchor0, textAnchor0, 0L);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.getText());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(cyclicNumberAxis_CycleBoundTick0);
      
      String string0 = cyclicNumberAxis_CycleBoundTick0.toString();
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.getText());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertEquals("JN9Kv<pFIp?|@_QD<o", string0);
      assertNotNull(string0);
      
      TextBlock textBlock0 = new TextBlock();
      assertNotNull(textBlock0);
      
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.TOP_LEFT;
      assertEquals("TextBlockAnchor.TOP_LEFT", textBlockAnchor0.toString());
      assertNotNull(textBlockAnchor0);
      
      TextAnchor textAnchor1 = TextAnchor.CENTER;
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertFalse(textAnchor1.isTop());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isRight());
      assertNotSame(textAnchor1, textAnchor0);
      assertNotNull(textAnchor1);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      CategoryTick categoryTick0 = new CategoryTick("JN9Kv<pFIp?|@_QD<o", textBlock0, textBlockAnchor0, textAnchor1, 0L);
      assertEquals("TextBlockAnchor.TOP_LEFT", textBlockAnchor0.toString());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertFalse(textAnchor1.isTop());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isRight());
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick0.toString());
      assertEquals(0.0, categoryTick0.getAngle(), 0.01);
      assertNotNull(categoryTick0);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      CategoryTick categoryTick1 = new CategoryTick("JN9Kv<pFIp?|@_QD<o", textBlock0, textBlockAnchor0, textAnchor0, 0L);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("TextBlockAnchor.TOP_LEFT", textBlockAnchor0.toString());
      assertEquals(0.0, categoryTick1.getAngle(), 0.01);
      assertEquals("", categoryTick1.toString());
      assertEquals("", categoryTick1.getText());
      assertNotNull(categoryTick1);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(categoryTick1.equals((Object)categoryTick0));
      
      boolean boolean0 = categoryTick0.equals(categoryTick1);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals("TextBlockAnchor.TOP_LEFT", textBlockAnchor0.toString());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertFalse(textAnchor1.isTop());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isRight());
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick0.toString());
      assertEquals(0.0, categoryTick0.getAngle(), 0.01);
      assertEquals(0.0, categoryTick1.getAngle(), 0.01);
      assertEquals("", categoryTick1.toString());
      assertEquals("", categoryTick1.getText());
      assertFalse(boolean0);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(textAnchor1, textAnchor0);
      assertNotSame(categoryTick0, categoryTick1);
      assertNotSame(categoryTick1, categoryTick0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(categoryTick0.equals((Object)categoryTick1));
      assertFalse(categoryTick1.equals((Object)categoryTick0));
      
      boolean boolean1 = categoryTick0.equals("JN9Kv<pFIp?|@_QD<o");
      assertEquals("TextBlockAnchor.TOP_LEFT", textBlockAnchor0.toString());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertFalse(textAnchor1.isTop());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isRight());
      assertEquals("", categoryTick0.getText());
      assertEquals("", categoryTick0.toString());
      assertEquals(0.0, categoryTick0.getAngle(), 0.01);
      assertFalse(boolean1);
      assertNotSame(textAnchor1, textAnchor0);
      assertNotSame(categoryTick0, categoryTick1);
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertFalse(categoryTick0.equals((Object)categoryTick1));
      assertTrue(boolean1 == boolean0);
      
      TickType tickType0 = cyclicNumberAxis_CycleBoundTick0.getTickType();
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.getText());
      assertEquals("MAJOR", tickType0.toString());
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotNull(tickType0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-586L)).when(date0).getTime();
      DateTick dateTick0 = new DateTick(tickType0, date0, "L21OL*xC_WD\"_B0{", textAnchor1, textAnchor1, 0L);
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.getText());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertFalse(textAnchor1.isTop());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isRight());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals(0.0, dateTick0.getAngle(), 0.01);
      assertEquals("L21OL*xC_WD\"_B0{", dateTick0.getText());
      assertEquals("L21OL*xC_WD\"_B0{", dateTick0.toString());
      assertEquals((-586.0), dateTick0.getValue(), 0.01);
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotNull(dateTick0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      Date date1 = dateTick0.getDate();
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.getText());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertFalse(textAnchor1.isTop());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isRight());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals(0.0, dateTick0.getAngle(), 0.01);
      assertEquals("L21OL*xC_WD\"_B0{", dateTick0.getText());
      assertEquals("L21OL*xC_WD\"_B0{", dateTick0.toString());
      assertEquals((-586.0), dateTick0.getValue(), 0.01);
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(textAnchor1, textAnchor0);
      assertSame(date1, date0);
      assertNotNull(date1);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      
      boolean boolean2 = dateTick0.equals("JN9Kv<pFIp?|@_QD<o");
      assertFalse(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isLeft());
      assertEquals("TextAnchor.BASELINE_LEFT", textAnchor0.toString());
      assertTrue(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isVerticalCenter());
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.toString());
      assertEquals("JN9Kv<pFIp?|@_QD<o", cyclicNumberAxis_CycleBoundTick0.getText());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertFalse(textAnchor1.isTop());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isRight());
      assertEquals("MAJOR", tickType0.toString());
      assertEquals(0.0, dateTick0.getAngle(), 0.01);
      assertEquals("L21OL*xC_WD\"_B0{", dateTick0.getText());
      assertEquals("L21OL*xC_WD\"_B0{", dateTick0.toString());
      assertEquals((-586.0), dateTick0.getValue(), 0.01);
      assertTrue(cyclicNumberAxis_CycleBoundTick0.mapToLastCycle);
      assertFalse(boolean2);
      assertNotSame(textAnchor0, textAnchor1);
      assertNotSame(textAnchor1, textAnchor0);
      assertFalse(textAnchor0.equals((Object)textAnchor1));
      assertFalse(textAnchor1.equals((Object)textAnchor0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      TextBlock textBlock0 = new TextBlock();
      assertNotNull(textBlock0);
      
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_CENTER;
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isLeft());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertNotNull(textAnchor0);
      
      HorizontalAlignment horizontalAlignment0 = textBlock0.getLineAlignment();
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertNotNull(horizontalAlignment0);
      
      textBlock0.setLineAlignment(horizontalAlignment0);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      
      List list0 = textBlock0.getLines();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      CategoryTick categoryTick0 = new CategoryTick(date0, textBlock0, (TextBlockAnchor) null, textAnchor0, 0.0);
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isLeft());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("", categoryTick0.toString());
      assertEquals(0.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.getText());
      assertNotNull(categoryTick0);
      
      TextBlockAnchor textBlockAnchor0 = categoryTick0.getLabelAnchor();
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.HALF_ASCENT_CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isLeft());
      assertTrue(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isRight());
      assertEquals("", categoryTick0.toString());
      assertEquals(0.0, categoryTick0.getAngle(), 0.01);
      assertEquals("", categoryTick0.getText());
      assertNull(textBlockAnchor0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<DateTick> comparable0 = (Comparable<DateTick>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      TextBlock textBlock0 = new TextBlock();
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.BOTTOM_RIGHT;
      TextAnchor textAnchor0 = TextAnchor.TOP_RIGHT;
      CategoryTick categoryTick0 = new CategoryTick(comparable0, textBlock0, textBlockAnchor0, textAnchor0, (-1.0));
      Double double0 = new Double((-1.0));
      Double.sum(0.0, 0.0);
      Double.max(0.0, (-1.0));
      NumberTick numberTick0 = new NumberTick(double0, ".BMP1", textAnchor0, textAnchor0, (-1.0));
      numberTick0.getNumber();
      categoryTick0.getCategory();
      numberTick0.toString();
      Integer integer0 = new Integer(0);
      categoryTick0.equals(integer0);
      assertEquals((-1.0), categoryTick0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextAnchor textAnchor0 = TextAnchor.BOTTOM_RIGHT;
      assertFalse(textAnchor0.isBaseline());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Double double0 = new Double((-458.91389571229));
      Double.isFinite((-458.91389571229));
      TextAnchor textAnchor0 = TextAnchor.TOP_CENTER;
      TextAnchor textAnchor1 = TextAnchor.BOTTOM_RIGHT;
      Double.max((-458.91389571229), 0.0);
      NumberTick numberTick0 = new NumberTick(double0, ";", textAnchor0, textAnchor1, (-458.91389571229));
      TextAnchor textAnchor2 = numberTick0.getRotationAnchor();
      Object object0 = numberTick0.clone();
      boolean boolean0 = numberTick0.equals(object0);
      assertTrue(boolean0);
      
      numberTick0.getText();
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-1837L)).when(date0).getTime();
      TextAnchor textAnchor3 = TextAnchor.TOP_CENTER;
      DateTick dateTick0 = new DateTick(date0, "", textAnchor3, textAnchor1, 0.0);
      dateTick0.clone();
      dateTick0.equals(";");
      numberTick0.clone();
      TextBlock textBlock0 = new TextBlock();
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.CENTER;
      HorizontalAlignment horizontalAlignment0 = textBlock0.getLineAlignment();
      textBlock0.setLineAlignment(horizontalAlignment0);
      CategoryTick categoryTick0 = new CategoryTick(";", textBlock0, textBlockAnchor0, textAnchor0, 0.0);
      categoryTick0.getCategory();
      TextBlock textBlock1 = new TextBlock();
      CategoryTick categoryTick1 = new CategoryTick(double0, textBlock1, textBlockAnchor0, textAnchor1, (-458.91389571229));
      numberTick0.equals(categoryTick1);
      TextAnchor textAnchor4 = numberTick0.getTextAnchor();
      assertNotSame(textAnchor4, textAnchor2);
      assertEquals((-458.91389571229), numberTick0.getAngle(), 0.01);
      assertNotSame(numberTick0, object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_RIGHT;
      assertTrue(textAnchor0.isRight());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Float float0 = new Float(526.75770265448);
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(false, float0, ",{1;", textAnchor0, textAnchor0, 526.75770265448);
      Float.isFinite(0.0F);
      TextAnchor textAnchor1 = TextAnchor.BOTTOM_CENTER;
      cyclicNumberAxis_CycleBoundTick0.mapToLastCycle = false;
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick1 = new CyclicNumberAxis.CycleBoundTick(false, float0, "", textAnchor1, textAnchor1, 526.75770265448);
      boolean boolean0 = cyclicNumberAxis_CycleBoundTick0.equals(cyclicNumberAxis_CycleBoundTick1);
      assertFalse(boolean0);
      
      cyclicNumberAxis_CycleBoundTick0.toString();
      Object object0 = cyclicNumberAxis_CycleBoundTick0.clone();
      assertNotSame(object0, cyclicNumberAxis_CycleBoundTick0);
      assertTrue(object0.equals((Object)cyclicNumberAxis_CycleBoundTick0));
      
      cyclicNumberAxis_CycleBoundTick1.getAngle();
      cyclicNumberAxis_CycleBoundTick1.getRotationAnchor();
      cyclicNumberAxis_CycleBoundTick1.getTextAnchor();
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      DateTick dateTick0 = new DateTick(date0, "5G$K", textAnchor0, textAnchor1, (-2727.40733));
      dateTick0.getDate();
      TextBlock textBlock0 = new TextBlock();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      textBlock0.draw(graphics2D0, 0.0F, (-1.0F), (TextBlockAnchor) null);
      CategoryTick categoryTick0 = new CategoryTick((Comparable) null, textBlock0, (TextBlockAnchor) null, textAnchor0, (-2727.40733));
      categoryTick0.getCategory();
      dateTick0.equals("5G$K");
      double double0 = cyclicNumberAxis_CycleBoundTick1.getAngle();
      assertEquals(526.75770265448, double0, 0.01);
  }
}
