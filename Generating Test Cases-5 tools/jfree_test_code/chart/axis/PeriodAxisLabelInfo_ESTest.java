/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:56:55 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.text.DateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.TimeSeriesTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodAxisLabelInfo_ESTest extends PeriodAxisLabelInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      DateFormat dateFormat0 = DateFormat.getTimeInstance(1);
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      Day day0 = new Day();
      Date date0 = day0.getStart();
      Locale locale0 = Locale.CANADA_FRENCH;
      periodAxisLabelInfo0.createInstance(date0, (TimeZone) null, locale0);
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<DateFormat> class0 = DateFormat.class;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfo0.getDateFormat();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Minute> class0 = Minute.class;
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      Font font0 = PeriodAxisLabelInfo.DEFAULT_FONT;
      Color color0 = (Color)PeriodAxisLabelInfo.DEFAULT_LABEL_PAINT;
      BasicStroke basicStroke0 = (BasicStroke)PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
      PeriodAxisLabelInfo periodAxisLabelInfo0 = null;
      try {
        periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, (RectangleInsets) null, font0, color0, true, basicStroke0, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Quarter> class0 = Quarter.class;
      PeriodAxisLabelInfo periodAxisLabelInfo0 = null;
      try {
        periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, (DateFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dateFormat' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      boolean boolean0 = periodAxisLabelInfo0.equals(timeSeriesTableModel0);
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      DateFormat dateFormat0 = DateFormat.getTimeInstance(1);
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfo0.getLabelFont();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<DateFormat> class0 = DateFormat.class;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      boolean boolean0 = periodAxisLabelInfo0.getDrawDividers();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<DateFormat> class0 = DateFormat.class;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      Color color0 = (Color)periodAxisLabelInfo0.getLabelPaint();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      PeriodAxisLabelInfo periodAxisLabelInfo1 = (PeriodAxisLabelInfo)periodAxisLabelInfo0.clone();
      assertTrue(periodAxisLabelInfo1.getDrawDividers());
      assertNotSame(periodAxisLabelInfo1, periodAxisLabelInfo0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfo0.hashCode();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<DateFormat> class0 = DateFormat.class;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfo0.getPadding();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfo0.getPeriodClass();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, mockSimpleDateFormat0);
      periodAxisLabelInfo0.getDividerStroke();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<DateFormat> class0 = DateFormat.class;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      Color color0 = (Color)periodAxisLabelInfo0.getDividerPaint();
      assertTrue(periodAxisLabelInfo0.getDrawDividers());
      assertEquals(128, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = mock(DateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(dateFormat0).clone();
      RectangleInsets rectangleInsets0 = PeriodAxisLabelInfo.DEFAULT_INSETS;
      Font font0 = PeriodAxisLabelInfo.DEFAULT_FONT;
      Color color0 = (Color)PeriodAxisLabelInfo.DEFAULT_LABEL_PAINT;
      BasicStroke basicStroke0 = (BasicStroke)PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font0, color0, true, basicStroke0, color0);
      // Undeclared exception!
      try { 
        periodAxisLabelInfo0.getDateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxisLabelInfo", e);
      }
  }
}
