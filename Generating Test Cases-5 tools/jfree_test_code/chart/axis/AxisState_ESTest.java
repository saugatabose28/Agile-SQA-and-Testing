/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:32:51 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.ui.RectangleEdge;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AxisState_ESTest extends AxisState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AxisState axisState0 = new AxisState();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      axisState0.moveCursor((-4158.79699465), rectangleEdge0);
      assertEquals((-4158.79699465), axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AxisState axisState0 = new AxisState((-1218.360612071538));
      axisState0.cursorLeft((-1218.360612071538));
      assertEquals(0.0, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AxisState axisState0 = new AxisState();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      axisState0.moveCursor((-1559.4262834173), rectangleEdge0);
      assertEquals(1559.4262834173, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AxisState axisState0 = new AxisState();
      axisState0.setTicks((List) null);
      axisState0.getTicks();
      assertEquals(0.0, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AxisState axisState0 = new AxisState(0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast("");
      axisState0.setTicks(linkedList0);
      axisState0.getTicks();
      assertEquals(0.0, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AxisState axisState0 = new AxisState();
      axisState0.setMax(1737.38934);
      double double0 = axisState0.getMax();
      assertEquals(1737.38934, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AxisState axisState0 = new AxisState();
      axisState0.setMax((-577.89));
      double double0 = axisState0.getMax();
      assertEquals((-577.89), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AxisState axisState0 = new AxisState(0.0);
      axisState0.cursorDown(3490.27465990065);
      double double0 = axisState0.getCursor();
      assertEquals(3490.27465990065, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AxisState axisState0 = new AxisState((-1218.360612071538));
      double double0 = axisState0.getCursor();
      assertEquals((-1218.360612071538), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AxisState axisState0 = new AxisState(0.0);
      axisState0.cursorUp(0.0);
      assertEquals(0.0, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AxisState axisState0 = new AxisState();
      axisState0.cursorRight(0.0);
      assertEquals(0.0, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AxisState axisState0 = new AxisState();
      axisState0.cursorLeft(0.0);
      assertEquals(0.0, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AxisState axisState0 = new AxisState(0.0);
      axisState0.moveCursor(0.0, (RectangleEdge) null);
      assertEquals(0.0, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AxisState axisState0 = new AxisState();
      axisState0.setCursor(0.0);
      assertEquals(0.0, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AxisState axisState0 = new AxisState(1245.0);
      double double0 = axisState0.getMax();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1245.0, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AxisState axisState0 = new AxisState();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      axisState0.moveCursor(0.0, rectangleEdge1);
      assertEquals(0.0, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AxisState axisState0 = new AxisState(1.0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      axisState0.moveCursor(1.0, rectangleEdge1);
      assertEquals(2.0, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AxisState axisState0 = new AxisState();
      double double0 = axisState0.getCursor();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AxisState axisState0 = new AxisState(0.0);
      List list0 = axisState0.getTicks();
      axisState0.setTicks(list0);
      assertEquals(0.0, axisState0.getCursor(), 0.01);
  }
}
