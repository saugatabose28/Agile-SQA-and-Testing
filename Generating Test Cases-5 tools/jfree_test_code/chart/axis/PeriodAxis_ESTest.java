/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:41:03 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Button;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.LinearGradientPaint;
import java.awt.MultipleGradientPaint;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ConvolveOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.text.CharacterIterator;
import java.text.DateFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.time.DateTimeException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.temporal.TemporalField;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.border.EtchedBorder;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.plaf.multi.MultiTextUI;
import javax.swing.plaf.multi.MultiTreeUI;
import javax.swing.text.JTextComponent;
import javax.swing.text.Position;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.FixedHeightLayoutCache;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.TextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.Title;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.XYBarDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodAxis_ESTest extends PeriodAxis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("zone");
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.getDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      periodAxis0.setPlot(multiplePiePlot0);
      periodAxis0.setLabelAngle(Double.NaN);
      periodAxis0.getMinorTickMarkInsideLength();
      Class<CombinedDomainCategoryPlot> class0 = CombinedDomainCategoryPlot.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      // Undeclared exception!
      try { 
        periodAxis0.setLabelInsets((RectangleInsets) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("6H4h=A05gg5F($kt^Yr");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getDataRange(periodAxis0);
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[1];
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      categoryItemRendererArray0[0] = (CategoryItemRenderer) statisticalBarRenderer0;
      combinedRangeCategoryPlot0.setRenderers(categoryItemRendererArray0);
      // Undeclared exception!
      try { 
        periodAxis0.setRange((Range) null, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "7gHF[=!]%4IB";
      PeriodAxis periodAxis0 = new PeriodAxis("7gHF[=!]%4IB");
      Paint paint0 = null;
      // Undeclared exception!
      try { 
        periodAxis0.setMinorTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("yyyy");
      periodAxis0.getMinorTickTimePeriodClass();
      periodAxis0.setLowerBound(1229.0892413);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 2.0F, 1.0F, 2.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      periodAxis0.java2DToValue((-3307.44725), rectangle2D_Float0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "org.jfree.chart.axis.DateAxisTest$MyDateAxis";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = mockGregorianCalendar0.getTimeZone();
      Locale locale0 = Locale.US;
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("org.jfree.chart.axis.DateAxisTest$MyDateAxis", (RegularTimePeriod) null, (RegularTimePeriod) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "'IuT:-s5R=";
      PeriodAxis periodAxis0 = new PeriodAxis("'IuT:-s5R=");
      // Undeclared exception!
      try { 
        periodAxis0.setLast((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'last' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("stroke");
      periodAxis0.zoomRange(3133.029566026771, 3133.029566026771);
      periodAxis0.setLowerMargin(3133.029566026771);
      periodAxis0.setAutoRange(false, true);
      periodAxis0.equals((Object) null);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(500, 2.0F, 0.0F, 500);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge(500);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        periodAxis0.draw((Graphics2D) null, 3133.029566026771, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Second second0 = new Second();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofLocalizedTime(formatStyle0);
      LinkedHashSet<TemporalField> linkedHashSet0 = new LinkedHashSet<TemporalField>();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withResolverFields((Set<TemporalField>) linkedHashSet0);
      Locale locale0 = dateTimeFormatter1.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      second0.peg(mockGregorianCalendar0);
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.plot.PieLabelRecord", second0, second0);
      Class<Minute> class0 = Minute.class;
      periodAxis0.createAttributedLabel("org.jfree.chart.plot.PieLabelRecord");
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      periodAxis0.getLast();
      periodAxis0.getAutoRangeTimePeriodClass();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("lq");
      periodAxis0.getLabelInfo();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, 0, plotRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = categoryItemRendererState0.getInfo();
      plotRenderingInfo1.getPlotArea();
      periodAxis0.valueToJava2D((-1.1), (Rectangle2D) null, (RectangleEdge) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hour hour0 = new Hour();
      PeriodAxis periodAxis0 = new PeriodAxis("j9$e", hour0, hour0);
      periodAxis0.setLabel("pwIv:cWs#_=|I");
      periodAxis0.setMinorTickMarkOutsideLength(23);
      Hour.parseHour("azwH8");
      periodAxis0.getTimeZone();
      periodAxis0.getMinorTickTimePeriodClass();
      periodAxis0.getMinorTickTimePeriodClass();
      periodAxis0.getLast();
      PeriodAxisLabelInfo[] periodAxisLabelInfoArray0 = new PeriodAxisLabelInfo[2];
      Class<String> class0 = String.class;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      BlockBorder blockBorder0 = new BlockBorder(0.0F, 0.0, 558.38, 23, periodAxis0.DEFAULT_TICK_MARK_PAINT);
      RectangleInsets rectangleInsets0 = blockBorder0.getInsets();
      boolean boolean0 = false;
      hour0.getDayOfMonth();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = null;
      try {
        periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, periodAxis0.DEFAULT_AXIS_LABEL_FONT, periodAxis0.DEFAULT_AXIS_LINE_PAINT, false, (Stroke) null, periodAxis0.DEFAULT_TICK_MARK_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dividerStroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("<]2*B:j;");
      periodAxis0.setMinorTickMarkInsideLength((-1345.2898F));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("~Z-G+l>8xg?");
      periodAxis0.setTickLabelsVisible(false);
      periodAxis0.setMinorTickMarksVisible(false);
      periodAxis0.getLocale();
      periodAxis0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("cT[$SCJ:f/");
      periodAxis0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("yyyy");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      periodAxis0.labelAnchorV(axisLabelLocation0);
      periodAxis0.clone();
      periodAxis0.getMinorTickMarkPaint();
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode(axisLabelLocation0, true);
      JTree jTree0 = new JTree(defaultMutableTreeNode0, false);
      FixedHeightLayoutCache fixedHeightLayoutCache0 = new FixedHeightLayoutCache();
      fixedHeightLayoutCache0.getPathForRow(500);
      metalTreeUI0.getPathBounds(jTree0, (TreePath) null);
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, periodAxis0);
      AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      // Undeclared exception!
      try { 
        periodAxis0.valueToJava2D(0.0, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("i0`'*D");
      Range range0 = new Range(0.05, 0.05);
      Class<Quarter> class0 = Quarter.class;
      periodAxis0.setMajorTickTimePeriodClass(class0);
      periodAxis0.setAutoRange(true);
      periodAxis0.setRange(range0, false, false);
      periodAxis0.getMinorTickMarkOutsideLength();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.ITALIAN;
      locale1.toLanguageTag();
      locale0.getDisplayCountry(locale1);
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("", (RegularTimePeriod) null, (RegularTimePeriod) null, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'timeZone' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("KM;RaO");
      periodAxis0.setMinorTickMarkOutsideLength(0.0F);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Month month0 = null;
      try {
        month0 = new Month((Date) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hour hour0 = new Hour();
      PeriodAxis periodAxis0 = new PeriodAxis("", hour0, hour0);
      periodAxis0.clone();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Range range0 = thermometerPlot0.getDataRange(periodAxis0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.getDrawingSupplier();
      thermometerPlot0.setDrawingSupplier((DrawingSupplier) null);
      periodAxis0.setRange(range0, true, false);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 1, 1, 360, 1);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      Date date0 = simpleTimePeriod0.getStart();
      Month month0 = new Month(date0);
      PeriodAxis periodAxis0 = new PeriodAxis(">", month0, month0);
      periodAxis0.autoAdjustRange();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      periodAxis0.equals(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      periodAxis0.setMinorTickMarksVisible(false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("qYsB`t[s$1zhPB");
      periodAxis0.setMinorTickMarksVisible(true);
      Day.parseDay("qYsB`t[s$1zhPB");
      // Undeclared exception!
      try { 
        periodAxis0.setFirst((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'first' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis(" ,");
      periodAxis0.setAutoTickUnitSelection(true, true);
      Class<CombinedRangeCategoryPlot> class0 = CombinedRangeCategoryPlot.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      Class class1 = periodAxis0.getMajorTickTimePeriodClass();
      periodAxis0.setMajorTickTimePeriodClass(class1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      periodAxis0.getLast();
      periodAxis0.getFirst();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getFirstMillisecond();
      doReturn(0L).when(regularTimePeriod0).getLastMillisecond();
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(timeZone0).clone();
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PeriodAxis periodAxis0 = new PeriodAxis("0.0000", regularTimePeriod0, regularTimePeriod0, timeZone0, locale0);
      periodAxis0.isMinorTickMarksVisible();
      locale0.hasExtensions();
      locale0.toLanguageTag();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      RectangleEdge.coordinate(rectangle2D0, rectangleEdge0);
      periodAxis0.valueToJava2D(2.0, rectangle2D0, rectangleEdge0);
      periodAxis0.setMinorTickMarkStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      periodAxis0.getMinorTickMarkPaint();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)47;
      byte byte0 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      int int0 = 0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(10, 1319, byteArray0, byteArray0, byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("", (RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis(")3RTvh#a%;ypmG");
      periodAxis0.getMinorTickMarkPaint();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Year year0 = new Year(999);
      PeriodAxis periodAxis0 = new PeriodAxis("MMM", millisecond0, year0);
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      PaintScale paintScale0 = xYShapeRenderer0.getPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, periodAxis0);
      Stroke stroke0 = paintScaleLegend0.getStripOutlineStroke();
      periodAxis0.setMinorTickMarkStroke(stroke0);
      periodAxis0.getLabelInfo();
      periodAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1590, 1590, 1590);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.axis.PeriodAxis", regularTimePeriod0, hour0);
      hour0.previous();
      periodAxis0.setAutoTickUnitSelection(false, false);
      periodAxis0.setFirst(regularTimePeriod0);
      periodAxis0.isMinorTickMarksVisible();
      periodAxis0.getMinorTickMarkStroke();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      PeriodAxis periodAxis0 = new PeriodAxis("paint", regularTimePeriod0, regularTimePeriod0);
      periodAxis0.setMinorTickMarksVisible(true);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        periodAxis0.setLowerBound(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainTickBandPaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedDomainXYPlot0.mapDatasetToDomainAxis(500, 500);
      periodAxis0.equals(combinedDomainXYPlot0);
      periodAxis0.setMinorTickMarksVisible(true);
      periodAxis0.getTimeZone();
      periodAxis0.getAutoRangeTimePeriodClass();
      PeriodAxisLabelInfo[] periodAxisLabelInfoArray0 = new PeriodAxisLabelInfo[0];
      periodAxis0.setLabelInfo(periodAxisLabelInfoArray0);
      MeterPlot meterPlot0 = new MeterPlot();
      Range range0 = meterPlot0.getRange();
      periodAxis0.setRange(range0, true, true);
      periodAxis0.clone();
      Day day0 = null;
      try {
        day0 = new Day(270, 10, 1024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      Color color0 = Color.green;
      periodAxis0.setMinorTickMarkPaint(color0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("+v`M{");
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MONTH;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500);
      MockDate mockDate0 = new MockDate(2, 500, 0, 500, (-605), 3);
      Date date0 = dateTickUnit0.rollDate((Date) mockDate0);
      Week week0 = new Week(date0);
      periodAxis0.setLast(week0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Key");
      periodAxis0.getLast();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("v<!QqzT9rC%!");
      Class<Second> class0 = Second.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      periodAxis0.getTimeZone();
      periodAxis0.getMinorTickMarkInsideLength();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("apQ8K}#N%w-8^!8H`3");
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
      Rectangle2D rectangle2D0 = periodAxis0.DEFAULT_AXIS_LABEL_FONT.getStringBounds("", fontRenderContext0);
      affineTransform0.setToRotation(1.0E-8, 1.0E-8);
      periodAxis0.setVisible(false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      affineTransform0.scale(5106.4781222294, 2.1);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      periodAxis0.valueToJava2D(0.0, rectangle2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "Yef";
      // Undeclared exception!
      try { 
        Month.parseMonth("Yef");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      MockDate mockDate0 = (MockDate)DateAxis.DEFAULT_ANCHOR_DATE;
      Millisecond millisecond0 = new Millisecond(mockDate0);
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutes(0, 999);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset minutes not in valid range: value 999 is not in the range -59 to 59
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "16D)>B-CFv";
      // Undeclared exception!
      try { 
        Quarter.parseQuarter("n~C\"6u>uHv=q=PpC,L<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing Q.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "";
      int int0 = 59;
      Minute minute0 = null;
      try {
        minute0 = new Minute(59, 59, (-2), 100, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(periodAxis0);
      
      periodAxis0.setLowerMargin((-48.493828223));
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals((-48.493828223), periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      Class<Millisecond> class0 = Millisecond.class;
      periodAxis0.setMinorTickTimePeriodClass(class0);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals((-48.493828223), periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      periodAxis0.configure();
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals((-48.493828223), periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      int int0 = 1861;
      int int1 = 4318;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1861, 500, 500, 4318, 0, (-871));
      assertNotNull(mockGregorianCalendar0);
      
      TimeZone timeZone0 = mockGregorianCalendar0.getTimeZone();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1861,MONTH=500,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=500,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=4318,HOUR_OF_DAY=4318,MINUTE=0,SECOND=-871,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      periodAxis0.setTimeZone(timeZone0);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals((-48.493828223), periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1861,MONTH=500,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=500,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=4318,HOUR_OF_DAY=4318,MINUTE=0,SECOND=-871,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge0 = null;
      double double0 = periodAxis0.java2DToValue(573.2680405796461, (Rectangle2D) null, (RectangleEdge) null);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals((-48.493828223), periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      periodAxis0.configure();
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals((-48.493828223), periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)periodAxis0.getMinorTickMarkStroke();
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals((-48.493828223), periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(basicStroke0);
      
      int int2 = 1787;
      int int3 = 0;
      int int4 = 1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)26;
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte)26;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1861, 0, byteArray0, byteArray1, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "";
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getBounds2D();
      periodAxis0.setDownArrow(rectangle2D0);
      periodAxis0.getMinorTickTimePeriodClass();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      periodAxis0.valueToJava2D(0.0, rectangle2D0, rectangleEdge0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 1.0E-8;
      doubleArray0[2] = 1.0E-8;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 10;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 1.0F;
      doubleArray0[8] = (-723.0);
      AffineTransform affineTransform0 = new AffineTransform(doubleArray0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 10
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = null;
      long long0 = 647L;
      MockDate mockDate0 = new MockDate(647L);
      // Undeclared exception!
      try { 
        ZoneId.of((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zoneId
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("jX|NwQJ!");
      boolean boolean0 = false;
      double double0 = 2344.027338039009;
      Vector<FastScatterPlot> vector0 = new Vector<FastScatterPlot>();
      JTree jTree0 = new JTree(vector0);
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      MultiTreeUI.createUI(jTree0);
      // Undeclared exception!
      try { 
        multiTreeUI0.getAccessibleChild(jTree0, 500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
