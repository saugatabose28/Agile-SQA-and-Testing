/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:36:21 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.axis.QuarterDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuarterDateFormat_ESTest extends QuarterDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat();
      assertNotNull(quarterDateFormat0);
      assertTrue(quarterDateFormat0.isLenient());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer("`r\\8'");
      assertNotNull(stringBuffer0);
      assertEquals(5, stringBuffer0.length());
      assertEquals("`r\\8'", stringBuffer0.toString());
      
      FieldPosition fieldPosition0 = new FieldPosition(1);
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(1, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      StringBuffer stringBuffer1 = quarterDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertTrue(quarterDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(11, stringBuffer0.length());
      assertEquals("`r\\8'2014 1", stringBuffer0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(1, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(11, stringBuffer1.length());
      assertEquals("`r\\8'2014 1", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String[] stringArray0 = new String[8];
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat(timeZone0, stringArray0, true);
      assertNotNull(quarterDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(quarterDateFormat0.isLenient());
      assertEquals(8, stringArray0.length);
      
      MockDate mockDate0 = new MockDate((-2076), (-2076), (-2076));
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer("' argument.");
      assertNotNull(stringBuffer0);
      assertEquals("' argument.", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      assertNotNull(fieldPosition0);
      assertEquals((-1), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      
      StringBuffer stringBuffer1 = quarterDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(quarterDateFormat0.isLenient());
      assertEquals("Thu Apr 25 00:00:00 GMT 356", mockDate0.toString());
      assertEquals("' argument.null 356", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals((-1), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals("' argument.null 356", stringBuffer1.toString());
      assertEquals(19, stringBuffer1.length());
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat();
      assertNotNull(quarterDateFormat0);
      assertTrue(quarterDateFormat0.isLenient());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-3718));
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals((-3718), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      // Undeclared exception!
      try { 
        quarterDateFormat0.format((Date) null, stringBuffer0, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[7];
      QuarterDateFormat quarterDateFormat0 = null;
      try {
        quarterDateFormat0 = new QuarterDateFormat((TimeZone) null, stringArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[7];
      QuarterDateFormat quarterDateFormat0 = null;
      try {
        quarterDateFormat0 = new QuarterDateFormat((TimeZone) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = null;
      try {
        quarterDateFormat0 = new QuarterDateFormat((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat();
      assertNotNull(quarterDateFormat0);
      assertTrue(quarterDateFormat0.isLenient());
      
      QuarterDateFormat quarterDateFormat1 = (QuarterDateFormat)quarterDateFormat0.clone();
      assertNotSame(quarterDateFormat0, quarterDateFormat1);
      assertNotSame(quarterDateFormat1, quarterDateFormat0);
      assertNotNull(quarterDateFormat1);
      assertTrue(quarterDateFormat1.equals((Object)quarterDateFormat0));
      assertTrue(quarterDateFormat0.isLenient());
      assertTrue(quarterDateFormat1.isLenient());
      
      boolean boolean0 = quarterDateFormat0.equals(quarterDateFormat1);
      assertTrue(boolean0);
      assertNotSame(quarterDateFormat0, quarterDateFormat1);
      assertNotSame(quarterDateFormat1, quarterDateFormat0);
      assertTrue(quarterDateFormat0.equals((Object)quarterDateFormat1));
      assertTrue(quarterDateFormat1.equals((Object)quarterDateFormat0));
      assertTrue(quarterDateFormat0.isLenient());
      assertTrue(quarterDateFormat1.isLenient());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat();
      assertNotNull(quarterDateFormat0);
      assertTrue(quarterDateFormat0.isLenient());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-997), "l*,");
      assertNotNull(simpleTimeZone0);
      assertEquals("l*,", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-997), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=l*,,offset=-997,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      QuarterDateFormat quarterDateFormat1 = new QuarterDateFormat(simpleTimeZone0, quarterDateFormat0.GREEK_QUARTERS);
      assertNotNull(quarterDateFormat1);
      assertFalse(quarterDateFormat1.equals((Object)quarterDateFormat0));
      assertTrue(quarterDateFormat0.isLenient());
      assertEquals("l*,", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-997), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=l*,,offset=-997,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertTrue(quarterDateFormat1.isLenient());
      
      boolean boolean0 = quarterDateFormat0.equals(quarterDateFormat1);
      assertFalse(boolean0);
      assertNotSame(quarterDateFormat0, quarterDateFormat1);
      assertNotSame(quarterDateFormat1, quarterDateFormat0);
      assertFalse(quarterDateFormat0.equals((Object)quarterDateFormat1));
      assertFalse(quarterDateFormat1.equals((Object)quarterDateFormat0));
      assertTrue(quarterDateFormat0.isLenient());
      assertEquals("l*,", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-997), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=l*,,offset=-997,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertTrue(quarterDateFormat1.isLenient());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-7));
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat(timeZone0);
      assertNotNull(quarterDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(quarterDateFormat0.isLenient());
      
      boolean boolean0 = quarterDateFormat0.equals(timeZone0);
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(quarterDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat();
      assertNotNull(quarterDateFormat0);
      assertTrue(quarterDateFormat0.isLenient());
      
      boolean boolean0 = quarterDateFormat0.equals(quarterDateFormat0);
      assertTrue(boolean0);
      assertTrue(quarterDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2245), "");
      String[] stringArray0 = new String[2];
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat(simpleTimeZone0, stringArray0, true);
      QuarterDateFormat quarterDateFormat1 = new QuarterDateFormat(simpleTimeZone0, stringArray0);
      boolean boolean0 = quarterDateFormat0.equals(quarterDateFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2245), "");
      String[] stringArray0 = new String[2];
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat(simpleTimeZone0, stringArray0, true);
      MockDate mockDate0 = new MockDate((-1L));
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition((-2245));
      // Undeclared exception!
      try { 
        quarterDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.chart.axis.QuarterDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      String[] stringArray0 = new String[4];
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat(timeZone0, stringArray0);
      MockDate mockDate0 = new MockDate(0, 0, 1, 2783, 0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(1);
      quarterDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals("1900 null", stringBuffer0.toString());
      assertEquals("1900 null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuarterDateFormat quarterDateFormat0 = new QuarterDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-2279));
      Date date0 = quarterDateFormat0.parse("lJWJvpNIs", parsePosition0);
      assertNull(date0);
  }
}
