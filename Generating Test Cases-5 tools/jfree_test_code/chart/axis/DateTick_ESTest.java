/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:09:54 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.DateTick;
import org.jfree.chart.axis.TickType;
import org.jfree.chart.ui.TextAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTick_ESTest extends DateTick_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TickType tickType0 = mock(TickType.class, new ViolatedAssumptionAnswer());
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      DateTick dateTick0 = null;
      try {
        dateTick0 = new DateTick(tickType0, (Date) null, "", textAnchor0, textAnchor0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateTick", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      DateTick dateTick0 = null;
      try {
        dateTick0 = new DateTick((Date) null, "#xI^I{dp(k.,LEXS", textAnchor0, textAnchor0, 1635.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateTick", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      DateTick dateTick0 = null;
      try {
        dateTick0 = new DateTick(date0, "org.jfree.chart.axis.DateTick", (TextAnchor) null, (TextAnchor) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'textAnchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TickType tickType0 = mock(TickType.class, new ViolatedAssumptionAnswer());
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(date0).getTime();
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      DateTick dateTick0 = new DateTick(tickType0, date0, "(]8xeYCu", textAnchor0, textAnchor0, 0.0);
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(date1).getTime();
      TextAnchor textAnchor1 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      DateTick dateTick1 = new DateTick(date1, "(]8xeYCu", textAnchor1, textAnchor1, 0.0);
      boolean boolean0 = dateTick0.equals(dateTick1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(date0).getTime();
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      DateTick dateTick0 = new DateTick(date0, "7HjpBzhWdmymuxYiUL", textAnchor0, textAnchor0, 0.0);
      Object object0 = dateTick0.clone();
      boolean boolean0 = dateTick0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(date0).getTime();
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      DateTick dateTick0 = new DateTick(date0, "7HjpBzhWdmymuxYiUL", textAnchor0, textAnchor0, 0.0);
      boolean boolean0 = dateTick0.equals(dateTick0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(date0).getTime();
      doReturn("mdtyR]g2Hn").when(date0).toString();
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      DateTick dateTick0 = new DateTick(date0, "7HjpBzhWdmymuxYiUL", textAnchor0, textAnchor0, 0.0);
      Date date1 = dateTick0.getDate();
      boolean boolean0 = dateTick0.equals(date1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(date0).getTime();
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      DateTick dateTick0 = new DateTick(date0, "7HjpBzhWdmymuxYiUL", textAnchor0, textAnchor0, 0.0);
      dateTick0.hashCode();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      TextAnchor textAnchor0 = mock(TextAnchor.class, new ViolatedAssumptionAnswer());
      DateTick dateTick0 = null;
      try {
        dateTick0 = new DateTick((TickType) null, date0, "_:", textAnchor0, textAnchor0, (-2308.852));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'tickType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
