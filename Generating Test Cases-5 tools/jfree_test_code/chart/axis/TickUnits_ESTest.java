/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:24:01 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.TickUnit;
import org.jfree.chart.axis.TickUnits;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TickUnits_ESTest extends TickUnits_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0);
      tickUnits0.add(numberTickUnit0);
      NumberTickUnit numberTickUnit1 = new NumberTickUnit((-1.0));
      tickUnits0.add(numberTickUnit1);
      Object object0 = tickUnits0.clone();
      tickUnits0.getLargerTickUnit(numberTickUnit1);
      TickUnits tickUnits1 = (TickUnits)tickUnits0.clone();
      tickUnits0.size();
      tickUnits0.equals(object0);
      tickUnits0.clone();
      NumberTickUnit numberTickUnit2 = (NumberTickUnit)tickUnits0.getCeilingTickUnit(0.0);
      tickUnits1.getLargerTickUnit(numberTickUnit2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(1406.564353, numberFormat0, (-1384));
      tickUnits0.add(numberTickUnit0);
      tickUnits0.getLargerTickUnit((TickUnit) null);
      // Undeclared exception!
      try { 
        tickUnits0.get(29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("<", decimalFormatSymbols0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0, decimalFormat0);
      numberTickUnit0.valueToString(0.0);
      tickUnits0.add(numberTickUnit0);
      tickUnits0.clone();
      tickUnits0.getCeilingTickUnit(0.0);
      tickUnits0.add(numberTickUnit0);
      tickUnits0.size();
      tickUnits0.clone();
      // Undeclared exception!
      try { 
        tickUnits0.get(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Instant instant0 = MockInstant.now();
      Date.from(instant0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-485.2816583818286));
      numberTickUnit0.valueToString((-485.2816583818286));
      numberTickUnit0.equals(dateFormat0);
      tickUnits0.add(numberTickUnit0);
      tickUnits0.equals((Object) null);
      tickUnits0.clone();
      tickUnits0.getLargerTickUnit(numberTickUnit0);
      TickUnit tickUnit0 = tickUnits0.getCeilingTickUnit((double) 0);
      tickUnits0.add(tickUnit0);
      tickUnits0.getCeilingTickUnit((double) (-1308));
      tickUnits0.size();
      NumberTickUnit numberTickUnit1 = new NumberTickUnit((-1308));
      tickUnits0.equals(numberTickUnit1);
      tickUnits0.clone();
      TickUnit tickUnit1 = tickUnits0.get(0);
      tickUnits0.clone();
      tickUnits0.getCeilingTickUnit((double) 2);
      tickUnits0.getLargerTickUnit(tickUnit1);
      tickUnits0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      Instant instant0 = MockInstant.now();
      Date.from(instant0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-485.2816583818286));
      numberTickUnit0.valueToString((-485.2816583818286));
      tickUnits0.add(numberTickUnit0);
      tickUnits0.equals((Object) null);
      tickUnits0.clone();
      TickUnit tickUnit0 = tickUnits0.getCeilingTickUnit((double) 0);
      tickUnits0.add(tickUnit0);
      tickUnits0.getCeilingTickUnit((double) 0);
      tickUnits0.size();
      NumberTickUnit numberTickUnit1 = new NumberTickUnit(0);
      tickUnits0.equals(numberTickUnit1);
      tickUnits0.clone();
      tickUnits0.get(0);
      tickUnits0.clone();
      tickUnits0.getCeilingTickUnit((double) 2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MINUTE;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 315);
      dateTickUnit0.equals(dateTickUnitType0);
      MockDate mockDate0 = new MockDate(315, 315, 315, 315, 315);
      MockDate.UTC(315, 0, 1, 0, 0, 0);
      dateTickUnit0.rollDate((Date) mockDate0);
      dateTickUnit0.valueToString(1.0);
      tickUnits0.add(dateTickUnit0);
      tickUnits0.clone();
      tickUnits0.size();
      TickUnit tickUnit0 = tickUnits0.getCeilingTickUnit((double) 1);
      tickUnits0.add(tickUnit0);
      TickUnit tickUnit1 = tickUnits0.getLargerTickUnit(tickUnit0);
      tickUnits0.size();
      TickUnit tickUnit2 = tickUnits0.getCeilingTickUnit((-515.6219));
      TickUnits tickUnits1 = (TickUnits)tickUnits0.clone();
      tickUnits0.getLargerTickUnit(tickUnit0);
      tickUnits0.getCeilingTickUnit((double) 7731417600000L);
      tickUnits0.getCeilingTickUnit((double) 0);
      tickUnits0.getCeilingTickUnit((-515.6219));
      tickUnits0.equals(tickUnit1);
      tickUnits1.getCeilingTickUnit(tickUnit2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-3110.075586845061));
      numberTickUnit0.toString();
      tickUnits0.add(numberTickUnit0);
      tickUnits0.getCeilingTickUnit((TickUnit) numberTickUnit0);
      tickUnits0.size();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(1.136161459873, numberFormat0, 2);
      tickUnits0.add(numberTickUnit0);
      tickUnits0.get(0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      tickUnits0.clone();
      Object object0 = tickUnits0.clone();
      tickUnits0.equals(object0);
      tickUnits0.size();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0);
      numberTickUnit0.valueToString((-2141.841172));
      numberTickUnit0.toString();
      numberTickUnit0.valueToString(0.0);
      Object object0 = tickUnits0.clone();
      numberTickUnit0.equals(tickUnits0);
      numberTickUnit0.equals(object0);
      tickUnits0.add(numberTickUnit0);
      tickUnits0.getCeilingTickUnit((TickUnit) numberTickUnit0);
      // Undeclared exception!
      try { 
        tickUnits0.get((-3035));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      Locale locale0 = Locale.forLanguageTag("");
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-1619.3), numberFormat0);
      numberTickUnit0.toString();
      // Undeclared exception!
      try { 
        tickUnits0.getLargerTickUnit(numberTickUnit0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      // Undeclared exception!
      try { 
        tickUnits0.getLargerTickUnit((TickUnit) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      tickUnits0.size();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      int int0 = (-2638);
      tickUnits0.clone();
      // Undeclared exception!
      try { 
        tickUnits0.get((-2638));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MINUTE;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 3439);
      MockDate mockDate0 = new MockDate(0, 1293, 0, 2268, 0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 1, 1, 0, 0, 1);
      Date date0 = dateTickUnit0.rollDate((Date) mockDate0, (TimeZone) simpleTimeZone0);
      dateTickUnit0.rollDate(date0);
      dateTickUnit0.equals(dateTickUnitType0);
      // Undeclared exception!
      try { 
        tickUnits0.getCeilingTickUnit((TickUnit) dateTickUnit0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      double double0 = 1.0;
      TickUnits tickUnits1 = new TickUnits();
      int int0 = 13;
      // Undeclared exception!
      try { 
        tickUnits1.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      // Undeclared exception!
      try { 
        tickUnits0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      double double0 = (-543.4103);
      // Undeclared exception!
      try { 
        tickUnits0.getCeilingTickUnit((-543.4103));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MINUTE;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 3615, dateTickUnitType0, 3615, dateFormat0);
      tickUnits0.add(dateTickUnit0);
      dateTickUnit0.toString();
      int int0 = 1005;
      Duration.ofMillis(1005);
      TickUnit tickUnit0 = tickUnits0.getCeilingTickUnit(0.0);
      tickUnits0.add(dateTickUnit0);
      tickUnits0.getLargerTickUnit(tickUnit0);
      TickUnits tickUnits1 = new TickUnits();
      tickUnits0.equals(tickUnits1);
      tickUnits0.clone();
      tickUnits0.equals("");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(3615);
      DateTickUnit dateTickUnit1 = new DateTickUnit(dateTickUnitType0, 1005);
      numberTickUnit0.equals(dateTickUnit1);
      tickUnits1.clone();
      // Undeclared exception!
      try { 
        tickUnits1.getLargerTickUnit(numberTickUnit0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      TickUnit tickUnit0 = null;
      // Undeclared exception!
      try { 
        tickUnits0.add((TickUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'unit' argument.
         //
         verifyException("org.jfree.chart.axis.TickUnits", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      int int0 = (-1167);
      tickUnits0.clone();
      tickUnits0.size();
      TickUnits tickUnits1 = new TickUnits();
      Object object0 = tickUnits1.clone();
      tickUnits0.equals(object0);
      // Undeclared exception!
      try { 
        tickUnits0.get((-1167));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.DAY;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 29, dateTickUnitType0, 19, dateFormat0);
      tickUnits0.add(dateTickUnit0);
      tickUnits0.clone();
      TickUnit tickUnit0 = tickUnits0.getLargerTickUnit(dateTickUnit0);
      tickUnits0.getCeilingTickUnit(tickUnit0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TickUnits tickUnits0 = new TickUnits();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MINUTE;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 315);
      dateTickUnit0.equals(dateTickUnitType0);
      MockDate mockDate0 = new MockDate(315, 315, 315, 315, 315);
      MockDate.UTC(315, 0, 1, 0, 0, 0);
      dateTickUnit0.rollDate((Date) mockDate0);
      dateTickUnit0.valueToString(1.0);
      tickUnits0.add(dateTickUnit0);
      Object object0 = tickUnits0.clone();
      tickUnits0.size();
      TickUnit tickUnit0 = tickUnits0.getCeilingTickUnit((double) 1);
      tickUnits0.add(tickUnit0);
      TickUnit tickUnit1 = tickUnits0.getLargerTickUnit(tickUnit0);
      tickUnits0.size();
      tickUnits0.getCeilingTickUnit((-515.6219));
      Object object1 = tickUnits0.clone();
      tickUnits0.getLargerTickUnit(tickUnit0);
      tickUnits0.getCeilingTickUnit((double) 7731417600000L);
      tickUnits0.getCeilingTickUnit((double) 0);
      tickUnits0.getCeilingTickUnit((-515.6219));
      assertTrue(tickUnits0.equals((Object)object1));
      
      boolean boolean0 = tickUnits0.equals(tickUnit1);
      assertFalse(tickUnits0.equals((Object)object0));
      assertNotSame(tickUnits0, object0);
      assertFalse(boolean0);
  }
}
