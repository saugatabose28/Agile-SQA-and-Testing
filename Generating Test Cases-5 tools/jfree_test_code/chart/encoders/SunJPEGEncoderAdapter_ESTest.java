/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:01:03 GMT 2023
 */

package org.jfree.chart.encoders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.io.OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.encoders.SunJPEGEncoderAdapter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SunJPEGEncoderAdapter_ESTest extends SunJPEGEncoderAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SunJPEGEncoderAdapter sunJPEGEncoderAdapter0 = new SunJPEGEncoderAdapter();
      assertEquals(0.95F, sunJPEGEncoderAdapter0.getQuality(), 0.01F);
      
      sunJPEGEncoderAdapter0.setQuality(1.0F);
      assertEquals(1.0F, sunJPEGEncoderAdapter0.getQuality(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SunJPEGEncoderAdapter sunJPEGEncoderAdapter0 = new SunJPEGEncoderAdapter();
      // Undeclared exception!
      try { 
        sunJPEGEncoderAdapter0.encode((BufferedImage) null, (OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SunJPEGEncoderAdapter sunJPEGEncoderAdapter0 = new SunJPEGEncoderAdapter();
      // Undeclared exception!
      try { 
        sunJPEGEncoderAdapter0.setQuality(2164.3188F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'quality' must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.encoders.SunJPEGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SunJPEGEncoderAdapter sunJPEGEncoderAdapter0 = new SunJPEGEncoderAdapter();
      assertEquals(0.95F, sunJPEGEncoderAdapter0.getQuality(), 0.01F);
      
      sunJPEGEncoderAdapter0.setQuality(0.0F);
      float float0 = sunJPEGEncoderAdapter0.getQuality();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SunJPEGEncoderAdapter sunJPEGEncoderAdapter0 = new SunJPEGEncoderAdapter();
      // Undeclared exception!
      try { 
        sunJPEGEncoderAdapter0.setQuality((-764.18F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'quality' must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.encoders.SunJPEGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SunJPEGEncoderAdapter sunJPEGEncoderAdapter0 = new SunJPEGEncoderAdapter();
      // Undeclared exception!
      try { 
        sunJPEGEncoderAdapter0.encode((BufferedImage) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bufferedImage' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SunJPEGEncoderAdapter sunJPEGEncoderAdapter0 = new SunJPEGEncoderAdapter();
      float float0 = sunJPEGEncoderAdapter0.getQuality();
      assertEquals(0.95F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SunJPEGEncoderAdapter sunJPEGEncoderAdapter0 = new SunJPEGEncoderAdapter();
      boolean boolean0 = sunJPEGEncoderAdapter0.isEncodingAlpha();
      assertEquals(0.95F, sunJPEGEncoderAdapter0.getQuality(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SunJPEGEncoderAdapter sunJPEGEncoderAdapter0 = new SunJPEGEncoderAdapter();
      sunJPEGEncoderAdapter0.setEncodingAlpha(true);
      assertEquals(0.95F, sunJPEGEncoderAdapter0.getQuality(), 0.01F);
  }
}
