/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:38:11 GMT 2023
 */

package org.jfree.chart.encoders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.SampleModel;
import java.awt.image.WritableRaster;
import java.io.OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.encoders.EncoderUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EncoderUtil_ESTest extends EncoderUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "png", outputStream0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "png", outputStream0, (-5036.444F), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "png", outputStream0, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "png", outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WritableRaster writableRaster0 = mock(WritableRaster.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn(writableRaster0).when(bufferedImage0).getRaster();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "jpeg", outputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SampleModel sampleModel0 = mock(SampleModel.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(bufferedImage0).getHeight();
      doReturn(0).when(bufferedImage0).getMinX();
      doReturn(0).when(bufferedImage0).getMinY();
      doReturn(sampleModel0).when(bufferedImage0).getSampleModel();
      doReturn(2).when(bufferedImage0).getType();
      doReturn(0).when(bufferedImage0).getWidth();
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "png", (-765.0498F), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "", 4381.134F, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - 
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((-223)).when(bufferedImage0).getType();
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "png", (-765.0498F), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -223
         //
         verifyException("javax.imageio.ImageTypeSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((WritableRaster) null).when(bufferedImage0).getRaster();
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "jpeg", 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WritableRaster writableRaster0 = mock(WritableRaster.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn(writableRaster0).when(bufferedImage0).getRaster();
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "jpeg", 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "png");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SampleModel sampleModel0 = mock(SampleModel.class, new ViolatedAssumptionAnswer());
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(bufferedImage0).getHeight();
      doReturn(0).when(bufferedImage0).getMinX();
      doReturn(0).when(bufferedImage0).getMinY();
      doReturn(sampleModel0).when(bufferedImage0).getSampleModel();
      doReturn(1).when(bufferedImage0).getType();
      doReturn(0).when(bufferedImage0).getWidth();
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "png");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((-257)).when(bufferedImage0).getType();
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "png");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -257
         //
         verifyException("javax.imageio.ImageTypeSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "oeg.jfree.chart.encoders.EncoderUtil", (OutputStream) null, 2240.5176F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - oeg.jfree.chart.encoders.EncoderUtil
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "ptl,~f}LS_ ", 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - ptl,~f}LS_ 
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - null
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn((ColorModel) null).when(bufferedImage0).getColorModel();
      doReturn((SampleModel) null).when(bufferedImage0).getSampleModel();
      doReturn(0).when(bufferedImage0).getType();
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "png", (-765.0498F), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "aD'&ov6:`P$eJxs1w", outputStream0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - aD'&ov6:`P$eJxs1w
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.encode(bufferedImage0, "+", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - +
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "", outputStream0, 1819.0F, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - 
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EncoderUtil encoderUtil0 = new EncoderUtil();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BufferedImage bufferedImage0 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EncoderUtil.writeBufferedImage(bufferedImage0, "", outputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported image format - 
         //
         verifyException("org.jfree.chart.encoders.ImageEncoderFactory", e);
      }
  }
}
