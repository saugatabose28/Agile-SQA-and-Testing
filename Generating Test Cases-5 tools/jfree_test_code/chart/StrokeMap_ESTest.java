/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:57:58 GMT 2023
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Stroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.StrokeMap;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrokeMap_ESTest extends StrokeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StrokeMap strokeMap0 = new StrokeMap();
      Comparable<StrokeMap> comparable0 = (Comparable<StrokeMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any(org.jfree.chart.StrokeMap.class));
      Object object0 = strokeMap0.clone();
      assertTrue(object0.equals((Object)strokeMap0));
      
      strokeMap0.put(comparable0, (Stroke) null);
      boolean boolean0 = strokeMap0.equals(object0);
      assertFalse(boolean0);
      assertFalse(object0.equals((Object)strokeMap0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StrokeMap strokeMap0 = new StrokeMap();
      BasicStroke basicStroke0 = new BasicStroke(0.0F);
      strokeMap0.put("", basicStroke0);
      BasicStroke basicStroke1 = (BasicStroke)strokeMap0.getStroke("");
      assertEquals(0, basicStroke1.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StrokeMap strokeMap0 = new StrokeMap();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      strokeMap0.put(comparable0, (Stroke) null);
      Integer integer0 = Integer.valueOf(0);
      // Undeclared exception!
      try { 
        strokeMap0.put(integer0, (Stroke) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.lang.Comparable$MockitoMock$2045702952 cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrokeMap strokeMap0 = new StrokeMap();
      // Undeclared exception!
      try { 
        strokeMap0.getStroke((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrokeMap strokeMap0 = new StrokeMap();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      BasicStroke basicStroke0 = new BasicStroke(1792.535F, 0, 0);
      strokeMap0.put(comparable0, basicStroke0);
      // Undeclared exception!
      try { 
        strokeMap0.getStroke(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.lang.Comparable$MockitoMock$2045702952 cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrokeMap strokeMap0 = new StrokeMap();
      strokeMap0.put("", (Stroke) null);
      Object object0 = strokeMap0.clone();
      boolean boolean0 = strokeMap0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, strokeMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StrokeMap strokeMap0 = new StrokeMap();
      strokeMap0.put("", (Stroke) null);
      Object object0 = strokeMap0.clone();
      assertTrue(object0.equals((Object)strokeMap0));
      
      strokeMap0.clear();
      boolean boolean0 = strokeMap0.equals(object0);
      assertFalse(object0.equals((Object)strokeMap0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StrokeMap strokeMap0 = new StrokeMap();
      boolean boolean0 = strokeMap0.equals(strokeMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrokeMap strokeMap0 = new StrokeMap();
      boolean boolean0 = strokeMap0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrokeMap strokeMap0 = new StrokeMap();
      strokeMap0.put("", (Stroke) null);
      boolean boolean0 = strokeMap0.containsKey("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StrokeMap strokeMap0 = new StrokeMap();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = strokeMap0.containsKey(comparable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StrokeMap strokeMap0 = new StrokeMap();
      Stroke stroke0 = strokeMap0.getStroke(0);
      assertNull(stroke0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrokeMap strokeMap0 = new StrokeMap();
      BasicStroke basicStroke0 = new BasicStroke();
      // Undeclared exception!
      try { 
        strokeMap0.put((Comparable) null, basicStroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
