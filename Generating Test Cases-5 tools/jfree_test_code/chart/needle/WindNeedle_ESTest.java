/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:09:39 GMT 2023
 */

package org.jfree.chart.needle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.needle.WindNeedle;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WindNeedle_ESTest extends WindNeedle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      WindNeedle windNeedle0 = new WindNeedle();
      windNeedle0.hashCode();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      WindNeedle windNeedle0 = new WindNeedle();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      doReturn(0.0).when(rectangle2D0).getWidth();
      windNeedle0.drawNeedle((Graphics2D) null, rectangle2D0, (Point2D) null, 0.0);
      assertEquals(0.5, windNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WindNeedle windNeedle0 = new WindNeedle();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Color) null).when(graphics2D0).getColor();
      doReturn((Stroke) null).when(graphics2D0).getStroke();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getMinX();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getMinY();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      windNeedle0.draw(graphics2D0, rectangle2D0, point2D0, 0.0);
      assertEquals(5, windNeedle0.getSize());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WindNeedle windNeedle0 = new WindNeedle();
      windNeedle0.equals(windNeedle0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      WindNeedle windNeedle0 = new WindNeedle();
      windNeedle0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      WindNeedle windNeedle0 = new WindNeedle();
      WindNeedle windNeedle1 = new WindNeedle();
      windNeedle0.setRotateX((-978.849));
      windNeedle1.equals(windNeedle0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      WindNeedle windNeedle0 = new WindNeedle();
      WindNeedle windNeedle1 = new WindNeedle();
      windNeedle0.equals(windNeedle1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      WindNeedle windNeedle0 = new WindNeedle();
      // Undeclared exception!
      try { 
        windNeedle0.drawNeedle((Graphics2D) null, (Rectangle2D) null, (Point2D) null, 1894);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.ArrowNeedle", e);
      }
  }
}
