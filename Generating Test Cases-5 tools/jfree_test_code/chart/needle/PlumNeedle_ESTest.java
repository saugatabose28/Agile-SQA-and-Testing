/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:14:54 GMT 2023
 */

package org.jfree.chart.needle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.needle.PlumNeedle;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlumNeedle_ESTest extends PlumNeedle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(point2D0).getX();
      doReturn(0.0).when(point2D0).getY();
      plumNeedle0.drawNeedle((Graphics2D) null, rectangle0, point2D0, 0.5);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      intArray0[0] = 127;
      Polygon polygon0 = new Polygon(intArray0, intArray0, 2);
      Rectangle rectangle0 = polygon0.getBounds();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(point2D0).getX();
      doReturn(0.0).when(point2D0).getY();
      plumNeedle0.drawNeedle(graphics2D0, rectangle0, point2D0, (-1631));
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      Object object0 = plumNeedle0.clone();
      boolean boolean0 = plumNeedle0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      boolean boolean0 = plumNeedle0.equals("org.jfree.chart.needle.MeterNeedle");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      boolean boolean0 = plumNeedle0.equals(plumNeedle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Color) null).when(graphics2D0).getColor();
      doReturn((Stroke) null).when(graphics2D0).getStroke();
      int[] intArray0 = new int[1];
      Polygon polygon0 = new Polygon(intArray0, intArray0, 0);
      Rectangle rectangle0 = polygon0.getBounds();
      plumNeedle0.draw(graphics2D0, (Rectangle2D) rectangle0);
      assertTrue(rectangle0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      plumNeedle0.drawNeedle(graphics2D0, rectangle2D0, (Point2D) null, (-503));
      assertEquals(0.5, plumNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      Object object0 = plumNeedle0.clone();
      assertTrue(object0.equals((Object)plumNeedle0));
      
      plumNeedle0.setSize((-503));
      boolean boolean0 = plumNeedle0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PlumNeedle plumNeedle0 = new PlumNeedle();
      plumNeedle0.hashCode();
  }
}
