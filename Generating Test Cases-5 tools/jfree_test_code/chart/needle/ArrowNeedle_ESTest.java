/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:41:00 GMT 2023
 */

package org.jfree.chart.needle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.needle.ArrowNeedle;
import org.jfree.chart.needle.MeterNeedle;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrowNeedle_ESTest extends ArrowNeedle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      assertNotNull(arrowNeedle0);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      arrowNeedle0.defaultDisplay(graphics2D0, shape0);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      ArrowNeedle arrowNeedle1 = (ArrowNeedle)arrowNeedle0.clone();
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle1, arrowNeedle0);
      assertNotNull(arrowNeedle1);
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle0));
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      
      ArrowNeedle arrowNeedle2 = (ArrowNeedle)arrowNeedle0.clone();
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertNotSame(arrowNeedle2, arrowNeedle1);
      assertNotSame(arrowNeedle2, arrowNeedle0);
      assertNotNull(arrowNeedle2);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertTrue(arrowNeedle2.equals((Object)arrowNeedle0));
      assertTrue(arrowNeedle2.equals((Object)arrowNeedle1));
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle2.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle2.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle2.getSize());
      
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(color0).when(graphics2D1).getColor();
      doReturn(stroke0).when(graphics2D1).getStroke();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-2459.609)).when(rectangle2D0).getHeight();
      doReturn(723.0).when(rectangle2D0).getMaxY();
      doReturn(723.0, (-1053.46326867)).when(rectangle2D0).getMinX();
      doReturn(1410.88827, 1410.88827).when(rectangle2D0).getMinY();
      doReturn((-1441.0), (-2459.609)).when(rectangle2D0).getWidth();
      arrowNeedle0.setRotateY(1.0);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertFalse(arrowNeedle0.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle0.equals((Object)arrowNeedle2));
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(1.0, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      arrowNeedle0.draw(graphics2D1, rectangle2D0);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertFalse(arrowNeedle0.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle0.equals((Object)arrowNeedle2));
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(1.0, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      boolean boolean0 = arrowNeedle0.equals(arrowNeedle0);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertTrue(boolean0);
      assertFalse(arrowNeedle0.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle0.equals((Object)arrowNeedle2));
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(1.0, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(false);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      arrowNeedle0.setOutlineStroke((Stroke) null);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      AffineTransform affineTransform0 = MeterNeedle.transform;
      assertNull(affineTransform0);
      
      MeterNeedle.transform = null;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-495.949309474055)).when(rectangle2D0).getMaxY();
      doReturn((-495.949309474055)).when(rectangle2D0).getMinX();
      doReturn((-495.949309474055)).when(rectangle2D0).getMinY();
      doReturn((-495.949309474055)).when(rectangle2D0).getWidth();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      doReturn(15.523124173516507).when(point2D0).getX();
      doReturn(804.4).when(point2D0).getY();
      // Undeclared exception!
      try { 
        arrowNeedle0.drawNeedle(graphics2D0, rectangle2D0, point2D0, 3555.2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.ArrowNeedle", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(false);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-986.06933)).when(rectangle2D0).getMaxY();
      doReturn((-986.06933)).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      doReturn(0.0).when(rectangle2D0).getWidth();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      doReturn((-986.06933)).when(point2D0).getX();
      doReturn(0.0).when(point2D0).getY();
      // Undeclared exception!
      try { 
        arrowNeedle0.drawNeedle(graphics2D0, rectangle2D0, point2D0, 2043.25288576185);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.ArrowNeedle", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(2.0).when(rectangle2D0).getMinX();
      doReturn(2.0).when(rectangle2D0).getMinY();
      doReturn((-1669.90731936956)).when(rectangle2D0).getWidth();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(point2D0).getX();
      doReturn(2.0).when(point2D0).getY();
      // Undeclared exception!
      try { 
        arrowNeedle0.drawNeedle(graphics2D0, rectangle2D0, point2D0, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.ArrowNeedle", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      
      ArrowNeedle arrowNeedle1 = new ArrowNeedle(false);
      assertNotNull(arrowNeedle1);
      assertFalse(arrowNeedle1.equals((Object)arrowNeedle0));
      assertEquals(0.5, arrowNeedle1.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      
      boolean boolean0 = arrowNeedle0.equals(arrowNeedle1);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle1, arrowNeedle0);
      assertFalse(boolean0);
      assertFalse(arrowNeedle0.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle1.equals((Object)arrowNeedle0));
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      
      AffineTransform affineTransform0 = MeterNeedle.transform;
      assertNull(affineTransform0);
      
      MeterNeedle.transform = null;
      arrowNeedle0.setRotateY(1.0);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(1.0, arrowNeedle0.getRotateY(), 0.01);
      
      ArrowNeedle arrowNeedle1 = (ArrowNeedle)arrowNeedle0.clone();
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle1, arrowNeedle0);
      assertNotNull(arrowNeedle1);
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle0));
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(1.0, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      assertEquals(1.0, arrowNeedle1.getRotateY(), 0.01);
      
      boolean boolean0 = arrowNeedle0.equals(arrowNeedle1);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle1, arrowNeedle0);
      assertTrue(boolean0);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle0));
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(1.0, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      assertEquals(1.0, arrowNeedle1.getRotateY(), 0.01);
      
      ArrowNeedle arrowNeedle2 = new ArrowNeedle(true);
      assertNotNull(arrowNeedle2);
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle0));
      assertEquals(0.5, arrowNeedle2.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle2.getSize());
      assertEquals(0.5, arrowNeedle2.getRotateX(), 0.01);
      
      boolean boolean1 = arrowNeedle0.equals(arrowNeedle2);
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle2, arrowNeedle1);
      assertNotSame(arrowNeedle2, arrowNeedle0);
      assertFalse(boolean1);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle0.equals((Object)arrowNeedle2));
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(1.0, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle2.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle2.getSize());
      assertEquals(0.5, arrowNeedle2.getRotateX(), 0.01);
      
      arrowNeedle0.hashCode();
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle0.equals((Object)arrowNeedle2));
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(1.0, arrowNeedle0.getRotateY(), 0.01);
      
      arrowNeedle2.hashCode();
      assertNotSame(arrowNeedle2, arrowNeedle1);
      assertNotSame(arrowNeedle2, arrowNeedle0);
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle0));
      assertEquals(0.5, arrowNeedle2.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle2.getSize());
      assertEquals(0.5, arrowNeedle2.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(false);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      
      boolean boolean0 = arrowNeedle0.equals("8:t7H;q{SC}.kZg91");
      assertFalse(boolean0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(false);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      ArrowNeedle arrowNeedle1 = (ArrowNeedle)arrowNeedle0.clone();
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle1, arrowNeedle0);
      assertNotNull(arrowNeedle1);
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle0));
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      assertEquals(0.5, arrowNeedle1.getRotateY(), 0.01);
      
      arrowNeedle0.hashCode();
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      ArrowNeedle arrowNeedle2 = (ArrowNeedle)arrowNeedle0.clone();
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle2, arrowNeedle1);
      assertNotSame(arrowNeedle2, arrowNeedle0);
      assertNotNull(arrowNeedle2);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertTrue(arrowNeedle2.equals((Object)arrowNeedle0));
      assertTrue(arrowNeedle2.equals((Object)arrowNeedle1));
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle2.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle2.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle2.getSize());
      
      boolean boolean0 = arrowNeedle0.equals(arrowNeedle2);
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle2, arrowNeedle1);
      assertNotSame(arrowNeedle2, arrowNeedle0);
      assertTrue(boolean0);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle2));
      assertTrue(arrowNeedle2.equals((Object)arrowNeedle0));
      assertTrue(arrowNeedle2.equals((Object)arrowNeedle1));
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle2.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle2.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle2.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(false);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Color) null).when(graphics2D0).getColor();
      doReturn((Stroke) null).when(graphics2D0).getStroke();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0, 0.0).when(rectangle2D0).getMinX();
      doReturn(0.0, 0.0).when(rectangle2D0).getMinY();
      doReturn(0.0, 0.0).when(rectangle2D0).getWidth();
      // Undeclared exception!
      try { 
        arrowNeedle0.draw(graphics2D0, rectangle2D0, 96.5022301361555);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.ArrowNeedle", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(false);
      assertNotNull(arrowNeedle0);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      doReturn(0.0).when(rectangle2D0).getWidth();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      arrowNeedle0.drawNeedle(graphics2D0, rectangle2D0, point2D0, 0.0);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(false);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      Paint paint0 = arrowNeedle0.getFillPaint();
      assertNull(paint0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      arrowNeedle0.setFillPaint((Paint) null);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      doReturn(0.0).when(rectangle2D0).getWidth();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      arrowNeedle0.defaultDisplay((Graphics2D) null, shape0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      arrowNeedle0.drawNeedle((Graphics2D) null, rectangle2D0, (Point2D) null, 0.0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D1).getMaxY();
      doReturn(0.0).when(rectangle2D1).getMinX();
      doReturn(0.0).when(rectangle2D1).getMinY();
      doReturn(0.0).when(rectangle2D1).getWidth();
      arrowNeedle0.drawNeedle((Graphics2D) null, rectangle2D1, (Point2D) null, 0.0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      arrowNeedle0.hashCode();
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      arrowNeedle0.hashCode();
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D2).getMaxY();
      doReturn(0.0).when(rectangle2D2).getMinX();
      doReturn(0.0).when(rectangle2D2).getMinY();
      doReturn(0.0).when(rectangle2D2).getWidth();
      arrowNeedle0.drawNeedle((Graphics2D) null, rectangle2D2, (Point2D) null, 0.0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      ArrowNeedle arrowNeedle1 = (ArrowNeedle)arrowNeedle0.clone();
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle1, arrowNeedle0);
      assertNotNull(arrowNeedle1);
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle0));
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      assertEquals(0.5, arrowNeedle1.getRotateY(), 0.01);
      
      ArrowNeedle arrowNeedle2 = (ArrowNeedle)arrowNeedle0.clone();
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle2, arrowNeedle1);
      assertNotSame(arrowNeedle2, arrowNeedle0);
      assertNotNull(arrowNeedle2);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertTrue(arrowNeedle2.equals((Object)arrowNeedle0));
      assertTrue(arrowNeedle2.equals((Object)arrowNeedle1));
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle2.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle2.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle2.getSize());
      
      arrowNeedle0.hashCode();
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle2));
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      arrowNeedle0.hashCode();
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle2));
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      boolean boolean0 = arrowNeedle0.equals(arrowNeedle1);
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle1, arrowNeedle2);
      assertNotSame(arrowNeedle1, arrowNeedle0);
      assertTrue(boolean0);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle2));
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle0));
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle2));
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      assertEquals(0.5, arrowNeedle1.getRotateY(), 0.01);
      
      arrowNeedle0.hashCode();
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle2));
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      // Undeclared exception!
      try { 
        arrowNeedle0.drawNeedle((Graphics2D) null, (Rectangle2D) null, (Point2D) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.ArrowNeedle", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      assertNotNull(arrowNeedle0);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      
      ArrowNeedle arrowNeedle1 = (ArrowNeedle)arrowNeedle0.clone();
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle1, arrowNeedle0);
      assertNotNull(arrowNeedle1);
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle0));
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateY(), 0.01);
      
      arrowNeedle0.hashCode();
      arrowNeedle0.equals(arrowNeedle1);
      arrowNeedle0.setRotateX(0.0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      AffineTransform affineTransform0 = MeterNeedle.transform;
      assertNotNull(affineTransform0);
      
      MeterNeedle.transform = null;
      ArrowNeedle arrowNeedle2 = (ArrowNeedle)arrowNeedle0.clone();
      arrowNeedle2.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D1).getMaxY();
      doReturn((-1.0)).when(rectangle2D1).getMinX();
      doReturn((-1.0)).when(rectangle2D1).getMinY();
      doReturn(0.0).when(rectangle2D1).getWidth();
      Point2D point2D1 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      arrowNeedle0.drawNeedle(graphics2D0, rectangle2D1, point2D1, 0.0);
      arrowNeedle0.hashCode();
      arrowNeedle0.hashCode();
      arrowNeedle0.equals((Object) null);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-5089.96339)).when(rectangle2D2).getMaxY();
      doReturn((-1875.54434965)).when(rectangle2D2).getMinX();
      doReturn((-5089.96339)).when(rectangle2D2).getMinY();
      doReturn((-5089.96339)).when(rectangle2D2).getWidth();
      Point2D point2D2 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      arrowNeedle0.drawNeedle(graphics2D1, rectangle2D2, point2D2, 0.0);
      arrowNeedle1.clone();
      assertFalse(arrowNeedle0.equals((Object)arrowNeedle1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      assertNotNull(arrowNeedle0);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      ArrowNeedle arrowNeedle1 = new ArrowNeedle(true);
      assertNotNull(arrowNeedle1);
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle0));
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      assertEquals(0.5, arrowNeedle1.getRotateY(), 0.01);
      
      boolean boolean0 = arrowNeedle0.equals(arrowNeedle1);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle1, arrowNeedle0);
      assertTrue(boolean0);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle0));
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      assertEquals(0.5, arrowNeedle1.getRotateY(), 0.01);
      
      boolean boolean1 = arrowNeedle1.equals(arrowNeedle0);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle1, arrowNeedle0);
      assertTrue(boolean1);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle0));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      assertEquals(0.5, arrowNeedle1.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      assertNotNull(arrowNeedle0);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      
      boolean boolean0 = arrowNeedle0.equals("");
      assertFalse(boolean0);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      doReturn(0.0).when(rectangle2D0).getWidth();
      arrowNeedle0.drawNeedle(graphics2D0, rectangle2D0, (Point2D) null, (-463.9716050100625));
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      Paint paint0 = arrowNeedle0.getHighlightPaint();
      assertNull(paint0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      arrowNeedle0.setFillPaint((Paint) null);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      
      ArrowNeedle arrowNeedle1 = (ArrowNeedle)arrowNeedle0.clone();
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle1, arrowNeedle0);
      assertNotNull(arrowNeedle1);
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle0));
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      assertEquals(0.5, arrowNeedle1.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(false);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      doReturn(0.0).when(rectangle2D0).getWidth();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(point2D0).getX();
      doReturn(0.0).when(point2D0).getY();
      // Undeclared exception!
      try { 
        arrowNeedle0.drawNeedle(graphics2D0, rectangle2D0, point2D0, (-2046.27601438143));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.ArrowNeedle", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Point2D point2D1 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Point2D point2D2 = mock(Point2D.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      
      arrowNeedle0.hashCode();
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = false;
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(false);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ArrowNeedle arrowNeedle1 = (ArrowNeedle)arrowNeedle0.clone();
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle1, arrowNeedle0);
      assertNotNull(arrowNeedle1);
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle0));
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      
      Point2D point2D1 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        arrowNeedle0.drawNeedle(graphics2D1, (Rectangle2D) null, point2D1, 1937.9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.ArrowNeedle", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(false);
      assertNotNull(arrowNeedle0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      arrowNeedle0.defaultDisplay(graphics2D0, (Shape) null);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      
      Paint paint0 = arrowNeedle0.getFillPaint();
      assertNull(paint0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      
      arrowNeedle0.setHighlightPaint((Paint) null);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      
      ArrowNeedle arrowNeedle1 = (ArrowNeedle)arrowNeedle0.clone();
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle1, arrowNeedle0);
      assertNotNull(arrowNeedle1);
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle0));
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle1.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      
      boolean boolean0 = arrowNeedle0.equals(arrowNeedle1);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle1, arrowNeedle0);
      assertTrue(boolean0);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertTrue(arrowNeedle1.equals((Object)arrowNeedle0));
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle1.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle1.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle1.getSize());
      
      ArrowNeedle arrowNeedle2 = new ArrowNeedle(true);
      assertNotNull(arrowNeedle2);
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle0));
      assertEquals(0.5, arrowNeedle2.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle2.getSize());
      assertEquals(0.5, arrowNeedle2.getRotateY(), 0.01);
      
      boolean boolean1 = arrowNeedle0.equals(arrowNeedle2);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertNotSame(arrowNeedle2, arrowNeedle1);
      assertNotSame(arrowNeedle2, arrowNeedle0);
      assertFalse(boolean1);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle0.equals((Object)arrowNeedle2));
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle2.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle2.getSize());
      assertEquals(0.5, arrowNeedle2.getRotateY(), 0.01);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      arrowNeedle2.setRotateX((-1005.5147940375));
      assertNotSame(arrowNeedle2, arrowNeedle1);
      assertNotSame(arrowNeedle2, arrowNeedle0);
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle0));
      assertEquals(5, arrowNeedle2.getSize());
      assertEquals((-1005.5147940375), arrowNeedle2.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle2.getRotateY(), 0.01);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1005.5147940375)).when(rectangle2D0).getMaxY();
      doReturn((-2404.2)).when(rectangle2D0).getMinX();
      doReturn((-2342.0202069395564)).when(rectangle2D0).getMinY();
      doReturn((-2404.2)).when(rectangle2D0).getWidth();
      boolean boolean2 = arrowNeedle2.equals(arrowNeedle0);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertNotSame(arrowNeedle2, arrowNeedle1);
      assertNotSame(arrowNeedle2, arrowNeedle0);
      assertFalse(boolean2);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle0.equals((Object)arrowNeedle2));
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(5, arrowNeedle2.getSize());
      assertEquals((-1005.5147940375), arrowNeedle2.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle2.getRotateY(), 0.01);
      
      arrowNeedle2.drawNeedle(graphics2D1, rectangle2D0, (Point2D) null, 1.0);
      assertNotSame(arrowNeedle2, arrowNeedle1);
      assertNotSame(arrowNeedle2, arrowNeedle0);
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle2.equals((Object)arrowNeedle0));
      assertEquals(5, arrowNeedle2.getSize());
      assertEquals((-1005.5147940375), arrowNeedle2.getRotateX(), 0.01);
      assertEquals(0.5, arrowNeedle2.getRotateY(), 0.01);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-947.2165057839527)).when(rectangle2D1).getMaxY();
      doReturn(1.0).when(rectangle2D1).getMinX();
      doReturn(1.0).when(rectangle2D1).getMinY();
      doReturn((-2404.2)).when(rectangle2D1).getWidth();
      arrowNeedle0.drawNeedle(graphics2D2, rectangle2D1, (Point2D) null, 0.0);
      assertNotSame(arrowNeedle0, arrowNeedle1);
      assertNotSame(arrowNeedle0, arrowNeedle2);
      assertTrue(arrowNeedle0.equals((Object)arrowNeedle1));
      assertFalse(arrowNeedle0.equals((Object)arrowNeedle2));
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01);
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01);
      assertEquals(5, arrowNeedle0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(6.998770300497261).when(rectangle2D0).getMaxY();
      doReturn((-1643.029953225416)).when(rectangle2D0).getMinX();
      doReturn(6.998770300497261).when(rectangle2D0).getMinY();
      doReturn(6.998770300497261).when(rectangle2D0).getWidth();
      Point2D point2D0 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      arrowNeedle0.drawNeedle(graphics2D0, rectangle2D0, point2D0, 0.0);
      arrowNeedle0.setRotateX(0.0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = arrowNeedle0.getOutlineStroke();
      arrowNeedle0.setOutlineStroke(stroke0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(1542.1).when(rectangle2D1).getMaxY();
      doReturn(0.0).when(rectangle2D1).getMinX();
      doReturn(0.0).when(rectangle2D1).getMinY();
      doReturn(0.0).when(rectangle2D1).getWidth();
      Point2D point2D1 = mock(Point2D.class, new ViolatedAssumptionAnswer());
      arrowNeedle0.drawNeedle(graphics2D1, rectangle2D1, point2D1, 0.0);
      Object object0 = arrowNeedle0.clone();
      arrowNeedle0.equals(arrowNeedle0);
      object0.hashCode();
      arrowNeedle0.equals(arrowNeedle0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Point2D point2D2 = mock(Point2D.class, new ViolatedAssumptionAnswer());
  }
}
