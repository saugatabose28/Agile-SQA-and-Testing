/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:06:17 GMT 2023
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Paint;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PieLabelLinkStyle;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.BarPainter;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.xy.XYBarPainter;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.ui.RectangleInsets;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardChartTheme_ESTest extends StandardChartTheme_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("1Qw]e;-C0b");
      // Undeclared exception!
      try { 
        standardChartTheme0.setXYBarPainter((XYBarPainter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'painter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("<)XZz:=IJ\"XM", true);
      XYItemRenderer xYItemRenderer0 = mock(XYItemRenderer.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToXYItemRenderer(xYItemRenderer0);
      standardChartTheme0.getThermometerPaint();
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null).when(plot0).getBackgroundPaint();
      doReturn((DrawingSupplier) null).when(plot0).getDrawingSupplier();
      standardChartTheme0.applyToPlot(plot0);
      Font font0 = standardChartTheme0.getSmallFont();
      standardChartTheme0.setExtraLargeFont(font0);
      SymbolAxis symbolAxis0 = mock(SymbolAxis.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToSymbolAxis(symbolAxis0);
      standardChartTheme0.getSubtitlePaint();
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToCategoryAxis((CategoryAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("H:SbbfMTm");
      XYItemRenderer xYItemRenderer0 = mock(XYItemRenderer.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToXYItemRenderer(xYItemRenderer0);
      Font font0 = standardChartTheme0.getExtraLargeFont();
      standardChartTheme0.setLargeFont(font0);
      XYItemRenderer xYItemRenderer1 = mock(XYItemRenderer.class, new ViolatedAssumptionAnswer());
      Paint paint0 = standardChartTheme0.getItemLabelPaint();
      standardChartTheme0.setCrosshairPaint(paint0);
      standardChartTheme0.applyToXYItemRenderer(xYItemRenderer1);
      standardChartTheme0.getLabelLinkStyle();
      XYBarPainter xYBarPainter0 = standardChartTheme0.getXYBarPainter();
      standardChartTheme0.setXYBarPainter(xYBarPainter0);
      standardChartTheme0.getDrawingSupplier();
      Paint paint1 = standardChartTheme0.getTitlePaint();
      standardChartTheme0.setLabelLinkPaint(paint1);
      standardChartTheme0.setSmallFont(font0);
      standardChartTheme0.getName();
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToTitle(title0);
      standardChartTheme0.getXYBarPainter();
      Paint paint2 = standardChartTheme0.getShadowPaint();
      standardChartTheme0.setDomainGridlinePaint(paint2);
      FastScatterPlot fastScatterPlot0 = mock(FastScatterPlot.class, new ViolatedAssumptionAnswer());
      doReturn((ValueAxis) null).when(fastScatterPlot0).getDomainAxis();
      doReturn((ValueAxis) null).when(fastScatterPlot0).getRangeAxis();
      standardChartTheme0.applyToFastScatterPlot(fastScatterPlot0);
      standardChartTheme0.getItemLabelPaint();
      standardChartTheme0.setLegendItemPaint(paint1);
      standardChartTheme0.setAxisOffset(fastScatterPlot0.DEFAULT_INSETS);
      Paint paint3 = standardChartTheme0.getGridBandAlternatePaint();
      SymbolAxis symbolAxis0 = mock(SymbolAxis.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToSymbolAxis(symbolAxis0);
      standardChartTheme0.setLegendItemPaint(paint3);
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(xYPlot0).getAnnotations();
      doReturn(0).when(xYPlot0).getDomainAxisCount();
      doReturn(0).when(xYPlot0).getRangeAxisCount();
      doReturn(0).when(xYPlot0).getRendererCount();
      standardChartTheme0.applyToXYPlot(xYPlot0);
      standardChartTheme0.setLabelLinkPaint(paint3);
      standardChartTheme0.getSmallFont();
      standardChartTheme0.setSmallFont(symbolAxis0.DEFAULT_AXIS_LABEL_FONT);
      standardChartTheme0.getXYBarPainter();
      standardChartTheme0.getPlotBackgroundPaint();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      Paint paint0 = standardChartTheme0.getRangeGridlinePaint();
      standardChartTheme0.setLegendBackgroundPaint(paint0);
      Paint paint1 = standardChartTheme0.getShadowPaint();
      PieLabelLinkStyle pieLabelLinkStyle0 = standardChartTheme0.getLabelLinkStyle();
      standardChartTheme0.setLabelLinkStyle(pieLabelLinkStyle0);
      standardChartTheme0.setPlotOutlinePaint(paint1);
      standardChartTheme0.getPlotOutlinePaint();
      SymbolAxis symbolAxis0 = mock(SymbolAxis.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToSymbolAxis(symbolAxis0);
      standardChartTheme0.getTickLabelPaint();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Plot) null).when(jFreeChart0).getPlot();
      doReturn(0).when(jFreeChart0).getSubtitleCount();
      doReturn((TextTitle) null).when(jFreeChart0).getTitle();
      standardChartTheme0.apply(jFreeChart0);
      standardChartTheme0.clone();
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer0).getBlocks();
      standardChartTheme0.applyToBlockContainer(blockContainer0);
      standardChartTheme0.setDomainGridlinePaint(symbolAxis0.DEFAULT_AXIS_LABEL_PAINT);
      standardChartTheme0.clone();
      standardChartTheme0.setSmallFont(symbolAxis0.DEFAULT_TICK_LABEL_FONT);
      standardChartTheme0.getPlotOutlinePaint();
      standardChartTheme0.setGridBandAlternatePaint(symbolAxis0.DEFAULT_GRID_BAND_PAINT);
      standardChartTheme0.isShadowVisible();
      standardChartTheme0.getLabelLinkStyle();
      standardChartTheme0.getItemLabelPaint();
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(xYPlot0).getAnnotations();
      doReturn(0).when(xYPlot0).getDomainAxisCount();
      doReturn(0).when(xYPlot0).getRangeAxisCount();
      doReturn(0).when(xYPlot0).getRendererCount();
      standardChartTheme0.applyToXYPlot(xYPlot0);
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToValueAxis(valueAxis0);
      standardChartTheme0.getErrorIndicatorPaint();
      SymbolAxis symbolAxis1 = mock(SymbolAxis.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToSymbolAxis(symbolAxis1);
      standardChartTheme0.getCrosshairPaint();
      standardChartTheme0.getName();
      standardChartTheme0.setExtraLargeFont(jFreeChart0.DEFAULT_TITLE_FONT);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "c&t";
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("c&t", true);
      AbstractRenderer abstractRenderer0 = mock(AbstractRenderer.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(abstractRenderer0).getAutoPopulateSeriesPaint();
      doReturn(false).when(abstractRenderer0).getAutoPopulateSeriesStroke();
      standardChartTheme0.setRangeGridlinePaint(abstractRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      standardChartTheme0.setRegularFont(abstractRenderer0.DEFAULT_VALUE_LABEL_FONT);
      standardChartTheme0.applyToAbstractRenderer(abstractRenderer0);
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToCategoryPlot((CategoryPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("JFreeChartEntity: ");
      // Undeclared exception!
      try { 
        standardChartTheme0.setLabelLinkStyle((PieLabelLinkStyle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'style' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", false);
      Paint paint0 = standardChartTheme0.getChartBackgroundPaint();
      PolarPlot polarPlot0 = mock(PolarPlot.class, new ViolatedAssumptionAnswer());
      doReturn((ValueAxis) null).when(polarPlot0).getAxis();
      standardChartTheme0.applyToPolarPlot(polarPlot0);
      standardChartTheme0.setCrosshairPaint(paint0);
      PieLabelLinkStyle pieLabelLinkStyle0 = standardChartTheme0.getLabelLinkStyle();
      standardChartTheme0.setLabelLinkStyle(pieLabelLinkStyle0);
      standardChartTheme0.setGridBandPaint(polarPlot0.DEFAULT_GRIDLINE_PAINT);
      standardChartTheme0.clone();
      XYAnnotation xYAnnotation0 = mock(XYAnnotation.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToXYAnnotation(xYAnnotation0);
      standardChartTheme0.getXYBarPainter();
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToMeterPlot((MeterPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("{9czE.bA-t]+Zi", true);
      Paint paint0 = null;
      // Undeclared exception!
      try { 
        standardChartTheme0.setErrorIndicatorPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme(">");
      Font font0 = standardChartTheme0.getLargeFont();
      standardChartTheme0.setLargeFont(font0);
      // Undeclared exception!
      try { 
        standardChartTheme0.setLegendBackgroundPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("JiUY`");
      // Undeclared exception!
      try { 
        standardChartTheme0.setCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      XYItemRenderer xYItemRenderer0 = mock(XYItemRenderer.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToXYItemRenderer(xYItemRenderer0);
      // Undeclared exception!
      try { 
        standardChartTheme0.setPlotOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "Wpp2;pbG'7Zl_zIvc^";
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Wpp2;pbG'7Zl_zIvc^", false);
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryPlot0).getDomainAxisCount();
      doReturn(0).when(categoryPlot0).getRangeAxisCount();
      doReturn(0).when(categoryPlot0).getRendererCount();
      standardChartTheme0.applyToCategoryPlot(categoryPlot0);
      // Undeclared exception!
      try { 
        standardChartTheme0.setItemLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("sT");
      Paint paint0 = standardChartTheme0.getAxisLabelPaint();
      standardChartTheme0.setDomainGridlinePaint(paint0);
      Paint paint1 = standardChartTheme0.getGridBandPaint();
      standardChartTheme0.getTitlePaint();
      standardChartTheme0.setGridBandPaint(paint1);
      BarPainter barPainter0 = standardChartTheme0.getBarPainter();
      standardChartTheme0.setBarPainter(barPainter0);
      MeterPlot meterPlot0 = mock(MeterPlot.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToMeterPlot(meterPlot0);
      MeterPlot meterPlot1 = mock(MeterPlot.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToMeterPlot(meterPlot1);
      standardChartTheme0.getChartBackgroundPaint();
      SymbolAxis symbolAxis0 = mock(SymbolAxis.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToSymbolAxis(symbolAxis0);
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToThermometerPlot((ThermometerPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.setChartBackgroundPaint(categoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      standardChartTheme0.applyToCategoryAxis(categoryAxis0);
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToBlock(block0);
      standardChartTheme0.getGridBandAlternatePaint();
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToAbstractRenderer((AbstractRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Require '");
      Paint paint0 = standardChartTheme0.getChartBackgroundPaint();
      standardChartTheme0.setLabelLinkPaint(paint0);
      standardChartTheme0.getPlotBackgroundPaint();
      standardChartTheme0.getCrosshairPaint();
      XYAnnotation xYAnnotation0 = null;
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToXYAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", false);
      ThermometerPlot thermometerPlot0 = mock(ThermometerPlot.class, new ViolatedAssumptionAnswer());
      doReturn((ValueAxis) null).when(thermometerPlot0).getRangeAxis();
      standardChartTheme0.applyToThermometerPlot(thermometerPlot0);
      standardChartTheme0.applyToBlock((Block) null);
      StandardChartTheme.createDarknessTheme();
      Paint paint0 = standardChartTheme0.getSubtitlePaint();
      AbstractRenderer abstractRenderer0 = mock(AbstractRenderer.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(abstractRenderer0).getAutoPopulateSeriesPaint();
      doReturn(false).when(abstractRenderer0).getAutoPopulateSeriesStroke();
      standardChartTheme0.applyToAbstractRenderer(abstractRenderer0);
      standardChartTheme0.setLegendBackgroundPaint(paint0);
      standardChartTheme0.setErrorIndicatorPaint(paint0);
      standardChartTheme0.setPlotOutlinePaint(paint0);
      standardChartTheme0.setErrorIndicatorPaint(paint0);
      standardChartTheme0.getTitlePaint();
      standardChartTheme0.getLegendItemPaint();
      standardChartTheme0.getTickLabelPaint();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("a", true);
      Paint paint0 = standardChartTheme0.getRangeGridlinePaint();
      standardChartTheme0.setDomainGridlinePaint(paint0);
      standardChartTheme0.getAxisOffset();
      Font font0 = standardChartTheme0.getSmallFont();
      standardChartTheme0.setExtraLargeFont(font0);
      standardChartTheme0.getBarPainter();
      PiePlot<String> piePlot0 = (PiePlot<String>) mock(PiePlot.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(piePlot0).getAutoPopulateSectionOutlinePaint();
      doReturn(false).when(piePlot0).getAutoPopulateSectionOutlineStroke();
      doReturn(false).when(piePlot0).getAutoPopulateSectionPaint();
      standardChartTheme0.applyToPiePlot(piePlot0);
      MeterPlot meterPlot0 = mock(MeterPlot.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToMeterPlot(meterPlot0);
      PieLabelLinkStyle pieLabelLinkStyle0 = standardChartTheme0.getLabelLinkStyle();
      standardChartTheme0.setLabelLinkStyle(pieLabelLinkStyle0);
      standardChartTheme0.setPlotBackgroundPaint(piePlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      standardChartTheme0.getLabelLinkStyle();
      Paint paint1 = standardChartTheme0.getGridBandAlternatePaint();
      standardChartTheme0.setGridBandAlternatePaint(paint1);
      standardChartTheme0.setItemLabelPaint(paint0);
      BarPainter barPainter0 = standardChartTheme0.getBarPainter();
      standardChartTheme0.getChartBackgroundPaint();
      standardChartTheme0.getChartBackgroundPaint();
      standardChartTheme0.setBarPainter(barPainter0);
      standardChartTheme0.setTitlePaint(piePlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      // Undeclared exception!
      try { 
        standardChartTheme0.setThermometerPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.axis.CyclicNumberAxis");
      Paint paint0 = standardChartTheme0.getItemLabelPaint();
      standardChartTheme0.setLegendItemPaint(paint0);
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToValueAxis((ValueAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      standardChartTheme0.getLargeFont();
      Paint paint0 = standardChartTheme0.getBaselinePaint();
      standardChartTheme0.setTickLabelPaint(paint0);
      Paint paint1 = standardChartTheme0.getAxisLabelPaint();
      standardChartTheme0.setItemLabelPaint(paint1);
      standardChartTheme0.getDomainGridlinePaint();
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryPlot0).getDomainAxisCount();
      doReturn(0).when(categoryPlot0).getRangeAxisCount();
      doReturn(0).when(categoryPlot0).getRendererCount();
      standardChartTheme0.applyToCategoryPlot(categoryPlot0);
      standardChartTheme0.setPlotOutlinePaint(categoryPlot0.DEFAULT_BACKGROUND_PAINT);
      standardChartTheme0.getItemLabelPaint();
      Font font0 = standardChartTheme0.getLargeFont();
      standardChartTheme0.setLargeFont(font0);
      standardChartTheme0.getLabelLinkStyle();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("i}vfbxzz");
      Font font0 = standardChartTheme0.getExtraLargeFont();
      standardChartTheme0.setSmallFont(font0);
      AbstractRenderer abstractRenderer0 = mock(AbstractRenderer.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(abstractRenderer0).getAutoPopulateSeriesPaint();
      doReturn(false).when(abstractRenderer0).getAutoPopulateSeriesStroke();
      standardChartTheme0.applyToAbstractRenderer(abstractRenderer0);
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToBlock(block0);
      Block block1 = mock(Block.class, new ViolatedAssumptionAnswer());
      StandardChartTheme.createLegacyTheme();
      standardChartTheme0.applyToBlock(block1);
      standardChartTheme0.getThermometerPaint();
      standardChartTheme0.getLabelLinkPaint();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = null;
      try {
        standardChartTheme0 = new StandardChartTheme((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'name' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      XYAnnotation xYAnnotation0 = mock(XYAnnotation.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Plot) null).when(jFreeChart0).getPlot();
      doReturn(0).when(jFreeChart0).getSubtitleCount();
      doReturn((TextTitle) null).when(jFreeChart0).getTitle();
      standardChartTheme0.apply(jFreeChart0);
      RectangleInsets rectangleInsets0 = standardChartTheme0.getAxisOffset();
      standardChartTheme0.setAxisOffset(rectangleInsets0);
      standardChartTheme0.setAxisOffset(rectangleInsets0);
      standardChartTheme0.applyToXYAnnotation(xYAnnotation0);
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryPlot0).getDomainAxisCount();
      doReturn(0).when(categoryPlot0).getRangeAxisCount();
      doReturn(0).when(categoryPlot0).getRendererCount();
      standardChartTheme0.applyToCategoryPlot(categoryPlot0);
      MultiplePiePlot multiplePiePlot0 = mock(MultiplePiePlot.class, new ViolatedAssumptionAnswer());
      doReturn((JFreeChart) null).when(multiplePiePlot0).getPieChart();
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToMultiplePiePlot(multiplePiePlot0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      PeriodAxis periodAxis0 = mock(PeriodAxis.class, new ViolatedAssumptionAnswer());
      doReturn((PeriodAxisLabelInfo[]) null).when(periodAxis0).getLabelInfo();
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToPeriodAxis(periodAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      standardChartTheme0.getPlotBackgroundPaint();
      Paint paint0 = standardChartTheme0.getSubtitlePaint();
      standardChartTheme0.setRangeGridlinePaint(paint0);
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      PolarPlot polarPlot0 = mock(PolarPlot.class, new ViolatedAssumptionAnswer());
      doReturn((ValueAxis) null).when(polarPlot0).getAxis();
      standardChartTheme0.applyToPolarPlot(polarPlot0);
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      BarPainter barPainter0 = null;
      // Undeclared exception!
      try { 
        standardChartTheme0.setBarPainter((BarPainter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'painter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("(BR", true);
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null).when(plot0).getBackgroundPaint();
      doReturn((DrawingSupplier) null).when(plot0).getDrawingSupplier();
      standardChartTheme0.applyToPlot(plot0);
      SymbolAxis symbolAxis0 = mock(SymbolAxis.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToSymbolAxis(symbolAxis0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      standardChartTheme0.isShadowVisible();
      StandardChartTheme standardChartTheme1 = new StandardChartTheme("", false);
      DrawingSupplier drawingSupplier0 = standardChartTheme0.getDrawingSupplier();
      standardChartTheme1.setDrawingSupplier(drawingSupplier0);
      Paint paint0 = standardChartTheme1.getPlotBackgroundPaint();
      standardChartTheme0.setLegendItemPaint(paint0);
      StandardChartTheme.createJFreeTheme();
      Font font0 = standardChartTheme1.getExtraLargeFont();
      standardChartTheme0.setRegularFont(font0);
      Paint paint1 = standardChartTheme0.getLegendBackgroundPaint();
      standardChartTheme1.getSmallFont();
      standardChartTheme0.setItemLabelPaint(paint1);
      BarPainter barPainter0 = null;
      // Undeclared exception!
      try { 
        standardChartTheme1.setBarPainter((BarPainter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'painter' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      Paint paint0 = standardChartTheme0.getDomainGridlinePaint();
      standardChartTheme0.setAxisLabelPaint(paint0);
      RectangleInsets rectangleInsets0 = standardChartTheme0.getAxisOffset();
      standardChartTheme0.setAxisOffset(rectangleInsets0);
      AbstractRenderer abstractRenderer0 = null;
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToAbstractRenderer((AbstractRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      Paint paint0 = standardChartTheme0.getTitlePaint();
      BarPainter barPainter0 = standardChartTheme0.getBarPainter();
      standardChartTheme0.setBarPainter(barPainter0);
      standardChartTheme0.setItemLabelPaint(paint0);
      standardChartTheme0.getSubtitlePaint();
      standardChartTheme0.setShadowVisible(false);
      standardChartTheme0.getLabelLinkStyle();
      standardChartTheme0.getItemLabelPaint();
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(xYPlot0).getAnnotations();
      doReturn(0).when(xYPlot0).getDomainAxisCount();
      doReturn(0).when(xYPlot0).getRangeAxisCount();
      doReturn(0).when(xYPlot0).getRendererCount();
      standardChartTheme0.applyToXYPlot(xYPlot0);
      standardChartTheme0.getChartBackgroundPaint();
      standardChartTheme0.getTickLabelPaint();
      Font font0 = standardChartTheme0.getExtraLargeFont();
      standardChartTheme0.setExtraLargeFont(font0);
      // Undeclared exception!
      try { 
        standardChartTheme0.apply((JFreeChart) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("HH:mm:ss.SSS");
      Paint paint0 = standardChartTheme0.getDomainGridlinePaint();
      DrawingSupplier drawingSupplier0 = standardChartTheme0.getDrawingSupplier();
      standardChartTheme0.setDrawingSupplier(drawingSupplier0);
      standardChartTheme0.setLegendItemPaint(paint0);
      BarPainter barPainter0 = standardChartTheme0.getBarPainter();
      standardChartTheme0.getErrorIndicatorPaint();
      AbstractRenderer abstractRenderer0 = mock(AbstractRenderer.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(abstractRenderer0).getAutoPopulateSeriesPaint();
      doReturn(false).when(abstractRenderer0).getAutoPopulateSeriesStroke();
      standardChartTheme0.applyToAbstractRenderer(abstractRenderer0);
      standardChartTheme0.setBarPainter(barPainter0);
      Paint paint1 = standardChartTheme0.getItemLabelPaint();
      standardChartTheme0.getItemLabelPaint();
      standardChartTheme0.setPlotBackgroundPaint(paint0);
      XYAnnotation xYAnnotation0 = mock(XYAnnotation.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToXYAnnotation(xYAnnotation0);
      standardChartTheme0.setAxisLabelPaint(paint1);
      standardChartTheme0.getChartBackgroundPaint();
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToPolarPlot((PolarPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("#5RHqlknDhTA", true);
      Font font0 = standardChartTheme0.getRegularFont();
      standardChartTheme0.setSmallFont(font0);
      standardChartTheme0.getDrawingSupplier();
      standardChartTheme0.setShadowVisible(false);
      Paint paint0 = standardChartTheme0.getLabelLinkPaint();
      standardChartTheme0.setRangeGridlinePaint(paint0);
      CategoryItemRenderer categoryItemRenderer0 = mock(CategoryItemRenderer.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToCategoryItemRenderer(categoryItemRenderer0);
      standardChartTheme0.getAxisOffset();
      standardChartTheme0.getName();
      standardChartTheme0.getThermometerPaint();
      standardChartTheme0.setShadowPaint(paint0);
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToSpiderWebPlot((SpiderWebPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      Paint paint0 = standardChartTheme0.getBaselinePaint();
      standardChartTheme0.setPlotBackgroundPaint(paint0);
      PieLabelLinkStyle pieLabelLinkStyle0 = standardChartTheme0.getLabelLinkStyle();
      standardChartTheme0.setLabelLinkStyle(pieLabelLinkStyle0);
      standardChartTheme0.getAxisLabelPaint();
      PeriodAxis periodAxis0 = mock(PeriodAxis.class, new ViolatedAssumptionAnswer());
      doReturn((PeriodAxisLabelInfo[]) null).when(periodAxis0).getLabelInfo();
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToPeriodAxis(periodAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("ldzp\"\"eg^");
      standardChartTheme0.getTitlePaint();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("y61nk'[");
      Paint paint0 = standardChartTheme0.getTickLabelPaint();
      SpiderWebPlot spiderWebPlot0 = mock(SpiderWebPlot.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToSpiderWebPlot(spiderWebPlot0);
      standardChartTheme0.setRangeGridlinePaint(paint0);
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      BarPainter barPainter0 = standardChartTheme0.getBarPainter();
      standardChartTheme0.setBarPainter(barPainter0);
      standardChartTheme0.applyToCategoryAxis(categoryAxis0);
      standardChartTheme0.setGridBandAlternatePaint(categoryAxis0.DEFAULT_TICK_MARK_PAINT);
      XYAnnotation xYAnnotation0 = mock(XYAnnotation.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToXYAnnotation(xYAnnotation0);
      standardChartTheme0.getPlotOutlinePaint();
      SymbolAxis symbolAxis0 = mock(SymbolAxis.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToSymbolAxis(symbolAxis0);
      Paint paint1 = standardChartTheme0.getGridBandPaint();
      standardChartTheme0.setSubtitlePaint(paint1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("positiveBarPaint", false);
      AbstractRenderer abstractRenderer0 = mock(AbstractRenderer.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(abstractRenderer0).getAutoPopulateSeriesPaint();
      doReturn(false).when(abstractRenderer0).getAutoPopulateSeriesStroke();
      standardChartTheme0.applyToAbstractRenderer(abstractRenderer0);
      Paint paint0 = standardChartTheme0.getGridBandAlternatePaint();
      standardChartTheme0.setLegendBackgroundPaint(paint0);
      standardChartTheme0.getAxisOffset();
      standardChartTheme0.getPlotOutlinePaint();
      standardChartTheme0.setExtraLargeFont(abstractRenderer0.DEFAULT_VALUE_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      Paint paint0 = standardChartTheme0.getLegendBackgroundPaint();
      standardChartTheme0.setDomainGridlinePaint(paint0);
      standardChartTheme0.setThermometerPaint(paint0);
      standardChartTheme0.getGridBandPaint();
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToCategoryAxis(categoryAxis0);
      PolarPlot polarPlot0 = mock(PolarPlot.class, new ViolatedAssumptionAnswer());
      doReturn((ValueAxis) null).when(polarPlot0).getAxis();
      standardChartTheme0.applyToPolarPlot(polarPlot0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("0Rb:/=nfGCA,2", true);
      standardChartTheme0.getLargeFont();
      Paint paint0 = standardChartTheme0.getErrorIndicatorPaint();
      standardChartTheme0.setShadowPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("cpD<43x.?s", false);
      XYBarPainter xYBarPainter0 = standardChartTheme0.getXYBarPainter();
      standardChartTheme0.setXYBarPainter(xYBarPainter0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StandardChartTheme.createJFreeTheme();
      StandardChartTheme standardChartTheme0 = null;
      try {
        standardChartTheme0 = new StandardChartTheme((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'name' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", false);
      // Undeclared exception!
      try { 
        standardChartTheme0.setSmallFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.StandardChartTheme", false);
      Paint paint0 = standardChartTheme0.getLabelLinkPaint();
      Font font0 = standardChartTheme0.getExtraLargeFont();
      standardChartTheme0.setRegularFont(font0);
      standardChartTheme0.setTitlePaint(paint0);
      FastScatterPlot fastScatterPlot0 = mock(FastScatterPlot.class, new ViolatedAssumptionAnswer());
      doReturn((ValueAxis) null).when(fastScatterPlot0).getDomainAxis();
      doReturn((ValueAxis) null).when(fastScatterPlot0).getRangeAxis();
      standardChartTheme0.applyToFastScatterPlot(fastScatterPlot0);
      standardChartTheme0.setBaselinePaint(fastScatterPlot0.DEFAULT_OUTLINE_PAINT);
      Paint paint1 = standardChartTheme0.getPlotOutlinePaint();
      standardChartTheme0.setSubtitlePaint(paint1);
      XYBarPainter xYBarPainter0 = standardChartTheme0.getXYBarPainter();
      standardChartTheme0.setXYBarPainter(xYBarPainter0);
      standardChartTheme0.getName();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      standardChartTheme0.getCrosshairPaint();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      MeterPlot meterPlot0 = mock(MeterPlot.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToMeterPlot(meterPlot0);
      Paint paint0 = standardChartTheme0.getDomainGridlinePaint();
      standardChartTheme0.setAxisLabelPaint(paint0);
      standardChartTheme0.setGridBandAlternatePaint(paint0);
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToValueAxis(valueAxis0);
      standardChartTheme0.getShadowPaint();
      standardChartTheme0.getAxisLabelPaint();
      standardChartTheme0.getChartBackgroundPaint();
      ThermometerPlot thermometerPlot0 = mock(ThermometerPlot.class, new ViolatedAssumptionAnswer());
      doReturn((ValueAxis) null).when(thermometerPlot0).getRangeAxis();
      standardChartTheme0.applyToThermometerPlot(thermometerPlot0);
      standardChartTheme0.setPlotBackgroundPaint(meterPlot0.DEFAULT_BACKGROUND_PAINT);
      BarPainter barPainter0 = standardChartTheme0.getBarPainter();
      standardChartTheme0.setBarPainter(barPainter0);
      standardChartTheme0.setLargeFont(valueAxis0.DEFAULT_TICK_LABEL_FONT);
      MultiplePiePlot multiplePiePlot0 = mock(MultiplePiePlot.class, new ViolatedAssumptionAnswer());
      doReturn((JFreeChart) null).when(multiplePiePlot0).getPieChart();
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToMultiplePiePlot(multiplePiePlot0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      CategoryItemRenderer categoryItemRenderer0 = mock(CategoryItemRenderer.class, new ViolatedAssumptionAnswer());
      MeterPlot meterPlot0 = mock(MeterPlot.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToMeterPlot(meterPlot0);
      standardChartTheme0.applyToCategoryItemRenderer(categoryItemRenderer0);
      XYItemRenderer xYItemRenderer0 = mock(XYItemRenderer.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToXYItemRenderer(xYItemRenderer0);
      SymbolAxis symbolAxis0 = mock(SymbolAxis.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToSymbolAxis(symbolAxis0);
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Plot) null).when(jFreeChart0).getPlot();
      doReturn(0).when(jFreeChart0).getSubtitleCount();
      doReturn((TextTitle) null).when(jFreeChart0).getTitle();
      standardChartTheme0.apply(jFreeChart0);
      standardChartTheme0.equals("");
      Font font0 = standardChartTheme0.getExtraLargeFont();
      standardChartTheme0.setRegularFont(font0);
      DrawingSupplier drawingSupplier0 = standardChartTheme0.getDrawingSupplier();
      standardChartTheme0.setDrawingSupplier(drawingSupplier0);
      standardChartTheme0.setPlotOutlinePaint(symbolAxis0.DEFAULT_TICK_LABEL_PAINT);
      standardChartTheme0.setLargeFont(meterPlot0.DEFAULT_LABEL_FONT);
      StandardChartTheme.createDarknessTheme();
      standardChartTheme0.getExtraLargeFont();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("rS+QuO#-B", true);
      Paint paint0 = standardChartTheme0.getSubtitlePaint();
      standardChartTheme0.setErrorIndicatorPaint(paint0);
      standardChartTheme0.getLegendBackgroundPaint();
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToMultiplePiePlot((MultiplePiePlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Value for whisker width out of range", false);
      DrawingSupplier drawingSupplier0 = standardChartTheme0.getDrawingSupplier();
      standardChartTheme0.setDrawingSupplier(drawingSupplier0);
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      Paint paint0 = standardChartTheme0.getPlotBackgroundPaint();
      standardChartTheme0.setItemLabelPaint(paint0);
      standardChartTheme0.setChartBackgroundPaint(paint0);
      Font font0 = standardChartTheme0.getRegularFont();
      standardChartTheme0.setSmallFont(font0);
      Title title1 = mock(Title.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryPlot0).getDomainAxisCount();
      doReturn(0).when(categoryPlot0).getRangeAxisCount();
      doReturn(0).when(categoryPlot0).getRendererCount();
      standardChartTheme0.setDrawingSupplier(drawingSupplier0);
      StandardChartTheme.createLegacyTheme();
      standardChartTheme0.applyToCategoryPlot(categoryPlot0);
      standardChartTheme0.applyToTitle(title1);
      standardChartTheme0.applyToTitle(title0);
      SpiderWebPlot spiderWebPlot0 = mock(SpiderWebPlot.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToSpiderWebPlot(spiderWebPlot0);
      standardChartTheme0.setLegendItemPaint(spiderWebPlot0.DEFAULT_LABEL_SHADOW_PAINT);
      Font font1 = standardChartTheme0.getLargeFont();
      standardChartTheme0.getDrawingSupplier();
      standardChartTheme0.setPlotOutlinePaint(spiderWebPlot0.DEFAULT_LABEL_BACKGROUND_PAINT);
      standardChartTheme0.getDrawingSupplier();
      standardChartTheme0.setAxisLabelPaint(spiderWebPlot0.DEFAULT_BACKGROUND_PAINT);
      standardChartTheme0.setItemLabelPaint(spiderWebPlot0.DEFAULT_LABEL_BACKGROUND_PAINT);
      standardChartTheme0.getChartBackgroundPaint();
      StandardChartTheme.createJFreeTheme();
      standardChartTheme0.setSmallFont(font1);
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToBlock(block0);
      standardChartTheme0.getItemLabelPaint();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("renderer");
      Object object0 = standardChartTheme0.clone();
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(xYPlot0).getAnnotations();
      doReturn(0).when(xYPlot0).getDomainAxisCount();
      doReturn(0).when(xYPlot0).getRangeAxisCount();
      doReturn(0).when(xYPlot0).getRendererCount();
      standardChartTheme0.applyToXYPlot(xYPlot0);
      standardChartTheme0.equals(object0);
      Paint paint0 = standardChartTheme0.getChartBackgroundPaint();
      Paint paint1 = standardChartTheme0.getRangeGridlinePaint();
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer0).getBlocks();
      standardChartTheme0.applyToBlockContainer(blockContainer0);
      standardChartTheme0.setLegendBackgroundPaint(paint1);
      standardChartTheme0.getGridBandAlternatePaint();
      standardChartTheme0.setCrosshairPaint(paint0);
      standardChartTheme0.getRegularFont();
      standardChartTheme0.getItemLabelPaint();
      DrawingSupplier drawingSupplier0 = standardChartTheme0.getDrawingSupplier();
      standardChartTheme0.setDrawingSupplier(drawingSupplier0);
      standardChartTheme0.getPlotOutlinePaint();
      standardChartTheme0.clone();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToValueAxis(valueAxis0);
      standardChartTheme0.getShadowPaint();
      SpiderWebPlot spiderWebPlot0 = mock(SpiderWebPlot.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToSpiderWebPlot(spiderWebPlot0);
      standardChartTheme0.getDomainGridlinePaint();
      standardChartTheme0.getExtraLargeFont();
      standardChartTheme0.setLargeFont(valueAxis0.DEFAULT_TICK_LABEL_FONT);
      standardChartTheme0.getGridBandPaint();
      standardChartTheme0.getName();
      XYPlot xYPlot1 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(xYPlot1).getAnnotations();
      doReturn(0).when(xYPlot1).getDomainAxisCount();
      doReturn(0).when(xYPlot1).getRangeAxisCount();
      doReturn(0).when(xYPlot1).getRendererCount();
      standardChartTheme0.applyToXYPlot(xYPlot1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("", true);
      ThermometerPlot thermometerPlot0 = mock(ThermometerPlot.class, new ViolatedAssumptionAnswer());
      doReturn((ValueAxis) null).when(thermometerPlot0).getRangeAxis();
      standardChartTheme0.setAxisLabelPaint(thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      standardChartTheme0.applyToThermometerPlot(thermometerPlot0);
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      standardChartTheme0.applyToValueAxis(valueAxis0);
      standardChartTheme0.setTitlePaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      StandardChartTheme.createJFreeTheme();
      standardChartTheme0.setBaselinePaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      standardChartTheme0.getChartBackgroundPaint();
      standardChartTheme0.setLabelLinkPaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      BarPainter barPainter0 = standardChartTheme0.getBarPainter();
      standardChartTheme0.setBarPainter(barPainter0);
      standardChartTheme0.setGridBandPaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      standardChartTheme0.getPlotOutlinePaint();
      standardChartTheme0.setExtraLargeFont(valueAxis0.DEFAULT_AXIS_LABEL_FONT);
  }
}
