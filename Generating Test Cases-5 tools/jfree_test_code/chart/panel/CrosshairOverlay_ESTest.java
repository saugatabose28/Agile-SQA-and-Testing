/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:42:59 GMT 2023
 */

package org.jfree.chart.panel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.beans.PropertyChangeEvent;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.event.OverlayChangeEvent;
import org.jfree.chart.labels.CrosshairLabelGenerator;
import org.jfree.chart.panel.CrosshairOverlay;
import org.jfree.chart.plot.Crosshair;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.text.TextUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CrosshairOverlay_ESTest extends CrosshairOverlay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(195.0).when(rectangle2D0).getMinX();
      List<Crosshair> list0 = crosshairOverlay0.getRangeCrosshairs();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(list0).when(crosshair0).clone();
      crosshairOverlay0.addRangeCrosshair(crosshair0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn("").when(crosshair1).toString();
      crosshairOverlay0.addDomainCrosshair(crosshair1);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.drawVerticalCrosshair(graphics2D0, rectangle2D0, 0.0, crosshair2);
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn("La?aj").when(crosshair3).toString();
      crosshairOverlay0.addDomainCrosshair(crosshair3);
      crosshairOverlay0.clearDomainCrosshairs();
      Object object0 = crosshairOverlay0.clone();
      crosshairOverlay0.equals(object0);
      Crosshair crosshair4 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair4);
      crosshairOverlay0.getDomainCrosshairs();
      crosshairOverlay0.equals(list0);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke2 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(paint2).when(graphics2D1).getPaint();
      doReturn(stroke2).when(graphics2D1).getStroke();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(744.8542761).when(rectangle2D1).getMaxX();
      doReturn(0.0).when(rectangle2D1).getMaxY();
      doReturn(3.0).when(rectangle2D1).getMinX();
      doReturn(0.0).when(rectangle2D1).getMinY();
      Paint paint3 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair5 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((CrosshairLabelGenerator) null).when(crosshair5).getLabelGenerator();
      doReturn(paint3).when(crosshair5).getPaint();
      doReturn((Stroke) null).when(crosshair5).getStroke();
      doReturn(true).when(crosshair5).isLabelVisible();
      // Undeclared exception!
      try { 
        crosshairOverlay0.drawHorizontalCrosshair(graphics2D1, rectangle2D1, 0.0, crosshair5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(crosshairOverlay0).when(crosshair0).clone();
      crosshairOverlay0.addRangeCrosshair(crosshair0);
      CrosshairOverlay crosshairOverlay1 = (CrosshairOverlay)crosshairOverlay0.clone();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        crosshairOverlay1.clearRangeCrosshairs();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.panel.CrosshairOverlay cannot be cast to org.jfree.chart.plot.Crosshair
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      crosshairOverlay0.clearRangeCrosshairs();
      crosshairOverlay0.clone();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair0);
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(paint0).when(graphics2D0).getPaint();
      doReturn(stroke0).when(graphics2D0).getStroke();
      double double0 = 0.0;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxX();
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn((-1.5707963267948966)).when(rectangle2D0).getMinY();
      crosshairOverlay0.getRangeCrosshairs();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = null;
      boolean boolean0 = true;
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((CrosshairLabelGenerator) null).when(crosshair1).getLabelGenerator();
      doReturn(paint1).when(crosshair1).getPaint();
      doReturn((Stroke) null).when(crosshair1).getStroke();
      doReturn(true).when(crosshair1).isLabelVisible();
      // Undeclared exception!
      try { 
        crosshairOverlay0.drawVerticalCrosshair(graphics2D0, rectangle2D0, 0.0, crosshair1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(crosshairOverlay0, crosshairOverlay0).when(crosshair0).clone();
      CrosshairOverlay crosshairOverlay1 = (CrosshairOverlay)crosshairOverlay0.clone();
      crosshairOverlay0.addDomainCrosshair(crosshair0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair1);
      CrosshairOverlay crosshairOverlay2 = (CrosshairOverlay)crosshairOverlay0.clone();
      CrosshairOverlay crosshairOverlay3 = (CrosshairOverlay)crosshairOverlay0.clone();
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.propertyChange(propertyChangeEvent0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PropertyChangeEvent propertyChangeEvent1 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.propertyChange(propertyChangeEvent1);
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn("").when(crosshair2).toString();
      crosshairOverlay0.addRangeCrosshair(crosshair2);
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.getRangeCrosshairs();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D2).getMaxY();
      doReturn(10.0).when(rectangle2D2).getMinY();
      crosshairOverlay2.equals(crosshairOverlay3);
      Crosshair crosshair4 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay2.removeRangeCrosshair(crosshair4);
      crosshairOverlay1.drawHorizontalCrosshair(graphics2D0, rectangle2D2, 917.19231, crosshair3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(shape0).when(graphics2D0).getClip();
      Plot plot0 = mock(Plot.class, new ViolatedAssumptionAnswer());
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn(plot0).when(jFreeChart0).getPlot();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ChartPanel chartPanel0 = mock(ChartPanel.class, new ViolatedAssumptionAnswer());
      doReturn(jFreeChart0).when(chartPanel0).getChart();
      doReturn(rectangle2D0).when(chartPanel0).getScreenDataArea();
      // Undeclared exception!
      try { 
        crosshairOverlay0.paintOverlay(graphics2D0, chartPanel0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.Plot$MockitoMock$1619899782 cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      crosshairOverlay0.equals((Object) null);
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeRangeCrosshair(crosshair0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null).when(graphics2D0).getPaint();
      doReturn((Stroke) null).when(graphics2D0).getStroke();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxX();
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn((-4478.060154056119)).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      crosshairOverlay0.clearRangeCrosshairs();
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null).when(crosshair1).getPaint();
      doReturn((Stroke) null).when(crosshair1).getStroke();
      doReturn(false).when(crosshair1).isLabelVisible();
      crosshairOverlay0.drawVerticalCrosshair(graphics2D0, rectangle2D0, (-1260.582141080922), crosshair1);
      crosshairOverlay0.clone();
      crosshairOverlay0.clearDomainCrosshairs();
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.propertyChange(propertyChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.propertyChange(propertyChangeEvent0);
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(";Ppm7hB").when(crosshair0).toString();
      crosshairOverlay0.addRangeCrosshair(crosshair0);
      crosshairOverlay0.clearRangeCrosshairs();
      crosshairOverlay0.getDomainCrosshairs();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(paint0).when(graphics2D0).getPaint();
      doReturn(stroke0).when(graphics2D0).getStroke();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1217.570322)).when(rectangle2D0).getMaxX();
      doReturn(2.0).when(rectangle2D0).getMaxY();
      doReturn((-2508.5)).when(rectangle2D0).getMinX();
      doReturn((-2508.5)).when(rectangle2D0).getMinY();
      crosshairOverlay0.propertyChange((PropertyChangeEvent) null);
      TextUtils.setUseFontMetricsGetStringBounds(false);
      Crosshair crosshair1 = null;
      // Undeclared exception!
      try { 
        crosshairOverlay0.drawHorizontalCrosshair(graphics2D0, rectangle2D0, 0.0, (Crosshair) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      crosshairOverlay0.getRangeCrosshairs();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(shape0).when(graphics2D0).getClip();
      JFreeChart jFreeChart0 = mock(JFreeChart.class, new ViolatedAssumptionAnswer());
      doReturn((Plot) null).when(jFreeChart0).getPlot();
      ChartPanel chartPanel0 = mock(ChartPanel.class, new ViolatedAssumptionAnswer());
      doReturn(jFreeChart0).when(chartPanel0).getChart();
      doReturn((Rectangle2D) null).when(chartPanel0).getScreenDataArea();
      // Undeclared exception!
      try { 
        crosshairOverlay0.paintOverlay(graphics2D0, chartPanel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(crosshair0).toString();
      crosshairOverlay0.clone();
      crosshairOverlay0.clearRangeCrosshairs();
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.clone();
      crosshairOverlay0.propertyChange(propertyChangeEvent0);
      crosshairOverlay0.addRangeCrosshair(crosshair0);
      crosshairOverlay0.getRangeCrosshairs();
      Crosshair crosshair1 = null;
      // Undeclared exception!
      try { 
        crosshairOverlay0.removeDomainCrosshair((Crosshair) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'crosshair' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      CrosshairOverlay crosshairOverlay1 = new CrosshairOverlay();
      crosshairOverlay0.equals(crosshairOverlay1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      crosshairOverlay0.clearRangeCrosshairs();
      crosshairOverlay0.fireOverlayChanged();
      TextUtils.setUseFontMetricsGetStringBounds(true);
      crosshairOverlay0.clearRangeCrosshairs();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(crosshair0).clone();
      crosshairOverlay0.addRangeCrosshair(crosshair0);
      crosshairOverlay0.clone();
      TextUtils.setDrawStringsWithFontAttributes(true);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxX();
      doReturn(0.0).when(rectangle2D0).getMinX();
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.drawVerticalCrosshair(graphics2D0, rectangle2D0, 1339.76582, crosshair1);
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.propertyChange(propertyChangeEvent0);
      crosshairOverlay0.fireOverlayChanged();
      PropertyChangeEvent propertyChangeEvent1 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.propertyChange(propertyChangeEvent1);
      crosshairOverlay0.clearDomainCrosshairs();
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair2);
      Crosshair crosshair3 = null;
      // Undeclared exception!
      try { 
        crosshairOverlay0.removeRangeCrosshair((Crosshair) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'crosshair' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.fireOverlayChanged();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinY();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.drawHorizontalCrosshair(graphics2D0, rectangle2D0, 2048.3781396758886, crosshair0);
      crosshairOverlay0.clone();
      crosshairOverlay0.propertyChange(propertyChangeEvent0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(crosshair1).clone();
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair2);
      crosshairOverlay0.addDomainCrosshair(crosshair1);
      crosshairOverlay0.clone();
      Crosshair crosshair3 = null;
      // Undeclared exception!
      try { 
        crosshairOverlay0.addRangeCrosshair((Crosshair) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'crosshair' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      crosshairOverlay0.notifyListeners((OverlayChangeEvent) null);
      TextUtils.setDrawStringsWithFontAttributes(true);
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(crosshair0).clone();
      crosshairOverlay0.addDomainCrosshair(crosshair0);
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.propertyChange(propertyChangeEvent0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.clone();
      crosshairOverlay0.removeRangeCrosshair(crosshair1);
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair2);
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeRangeCrosshair(crosshair3);
      Crosshair crosshair4 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeRangeCrosshair(crosshair4);
      PropertyChangeEvent propertyChangeEvent1 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.propertyChange(propertyChangeEvent1);
      // Undeclared exception!
      try { 
        crosshairOverlay0.addDomainCrosshair((Crosshair) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'crosshair' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(crosshair0).toString();
      doReturn((Object) null).when(crosshair0).clone();
      crosshairOverlay0.addDomainCrosshair(crosshair0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(crosshair1).toString();
      doReturn((Object) null).when(crosshair1).clone();
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair2);
      crosshairOverlay0.getDomainCrosshairs();
      crosshairOverlay0.addRangeCrosshair(crosshair1);
      crosshairOverlay0.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMinX();
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.getRangeCrosshairs();
      crosshairOverlay0.drawVerticalCrosshair(graphics2D0, rectangle2D0, (-4.0), crosshair3);
      Crosshair crosshair4 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = null;
      double double0 = (-241.7);
      crosshairOverlay0.getDomainCrosshairs();
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeRangeCrosshair(crosshair1);
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        crosshairOverlay0.drawVerticalCrosshair(graphics2D0, (Rectangle2D) null, (-241.7), crosshair2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D0).getClip();
      ChartPanel chartPanel0 = null;
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      OverlayChangeEvent overlayChangeEvent0 = mock(OverlayChangeEvent.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.notifyListeners(overlayChangeEvent0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMinX();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.drawVerticalCrosshair(graphics2D1, rectangle2D0, (-3696.6354075), crosshair0);
      // Undeclared exception!
      try { 
        crosshairOverlay0.paintOverlay(graphics2D0, (ChartPanel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      crosshairOverlay0.clearRangeCrosshairs();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.fireOverlayChanged();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        crosshairOverlay0.drawHorizontalCrosshair(graphics2D1, (Rectangle2D) null, 4027.536335639414, crosshair1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinY();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.drawHorizontalCrosshair(graphics2D0, rectangle2D0, 814.597, crosshair0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.addRangeCrosshair(crosshair1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMinX();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.drawVerticalCrosshair(graphics2D0, rectangle2D0, (-970.025171918), crosshair0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      crosshairOverlay0.clearRangeCrosshairs();
      TextUtils.setDrawStringsWithFontAttributes(false);
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(crosshair0).toString();
      crosshairOverlay0.addRangeCrosshair(crosshair0);
      crosshairOverlay0.clearRangeCrosshairs();
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.propertyChange(propertyChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D0).getClip();
      ChartPanel chartPanel0 = mock(ChartPanel.class, new ViolatedAssumptionAnswer());
      doReturn((JFreeChart) null).when(chartPanel0).getChart();
      doReturn((Rectangle2D) null).when(chartPanel0).getScreenDataArea();
      // Undeclared exception!
      try { 
        crosshairOverlay0.paintOverlay(graphics2D0, chartPanel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null).when(graphics2D0).getPaint();
      doReturn((Stroke) null).when(graphics2D0).getStroke();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxX();
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn(0.0).when(rectangle2D0).getMinY();
      List<Crosshair> list0 = crosshairOverlay0.getRangeCrosshairs();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(crosshair0).clone();
      crosshairOverlay0.addRangeCrosshair(crosshair0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(crosshair1).toString();
      crosshairOverlay0.addDomainCrosshair(crosshair1);
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null).when(crosshair2).getPaint();
      doReturn((Stroke) null).when(crosshair2).getStroke();
      doReturn(false).when(crosshair2).isLabelVisible();
      crosshairOverlay0.drawVerticalCrosshair(graphics2D0, rectangle2D0, 0.0, crosshair2);
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(crosshair3).toString();
      crosshairOverlay0.addDomainCrosshair(crosshair3);
      crosshairOverlay0.clearDomainCrosshairs();
      Object object0 = crosshairOverlay0.clone();
      crosshairOverlay0.equals(object0);
      Crosshair crosshair4 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair4);
      crosshairOverlay0.getDomainCrosshairs();
      crosshairOverlay0.equals(list0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null).when(graphics2D1).getPaint();
      doReturn((Stroke) null).when(graphics2D1).getStroke();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D1).getMaxX();
      doReturn(0.0).when(rectangle2D1).getMaxY();
      doReturn(0.0).when(rectangle2D1).getMinX();
      doReturn(0.0).when(rectangle2D1).getMinY();
      Crosshair crosshair5 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null).when(crosshair5).getPaint();
      doReturn((Stroke) null).when(crosshair5).getStroke();
      doReturn(false).when(crosshair5).isLabelVisible();
      crosshairOverlay0.drawHorizontalCrosshair(graphics2D1, rectangle2D1, 0.0, crosshair5);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      assertNotNull(crosshairOverlay0);
      
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair0);
      List<Crosshair> list0 = crosshairOverlay0.getRangeCrosshairs();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(crosshair0));
      
      Object object0 = crosshairOverlay0.clone();
      assertNotSame(crosshairOverlay0, object0);
      assertNotSame(object0, crosshairOverlay0);
      assertTrue(object0.equals((Object)crosshairOverlay0));
      assertNotNull(object0);
      
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn("s^Mff|+").when(crosshair1).toString();
      crosshairOverlay0.addRangeCrosshair(crosshair1);
      assertNotSame(crosshairOverlay0, object0);
      assertFalse(crosshairOverlay0.equals((Object)object0));
      
      crosshairOverlay0.clearRangeCrosshairs();
      assertNotSame(crosshairOverlay0, object0);
      assertTrue(crosshairOverlay0.equals((Object)object0));
      
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      OverlayChangeEvent overlayChangeEvent0 = mock(OverlayChangeEvent.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.notifyListeners(overlayChangeEvent0);
      assertNotSame(crosshairOverlay0, object0);
      assertTrue(crosshairOverlay0.equals((Object)object0));
      
      crosshairOverlay0.propertyChange(propertyChangeEvent0);
      assertNotSame(crosshairOverlay0, object0);
      assertTrue(crosshairOverlay0.equals((Object)object0));
      
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair2);
      assertNotSame(crosshairOverlay0, object0);
      assertTrue(crosshairOverlay0.equals((Object)object0));
      
      crosshairOverlay0.clearRangeCrosshairs();
      assertNotSame(crosshairOverlay0, object0);
      assertTrue(crosshairOverlay0.equals((Object)object0));
      
      CrosshairOverlay crosshairOverlay1 = new CrosshairOverlay();
      assertTrue(crosshairOverlay1.equals((Object)crosshairOverlay0));
      assertTrue(crosshairOverlay1.equals((Object)object0));
      assertNotNull(crosshairOverlay1);
      
      List<Crosshair> list1 = crosshairOverlay0.getDomainCrosshairs();
      assertNotSame(list1, list0);
      assertNotSame(crosshairOverlay0, crosshairOverlay1);
      assertNotSame(crosshairOverlay0, object0);
      assertTrue(list1.equals((Object)list0));
      assertTrue(crosshairOverlay0.equals((Object)crosshairOverlay1));
      assertTrue(crosshairOverlay0.equals((Object)object0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(list1.contains(crosshair0));
      
      TextUtils.setUseFontMetricsGetStringBounds(false);
      OverlayChangeEvent overlayChangeEvent1 = mock(OverlayChangeEvent.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay1.addRangeCrosshair(crosshair3);
      assertNotSame(crosshairOverlay1, crosshairOverlay0);
      assertNotSame(crosshairOverlay1, object0);
      assertFalse(crosshairOverlay1.equals((Object)crosshairOverlay0));
      assertFalse(crosshairOverlay1.equals((Object)object0));
      
      crosshairOverlay1.notifyListeners(overlayChangeEvent1);
      assertNotSame(crosshairOverlay1, crosshairOverlay0);
      assertNotSame(crosshairOverlay1, object0);
      assertFalse(crosshairOverlay1.equals((Object)crosshairOverlay0));
      assertFalse(crosshairOverlay1.equals((Object)object0));
      
      boolean boolean0 = crosshairOverlay0.equals(crosshairOverlay1);
      assertNotSame(crosshairOverlay0, crosshairOverlay1);
      assertNotSame(crosshairOverlay0, object0);
      assertNotSame(crosshairOverlay1, crosshairOverlay0);
      assertNotSame(crosshairOverlay1, object0);
      assertFalse(crosshairOverlay0.equals((Object)crosshairOverlay1));
      assertTrue(crosshairOverlay0.equals((Object)object0));
      assertFalse(crosshairOverlay1.equals((Object)crosshairOverlay0));
      assertFalse(crosshairOverlay1.equals((Object)object0));
      assertFalse(boolean0);
      
      crosshairOverlay0.notifyListeners((OverlayChangeEvent) null);
      assertNotSame(crosshairOverlay0, crosshairOverlay1);
      assertNotSame(crosshairOverlay0, object0);
      assertFalse(crosshairOverlay0.equals((Object)crosshairOverlay1));
      assertTrue(crosshairOverlay0.equals((Object)object0));
      
      Crosshair crosshair4 = null;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Shape) null).when(graphics2D0).getClip();
      ChartPanel chartPanel0 = mock(ChartPanel.class, new ViolatedAssumptionAnswer());
      doReturn((JFreeChart) null).when(chartPanel0).getChart();
      doReturn((Rectangle2D) null).when(chartPanel0).getScreenDataArea();
      // Undeclared exception!
      try { 
        crosshairOverlay0.paintOverlay(graphics2D0, chartPanel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      assertNotNull(crosshairOverlay0);
      
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(crosshair0).toString();
      crosshairOverlay0.addDomainCrosshair(crosshair0);
      crosshairOverlay0.clearDomainCrosshairs();
      List<Crosshair> list0 = crosshairOverlay0.getRangeCrosshairs();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(crosshair0));
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxX();
      doReturn(0.0).when(rectangle2D0).getMinX();
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.drawVerticalCrosshair(graphics2D0, rectangle2D0, 577.86860559731, crosshair1);
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair2);
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.propertyChange(propertyChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      assertNotNull(crosshairOverlay0);
      
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      List<Crosshair> list0 = crosshairOverlay0.getRangeCrosshairs();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(crosshair0));
      
      List<Crosshair> list1 = crosshairOverlay0.getRangeCrosshairs();
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(list1.contains(crosshair0));
      
      crosshairOverlay0.removeRangeCrosshair(crosshair0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null).when(graphics2D0).getPaint();
      doReturn((Stroke) null).when(graphics2D0).getStroke();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMaxX();
      doReturn(450.30723170609).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinX();
      doReturn((-2368.32278)).when(rectangle2D0).getMinY();
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null).when(crosshair1).getPaint();
      doReturn((Stroke) null).when(crosshair1).getStroke();
      doReturn(false).when(crosshair1).isLabelVisible();
      crosshairOverlay0.drawHorizontalCrosshair(graphics2D0, rectangle2D0, 1.0, crosshair1);
      Object object0 = crosshairOverlay0.clone();
      assertNotSame(crosshairOverlay0, object0);
      assertNotSame(object0, crosshairOverlay0);
      assertTrue(object0.equals((Object)crosshairOverlay0));
      assertNotNull(object0);
      
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(crosshair2).clone();
      crosshairOverlay0.addDomainCrosshair(crosshair2);
      assertNotSame(crosshairOverlay0, object0);
      assertNotSame(object0, crosshairOverlay0);
      assertFalse(crosshairOverlay0.equals((Object)object0));
      assertFalse(object0.equals((Object)crosshairOverlay0));
      
      Object object1 = crosshairOverlay0.clone();
      assertNotSame(crosshairOverlay0, object0);
      assertNotSame(crosshairOverlay0, object1);
      assertNotSame(object1, object0);
      assertNotSame(object1, crosshairOverlay0);
      assertFalse(crosshairOverlay0.equals((Object)object0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)crosshairOverlay0));
      assertNotNull(object1);
      
      boolean boolean0 = crosshairOverlay0.equals((Object) null);
      assertNotSame(crosshairOverlay0, object0);
      assertNotSame(crosshairOverlay0, object1);
      assertFalse(crosshairOverlay0.equals((Object)object0));
      assertFalse(crosshairOverlay0.equals((Object)object1));
      assertFalse(boolean0);
      
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.addRangeCrosshair(crosshair3);
      assertNotSame(crosshairOverlay0, object0);
      assertNotSame(crosshairOverlay0, object1);
      assertFalse(crosshairOverlay0.equals((Object)object0));
      assertFalse(crosshairOverlay0.equals((Object)object1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      assertNotNull(crosshairOverlay0);
      
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeRangeCrosshair(crosshair0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      List<Crosshair> list0 = crosshairOverlay0.getRangeCrosshairs();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(crosshair0));
      
      crosshairOverlay0.removeDomainCrosshair(crosshair1);
      crosshairOverlay0.clearDomainCrosshairs();
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        crosshairOverlay0.drawHorizontalCrosshair(graphics2D0, (Rectangle2D) null, 0.0, crosshair2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      assertNotNull(crosshairOverlay0);
      
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeRangeCrosshair(crosshair1);
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeRangeCrosshair(crosshair2);
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.addDomainCrosshair(crosshair3);
      Crosshair crosshair4 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.addDomainCrosshair(crosshair4);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getMinY();
      Crosshair crosshair0 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      OverlayChangeEvent overlayChangeEvent0 = mock(OverlayChangeEvent.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.notifyListeners(overlayChangeEvent0);
      crosshairOverlay0.drawHorizontalCrosshair(graphics2D0, rectangle2D0, (-1.0), crosshair0);
      Crosshair crosshair1 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeDomainCrosshair(crosshair1);
      crosshairOverlay0.clearRangeCrosshairs();
      crosshairOverlay0.clearRangeCrosshairs();
      crosshairOverlay0.clearDomainCrosshairs();
      CrosshairOverlay crosshairOverlay1 = new CrosshairOverlay();
      Crosshair crosshair2 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      Object object0 = crosshairOverlay1.clone();
      crosshairOverlay1.removeDomainCrosshair(crosshair2);
      Crosshair crosshair3 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay1.addDomainCrosshair(crosshair3);
      crosshairOverlay0.equals(crosshairOverlay1);
      crosshairOverlay1.clearRangeCrosshairs();
      Crosshair crosshair4 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.removeRangeCrosshair(crosshair4);
      crosshairOverlay0.clearDomainCrosshairs();
      Object object1 = crosshairOverlay0.clone();
      boolean boolean0 = crosshairOverlay1.equals(object1);
      assertTrue(crosshairOverlay0.equals((Object)object0));
      assertFalse(boolean0);
      
      Crosshair crosshair5 = mock(Crosshair.class, new ViolatedAssumptionAnswer());
      crosshairOverlay0.addRangeCrosshair(crosshair5);
      crosshairOverlay0.clearDomainCrosshairs();
      assertNotSame(crosshairOverlay0, object1);
  }
}
