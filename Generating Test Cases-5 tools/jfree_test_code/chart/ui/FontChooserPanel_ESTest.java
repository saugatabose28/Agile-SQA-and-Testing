/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:43:10 GMT 2023
 */

package org.jfree.chart.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEvent;
import java.awt.AWTEventMulticaster;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.FocusTraversalPolicy;
import java.awt.Font;
import java.awt.GraphicsConfiguration;
import java.awt.Image;
import java.awt.ImageCapabilities;
import java.awt.MultipleGradientPaint;
import java.awt.Point;
import java.awt.RadialGradientPaint;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.TextArea;
import java.awt.event.ActionListener;
import java.awt.event.ContainerListener;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ImageObserver;
import java.awt.image.IndexColorModel;
import java.awt.image.VolatileImage;
import java.io.File;
import java.io.FileDescriptor;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.net.URI;
import java.text.AttributedCharacterIterator;
import java.text.CharacterIterator;
import java.text.FieldPosition;
import java.text.Format;
import java.text.StringCharacterIterator;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import javax.swing.DebugGraphics;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JApplet;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import javax.swing.JPopupMenu;
import javax.swing.KeyStroke;
import javax.swing.TransferHandler;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.mock.javax.swing.filechooser.MockFileSystemView;
import org.jfree.chart.ui.FontChooserPanel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FontChooserPanel_ESTest extends FontChooserPanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hashtable<Format.Field, Integer> hashtable0 = new Hashtable<Format.Field, Integer>();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      Format.Field format_Field1 = fieldPosition0.getFieldAttribute();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      hashtable0.put(format_Field1, integer0);
      Font font0 = new Font(hashtable0);
      Font font1 = Font.getFont("Bold", font0);
      Font font2 = font1.deriveFont(300, (float) 300);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(0);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, false);
      AffineTransform affineTransform1 = fontRenderContext0.getTransform();
      font2.deriveFont(300, affineTransform1);
      BiConsumer<Object, Integer> biConsumer0 = (BiConsumer<Object, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.forEach(biConsumer0);
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font2);
      fontChooserPanel0.setSelectedFont(font2);
      fontChooserPanel0.getSelectedStyle();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hashtable<AttributedCharacterIterator.Attribute, Object> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Object>();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      hashtable0.put(attributedCharacterIterator_Attribute0, attributedCharacterIterator_Attribute0);
      Font font0 = new Font(hashtable0);
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font0);
      fontChooserPanel0.getSelectedFont();
      fontChooserPanel0.getSelectedSize();
      Font font1 = fontChooserPanel0.getSelectedFont();
      fontChooserPanel0.getSelectedStyle();
      fontChooserPanel0.getSelectedStyle();
      fontChooserPanel0.setSelectedFont(font1);
      fontChooserPanel0.setSelectedFont(font1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Format.Field, String> hashMap0 = new HashMap<Format.Field, String>();
      Hashtable<Format.Field, String> hashtable0 = new Hashtable<Format.Field, String>(hashMap0);
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      Font font1 = font0.deriveFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      Font font2 = Font.getFont("YpZ|KY_72", font1);
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font2);
      fontChooserPanel0.getSelectedSize();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext1.new NamedStyle();
      styleContext0.getStyle("org.jfree.data.xy.AbstractXYDataset");
      StyleContext.SmallAttributeSet styleContext_SmallAttributeSet0 = styleContext0.new SmallAttributeSet(styleContext_NamedStyle0);
      AttributeSet attributeSet0 = styleContext_SmallAttributeSet0.copyAttributes();
      Font font0 = styleContext0.getFont(attributeSet0);
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font0);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      fontChooserPanel0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      fontChooserPanel0.getSelectedStyle();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Font font0 = null;
      FontChooserPanel fontChooserPanel0 = null;
      try {
        fontChooserPanel0 = new FontChooserPanel((Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.FontChooserPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(font0).getName();
      doReturn(false).when(font0).isBold();
      doReturn(false).when(font0).isItalic();
      FontChooserPanel fontChooserPanel0 = null;
      try {
        fontChooserPanel0 = new FontChooserPanel(font0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FontChooserPanel fontChooserPanel0 = null;
      try {
        fontChooserPanel0 = new FontChooserPanel((Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.FontChooserPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hashtable<AttributedCharacterIterator.Attribute, Integer> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Integer>();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      Integer integer0 = new Integer(400);
      Integer.min((-1415), 0);
      Integer.max(400, 454);
      hashtable0.put(attributedCharacterIterator_Attribute0, integer0);
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font0);
      Locale locale0 = Locale.US;
      font0.getFamily(locale0);
      fontChooserPanel0.getSelectedFont();
      fontChooserPanel0.getSelectedStyle();
      fontChooserPanel0.getSelectedStyle();
      fontChooserPanel0.getSelectedFont();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont((String) null, 174, 174);
      FontChooserPanel fontChooserPanel0 = new FontChooserPanel(font0);
      String string0 = fontChooserPanel0.getSelectedName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Font font0 = null;
      FontChooserPanel fontChooserPanel0 = null;
      try {
        fontChooserPanel0 = new FontChooserPanel((Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.FontChooserPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "RgyX0d5g";
      Hashtable<AttributedCharacterIterator.Attribute, Format.Field> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Format.Field>();
      Font font0 = new Font(hashtable0);
      Font.getFont("RgyX0d5g", font0);
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.READING;
      FieldPosition fieldPosition0 = new FieldPosition(0);
      font0.getItalicAngle();
      fieldPosition0.getFieldAttribute();
      // Undeclared exception!
      try { 
        hashtable0.put(attributedCharacterIterator_Attribute0, (Format.Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DebugGraphics debugGraphics0 = new DebugGraphics();
      MockFile mockFile0 = new MockFile("org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset");
      FileSystemView fileSystemView0 = MockFileSystemView.getFileSystemView();
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser(mockFile0, fileSystemView0);
      DebugGraphics debugGraphics1 = new DebugGraphics(debugGraphics0, mockJFileChooser0);
      DebugGraphics debugGraphics2 = new DebugGraphics(debugGraphics1);
      int int0 = 231;
      // Undeclared exception!
      try { 
        debugGraphics1.fillRect(2264, 231, 231, 2264);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 5;
      File file0 = MockFile.createTempFile("z!)en/3tZ#]?'", "");
      // Undeclared exception!
      try { 
        Font.createFont(5, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // font format not recognized
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Font.getFont((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DebugGraphics debugGraphics0 = new DebugGraphics();
      // Undeclared exception!
      try { 
        debugGraphics0.getFont();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, Format.Field> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Format.Field>();
      hashMap0.clone();
      HashMap<AttributedCharacterIterator.Attribute, Format.Field> hashMap1 = new HashMap<AttributedCharacterIterator.Attribute, Format.Field>(hashMap0);
      BiFunction<Object, AttributedCharacterIterator.Attribute, Format.Field> biFunction0 = (BiFunction<Object, AttributedCharacterIterator.Attribute, Format.Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'Z';
      int int0 = 2010;
      int int1 = 0;
      AffineTransform.getQuadrantRotateInstance(0);
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable(0, (byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.ByteLookupTable", e);
      }
  }
}
