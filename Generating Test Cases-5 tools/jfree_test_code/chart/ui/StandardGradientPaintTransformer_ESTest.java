/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:10:14 GMT 2023
 */

package org.jfree.chart.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ui.GradientPaintTransformType;
import org.jfree.chart.ui.StandardGradientPaintTransformer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardGradientPaintTransformer_ESTest extends StandardGradientPaintTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GradientPaint gradientPaint0 = mock(GradientPaint.class, new ViolatedAssumptionAnswer());
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer((GradientPaintTransformType) null);
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      standardGradientPaintTransformer0.hashCode();
      standardGradientPaintTransformer0.hashCode();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Object object0 = standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = mock(GradientPaintTransformType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(gradientPaintTransformType0).toString();
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      GradientPaintTransformType gradientPaintTransformType1 = mock(GradientPaintTransformType.class, new ViolatedAssumptionAnswer());
      GradientPaint gradientPaint0 = mock(GradientPaint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(gradientPaint0).toString();
      standardGradientPaintTransformer0.clone();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape0).getBounds2D();
      standardGradientPaintTransformer0.transform((GradientPaint) null, shape0);
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape1).getBounds2D();
      standardGradientPaintTransformer0.transform((GradientPaint) null, shape1);
      Shape shape2 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape2).getBounds2D();
      GradientPaint gradientPaint1 = mock(GradientPaint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(gradientPaint1).toString();
      Shape shape3 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape3).getBounds2D();
      GradientPaint gradientPaint2 = standardGradientPaintTransformer0.transform(gradientPaint1, shape3);
      Shape shape4 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape4).getBounds2D();
      GradientPaint gradientPaint3 = standardGradientPaintTransformer0.transform(gradientPaint2, shape4);
      GradientPaint gradientPaint4 = standardGradientPaintTransformer0.transform(gradientPaint0, shape2);
      Shape shape5 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape5).getBounds2D();
      standardGradientPaintTransformer0.transform(gradientPaint4, shape5);
      StandardGradientPaintTransformer standardGradientPaintTransformer1 = new StandardGradientPaintTransformer(gradientPaintTransformType1);
      standardGradientPaintTransformer0.equals(standardGradientPaintTransformer1);
      GradientPaintTransformType gradientPaintTransformType2 = standardGradientPaintTransformer0.getType();
      standardGradientPaintTransformer1.equals(gradientPaintTransformType2);
      standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer1.clone();
      standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer0.equals(gradientPaint4);
      Object object0 = standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer1.equals(object0);
      standardGradientPaintTransformer1.hashCode();
      standardGradientPaintTransformer1.clone();
      Shape shape6 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape6).getBounds2D();
      GradientPaint gradientPaint5 = standardGradientPaintTransformer0.transform(gradientPaint3, shape6);
      Shape shape7 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape7).getBounds2D();
      standardGradientPaintTransformer0.transform(gradientPaint5, shape7);
      standardGradientPaintTransformer0.hashCode();
      standardGradientPaintTransformer1.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      GradientPaint gradientPaint0 = mock(GradientPaint.class, new ViolatedAssumptionAnswer());
      doReturn((Color) null).when(gradientPaint0).getColor1();
      doReturn((Color) null).when(gradientPaint0).getColor2();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getCenterX();
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinY();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn(rectangle2D0).when(shape0).getBounds2D();
      standardGradientPaintTransformer0.clone();
      // Undeclared exception!
      try { 
        standardGradientPaintTransformer0.transform(gradientPaint0, shape0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Colors cannot be null
         //
         verifyException("java.awt.GradientPaint", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Shape shape2 = mock(Shape.class, new ViolatedAssumptionAnswer());
      standardGradientPaintTransformer0.hashCode();
      GradientPaintTransformType gradientPaintTransformType0 = standardGradientPaintTransformer0.getType();
      standardGradientPaintTransformer0.equals("$AU(Td(MYpl`kL");
      Shape shape3 = mock(Shape.class, new ViolatedAssumptionAnswer());
      standardGradientPaintTransformer0.equals(gradientPaintTransformType0);
      standardGradientPaintTransformer0.equals(standardGradientPaintTransformer0);
      Object object0 = standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer0.equals(object0);
      StandardGradientPaintTransformer standardGradientPaintTransformer1 = (StandardGradientPaintTransformer)standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer0.getType();
      standardGradientPaintTransformer0.equals((Object) null);
      standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer0.hashCode();
      StandardGradientPaintTransformer standardGradientPaintTransformer2 = (StandardGradientPaintTransformer)standardGradientPaintTransformer0.clone();
      StandardGradientPaintTransformer standardGradientPaintTransformer3 = new StandardGradientPaintTransformer();
      standardGradientPaintTransformer0.equals(standardGradientPaintTransformer3);
      StandardGradientPaintTransformer standardGradientPaintTransformer4 = (StandardGradientPaintTransformer)standardGradientPaintTransformer3.clone();
      standardGradientPaintTransformer4.clone();
      standardGradientPaintTransformer1.getType();
      standardGradientPaintTransformer2.getType();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = mock(GradientPaintTransformType.class, new ViolatedAssumptionAnswer());
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      Object object0 = standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer0.getType();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer0.clone();
      GradientPaint gradientPaint0 = null;
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape0).getBounds2D();
      // Undeclared exception!
      try { 
        standardGradientPaintTransformer0.transform((GradientPaint) null, shape0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.StandardGradientPaintTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      GradientPaint gradientPaint0 = mock(GradientPaint.class, new ViolatedAssumptionAnswer());
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape0).getBounds2D();
      // Undeclared exception!
      try { 
        standardGradientPaintTransformer0.transform(gradientPaint0, shape0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.StandardGradientPaintTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer((GradientPaintTransformType) null);
      GradientPaint gradientPaint0 = mock(GradientPaint.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      standardGradientPaintTransformer0.clone();
      Object object0 = standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer0.equals(object0);
      GradientPaint gradientPaint0 = mock(GradientPaint.class, new ViolatedAssumptionAnswer());
      doReturn((Color) null).when(gradientPaint0).getColor1();
      doReturn((Color) null).when(gradientPaint0).getColor2();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangle2D0).getCenterX();
      doReturn(0.0).when(rectangle2D0).getMaxY();
      doReturn(0.0).when(rectangle2D0).getMinY();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn(rectangle2D0).when(shape0).getBounds2D();
      // Undeclared exception!
      try { 
        standardGradientPaintTransformer0.transform(gradientPaint0, shape0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Colors cannot be null
         //
         verifyException("java.awt.GradientPaint", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      Color color0 = mock(Color.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(color0).getAlpha();
      GradientPaint gradientPaint0 = mock(GradientPaint.class, new ViolatedAssumptionAnswer());
      doReturn(color0).when(gradientPaint0).getColor1();
      doReturn(color0).when(gradientPaint0).getColor2();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-2896.75055), (-2896.75055)).when(rectangle2D0).getCenterX();
      doReturn((-1853.1)).when(rectangle2D0).getMaxY();
      doReturn((-2896.75055)).when(rectangle2D0).getMinY();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn(rectangle2D0).when(shape0).getBounds2D();
      GradientPaint gradientPaint1 = standardGradientPaintTransformer0.transform(gradientPaint0, shape0);
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((Rectangle2D) null).when(shape1).getBounds2D();
      standardGradientPaintTransformer0.transform(gradientPaint1, shape1);
      standardGradientPaintTransformer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Shape shape2 = mock(Shape.class, new ViolatedAssumptionAnswer());
      standardGradientPaintTransformer0.hashCode();
      GradientPaintTransformType gradientPaintTransformType0 = standardGradientPaintTransformer0.getType();
      standardGradientPaintTransformer0.equals("$AU(Td(MYpl`kL");
      Shape shape3 = mock(Shape.class, new ViolatedAssumptionAnswer());
      standardGradientPaintTransformer0.equals(gradientPaintTransformType0);
      standardGradientPaintTransformer0.equals(standardGradientPaintTransformer0);
      Object object0 = standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer0.equals(object0);
      StandardGradientPaintTransformer standardGradientPaintTransformer1 = (StandardGradientPaintTransformer)standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer0.getType();
      standardGradientPaintTransformer0.equals((Object) null);
      standardGradientPaintTransformer0.clone();
      standardGradientPaintTransformer0.hashCode();
      standardGradientPaintTransformer0.hashCode();
      standardGradientPaintTransformer0.clone();
      StandardGradientPaintTransformer standardGradientPaintTransformer2 = new StandardGradientPaintTransformer();
      standardGradientPaintTransformer0.equals(standardGradientPaintTransformer2);
      standardGradientPaintTransformer2.hashCode();
      standardGradientPaintTransformer2.clone();
      standardGradientPaintTransformer1.getType();
  }
}
