/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:19:46 GMT 2023
 */

package org.jfree.chart.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ui.Size2D;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Size2D_ESTest extends Size2D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Size2D size2D0 = new Size2D((-1994.98776229051), (-1994.98776229051));
      size2D0.hashCode();
      assertEquals((-1994.98776229051), size2D0.height, 0.01);
      assertEquals((-1994.98776229051), size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Size2D size2D0 = new Size2D();
      size2D0.setWidth((-1.0));
      size2D0.hashCode();
      assertEquals((-1.0), size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Size2D size2D0 = new Size2D(216.0, 216.0);
      size2D0.setHeight(94.5409613);
      size2D0.hashCode();
      assertEquals(94.5409613, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Size2D size2D0 = new Size2D();
      size2D0.setWidth((-214.965738054252));
      Size2D size2D1 = new Size2D();
      size2D1.width = (-214.965738054252);
      boolean boolean0 = size2D1.equals(size2D0);
      assertEquals((-214.965738054252), size2D0.width, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Size2D size2D0 = new Size2D(3080.7, 3080.7);
      Size2D size2D1 = new Size2D((-21.220166), 1.0);
      boolean boolean0 = size2D0.equals(size2D1);
      assertFalse(boolean0);
      assertEquals((-21.220166), size2D1.width, 0.01);
      assertEquals(1.0, size2D1.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Size2D size2D0 = new Size2D(3596.3, 3596.3);
      size2D0.setHeight(1.0);
      size2D0.toString();
      assertEquals(1.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Size2D size2D0 = new Size2D();
      size2D0.width = 243.2912201284;
      double double0 = size2D0.getWidth();
      assertEquals(243.2912201284, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Size2D size2D0 = new Size2D();
      size2D0.setWidth((-214.965738054252));
      double double0 = size2D0.getWidth();
      assertEquals((-214.965738054252), size2D0.width, 0.01);
      assertEquals((-214.965738054252), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Size2D size2D0 = new Size2D((-864.1038432744558), (-864.1038432744558));
      double double0 = size2D0.getHeight();
      assertEquals((-864.1038432744558), size2D0.width, 0.01);
      assertEquals((-864.1038432744558), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Size2D size2D0 = new Size2D(3596.3, 3596.3);
      Object object0 = size2D0.clone();
      size2D0.setHeight(1.0);
      boolean boolean0 = size2D0.equals(object0);
      assertEquals(1.0, size2D0.height, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Size2D size2D0 = new Size2D();
      size2D0.setWidth((-214.965738054252));
      Size2D size2D1 = new Size2D();
      boolean boolean0 = size2D0.equals(size2D1);
      assertEquals((-214.965738054252), size2D0.width, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Size2D size2D0 = new Size2D();
      boolean boolean0 = size2D0.equals(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Size2D size2D0 = new Size2D(3596.3, 3596.3);
      boolean boolean0 = size2D0.equals("Size2D[width=3596.3, height=3596.3]");
      assertEquals(3596.3, size2D0.width, 0.01);
      assertFalse(boolean0);
      assertEquals(3596.3, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Size2D size2D0 = new Size2D();
      double double0 = size2D0.getWidth();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Size2D size2D0 = new Size2D();
      double double0 = size2D0.getHeight();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Size2D size2D0 = new Size2D();
      Object object0 = size2D0.clone();
      size2D0.setHeight(4627.807736979788);
      boolean boolean0 = size2D0.equals(object0);
      assertEquals(4627.807736979788, size2D0.height, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Size2D size2D0 = new Size2D();
      size2D0.setHeight(1.0);
      double double0 = size2D0.getHeight();
      assertEquals(1.0, size2D0.height, 0.01);
      assertEquals(1.0, double0, 0.01);
  }
}
