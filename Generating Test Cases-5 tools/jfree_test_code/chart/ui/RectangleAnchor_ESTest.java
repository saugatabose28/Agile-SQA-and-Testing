/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:45:34 GMT 2023
 */

package org.jfree.chart.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.Size2D;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RectangleAnchor_ESTest extends RectangleAnchor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      assertEquals("RectangleAnchor.TOP_RIGHT", rectangleAnchor0.toString());
      assertEquals(RectangleAnchor.TOP_RIGHT, rectangleAnchor0);
      
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn((-3404.5916)).when(size2D0).getHeight();
      doReturn(1.0).when(size2D0).getWidth();
      Size2D size2D1 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(321.78857).when(size2D1).getHeight();
      doReturn(0.0).when(size2D1).getWidth();
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.CENTER;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D1, (-954.377), 0.0, rectangleAnchor1);
      assertEquals(160.894285, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-954.377), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-954.377), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-954.377), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-160.894285), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-954.377), rectangle2D_Double0.x, 0.01);
      assertEquals(321.78857, rectangle2D_Double0.height, 0.01);
      assertEquals((-160.894285), rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertNotSame(rectangleAnchor1, rectangleAnchor0);
      assertFalse(rectangleAnchor1.equals((Object)rectangleAnchor0));
      
      Point2D.Double point2D_Double0 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double0);
      assertEquals("RectangleAnchor.TOP_RIGHT", rectangleAnchor0.toString());
      assertEquals(160.894285, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-954.377), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-954.377), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-954.377), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-160.894285), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-954.377), rectangle2D_Double0.x, 0.01);
      assertEquals(321.78857, rectangle2D_Double0.height, 0.01);
      assertEquals((-160.894285), rectangle2D_Double0.y, 0.01);
      assertEquals((-160.894285), point2D_Double0.y, 0.01);
      assertEquals((-954.377), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      assertNotSame(rectangleAnchor0, rectangleAnchor1);
      assertNotSame(rectangleAnchor1, rectangleAnchor0);
      assertFalse(rectangleAnchor0.equals((Object)rectangleAnchor1));
      assertFalse(rectangleAnchor1.equals((Object)rectangleAnchor0));
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, (-2020.091130650356), (-1.0), (RectangleAnchor) null);
      assertNull(rectangle2D_Double1);
      
      // Undeclared exception!
      try { 
        rectangleAnchor0.getAnchorPoint((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rectangle' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(size2D0).getHeight();
      doReturn((-1.0)).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.TOP_RIGHT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, (-1230.27800193526), 0.0, rectangleAnchor1);
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
      Size2D size2D1 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D1).getHeight();
      doReturn(1520.0).when(size2D1).getWidth();
      RectangleAnchor rectangleAnchor2 = RectangleAnchor.BOTTOM;
      Rectangle2D rectangle2D1 = RectangleAnchor.createRectangle(size2D1, 0.0, 0.0, rectangleAnchor2);
      rectangleAnchor0.getAnchorPoint(rectangle2D1);
      String string0 = "O_S";
      // Undeclared exception!
      try { 
        RectangleAnchor.valueOf("O_S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jfree.chart.ui.RectangleAnchor.O_S
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(size2D0).getHeight();
      doReturn((-1.0)).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 400.6032625066103, 0.0, rectangleAnchor0);
      RectangleAnchor.values();
      RectangleAnchor.values();
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
      String string0 = "c$caD\"hB,<>";
      // Undeclared exception!
      try { 
        RectangleAnchor.valueOf("c$caD\"hB,<>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jfree.chart.ui.RectangleAnchor.c$caD\"hB,<>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn((-341.50401)).when(size2D0).getHeight();
      doReturn((-341.50401)).when(size2D0).getWidth();
      Size2D size2D1 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn((-2586.576895663874)).when(size2D1).getHeight();
      doReturn((-2586.576895663874)).when(size2D1).getWidth();
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D1, (-741.0), 0.0, rectangleAnchor0);
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.TOP_LEFT;
      RectangleAnchor.createRectangle(size2D0, 1.0, (-1.0), rectangleAnchor1);
      rectangleAnchor0.toString();
      RectangleAnchor.values();
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
      rectangleAnchor1.toString();
      Size2D size2D2 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(2.0).when(size2D2).getHeight();
      doReturn((-2586.576895663874)).when(size2D2).getWidth();
      Rectangle2D rectangle2D1 = RectangleAnchor.createRectangle(size2D2, 1720.8278340282516, (-741.0), rectangleAnchor1);
      rectangleAnchor0.toString();
      rectangleAnchor1.getAnchorPoint(rectangle2D1);
      Size2D size2D3 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D3).getHeight();
      doReturn(0.0).when(size2D3).getWidth();
      RectangleAnchor.createRectangle(size2D3, 0.0, 0.0, rectangleAnchor0);
      Size2D size2D4 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(3989.18686416693).when(size2D4).getHeight();
      doReturn(0.0).when(size2D4).getWidth();
      RectangleAnchor rectangleAnchor2 = RectangleAnchor.BOTTOM_RIGHT;
      Rectangle2D rectangle2D2 = RectangleAnchor.createRectangle(size2D4, 1.0, 0.0, rectangleAnchor2);
      rectangleAnchor1.getAnchorPoint(rectangle2D2);
      Size2D size2D5 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(size2D5).getHeight();
      doReturn(3989.18686416693).when(size2D5).getWidth();
      RectangleAnchor rectangleAnchor3 = RectangleAnchor.TOP;
      Rectangle2D rectangle2D3 = RectangleAnchor.createRectangle(size2D5, 3517.78265, (-1654.325), rectangleAnchor3);
      rectangleAnchor2.getAnchorPoint(rectangle2D3);
      Size2D size2D6 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(690.356687149804).when(size2D6).getHeight();
      doReturn(0.0).when(size2D6).getWidth();
      RectangleAnchor.createRectangle(size2D6, 0.0, 0.0, rectangleAnchor1);
      Size2D size2D7 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D7).getHeight();
      doReturn(1.0).when(size2D7).getWidth();
      RectangleAnchor.createRectangle(size2D7, 1.0, (-4214.160092), rectangleAnchor2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(size2D0).getHeight();
      doReturn((-1.0)).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 0.0, 0.0, rectangleAnchor0);
      rectangleAnchor0.toString();
      RectangleAnchor.values();
      RectangleAnchor.values();
      RectangleAnchor.values();
      rectangleAnchor0.toString();
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
      Size2D size2D1 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn((-359.01762)).when(size2D1).getHeight();
      doReturn(2.0).when(size2D1).getWidth();
      RectangleAnchor.createRectangle(size2D1, 0.0, 0.0, rectangleAnchor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn((-496.8)).when(size2D0).getHeight();
      doReturn((-3438.293271731193)).when(size2D0).getWidth();
      Size2D size2D1 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D1).getHeight();
      doReturn((-496.8)).when(size2D1).getWidth();
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.CENTER;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D1, (-954.377), 0.0, rectangleAnchor1);
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
      Rectangle2D rectangle2D1 = RectangleAnchor.createRectangle(size2D0, (-2020.091130650356), (-1.0), rectangleAnchor0);
      rectangleAnchor0.getAnchorPoint(rectangle2D1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(2661.8893370734).when(size2D0).getHeight();
      doReturn(2661.8893370734).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 0.0, 0.0, rectangleAnchor0);
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
      rectangleAnchor0.toString();
      RectangleAnchor.values();
      rectangleAnchor0.toString();
      RectangleAnchor.values();
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
      rectangleAnchor0.toString();
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
      Size2D size2D1 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn((-2661.8893370734)).when(size2D1).getHeight();
      doReturn(2366.508398).when(size2D1).getWidth();
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.LEFT;
      RectangleAnchor.createRectangle(size2D1, 0.0, 0.0, rectangleAnchor1);
      rectangleAnchor1.getAnchorPoint(rectangle2D0);
      rectangleAnchor1.getAnchorPoint(rectangle2D0);
      RectangleAnchor.values();
      rectangleAnchor0.toString();
      // Undeclared exception!
      try { 
        RectangleAnchor.valueOf("RectangleAnchor.BOTTOM_RIGHT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jfree.chart.ui.RectangleAnchor.RectangleAnchor.BOTTOM_RIGHT
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 2652.256401540211, 0.0, rectangleAnchor0);
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "CENTER";
      RectangleAnchor.valueOf("CENTER");
      Size2D size2D0 = null;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      // Undeclared exception!
      try { 
        RectangleAnchor.createRectangle((Size2D) null, 0.0, 0.0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RectangleAnchor.values();
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 0.0, 0.0, rectangleAnchor0);
      RectangleAnchor.values();
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
      // Undeclared exception!
      try { 
        RectangleAnchor.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jfree.chart.ui.RectangleAnchor.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 0.0, 0.0, rectangleAnchor0);
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
      Size2D size2D1 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D1).getHeight();
      doReturn(0.0).when(size2D1).getWidth();
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.RIGHT;
      Rectangle2D rectangle2D1 = RectangleAnchor.createRectangle(size2D1, 0.0, 0.0, rectangleAnchor1);
      rectangleAnchor0.getAnchorPoint(rectangle2D1);
      rectangleAnchor1.toString();
      RectangleAnchor.values();
      rectangleAnchor1.toString();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      RectangleAnchor.createRectangle(size2D0, 0.0, (-1601.8800627365), rectangleAnchor0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.BOTTOM;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 1012.2988450274933, 0.0, rectangleAnchor1);
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      RectangleAnchor.createRectangle(size2D0, (-1.0), 0.0, rectangleAnchor0);
      rectangleAnchor0.toString();
      Size2D size2D1 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D1).getHeight();
      doReturn(0.0).when(size2D1).getWidth();
      RectangleAnchor.createRectangle(size2D1, (-1.0), (-4857.17958765), rectangleAnchor0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      RectangleAnchor.createRectangle(size2D0, 0.0, 1.0, rectangleAnchor0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RectangleAnchor.values();
      RectangleAnchor.values();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.RIGHT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 0.0, 503.36, rectangleAnchor1);
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RectangleAnchor.values();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn((-2152.0916200836527)).when(size2D0).getHeight();
      doReturn((-4156.76426)).when(size2D0).getWidth();
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 0.0, 0.0, rectangleAnchor0);
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor0);
      
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, 0.0, 0.0, rectangleAnchor0);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double0);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Point2D.Double point2D_Double1 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double0);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertNotNull(point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      
      Size2D size2D1 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D1).getHeight();
      doReturn(0.0).when(size2D1).getWidth();
      Size2D size2D2 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D2).getHeight();
      doReturn(0.0).when(size2D2).getWidth();
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D2, 0.0, 2.0, rectangleAnchor0);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(2.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(2.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D1, 1.0, 2.0, rectangleAnchor0);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(2.0, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(2.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals(2.0, rectangle2D_Double2.y, 0.01);
      assertEquals(1.0, rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01);
      assertNotNull(rectangle2D_Double2);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      
      Point2D.Double point2D_Double2 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double0);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double2.y, 0.01);
      assertEquals(0.0, point2D_Double2.x, 0.01);
      assertNotNull(point2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(point2D_Double2, point2D_Double0);
      assertNotSame(point2D_Double2, point2D_Double1);
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertTrue(point2D_Double2.equals((Object)point2D_Double0));
      assertTrue(point2D_Double2.equals((Object)point2D_Double1));
      
      String string0 = rectangleAnchor0.toString();
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertNotNull(string0);
      assertEquals("RectangleAnchor.CENTER", string0);
      
      RectangleAnchor[] rectangleAnchorArray0 = RectangleAnchor.values();
      assertEquals(9, rectangleAnchorArray0.length);
      assertNotNull(rectangleAnchorArray0);
      
      String string1 = rectangleAnchor0.toString();
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertNotNull(string1);
      assertEquals("RectangleAnchor.CENTER", string1);
      
      String string2 = rectangleAnchor0.toString();
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertNotNull(string2);
      assertEquals("RectangleAnchor.CENTER", string2);
      
      Size2D size2D3 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D3).getHeight();
      doReturn(0.0).when(size2D3).getWidth();
      Rectangle2D.Double rectangle2D_Double3 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D3, 0.0, 1.0, rectangleAnchor0);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Double3.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double3.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double3.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double3.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double3.height, 0.01);
      assertEquals(1.0, rectangle2D_Double3.y, 0.01);
      assertEquals(0.0, rectangle2D_Double3.x, 0.01);
      assertEquals(0.0, rectangle2D_Double3.width, 0.01);
      assertNotNull(rectangle2D_Double3);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double2);
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double2));
      
      // Undeclared exception!
      try { 
        rectangleAnchor0.getAnchorPoint((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rectangle' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RectangleAnchor[] rectangleAnchorArray0 = RectangleAnchor.values();
      assertEquals(9, rectangleAnchorArray0.length);
      assertNotNull(rectangleAnchorArray0);
      
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      double double0 = 4585.78151022;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, 4585.78151022, 0.0, rectangleAnchor0);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(4585.78151022, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(4585.78151022, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(4585.78151022, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(4585.78151022, rectangle2D_Double0.x, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Size2D size2D1 = null;
      // Undeclared exception!
      try { 
        RectangleAnchor.createRectangle((Size2D) null, (-198.15446763465056), (-1.0), rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertEquals(RectangleAnchor.TOP_LEFT, rectangleAnchor0);
      
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, 0.0, 249.53725811, rectangleAnchor0);
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertEquals(249.53725811, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(249.53725811, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(249.53725811, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(249.53725811, rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double0);
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertEquals(249.53725811, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(249.53725811, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(249.53725811, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(249.53725811, rectangle2D_Double0.y, 0.01);
      assertEquals(249.53725811, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, 0.0, 2059.682171, rectangleAnchor0);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(2059.682171, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(2059.682171, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2059.682171, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(2059.682171, rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RectangleAnchor[] rectangleAnchorArray0 = RectangleAnchor.values();
      assertEquals(9, rectangleAnchorArray0.length);
      assertNotNull(rectangleAnchorArray0);
      
      RectangleAnchor[] rectangleAnchorArray1 = RectangleAnchor.values();
      assertEquals(9, rectangleAnchorArray1.length);
      assertNotNull(rectangleAnchorArray1);
      assertNotSame(rectangleAnchorArray1, rectangleAnchorArray0);
      assertFalse(rectangleAnchorArray1.equals((Object)rectangleAnchorArray0));
      
      RectangleAnchor[] rectangleAnchorArray2 = RectangleAnchor.values();
      assertEquals(9, rectangleAnchorArray2.length);
      assertNotNull(rectangleAnchorArray2);
      assertNotSame(rectangleAnchorArray2, rectangleAnchorArray1);
      assertNotSame(rectangleAnchorArray2, rectangleAnchorArray0);
      assertFalse(rectangleAnchorArray2.equals((Object)rectangleAnchorArray1));
      assertFalse(rectangleAnchorArray2.equals((Object)rectangleAnchorArray0));
      
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, 0.0, 0.0, rectangleAnchor0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Size2D size2D1 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D1).getHeight();
      doReturn(0.0).when(size2D1).getWidth();
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.RIGHT;
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D1, 0.0, (-449.503704021), rectangleAnchor1);
      assertEquals((-449.503704021), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-449.503704021), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-449.503704021), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals((-449.503704021), rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangleAnchor1, rectangleAnchor0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertFalse(rectangleAnchor1.equals((Object)rectangleAnchor0));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Point2D.Double point2D_Double0 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double1);
      assertEquals((-449.503704021), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-449.503704021), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-449.503704021), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals((-449.503704021), rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-449.503704021), point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      assertNotSame(rectangleAnchor0, rectangleAnchor1);
      assertNotSame(rectangleAnchor1, rectangleAnchor0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertFalse(rectangleAnchor0.equals((Object)rectangleAnchor1));
      assertFalse(rectangleAnchor1.equals((Object)rectangleAnchor0));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      String string0 = rectangleAnchor1.toString();
      assertNotNull(string0);
      assertNotSame(rectangleAnchor1, rectangleAnchor0);
      assertFalse(rectangleAnchor1.equals((Object)rectangleAnchor0));
      assertEquals("RectangleAnchor.RIGHT", string0);
      
      RectangleAnchor[] rectangleAnchorArray3 = RectangleAnchor.values();
      assertEquals(9, rectangleAnchorArray3.length);
      assertNotNull(rectangleAnchorArray3);
      assertNotSame(rectangleAnchorArray3, rectangleAnchorArray0);
      assertNotSame(rectangleAnchorArray3, rectangleAnchorArray2);
      assertNotSame(rectangleAnchorArray3, rectangleAnchorArray1);
      assertFalse(rectangleAnchorArray3.equals((Object)rectangleAnchorArray0));
      assertFalse(rectangleAnchorArray3.equals((Object)rectangleAnchorArray2));
      assertFalse(rectangleAnchorArray3.equals((Object)rectangleAnchorArray1));
      
      // Undeclared exception!
      try { 
        RectangleAnchor.valueOf("i3!w8l<{ag])@|pdI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jfree.chart.ui.RectangleAnchor.i3!w8l<{ag])@|pdI
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertEquals(RectangleAnchor.RIGHT, rectangleAnchor0);
      
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, 0.0, 0.0, rectangleAnchor0);
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double0);
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Size2D size2D1 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D1).getHeight();
      doReturn(0.0).when(size2D1).getWidth();
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.BOTTOM_RIGHT;
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D1, (-1.0), 0.0, rectangleAnchor1);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangleAnchor1, rectangleAnchor0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertFalse(rectangleAnchor1.equals((Object)rectangleAnchor0));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Point2D.Double point2D_Double1 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double0);
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertNotNull(point2D_Double1);
      assertNotSame(rectangleAnchor0, rectangleAnchor1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertFalse(rectangleAnchor0.equals((Object)rectangleAnchor1));
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      
      String string0 = rectangleAnchor0.toString();
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertNotNull(string0);
      assertNotSame(rectangleAnchor0, rectangleAnchor1);
      assertFalse(rectangleAnchor0.equals((Object)rectangleAnchor1));
      assertEquals("RectangleAnchor.RIGHT", string0);
      
      String string1 = rectangleAnchor0.toString();
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertNotNull(string1);
      assertNotSame(rectangleAnchor0, rectangleAnchor1);
      assertFalse(rectangleAnchor0.equals((Object)rectangleAnchor1));
      assertEquals("RectangleAnchor.RIGHT", string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      assertEquals(RectangleAnchor.BOTTOM_LEFT, rectangleAnchor0);
      
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn((-1463.76)).when(size2D0).getWidth();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, (-2906.737635409842), 0.0, rectangleAnchor0);
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3638.617635409842), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-2906.737635409842), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-4370.497635409842), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-2906.737635409842), rectangle2D_Double0.x, 0.01);
      assertEquals((-1463.76), rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double0);
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3638.617635409842), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-2906.737635409842), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-4370.497635409842), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-2906.737635409842), rectangle2D_Double0.x, 0.01);
      assertEquals((-1463.76), rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-2906.737635409842), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Size2D size2D1 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D1).getHeight();
      doReturn(3224.71449).when(size2D1).getWidth();
      Size2D size2D2 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn((-461.4951982033)).when(size2D2).getHeight();
      doReturn(3265.0).when(size2D2).getWidth();
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.BOTTOM_RIGHT;
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D2, 0.0, 0.0, rectangleAnchor1);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(230.74759910165, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-1632.5), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-3265.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(461.4951982033, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(3265.0, rectangle2D_Double1.width, 0.01);
      assertEquals((-3265.0), rectangle2D_Double1.x, 0.01);
      assertEquals(461.4951982033, rectangle2D_Double1.y, 0.01);
      assertEquals((-461.4951982033), rectangle2D_Double1.height, 0.01);
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangleAnchor1, rectangleAnchor0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertFalse(rectangleAnchor1.equals((Object)rectangleAnchor0));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Point2D.Double point2D_Double1 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double1);
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(230.74759910165, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-1632.5), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-3265.0), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(461.4951982033, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(3265.0, rectangle2D_Double1.width, 0.01);
      assertEquals((-3265.0), rectangle2D_Double1.x, 0.01);
      assertEquals(461.4951982033, rectangle2D_Double1.y, 0.01);
      assertEquals((-461.4951982033), rectangle2D_Double1.height, 0.01);
      assertEquals((-3265.0), point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertNotNull(point2D_Double1);
      assertNotSame(rectangleAnchor0, rectangleAnchor1);
      assertNotSame(rectangleAnchor1, rectangleAnchor0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertFalse(rectangleAnchor0.equals((Object)rectangleAnchor1));
      assertFalse(rectangleAnchor1.equals((Object)rectangleAnchor0));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D1, (-461.4951982033), (-1.0), rectangleAnchor0);
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      assertEquals((-1.0), rectangle2D_Double2.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(1150.8620467966998, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(2763.2192917967, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals((-461.4951982033), rectangle2D_Double2.getMinX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(3224.71449, rectangle2D_Double2.width, 0.01);
      assertEquals((-461.4951982033), rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double2.y, 0.01);
      assertNotNull(rectangle2D_Double2);
      assertNotSame(rectangleAnchor0, rectangleAnchor1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertFalse(rectangleAnchor0.equals((Object)rectangleAnchor1));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      
      Point2D.Double point2D_Double2 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double2);
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      assertEquals((-1.0), rectangle2D_Double2.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(1150.8620467966998, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals(2763.2192917967, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals((-461.4951982033), rectangle2D_Double2.getMinX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(3224.71449, rectangle2D_Double2.width, 0.01);
      assertEquals((-461.4951982033), rectangle2D_Double2.x, 0.01);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double2.y, 0.01);
      assertEquals((-461.4951982033), point2D_Double2.x, 0.01);
      assertEquals((-1.0), point2D_Double2.y, 0.01);
      assertNotNull(point2D_Double2);
      assertNotSame(rectangleAnchor0, rectangleAnchor1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(point2D_Double2, point2D_Double0);
      assertNotSame(point2D_Double2, point2D_Double1);
      assertFalse(rectangleAnchor0.equals((Object)rectangleAnchor1));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertFalse(point2D_Double2.equals((Object)point2D_Double0));
      assertFalse(point2D_Double2.equals((Object)point2D_Double1));
      
      Size2D size2D3 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D3).getHeight();
      doReturn(0.0).when(size2D3).getWidth();
      RectangleAnchor rectangleAnchor2 = RectangleAnchor.LEFT;
      Rectangle2D.Double rectangle2D_Double3 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D3, (-461.4951982033), (-1239.4), rectangleAnchor2);
      assertEquals((-461.4951982033), rectangle2D_Double3.getMinX(), 0.01);
      assertEquals((-461.4951982033), rectangle2D_Double3.getCenterX(), 0.01);
      assertEquals((-461.4951982033), rectangle2D_Double3.getMaxX(), 0.01);
      assertEquals((-1239.4), rectangle2D_Double3.getMaxY(), 0.01);
      assertEquals((-1239.4), rectangle2D_Double3.getMinY(), 0.01);
      assertEquals((-1239.4), rectangle2D_Double3.getCenterY(), 0.01);
      assertEquals((-1239.4), rectangle2D_Double3.y, 0.01);
      assertEquals(0.0, rectangle2D_Double3.height, 0.01);
      assertEquals(0.0, rectangle2D_Double3.width, 0.01);
      assertEquals((-461.4951982033), rectangle2D_Double3.x, 0.01);
      assertNotNull(rectangle2D_Double3);
      assertNotSame(rectangleAnchor2, rectangleAnchor1);
      assertNotSame(rectangleAnchor2, rectangleAnchor0);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double2);
      assertFalse(rectangleAnchor2.equals((Object)rectangleAnchor1));
      assertFalse(rectangleAnchor2.equals((Object)rectangleAnchor0));
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double2));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RectangleAnchor[] rectangleAnchorArray0 = RectangleAnchor.values();
      assertEquals(9, rectangleAnchorArray0.length);
      assertNotNull(rectangleAnchorArray0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      assertEquals("RectangleAnchor.BOTTOM", rectangleAnchor0.toString());
      assertEquals(RectangleAnchor.BOTTOM, rectangleAnchor0);
      
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, 1034.5748343734222, 1034.5748343734222, rectangleAnchor0);
      assertEquals("RectangleAnchor.BOTTOM", rectangleAnchor0.toString());
      assertEquals(1034.5748343734222, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1034.5748343734222, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1034.5748343734222, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1034.5748343734222, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1034.5748343734222, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1034.5748343734222, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1034.5748343734222, rectangle2D_Double0.y, 0.01);
      assertEquals(1034.5748343734222, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double0);
      assertEquals("RectangleAnchor.BOTTOM", rectangleAnchor0.toString());
      assertEquals(1034.5748343734222, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1034.5748343734222, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1034.5748343734222, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1034.5748343734222, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1034.5748343734222, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1034.5748343734222, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1034.5748343734222, rectangle2D_Double0.y, 0.01);
      assertEquals(1034.5748343734222, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1034.5748343734222, point2D_Double0.y, 0.01);
      assertEquals(1034.5748343734222, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      String string0 = rectangleAnchor0.toString();
      assertEquals("RectangleAnchor.BOTTOM", rectangleAnchor0.toString());
      assertNotNull(string0);
      assertEquals("RectangleAnchor.BOTTOM", string0);
      
      String string1 = rectangleAnchor0.toString();
      assertEquals("RectangleAnchor.BOTTOM", rectangleAnchor0.toString());
      assertNotNull(string1);
      assertEquals("RectangleAnchor.BOTTOM", string1);
      
      // Undeclared exception!
      try { 
        RectangleAnchor.valueOf("RectangleAnchor.BOTTOM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jfree.chart.ui.RectangleAnchor.RectangleAnchor.BOTTOM
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, 0.0, 0.0, rectangleAnchor0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      String string0 = rectangleAnchor0.toString();
      assertNotNull(string0);
      assertEquals("RectangleAnchor.BOTTOM_RIGHT", string0);
      
      RectangleAnchor[] rectangleAnchorArray0 = RectangleAnchor.values();
      assertEquals(9, rectangleAnchorArray0.length);
      assertNotNull(rectangleAnchorArray0);
      
      String string1 = rectangleAnchor0.toString();
      assertNotNull(string1);
      assertEquals("RectangleAnchor.BOTTOM_RIGHT", string1);
      
      RectangleAnchor[] rectangleAnchorArray1 = RectangleAnchor.values();
      assertEquals(9, rectangleAnchorArray1.length);
      assertNotNull(rectangleAnchorArray1);
      assertNotSame(rectangleAnchorArray1, rectangleAnchorArray0);
      assertFalse(rectangleAnchorArray1.equals((Object)rectangleAnchorArray0));
      
      Point2D.Double point2D_Double1 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertNotNull(point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      
      String string2 = rectangleAnchor0.toString();
      assertNotNull(string2);
      assertEquals("RectangleAnchor.BOTTOM_RIGHT", string2);
      
      Point2D.Double point2D_Double2 = (Point2D.Double)rectangleAnchor0.getAnchorPoint(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double2.x, 0.01);
      assertEquals(0.0, point2D_Double2.y, 0.01);
      assertNotNull(point2D_Double2);
      assertNotSame(point2D_Double2, point2D_Double0);
      assertNotSame(point2D_Double2, point2D_Double1);
      assertTrue(point2D_Double2.equals((Object)point2D_Double0));
      assertTrue(point2D_Double2.equals((Object)point2D_Double1));
      
      Size2D size2D1 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D1).getHeight();
      doReturn(0.0).when(size2D1).getWidth();
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.LEFT;
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D1, 0.0, 0.0, rectangleAnchor1);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangleAnchor1, rectangleAnchor0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertFalse(rectangleAnchor1.equals((Object)rectangleAnchor0));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      
      Point2D.Double point2D_Double3 = (Point2D.Double)rectangleAnchor1.getAnchorPoint(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double3.y, 0.01);
      assertEquals(0.0, point2D_Double3.x, 0.01);
      assertNotNull(point2D_Double3);
      assertNotSame(rectangleAnchor0, rectangleAnchor1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangleAnchor1, rectangleAnchor0);
      assertNotSame(point2D_Double3, point2D_Double0);
      assertNotSame(point2D_Double3, point2D_Double2);
      assertNotSame(point2D_Double3, point2D_Double1);
      assertFalse(rectangleAnchor0.equals((Object)rectangleAnchor1));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangleAnchor1.equals((Object)rectangleAnchor0));
      assertTrue(point2D_Double3.equals((Object)point2D_Double2));
      assertTrue(point2D_Double3.equals((Object)point2D_Double1));
      assertTrue(point2D_Double3.equals((Object)point2D_Double0));
      
      Point2D.Double point2D_Double4 = (Point2D.Double)rectangleAnchor1.getAnchorPoint(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double4.y, 0.01);
      assertEquals(0.0, point2D_Double4.x, 0.01);
      assertNotNull(point2D_Double4);
      assertNotSame(rectangleAnchor0, rectangleAnchor1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangleAnchor1, rectangleAnchor0);
      assertNotSame(point2D_Double4, point2D_Double2);
      assertNotSame(point2D_Double4, point2D_Double1);
      assertNotSame(point2D_Double4, point2D_Double0);
      assertNotSame(point2D_Double4, point2D_Double3);
      assertFalse(rectangleAnchor0.equals((Object)rectangleAnchor1));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangleAnchor1.equals((Object)rectangleAnchor0));
      assertTrue(point2D_Double4.equals((Object)point2D_Double2));
      assertTrue(point2D_Double4.equals((Object)point2D_Double3));
      assertTrue(point2D_Double4.equals((Object)point2D_Double0));
      assertTrue(point2D_Double4.equals((Object)point2D_Double1));
      
      RectangleAnchor[] rectangleAnchorArray2 = RectangleAnchor.values();
      assertEquals(9, rectangleAnchorArray2.length);
      assertNotNull(rectangleAnchorArray2);
      assertNotSame(rectangleAnchorArray2, rectangleAnchorArray1);
      assertNotSame(rectangleAnchorArray2, rectangleAnchorArray0);
      assertFalse(rectangleAnchorArray2.equals((Object)rectangleAnchorArray1));
      assertFalse(rectangleAnchorArray2.equals((Object)rectangleAnchorArray0));
      
      String string3 = rectangleAnchor0.toString();
      assertNotNull(string3);
      assertNotSame(rectangleAnchor0, rectangleAnchor1);
      assertFalse(rectangleAnchor0.equals((Object)rectangleAnchor1));
      assertEquals("RectangleAnchor.BOTTOM_RIGHT", string3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 0.0, 0.0, rectangleAnchor0);
      assertNotNull(rectangle2D0);
      
      rectangleAnchor0.toString();
      RectangleAnchor.values();
      RectangleAnchor.values();
      RectangleAnchor.values();
      rectangleAnchor0.toString();
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
      Size2D size2D1 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D1).getHeight();
      doReturn(0.0).when(size2D1).getWidth();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D1, 0.0, 0.0, rectangleAnchor0);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D0));
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RectangleAnchor.values();
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(size2D0).getHeight();
      doReturn(0.0).when(size2D0).getWidth();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      RectangleAnchor.createRectangle(size2D0, 0.0, 0.0, rectangleAnchor0);
      rectangleAnchor0.toString();
      RectangleAnchor.values();
      // Undeclared exception!
      try { 
        RectangleAnchor.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jfree.chart.ui.RectangleAnchor.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      Size2D size2D0 = mock(Size2D.class, new ViolatedAssumptionAnswer());
      doReturn(1596.2474462482).when(size2D0).getHeight();
      doReturn(1596.2474462482).when(size2D0).getWidth();
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 0.0, 0.0, rectangleAnchor0);
      rectangleAnchor0.getAnchorPoint(rectangle2D0);
      String string0 = "SwYam&o'Y";
      // Undeclared exception!
      try { 
        RectangleAnchor.valueOf("SwYam&o'Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jfree.chart.ui.RectangleAnchor.SwYam&o'Y
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
