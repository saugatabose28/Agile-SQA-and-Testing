/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:37:23 GMT 2023
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.ui.Size2D;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BorderArrangement_ESTest extends BorderArrangement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = null;
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangleConstraint0).getHeight();
      doReturn(573.5639465775527, 0.0, 573.5639465775527).when(rectangleConstraint0).getWidth();
      Size2D size2D0 = borderArrangement0.arrangeFF((BlockContainer) null, (Graphics2D) null, rectangleConstraint0);
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(size2D0, (Size2D) null).when(block0).arrange(any(java.awt.Graphics2D.class) , any(org.jfree.chart.block.RectangleConstraint.class));
      Block block1 = mock(Block.class, new ViolatedAssumptionAnswer());
      borderArrangement0.add(block1, block1);
      BorderArrangement borderArrangement1 = new BorderArrangement();
      borderArrangement0.equals(borderArrangement1);
      String string0 = "lZR!P.bzt8?k5(P";
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangleConstraint1).getHeight();
      doReturn(573.5639465775527, 0.0, 0.0).when(rectangleConstraint1).getWidth();
      borderArrangement1.arrangeFF((BlockContainer) null, (Graphics2D) null, rectangleConstraint1);
      borderArrangement0.add(block0, "lZR!P.bzt8?k5(P");
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((RectangleConstraint) null).when(blockContainer1).toContentConstraint(any(org.jfree.chart.block.RectangleConstraint.class));
      borderArrangement0.arrangeNN((BlockContainer) null, (Graphics2D) null);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      borderArrangement0.arrangeNN((BlockContainer) null, (Graphics2D) null);
      RectangleConstraint rectangleConstraint2 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer1, graphics2D1, rectangleConstraint2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType1 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(lengthConstraintType1).when(rectangleConstraint0).getWidthConstraintType();
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn(rectangleConstraint0).when(blockContainer0).toContentConstraint(any(org.jfree.chart.block.RectangleConstraint.class));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      borderArrangement0.clear();
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-488.16325), (-488.16325)).when(rectangleConstraint1).getHeight();
      doReturn(0.0, (-488.16325), (-488.16325)).when(rectangleConstraint1).getWidth();
      Size2D size2D0 = borderArrangement0.arrangeFF(blockContainer1, graphics2D1, rectangleConstraint1);
      assertEquals((-488.16325), size2D0.getWidth(), 0.01);
      assertEquals((-488.16325), size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals((-488.16325), size2D0.height, 0.01);
      assertEquals((-488.16325), size2D0.width, 0.01);
      
      borderArrangement0.clear();
      RectangleConstraint rectangleConstraint2 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = null;
      Graphics2D graphics2D0 = null;
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0).when(range0).getUpperBound();
      Size2D size2D0 = borderArrangement0.arrangeRR((BlockContainer) null, range0, range0, (Graphics2D) null);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(size2D0, (Size2D) null).when(block0).arrange(any(java.awt.Graphics2D.class) , any(org.jfree.chart.block.RectangleConstraint.class));
      borderArrangement0.add(block0, block0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      
      boolean boolean0 = borderArrangement0.equals(borderArrangement1);
      assertFalse(boolean0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      
      String string0 = "lZR!P.bzt8?k5(P";
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Size2D size2D1 = borderArrangement0.arrangeNN((BlockContainer) null, (Graphics2D) null);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      assertNotNull(size2D1);
      assertEquals(0.0, size2D1.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(size2D1, size2D0);
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      assertTrue(size2D1.equals((Object)size2D0));
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeNN((BlockContainer) null, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-1659.78535), 1091.0).when(rectangleConstraint0).getHeight();
      doReturn(74.26595999, 0.0, 0.0).when(rectangleConstraint0).getWidth();
      Size2D size2D0 = borderArrangement0.arrangeFF(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(1091.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(1091.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      
      boolean boolean0 = borderArrangement0.equals(borderArrangement1);
      assertTrue(boolean0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertTrue(borderArrangement0.equals((Object)borderArrangement1));
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      
      BorderArrangement borderArrangement2 = new BorderArrangement();
      assertNotNull(borderArrangement2);
      assertTrue(borderArrangement2.equals((Object)borderArrangement1));
      assertTrue(borderArrangement2.equals((Object)borderArrangement0));
      
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D1 = borderArrangement2.arrangeNN(blockContainer1, graphics2D1);
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertNotNull(size2D1);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals(0.0, size2D1.height, 0.01);
      assertNotSame(borderArrangement2, borderArrangement1);
      assertNotSame(borderArrangement2, borderArrangement0);
      assertNotSame(size2D1, size2D0);
      assertTrue(borderArrangement2.equals((Object)borderArrangement1));
      assertTrue(borderArrangement2.equals((Object)borderArrangement0));
      assertFalse(size2D1.equals((Object)size2D0));
      
      borderArrangement2.clear();
      assertNotSame(borderArrangement2, borderArrangement1);
      assertNotSame(borderArrangement2, borderArrangement0);
      assertTrue(borderArrangement2.equals((Object)borderArrangement1));
      assertTrue(borderArrangement2.equals((Object)borderArrangement0));
      
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(1091.0, 0.0).when(rectangleConstraint1).getHeight();
      doReturn(0.0, 1091.0, 1042.0).when(rectangleConstraint1).getWidth();
      Size2D size2D2 = borderArrangement2.arrangeFF(blockContainer2, graphics2D2, rectangleConstraint1);
      assertEquals(0.0, size2D2.getHeight(), 0.01);
      assertEquals(1042.0, size2D2.getWidth(), 0.01);
      assertNotNull(size2D2);
      assertEquals(1042.0, size2D2.width, 0.01);
      assertEquals(0.0, size2D2.height, 0.01);
      assertNotSame(borderArrangement2, borderArrangement1);
      assertNotSame(borderArrangement2, borderArrangement0);
      assertNotSame(size2D2, size2D0);
      assertNotSame(size2D2, size2D1);
      assertTrue(borderArrangement2.equals((Object)borderArrangement1));
      assertTrue(borderArrangement2.equals((Object)borderArrangement0));
      assertFalse(size2D2.equals((Object)size2D0));
      assertFalse(size2D2.equals((Object)size2D1));
      
      boolean boolean1 = borderArrangement0.equals(borderArrangement2);
      assertTrue(boolean1);
      assertNotSame(borderArrangement0, borderArrangement2);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement2, borderArrangement1);
      assertNotSame(borderArrangement2, borderArrangement0);
      assertTrue(boolean1 == boolean0);
      assertTrue(borderArrangement0.equals((Object)borderArrangement1));
      assertTrue(borderArrangement0.equals((Object)borderArrangement2));
      assertTrue(borderArrangement2.equals((Object)borderArrangement1));
      assertTrue(borderArrangement2.equals((Object)borderArrangement0));
      
      BlockContainer blockContainer3 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint2 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1141.4).when(rectangleConstraint2).getHeight();
      doReturn((-528.5629486348647), 0.0, 0.0).when(rectangleConstraint2).getWidth();
      Size2D size2D3 = borderArrangement2.arrangeFF(blockContainer3, graphics2D3, rectangleConstraint2);
      assertEquals(1141.4, size2D3.getHeight(), 0.01);
      assertEquals(0.0, size2D3.getWidth(), 0.01);
      assertNotNull(size2D3);
      assertEquals(0.0, size2D3.width, 0.01);
      assertEquals(1141.4, size2D3.height, 0.01);
      assertNotSame(size2D3, size2D1);
      assertNotSame(size2D3, size2D0);
      assertNotSame(size2D3, size2D2);
      assertNotSame(borderArrangement2, borderArrangement1);
      assertNotSame(borderArrangement2, borderArrangement0);
      assertFalse(size2D3.equals((Object)size2D1));
      assertFalse(size2D3.equals((Object)size2D0));
      assertFalse(size2D3.equals((Object)size2D2));
      assertTrue(borderArrangement2.equals((Object)borderArrangement1));
      assertTrue(borderArrangement2.equals((Object)borderArrangement0));
      
      BlockContainer blockContainer4 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint3 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer5 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint4 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(rectangleConstraint4).getWidth();
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR(blockContainer5, graphics2D4, rectangleConstraint4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      borderArrangement0.clear();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn(rectangleConstraint0).when(blockContainer0).toContentConstraint(any(org.jfree.chart.block.RectangleConstraint.class));
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-2469.9), 1.0).when(rectangleConstraint1).getHeight();
      doReturn(1.0, (-2469.9), 1.0).when(rectangleConstraint1).getWidth();
      Size2D size2D0 = borderArrangement0.arrangeFF(blockContainer1, graphics2D0, rectangleConstraint1);
      assertEquals(1.0, size2D0.getHeight(), 0.01);
      assertEquals(1.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(1.0, size2D0.width, 0.01);
      assertEquals(1.0, size2D0.height, 0.01);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer0, graphics2D1, 0.0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangleConstraint0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangleConstraint0).getWidth();
      Size2D size2D0 = borderArrangement0.arrangeFF(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(size2D0).when(block0).arrange(any(java.awt.Graphics2D.class) , any(org.jfree.chart.block.RectangleConstraint.class));
      borderArrangement0.add(block0, block0);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((RectangleConstraint) null).when(blockContainer1).toContentConstraint(any(org.jfree.chart.block.RectangleConstraint.class));
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer1, graphics2D1, 152.73316744963);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      
      BlockContainer blockContainer1 = null;
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-114.461701), (-114.461701)).when(rectangleConstraint0).getHeight();
      doReturn((-114.461701), 0.0, (-114.461701)).when(rectangleConstraint0).getWidth();
      Size2D size2D1 = borderArrangement0.arrangeFF((BlockContainer) null, (Graphics2D) null, rectangleConstraint0);
      assertEquals((-114.461701), size2D1.getWidth(), 0.01);
      assertEquals((-114.461701), size2D1.getHeight(), 0.01);
      assertNotNull(size2D1);
      assertEquals((-114.461701), size2D1.height, 0.01);
      assertEquals((-114.461701), size2D1.width, 0.01);
      assertNotSame(size2D1, size2D0);
      assertFalse(size2D1.equals((Object)size2D0));
      
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFF((BlockContainer) null, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      borderArrangement0.clear();
      borderArrangement0.clear();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(3274.648849865, 3080.68355).when(rectangleConstraint0).getHeight();
      doReturn(3274.648849865, 0.0, 3080.68355).when(rectangleConstraint0).getWidth();
      Size2D size2D0 = borderArrangement0.arrangeFF(blockContainer1, graphics2D1, rectangleConstraint0);
      assertEquals(3080.68355, size2D0.getHeight(), 0.01);
      assertEquals(3080.68355, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(3080.68355, size2D0.height, 0.01);
      assertEquals(3080.68355, size2D0.width, 0.01);
      
      RectangleConstraint rectangleConstraint1 = null;
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR(blockContainer2, graphics2D2, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((LengthConstraintType) null).when(rectangleConstraint1).getHeightConstraintType();
      doReturn((LengthConstraintType) null).when(rectangleConstraint1).getWidthConstraintType();
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn(rectangleConstraint1).when(blockContainer1).toContentConstraint(any(org.jfree.chart.block.RectangleConstraint.class));
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      borderArrangement0.clear();
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0).when(range0).getUpperBound();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer2, range0, range0, graphics2D2);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      
      BlockContainer blockContainer3 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint2 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangleConstraint2).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangleConstraint2).getWidth();
      Size2D size2D1 = borderArrangement0.arrangeFF(blockContainer3, (Graphics2D) null, rectangleConstraint2);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      assertNotNull(size2D1);
      assertEquals(0.0, size2D1.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertNotSame(size2D1, size2D0);
      assertTrue(size2D1.equals((Object)size2D0));
      
      RectangleConstraint rectangleConstraint3 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(739.3411602).when(rectangleConstraint3).getWidth();
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR(blockContainer1, graphics2D1, rectangleConstraint3);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      borderArrangement0.clear();
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn(rectangleConstraint0).when(blockContainer1).toContentConstraint(any(org.jfree.chart.block.RectangleConstraint.class));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer1, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      boolean boolean0 = borderArrangement0.equals(borderArrangement0);
      assertTrue(boolean0);
      
      boolean boolean1 = borderArrangement0.equals(borderArrangement0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range1).getLowerBound();
      doReturn(0.0, 0.0).when(range1).getUpperBound();
      Range range2 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range2).getLowerBound();
      doReturn(0.0).when(range2).getUpperBound();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer1, range1, range2, graphics2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = null;
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFF(blockContainer2, graphics2D1, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = null;
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangleConstraint0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangleConstraint0).getWidth();
      Size2D size2D0 = borderArrangement0.arrangeFF((BlockContainer) null, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Size2D) null).when(block0).arrange(any(java.awt.Graphics2D.class) , any(org.jfree.chart.block.RectangleConstraint.class));
      Block block1 = mock(Block.class, new ViolatedAssumptionAnswer());
      borderArrangement0.add(block1, block1);
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      
      boolean boolean0 = borderArrangement0.equals(borderArrangement1);
      assertFalse(boolean0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      
      String string0 = "lZR!P.bzt8?k5(P";
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangleConstraint1).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangleConstraint1).getWidth();
      Size2D size2D1 = borderArrangement1.arrangeFF((BlockContainer) null, (Graphics2D) null, rectangleConstraint1);
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertNotNull(size2D1);
      assertEquals(0.0, size2D1.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(size2D1, size2D0);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertTrue(size2D1.equals((Object)size2D0));
      
      borderArrangement0.add(block0, "lZR!P.bzt8?k5(P");
      assertNotSame(borderArrangement0, borderArrangement1);
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeNN((BlockContainer) null, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer0, graphics2D0, (-1139.658762041));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1139.658762041).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer3 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((RectangleConstraint) null).when(blockContainer3).toContentConstraint(any(org.jfree.chart.block.RectangleConstraint.class));
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer3, graphics2D2, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      borderArrangement0.clear();
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Size2D) null, (Size2D) null).when(block0).arrange(any(java.awt.Graphics2D.class) , any(org.jfree.chart.block.RectangleConstraint.class));
      borderArrangement0.add(block0, block0);
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangleConstraint0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangleConstraint0).getWidth();
      Size2D size2D0 = borderArrangement0.arrangeFF(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0).when(range0).getUpperBound();
      Graphics2D graphics2D1 = null;
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeRR(blockContainer1, range0, range0, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((RectangleConstraint) null).when(blockContainer0).toContentConstraint(any(org.jfree.chart.block.RectangleConstraint.class));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer1, graphics2D1);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((RectangleConstraint) null).when(blockContainer0).toContentConstraint(any(org.jfree.chart.block.RectangleConstraint.class));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      
      boolean boolean0 = borderArrangement0.equals(borderArrangement1);
      assertTrue(boolean0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertTrue(borderArrangement0.equals((Object)borderArrangement1));
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = null;
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeRR((BlockContainer) null, (Range) null, (Range) null, graphics2D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Size2D) null).when(block0).arrange(any(java.awt.Graphics2D.class) , any(org.jfree.chart.block.RectangleConstraint.class));
      borderArrangement0.add(block0, "x^$a");
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0).when(range0).getUpperBound();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = borderArrangement0.arrangeNN((BlockContainer) null, graphics2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Size2D) null, (Size2D) null).when(block0).arrange(any(java.awt.Graphics2D.class) , any(org.jfree.chart.block.RectangleConstraint.class));
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0).when(range0).getUpperBound();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      
      Block block1 = mock(Block.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = borderArrangement0.equals(size2D0);
      assertFalse(boolean0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      
      borderArrangement0.add(block1, (Object) null);
      borderArrangement0.add(block0, block0);
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangleConstraint0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangleConstraint0).getWidth();
      Size2D size2D1 = borderArrangement0.arrangeFF(blockContainer1, graphics2D1, rectangleConstraint0);
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertNotNull(size2D1);
      assertEquals(0.0, size2D1.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertNotSame(size2D1, size2D0);
      assertTrue(size2D1.equals((Object)size2D0));
      
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer3 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeNN(blockContainer3, graphics2D2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn(rectangleConstraint0).when(blockContainer0).toContentConstraint(any(org.jfree.chart.block.RectangleConstraint.class));
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(rectangleConstraint1).getHeight();
      doReturn((-1861.4205), 0.0, 1.0).when(rectangleConstraint1).getWidth();
      Size2D size2D0 = borderArrangement0.arrangeFF(blockContainer1, graphics2D0, rectangleConstraint1);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(1.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(1.0, size2D0.width, 0.01);
      
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 225.198298050488).when(range0).getLowerBound();
      doReturn(3357.820787485178, 0.0, 3357.820787485178).when(range0).getUpperBound();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D1 = borderArrangement0.arrangeRR(blockContainer2, range0, range0, graphics2D1);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      assertNotNull(size2D1);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals(0.0, size2D1.height, 0.01);
      assertNotSame(size2D1, size2D0);
      assertFalse(size2D1.equals((Object)size2D0));
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint2 = null;
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer0, graphics2D2, (RectangleConstraint) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((RectangleConstraint) null).when(blockContainer1).toContentConstraint(any(org.jfree.chart.block.RectangleConstraint.class));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = borderArrangement1.equals(borderArrangement0);
      assertTrue(boolean0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertTrue(borderArrangement0.equals((Object)borderArrangement1));
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement1.arrange(blockContainer1, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      
      boolean boolean0 = borderArrangement0.equals(borderArrangement1);
      assertTrue(boolean0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertTrue(borderArrangement0.equals((Object)borderArrangement1));
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      
      boolean boolean1 = borderArrangement0.equals((Object) null);
      assertFalse(boolean1);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertTrue(borderArrangement0.equals((Object)borderArrangement1));
      assertFalse(boolean1 == boolean0);
      
      BorderArrangement borderArrangement2 = new BorderArrangement();
      assertNotNull(borderArrangement2);
      assertTrue(borderArrangement2.equals((Object)borderArrangement1));
      assertTrue(borderArrangement2.equals((Object)borderArrangement0));
      
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn(rectangleConstraint0).when(blockContainer0).toContentConstraint(any(org.jfree.chart.block.RectangleConstraint.class));
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(5168.32).when(rectangleConstraint1).getWidth();
      // Undeclared exception!
      try { 
        borderArrangement1.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Size2D) null).when(block0).arrange(any(java.awt.Graphics2D.class) , any(org.jfree.chart.block.RectangleConstraint.class));
      borderArrangement0.add(block0, block0);
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      
      boolean boolean0 = borderArrangement0.equals(borderArrangement1);
      assertFalse(boolean0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer0, graphics2D0, 3972.90950779);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      boolean boolean0 = borderArrangement0.equals((Object) null);
      assertFalse(boolean0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      borderArrangement0.clear();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0).when(range0).getUpperBound();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer1, range0, range0, graphics2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      
      borderArrangement0.clear();
      boolean boolean1 = borderArrangement0.equals(size2D0);
      assertFalse(boolean1);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertTrue(boolean1 == boolean0);
      
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer2, graphics2D1, (-982.440354362246));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-982.440354362246).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(1634.71808).when(range0).getLowerBound();
      doReturn((-377.955)).when(range0).getUpperBound();
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Range range1 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range1).getLowerBound();
      doReturn(0.0, 0.0).when(range1).getUpperBound();
      Range range2 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(range2).getLowerBound();
      doReturn(0.0).when(range2).getUpperBound();
      Size2D size2D1 = borderArrangement0.arrangeRR(blockContainer2, range1, range2, (Graphics2D) null);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      assertNotNull(size2D1);
      assertEquals(0.0, size2D1.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertNotSame(size2D1, size2D0);
      assertTrue(size2D1.equals((Object)size2D0));
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeRR(blockContainer1, range0, range0, graphics2D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1634.71808) <= upper (-377.955).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((-2224.69198), (-2224.69198), (-2224.69198)).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0).when(range0).getUpperBound();
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer1, graphics2D0);
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(size2D0, (Size2D) null).when(block0).arrange(any(java.awt.Graphics2D.class) , any(org.jfree.chart.block.RectangleConstraint.class));
      borderArrangement0.add(block0, block0);
      Graphics2D graphics2D1 = null;
      borderArrangement0.arrangeRR(blockContainer0, range0, range0, (Graphics2D) null);
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer2, (Graphics2D) null, 996.32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }
}
