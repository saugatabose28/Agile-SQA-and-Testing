/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:34:42 GMT 2023
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.ui.Size2D;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RectangleConstraint_ESTest extends RectangleConstraint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.combine((Range) null, (Range) null);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(2.0, (Range) null, lengthConstraintType0, 2.0, (Range) null, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      rectangleConstraint1.toUnconstrainedHeight();
      rectangleConstraint1.getWidthConstraintType();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.NONE.toUnconstrainedWidth();
      rectangleConstraint0.toString();
      RectangleConstraint rectangleConstraint2 = rectangleConstraint0.toUnconstrainedHeight();
      Range range1 = rectangleConstraint2.getHeightRange();
      RectangleConstraint rectangleConstraint3 = rectangleConstraint1.toUnconstrainedWidth();
      Size2D size2D0 = new Size2D((-1.0), (-1.0));
      rectangleConstraint0.calculateConstrainedSize(size2D0);
      Size2D size2D1 = new Size2D();
      rectangleConstraint3.NONE.calculateConstrainedSize(size2D1);
      Range range2 = Range.combine(range1, range1);
      Range range3 = Range.expandToInclude(range1, 2560.3382);
      Range.expand(range3, 0.0, 0.0);
      RectangleConstraint rectangleConstraint4 = rectangleConstraint2.toRangeWidth(range2);
      rectangleConstraint4.toFixedHeight((-1.0));
      rectangleConstraint4.getWidthConstraintType();
      RectangleConstraint rectangleConstraint5 = rectangleConstraint3.toFixedWidth((-1.0));
      rectangleConstraint3.getHeightConstraintType();
      rectangleConstraint2.getWidthRange();
      rectangleConstraint2.toString();
      rectangleConstraint5.toFixedHeight(0.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = (-2039.7842);
      Range range0 = new Range((-2039.7842), (-2039.7842));
      double double1 = 2513.53733389337;
      RectangleConstraint rectangleConstraint0 = null;
      try {
        rectangleConstraint0 = new RectangleConstraint((-2039.7842), range0, (LengthConstraintType) null, 2513.53733389337, range0, (LengthConstraintType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0);
      Range.expandToInclude(range0, 0.0);
      range1.toString();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range1, 492.362329);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.NONE.toUnconstrainedHeight();
      rectangleConstraint0.getHeightConstraintType();
      rectangleConstraint0.getWidthRange();
      rectangleConstraint1.toFixedWidth(0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1.0), (-1.0));
      assertNotNull(rectangleConstraint0);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      rectangleConstraint0.getWidth();
      rectangleConstraint1.getWidth();
      Size2D size2D0 = new Size2D();
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      rectangleConstraint1.NONE.calculateConstrainedSize(size2D1);
      Size2D size2D2 = null;
      // Undeclared exception!
      try { 
        rectangleConstraint1.calculateConstrainedSize((Size2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.RectangleConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(0.0, 1.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 1.0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeHeight(range0);
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toUnconstrainedHeight();
      rectangleConstraint2.toRangeHeight(range0);
      rectangleConstraint0.toUnconstrainedWidth();
      rectangleConstraint0.NONE.toString();
      RectangleConstraint rectangleConstraint3 = rectangleConstraint2.toRangeHeight(range0);
      rectangleConstraint0.toUnconstrainedHeight();
      RectangleConstraint rectangleConstraint4 = rectangleConstraint2.toRangeHeight(range0);
      RectangleConstraint rectangleConstraint5 = rectangleConstraint4.toUnconstrainedWidth();
      Size2D size2D0 = new Size2D((-874.7389), 123.4758369603);
      rectangleConstraint5.calculateConstrainedSize(size2D0);
      rectangleConstraint3.toRangeWidth(range0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range.shift(range0, 0.0, true);
      Range range1 = Range.shift(range0, 0.0, false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range1);
      Range.expandToInclude(range0, (-7.364200097));
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.NONE.toUnconstrainedWidth();
      RectangleConstraint rectangleConstraint2 = rectangleConstraint0.NONE.toRangeHeight(range1);
      RectangleConstraint rectangleConstraint3 = rectangleConstraint2.NONE.toRangeWidth(range1);
      rectangleConstraint0.toFixedWidth(0.0);
      rectangleConstraint0.getWidthRange();
      rectangleConstraint0.getWidthRange();
      RectangleConstraint rectangleConstraint4 = rectangleConstraint1.toUnconstrainedHeight();
      rectangleConstraint4.NONE.toString();
      rectangleConstraint1.getHeight();
      rectangleConstraint0.getHeightRange();
      // Undeclared exception!
      try { 
        rectangleConstraint3.toRangeWidth((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-2664.267613274592), 4454.945927);
      assertNotNull(range0);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      
      Range range1 = Range.expandToInclude(range0, 626.6786275);
      assertNotNull(range1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      
      Range range2 = Range.scale(range1, 0.0);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      
      Range range3 = Range.combineIgnoringNaN(range2, range1);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      assertNotNull(lengthConstraintType0);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-2664.267613274592), range3, lengthConstraintType0, 4454.945927, range3, lengthConstraintType0);
      assertNotNull(rectangleConstraint0);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint1);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint1.getWidth(), 0.01);
      
      Size2D size2D0 = new Size2D();
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      
      Size2D size2D1 = (Size2D)size2D0.clone();
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals(0.0, size2D1.height, 0.01);
      assertNotNull(size2D1);
      assertTrue(size2D1.equals((Object)size2D0));
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      
      Size2D size2D2 = rectangleConstraint1.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D2.width, 0.01);
      assertEquals(0.0, size2D2.height, 0.01);
      assertNotNull(size2D2);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertTrue(size2D0.equals((Object)size2D1));
      assertTrue(size2D2.equals((Object)size2D1));
      assertTrue(size2D2.equals((Object)size2D0));
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D2, size2D0);
      assertNotSame(size2D2, size2D1);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D2.getWidth(), 0.01);
      assertEquals(0.0, size2D2.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint0.NONE.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint2);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      
      String string0 = rectangleConstraint2.NONE.toString();
      assertNotNull(string0);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals("RectangleConstraint[LengthConstraintType.NONE: width=0.0, height=0.0]", string0);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      
      Size2D size2D3 = rectangleConstraint0.NONE.calculateConstrainedSize(size2D2);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D2.width, 0.01);
      assertEquals(0.0, size2D2.height, 0.01);
      assertEquals(0.0, size2D3.width, 0.01);
      assertEquals(0.0, size2D3.height, 0.01);
      assertNotNull(size2D3);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertTrue(size2D0.equals((Object)size2D1));
      assertTrue(size2D0.equals((Object)size2D2));
      assertTrue(size2D2.equals((Object)size2D1));
      assertTrue(size2D2.equals((Object)size2D0));
      assertTrue(size2D3.equals((Object)size2D1));
      assertTrue(size2D3.equals((Object)size2D0));
      assertTrue(size2D3.equals((Object)size2D2));
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(size2D0, size2D3);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D2, size2D3);
      assertNotSame(size2D2, size2D0);
      assertNotSame(size2D2, size2D1);
      assertNotSame(size2D3, size2D0);
      assertNotSame(size2D3, size2D2);
      assertNotSame(size2D3, size2D1);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D2.getWidth(), 0.01);
      assertEquals(0.0, size2D2.getHeight(), 0.01);
      assertEquals(0.0, size2D3.getWidth(), 0.01);
      assertEquals(0.0, size2D3.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint3 = rectangleConstraint0.NONE.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint3);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      
      Range range4 = Range.combineIgnoringNaN(range0, range3);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(895.3391568627039, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(4454.945927, range4.getUpperBound(), 0.01);
      assertEquals((-2664.267613274592), range4.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range4.getLength(), 0.01);
      
      RectangleConstraint rectangleConstraint4 = rectangleConstraint3.toRangeWidth(range0);
      assertNotNull(rectangleConstraint4);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint4);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      assertEquals(4454.945927, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      
      Range range5 = rectangleConstraint0.getHeightRange();
      assertNotNull(range5);
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertSame(range3, range5);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertEquals(895.3391568627039, range5.getCentralValue(), 0.01);
      assertEquals(7119.213540274592, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(4454.945927, range5.getUpperBound(), 0.01);
      assertEquals((-2664.267613274592), range5.getLowerBound(), 0.01);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint5 = rectangleConstraint0.toRangeWidth(range3);
      assertNotNull(rectangleConstraint5);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(rectangleConstraint5, rectangleConstraint1);
      assertNotSame(rectangleConstraint5, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint4);
      assertNotSame(rectangleConstraint5, rectangleConstraint0);
      assertNotSame(rectangleConstraint5, rectangleConstraint2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertSame(range3, range5);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, rectangleConstraint5.getWidth(), 0.01);
      assertEquals(4454.945927, rectangleConstraint5.getHeight(), 0.01);
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      
      Size2D size2D4 = rectangleConstraint5.calculateConstrainedSize(size2D3);
      assertEquals(0.0, size2D4.width, 0.01);
      assertEquals(0.0, size2D4.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D2.width, 0.01);
      assertEquals(0.0, size2D2.height, 0.01);
      assertEquals(0.0, size2D3.width, 0.01);
      assertEquals(0.0, size2D3.height, 0.01);
      assertNotNull(size2D4);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertTrue(size2D4.equals((Object)size2D2));
      assertTrue(size2D4.equals((Object)size2D3));
      assertTrue(size2D4.equals((Object)size2D1));
      assertTrue(size2D4.equals((Object)size2D0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertTrue(size2D0.equals((Object)size2D1));
      assertTrue(size2D0.equals((Object)size2D2));
      assertTrue(size2D0.equals((Object)size2D3));
      assertTrue(size2D2.equals((Object)size2D1));
      assertTrue(size2D2.equals((Object)size2D0));
      assertTrue(size2D2.equals((Object)size2D3));
      assertTrue(size2D3.equals((Object)size2D1));
      assertTrue(size2D3.equals((Object)size2D0));
      assertTrue(size2D3.equals((Object)size2D2));
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(rectangleConstraint5, rectangleConstraint1);
      assertNotSame(rectangleConstraint5, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint4);
      assertNotSame(rectangleConstraint5, rectangleConstraint0);
      assertNotSame(rectangleConstraint5, rectangleConstraint2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(size2D4, size2D1);
      assertNotSame(size2D4, size2D2);
      assertNotSame(size2D4, size2D0);
      assertNotSame(size2D4, size2D3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertSame(range3, range5);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(size2D0, size2D4);
      assertNotSame(size2D0, size2D3);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D2, size2D4);
      assertNotSame(size2D2, size2D3);
      assertNotSame(size2D2, size2D0);
      assertNotSame(size2D2, size2D1);
      assertNotSame(size2D3, size2D4);
      assertNotSame(size2D3, size2D0);
      assertNotSame(size2D3, size2D2);
      assertNotSame(size2D3, size2D1);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, rectangleConstraint5.getWidth(), 0.01);
      assertEquals(4454.945927, rectangleConstraint5.getHeight(), 0.01);
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, size2D4.getHeight(), 0.01);
      assertEquals(0.0, size2D4.getWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D2.getWidth(), 0.01);
      assertEquals(0.0, size2D2.getHeight(), 0.01);
      assertEquals(0.0, size2D3.getWidth(), 0.01);
      assertEquals(0.0, size2D3.getHeight(), 0.01);
      
      Size2D size2D5 = rectangleConstraint5.NONE.calculateConstrainedSize(size2D4);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D2.width, 0.01);
      assertEquals(0.0, size2D2.height, 0.01);
      assertEquals(0.0, size2D3.width, 0.01);
      assertEquals(0.0, size2D3.height, 0.01);
      assertEquals(0.0, size2D4.width, 0.01);
      assertEquals(0.0, size2D4.height, 0.01);
      assertEquals(0.0, size2D5.width, 0.01);
      assertEquals(0.0, size2D5.height, 0.01);
      assertNotNull(size2D5);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertTrue(size2D0.equals((Object)size2D1));
      assertTrue(size2D0.equals((Object)size2D2));
      assertTrue(size2D0.equals((Object)size2D4));
      assertTrue(size2D0.equals((Object)size2D3));
      assertTrue(size2D2.equals((Object)size2D1));
      assertTrue(size2D2.equals((Object)size2D0));
      assertTrue(size2D2.equals((Object)size2D4));
      assertTrue(size2D2.equals((Object)size2D3));
      assertTrue(size2D3.equals((Object)size2D1));
      assertTrue(size2D3.equals((Object)size2D0));
      assertTrue(size2D3.equals((Object)size2D2));
      assertTrue(size2D3.equals((Object)size2D4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint2));
      assertTrue(size2D4.equals((Object)size2D2));
      assertTrue(size2D4.equals((Object)size2D3));
      assertTrue(size2D4.equals((Object)size2D1));
      assertTrue(size2D4.equals((Object)size2D0));
      assertTrue(size2D5.equals((Object)size2D3));
      assertTrue(size2D5.equals((Object)size2D4));
      assertTrue(size2D5.equals((Object)size2D0));
      assertTrue(size2D5.equals((Object)size2D1));
      assertTrue(size2D5.equals((Object)size2D2));
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertSame(range3, range5);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(size2D0, size2D4);
      assertNotSame(size2D0, size2D3);
      assertNotSame(size2D0, size2D5);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D2, size2D4);
      assertNotSame(size2D2, size2D3);
      assertNotSame(size2D2, size2D5);
      assertNotSame(size2D2, size2D0);
      assertNotSame(size2D2, size2D1);
      assertNotSame(size2D3, size2D4);
      assertNotSame(size2D3, size2D5);
      assertNotSame(size2D3, size2D0);
      assertNotSame(size2D3, size2D2);
      assertNotSame(size2D3, size2D1);
      assertNotSame(rectangleConstraint5, rectangleConstraint1);
      assertNotSame(rectangleConstraint5, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint4);
      assertNotSame(rectangleConstraint5, rectangleConstraint0);
      assertNotSame(rectangleConstraint5, rectangleConstraint2);
      assertNotSame(size2D4, size2D1);
      assertNotSame(size2D4, size2D2);
      assertNotSame(size2D4, size2D5);
      assertNotSame(size2D4, size2D0);
      assertNotSame(size2D4, size2D3);
      assertNotSame(size2D5, size2D2);
      assertNotSame(size2D5, size2D1);
      assertNotSame(size2D5, size2D3);
      assertNotSame(size2D5, size2D4);
      assertNotSame(size2D5, size2D0);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D2.getWidth(), 0.01);
      assertEquals(0.0, size2D2.getHeight(), 0.01);
      assertEquals(0.0, size2D3.getWidth(), 0.01);
      assertEquals(0.0, size2D3.getHeight(), 0.01);
      assertEquals(4454.945927, rectangleConstraint5.getWidth(), 0.01);
      assertEquals(4454.945927, rectangleConstraint5.getHeight(), 0.01);
      assertEquals(0.0, size2D4.getHeight(), 0.01);
      assertEquals(0.0, size2D4.getWidth(), 0.01);
      assertEquals(0.0, size2D5.getWidth(), 0.01);
      assertEquals(0.0, size2D5.getHeight(), 0.01);
      
      Range range6 = rectangleConstraint5.getWidthRange();
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(rectangleConstraint5, rectangleConstraint1);
      assertNotSame(rectangleConstraint5, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint4);
      assertNotSame(rectangleConstraint5, rectangleConstraint0);
      assertNotSame(rectangleConstraint5, rectangleConstraint2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertSame(range3, range5);
      assertNotSame(range3, range0);
      assertSame(range3, range6);
      assertNotSame(range6, range2);
      assertNotSame(range6, range1);
      assertNotSame(range6, range4);
      assertSame(range6, range5);
      assertSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, rectangleConstraint5.getWidth(), 0.01);
      assertEquals(4454.945927, rectangleConstraint5.getHeight(), 0.01);
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertFalse(range6.isNaNRange());
      assertEquals(7119.213540274592, range6.getLength(), 0.01);
      assertEquals(4454.945927, range6.getUpperBound(), 0.01);
      assertEquals(895.3391568627039, range6.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range6.getLowerBound(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint6 = rectangleConstraint3.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint6);
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertSame(range3, range5);
      assertNotSame(range3, range0);
      assertSame(range3, range6);
      assertNotSame(rectangleConstraint6, rectangleConstraint1);
      assertNotSame(rectangleConstraint6, rectangleConstraint4);
      assertNotSame(rectangleConstraint6, rectangleConstraint0);
      assertNotSame(rectangleConstraint6, rectangleConstraint5);
      assertSame(rectangleConstraint6, rectangleConstraint3);
      assertSame(rectangleConstraint6, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint5);
      assertSame(rectangleConstraint3, rectangleConstraint6);
      assertNotSame(rectangleConstraint3, rectangleConstraint4);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint6.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint6.getWidth(), 0.01);
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      
      String string1 = rectangleConstraint5.toString();
      assertNotNull(string1);
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint6));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(rectangleConstraint5, rectangleConstraint1);
      assertNotSame(rectangleConstraint5, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint4);
      assertNotSame(rectangleConstraint5, rectangleConstraint0);
      assertNotSame(rectangleConstraint5, rectangleConstraint2);
      assertNotSame(rectangleConstraint5, rectangleConstraint6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertSame(range3, range5);
      assertNotSame(range3, range0);
      assertSame(range3, range6);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertEquals("RectangleConstraint[RectangleConstraintType.RANGE: width=4454.945927, height=4454.945927]", string1);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, rectangleConstraint5.getWidth(), 0.01);
      assertEquals(4454.945927, rectangleConstraint5.getHeight(), 0.01);
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint7 = rectangleConstraint3.toRangeHeight(range2);
      assertNotNull(rectangleConstraint7);
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertSame(range3, range5);
      assertNotSame(range3, range0);
      assertSame(range3, range6);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint7, rectangleConstraint2);
      assertNotSame(rectangleConstraint7, rectangleConstraint5);
      assertNotSame(rectangleConstraint7, rectangleConstraint0);
      assertNotSame(rectangleConstraint7, rectangleConstraint1);
      assertNotSame(rectangleConstraint7, rectangleConstraint3);
      assertNotSame(rectangleConstraint7, rectangleConstraint4);
      assertNotSame(rectangleConstraint7, rectangleConstraint6);
      assertSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint7);
      assertNotSame(rectangleConstraint3, rectangleConstraint5);
      assertSame(rectangleConstraint3, rectangleConstraint6);
      assertNotSame(rectangleConstraint3, rectangleConstraint4);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint7.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint7.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      
      Size2D size2D6 = rectangleConstraint6.calculateConstrainedSize(size2D5);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D2.width, 0.01);
      assertEquals(0.0, size2D2.height, 0.01);
      assertEquals(0.0, size2D3.width, 0.01);
      assertEquals(0.0, size2D3.height, 0.01);
      assertEquals(0.0, size2D4.width, 0.01);
      assertEquals(0.0, size2D4.height, 0.01);
      assertEquals(0.0, size2D5.width, 0.01);
      assertEquals(0.0, size2D5.height, 0.01);
      assertEquals(0.0, size2D6.height, 0.01);
      assertEquals(0.0, size2D6.width, 0.01);
      assertNotNull(size2D6);
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertTrue(size2D0.equals((Object)size2D1));
      assertTrue(size2D0.equals((Object)size2D5));
      assertTrue(size2D0.equals((Object)size2D2));
      assertTrue(size2D0.equals((Object)size2D4));
      assertTrue(size2D0.equals((Object)size2D3));
      assertTrue(size2D2.equals((Object)size2D1));
      assertTrue(size2D2.equals((Object)size2D5));
      assertTrue(size2D2.equals((Object)size2D0));
      assertTrue(size2D2.equals((Object)size2D4));
      assertTrue(size2D2.equals((Object)size2D3));
      assertTrue(size2D3.equals((Object)size2D1));
      assertTrue(size2D3.equals((Object)size2D5));
      assertTrue(size2D3.equals((Object)size2D0));
      assertTrue(size2D3.equals((Object)size2D2));
      assertTrue(size2D3.equals((Object)size2D4));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint7));
      assertTrue(size2D4.equals((Object)size2D5));
      assertTrue(size2D4.equals((Object)size2D2));
      assertTrue(size2D4.equals((Object)size2D3));
      assertTrue(size2D4.equals((Object)size2D1));
      assertTrue(size2D4.equals((Object)size2D0));
      assertTrue(size2D5.equals((Object)size2D3));
      assertTrue(size2D5.equals((Object)size2D4));
      assertTrue(size2D5.equals((Object)size2D0));
      assertTrue(size2D5.equals((Object)size2D1));
      assertTrue(size2D5.equals((Object)size2D2));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint7));
      assertTrue(size2D6.equals((Object)size2D1));
      assertTrue(size2D6.equals((Object)size2D5));
      assertTrue(size2D6.equals((Object)size2D2));
      assertTrue(size2D6.equals((Object)size2D0));
      assertTrue(size2D6.equals((Object)size2D4));
      assertTrue(size2D6.equals((Object)size2D3));
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertSame(range3, range5);
      assertNotSame(range3, range0);
      assertSame(range3, range6);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(size2D0, size2D4);
      assertNotSame(size2D0, size2D6);
      assertNotSame(size2D0, size2D3);
      assertNotSame(size2D0, size2D5);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D2, size2D4);
      assertNotSame(size2D2, size2D6);
      assertNotSame(size2D2, size2D3);
      assertNotSame(size2D2, size2D5);
      assertNotSame(size2D2, size2D0);
      assertNotSame(size2D2, size2D1);
      assertNotSame(size2D3, size2D4);
      assertNotSame(size2D3, size2D6);
      assertNotSame(size2D3, size2D5);
      assertNotSame(size2D3, size2D0);
      assertNotSame(size2D3, size2D2);
      assertNotSame(size2D3, size2D1);
      assertSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint7);
      assertNotSame(rectangleConstraint3, rectangleConstraint5);
      assertSame(rectangleConstraint3, rectangleConstraint6);
      assertNotSame(rectangleConstraint3, rectangleConstraint4);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint5, rectangleConstraint1);
      assertNotSame(rectangleConstraint5, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint4);
      assertNotSame(rectangleConstraint5, rectangleConstraint0);
      assertNotSame(rectangleConstraint5, rectangleConstraint2);
      assertNotSame(rectangleConstraint5, rectangleConstraint6);
      assertNotSame(rectangleConstraint5, rectangleConstraint7);
      assertNotSame(size2D4, size2D6);
      assertNotSame(size2D4, size2D1);
      assertNotSame(size2D4, size2D2);
      assertNotSame(size2D4, size2D5);
      assertNotSame(size2D4, size2D0);
      assertNotSame(size2D4, size2D3);
      assertNotSame(size2D5, size2D2);
      assertNotSame(size2D5, size2D6);
      assertNotSame(size2D5, size2D1);
      assertNotSame(size2D5, size2D3);
      assertNotSame(size2D5, size2D4);
      assertNotSame(size2D5, size2D0);
      assertNotSame(rectangleConstraint6, rectangleConstraint1);
      assertNotSame(rectangleConstraint6, rectangleConstraint4);
      assertNotSame(rectangleConstraint6, rectangleConstraint0);
      assertNotSame(rectangleConstraint6, rectangleConstraint5);
      assertNotSame(rectangleConstraint6, rectangleConstraint7);
      assertSame(rectangleConstraint6, rectangleConstraint3);
      assertSame(rectangleConstraint6, rectangleConstraint2);
      assertNotSame(size2D6, size2D4);
      assertNotSame(size2D6, size2D1);
      assertNotSame(size2D6, size2D3);
      assertNotSame(size2D6, size2D0);
      assertNotSame(size2D6, size2D5);
      assertNotSame(size2D6, size2D2);
      assertEquals(895.3391568627039, range0.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range0.getLowerBound(), 0.01);
      assertEquals(7119.213540274592, range0.getLength(), 0.01);
      assertEquals(4454.945927, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4454.945927, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(7119.213540274592, range1.getLength(), 0.01);
      assertEquals(895.3391568627039, range1.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(7119.213540274592, range3.getLength(), 0.01);
      assertEquals(895.3391568627039, range3.getCentralValue(), 0.01);
      assertEquals((-2664.267613274592), range3.getLowerBound(), 0.01);
      assertEquals(4454.945927, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(4454.945927, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-2664.267613274592), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D2.getWidth(), 0.01);
      assertEquals(0.0, size2D2.getHeight(), 0.01);
      assertEquals(0.0, size2D3.getWidth(), 0.01);
      assertEquals(0.0, size2D3.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      assertEquals(4454.945927, rectangleConstraint5.getWidth(), 0.01);
      assertEquals(4454.945927, rectangleConstraint5.getHeight(), 0.01);
      assertEquals(0.0, size2D4.getHeight(), 0.01);
      assertEquals(0.0, size2D4.getWidth(), 0.01);
      assertEquals(0.0, size2D5.getWidth(), 0.01);
      assertEquals(0.0, size2D5.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint6.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint6.getWidth(), 0.01);
      assertEquals(0.0, size2D6.getWidth(), 0.01);
      assertEquals(0.0, size2D6.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(4762.626799632893, (-1426.4603557618345));
      assertNotNull(rectangleConstraint0);
      assertEquals((-1426.4603557618345), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(4762.626799632893, rectangleConstraint0.getWidth(), 0.01);
      
      LengthConstraintType lengthConstraintType0 = rectangleConstraint0.getWidthConstraintType();
      assertNotNull(lengthConstraintType0);
      assertEquals((-1426.4603557618345), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(4762.626799632893, rectangleConstraint0.getWidth(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      
      Range range0 = new Range((-1426.4603557618345), (-1426.4603557618345));
      assertNotNull(range0);
      assertEquals((-1426.4603557618345), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1426.4603557618345), range0.getCentralValue(), 0.01);
      assertEquals((-1426.4603557618345), range0.getUpperBound(), 0.01);
      
      Range range1 = Range.expand(range0, (-83.7792749), 0.0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals((-1426.4603557618345), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1426.4603557618345), range0.getCentralValue(), 0.01);
      assertEquals((-1426.4603557618345), range0.getUpperBound(), 0.01);
      assertEquals((-1426.4603557618345), range1.getLowerBound(), 0.01);
      assertEquals((-1426.4603557618345), range1.getCentralValue(), 0.01);
      assertEquals((-1426.4603557618345), range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = Range.expandToInclude(range1, (-1426.4603557618345));
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals((-1426.4603557618345), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1426.4603557618345), range0.getCentralValue(), 0.01);
      assertEquals((-1426.4603557618345), range0.getUpperBound(), 0.01);
      assertEquals((-1426.4603557618345), range1.getLowerBound(), 0.01);
      assertEquals((-1426.4603557618345), range1.getCentralValue(), 0.01);
      assertEquals((-1426.4603557618345), range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1426.4603557618345), range2.getCentralValue(), 0.01);
      assertEquals((-1426.4603557618345), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1426.4603557618345), range2.getUpperBound(), 0.01);
      
      Range range3 = Range.combine(range2, range1);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals((-1426.4603557618345), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1426.4603557618345), range0.getCentralValue(), 0.01);
      assertEquals((-1426.4603557618345), range0.getUpperBound(), 0.01);
      assertEquals((-1426.4603557618345), range1.getLowerBound(), 0.01);
      assertEquals((-1426.4603557618345), range1.getCentralValue(), 0.01);
      assertEquals((-1426.4603557618345), range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1426.4603557618345), range2.getCentralValue(), 0.01);
      assertEquals((-1426.4603557618345), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1426.4603557618345), range2.getUpperBound(), 0.01);
      assertEquals((-1426.4603557618345), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-1426.4603557618345), range3.getUpperBound(), 0.01);
      assertEquals((-1426.4603557618345), range3.getCentralValue(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeWidth(range3);
      assertNotNull(rectangleConstraint1);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals((-1426.4603557618345), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(4762.626799632893, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1426.4603557618345), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1426.4603557618345), range0.getCentralValue(), 0.01);
      assertEquals((-1426.4603557618345), range0.getUpperBound(), 0.01);
      assertEquals((-1426.4603557618345), range1.getLowerBound(), 0.01);
      assertEquals((-1426.4603557618345), range1.getCentralValue(), 0.01);
      assertEquals((-1426.4603557618345), range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1426.4603557618345), range2.getCentralValue(), 0.01);
      assertEquals((-1426.4603557618345), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1426.4603557618345), range2.getUpperBound(), 0.01);
      assertEquals((-1426.4603557618345), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-1426.4603557618345), range3.getUpperBound(), 0.01);
      assertEquals((-1426.4603557618345), range3.getCentralValue(), 0.01);
      assertEquals((-1426.4603557618345), rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-1426.4603557618345), rectangleConstraint1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      assertNotNull(lengthConstraintType0);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-4168.54947501386), (Range) null, lengthConstraintType0, (-4168.54947501386), (Range) null, lengthConstraintType0);
      assertNotNull(rectangleConstraint0);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals((-4168.54947501386), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-4168.54947501386), rectangleConstraint0.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth((-4168.54947501386));
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals((-4168.54947501386), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-4168.54947501386), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-4168.54947501386), rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-4168.54947501386), rectangleConstraint1.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint0.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals((-4168.54947501386), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-4168.54947501386), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-4168.54947501386), rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      
      // Undeclared exception!
      try { 
        rectangleConstraint2.toRangeHeight((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1.0, 1.0);
      assertNotNull(rectangleConstraint0);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getWidth(), 0.01);
      
      Range range0 = new Range(622.56313982, 622.56313982);
      assertNotNull(range0);
      assertEquals(622.56313982, range0.getLowerBound(), 0.01);
      assertEquals(622.56313982, range0.getCentralValue(), 0.01);
      assertEquals(622.56313982, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = Range.scale(range0, 3221.2);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(622.56313982, range0.getLowerBound(), 0.01);
      assertEquals(622.56313982, range0.getCentralValue(), 0.01);
      assertEquals(622.56313982, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2005400.3859881838, range1.getLowerBound(), 0.01);
      assertEquals(2005400.3859881838, range1.getCentralValue(), 0.01);
      assertEquals(2005400.3859881838, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      
      Range range2 = Range.combine((Range) null, range0);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertEquals(622.56313982, range0.getLowerBound(), 0.01);
      assertEquals(622.56313982, range0.getCentralValue(), 0.01);
      assertEquals(622.56313982, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(622.56313982, range2.getLowerBound(), 0.01);
      assertEquals(622.56313982, range2.getCentralValue(), 0.01);
      assertEquals(622.56313982, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toRangeHeight(range2);
      assertNotNull(rectangleConstraint2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(622.56313982, range0.getLowerBound(), 0.01);
      assertEquals(622.56313982, range0.getCentralValue(), 0.01);
      assertEquals(622.56313982, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(622.56313982, range2.getLowerBound(), 0.01);
      assertEquals(622.56313982, range2.getCentralValue(), 0.01);
      assertEquals(622.56313982, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(622.56313982, rectangleConstraint2.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint3 = rectangleConstraint2.toFixedHeight(2.0);
      assertNotNull(rectangleConstraint3);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(622.56313982, range0.getLowerBound(), 0.01);
      assertEquals(622.56313982, range0.getCentralValue(), 0.01);
      assertEquals(622.56313982, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(622.56313982, range2.getLowerBound(), 0.01);
      assertEquals(622.56313982, range2.getCentralValue(), 0.01);
      assertEquals(622.56313982, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(622.56313982, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(2.0, rectangleConstraint3.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint3.getWidth(), 0.01);
      
      String string0 = rectangleConstraint1.toString();
      assertNotNull(string0);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertEquals("RectangleConstraint[LengthConstraintType.FIXED: width=1.0, height=0.0]", string0);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getWidth(), 0.01);
      
      LengthConstraintType lengthConstraintType0 = rectangleConstraint2.getHeightConstraintType();
      assertNotNull(lengthConstraintType0);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(622.56313982, range0.getLowerBound(), 0.01);
      assertEquals(622.56313982, range0.getCentralValue(), 0.01);
      assertEquals(622.56313982, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(622.56313982, range2.getLowerBound(), 0.01);
      assertEquals(622.56313982, range2.getCentralValue(), 0.01);
      assertEquals(622.56313982, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(622.56313982, rectangleConstraint2.getHeight(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      
      RectangleConstraint rectangleConstraint4 = rectangleConstraint1.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint4);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range((-450.5642883368), (-450.5642883368));
      assertNotNull(range0);
      assertFalse(range0.isNaNRange());
      assertEquals((-450.5642883368), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-450.5642883368), range0.getCentralValue(), 0.01);
      assertEquals((-450.5642883368), range0.getUpperBound(), 0.01);
      
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      assertNotNull(lengthConstraintType0);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-442.0658441538573), range0, lengthConstraintType0, (-442.0658441538573), range0, lengthConstraintType0);
      assertNotNull(rectangleConstraint0);
      assertFalse(range0.isNaNRange());
      assertEquals((-450.5642883368), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-450.5642883368), range0.getCentralValue(), 0.01);
      assertEquals((-450.5642883368), range0.getUpperBound(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      assertEquals((-442.0658441538573), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-442.0658441538573), rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeHeight(range0);
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertFalse(range0.isNaNRange());
      assertEquals((-450.5642883368), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-450.5642883368), range0.getCentralValue(), 0.01);
      assertEquals((-450.5642883368), range0.getUpperBound(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      assertEquals((-442.0658441538573), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-442.0658441538573), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-450.5642883368), rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-442.0658441538573), rectangleConstraint1.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertFalse(range0.isNaNRange());
      assertEquals((-450.5642883368), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-450.5642883368), range0.getCentralValue(), 0.01);
      assertEquals((-450.5642883368), range0.getUpperBound(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      assertEquals((-442.0658441538573), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-442.0658441538573), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-450.5642883368), rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-442.0658441538573), rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-442.0658441538573), rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      
      String string0 = rectangleConstraint2.toString();
      assertNotNull(string0);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals("RectangleConstraint[LengthConstraintType.FIXED: width=-442.0658441538573, height=0.0]", string0);
      assertFalse(range0.isNaNRange());
      assertEquals((-450.5642883368), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-450.5642883368), range0.getCentralValue(), 0.01);
      assertEquals((-450.5642883368), range0.getUpperBound(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      assertEquals((-442.0658441538573), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-442.0658441538573), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-450.5642883368), rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-442.0658441538573), rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-442.0658441538573), rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-1181.5545085834), (-1181.5545085834));
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1181.5545085834), range0.getLowerBound(), 0.01);
      assertEquals((-1181.5545085834), range0.getCentralValue(), 0.01);
      assertEquals((-1181.5545085834), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      
      Range range1 = Range.shift(range0, (-1181.5545085834));
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1181.5545085834), range0.getLowerBound(), 0.01);
      assertEquals((-1181.5545085834), range0.getCentralValue(), 0.01);
      assertEquals((-1181.5545085834), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2363.1090171668), range1.getUpperBound(), 0.01);
      assertEquals((-2363.1090171668), range1.getCentralValue(), 0.01);
      assertEquals((-2363.1090171668), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      
      Range range2 = Range.combine(range1, range0);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1181.5545085834), range0.getLowerBound(), 0.01);
      assertEquals((-1181.5545085834), range0.getCentralValue(), 0.01);
      assertEquals((-1181.5545085834), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2363.1090171668), range1.getUpperBound(), 0.01);
      assertEquals((-2363.1090171668), range1.getCentralValue(), 0.01);
      assertEquals((-2363.1090171668), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1181.5545085834, range2.getLength(), 0.01);
      assertEquals((-2363.1090171668), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1772.3317628751001), range2.getCentralValue(), 0.01);
      assertEquals((-1181.5545085834), range2.getUpperBound(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1181.5545085834), range1);
      assertNotNull(rectangleConstraint0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1181.5545085834), range0.getLowerBound(), 0.01);
      assertEquals((-1181.5545085834), range0.getCentralValue(), 0.01);
      assertEquals((-1181.5545085834), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2363.1090171668), range1.getUpperBound(), 0.01);
      assertEquals((-2363.1090171668), range1.getCentralValue(), 0.01);
      assertEquals((-2363.1090171668), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1181.5545085834), rectangleConstraint0.getWidth(), 0.01);
      
      Size2D size2D0 = new Size2D();
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-1181.5545085834), size2D1.width, 0.01);
      assertEquals((-2363.1090171668), size2D1.height, 0.01);
      assertNotNull(size2D1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(size2D1.equals((Object)size2D0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1181.5545085834), range0.getLowerBound(), 0.01);
      assertEquals((-1181.5545085834), range0.getCentralValue(), 0.01);
      assertEquals((-1181.5545085834), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2363.1090171668), range1.getUpperBound(), 0.01);
      assertEquals((-2363.1090171668), range1.getCentralValue(), 0.01);
      assertEquals((-2363.1090171668), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1181.5545085834), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-1181.5545085834), size2D1.getWidth(), 0.01);
      assertEquals((-2363.1090171668), size2D1.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1181.5545085834), range0.getLowerBound(), 0.01);
      assertEquals((-1181.5545085834), range0.getCentralValue(), 0.01);
      assertEquals((-1181.5545085834), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2363.1090171668), range1.getUpperBound(), 0.01);
      assertEquals((-2363.1090171668), range1.getCentralValue(), 0.01);
      assertEquals((-2363.1090171668), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1181.5545085834), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-1181.5545085834), rectangleConstraint1.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.NONE.toFixedWidth((-1.0));
      assertNotNull(rectangleConstraint2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1181.5545085834), range0.getLowerBound(), 0.01);
      assertEquals((-1181.5545085834), range0.getCentralValue(), 0.01);
      assertEquals((-1181.5545085834), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2363.1090171668), range1.getUpperBound(), 0.01);
      assertEquals((-2363.1090171668), range1.getCentralValue(), 0.01);
      assertEquals((-2363.1090171668), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1181.5545085834), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-1181.5545085834), rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      
      Range range3 = rectangleConstraint1.getWidthRange();
      assertNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1181.5545085834), range0.getLowerBound(), 0.01);
      assertEquals((-1181.5545085834), range0.getCentralValue(), 0.01);
      assertEquals((-1181.5545085834), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2363.1090171668), range1.getUpperBound(), 0.01);
      assertEquals((-2363.1090171668), range1.getCentralValue(), 0.01);
      assertEquals((-2363.1090171668), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1181.5545085834), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-1181.5545085834), rectangleConstraint1.getWidth(), 0.01);
      
      Size2D size2D2 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-2363.1090171668), size2D2.height, 0.01);
      assertEquals((-1181.5545085834), size2D2.width, 0.01);
      assertNotNull(size2D2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(size2D0.equals((Object)size2D1));
      assertTrue(size2D2.equals((Object)size2D1));
      assertFalse(size2D2.equals((Object)size2D0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D2, size2D0);
      assertNotSame(size2D2, size2D1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1181.5545085834), range0.getLowerBound(), 0.01);
      assertEquals((-1181.5545085834), range0.getCentralValue(), 0.01);
      assertEquals((-1181.5545085834), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2363.1090171668), range1.getUpperBound(), 0.01);
      assertEquals((-2363.1090171668), range1.getCentralValue(), 0.01);
      assertEquals((-2363.1090171668), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1181.5545085834), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-2363.1090171668), size2D2.getHeight(), 0.01);
      assertEquals((-1181.5545085834), size2D2.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      assertNotNull(range0);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = Range.shift(range0, (-1072.848573304));
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1073.848573304), range1.getLowerBound(), 0.01);
      assertEquals((-1073.848573304), range1.getCentralValue(), 0.01);
      assertEquals((-1073.848573304), range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      
      Range range2 = Range.combine(range1, range0);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1073.848573304), range1.getLowerBound(), 0.01);
      assertEquals((-1073.848573304), range1.getCentralValue(), 0.01);
      assertEquals((-1073.848573304), range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1072.848573304, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-537.424286652), range2.getCentralValue(), 0.01);
      assertEquals((-1073.848573304), range2.getLowerBound(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range2, range0);
      assertNotNull(rectangleConstraint0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1073.848573304), range1.getLowerBound(), 0.01);
      assertEquals((-1073.848573304), range1.getCentralValue(), 0.01);
      assertEquals((-1073.848573304), range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1072.848573304, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-537.424286652), range2.getCentralValue(), 0.01);
      assertEquals((-1073.848573304), range2.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeWidth(range1);
      assertNotNull(rectangleConstraint1);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1073.848573304), range1.getLowerBound(), 0.01);
      assertEquals((-1073.848573304), range1.getCentralValue(), 0.01);
      assertEquals((-1073.848573304), range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1072.848573304, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-537.424286652), range2.getCentralValue(), 0.01);
      assertEquals((-1073.848573304), range2.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1073.848573304), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toRangeHeight(range1);
      assertNotNull(rectangleConstraint2);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1073.848573304), range1.getLowerBound(), 0.01);
      assertEquals((-1073.848573304), range1.getCentralValue(), 0.01);
      assertEquals((-1073.848573304), range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1072.848573304, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-537.424286652), range2.getCentralValue(), 0.01);
      assertEquals((-1073.848573304), range2.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1073.848573304), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-1073.848573304), rectangleConstraint2.getHeight(), 0.01);
      assertEquals((-1073.848573304), rectangleConstraint2.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      Range range0 = new Range((-1389.0), (-1389.0));
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1389.0), range0.getLowerBound(), 0.01);
      assertEquals((-1389.0), range0.getCentralValue(), 0.01);
      assertEquals((-1389.0), range0.getUpperBound(), 0.01);
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1389.0), range0.getLowerBound(), 0.01);
      assertEquals((-1389.0), range0.getCentralValue(), 0.01);
      assertEquals((-1389.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1389.0), range1.getCentralValue(), 0.01);
      assertEquals((-1389.0), range1.getUpperBound(), 0.01);
      assertEquals((-1389.0), range1.getLowerBound(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.NONE.toRangeHeight(range0);
      assertNotNull(rectangleConstraint1);
      assertTrue(range0.equals((Object)range1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(range0, range1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1389.0), range0.getLowerBound(), 0.01);
      assertEquals((-1389.0), range0.getCentralValue(), 0.01);
      assertEquals((-1389.0), range0.getUpperBound(), 0.01);
      assertEquals((-1389.0), rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint0.NONE.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      
      String string0 = rectangleConstraint0.toString();
      assertNotNull(string0);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertEquals("RectangleConstraint[LengthConstraintType.NONE: width=0.0, height=0.0]", string0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint3 = rectangleConstraint2.toFixedHeight((-1.0));
      assertNotNull(rectangleConstraint3);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint3.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint4 = rectangleConstraint3.toRangeHeight(range0);
      assertNotNull(rectangleConstraint4);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(range0, range1);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint4);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1389.0), range0.getLowerBound(), 0.01);
      assertEquals((-1389.0), range0.getCentralValue(), 0.01);
      assertEquals((-1389.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint3.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      assertEquals((-1389.0), rectangleConstraint4.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      
      double double0 = rectangleConstraint0.getWidth();
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      Size2D size2D0 = new Size2D(0.0, (-1.0));
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-1.0), size2D0.height, 0.01);
      assertNotNull(size2D0);
      assertEquals((-1.0), size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      
      Size2D size2D1 = rectangleConstraint3.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-1.0), size2D0.height, 0.01);
      assertEquals((-1.0), size2D1.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertNotNull(size2D1);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertTrue(size2D1.equals((Object)size2D0));
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint4);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint3.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      assertEquals((-1.0), size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-1.0), size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      
      LengthConstraintType lengthConstraintType0 = rectangleConstraint2.getWidthConstraintType();
      assertNotNull(lengthConstraintType0);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals("LengthConstraintType.NONE", lengthConstraintType0.toString());
      
      Range range2 = rectangleConstraint1.getHeightRange();
      assertNotNull(range2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertTrue(range2.equals((Object)range1));
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1389.0), range0.getLowerBound(), 0.01);
      assertEquals((-1389.0), range0.getCentralValue(), 0.01);
      assertEquals((-1389.0), range0.getUpperBound(), 0.01);
      assertEquals((-1389.0), rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-1389.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1389.0), range2.getCentralValue(), 0.01);
      assertEquals((-1389.0), range2.getUpperBound(), 0.01);
      
      Range range3 = rectangleConstraint3.getWidthRange();
      assertNull(range3);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint4);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint3.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      
      Range range4 = rectangleConstraint4.getHeightRange();
      assertNotNull(range4);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertTrue(range4.equals((Object)range1));
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertSame(range0, range2);
      assertSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint4);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(range4, range1);
      assertSame(range4, range2);
      assertSame(range4, range0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1389.0), range0.getLowerBound(), 0.01);
      assertEquals((-1389.0), range0.getCentralValue(), 0.01);
      assertEquals((-1389.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint3.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      assertEquals((-1389.0), rectangleConstraint4.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-1389.0), range4.getCentralValue(), 0.01);
      assertEquals((-1389.0), range4.getUpperBound(), 0.01);
      assertEquals((-1389.0), range4.getLowerBound(), 0.01);
      
      RectangleConstraint rectangleConstraint5 = rectangleConstraint3.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint5);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint4);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint5);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint5, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint0);
      assertNotSame(rectangleConstraint5, rectangleConstraint4);
      assertNotSame(rectangleConstraint5, rectangleConstraint2);
      assertNotSame(rectangleConstraint5, rectangleConstraint1);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint3.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint5.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint5.getWidth(), 0.01);
      
      Range range5 = rectangleConstraint0.getHeightRange();
      assertNull(range5);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      
      Range range0 = new Range(1.0, 1.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.NONE.toRangeHeight(range0);
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      
      Range range1 = rectangleConstraint0.getWidthRange();
      assertNull(range1);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      
      Range range2 = rectangleConstraint0.getHeightRange();
      assertNull(range2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = null;
      double double0 = 1.0;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, 1.0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      
      // Undeclared exception!
      try { 
        rectangleConstraint0.toRangeWidth((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1.0, 1.0);
      assertNotNull(rectangleConstraint0);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.NONE.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      
      double double0 = rectangleConstraint0.getHeight();
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint2.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint3 = rectangleConstraint2.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint3);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint3.getWidth(), 0.01);
      
      Size2D size2D0 = new Size2D(0.0, (-3166.9));
      assertEquals((-3166.9), size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-3166.9), size2D0.getHeight(), 0.01);
      
      Size2D size2D1 = rectangleConstraint2.calculateConstrainedSize(size2D0);
      assertEquals((-3166.9), size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(1.0, size2D1.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertNotNull(size2D1);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(size2D1.equals((Object)size2D0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D0);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-3166.9), size2D0.getHeight(), 0.01);
      assertEquals(1.0, size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(295.7775675, 295.7775675);
      assertNotNull(range0);
      assertEquals(295.7775675, range0.getCentralValue(), 0.01);
      assertEquals(295.7775675, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(295.7775675, range0.getLowerBound(), 0.01);
      
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(295.7775675, range0.getCentralValue(), 0.01);
      assertEquals(295.7775675, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(295.7775675, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(295.7775675, range1.getLowerBound(), 0.01);
      assertEquals(295.7775675, range1.getCentralValue(), 0.01);
      assertEquals(295.7775675, range1.getUpperBound(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range1, range1);
      assertNotNull(rectangleConstraint0);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertEquals(295.7775675, range0.getCentralValue(), 0.01);
      assertEquals(295.7775675, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(295.7775675, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(295.7775675, range1.getLowerBound(), 0.01);
      assertEquals(295.7775675, range1.getCentralValue(), 0.01);
      assertEquals(295.7775675, range1.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeWidth(range0);
      assertNotNull(rectangleConstraint1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(295.7775675, range0.getCentralValue(), 0.01);
      assertEquals(295.7775675, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(295.7775675, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(295.7775675, range1.getLowerBound(), 0.01);
      assertEquals(295.7775675, range1.getCentralValue(), 0.01);
      assertEquals(295.7775675, range1.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(295.7775675, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      
      Size2D size2D0 = new Size2D(295.7775675, 1.0);
      assertEquals(1.0, size2D0.height, 0.01);
      assertEquals(295.7775675, size2D0.width, 0.01);
      assertNotNull(size2D0);
      assertEquals(1.0, size2D0.getHeight(), 0.01);
      assertEquals(295.7775675, size2D0.getWidth(), 0.01);
      
      Size2D size2D1 = rectangleConstraint1.calculateConstrainedSize(size2D0);
      assertEquals(1.0, size2D0.height, 0.01);
      assertEquals(295.7775675, size2D0.width, 0.01);
      assertEquals(295.7775675, size2D1.height, 0.01);
      assertEquals(295.7775675, size2D1.width, 0.01);
      assertNotNull(size2D1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(size2D1.equals((Object)size2D0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D0);
      assertEquals(295.7775675, range0.getCentralValue(), 0.01);
      assertEquals(295.7775675, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(295.7775675, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(295.7775675, range1.getLowerBound(), 0.01);
      assertEquals(295.7775675, range1.getCentralValue(), 0.01);
      assertEquals(295.7775675, range1.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(295.7775675, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1.0, size2D0.getHeight(), 0.01);
      assertEquals(295.7775675, size2D0.getWidth(), 0.01);
      assertEquals(295.7775675, size2D1.getHeight(), 0.01);
      assertEquals(295.7775675, size2D1.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint0.toFixedWidth(0.0);
      assertNotNull(rectangleConstraint2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals(295.7775675, range0.getCentralValue(), 0.01);
      assertEquals(295.7775675, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(295.7775675, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(295.7775675, range1.getLowerBound(), 0.01);
      assertEquals(295.7775675, range1.getCentralValue(), 0.01);
      assertEquals(295.7775675, range1.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      
      String string0 = rectangleConstraint2.NONE.toString();
      assertNotNull(string0);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals("RectangleConstraint[LengthConstraintType.NONE: width=0.0, height=0.0]", string0);
      assertEquals(295.7775675, range0.getCentralValue(), 0.01);
      assertEquals(295.7775675, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(295.7775675, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(295.7775675, range1.getLowerBound(), 0.01);
      assertEquals(295.7775675, range1.getCentralValue(), 0.01);
      assertEquals(295.7775675, range1.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      
      double double0 = rectangleConstraint0.getWidth();
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(295.7775675, range0.getCentralValue(), 0.01);
      assertEquals(295.7775675, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(295.7775675, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(295.7775675, range1.getLowerBound(), 0.01);
      assertEquals(295.7775675, range1.getCentralValue(), 0.01);
      assertEquals(295.7775675, range1.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      double double1 = rectangleConstraint0.getHeight();
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(295.7775675, range0.getCentralValue(), 0.01);
      assertEquals(295.7775675, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(295.7775675, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(295.7775675, range1.getLowerBound(), 0.01);
      assertEquals(295.7775675, range1.getCentralValue(), 0.01);
      assertEquals(295.7775675, range1.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = Range.shift(range0, (-2220.740537881657));
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals((-2220.740537881657), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-2220.740537881657), range1.getCentralValue(), 0.01);
      assertEquals((-2220.740537881657), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      assertNotNull(rectangleConstraint0);
      assertFalse(range0.equals((Object)range1));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeHeight(range0);
      assertNotNull(rectangleConstraint1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range1);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1873.381, 2.0);
      assertNotNull(rectangleConstraint0);
      assertEquals(2.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1873.381, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(2.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1873.381, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1873.381, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toFixedWidth(1873.381);
      assertNotNull(rectangleConstraint2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals(2.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1873.381, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1873.381, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1873.381, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range((-114.6), 2796.74471);
      assertNotNull(range0);
      assertFalse(range0.isNaNRange());
      assertEquals(1341.072355, range0.getCentralValue(), 0.01);
      assertEquals(2796.74471, range0.getUpperBound(), 0.01);
      assertEquals((-114.6), range0.getLowerBound(), 0.01);
      assertEquals(2911.34471, range0.getLength(), 0.01);
      
      Range range1 = Range.shift(range0, 2.0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(1341.072355, range0.getCentralValue(), 0.01);
      assertEquals(2796.74471, range0.getUpperBound(), 0.01);
      assertEquals((-114.6), range0.getLowerBound(), 0.01);
      assertEquals(2911.34471, range0.getLength(), 0.01);
      assertEquals(1343.072355, range1.getCentralValue(), 0.01);
      assertEquals((-112.6), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2911.34471, range1.getLength(), 0.01);
      assertEquals(2798.74471, range1.getUpperBound(), 0.01);
      
      Range range2 = Range.combineIgnoringNaN(range1, range0);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(1341.072355, range0.getCentralValue(), 0.01);
      assertEquals(2796.74471, range0.getUpperBound(), 0.01);
      assertEquals((-114.6), range0.getLowerBound(), 0.01);
      assertEquals(2911.34471, range0.getLength(), 0.01);
      assertEquals(1343.072355, range1.getCentralValue(), 0.01);
      assertEquals((-112.6), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2911.34471, range1.getLength(), 0.01);
      assertEquals(2798.74471, range1.getUpperBound(), 0.01);
      assertEquals(2798.74471, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-114.6), range2.getLowerBound(), 0.01);
      assertEquals(2913.34471, range2.getLength(), 0.01);
      assertEquals(1342.072355, range2.getCentralValue(), 0.01);
      
      String string0 = range1.toString();
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertEquals("Range[-112.6,2798.74471]", string0);
      assertFalse(range0.isNaNRange());
      assertEquals(1341.072355, range0.getCentralValue(), 0.01);
      assertEquals(2796.74471, range0.getUpperBound(), 0.01);
      assertEquals((-114.6), range0.getLowerBound(), 0.01);
      assertEquals(2911.34471, range0.getLength(), 0.01);
      assertEquals(1343.072355, range1.getCentralValue(), 0.01);
      assertEquals((-112.6), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2911.34471, range1.getLength(), 0.01);
      assertEquals(2798.74471, range1.getUpperBound(), 0.01);
      
      Range range3 = Range.expand(range1, 2.0, 1.0);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(1341.072355, range0.getCentralValue(), 0.01);
      assertEquals(2796.74471, range0.getUpperBound(), 0.01);
      assertEquals((-114.6), range0.getLowerBound(), 0.01);
      assertEquals(2911.34471, range0.getLength(), 0.01);
      assertEquals(1343.072355, range1.getCentralValue(), 0.01);
      assertEquals((-112.6), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2911.34471, range1.getLength(), 0.01);
      assertEquals(2798.74471, range1.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(5710.08942, range3.getUpperBound(), 0.01);
      assertEquals((-112.59999999999991), range3.getCentralValue(), 0.01);
      assertEquals((-5935.28942), range3.getLowerBound(), 0.01);
      assertEquals(11645.378840000001, range3.getLength(), 0.01);
      
      Range range4 = Range.scale(range3, 475.4844812705);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(1341.072355, range0.getCentralValue(), 0.01);
      assertEquals(2796.74471, range0.getUpperBound(), 0.01);
      assertEquals((-114.6), range0.getLowerBound(), 0.01);
      assertEquals(2911.34471, range0.getLength(), 0.01);
      assertEquals(1343.072355, range1.getCentralValue(), 0.01);
      assertEquals((-112.6), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2911.34471, range1.getLength(), 0.01);
      assertEquals(2798.74471, range1.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(5710.08942, range3.getUpperBound(), 0.01);
      assertEquals((-112.59999999999991), range3.getCentralValue(), 0.01);
      assertEquals((-5935.28942), range3.getLowerBound(), 0.01);
      assertEquals(11645.378840000001, range3.getLength(), 0.01);
      assertEquals((-2822138.0110589867), range4.getLowerBound(), 0.01);
      assertEquals(2715058.9058768703, range4.getUpperBound(), 0.01);
      assertEquals((-53539.55259105819), range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(5537196.916935857, range4.getLength(), 0.01);
      
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      assertNotNull(lengthConstraintType0);
      assertEquals("LengthConstraintType.NONE", lengthConstraintType0.toString());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-114.6), range2, lengthConstraintType0, 2796.74471, range1, lengthConstraintType0);
      assertNotNull(rectangleConstraint0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range0.isNaNRange());
      assertEquals(1341.072355, range0.getCentralValue(), 0.01);
      assertEquals(2796.74471, range0.getUpperBound(), 0.01);
      assertEquals((-114.6), range0.getLowerBound(), 0.01);
      assertEquals(2911.34471, range0.getLength(), 0.01);
      assertEquals(1343.072355, range1.getCentralValue(), 0.01);
      assertEquals((-112.6), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2911.34471, range1.getLength(), 0.01);
      assertEquals(2798.74471, range1.getUpperBound(), 0.01);
      assertEquals(2798.74471, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-114.6), range2.getLowerBound(), 0.01);
      assertEquals(2913.34471, range2.getLength(), 0.01);
      assertEquals(1342.072355, range2.getCentralValue(), 0.01);
      assertEquals("LengthConstraintType.NONE", lengthConstraintType0.toString());
      assertEquals(2796.74471, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-114.6), rectangleConstraint0.getWidth(), 0.01);
      
      Range range5 = rectangleConstraint0.getHeightRange();
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range2));
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range4);
      assertSame(range5, range1);
      assertNotSame(range5, range2);
      assertFalse(range0.isNaNRange());
      assertEquals(1341.072355, range0.getCentralValue(), 0.01);
      assertEquals(2796.74471, range0.getUpperBound(), 0.01);
      assertEquals((-114.6), range0.getLowerBound(), 0.01);
      assertEquals(2911.34471, range0.getLength(), 0.01);
      assertEquals(1343.072355, range1.getCentralValue(), 0.01);
      assertEquals((-112.6), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2911.34471, range1.getLength(), 0.01);
      assertEquals(2798.74471, range1.getUpperBound(), 0.01);
      assertEquals(2798.74471, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-114.6), range2.getLowerBound(), 0.01);
      assertEquals(2913.34471, range2.getLength(), 0.01);
      assertEquals(1342.072355, range2.getCentralValue(), 0.01);
      assertEquals("LengthConstraintType.NONE", lengthConstraintType0.toString());
      assertEquals(2796.74471, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-114.6), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(2798.74471, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-112.6), range5.getLowerBound(), 0.01);
      assertEquals(2911.34471, range5.getLength(), 0.01);
      assertEquals(1343.072355, range5.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range(172.512665564, 172.512665564);
      assertNotNull(range0);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      assertNotNull(lengthConstraintType0);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.NONE;
      assertNotNull(lengthConstraintType1);
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-902.474784047816), range0, lengthConstraintType0, (-1.0), range0, lengthConstraintType1);
      assertNotNull(rectangleConstraint0);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeHeight(range0);
      assertNotNull(rectangleConstraint1);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toFixedWidth(1564.3099159228);
      assertNotNull(rectangleConstraint2);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint2.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint3 = rectangleConstraint2.NONE.toRangeWidth(range0);
      assertNotNull(rectangleConstraint3);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint3.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint4 = rectangleConstraint1.toRangeHeight(range0);
      assertNotNull(rectangleConstraint4);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint4.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint4.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint5 = rectangleConstraint0.NONE.toFixedWidth((-902.474784047816));
      assertNotNull(rectangleConstraint5);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint0));
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint5, rectangleConstraint1);
      assertNotSame(rectangleConstraint5, rectangleConstraint2);
      assertNotSame(rectangleConstraint5, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint4);
      assertNotSame(rectangleConstraint5, rectangleConstraint0);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint5.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint5.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint6 = rectangleConstraint2.toFixedWidth(1564.3099159228);
      assertNotNull(rectangleConstraint6);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint0));
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint6);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint6, rectangleConstraint3);
      assertNotSame(rectangleConstraint6, rectangleConstraint4);
      assertNotSame(rectangleConstraint6, rectangleConstraint2);
      assertNotSame(rectangleConstraint6, rectangleConstraint1);
      assertNotSame(rectangleConstraint6, rectangleConstraint5);
      assertNotSame(rectangleConstraint6, rectangleConstraint0);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint6.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint6.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint7 = rectangleConstraint2.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint7);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint6));
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint6);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint7);
      assertNotSame(rectangleConstraint7, rectangleConstraint5);
      assertNotSame(rectangleConstraint7, rectangleConstraint0);
      assertNotSame(rectangleConstraint7, rectangleConstraint3);
      assertNotSame(rectangleConstraint7, rectangleConstraint4);
      assertNotSame(rectangleConstraint7, rectangleConstraint2);
      assertNotSame(rectangleConstraint7, rectangleConstraint1);
      assertNotSame(rectangleConstraint7, rectangleConstraint6);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint7.getHeight(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint7.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint8 = rectangleConstraint6.NONE.toFixedHeight((-1.0));
      assertNotNull(rectangleConstraint8);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint0));
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint2, rectangleConstraint8);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint6);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint7);
      assertNotSame(rectangleConstraint6, rectangleConstraint8);
      assertNotSame(rectangleConstraint6, rectangleConstraint3);
      assertNotSame(rectangleConstraint6, rectangleConstraint7);
      assertNotSame(rectangleConstraint6, rectangleConstraint4);
      assertNotSame(rectangleConstraint6, rectangleConstraint2);
      assertNotSame(rectangleConstraint6, rectangleConstraint1);
      assertNotSame(rectangleConstraint6, rectangleConstraint5);
      assertNotSame(rectangleConstraint6, rectangleConstraint0);
      assertNotSame(rectangleConstraint8, rectangleConstraint4);
      assertNotSame(rectangleConstraint8, rectangleConstraint1);
      assertNotSame(rectangleConstraint8, rectangleConstraint2);
      assertNotSame(rectangleConstraint8, rectangleConstraint7);
      assertNotSame(rectangleConstraint8, rectangleConstraint3);
      assertNotSame(rectangleConstraint8, rectangleConstraint6);
      assertNotSame(rectangleConstraint8, rectangleConstraint5);
      assertNotSame(rectangleConstraint8, rectangleConstraint0);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint6.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint6.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint8.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint8.getHeight(), 0.01);
      
      LengthConstraintType lengthConstraintType2 = rectangleConstraint7.getWidthConstraintType();
      assertNotNull(lengthConstraintType2);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint6));
      assertFalse(lengthConstraintType2.equals((Object)lengthConstraintType0));
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType0, lengthConstraintType2);
      assertSame(lengthConstraintType1, lengthConstraintType2);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint2, rectangleConstraint8);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint6);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint7);
      assertNotSame(rectangleConstraint7, rectangleConstraint5);
      assertNotSame(rectangleConstraint7, rectangleConstraint0);
      assertNotSame(rectangleConstraint7, rectangleConstraint3);
      assertNotSame(rectangleConstraint7, rectangleConstraint8);
      assertNotSame(rectangleConstraint7, rectangleConstraint4);
      assertNotSame(rectangleConstraint7, rectangleConstraint2);
      assertNotSame(rectangleConstraint7, rectangleConstraint1);
      assertNotSame(rectangleConstraint7, rectangleConstraint6);
      assertNotSame(lengthConstraintType2, lengthConstraintType0);
      assertSame(lengthConstraintType2, lengthConstraintType1);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint7.getHeight(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint7.getWidth(), 0.01);
      assertEquals("LengthConstraintType.NONE", lengthConstraintType2.toString());
      
      RectangleConstraint rectangleConstraint9 = rectangleConstraint7.toRangeWidth(range0);
      assertNotNull(rectangleConstraint9);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType2));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint8));
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType0, lengthConstraintType2);
      assertSame(lengthConstraintType1, lengthConstraintType2);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertNotSame(rectangleConstraint2, rectangleConstraint8);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint6);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint7);
      assertNotSame(rectangleConstraint2, rectangleConstraint9);
      assertNotSame(rectangleConstraint7, rectangleConstraint9);
      assertNotSame(rectangleConstraint7, rectangleConstraint5);
      assertNotSame(rectangleConstraint7, rectangleConstraint0);
      assertNotSame(rectangleConstraint7, rectangleConstraint3);
      assertNotSame(rectangleConstraint7, rectangleConstraint8);
      assertNotSame(rectangleConstraint7, rectangleConstraint4);
      assertNotSame(rectangleConstraint7, rectangleConstraint2);
      assertNotSame(rectangleConstraint7, rectangleConstraint1);
      assertNotSame(rectangleConstraint7, rectangleConstraint6);
      assertNotSame(rectangleConstraint9, rectangleConstraint0);
      assertNotSame(rectangleConstraint9, rectangleConstraint3);
      assertNotSame(rectangleConstraint9, rectangleConstraint7);
      assertNotSame(rectangleConstraint9, rectangleConstraint4);
      assertNotSame(rectangleConstraint9, rectangleConstraint2);
      assertNotSame(rectangleConstraint9, rectangleConstraint1);
      assertNotSame(rectangleConstraint9, rectangleConstraint6);
      assertNotSame(rectangleConstraint9, rectangleConstraint5);
      assertNotSame(rectangleConstraint9, rectangleConstraint8);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint7.getHeight(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint7.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint9.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint9.getWidth(), 0.01);
      
      Range range1 = rectangleConstraint0.getWidthRange();
      assertNotNull(range1);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType2));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertSame(range0, range1);
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType0, lengthConstraintType2);
      assertSame(lengthConstraintType1, lengthConstraintType2);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertSame(range1, range0);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, range1.getLowerBound(), 0.01);
      assertEquals(172.512665564, range1.getCentralValue(), 0.01);
      assertEquals(172.512665564, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = rectangleConstraint3.getHeightRange();
      assertNull(range2);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType2));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint5));
      assertSame(range0, range1);
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType0, lengthConstraintType2);
      assertSame(lengthConstraintType1, lengthConstraintType2);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertNotSame(rectangleConstraint2, rectangleConstraint8);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint6);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint7);
      assertNotSame(rectangleConstraint2, rectangleConstraint9);
      assertNotSame(rectangleConstraint3, rectangleConstraint7);
      assertNotSame(rectangleConstraint3, rectangleConstraint4);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint8);
      assertNotSame(rectangleConstraint3, rectangleConstraint9);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint6);
      assertNotSame(rectangleConstraint3, rectangleConstraint5);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint3.getWidth(), 0.01);
      
      Range range3 = rectangleConstraint6.getHeightRange();
      assertNotNull(range3);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType2));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint0));
      assertSame(range3, range0);
      assertSame(range3, range1);
      assertSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType0, lengthConstraintType2);
      assertSame(lengthConstraintType1, lengthConstraintType2);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertNotSame(rectangleConstraint2, rectangleConstraint8);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint6);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint7);
      assertNotSame(rectangleConstraint2, rectangleConstraint9);
      assertNotSame(rectangleConstraint6, rectangleConstraint8);
      assertNotSame(rectangleConstraint6, rectangleConstraint3);
      assertNotSame(rectangleConstraint6, rectangleConstraint9);
      assertNotSame(rectangleConstraint6, rectangleConstraint7);
      assertNotSame(rectangleConstraint6, rectangleConstraint4);
      assertNotSame(rectangleConstraint6, rectangleConstraint2);
      assertNotSame(rectangleConstraint6, rectangleConstraint1);
      assertNotSame(rectangleConstraint6, rectangleConstraint5);
      assertNotSame(rectangleConstraint6, rectangleConstraint0);
      assertEquals(172.512665564, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(172.512665564, range3.getCentralValue(), 0.01);
      assertEquals(172.512665564, range3.getUpperBound(), 0.01);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint6.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint6.getHeight(), 0.01);
      
      Range range4 = rectangleConstraint7.getHeightRange();
      assertNotNull(range4);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType2));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint6));
      assertSame(range0, range3);
      assertSame(range0, range1);
      assertSame(range0, range4);
      assertSame(range4, range3);
      assertSame(range4, range1);
      assertSame(range4, range0);
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType0, lengthConstraintType2);
      assertSame(lengthConstraintType1, lengthConstraintType2);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertNotSame(rectangleConstraint2, rectangleConstraint8);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint6);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint7);
      assertNotSame(rectangleConstraint2, rectangleConstraint9);
      assertNotSame(rectangleConstraint7, rectangleConstraint9);
      assertNotSame(rectangleConstraint7, rectangleConstraint5);
      assertNotSame(rectangleConstraint7, rectangleConstraint0);
      assertNotSame(rectangleConstraint7, rectangleConstraint3);
      assertNotSame(rectangleConstraint7, rectangleConstraint8);
      assertNotSame(rectangleConstraint7, rectangleConstraint4);
      assertNotSame(rectangleConstraint7, rectangleConstraint2);
      assertNotSame(rectangleConstraint7, rectangleConstraint1);
      assertNotSame(rectangleConstraint7, rectangleConstraint6);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(172.512665564, range4.getLowerBound(), 0.01);
      assertEquals(172.512665564, range4.getUpperBound(), 0.01);
      assertEquals(172.512665564, range4.getCentralValue(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint7.getHeight(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint7.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint10 = rectangleConstraint1.toRangeWidth(range0);
      assertNotNull(rectangleConstraint10);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType2));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint7));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint9));
      assertSame(range0, range3);
      assertSame(range0, range1);
      assertSame(range0, range4);
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType0, lengthConstraintType2);
      assertNotSame(rectangleConstraint10, rectangleConstraint1);
      assertNotSame(rectangleConstraint10, rectangleConstraint2);
      assertNotSame(rectangleConstraint10, rectangleConstraint4);
      assertNotSame(rectangleConstraint10, rectangleConstraint3);
      assertNotSame(rectangleConstraint10, rectangleConstraint8);
      assertNotSame(rectangleConstraint10, rectangleConstraint0);
      assertNotSame(rectangleConstraint10, rectangleConstraint9);
      assertNotSame(rectangleConstraint10, rectangleConstraint5);
      assertNotSame(rectangleConstraint10, rectangleConstraint6);
      assertNotSame(rectangleConstraint10, rectangleConstraint7);
      assertSame(lengthConstraintType1, lengthConstraintType2);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint10);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint10);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(172.512665564, rectangleConstraint10.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint10.getWidth(), 0.01);
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      
      Range range5 = rectangleConstraint6.getWidthRange();
      assertNotNull(range5);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType2));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint0));
      assertSame(range0, range3);
      assertSame(range0, range1);
      assertSame(range0, range5);
      assertSame(range0, range4);
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType0, lengthConstraintType2);
      assertSame(lengthConstraintType1, lengthConstraintType2);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertSame(range5, range3);
      assertSame(range5, range4);
      assertSame(range5, range1);
      assertSame(range5, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint10);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint10);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertNotSame(rectangleConstraint2, rectangleConstraint8);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint6);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint10);
      assertNotSame(rectangleConstraint2, rectangleConstraint7);
      assertNotSame(rectangleConstraint2, rectangleConstraint9);
      assertNotSame(rectangleConstraint6, rectangleConstraint8);
      assertNotSame(rectangleConstraint6, rectangleConstraint10);
      assertNotSame(rectangleConstraint6, rectangleConstraint3);
      assertNotSame(rectangleConstraint6, rectangleConstraint9);
      assertNotSame(rectangleConstraint6, rectangleConstraint7);
      assertNotSame(rectangleConstraint6, rectangleConstraint4);
      assertNotSame(rectangleConstraint6, rectangleConstraint2);
      assertNotSame(rectangleConstraint6, rectangleConstraint1);
      assertNotSame(rectangleConstraint6, rectangleConstraint5);
      assertNotSame(rectangleConstraint6, rectangleConstraint0);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(172.512665564, range5.getLowerBound(), 0.01);
      assertEquals(172.512665564, range5.getCentralValue(), 0.01);
      assertEquals(172.512665564, range5.getUpperBound(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint6.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint6.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint11 = rectangleConstraint0.toFixedHeight(172.512665564);
      assertNotNull(rectangleConstraint11);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType2));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint1));
      assertSame(range0, range3);
      assertSame(range0, range1);
      assertSame(range0, range5);
      assertSame(range0, range4);
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType0, lengthConstraintType2);
      assertSame(lengthConstraintType1, lengthConstraintType2);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint10);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint11);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint11, rectangleConstraint0);
      assertNotSame(rectangleConstraint11, rectangleConstraint9);
      assertNotSame(rectangleConstraint11, rectangleConstraint10);
      assertNotSame(rectangleConstraint11, rectangleConstraint8);
      assertNotSame(rectangleConstraint11, rectangleConstraint6);
      assertNotSame(rectangleConstraint11, rectangleConstraint5);
      assertNotSame(rectangleConstraint11, rectangleConstraint2);
      assertNotSame(rectangleConstraint11, rectangleConstraint7);
      assertNotSame(rectangleConstraint11, rectangleConstraint4);
      assertNotSame(rectangleConstraint11, rectangleConstraint3);
      assertNotSame(rectangleConstraint11, rectangleConstraint1);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint11.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint11.getHeight(), 0.01);
      
      double double0 = rectangleConstraint6.getWidth();
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType2));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint0));
      assertSame(range0, range3);
      assertSame(range0, range1);
      assertSame(range0, range5);
      assertSame(range0, range4);
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType0, lengthConstraintType2);
      assertSame(lengthConstraintType1, lengthConstraintType2);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint10);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint11);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint11);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint10);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertNotSame(rectangleConstraint2, rectangleConstraint8);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint11);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint6);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint10);
      assertNotSame(rectangleConstraint2, rectangleConstraint7);
      assertNotSame(rectangleConstraint2, rectangleConstraint9);
      assertNotSame(rectangleConstraint6, rectangleConstraint8);
      assertNotSame(rectangleConstraint6, rectangleConstraint10);
      assertNotSame(rectangleConstraint6, rectangleConstraint3);
      assertNotSame(rectangleConstraint6, rectangleConstraint11);
      assertNotSame(rectangleConstraint6, rectangleConstraint9);
      assertNotSame(rectangleConstraint6, rectangleConstraint7);
      assertNotSame(rectangleConstraint6, rectangleConstraint4);
      assertNotSame(rectangleConstraint6, rectangleConstraint2);
      assertNotSame(rectangleConstraint6, rectangleConstraint1);
      assertNotSame(rectangleConstraint6, rectangleConstraint5);
      assertNotSame(rectangleConstraint6, rectangleConstraint0);
      assertEquals(1564.3099159228, double0, 0.01);
      assertEquals(172.512665564, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(172.512665564, range0.getCentralValue(), 0.01);
      assertEquals(172.512665564, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType1.toString());
      assertEquals((-902.474784047816), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(172.512665564, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-902.474784047816), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(1564.3099159228, rectangleConstraint6.getWidth(), 0.01);
      assertEquals(172.512665564, rectangleConstraint6.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range((-2493.0), 2.0);
      assertNotNull(range0);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2495.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1245.5), range0.getCentralValue(), 0.01);
      assertEquals((-2493.0), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.expand(range0, (-2493.0), (-1.0));
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2495.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1245.5), range0.getCentralValue(), 0.01);
      assertEquals((-2493.0), range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3107524.5, range1.getCentralValue(), 0.01);
      assertEquals(3107524.5, range1.getUpperBound(), 0.01);
      assertEquals(3107524.5, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = Range.expandToInclude(range1, (-391.46984363));
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2495.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1245.5), range0.getCentralValue(), 0.01);
      assertEquals((-2493.0), range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3107524.5, range1.getCentralValue(), 0.01);
      assertEquals(3107524.5, range1.getUpperBound(), 0.01);
      assertEquals(3107524.5, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-391.46984363), range2.getLowerBound(), 0.01);
      assertEquals(3107524.5, range2.getUpperBound(), 0.01);
      assertEquals(3107915.96984363, range2.getLength(), 0.01);
      assertEquals(1553566.515078185, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      assertNotNull(lengthConstraintType0);
      assertEquals("LengthConstraintType.NONE", lengthConstraintType0.toString());
      
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.FIXED;
      assertNotNull(lengthConstraintType1);
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType1.toString());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-2493.0), range2, lengthConstraintType0, 2.0, range2, lengthConstraintType1);
      assertNotNull(rectangleConstraint0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2495.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1245.5), range0.getCentralValue(), 0.01);
      assertEquals((-2493.0), range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3107524.5, range1.getCentralValue(), 0.01);
      assertEquals(3107524.5, range1.getUpperBound(), 0.01);
      assertEquals(3107524.5, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-391.46984363), range2.getLowerBound(), 0.01);
      assertEquals(3107524.5, range2.getUpperBound(), 0.01);
      assertEquals(3107915.96984363, range2.getLength(), 0.01);
      assertEquals(1553566.515078185, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType1.toString());
      assertEquals(2.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2493.0), rectangleConstraint0.getWidth(), 0.01);
      
      Range range3 = rectangleConstraint0.getWidthRange();
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2495.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1245.5), range0.getCentralValue(), 0.01);
      assertEquals((-2493.0), range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3107524.5, range1.getCentralValue(), 0.01);
      assertEquals(3107524.5, range1.getUpperBound(), 0.01);
      assertEquals(3107524.5, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-391.46984363), range2.getLowerBound(), 0.01);
      assertEquals(3107524.5, range2.getUpperBound(), 0.01);
      assertEquals(3107915.96984363, range2.getLength(), 0.01);
      assertEquals(1553566.515078185, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals("LengthConstraintType.NONE", lengthConstraintType0.toString());
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType1.toString());
      assertEquals(2.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2493.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-391.46984363), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3107524.5, range3.getUpperBound(), 0.01);
      assertEquals(1553566.515078185, range3.getCentralValue(), 0.01);
      assertEquals(3107915.96984363, range3.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (Range) null);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      String string0 = rectangleConstraint0.toString();
      assertNotNull(string0);
      assertEquals("RectangleConstraint[RectangleConstraintType.RANGE: width=0.0, height=0.0]", string0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight((-2304.0836393));
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-2304.0836393), rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      Range range0 = new Range(0.0, 1909.497562290913);
      assertNotNull(range0);
      assertEquals(1909.497562290913, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(954.7487811454565, range0.getCentralValue(), 0.01);
      assertEquals(1909.497562290913, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeWidth(range0);
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1909.497562290913, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(954.7487811454565, range0.getCentralValue(), 0.01);
      assertEquals(1909.497562290913, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1909.497562290913, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toRangeWidth(range0);
      assertNotNull(rectangleConstraint2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1909.497562290913, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(954.7487811454565, range0.getCentralValue(), 0.01);
      assertEquals(1909.497562290913, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1909.497562290913, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(1909.497562290913, rectangleConstraint2.getWidth(), 0.01);
      
      Size2D size2D0 = new Size2D();
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      
      Size2D size2D1 = rectangleConstraint1.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals(0.0, size2D1.height, 0.01);
      assertNotNull(size2D1);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertTrue(size2D1.equals((Object)size2D0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1909.497562290913, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(954.7487811454565, range0.getCentralValue(), 0.01);
      assertEquals(1909.497562290913, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1909.497562290913, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      
      Size2D size2D2 = rectangleConstraint1.calculateConstrainedSize(size2D1);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals(0.0, size2D1.height, 0.01);
      assertEquals(0.0, size2D2.width, 0.01);
      assertEquals(0.0, size2D2.height, 0.01);
      assertNotNull(size2D2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertTrue(size2D0.equals((Object)size2D1));
      assertTrue(size2D1.equals((Object)size2D0));
      assertTrue(size2D2.equals((Object)size2D0));
      assertTrue(size2D2.equals((Object)size2D1));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D1, size2D2);
      assertNotSame(size2D1, size2D0);
      assertNotSame(size2D2, size2D0);
      assertNotSame(size2D2, size2D1);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1909.497562290913, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(954.7487811454565, range0.getCentralValue(), 0.01);
      assertEquals(1909.497562290913, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1909.497562290913, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D2.getHeight(), 0.01);
      assertEquals(0.0, size2D2.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1.0), (-1.0));
      assertNotNull(rectangleConstraint0);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      
      LengthConstraintType lengthConstraintType0 = rectangleConstraint0.getWidthConstraintType();
      assertNotNull(lengthConstraintType0);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      
      Size2D size2D0 = new Size2D((-1205.333), (-1.0));
      assertEquals((-1.0), size2D0.height, 0.01);
      assertEquals((-1205.333), size2D0.width, 0.01);
      assertNotNull(size2D0);
      assertEquals((-1205.333), size2D0.getWidth(), 0.01);
      assertEquals((-1.0), size2D0.getHeight(), 0.01);
      
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      assertEquals((-1.0), size2D0.height, 0.01);
      assertEquals((-1205.333), size2D0.width, 0.01);
      assertEquals((-1.0), size2D1.height, 0.01);
      assertEquals((-1.0), size2D1.width, 0.01);
      assertNotNull(size2D1);
      assertFalse(size2D1.equals((Object)size2D0));
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D0);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1205.333), size2D0.getWidth(), 0.01);
      assertEquals((-1.0), size2D0.getHeight(), 0.01);
      assertEquals((-1.0), size2D1.getWidth(), 0.01);
      assertEquals((-1.0), size2D1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 813.1575255993);
      assertNotNull(rectangleConstraint0);
      assertEquals(813.1575255993, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(813.1575255993, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      assertNotNull(lengthConstraintType0);
      assertEquals("LengthConstraintType.NONE", lengthConstraintType0.toString());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1.0, (Range) null, lengthConstraintType0, (-1765.6584444), (Range) null, lengthConstraintType0);
      assertNotNull(rectangleConstraint0);
      assertEquals("LengthConstraintType.NONE", lengthConstraintType0.toString());
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1765.6584444), rectangleConstraint0.getHeight(), 0.01);
      
      double double0 = rectangleConstraint0.getHeight();
      assertEquals((-1765.6584444), double0, 0.01);
      assertEquals("LengthConstraintType.NONE", lengthConstraintType0.toString());
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1765.6584444), rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint2);
      assertSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertSame(rectangleConstraint1, rectangleConstraint0);
      assertSame(rectangleConstraint2, rectangleConstraint0);
      assertSame(rectangleConstraint2, rectangleConstraint1);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      
      LengthConstraintType lengthConstraintType0 = rectangleConstraint1.getHeightConstraintType();
      assertNotNull(lengthConstraintType0);
      assertSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals("LengthConstraintType.NONE", lengthConstraintType0.toString());
      
      Range range0 = rectangleConstraint2.getWidthRange();
      assertNull(range0);
      assertSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint2);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertSame(rectangleConstraint1, rectangleConstraint0);
      assertSame(rectangleConstraint2, rectangleConstraint0);
      assertSame(rectangleConstraint2, rectangleConstraint1);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint1);
      assertSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      
      LengthConstraintType lengthConstraintType0 = rectangleConstraint1.getHeightConstraintType();
      assertNotNull(lengthConstraintType0);
      assertSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals("LengthConstraintType.NONE", lengthConstraintType0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight(0.0);
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      
      String string0 = rectangleConstraint1.toString();
      assertNotNull(string0);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals("RectangleConstraint[LengthConstraintType.FIXED: width=0.0, height=0.0]", string0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      
      double double0 = rectangleConstraint1.getWidth();
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight((-1.0));
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      
      Size2D size2D0 = new Size2D();
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      
      Size2D size2D1 = rectangleConstraint0.NONE.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals(0.0, size2D1.height, 0.01);
      assertNotNull(size2D1);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertTrue(size2D1.equals((Object)size2D0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint0.toFixedWidth(0.0);
      assertNotNull(rectangleConstraint2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint3 = rectangleConstraint0.toFixedWidth(0.0);
      assertNotNull(rectangleConstraint3);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint4 = rectangleConstraint3.NONE.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint4);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint4);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertSame(rectangleConstraint4, rectangleConstraint0);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        rectangleConstraint4.toRangeHeight((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1414.26476564), (-1414.26476564));
      assertNotNull(rectangleConstraint0);
      assertEquals((-1414.26476564), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals((-1414.26476564), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint1.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.NONE.toFixedHeight((-1414.26476564));
      assertNotNull(rectangleConstraint2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertEquals((-1414.26476564), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint3 = rectangleConstraint1.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint3);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertEquals((-1414.26476564), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint3.getHeight(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint3.getWidth(), 0.01);
      
      Size2D size2D0 = new Size2D();
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      
      Size2D size2D1 = rectangleConstraint1.NONE.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D1.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertNotNull(size2D1);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertTrue(size2D1.equals((Object)size2D0));
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D0);
      assertEquals((-1414.26476564), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      
      LengthConstraintType lengthConstraintType0 = rectangleConstraint0.getWidthConstraintType();
      assertNotNull(lengthConstraintType0);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertEquals((-1414.26476564), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1414.26476564), rectangleConstraint0.getWidth(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(152.012, (Range) null);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(152.012, rectangleConstraint0.getWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        rectangleConstraint0.NONE.calculateConstrainedSize((Size2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.RectangleConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range((-4912.22), 1.0);
      assertNotNull(range0);
      assertEquals(4913.22, range0.getLength(), 0.01);
      assertEquals((-2455.61), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-4912.22), range0.getLowerBound(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      assertNotNull(rectangleConstraint0);
      assertEquals(4913.22, range0.getLength(), 0.01);
      assertEquals((-2455.61), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-4912.22), range0.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeHeight(range0);
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(4913.22, range0.getLength(), 0.01);
      assertEquals((-2455.61), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-4912.22), range0.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1.0, 1.0);
      assertNotNull(rectangleConstraint0);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toFixedWidth(1.0);
      assertNotNull(rectangleConstraint2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint2.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1779.8833253, 1779.8833253);
      assertNotNull(rectangleConstraint0);
      assertEquals(1779.8833253, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1779.8833253, rectangleConstraint0.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight(1779.8833253);
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(1779.8833253, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1779.8833253, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1779.8833253, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1779.8833253, rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      double double0 = rectangleConstraint0.getWidth();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      Range range0 = rectangleConstraint0.getHeightRange();
      assertNull(range0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range((-677.6744186206332), (-677.6744186206332));
      assertNotNull(range0);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      
      Range range2 = Range.shift(range1, (-677.6744186206332), true);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1355.3488372412664), range2.getLowerBound(), 0.01);
      assertEquals((-1355.3488372412664), range2.getCentralValue(), 0.01);
      assertEquals((-1355.3488372412664), range2.getUpperBound(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range1, 0.0);
      assertNotNull(rectangleConstraint0);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint1);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      
      Range range3 = Range.expand(range1, (-677.6744186206332), 0.0);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-677.6744186206332), range3.getLowerBound(), 0.01);
      assertEquals((-677.6744186206332), range3.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      
      Size2D size2D0 = new Size2D(0.0, (-1528.568402));
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-1528.568402), size2D0.height, 0.01);
      assertNotNull(size2D0);
      assertEquals((-1528.568402), size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      
      Size2D size2D1 = (Size2D)size2D0.clone();
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-1528.568402), size2D0.height, 0.01);
      assertEquals((-1528.568402), size2D1.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertNotNull(size2D1);
      assertTrue(size2D1.equals((Object)size2D0));
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D0);
      assertEquals((-1528.568402), size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-1528.568402), size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.NONE.toRangeWidth(range3);
      assertNotNull(rectangleConstraint2);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-677.6744186206332), range3.getLowerBound(), 0.01);
      assertEquals((-677.6744186206332), range3.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-677.6744186206332), rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      
      Size2D size2D2 = rectangleConstraint1.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-1528.568402), size2D0.height, 0.01);
      assertEquals(0.0, size2D2.height, 0.01);
      assertEquals(0.0, size2D2.width, 0.01);
      assertNotNull(size2D2);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertTrue(size2D0.equals((Object)size2D1));
      assertFalse(size2D2.equals((Object)size2D0));
      assertFalse(size2D2.equals((Object)size2D1));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D2, size2D0);
      assertNotSame(size2D2, size2D1);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-1528.568402), size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D2.getHeight(), 0.01);
      assertEquals(0.0, size2D2.getWidth(), 0.01);
      
      LengthConstraintType lengthConstraintType0 = rectangleConstraint1.getHeightConstraintType();
      assertNotNull(lengthConstraintType0);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      
      RectangleConstraint rectangleConstraint3 = rectangleConstraint1.toFixedWidth((-1528.568402));
      assertNotNull(rectangleConstraint3);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      assertEquals((-1528.568402), rectangleConstraint3.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint4 = rectangleConstraint1.toRangeHeight(range3);
      assertNotNull(rectangleConstraint4);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-677.6744186206332), range3.getLowerBound(), 0.01);
      assertEquals((-677.6744186206332), range3.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals((-677.6744186206332), rectangleConstraint4.getHeight(), 0.01);
      
      String string0 = rectangleConstraint3.toString();
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint4);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertEquals("RectangleConstraint[LengthConstraintType.FIXED: width=-1528.568402, height=0.0]", string0);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      assertEquals((-1528.568402), rectangleConstraint3.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint5 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint5);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint2);
      assertNotSame(rectangleConstraint5, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint4);
      assertNotSame(rectangleConstraint5, rectangleConstraint1);
      assertNotSame(rectangleConstraint5, rectangleConstraint0);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint5.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint5.getHeight(), 0.01);
      
      Range range4 = rectangleConstraint5.getHeightRange();
      assertNull(range4);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint2);
      assertNotSame(rectangleConstraint5, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint4);
      assertNotSame(rectangleConstraint5, rectangleConstraint1);
      assertNotSame(rectangleConstraint5, rectangleConstraint0);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint5.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint5.getHeight(), 0.01);
      
      Size2D size2D3 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D3.height, 0.01);
      assertEquals((-677.6744186206332), size2D3.width, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-1528.568402), size2D0.height, 0.01);
      assertNotNull(size2D3);
      assertFalse(size2D3.equals((Object)size2D2));
      assertFalse(size2D3.equals((Object)size2D0));
      assertFalse(size2D3.equals((Object)size2D1));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(size2D0.equals((Object)size2D2));
      assertTrue(size2D0.equals((Object)size2D1));
      assertNotSame(size2D3, size2D2);
      assertNotSame(size2D3, size2D0);
      assertNotSame(size2D3, size2D1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D0, size2D3);
      assertEquals(0.0, size2D3.getHeight(), 0.01);
      assertEquals((-677.6744186206332), size2D3.getWidth(), 0.01);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1528.568402), size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint6 = rectangleConstraint1.toRangeWidth(range1);
      assertNotNull(rectangleConstraint6);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint5));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(rectangleConstraint6, rectangleConstraint2);
      assertNotSame(rectangleConstraint6, rectangleConstraint0);
      assertNotSame(rectangleConstraint6, rectangleConstraint1);
      assertNotSame(rectangleConstraint6, rectangleConstraint4);
      assertNotSame(rectangleConstraint6, rectangleConstraint3);
      assertNotSame(rectangleConstraint6, rectangleConstraint5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), rectangleConstraint6.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint6.getHeight(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      
      Size2D size2D4 = rectangleConstraint6.calculateConstrainedSize(size2D3);
      assertEquals(0.0, size2D3.height, 0.01);
      assertEquals((-677.6744186206332), size2D3.width, 0.01);
      assertEquals(0.0, size2D4.height, 0.01);
      assertEquals((-677.6744186206332), size2D4.width, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-1528.568402), size2D0.height, 0.01);
      assertNotNull(size2D4);
      assertFalse(size2D3.equals((Object)size2D2));
      assertFalse(size2D3.equals((Object)size2D0));
      assertFalse(size2D3.equals((Object)size2D1));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint5));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(size2D4.equals((Object)size2D1));
      assertTrue(size2D4.equals((Object)size2D3));
      assertFalse(size2D4.equals((Object)size2D0));
      assertFalse(size2D4.equals((Object)size2D2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(size2D0.equals((Object)size2D2));
      assertFalse(size2D0.equals((Object)size2D3));
      assertTrue(size2D0.equals((Object)size2D1));
      assertNotSame(size2D3, size2D2);
      assertNotSame(size2D3, size2D0);
      assertNotSame(size2D3, size2D1);
      assertNotSame(size2D3, size2D4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(rectangleConstraint6, rectangleConstraint2);
      assertNotSame(rectangleConstraint6, rectangleConstraint0);
      assertNotSame(rectangleConstraint6, rectangleConstraint1);
      assertNotSame(rectangleConstraint6, rectangleConstraint4);
      assertNotSame(rectangleConstraint6, rectangleConstraint3);
      assertNotSame(rectangleConstraint6, rectangleConstraint5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(size2D4, size2D1);
      assertNotSame(size2D4, size2D3);
      assertNotSame(size2D4, size2D0);
      assertNotSame(size2D4, size2D2);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D0, size2D3);
      assertNotSame(size2D0, size2D4);
      assertEquals(0.0, size2D3.getHeight(), 0.01);
      assertEquals((-677.6744186206332), size2D3.getWidth(), 0.01);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), rectangleConstraint6.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint6.getHeight(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, size2D4.getHeight(), 0.01);
      assertEquals((-677.6744186206332), size2D4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-1528.568402), size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      
      LengthConstraintType lengthConstraintType1 = rectangleConstraint4.getHeightConstraintType();
      assertNotNull(lengthConstraintType1);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint6));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertNotSame(rectangleConstraint4, rectangleConstraint5);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint6);
      assertEquals((-677.6744186206332), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.6744186206332), range0.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-677.6744186206332), range1.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range1.getUpperBound(), 0.01);
      assertEquals((-677.6744186206332), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType1.toString());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-677.6744186206332), range3.getLowerBound(), 0.01);
      assertEquals((-677.6744186206332), range3.getCentralValue(), 0.01);
      assertEquals((-677.6744186206332), range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals((-677.6744186206332), rectangleConstraint4.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      assertNotNull(lengthConstraintType0);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (Range) null);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      
      LengthConstraintType lengthConstraintType1 = rectangleConstraint0.getWidthConstraintType();
      assertNotNull(lengthConstraintType1);
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType1.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1.0), (-1.0));
      assertNotNull(rectangleConstraint0);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      
      double double0 = rectangleConstraint1.getWidth();
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      
      Size2D size2D0 = new Size2D();
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-1.0), size2D1.width, 0.01);
      assertEquals((-1.0), size2D1.height, 0.01);
      assertNotNull(size2D1);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(size2D1.equals((Object)size2D0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D0);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-1.0), size2D1.getHeight(), 0.01);
      assertEquals((-1.0), size2D1.getWidth(), 0.01);
      
      Size2D size2D2 = rectangleConstraint1.NONE.calculateConstrainedSize(size2D1);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-1.0), size2D1.width, 0.01);
      assertEquals((-1.0), size2D1.height, 0.01);
      assertEquals((-1.0), size2D2.width, 0.01);
      assertEquals((-1.0), size2D2.height, 0.01);
      assertNotNull(size2D2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(size2D0.equals((Object)size2D1));
      assertFalse(size2D1.equals((Object)size2D0));
      assertFalse(size2D2.equals((Object)size2D0));
      assertTrue(size2D2.equals((Object)size2D1));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D1, size2D2);
      assertNotSame(size2D1, size2D0);
      assertNotSame(size2D2, size2D0);
      assertNotSame(size2D2, size2D1);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-1.0), size2D1.getHeight(), 0.01);
      assertEquals((-1.0), size2D1.getWidth(), 0.01);
      assertEquals((-1.0), size2D2.getWidth(), 0.01);
      assertEquals((-1.0), size2D2.getHeight(), 0.01);
      
      Size2D size2D3 = rectangleConstraint1.calculateConstrainedSize(size2D1);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-1.0), size2D1.width, 0.01);
      assertEquals((-1.0), size2D1.height, 0.01);
      assertEquals((-1.0), size2D3.height, 0.01);
      assertEquals((-1.0), size2D3.width, 0.01);
      assertNotNull(size2D3);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(size2D0.equals((Object)size2D1));
      assertFalse(size2D0.equals((Object)size2D2));
      assertFalse(size2D1.equals((Object)size2D0));
      assertTrue(size2D1.equals((Object)size2D2));
      assertTrue(size2D3.equals((Object)size2D1));
      assertFalse(size2D3.equals((Object)size2D0));
      assertTrue(size2D3.equals((Object)size2D2));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D0, size2D3);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D1, size2D2);
      assertNotSame(size2D1, size2D0);
      assertNotSame(size2D1, size2D3);
      assertNotSame(size2D3, size2D2);
      assertNotSame(size2D3, size2D0);
      assertNotSame(size2D3, size2D1);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-1.0), size2D1.getHeight(), 0.01);
      assertEquals((-1.0), size2D1.getWidth(), 0.01);
      assertEquals((-1.0), size2D3.getHeight(), 0.01);
      assertEquals((-1.0), size2D3.getWidth(), 0.01);
      
      Range range0 = rectangleConstraint0.getHeightRange();
      assertNull(range0);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint2);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint2.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint2.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint3 = rectangleConstraint0.toFixedWidth((-1.0));
      assertNotNull(rectangleConstraint3);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint3.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint3.getWidth(), 0.01);
      
      Size2D size2D4 = new Size2D();
      assertEquals(0.0, size2D4.width, 0.01);
      assertEquals(0.0, size2D4.height, 0.01);
      assertNotNull(size2D4);
      assertFalse(size2D4.equals((Object)size2D2));
      assertFalse(size2D4.equals((Object)size2D3));
      assertTrue(size2D4.equals((Object)size2D0));
      assertFalse(size2D4.equals((Object)size2D1));
      assertEquals(0.0, size2D4.getHeight(), 0.01);
      assertEquals(0.0, size2D4.getWidth(), 0.01);
      
      Size2D size2D5 = rectangleConstraint2.NONE.calculateConstrainedSize(size2D4);
      assertEquals(0.0, size2D4.width, 0.01);
      assertEquals(0.0, size2D4.height, 0.01);
      assertEquals(0.0, size2D5.height, 0.01);
      assertEquals(0.0, size2D5.width, 0.01);
      assertNotNull(size2D5);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(size2D4.equals((Object)size2D2));
      assertFalse(size2D4.equals((Object)size2D3));
      assertTrue(size2D4.equals((Object)size2D0));
      assertFalse(size2D4.equals((Object)size2D1));
      assertFalse(size2D5.equals((Object)size2D3));
      assertFalse(size2D5.equals((Object)size2D2));
      assertFalse(size2D5.equals((Object)size2D1));
      assertTrue(size2D5.equals((Object)size2D4));
      assertTrue(size2D5.equals((Object)size2D0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(size2D4, size2D2);
      assertNotSame(size2D4, size2D0);
      assertNotSame(size2D4, size2D5);
      assertNotSame(size2D4, size2D3);
      assertNotSame(size2D4, size2D1);
      assertNotSame(size2D5, size2D3);
      assertNotSame(size2D5, size2D4);
      assertNotSame(size2D5, size2D2);
      assertNotSame(size2D5, size2D0);
      assertNotSame(size2D5, size2D1);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint2.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, size2D4.getHeight(), 0.01);
      assertEquals(0.0, size2D4.getWidth(), 0.01);
      assertEquals(0.0, size2D5.getHeight(), 0.01);
      assertEquals(0.0, size2D5.getWidth(), 0.01);
      
      double double1 = rectangleConstraint0.getHeight();
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertEquals(double1, double0, 0.01);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertEquals((-1.0), double1, 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      
      Range range1 = rectangleConstraint0.getWidthRange();
      assertNull(range1);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint4 = new RectangleConstraint((Range) null, 2282.0);
      assertNotNull(rectangleConstraint4);
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertEquals(2282.0, rectangleConstraint4.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        rectangleConstraint0.toRangeHeight((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      assertNotNull(lengthConstraintType0);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range1, lengthConstraintType0, 0.0, range0, lengthConstraintType0);
      assertNotNull(rectangleConstraint0);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertSame(rectangleConstraint2, rectangleConstraint1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint3 = rectangleConstraint1.toRangeWidth(range0);
      assertNotNull(rectangleConstraint3);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      
      double double0 = rectangleConstraint3.getHeight();
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint3.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint4 = rectangleConstraint1.toRangeWidth(range1);
      assertNotNull(rectangleConstraint4);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      
      Size2D size2D0 = new Size2D(0.0, 0.0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      
      Size2D size2D1 = rectangleConstraint4.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals(0.0, size2D1.height, 0.01);
      assertNotNull(size2D1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertTrue(size2D1.equals((Object)size2D0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint5 = rectangleConstraint4.toRangeHeight(range1);
      assertNotNull(rectangleConstraint5);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint1));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint5);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertNotSame(rectangleConstraint5, rectangleConstraint4);
      assertNotSame(rectangleConstraint5, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint0);
      assertNotSame(rectangleConstraint5, rectangleConstraint2);
      assertNotSame(rectangleConstraint5, rectangleConstraint1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint5.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint5.getWidth(), 0.01);
      
      size2D1.height = 3585.625493;
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(3585.625493, size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      
      Size2D size2D2 = rectangleConstraint2.calculateConstrainedSize(size2D1);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals(3585.625493, size2D1.height, 0.01);
      assertEquals(0.0, size2D2.height, 0.01);
      assertEquals(0.0, size2D2.width, 0.01);
      assertNotNull(size2D2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertFalse(size2D0.equals((Object)size2D1));
      assertFalse(size2D1.equals((Object)size2D0));
      assertTrue(size2D2.equals((Object)size2D0));
      assertFalse(size2D2.equals((Object)size2D1));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint5);
      assertSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint5);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D2);
      assertNotSame(size2D1, size2D0);
      assertNotSame(size2D2, size2D1);
      assertNotSame(size2D2, size2D0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(3585.625493, size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertEquals(0.0, size2D2.getWidth(), 0.01);
      assertEquals(0.0, size2D2.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint6 = rectangleConstraint1.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint6);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint6, rectangleConstraint5);
      assertNotSame(rectangleConstraint6, rectangleConstraint3);
      assertSame(rectangleConstraint6, rectangleConstraint1);
      assertSame(rectangleConstraint6, rectangleConstraint2);
      assertNotSame(rectangleConstraint6, rectangleConstraint4);
      assertNotSame(rectangleConstraint6, rectangleConstraint0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint6.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint6.getWidth(), 0.01);
      
      String string0 = rectangleConstraint5.toString();
      assertNotNull(string0);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint6));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint6);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint5);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertNotSame(rectangleConstraint5, rectangleConstraint4);
      assertNotSame(rectangleConstraint5, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint0);
      assertNotSame(rectangleConstraint5, rectangleConstraint2);
      assertNotSame(rectangleConstraint5, rectangleConstraint1);
      assertNotSame(rectangleConstraint5, rectangleConstraint6);
      assertEquals("RectangleConstraint[RectangleConstraintType.RANGE: width=0.0, height=0.0]", string0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint5.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint5.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint7 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint7);
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint7.equals((Object)rectangleConstraint6));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertNotSame(rectangleConstraint7, rectangleConstraint4);
      assertNotSame(rectangleConstraint7, rectangleConstraint3);
      assertNotSame(rectangleConstraint7, rectangleConstraint0);
      assertNotSame(rectangleConstraint7, rectangleConstraint5);
      assertNotSame(rectangleConstraint7, rectangleConstraint2);
      assertNotSame(rectangleConstraint7, rectangleConstraint1);
      assertNotSame(rectangleConstraint7, rectangleConstraint6);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertEquals(0.0, rectangleConstraint7.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint7.getWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint8 = rectangleConstraint0.toFixedHeight(0.0);
      assertNotNull(rectangleConstraint8);
      assertTrue(range0.equals((Object)range1));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint8.equals((Object)rectangleConstraint6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertNotSame(range0, range1);
      assertNotSame(rectangleConstraint8, rectangleConstraint4);
      assertNotSame(rectangleConstraint8, rectangleConstraint3);
      assertNotSame(rectangleConstraint8, rectangleConstraint0);
      assertNotSame(rectangleConstraint8, rectangleConstraint5);
      assertNotSame(rectangleConstraint8, rectangleConstraint2);
      assertNotSame(rectangleConstraint8, rectangleConstraint7);
      assertNotSame(rectangleConstraint8, rectangleConstraint1);
      assertNotSame(rectangleConstraint8, rectangleConstraint6);
      assertNotSame(range1, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint8.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint8.getWidth(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      
      Range range2 = rectangleConstraint6.getWidthRange();
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint6, rectangleConstraint5);
      assertNotSame(rectangleConstraint6, rectangleConstraint7);
      assertNotSame(rectangleConstraint6, rectangleConstraint3);
      assertSame(rectangleConstraint6, rectangleConstraint1);
      assertSame(rectangleConstraint6, rectangleConstraint2);
      assertNotSame(rectangleConstraint6, rectangleConstraint8);
      assertNotSame(rectangleConstraint6, rectangleConstraint4);
      assertNotSame(rectangleConstraint6, rectangleConstraint0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint6.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint6.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint9 = rectangleConstraint4.toUnconstrainedHeight();
      assertNotNull(rectangleConstraint9);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      assertNotSame(rectangleConstraint9, rectangleConstraint2);
      assertNotSame(rectangleConstraint9, rectangleConstraint3);
      assertNotSame(rectangleConstraint9, rectangleConstraint8);
      assertNotSame(rectangleConstraint9, rectangleConstraint0);
      assertNotSame(rectangleConstraint9, rectangleConstraint4);
      assertNotSame(rectangleConstraint9, rectangleConstraint6);
      assertNotSame(rectangleConstraint9, rectangleConstraint7);
      assertNotSame(rectangleConstraint9, rectangleConstraint1);
      assertNotSame(rectangleConstraint9, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint4, rectangleConstraint8);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint6);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint5);
      assertNotSame(rectangleConstraint4, rectangleConstraint7);
      assertNotSame(rectangleConstraint4, rectangleConstraint9);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint9.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint9.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      
      Size2D size2D3 = rectangleConstraint9.calculateConstrainedSize(size2D2);
      assertEquals(0.0, size2D3.width, 0.01);
      assertEquals(0.0, size2D3.height, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals(3585.625493, size2D1.height, 0.01);
      assertEquals(0.0, size2D2.height, 0.01);
      assertEquals(0.0, size2D2.width, 0.01);
      assertNotNull(size2D3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint9.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertTrue(size2D3.equals((Object)size2D2));
      assertFalse(size2D3.equals((Object)size2D1));
      assertTrue(size2D3.equals((Object)size2D0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertTrue(size2D0.equals((Object)size2D2));
      assertFalse(size2D0.equals((Object)size2D1));
      assertFalse(size2D1.equals((Object)size2D2));
      assertFalse(size2D1.equals((Object)size2D0));
      assertTrue(size2D2.equals((Object)size2D0));
      assertFalse(size2D2.equals((Object)size2D1));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      assertNotSame(rectangleConstraint9, rectangleConstraint2);
      assertNotSame(rectangleConstraint9, rectangleConstraint3);
      assertNotSame(rectangleConstraint9, rectangleConstraint8);
      assertNotSame(rectangleConstraint9, rectangleConstraint0);
      assertNotSame(rectangleConstraint9, rectangleConstraint4);
      assertNotSame(rectangleConstraint9, rectangleConstraint6);
      assertNotSame(rectangleConstraint9, rectangleConstraint7);
      assertNotSame(rectangleConstraint9, rectangleConstraint1);
      assertNotSame(rectangleConstraint9, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(size2D3, size2D1);
      assertNotSame(size2D3, size2D2);
      assertNotSame(size2D3, size2D0);
      assertSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint9);
      assertNotSame(rectangleConstraint2, rectangleConstraint7);
      assertSame(rectangleConstraint2, rectangleConstraint1);
      assertSame(rectangleConstraint2, rectangleConstraint6);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint8);
      assertNotSame(rectangleConstraint4, rectangleConstraint8);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint6);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint5);
      assertNotSame(rectangleConstraint4, rectangleConstraint7);
      assertNotSame(rectangleConstraint4, rectangleConstraint9);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D0, size2D3);
      assertNotSame(size2D1, size2D2);
      assertNotSame(size2D1, size2D0);
      assertNotSame(size2D1, size2D3);
      assertNotSame(size2D2, size2D3);
      assertNotSame(size2D2, size2D1);
      assertNotSame(size2D2, size2D0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint9.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint9.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, size2D3.getHeight(), 0.01);
      assertEquals(0.0, size2D3.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(3585.625493, size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertEquals(0.0, size2D2.getWidth(), 0.01);
      assertEquals(0.0, size2D2.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint10 = rectangleConstraint5.toFixedWidth(3585.625493);
      assertNotNull(rectangleConstraint10);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint10.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint5.equals((Object)rectangleConstraint6));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint10);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint10);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint10, rectangleConstraint8);
      assertNotSame(rectangleConstraint10, rectangleConstraint6);
      assertNotSame(rectangleConstraint10, rectangleConstraint1);
      assertNotSame(rectangleConstraint10, rectangleConstraint0);
      assertNotSame(rectangleConstraint10, rectangleConstraint4);
      assertNotSame(rectangleConstraint10, rectangleConstraint9);
      assertNotSame(rectangleConstraint10, rectangleConstraint7);
      assertNotSame(rectangleConstraint10, rectangleConstraint5);
      assertNotSame(rectangleConstraint10, rectangleConstraint3);
      assertNotSame(rectangleConstraint10, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint8);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint6);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint10);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint5);
      assertNotSame(rectangleConstraint4, rectangleConstraint7);
      assertNotSame(rectangleConstraint4, rectangleConstraint9);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertNotSame(rectangleConstraint5, rectangleConstraint9);
      assertNotSame(rectangleConstraint5, rectangleConstraint4);
      assertNotSame(rectangleConstraint5, rectangleConstraint8);
      assertNotSame(rectangleConstraint5, rectangleConstraint3);
      assertNotSame(rectangleConstraint5, rectangleConstraint0);
      assertNotSame(rectangleConstraint5, rectangleConstraint2);
      assertNotSame(rectangleConstraint5, rectangleConstraint7);
      assertNotSame(rectangleConstraint5, rectangleConstraint1);
      assertNotSame(rectangleConstraint5, rectangleConstraint10);
      assertNotSame(rectangleConstraint5, rectangleConstraint6);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(3585.625493, rectangleConstraint10.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint10.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint5.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint5.getWidth(), 0.01);
      
      String string1 = rectangleConstraint4.toString();
      assertNotNull(string1);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertTrue(string1.equals((Object)string0));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint10);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint10);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint4, rectangleConstraint8);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint6);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint10);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint5);
      assertNotSame(rectangleConstraint4, rectangleConstraint7);
      assertNotSame(rectangleConstraint4, rectangleConstraint9);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertEquals("RectangleConstraint[RectangleConstraintType.RANGE: width=0.0, height=0.0]", string1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint11 = rectangleConstraint4.toFixedWidth(0.0);
      assertNotNull(rectangleConstraint11);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint10);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint11);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint11);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint10);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint11, rectangleConstraint4);
      assertNotSame(rectangleConstraint11, rectangleConstraint10);
      assertNotSame(rectangleConstraint11, rectangleConstraint0);
      assertNotSame(rectangleConstraint11, rectangleConstraint3);
      assertNotSame(rectangleConstraint11, rectangleConstraint6);
      assertNotSame(rectangleConstraint11, rectangleConstraint1);
      assertNotSame(rectangleConstraint11, rectangleConstraint8);
      assertNotSame(rectangleConstraint11, rectangleConstraint9);
      assertNotSame(rectangleConstraint11, rectangleConstraint5);
      assertNotSame(rectangleConstraint11, rectangleConstraint7);
      assertNotSame(rectangleConstraint11, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint8);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint11);
      assertNotSame(rectangleConstraint4, rectangleConstraint6);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint10);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint5);
      assertNotSame(rectangleConstraint4, rectangleConstraint7);
      assertNotSame(rectangleConstraint4, rectangleConstraint9);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint11.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint11.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint12 = rectangleConstraint2.toRangeHeight(range0);
      assertNotNull(rectangleConstraint12);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint12.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint12.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint12.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint12.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint12.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint12.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint12.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint12.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint12.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint12.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint12.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint12.equals((Object)rectangleConstraint9));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint10);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint11);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint12);
      assertSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint11);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint12);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint1, rectangleConstraint10);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertNotSame(rectangleConstraint2, rectangleConstraint4);
      assertNotSame(rectangleConstraint2, rectangleConstraint10);
      assertNotSame(rectangleConstraint2, rectangleConstraint5);
      assertNotSame(rectangleConstraint2, rectangleConstraint9);
      assertNotSame(rectangleConstraint2, rectangleConstraint7);
      assertSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint11);
      assertSame(rectangleConstraint2, rectangleConstraint6);
      assertNotSame(rectangleConstraint2, rectangleConstraint3);
      assertNotSame(rectangleConstraint2, rectangleConstraint12);
      assertNotSame(rectangleConstraint2, rectangleConstraint8);
      assertNotSame(rectangleConstraint12, rectangleConstraint11);
      assertNotSame(rectangleConstraint12, rectangleConstraint2);
      assertNotSame(rectangleConstraint12, rectangleConstraint7);
      assertNotSame(rectangleConstraint12, rectangleConstraint5);
      assertNotSame(rectangleConstraint12, rectangleConstraint6);
      assertNotSame(rectangleConstraint12, rectangleConstraint0);
      assertNotSame(rectangleConstraint12, rectangleConstraint3);
      assertNotSame(rectangleConstraint12, rectangleConstraint10);
      assertNotSame(rectangleConstraint12, rectangleConstraint1);
      assertNotSame(rectangleConstraint12, rectangleConstraint8);
      assertNotSame(rectangleConstraint12, rectangleConstraint4);
      assertNotSame(rectangleConstraint12, rectangleConstraint9);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint12.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint12.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint13 = rectangleConstraint6.toRangeWidth(range0);
      assertNotNull(rectangleConstraint13);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint12));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint12));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint13.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint13.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint13.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint13.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint13.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint13.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint13.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint13.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint13.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint13.equals((Object)rectangleConstraint12));
      assertFalse(rectangleConstraint13.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint13.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint13.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint12));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint6.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint12);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint10);
      assertNotSame(rectangleConstraint0, rectangleConstraint13);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint11);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint11);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint12);
      assertNotSame(rectangleConstraint1, rectangleConstraint13);
      assertNotSame(rectangleConstraint1, rectangleConstraint10);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint13, rectangleConstraint2);
      assertNotSame(rectangleConstraint13, rectangleConstraint8);
      assertNotSame(rectangleConstraint13, rectangleConstraint4);
      assertNotSame(rectangleConstraint13, rectangleConstraint1);
      assertNotSame(rectangleConstraint13, rectangleConstraint5);
      assertNotSame(rectangleConstraint13, rectangleConstraint11);
      assertNotSame(rectangleConstraint13, rectangleConstraint7);
      assertNotSame(rectangleConstraint13, rectangleConstraint0);
      assertNotSame(rectangleConstraint13, rectangleConstraint3);
      assertNotSame(rectangleConstraint13, rectangleConstraint12);
      assertNotSame(rectangleConstraint13, rectangleConstraint9);
      assertNotSame(rectangleConstraint13, rectangleConstraint10);
      assertNotSame(rectangleConstraint13, rectangleConstraint6);
      assertSame(rectangleConstraint6, rectangleConstraint2);
      assertNotSame(rectangleConstraint6, rectangleConstraint12);
      assertNotSame(rectangleConstraint6, rectangleConstraint4);
      assertNotSame(rectangleConstraint6, rectangleConstraint0);
      assertNotSame(rectangleConstraint6, rectangleConstraint5);
      assertNotSame(rectangleConstraint6, rectangleConstraint7);
      assertNotSame(rectangleConstraint6, rectangleConstraint3);
      assertNotSame(rectangleConstraint6, rectangleConstraint11);
      assertSame(rectangleConstraint6, rectangleConstraint1);
      assertNotSame(rectangleConstraint6, rectangleConstraint13);
      assertNotSame(rectangleConstraint6, rectangleConstraint8);
      assertNotSame(rectangleConstraint6, rectangleConstraint10);
      assertNotSame(rectangleConstraint6, rectangleConstraint9);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint13.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint13.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint6.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint6.getWidth(), 0.01);
      
      LengthConstraintType lengthConstraintType1 = rectangleConstraint11.getWidthConstraintType();
      assertNotNull(lengthConstraintType1);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint12));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint13));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint12));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint13));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint4));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint13));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint11.equals((Object)rectangleConstraint12));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint12));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint8));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint13));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint11));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint6));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint10));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint5));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint7));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint9));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint4.equals((Object)rectangleConstraint0));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(rectangleConstraint0, rectangleConstraint4);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint12);
      assertNotSame(rectangleConstraint0, rectangleConstraint9);
      assertNotSame(rectangleConstraint0, rectangleConstraint8);
      assertNotSame(rectangleConstraint0, rectangleConstraint6);
      assertNotSame(rectangleConstraint0, rectangleConstraint10);
      assertNotSame(rectangleConstraint0, rectangleConstraint13);
      assertNotSame(rectangleConstraint0, rectangleConstraint7);
      assertNotSame(rectangleConstraint0, rectangleConstraint5);
      assertNotSame(rectangleConstraint0, rectangleConstraint11);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint11);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint1, rectangleConstraint12);
      assertNotSame(rectangleConstraint1, rectangleConstraint13);
      assertNotSame(rectangleConstraint1, rectangleConstraint10);
      assertNotSame(rectangleConstraint1, rectangleConstraint9);
      assertNotSame(rectangleConstraint1, rectangleConstraint7);
      assertNotSame(rectangleConstraint1, rectangleConstraint5);
      assertSame(rectangleConstraint1, rectangleConstraint6);
      assertNotSame(rectangleConstraint1, rectangleConstraint8);
      assertSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint4);
      assertNotSame(rectangleConstraint11, rectangleConstraint4);
      assertNotSame(rectangleConstraint11, rectangleConstraint0);
      assertNotSame(rectangleConstraint11, rectangleConstraint3);
      assertNotSame(rectangleConstraint11, rectangleConstraint1);
      assertNotSame(rectangleConstraint11, rectangleConstraint5);
      assertNotSame(rectangleConstraint11, rectangleConstraint7);
      assertNotSame(rectangleConstraint11, rectangleConstraint10);
      assertNotSame(rectangleConstraint11, rectangleConstraint6);
      assertNotSame(rectangleConstraint11, rectangleConstraint8);
      assertNotSame(rectangleConstraint11, rectangleConstraint9);
      assertNotSame(rectangleConstraint11, rectangleConstraint13);
      assertNotSame(rectangleConstraint11, rectangleConstraint2);
      assertNotSame(rectangleConstraint11, rectangleConstraint12);
      assertNotSame(rectangleConstraint4, rectangleConstraint12);
      assertNotSame(rectangleConstraint4, rectangleConstraint8);
      assertNotSame(rectangleConstraint4, rectangleConstraint13);
      assertNotSame(rectangleConstraint4, rectangleConstraint11);
      assertNotSame(rectangleConstraint4, rectangleConstraint6);
      assertNotSame(rectangleConstraint4, rectangleConstraint10);
      assertNotSame(rectangleConstraint4, rectangleConstraint3);
      assertNotSame(rectangleConstraint4, rectangleConstraint5);
      assertNotSame(rectangleConstraint4, rectangleConstraint7);
      assertNotSame(rectangleConstraint4, rectangleConstraint9);
      assertNotSame(rectangleConstraint4, rectangleConstraint2);
      assertNotSame(rectangleConstraint4, rectangleConstraint1);
      assertNotSame(rectangleConstraint4, rectangleConstraint0);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint11.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint11.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint4.getHeight(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType1.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      
      Range range2 = Range.shift(range1, (-1.0), true);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-2.0), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2.0), range2.getCentralValue(), 0.01);
      assertEquals((-2.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      assertNotNull(lengthConstraintType0);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1.0), range2, lengthConstraintType0, (-1.0), range0, lengthConstraintType0);
      assertNotNull(rectangleConstraint0);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-2.0), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2.0), range2.getCentralValue(), 0.01);
      assertEquals((-2.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeHeight(range1);
      assertNotNull(rectangleConstraint1);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-2.0), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2.0), range2.getCentralValue(), 0.01);
      assertEquals((-2.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint1.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint2 = rectangleConstraint0.toFixedWidth((-1.0));
      assertNotNull(rectangleConstraint2);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint2.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-2.0), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2.0), range2.getCentralValue(), 0.01);
      assertEquals((-2.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint2.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint2.getWidth(), 0.01);
      
      Range range3 = Range.expandToInclude(range1, 0.0);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-0.5), range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(1.0, range3.getLength(), 0.01);
      
      RectangleConstraint rectangleConstraint3 = rectangleConstraint1.toFixedWidth((-1.0));
      assertNotNull(rectangleConstraint3);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint3.equals((Object)rectangleConstraint0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertNotSame(rectangleConstraint3, rectangleConstraint2);
      assertNotSame(rectangleConstraint3, rectangleConstraint1);
      assertNotSame(rectangleConstraint3, rectangleConstraint0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-2.0), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2.0), range2.getCentralValue(), 0.01);
      assertEquals((-2.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint3.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint3.getWidth(), 0.01);
      
      Range range4 = Range.shift(range0, (-1.0));
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-2.0), range4.getCentralValue(), 0.01);
      assertEquals((-2.0), range4.getLowerBound(), 0.01);
      assertEquals((-2.0), range4.getUpperBound(), 0.01);
      
      Size2D size2D0 = new Size2D((-1.0), (-1.0));
      assertEquals((-1.0), size2D0.height, 0.01);
      assertEquals((-1.0), size2D0.width, 0.01);
      assertNotNull(size2D0);
      assertEquals((-1.0), size2D0.getWidth(), 0.01);
      assertEquals((-1.0), size2D0.getHeight(), 0.01);
      
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      assertEquals((-1.0), size2D0.height, 0.01);
      assertEquals((-1.0), size2D0.width, 0.01);
      assertEquals((-1.0), size2D1.width, 0.01);
      assertEquals((-1.0), size2D1.height, 0.01);
      assertNotNull(size2D1);
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertTrue(size2D1.equals((Object)size2D0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D1, size2D0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-2.0), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2.0), range2.getCentralValue(), 0.01);
      assertEquals((-2.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), size2D0.getWidth(), 0.01);
      assertEquals((-1.0), size2D0.getHeight(), 0.01);
      assertEquals((-1.0), size2D1.getHeight(), 0.01);
      assertEquals((-1.0), size2D1.getWidth(), 0.01);
      
      LengthConstraintType lengthConstraintType1 = rectangleConstraint0.getHeightConstraintType();
      assertNotNull(lengthConstraintType1);
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertSame(lengthConstraintType1, lengthConstraintType0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-2.0), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2.0), range2.getCentralValue(), 0.01);
      assertEquals((-2.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType1.toString());
      
      Range range5 = rectangleConstraint0.getHeightRange();
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range1));
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertSame(range5, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-2.0), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2.0), range2.getCentralValue(), 0.01);
      assertEquals((-2.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), range5.getUpperBound(), 0.01);
      assertEquals((-1.0), range5.getLowerBound(), 0.01);
      assertEquals((-1.0), range5.getCentralValue(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      
      String string0 = rectangleConstraint1.toString();
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint3));
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint1, rectangleConstraint2);
      assertNotSame(rectangleConstraint1, rectangleConstraint3);
      assertEquals("RectangleConstraint[LengthConstraintType.FIXED: width=-1.0, height=-1.0]", string0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-2.0), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2.0), range2.getCentralValue(), 0.01);
      assertEquals((-2.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-1.0), rectangleConstraint1.getHeight(), 0.01);
      
      Size2D size2D2 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      assertEquals((-1.0), size2D0.height, 0.01);
      assertEquals((-1.0), size2D0.width, 0.01);
      assertEquals((-1.0), size2D2.width, 0.01);
      assertEquals((-1.0), size2D2.height, 0.01);
      assertNotNull(size2D2);
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint3));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint2));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertTrue(size2D0.equals((Object)size2D1));
      assertTrue(size2D2.equals((Object)size2D1));
      assertTrue(size2D2.equals((Object)size2D0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(rectangleConstraint0, rectangleConstraint3);
      assertNotSame(rectangleConstraint0, rectangleConstraint2);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(size2D0, size2D1);
      assertNotSame(size2D0, size2D2);
      assertNotSame(size2D2, size2D1);
      assertNotSame(size2D2, size2D0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-2.0), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2.0), range2.getCentralValue(), 0.01);
      assertEquals((-2.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("LengthConstraintType.FIXED", lengthConstraintType0.toString());
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1.0), size2D0.getWidth(), 0.01);
      assertEquals((-1.0), size2D0.getHeight(), 0.01);
      assertEquals((-1.0), size2D2.getWidth(), 0.01);
      assertEquals((-1.0), size2D2.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range((-1005.319311), 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1005.319311), range0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toUnconstrainedWidth();
      RectangleConstraint rectangleConstraint3 = rectangleConstraint2.NONE.toUnconstrainedHeight();
      assertSame(rectangleConstraint2, rectangleConstraint1);
      
      range0.toString();
      Size2D size2D0 = new Size2D((-1005.319311), 0.0);
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      size2D0.width = (-1005.319311);
      RectangleConstraint rectangleConstraint4 = rectangleConstraint1.toFixedHeight(5193.592613471632);
      RectangleConstraint rectangleConstraint5 = rectangleConstraint4.NONE.toUnconstrainedWidth();
      String string0 = rectangleConstraint1.NONE.toString();
      assertEquals("RectangleConstraint[LengthConstraintType.NONE: width=0.0, height=0.0]", string0);
      
      rectangleConstraint4.toFixedWidth((-1005.319311));
      Size2D size2D2 = rectangleConstraint5.NONE.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D2.height, 0.01);
      
      rectangleConstraint1.toUnconstrainedWidth();
      rectangleConstraint2.getHeightRange();
      RectangleConstraint rectangleConstraint6 = rectangleConstraint4.toFixedWidth(1326.54311);
      assertEquals(5193.592613471632, rectangleConstraint6.getHeight(), 0.01);
      assertEquals(1326.54311, rectangleConstraint6.getWidth(), 0.01);
      
      rectangleConstraint0.toFixedHeight((-1726.658));
      Size2D size2D3 = rectangleConstraint4.calculateConstrainedSize(size2D1);
      assertEquals((-1005.319311), size2D3.width, 0.01);
      assertEquals(5193.592613471632, size2D3.height, 0.01);
      assertEquals((-1005.319311), rectangleConstraint4.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint7 = rectangleConstraint3.toRangeWidth(range0);
      assertSame(rectangleConstraint3, rectangleConstraint5);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint7.getHeight(), 0.01);
  }
}
