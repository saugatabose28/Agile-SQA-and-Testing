/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:35:52 GMT 2023
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.LineBorder;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.util.UnitType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineBorder_ESTest extends LineBorder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      assertNotNull(lineBorder0);
      
      RectangleInsets rectangleInsets0 = lineBorder0.getInsets();
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotNull(rectangleInsets0);
      
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      BasicStroke basicStroke0 = (BasicStroke)lineBorder0.getStroke();
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      boolean boolean0 = lineBorder0.equals(lineBorder0);
      assertTrue(boolean0);
      
      Color color0 = (Color)lineBorder0.getPaint();
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      RectangleInsets rectangleInsets1 = lineBorder0.getInsets();
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertSame(rectangleInsets1, rectangleInsets0);
      assertNotNull(rectangleInsets1);
      
      RectangleInsets rectangleInsets2 = lineBorder0.getInsets();
      assertEquals(1.0, rectangleInsets2.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets2.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets2.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets2.getUnitType());
      assertEquals(1.0, rectangleInsets2.getLeft(), 0.01);
      assertSame(rectangleInsets2, rectangleInsets0);
      assertSame(rectangleInsets2, rectangleInsets1);
      assertNotNull(rectangleInsets2);
      
      RectangleInsets rectangleInsets3 = lineBorder0.getInsets();
      assertEquals(1.0, rectangleInsets3.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets3.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets3.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets3.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets3.getUnitType());
      assertSame(rectangleInsets3, rectangleInsets0);
      assertSame(rectangleInsets3, rectangleInsets2);
      assertSame(rectangleInsets3, rectangleInsets1);
      assertNotNull(rectangleInsets3);
      
      BasicStroke basicStroke1 = (BasicStroke)lineBorder0.getStroke();
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn("sK<!WX%AwhRon$Hb").when(stroke0).toString();
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      doReturn((-2354.33159301)).when(rectangleInsets0).calculateBottomInset(anyDouble());
      doReturn(1992.59).when(rectangleInsets0).calculateLeftInset(anyDouble());
      doReturn(272.0).when(rectangleInsets0).calculateRightInset(anyDouble());
      doReturn((-2354.33159301)).when(rectangleInsets0).calculateTopInset(anyDouble());
      doReturn("").when(rectangleInsets0).toString();
      LineBorder lineBorder0 = new LineBorder(paint0, stroke0, rectangleInsets0);
      assertNotNull(lineBorder0);
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn(";7k/").when(paint1).toString();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets1 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder1 = new LineBorder(paint1, stroke1, rectangleInsets1);
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotNull(lineBorder1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = lineBorder1.equals(lineBorder0);
      assertFalse(boolean0);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder1, lineBorder0);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-212.908)).when(rectangle2D0).getHeight();
      doReturn((-212.908)).when(rectangle2D0).getWidth();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-212.908)).when(rectangle2D1).getHeight();
      doReturn((-1193.714331739855)).when(rectangle2D1).getWidth();
      lineBorder1.draw(graphics2D2, rectangle2D1);
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotSame(lineBorder1, lineBorder0);
      
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1193.714331739855)).when(rectangle2D2).getHeight();
      doReturn((-1193.714331739855)).when(rectangle2D2).getWidth();
      lineBorder0.draw(graphics2D1, rectangle2D2);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertNotSame(lineBorder0, lineBorder1);
      
      lineBorder1.draw(graphics2D0, rectangle2D0);
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotSame(lineBorder1, lineBorder0);
      
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn("").when(graphics2D3).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D3 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(2717.0087455366925).when(rectangle2D3).getHeight();
      doReturn(159.84564).when(rectangle2D3).getWidth();
      doReturn((-1018.044099)).when(rectangle2D3).getX();
      doReturn((-2354.33159301)).when(rectangle2D3).getY();
      lineBorder0.draw(graphics2D3, rectangle2D3);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertNotSame(lineBorder0, lineBorder1);
      
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D4 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-212.908)).when(rectangle2D4).getHeight();
      doReturn(0.0).when(rectangle2D4).getWidth();
      lineBorder0.draw(graphics2D4, rectangle2D4);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertNotSame(lineBorder0, lineBorder1);
      
      boolean boolean1 = lineBorder0.equals(lineBorder1);
      assertFalse(boolean1);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder1, lineBorder0);
      
      LineBorder lineBorder2 = new LineBorder();
      assertFalse(lineBorder2.equals((Object)lineBorder1));
      assertFalse(lineBorder2.equals((Object)lineBorder0));
      assertNotNull(lineBorder2);
      
      boolean boolean2 = lineBorder0.equals(lineBorder2);
      assertFalse(boolean2);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertFalse(lineBorder0.equals((Object)lineBorder2));
      assertFalse(lineBorder2.equals((Object)lineBorder1));
      assertFalse(lineBorder2.equals((Object)lineBorder0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder0, lineBorder2);
      assertNotSame(lineBorder2, lineBorder1);
      assertNotSame(lineBorder2, lineBorder0);
      
      RectangleInsets rectangleInsets2 = lineBorder0.getInsets();
      assertEquals(0.0, rectangleInsets2.getLeft(), 0.01);
      assertNull(rectangleInsets2.getUnitType());
      assertEquals(0.0, rectangleInsets2.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets2.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets2.getRight(), 0.01);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertFalse(lineBorder0.equals((Object)lineBorder2));
      assertFalse(rectangleInsets2.equals((Object)rectangleInsets1));
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder0, lineBorder2);
      assertSame(rectangleInsets2, rectangleInsets0);
      assertNotSame(rectangleInsets2, rectangleInsets1);
      assertNotNull(rectangleInsets2);
      
      boolean boolean3 = lineBorder2.equals("");
      assertFalse(boolean3);
      assertFalse(lineBorder2.equals((Object)lineBorder1));
      assertFalse(lineBorder2.equals((Object)lineBorder0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotSame(lineBorder2, lineBorder1);
      assertNotSame(lineBorder2, lineBorder0);
      
      Paint paint2 = lineBorder1.getPaint();
      assertEquals(0, paint2.getTransparency());
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertFalse(lineBorder1.equals((Object)lineBorder2));
      assertFalse(paint2.equals((Object)paint0));
      assertNotSame(lineBorder1, lineBorder0);
      assertNotSame(lineBorder1, lineBorder2);
      assertNotSame(paint2, paint0);
      assertSame(paint2, paint1);
      assertNotNull(paint2);
      
      Paint paint3 = lineBorder0.getPaint();
      assertEquals(0, paint3.getTransparency());
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertFalse(lineBorder0.equals((Object)lineBorder2));
      assertFalse(paint3.equals((Object)paint1));
      assertFalse(paint3.equals((Object)paint2));
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder0, lineBorder2);
      assertNotSame(paint3, paint1);
      assertSame(paint3, paint0);
      assertNotSame(paint3, paint2);
      assertNotNull(paint3);
      
      Color color0 = (Color)lineBorder2.getPaint();
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertFalse(lineBorder2.equals((Object)lineBorder1));
      assertFalse(lineBorder2.equals((Object)lineBorder0));
      assertNotSame(lineBorder2, lineBorder1);
      assertNotSame(lineBorder2, lineBorder0);
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn("paint", (String) null).when(stroke0).toString();
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      doReturn((-2025.4286598)).when(rectangleInsets0).calculateBottomInset(anyDouble());
      doReturn((-1.0)).when(rectangleInsets0).calculateLeftInset(anyDouble());
      doReturn((-1.0)).when(rectangleInsets0).calculateRightInset(anyDouble());
      doReturn((-2018.989)).when(rectangleInsets0).calculateTopInset(anyDouble());
      LineBorder lineBorder0 = new LineBorder(paint0, stroke0, rectangleInsets0);
      assertNotNull(lineBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      boolean boolean0 = lineBorder0.equals("paint");
      assertFalse(boolean0);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(rectangle2D0).getHeight();
      doReturn(1.0).when(rectangle2D0).getWidth();
      doReturn((-1.0)).when(rectangle2D0).getX();
      doReturn(442.26).when(rectangle2D0).getY();
      lineBorder0.draw(graphics2D0, rectangle2D0);
      Stroke stroke1 = lineBorder0.getStroke();
      assertSame(stroke1, stroke0);
      assertNotNull(stroke1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      assertNotNull(lineBorder0);
      
      boolean boolean0 = lineBorder0.equals("org.jfree.chart.ui.RectangleInsets");
      assertFalse(boolean0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-2018.989)).when(rectangle2D0).getHeight();
      doReturn(2.0).when(rectangle2D0).getWidth();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-2018.989)).when(rectangle2D1).getHeight();
      doReturn((-2018.989)).when(rectangle2D1).getWidth();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn("org.jfree.chart.ui.RectangleInsets").when(graphics2D2).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(756.9256169869329).when(rectangle2D2).getHeight();
      doReturn(2.0).when(rectangle2D2).getWidth();
      doReturn(184.27).when(rectangle2D2).getX();
      doReturn((-761.667)).when(rectangle2D2).getY();
      lineBorder0.draw(graphics2D2, rectangle2D2);
      lineBorder0.draw(graphics2D1, rectangle2D1);
      lineBorder0.draw(graphics2D0, rectangle2D0);
      Rectangle2D rectangle2D3 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = lineBorder0.equals("org.jfree.chart.ui.RectangleInsets");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Color color0 = (Color)lineBorder0.getPaint();
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertNotNull(color0);
      
      RectangleInsets rectangleInsets0 = lineBorder0.getInsets();
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertNotNull(rectangleInsets0);
      
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D4 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      BasicStroke basicStroke0 = (BasicStroke)lineBorder0.getStroke();
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      assertNotNull(lineBorder0);
      
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("").when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder1 = new LineBorder(paint0, stroke0, rectangleInsets0);
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotNull(lineBorder1);
      
      boolean boolean0 = lineBorder0.equals(lineBorder1);
      assertFalse(boolean0);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder1, lineBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(3350.91227768434).when(rectangle2D0).getHeight();
      doReturn(1687.0256016).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      lineBorder0.draw(graphics2D0, rectangle2D0);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertNotSame(lineBorder0, lineBorder1);
      
      BasicStroke basicStroke0 = (BasicStroke)lineBorder0.getStroke();
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertNotSame(lineBorder0, lineBorder1);
      assertNotNull(basicStroke0);
      
      LineBorder lineBorder2 = new LineBorder();
      assertFalse(lineBorder2.equals((Object)lineBorder1));
      assertTrue(lineBorder2.equals((Object)lineBorder0));
      assertNotNull(lineBorder2);
      
      boolean boolean1 = lineBorder0.equals(lineBorder2);
      assertTrue(boolean1);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertTrue(lineBorder0.equals((Object)lineBorder2));
      assertFalse(lineBorder2.equals((Object)lineBorder1));
      assertTrue(lineBorder2.equals((Object)lineBorder0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder0, lineBorder2);
      assertNotSame(lineBorder2, lineBorder1);
      assertNotSame(lineBorder2, lineBorder0);
      
      RectangleInsets rectangleInsets1 = lineBorder0.getInsets();
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets1.getLeft(), 0.01);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertTrue(lineBorder0.equals((Object)lineBorder2));
      assertFalse(rectangleInsets1.equals((Object)rectangleInsets0));
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder0, lineBorder2);
      assertNotNull(rectangleInsets1);
      
      BasicStroke basicStroke1 = (BasicStroke)lineBorder0.getStroke();
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertTrue(lineBorder0.equals((Object)lineBorder2));
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder0, lineBorder2);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      LineBorder lineBorder3 = new LineBorder();
      assertFalse(lineBorder3.equals((Object)lineBorder1));
      assertTrue(lineBorder3.equals((Object)lineBorder2));
      assertTrue(lineBorder3.equals((Object)lineBorder0));
      assertNotNull(lineBorder3);
      
      LineBorder lineBorder4 = new LineBorder();
      assertTrue(lineBorder4.equals((Object)lineBorder3));
      assertTrue(lineBorder4.equals((Object)lineBorder0));
      assertFalse(lineBorder4.equals((Object)lineBorder1));
      assertTrue(lineBorder4.equals((Object)lineBorder2));
      assertNotNull(lineBorder4);
      
      boolean boolean2 = lineBorder3.equals(lineBorder4);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(lineBorder3.equals((Object)lineBorder1));
      assertTrue(lineBorder3.equals((Object)lineBorder4));
      assertTrue(lineBorder3.equals((Object)lineBorder2));
      assertTrue(lineBorder3.equals((Object)lineBorder0));
      assertTrue(lineBorder4.equals((Object)lineBorder3));
      assertTrue(lineBorder4.equals((Object)lineBorder0));
      assertFalse(lineBorder4.equals((Object)lineBorder1));
      assertTrue(lineBorder4.equals((Object)lineBorder2));
      assertNotSame(lineBorder3, lineBorder1);
      assertNotSame(lineBorder3, lineBorder4);
      assertNotSame(lineBorder3, lineBorder2);
      assertNotSame(lineBorder3, lineBorder0);
      assertNotSame(lineBorder4, lineBorder2);
      assertNotSame(lineBorder4, lineBorder1);
      assertNotSame(lineBorder4, lineBorder0);
      assertNotSame(lineBorder4, lineBorder3);
      
      boolean boolean3 = lineBorder0.equals(lineBorder3);
      assertTrue(boolean3);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertTrue(lineBorder0.equals((Object)lineBorder3));
      assertTrue(lineBorder0.equals((Object)lineBorder2));
      assertTrue(lineBorder0.equals((Object)lineBorder4));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(lineBorder3.equals((Object)lineBorder1));
      assertTrue(lineBorder3.equals((Object)lineBorder4));
      assertTrue(lineBorder3.equals((Object)lineBorder2));
      assertTrue(lineBorder3.equals((Object)lineBorder0));
      assertNotSame(lineBorder0, lineBorder4);
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder0, lineBorder2);
      assertNotSame(lineBorder0, lineBorder3);
      assertNotSame(lineBorder3, lineBorder1);
      assertNotSame(lineBorder3, lineBorder4);
      assertNotSame(lineBorder3, lineBorder2);
      assertNotSame(lineBorder3, lineBorder0);
      
      Paint paint1 = lineBorder1.getPaint();
      assertEquals(0, paint1.getTransparency());
      assertFalse(lineBorder1.equals((Object)lineBorder2));
      assertFalse(lineBorder1.equals((Object)lineBorder4));
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertFalse(lineBorder1.equals((Object)lineBorder3));
      assertSame(paint1, paint0);
      assertNotSame(lineBorder1, lineBorder2);
      assertNotSame(lineBorder1, lineBorder4);
      assertNotSame(lineBorder1, lineBorder0);
      assertNotSame(lineBorder1, lineBorder3);
      assertNotNull(paint1);
      
      boolean boolean4 = lineBorder4.equals(lineBorder0);
      assertTrue(boolean4);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertTrue(lineBorder0.equals((Object)lineBorder3));
      assertTrue(lineBorder0.equals((Object)lineBorder2));
      assertTrue(lineBorder0.equals((Object)lineBorder4));
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(lineBorder4.equals((Object)lineBorder3));
      assertTrue(lineBorder4.equals((Object)lineBorder0));
      assertFalse(lineBorder4.equals((Object)lineBorder1));
      assertTrue(lineBorder4.equals((Object)lineBorder2));
      assertNotSame(lineBorder0, lineBorder4);
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder0, lineBorder2);
      assertNotSame(lineBorder0, lineBorder3);
      assertNotSame(lineBorder4, lineBorder2);
      assertNotSame(lineBorder4, lineBorder1);
      assertNotSame(lineBorder4, lineBorder0);
      assertNotSame(lineBorder4, lineBorder3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn("paint", (String) null).when(stroke0).toString();
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleInsets0).calculateBottomInset(anyDouble());
      doReturn(0.0).when(rectangleInsets0).calculateLeftInset(anyDouble());
      doReturn(0.0).when(rectangleInsets0).calculateRightInset(anyDouble());
      doReturn(0.0).when(rectangleInsets0).calculateTopInset(anyDouble());
      LineBorder lineBorder0 = new LineBorder(paint0, stroke0, rectangleInsets0);
      assertNotNull(lineBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(rectangle2D0).getHeight();
      doReturn(1.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      lineBorder0.draw(graphics2D0, rectangle2D0);
      Stroke stroke1 = lineBorder0.getStroke();
      assertSame(stroke1, stroke0);
      assertNotNull(stroke1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      assertNotNull(lineBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(838.899904).when(rectangle2D0).getHeight();
      doReturn(838.899904).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      lineBorder0.draw(graphics2D1, rectangle2D0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(838.899904).when(rectangle2D1).getHeight();
      doReturn(838.899904).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      lineBorder0.draw(graphics2D0, rectangle2D1);
      boolean boolean0 = lineBorder0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      assertNotNull(lineBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(3541.094979056247).when(rectangle2D0).getWidth();
      lineBorder0.draw(graphics2D0, rectangle2D0);
      BasicStroke basicStroke0 = (BasicStroke)lineBorder0.getStroke();
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(rectangle2D1).getHeight();
      doReturn(3541.094979056247).when(rectangle2D1).getWidth();
      lineBorder0.draw(graphics2D1, rectangle2D1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-35.7229114606)).when(rectangle2D2).getHeight();
      doReturn(0.0).when(rectangle2D2).getWidth();
      lineBorder0.draw(graphics2D2, rectangle2D2);
      Color color0 = (Color)lineBorder0.getPaint();
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      BasicStroke basicStroke1 = (BasicStroke)lineBorder0.getStroke();
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke0).toString();
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder0 = new LineBorder(paint0, stroke0, rectangleInsets0);
      assertNotNull(lineBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-4395.081619903917)).when(rectangle2D0).getHeight();
      doReturn((-4395.081619903917)).when(rectangle2D0).getWidth();
      lineBorder0.draw(graphics2D1, rectangle2D0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-4395.081619903917)).when(rectangle2D1).getHeight();
      doReturn(2.0).when(rectangle2D1).getWidth();
      lineBorder0.draw(graphics2D0, rectangle2D1);
      Stroke stroke1 = lineBorder0.getStroke();
      assertSame(stroke1, stroke0);
      assertNotNull(stroke1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      assertNotNull(lineBorder0);
      
      BasicStroke basicStroke0 = (BasicStroke)lineBorder0.getStroke();
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      boolean boolean0 = lineBorder0.equals(basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertFalse(boolean0);
      
      BasicStroke basicStroke1 = (BasicStroke)lineBorder0.getStroke();
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      Color color0 = (Color)lineBorder0.getPaint();
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertNotNull(color0);
      
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder1 = new LineBorder(color0, basicStroke1, rectangleInsets0);
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotNull(lineBorder1);
      
      boolean boolean1 = lineBorder0.equals(lineBorder1);
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertFalse(boolean1);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(lineBorder0, lineBorder1);
      assertSame(basicStroke1, basicStroke0);
      assertNotSame(lineBorder1, lineBorder0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder0 = new LineBorder(paint0, stroke0, rectangleInsets0);
      assertNotNull(lineBorder0);
      
      Paint paint1 = lineBorder0.getPaint();
      assertEquals(0, paint1.getTransparency());
      assertSame(paint1, paint0);
      assertNotNull(paint1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      boolean boolean0 = lineBorder0.equals(paint1);
      assertEquals(0, paint1.getTransparency());
      assertFalse(boolean0);
      assertSame(paint1, paint0);
      
      lineBorder0.draw(graphics2D0, rectangle2D0);
      boolean boolean1 = lineBorder0.equals((Object) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Paint paint2 = lineBorder0.getPaint();
      assertEquals(0, paint2.getTransparency());
      assertSame(paint2, paint0);
      assertSame(paint2, paint1);
      assertNotNull(paint2);
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets1 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder1 = new LineBorder(paint2, stroke1, rectangleInsets1);
      assertEquals(0, paint2.getTransparency());
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotNull(lineBorder1);
      
      boolean boolean2 = lineBorder0.equals(lineBorder1);
      assertEquals(0, paint2.getTransparency());
      assertFalse(boolean2);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(lineBorder0, lineBorder1);
      assertSame(paint2, paint0);
      assertSame(paint2, paint1);
      assertNotSame(lineBorder1, lineBorder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      assertNotNull(lineBorder0);
      
      LineBorder lineBorder1 = new LineBorder();
      assertTrue(lineBorder1.equals((Object)lineBorder0));
      assertNotNull(lineBorder1);
      
      boolean boolean0 = lineBorder0.equals(lineBorder1);
      assertTrue(boolean0);
      assertTrue(lineBorder0.equals((Object)lineBorder1));
      assertTrue(lineBorder1.equals((Object)lineBorder0));
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder1, lineBorder0);
      
      RectangleInsets rectangleInsets0 = lineBorder0.getInsets();
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertTrue(lineBorder0.equals((Object)lineBorder1));
      assertNotSame(lineBorder0, lineBorder1);
      assertNotNull(rectangleInsets0);
      
      RectangleInsets rectangleInsets1 = lineBorder0.getInsets();
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets1.getLeft(), 0.01);
      assertTrue(lineBorder0.equals((Object)lineBorder1));
      assertNotSame(lineBorder0, lineBorder1);
      assertSame(rectangleInsets1, rectangleInsets0);
      assertNotNull(rectangleInsets1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder0 = new LineBorder(paint0, stroke0, rectangleInsets0);
      assertNotNull(lineBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = null;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      lineBorder0.draw((Graphics2D) null, rectangle2D0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D1).getHeight();
      doReturn(0.0).when(rectangle2D1).getWidth();
      lineBorder0.draw(graphics2D0, rectangle2D1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = null;
      // Undeclared exception!
      try { 
        lineBorder0.draw(graphics2D2, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.LineBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder0 = new LineBorder(paint0, stroke0, rectangleInsets0);
      assertNotNull(lineBorder0);
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets1 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder1 = null;
      try {
        lineBorder1 = new LineBorder(paint1, (Stroke) null, rectangleInsets1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder0 = new LineBorder(paint0, stroke0, rectangleInsets0);
      assertNotNull(lineBorder0);
      
      boolean boolean0 = lineBorder0.equals("Null 'base' argument.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      assertNotNull(lineBorder0);
      
      Color color0 = (Color)lineBorder0.getPaint();
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      BasicStroke basicStroke0 = (BasicStroke)lineBorder0.getStroke();
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      assertNotNull(lineBorder0);
      
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder1 = new LineBorder(paint0, stroke0, rectangleInsets0);
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotNull(lineBorder1);
      
      boolean boolean0 = lineBorder0.equals(lineBorder1);
      assertFalse(boolean0);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder1, lineBorder0);
      
      RectangleInsets rectangleInsets1 = lineBorder0.getInsets();
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertFalse(rectangleInsets1.equals((Object)rectangleInsets0));
      assertNotSame(lineBorder0, lineBorder1);
      assertNotNull(rectangleInsets1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      assertNotNull(lineBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangle2D0).getHeight();
      doReturn(0.0).when(rectangle2D0).getWidth();
      lineBorder0.draw(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      assertNotNull(lineBorder0);
      
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = null;
      boolean boolean0 = lineBorder0.equals((Object) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        lineBorder0.draw((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.LineBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      assertNotNull(lineBorder0);
      
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder1 = new LineBorder(paint0, stroke0, rectangleInsets0);
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotNull(lineBorder1);
      
      boolean boolean0 = lineBorder1.equals("paint");
      assertFalse(boolean0);
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotSame(lineBorder1, lineBorder0);
      
      boolean boolean1 = lineBorder0.equals(lineBorder1);
      assertFalse(boolean1);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder1, lineBorder0);
      
      RectangleInsets rectangleInsets1 = lineBorder0.getInsets();
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertFalse(rectangleInsets1.equals((Object)rectangleInsets0));
      assertNotSame(lineBorder0, lineBorder1);
      assertNotNull(rectangleInsets1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("org.jfree.chart.block.LineBorder").when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn("0<").when(stroke0).toString();
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      doReturn((-2104.0)).when(rectangleInsets0).calculateBottomInset(anyDouble());
      doReturn((-2104.0)).when(rectangleInsets0).calculateLeftInset(anyDouble());
      doReturn((-2104.0)).when(rectangleInsets0).calculateRightInset(anyDouble());
      doReturn((-2104.0)).when(rectangleInsets0).calculateTopInset(anyDouble());
      LineBorder lineBorder0 = new LineBorder(paint0, stroke0, rectangleInsets0);
      assertNotNull(lineBorder0);
      
      LineBorder lineBorder1 = new LineBorder();
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotNull(lineBorder1);
      
      boolean boolean0 = lineBorder0.equals(lineBorder1);
      assertFalse(boolean0);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder1, lineBorder0);
      
      boolean boolean1 = lineBorder1.equals(lineBorder0);
      assertFalse(boolean1);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(lineBorder0, lineBorder1);
      assertNotSame(lineBorder1, lineBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn("").when(graphics2D0).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(1163.40342256).when(rectangle2D0).getHeight();
      doReturn(1163.40342256).when(rectangle2D0).getWidth();
      doReturn((-1463.82266267786)).when(rectangle2D0).getX();
      doReturn((-2104.0)).when(rectangle2D0).getY();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(lineBorder1).when(graphics2D1).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(lineBorder0).when(graphics2D2).getRenderingHint(any(java.awt.RenderingHints.Key.class));
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(184.27).when(rectangle2D1).getHeight();
      doReturn(184.27).when(rectangle2D1).getWidth();
      doReturn((-5840.037683408545)).when(rectangle2D1).getX();
      doReturn(758.054722918681).when(rectangle2D1).getY();
      lineBorder0.draw(graphics2D2, rectangle2D1);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertNotSame(lineBorder0, lineBorder1);
      
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(184.27).when(rectangle2D2).getHeight();
      doReturn(184.27).when(rectangle2D2).getWidth();
      doReturn(0.0).when(rectangle2D2).getX();
      doReturn((-1.0)).when(rectangle2D2).getY();
      lineBorder1.draw(graphics2D1, rectangle2D2);
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotSame(lineBorder1, lineBorder0);
      
      lineBorder1.draw(graphics2D0, rectangle2D0);
      assertFalse(lineBorder1.equals((Object)lineBorder0));
      assertNotSame(lineBorder1, lineBorder0);
      
      boolean boolean2 = lineBorder0.equals("S!S06@t|OKWy{");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(lineBorder0.equals((Object)lineBorder1));
      assertNotSame(lineBorder0, lineBorder1);
      
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D3 = null;
      // Undeclared exception!
      try { 
        lineBorder1.draw(graphics2D3, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.LineBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-72.454638692)).when(rectangle2D0).getHeight();
      doReturn(278.10327).when(rectangle2D0).getWidth();
      lineBorder0.draw(graphics2D0, rectangle2D0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = lineBorder0.equals((Object) null);
      lineBorder0.equals((Object) null);
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(1810.483).when(rectangle2D2).getHeight();
      doReturn((-352.68544)).when(rectangle2D2).getWidth();
      lineBorder0.draw((Graphics2D) null, rectangle2D2);
      LineBorder lineBorder1 = new LineBorder();
      lineBorder1.equals((Object) null);
      lineBorder0.equals(lineBorder1);
      Rectangle2D rectangle2D3 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = lineBorder0.equals(lineBorder1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      LineBorder lineBorder1 = new LineBorder();
      boolean boolean0 = lineBorder0.equals(lineBorder1);
      assertTrue(boolean0);
      
      lineBorder0.getPaint();
      assertTrue(lineBorder0.equals((Object)lineBorder1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1793.477686799522)).when(rectangle2D0).getHeight();
      doReturn((-1793.477686799522)).when(rectangle2D0).getWidth();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1793.477686799522)).when(rectangle2D1).getHeight();
      doReturn(1141.5942397).when(rectangle2D1).getWidth();
      lineBorder0.draw(graphics2D1, rectangle2D1);
      lineBorder0.draw(graphics2D0, rectangle2D0);
      lineBorder0.equals(lineBorder0);
      lineBorder0.equals(lineBorder0);
      lineBorder0.equals(lineBorder0);
      RectangleInsets rectangleInsets1 = lineBorder0.getInsets();
      Stroke stroke1 = lineBorder0.getStroke();
      lineBorder0.getInsets();
      lineBorder0.equals(stroke1);
      lineBorder0.getPaint();
      lineBorder0.equals(rectangleInsets1);
      RectangleInsets rectangleInsets2 = lineBorder0.getInsets();
      assertEquals(1.0, rectangleInsets2.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder0 = new LineBorder(paint0, stroke0, rectangleInsets0);
      Paint paint1 = lineBorder0.getPaint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(rectangle2D0).getHeight();
      doReturn((-1.0)).when(rectangle2D0).getWidth();
      lineBorder0.equals(paint1);
      lineBorder0.draw(graphics2D0, rectangle2D0);
      boolean boolean0 = lineBorder0.equals((Object) null);
      assertFalse(boolean0);
      
      Paint paint2 = lineBorder0.getPaint();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      RectangleInsets rectangleInsets1 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      LineBorder lineBorder1 = new LineBorder(paint2, stroke1, rectangleInsets1);
      boolean boolean1 = lineBorder0.equals(lineBorder1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
  }
}
