/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:12:06 GMT 2023
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.util.UnitType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BlockBorder_ESTest extends BlockBorder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      doReturn(745.20382531).when(rectangleInsets0).calculateBottomInset(anyDouble());
      doReturn(745.20382531).when(rectangleInsets0).calculateLeftInset(anyDouble());
      doReturn(937.23192).when(rectangleInsets0).calculateRightInset(anyDouble());
      doReturn(745.20382531).when(rectangleInsets0).calculateTopInset(anyDouble());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      BlockBorder blockBorder0 = new BlockBorder(rectangleInsets0, paint0);
      assertNotNull(blockBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-2541.469926384), (-2541.469926384), 937.23192).when(rectangle2D0).getHeight();
      doReturn((-2541.469926384), 465.75369408, 937.23192).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(1.0).when(rectangle2D0).getY();
      blockBorder0.NONE.draw(graphics2D0, rectangle2D0);
      BlockBorder blockBorder1 = new BlockBorder(1.0, (-1.0), (-2927.7851), (-1.0));
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertNotNull(blockBorder1);
      
      boolean boolean0 = blockBorder0.equals(blockBorder1);
      assertFalse(blockBorder0.equals((Object)blockBorder1));
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertNotSame(blockBorder0, blockBorder1);
      assertNotSame(blockBorder1, blockBorder0);
      assertFalse(boolean0);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, (-48.6818), (-2541.469926384)).when(rectangle2D1).getHeight();
      doReturn(8.95813421381, 876.0, 465.75369408).when(rectangle2D1).getWidth();
      doReturn((-2541.469926384)).when(rectangle2D1).getX();
      doReturn((-1999.8703695558863)).when(rectangle2D1).getY();
      blockBorder0.draw(graphics2D1, rectangle2D1);
      assertFalse(blockBorder0.equals((Object)blockBorder1));
      assertNotSame(blockBorder0, blockBorder1);
      
      Color color0 = (Color)blockBorder1.getPaint();
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotSame(blockBorder1, blockBorder0);
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockBorder blockBorder0 = new BlockBorder((-2934.085492), 1.0, 650.103, 603.9578496164801);
      assertNotNull(blockBorder0);
      
      Color color0 = (Color)blockBorder0.getPaint();
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(603.9578496164801, (-904.4873645717), 1529.16479773).when(rectangle2D0).getHeight();
      doReturn(1.0, 3299.8526750368624, 650.103).when(rectangle2D0).getWidth();
      doReturn(650.103).when(rectangle2D0).getX();
      doReturn((-788.6592726422582)).when(rectangle2D0).getY();
      blockBorder0.draw(graphics2D0, rectangle2D0);
      Color color1 = (Color)blockBorder0.getPaint();
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getGreen());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertSame(color1, color0);
      assertNotNull(color1);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-805.15098), 3299.8526750368624, 650.103).when(rectangle2D1).getHeight();
      doReturn(3176.0, (-96.45), 3251.98584444681).when(rectangle2D1).getWidth();
      doReturn((-52.58958224549)).when(rectangle2D1).getX();
      doReturn((-96.45)).when(rectangle2D1).getY();
      blockBorder0.draw(graphics2D1, rectangle2D1);
      Color color2 = (Color)blockBorder0.getPaint();
      assertEquals(0, color2.getGreen());
      assertEquals((-16777216), color2.getRGB());
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
      assertEquals(0, color2.getBlue());
      assertEquals(0, color2.getRed());
      assertSame(color2, color1);
      assertSame(color2, color0);
      assertNotNull(color2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockBorder blockBorder0 = new BlockBorder();
      assertNotNull(blockBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1665.981974), (-1665.981974), 5637.1).when(rectangle2D0).getHeight();
      doReturn((-1665.981974), 5637.1, 5637.1).when(rectangle2D0).getWidth();
      doReturn((-3024.89620621)).when(rectangle2D0).getX();
      doReturn(1.0).when(rectangle2D0).getY();
      blockBorder0.draw(graphics2D0, rectangle2D0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Paint paint0 = null;
      BlockBorder blockBorder0 = null;
      try {
        blockBorder0 = new BlockBorder((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockBorder blockBorder0 = new BlockBorder((-831.988771), (-831.988771), (-831.988771), (-831.988771));
      assertNotNull(blockBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      blockBorder0.draw(graphics2D0, rectangle2D0);
      RectangleInsets rectangleInsets0 = blockBorder0.getInsets();
      assertEquals((-831.988771), rectangleInsets0.getTop(), 0.01);
      assertEquals((-831.988771), rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals((-831.988771), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-831.988771), rectangleInsets0.getRight(), 0.01);
      assertNotNull(rectangleInsets0);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      blockBorder0.draw(graphics2D1, rectangle2D1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockBorder blockBorder0 = new BlockBorder(0.0, 0.0, 3265.242576634, 3265.242576634);
      assertNotNull(blockBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      blockBorder0.draw(graphics2D1, rectangle2D0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      blockBorder0.draw(graphics2D0, rectangle2D1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D2).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D2).getWidth();
      doReturn(0.0).when(rectangle2D2).getX();
      doReturn(0.0).when(rectangle2D2).getY();
      blockBorder0.draw(graphics2D2, rectangle2D2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockBorder blockBorder0 = new BlockBorder(2496.22113914104, 0.0, 2496.22113914104, 0.0);
      assertNotNull(blockBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      blockBorder0.NONE.draw(graphics2D0, rectangle2D0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      blockBorder0.draw(graphics2D1, rectangle2D1);
      Color color0 = (Color)blockBorder0.getPaint();
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint0).toString();
      BlockBorder blockBorder0 = new BlockBorder((-1289.5655), (-1289.5655), (-1289.5655), 0.0, paint0);
      assertNotNull(blockBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      blockBorder0.draw(graphics2D0, rectangle2D0);
      Paint paint1 = blockBorder0.getPaint();
      assertEquals(0, paint1.getTransparency());
      assertSame(paint1, paint0);
      assertNotNull(paint1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockBorder blockBorder0 = new BlockBorder(0.0, 232.43, 0.0, 232.43);
      assertNotNull(blockBorder0);
      
      Color color0 = (Color)blockBorder0.getPaint();
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      blockBorder0.draw(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockBorder blockBorder0 = new BlockBorder();
      assertNotNull(blockBorder0);
      
      String string0 = "org.jfree.chart.block.BlockBorder";
      boolean boolean0 = blockBorder0.equals("org.jfree.chart.block.BlockBorder");
      assertFalse(boolean0);
      
      boolean boolean1 = blockBorder0.equals(")2cQU+12W!3J?Q$S!u");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      RectangleInsets rectangleInsets0 = blockBorder0.getInsets();
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertNotNull(rectangleInsets0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BlockBorder blockBorder1 = BlockBorder.NONE;
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertNotSame(blockBorder1, blockBorder0);
      assertNotNull(blockBorder1);
      
      Graphics2D graphics2D1 = null;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      // Undeclared exception!
      try { 
        blockBorder1.NONE.draw((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Paint paint0 = null;
      BlockBorder blockBorder0 = null;
      try {
        blockBorder0 = new BlockBorder(0.0, 0.0, 0.0, 0.0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RectangleInsets rectangleInsets0 = mock(RectangleInsets.class, new ViolatedAssumptionAnswer());
      Paint paint0 = null;
      BlockBorder blockBorder0 = null;
      try {
        blockBorder0 = new BlockBorder(rectangleInsets0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockBorder blockBorder0 = new BlockBorder();
      assertNotNull(blockBorder0);
      
      BlockBorder blockBorder1 = BlockBorder.NONE;
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertNotSame(blockBorder1, blockBorder0);
      assertNotNull(blockBorder1);
      
      boolean boolean0 = blockBorder0.NONE.equals(blockBorder1);
      assertFalse(blockBorder0.equals((Object)blockBorder1));
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertNotSame(blockBorder0, blockBorder1);
      assertNotSame(blockBorder1, blockBorder0);
      assertTrue(boolean0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      blockBorder0.NONE.draw(graphics2D1, rectangle2D0);
      assertFalse(blockBorder0.equals((Object)blockBorder1));
      assertNotSame(blockBorder0, blockBorder1);
      
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      boolean boolean1 = blockBorder0.NONE.equals("wl#6NlC8JMh$/");
      assertFalse(blockBorder0.equals((Object)blockBorder1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(blockBorder0, blockBorder1);
      assertFalse(boolean1);
      
      blockBorder0.draw(graphics2D0, rectangle2D1);
      assertFalse(blockBorder0.equals((Object)blockBorder1));
      assertNotSame(blockBorder0, blockBorder1);
      
      Color color0 = (Color)blockBorder0.getPaint();
      assertFalse(blockBorder0.equals((Object)blockBorder1));
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertNotSame(blockBorder0, blockBorder1);
      assertNotNull(color0);
      
      Color color1 = (Color)blockBorder1.getPaint();
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertFalse(color1.equals((Object)color0));
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getGreen());
      assertEquals((-1), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertNotSame(blockBorder1, blockBorder0);
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      Color color2 = (Color)blockBorder1.getPaint();
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertFalse(color2.equals((Object)color0));
      assertEquals(255, color2.getGreen());
      assertEquals(255, color2.getBlue());
      assertEquals(1, color2.getTransparency());
      assertEquals((-1), color2.getRGB());
      assertEquals(255, color2.getAlpha());
      assertEquals(255, color2.getRed());
      assertNotSame(blockBorder1, blockBorder0);
      assertNotSame(color2, color0);
      assertSame(color2, color1);
      assertNotNull(color2);
      
      RectangleInsets rectangleInsets0 = blockBorder1.getInsets();
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertNotSame(blockBorder1, blockBorder0);
      assertNotNull(rectangleInsets0);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D2).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D2).getWidth();
      doReturn(0.0).when(rectangle2D2).getX();
      doReturn(0.0).when(rectangle2D2).getY();
      blockBorder1.draw(graphics2D2, rectangle2D2);
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertNotSame(blockBorder1, blockBorder0);
      
      boolean boolean2 = blockBorder1.equals(rectangleInsets0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertNotSame(blockBorder1, blockBorder0);
      assertFalse(boolean2);
      
      Color color3 = (Color)blockBorder0.getPaint();
      assertFalse(blockBorder0.equals((Object)blockBorder1));
      assertFalse(color3.equals((Object)color1));
      assertFalse(color3.equals((Object)color2));
      assertEquals(0, color3.getGreen());
      assertEquals(255, color3.getAlpha());
      assertEquals((-16777216), color3.getRGB());
      assertEquals(1, color3.getTransparency());
      assertEquals(0, color3.getBlue());
      assertEquals(0, color3.getRed());
      assertNotSame(blockBorder0, blockBorder1);
      assertNotSame(color3, color1);
      assertNotSame(color3, color2);
      assertSame(color3, color0);
      assertNotNull(color3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      BlockBorder blockBorder0 = new BlockBorder(1.0, 1.0, 1.0, (-634.38727), paint0);
      assertNotNull(blockBorder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockBorder blockBorder0 = null;
      try {
        blockBorder0 = new BlockBorder(0.0, (-2211.8528757), (-2211.8528757), (-2211.8528757), (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlockBorder blockBorder0 = new BlockBorder();
      assertNotNull(blockBorder0);
      
      boolean boolean0 = blockBorder0.NONE.equals("ABSOLUTE");
      assertFalse(boolean0);
      
      boolean boolean1 = blockBorder0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      blockBorder0.draw(graphics2D0, rectangle2D0);
      RectangleInsets rectangleInsets0 = blockBorder0.getInsets();
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotNull(rectangleInsets0);
      
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D2).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D2).getWidth();
      doReturn(0.0).when(rectangle2D2).getX();
      doReturn(0.0).when(rectangle2D2).getY();
      blockBorder0.draw(graphics2D2, rectangle2D2);
      blockBorder0.draw(graphics2D1, rectangle2D1);
      BlockBorder blockBorder1 = new BlockBorder(rectangleInsets0, paint0);
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotNull(blockBorder1);
      
      boolean boolean2 = blockBorder1.NONE.equals(blockBorder0);
      assertFalse(blockBorder0.equals((Object)blockBorder1));
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotSame(blockBorder0, blockBorder1);
      assertNotSame(blockBorder1, blockBorder0);
      assertFalse(boolean2);
      
      boolean boolean3 = blockBorder1.equals(blockBorder0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(blockBorder0.equals((Object)blockBorder1));
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotSame(blockBorder0, blockBorder1);
      assertNotSame(blockBorder1, blockBorder0);
      assertFalse(boolean3);
      
      BlockBorder blockBorder2 = new BlockBorder(187.66, 187.66, (-1.0), (-1.0));
      assertFalse(blockBorder2.equals((Object)blockBorder0));
      assertFalse(blockBorder2.equals((Object)blockBorder1));
      assertNotNull(blockBorder2);
      
      boolean boolean4 = blockBorder2.NONE.equals("ABSOLUTE");
      assertFalse(blockBorder2.equals((Object)blockBorder0));
      assertFalse(blockBorder2.equals((Object)blockBorder1));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertNotSame(blockBorder2, blockBorder0);
      assertNotSame(blockBorder2, blockBorder1);
      assertFalse(boolean4);
      
      boolean boolean5 = blockBorder1.equals(blockBorder2);
      assertFalse(blockBorder0.equals((Object)blockBorder1));
      assertFalse(blockBorder0.equals((Object)blockBorder2));
      assertFalse(blockBorder2.equals((Object)blockBorder0));
      assertFalse(blockBorder2.equals((Object)blockBorder1));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertFalse(blockBorder1.equals((Object)blockBorder2));
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotSame(blockBorder0, blockBorder1);
      assertNotSame(blockBorder0, blockBorder2);
      assertNotSame(blockBorder2, blockBorder0);
      assertNotSame(blockBorder2, blockBorder1);
      assertNotSame(blockBorder1, blockBorder0);
      assertNotSame(blockBorder1, blockBorder2);
      assertFalse(boolean5);
      
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D3 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D3).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D3).getWidth();
      doReturn(0.0).when(rectangle2D3).getX();
      doReturn(0.0).when(rectangle2D3).getY();
      blockBorder2.draw(graphics2D3, rectangle2D3);
      assertFalse(blockBorder2.equals((Object)blockBorder0));
      assertFalse(blockBorder2.equals((Object)blockBorder1));
      assertNotSame(blockBorder2, blockBorder0);
      assertNotSame(blockBorder2, blockBorder1);
      
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D4 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D4).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D4).getWidth();
      doReturn(0.0).when(rectangle2D4).getX();
      doReturn(0.0).when(rectangle2D4).getY();
      blockBorder2.NONE.draw(graphics2D4, rectangle2D4);
      assertFalse(blockBorder2.equals((Object)blockBorder0));
      assertFalse(blockBorder2.equals((Object)blockBorder1));
      assertNotSame(blockBorder2, blockBorder0);
      assertNotSame(blockBorder2, blockBorder1);
      
      boolean boolean6 = blockBorder0.equals(blockBorder1);
      assertFalse(blockBorder0.equals((Object)blockBorder1));
      assertFalse(blockBorder0.equals((Object)blockBorder2));
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertFalse(blockBorder1.equals((Object)blockBorder2));
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotSame(blockBorder0, blockBorder1);
      assertNotSame(blockBorder0, blockBorder2);
      assertNotSame(blockBorder1, blockBorder0);
      assertNotSame(blockBorder1, blockBorder2);
      assertFalse(boolean6);
      
      boolean boolean7 = blockBorder0.equals(blockBorder1);
      assertFalse(blockBorder0.equals((Object)blockBorder1));
      assertFalse(blockBorder0.equals((Object)blockBorder2));
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertFalse(blockBorder1.equals((Object)blockBorder2));
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotSame(blockBorder0, blockBorder1);
      assertNotSame(blockBorder0, blockBorder2);
      assertNotSame(blockBorder1, blockBorder0);
      assertNotSame(blockBorder1, blockBorder2);
      assertFalse(boolean7);
      
      boolean boolean8 = blockBorder2.equals("ABSOLUTE");
      assertFalse(blockBorder2.equals((Object)blockBorder0));
      assertFalse(blockBorder2.equals((Object)blockBorder1));
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean2);
      assertNotSame(blockBorder2, blockBorder0);
      assertNotSame(blockBorder2, blockBorder1);
      assertFalse(boolean8);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RectangleInsets rectangleInsets0 = null;
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      BlockBorder blockBorder0 = null;
      try {
        blockBorder0 = new BlockBorder((RectangleInsets) null, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlockBorder blockBorder0 = new BlockBorder();
      assertNotNull(blockBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      blockBorder0.NONE.draw(graphics2D0, rectangle2D0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      blockBorder0.NONE.draw(graphics2D1, rectangle2D1);
      RectangleInsets rectangleInsets0 = blockBorder0.getInsets();
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotNull(rectangleInsets0);
      
      Color color0 = (Color)blockBorder0.getPaint();
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      Color color1 = (Color)blockBorder0.getPaint();
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertSame(color1, color0);
      assertNotNull(color1);
      
      BlockBorder blockBorder1 = new BlockBorder(color0);
      assertTrue(blockBorder1.equals((Object)blockBorder0));
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertNotNull(blockBorder1);
      
      boolean boolean0 = blockBorder0.equals(blockBorder1);
      assertTrue(blockBorder0.equals((Object)blockBorder1));
      assertTrue(blockBorder1.equals((Object)blockBorder0));
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertNotSame(blockBorder0, blockBorder1);
      assertSame(color0, color1);
      assertNotSame(blockBorder1, blockBorder0);
      assertTrue(boolean0);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D2).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D2).getWidth();
      doReturn(0.0).when(rectangle2D2).getX();
      doReturn(0.0).when(rectangle2D2).getY();
      blockBorder1.NONE.draw(graphics2D2, rectangle2D2);
      assertTrue(blockBorder0.equals((Object)blockBorder1));
      assertTrue(blockBorder1.equals((Object)blockBorder0));
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertNotSame(blockBorder0, blockBorder1);
      assertSame(color0, color1);
      assertNotSame(blockBorder1, blockBorder0);
      
      Color color2 = (Color)blockBorder0.getPaint();
      assertTrue(blockBorder0.equals((Object)blockBorder1));
      assertEquals(0, color2.getRed());
      assertEquals(255, color2.getAlpha());
      assertEquals(0, color2.getGreen());
      assertEquals((-16777216), color2.getRGB());
      assertEquals(1, color2.getTransparency());
      assertEquals(0, color2.getBlue());
      assertNotSame(blockBorder0, blockBorder1);
      assertSame(color2, color0);
      assertSame(color2, color1);
      assertNotNull(color2);
      
      Color color3 = (Color)blockBorder0.getPaint();
      assertTrue(blockBorder0.equals((Object)blockBorder1));
      assertEquals((-16777216), color3.getRGB());
      assertEquals(1, color3.getTransparency());
      assertEquals(0, color3.getBlue());
      assertEquals(0, color3.getRed());
      assertEquals(255, color3.getAlpha());
      assertEquals(0, color3.getGreen());
      assertSame(color3, color0);
      assertSame(color3, color2);
      assertSame(color3, color1);
      assertNotSame(blockBorder0, blockBorder1);
      assertNotNull(color3);
      
      RectangleInsets rectangleInsets1 = blockBorder1.getInsets();
      assertTrue(blockBorder0.equals((Object)blockBorder1));
      assertTrue(rectangleInsets1.equals((Object)rectangleInsets0));
      assertTrue(blockBorder1.equals((Object)blockBorder0));
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertNotSame(blockBorder0, blockBorder1);
      assertNotSame(rectangleInsets1, rectangleInsets0);
      assertSame(color0, color3);
      assertSame(color0, color1);
      assertSame(color0, color2);
      assertNotSame(blockBorder1, blockBorder0);
      assertNotNull(rectangleInsets1);
      
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D3 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D3).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D3).getWidth();
      doReturn(0.0).when(rectangle2D3).getX();
      doReturn(0.0).when(rectangle2D3).getY();
      blockBorder0.draw(graphics2D3, rectangle2D3);
      assertTrue(blockBorder0.equals((Object)blockBorder1));
      assertNotSame(blockBorder0, blockBorder1);
      
      boolean boolean1 = blockBorder1.equals(color2);
      assertTrue(blockBorder0.equals((Object)blockBorder1));
      assertFalse(boolean1 == boolean0);
      assertTrue(blockBorder1.equals((Object)blockBorder0));
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color2.getRed());
      assertEquals(255, color2.getAlpha());
      assertEquals(0, color2.getGreen());
      assertEquals((-16777216), color2.getRGB());
      assertEquals(1, color2.getTransparency());
      assertEquals(0, color2.getBlue());
      assertNotSame(blockBorder0, blockBorder1);
      assertSame(color0, color3);
      assertSame(color0, color1);
      assertSame(color0, color2);
      assertNotSame(blockBorder1, blockBorder0);
      assertSame(color2, color0);
      assertSame(color2, color1);
      assertSame(color2, color3);
      assertFalse(boolean1);
      
      RectangleInsets rectangleInsets2 = blockBorder0.getInsets();
      assertTrue(blockBorder0.equals((Object)blockBorder1));
      assertTrue(rectangleInsets2.equals((Object)rectangleInsets1));
      assertEquals(1.0, rectangleInsets2.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets2.getUnitType());
      assertEquals(1.0, rectangleInsets2.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets2.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets2.getBottom(), 0.01);
      assertNotSame(blockBorder0, blockBorder1);
      assertNotSame(rectangleInsets2, rectangleInsets1);
      assertSame(rectangleInsets2, rectangleInsets0);
      assertNotNull(rectangleInsets2);
      
      Graphics2D graphics2D4 = null;
      Rectangle2D rectangle2D4 = null;
      // Undeclared exception!
      try { 
        blockBorder0.draw((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlockBorder blockBorder0 = BlockBorder.NONE;
      assertNotNull(blockBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      blockBorder0.NONE.draw(graphics2D1, rectangle2D0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = null;
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        blockBorder0.NONE.draw(graphics2D3, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockBorder blockBorder0 = new BlockBorder();
      assertNotNull(blockBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      blockBorder0.NONE.draw(graphics2D1, rectangle2D1);
      blockBorder0.draw(graphics2D0, rectangle2D0);
      Color color0 = (Color)blockBorder0.getPaint();
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D2).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D2).getWidth();
      doReturn(0.0).when(rectangle2D2).getX();
      doReturn(0.0).when(rectangle2D2).getY();
      blockBorder0.draw(graphics2D2, rectangle2D2);
      boolean boolean0 = blockBorder0.NONE.equals(color0);
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertFalse(boolean0);
      
      RectangleInsets rectangleInsets0 = blockBorder0.getInsets();
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotNull(rectangleInsets0);
      
      RectangleInsets rectangleInsets1 = blockBorder0.getInsets();
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets1.getRight(), 0.01);
      assertSame(rectangleInsets1, rectangleInsets0);
      assertNotNull(rectangleInsets1);
      
      RectangleInsets rectangleInsets2 = blockBorder0.getInsets();
      assertEquals(1.0, rectangleInsets2.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets2.getUnitType());
      assertEquals(1.0, rectangleInsets2.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets2.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets2.getLeft(), 0.01);
      assertSame(rectangleInsets2, rectangleInsets1);
      assertSame(rectangleInsets2, rectangleInsets0);
      assertNotNull(rectangleInsets2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      BlockBorder blockBorder0 = new BlockBorder(paint0);
      assertNotNull(blockBorder0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      blockBorder0.NONE.draw(graphics2D0, rectangle2D0);
      RectangleInsets rectangleInsets0 = blockBorder0.getInsets();
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertNotNull(rectangleInsets0);
      
      boolean boolean0 = blockBorder0.equals(rectangleInsets0);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertFalse(boolean0);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      blockBorder0.draw(graphics2D1, rectangle2D1);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D2).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D2).getWidth();
      doReturn(0.0).when(rectangle2D2).getX();
      doReturn(0.0).when(rectangle2D2).getY();
      blockBorder0.draw(graphics2D2, rectangle2D2);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      BlockBorder blockBorder1 = new BlockBorder(paint1);
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertNotNull(blockBorder1);
      
      boolean boolean1 = blockBorder0.equals(blockBorder1);
      assertFalse(blockBorder0.equals((Object)blockBorder1));
      assertFalse(blockBorder1.equals((Object)blockBorder0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(blockBorder0, blockBorder1);
      assertNotSame(blockBorder1, blockBorder0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlockBorder blockBorder0 = BlockBorder.NONE;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D0).getWidth();
      doReturn(0.0).when(rectangle2D0).getX();
      doReturn(0.0).when(rectangle2D0).getY();
      blockBorder0.NONE.draw(graphics2D1, rectangle2D0);
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D1).getWidth();
      doReturn(0.0).when(rectangle2D1).getX();
      doReturn(0.0).when(rectangle2D1).getY();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D2 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D2).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D2).getWidth();
      doReturn(0.0).when(rectangle2D2).getX();
      doReturn(0.0).when(rectangle2D2).getY();
      blockBorder0.draw(graphics2D2, rectangle2D2);
      blockBorder0.draw(graphics2D0, rectangle2D1);
      Paint paint0 = blockBorder0.getPaint();
      blockBorder0.equals(paint0);
      RectangleInsets rectangleInsets0 = blockBorder0.getInsets();
      blockBorder0.getPaint();
      blockBorder0.equals(rectangleInsets0);
      boolean boolean0 = blockBorder0.equals(paint0);
      assertFalse(boolean0);
      
      BlockBorder blockBorder1 = new BlockBorder();
      boolean boolean1 = blockBorder0.equals(blockBorder1);
      assertFalse(boolean1);
      
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D3 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D3).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D3).getWidth();
      doReturn(0.0).when(rectangle2D3).getX();
      doReturn(0.0).when(rectangle2D3).getY();
      blockBorder0.draw(graphics2D3, rectangle2D3);
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D4 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D4).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D4).getWidth();
      doReturn(0.0).when(rectangle2D4).getX();
      doReturn(0.0).when(rectangle2D4).getY();
      blockBorder0.draw(graphics2D4, rectangle2D4);
      blockBorder0.getPaint();
      Graphics2D graphics2D5 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D5 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(rectangle2D5).getHeight();
      doReturn(0.0, 0.0, 0.0).when(rectangle2D5).getWidth();
      doReturn(0.0).when(rectangle2D5).getX();
      doReturn(0.0).when(rectangle2D5).getY();
      blockBorder1.draw(graphics2D5, rectangle2D5);
      blockBorder1.getInsets();
      assertFalse(blockBorder1.equals((Object)blockBorder0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockBorder blockBorder0 = new BlockBorder();
      BlockBorder blockBorder1 = BlockBorder.NONE;
      BlockBorder blockBorder2 = BlockBorder.NONE;
      blockBorder1.NONE.equals(blockBorder2);
      blockBorder0.equals(blockBorder1);
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("(I74g-Vn>k1$NYUe", "").when(paint0).toString();
      blockBorder0.equals((Object) null);
      BlockBorder blockBorder3 = new BlockBorder(3233.3324974429, 3233.3324974429, 3233.3324974429, (-1849.934105889363), paint0);
      blockBorder0.equals(blockBorder3);
      blockBorder3.equals("");
      blockBorder3.NONE.equals("R#hV+#_M; -%c,uY");
      blockBorder0.getPaint();
      blockBorder3.getPaint();
      blockBorder0.getInsets();
      blockBorder3.getPaint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
  }
}
