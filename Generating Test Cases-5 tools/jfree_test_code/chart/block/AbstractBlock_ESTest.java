/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:51:46 GMT 2023
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.AbstractBlock;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.Size2D;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBlock_ESTest extends AbstractBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setHeight(Double.POSITIVE_INFINITY);
      abstractBlock0.setPadding(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1368.0);
      abstractBlock0.setMargin(Double.POSITIVE_INFINITY, (-4908.5819), Double.POSITIVE_INFINITY, 2027.0253042);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D0);
      abstractBlock0.getMargin();
      AbstractBlock abstractBlock1 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock1.trimPadding(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimMargin(rectangle2D1);
      Rectangle2D rectangle2D3 = abstractBlock1.trimBorder(rectangle2D2);
      abstractBlock0.trimPadding(rectangle2D3);
      Rectangle2D rectangle2D4 = abstractBlock1.getBounds();
      Rectangle2D rectangle2D5 = abstractBlock0.trimPadding(rectangle2D4);
      abstractBlock0.trimMargin(rectangle2D5);
      abstractBlock0.equals((Object) null);
      Rectangle2D rectangle2D6 = abstractBlock1.trimBorder(rectangle2D5);
      abstractBlock1.trimBorder(rectangle2D6);
      abstractBlock0.getMargin();
      abstractBlock1.getMargin();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D1);
      abstractBlock0.calculateTotalWidth((-186.4371330577378));
      abstractBlock1.trimToContentWidth(81.3877);
      abstractBlock1.getFrame();
      AbstractBlock abstractBlock2 = new AbstractBlock();
      abstractBlock1.equals(abstractBlock2);
      abstractBlock2.equals("#;Knu&FNaN38");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AbstractBlock abstractBlock1 = new AbstractBlock();
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((Size2D) null).when(rectangleConstraint0).calculateConstrainedSize(any(org.jfree.chart.ui.Size2D.class));
      RectangleInsets rectangleInsets0 = abstractBlock1.getPadding();
      abstractBlock1.setMargin(rectangleInsets0);
      abstractBlock1.getMargin();
      abstractBlock0.trimToContentHeight((-1.0));
      abstractBlock1.getMargin();
      abstractBlock0.arrange(graphics2D0, rectangleConstraint0);
      abstractBlock1.getBounds();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setPadding((-1.2651767614907563), 0.0, 2166.8110013343, (-1.0));
      Object object0 = abstractBlock0.clone();
      abstractBlock0.setPadding((-927.6412522687), 2166.8110013343, 1.0, 1.0);
      abstractBlock0.equals(object0);
      abstractBlock0.setMargin(0.0, 0.0, (-524.7148833842241), (-4763.2));
      abstractBlock0.calculateTotalHeight((-1.0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimBorder(rectangle2D0);
      abstractBlock0.setMargin(0.0, 0.0, 0.0, 363.8741547);
      abstractBlock0.setWidth(0.0);
      abstractBlock0.setBorder(0.0, 0.0, (-2792.20829369263), 2.0);
      abstractBlock0.equals(rectangle2D1);
      RectangleInsets rectangleInsets0 = abstractBlock0.getPadding();
      abstractBlock0.setBorder(0.0, 2.0, (-1192.824235), 0.0);
      abstractBlock0.setPadding(rectangleInsets0);
      abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.getPadding();
      abstractBlock0.setHeight((-1192.824235));
      abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.getContentYOffset();
      abstractBlock0.setBorder(0.0, 2.0, 0.0, 1.0);
      abstractBlock0.trimToContentWidth(0.0F);
      abstractBlock0.getContentXOffset();
      abstractBlock0.setBounds(rectangle2D1);
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((double)0.0F, (double)0.0F).when(range0).getLowerBound();
      doReturn(4.402, Double.POSITIVE_INFINITY, 174.918, (double)0.0F).when(range0).getUpperBound();
      LengthConstraintType lengthConstraintType1 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      doReturn("Legacy", "^ ,Rp7{i<{,uV~~I9?").when(lengthConstraintType1).toString();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((double)0.0F).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(1.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType1).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock0.toContentConstraint(rectangleConstraint1);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D0, rectangleConstraint1);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D1, rectangleConstraint1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AbstractBlock abstractBlock1 = new AbstractBlock();
      abstractBlock0.setPadding((-1.0), (-1.0), (-1.0), (-1.0));
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock1.trimMargin(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimBorder(rectangle2D1);
      Rectangle2D rectangle2D3 = abstractBlock0.trimPadding(rectangle2D2);
      abstractBlock0.drawBorder(graphics2D0, rectangle2D3);
      abstractBlock0.trimToContentHeight(0.0);
      abstractBlock1.setHeight((-2353.09));
      abstractBlock0.clone();
      abstractBlock0.setBounds(rectangle2D1);
      abstractBlock0.setBorder(0.0, (-2353.09), (-2353.09), (-2353.09));
      abstractBlock0.setWidth((-2353.09));
      abstractBlock1.setPadding(0.0, (-2353.09), (-1.0), (-2353.09));
      abstractBlock1.setPadding((-2353.09), Double.POSITIVE_INFINITY, 34.93, 2.0);
      Object object0 = abstractBlock1.clone();
      abstractBlock0.equals(object0);
      abstractBlock0.getPadding();
      abstractBlock0.setBounds(rectangle2D0);
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 174.918, 0.0).when(range0).getLowerBound();
      doReturn((-1.0), (double)2.0F, Double.POSITIVE_INFINITY).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((double)2.0F).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(1926.98920747827).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        abstractBlock1.toContentConstraint(rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getID();
      AbstractBlock abstractBlock1 = new AbstractBlock();
      BlockFrame blockFrame0 = abstractBlock1.getFrame();
      abstractBlock0.setFrame(blockFrame0);
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null).when(lengthConstraintType0).toString();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(823.8862, 823.8862, 0.0, 0.0).when(range0).getLowerBound();
      doReturn(2.0, (-1274.71), (-2518.4242834), (-2518.4242834)).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(823.8862).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(823.8862).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      abstractBlock0.setPadding(0.0, 0.0, 1973.73, 1973.73);
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock0.toContentConstraint(rectangleConstraint1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getID();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((-452.1263), (-452.1263)).when(range0).getLowerBound();
      doReturn(2096.715338139, 2124.2042, 2.0, 2124.2042).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(2124.2042).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn((-989.444584)).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      abstractBlock0.setPadding(0.0, 0.0, 1973.73, 1973.73);
      // Undeclared exception!
      try { 
        abstractBlock0.toContentConstraint(rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.equals(abstractBlock0);
      abstractBlock0.setWidth(0.0);
      abstractBlock0.setMargin(0.0, 0.0, 0.0, 0.0);
      Object object0 = abstractBlock0.clone();
      abstractBlock0.equals(object0);
      abstractBlock0.getFrame();
      abstractBlock0.setWidth(0.0);
      abstractBlock0.trimToContentHeight(0.0);
      abstractBlock0.getFrame();
      RectangleInsets rectangleInsets0 = abstractBlock0.getPadding();
      abstractBlock0.setPadding(rectangleInsets0);
      abstractBlock0.calculateTotalWidth((-3757.3295647211));
      abstractBlock0.getFrame();
      abstractBlock0.getID();
      AbstractBlock abstractBlock1 = new AbstractBlock();
      abstractBlock1.trimToContentHeight(0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Graphics2D graphics2D0 = null;
      abstractBlock0.setWidth((-2337.35155));
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 1.0).when(range0).getLowerBound();
      doReturn((-3243.120895548108), (-1.0)).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-2337.35155)).when(rectangleConstraint0).getHeight();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(1.0).when(rectangleConstraint0).getWidth();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      abstractBlock0.setBorder(383.11728506, (-2337.35155), 383.11728506, (-2337.35155));
      // Undeclared exception!
      try { 
        abstractBlock0.toContentConstraint(rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (4675.7031) <= upper (4673.7031).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setBorder((-1.0), (-1.0), (-1.0), (-501.161));
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(lengthConstraintType0).toString();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn((-1.0)).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock0.toContentConstraint(rectangleConstraint1);
      abstractBlock0.setBorder(4595.63197065691, 4595.63197065691, 4595.63197065691, 1099.4);
      abstractBlock0.getFrame();
      abstractBlock0.setBorder(1099.4, (-501.161), (-1.0), 1099.4);
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.trimBorder(rectangle2D0);
      abstractBlock0.setID("frame");
      abstractBlock0.toContentConstraint(rectangleConstraint1);
      Rectangle2D rectangle2D1 = abstractBlock0.trimMargin(rectangle2D0);
      abstractBlock0.setWidth(1099.4);
      abstractBlock0.setBounds(rectangle2D0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.drawBorder(graphics2D0, rectangle2D1);
      Rectangle2D rectangle2D2 = abstractBlock0.getBounds();
      abstractBlock0.trimPadding(rectangle2D2);
      abstractBlock0.setHeight(4.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin(0.0, 0.0, 0.0, 345.7313);
      abstractBlock0.clone();
      abstractBlock0.setHeight((-3644.3));
      RectangleInsets rectangleInsets0 = abstractBlock0.getPadding();
      abstractBlock0.clone();
      abstractBlock0.arrange((Graphics2D) null);
      abstractBlock0.setPadding(rectangleInsets0);
      abstractBlock0.setBorder(2.0, 2.0, 420.762428101057, 420.762428101057);
      abstractBlock0.setWidth((-1793.85535276992));
      abstractBlock0.setMargin(2.0, (-3644.3), 126.72, 0.0);
      abstractBlock0.getHeight();
      abstractBlock0.trimToContentWidth((-1.0));
      abstractBlock0.getHeight();
      abstractBlock0.setMargin(rectangleInsets0);
      abstractBlock0.setPadding(rectangleInsets0);
      abstractBlock0.getWidth();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        abstractBlock0.toContentConstraint(rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock1.getBounds();
      abstractBlock0.setBounds(rectangle2D0);
      abstractBlock1.trimToContentHeight(0.0);
      abstractBlock1.setMargin((-342.328531228329), (-342.328531228329), (-1999.168225576958), 0.0);
      abstractBlock0.setHeight(0.0);
      Object object0 = abstractBlock0.clone();
      abstractBlock1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(lengthConstraintType0).toString();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(1.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock0.arrange(graphics2D0, rectangleConstraint1);
      abstractBlock0.setMargin((-1254.4172330450542), 0.0, (-1254.4172330450542), 0.0);
      abstractBlock0.setMargin(0.0, (-1254.4172330450542), 249.53397237, (-1254.4172330450542));
      abstractBlock0.setID(".<u-?1TNtJLFlt}n\"Bd");
      abstractBlock0.getMargin();
      abstractBlock0.calculateTotalWidth(0.0);
      abstractBlock0.toContentConstraint(rectangleConstraint1);
      abstractBlock0.setID("3\"9\"");
      abstractBlock0.setHeight(249.53397237);
      // Undeclared exception!
      try { 
        abstractBlock0.toContentConstraint((RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.setHeight((-5567.1617));
      Rectangle2D rectangle2D1 = abstractBlock0.trimMargin(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimPadding(rectangle2D1);
      Rectangle2D rectangle2D3 = abstractBlock0.trimBorder(rectangle2D2);
      abstractBlock0.getID();
      RectangleInsets rectangleInsets0 = abstractBlock0.getMargin();
      Rectangle2D rectangle2D4 = abstractBlock0.trimBorder(rectangle2D3);
      abstractBlock0.trimMargin(rectangle2D2);
      double double0 = 1.0;
      abstractBlock0.trimToContentWidth(1.0);
      AbstractBlock abstractBlock1 = new AbstractBlock();
      abstractBlock0.equals(abstractBlock1);
      abstractBlock1.setPadding(rectangleInsets0);
      abstractBlock0.getFrame();
      abstractBlock0.setWidth(1.0);
      abstractBlock0.setID((String) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.drawBorder(graphics2D0, rectangle2D4);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.drawBorder(graphics2D1, rectangle2D3);
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        abstractBlock0.toContentConstraint(rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setID("bounds");
      abstractBlock0.getID();
      abstractBlock0.getContentYOffset();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock1.trimPadding(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimBorder(rectangle2D0);
      abstractBlock1.setBorder(0.0, (-1430.7029), 2.0, 4363.7117);
      abstractBlock1.trimMargin(rectangle2D2);
      Rectangle2D rectangle2D3 = abstractBlock0.trimMargin(rectangle2D1);
      abstractBlock0.trimBorder(rectangle2D0);
      Rectangle2D rectangle2D4 = abstractBlock1.trimBorder(rectangle2D3);
      abstractBlock0.trimMargin(rectangle2D4);
      abstractBlock0.getWidth();
      abstractBlock0.setHeight(0.0);
      abstractBlock1.equals(rectangle2D0);
      abstractBlock0.setBounds(rectangle2D0);
      abstractBlock1.trimToContentWidth(984.5609);
      abstractBlock0.getBounds();
      abstractBlock1.trimBorder(rectangle2D0);
      abstractBlock0.getFrame();
      // Undeclared exception!
      try { 
        abstractBlock0.setFrame((BlockFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'frame' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      BlockFrame blockFrame0 = abstractBlock0.getFrame();
      abstractBlock0.setFrame(blockFrame0);
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.trimMargin(rectangle2D0);
      Rectangle2D rectangle2D1 = abstractBlock0.trimBorder(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimPadding(rectangle2D1);
      abstractBlock0.getWidth();
      abstractBlock0.setPadding(0.0, 0.0, 2586.076014, 0.0);
      abstractBlock0.setWidth(1652.512332166022);
      Rectangle2D rectangle2D3 = abstractBlock0.trimMargin(rectangle2D1);
      Rectangle2D rectangle2D4 = abstractBlock0.trimPadding(rectangle2D3);
      abstractBlock0.setWidth(0.0);
      abstractBlock0.trimPadding(rectangle2D4);
      Rectangle2D rectangle2D5 = abstractBlock0.getBounds();
      abstractBlock0.getContentYOffset();
      Rectangle2D rectangle2D6 = abstractBlock0.trimMargin(rectangle2D4);
      abstractBlock0.trimPadding(rectangle2D6);
      abstractBlock0.setBounds(rectangle2D5);
      abstractBlock0.getContentYOffset();
      abstractBlock0.equals(rectangle2D2);
      abstractBlock0.getContentYOffset();
      abstractBlock0.getContentYOffset();
      abstractBlock0.setID("E(R?2Cz$H");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      AbstractBlock abstractBlock1 = new AbstractBlock();
      BlockFrame blockFrame0 = abstractBlock1.getFrame();
      abstractBlock0.setFrame(blockFrame0);
      Rectangle2D rectangle2D1 = abstractBlock0.trimPadding(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimBorder(rectangle2D1);
      Rectangle2D rectangle2D3 = abstractBlock0.trimMargin(rectangle2D2);
      abstractBlock0.drawBorder(graphics2D0, rectangle2D3);
      abstractBlock0.setBorder(635.3119015566684, 1400.198333425, (-2426.4639218), 1400.198333425);
      abstractBlock0.getBounds();
      abstractBlock0.trimMargin(rectangle2D3);
      RectangleInsets rectangleInsets0 = abstractBlock0.getPadding();
      abstractBlock0.setMargin(rectangleInsets0);
      abstractBlock0.getHeight();
      abstractBlock0.getContentYOffset();
      abstractBlock0.getContentXOffset();
      abstractBlock0.setMargin(1.0, (-1676.4873496144917), 0.0, 635.3119015566684);
      abstractBlock0.setPadding(rectangleInsets0);
      abstractBlock0.setWidth((-255.30061606228597));
      abstractBlock0.getID();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimBorder(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimPadding(rectangle2D1);
      abstractBlock0.drawBorder(graphics2D0, rectangle2D2);
      abstractBlock0.setPadding(0.0, 0.0, (-2189.0), (-433.3));
      abstractBlock0.calculateTotalWidth((-1.0));
      abstractBlock0.getID();
      abstractBlock0.getContentXOffset();
      abstractBlock0.calculateTotalHeight(2444.9273683);
      abstractBlock0.getWidth();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimMargin(rectangle2D0);
      abstractBlock0.trimMargin(rectangle2D1);
      abstractBlock0.setMargin((-1.0), 0.0, 0.0, (-1.0));
      abstractBlock0.setBorder(405.447, (-1.0), 2561.7315, 2561.7315);
      abstractBlock0.setMargin(2561.7315, (-1.0), (-1.0), 0.0);
      abstractBlock0.getFrame();
      abstractBlock0.clone();
      abstractBlock0.getMargin();
      abstractBlock0.getFrame();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimMargin(rectangle2D0);
      abstractBlock0.drawBorder(graphics2D0, rectangle2D1);
      abstractBlock0.getWidth();
      abstractBlock0.clone();
      RectangleInsets rectangleInsets0 = abstractBlock0.getMargin();
      abstractBlock0.setPadding(rectangleInsets0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D1);
      abstractBlock0.setBounds(rectangle2D1);
      Rectangle2D rectangle2D2 = abstractBlock0.getBounds();
      abstractBlock0.trimPadding(rectangle2D2);
      abstractBlock0.setMargin(0.0, 1576.5829116, 0.0, 2627.4727157571);
      abstractBlock0.getMargin();
      abstractBlock0.getID();
      abstractBlock0.trimToContentWidth(Double.POSITIVE_INFINITY);
      abstractBlock0.trimToContentWidth((-2527.0));
      abstractBlock0.clone();
      abstractBlock0.calculateTotalWidth((-2527.0));
      abstractBlock0.trimToContentWidth(0.0);
      abstractBlock0.getContentXOffset();
      abstractBlock0.setID((String) null);
      abstractBlock0.setPadding(rectangleInsets0);
      abstractBlock0.setBorder(1576.5829116, 0.0, 1677.0556273571, 707.9192654);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.clone();
      double double0 = 744.3126250924;
      double double1 = (-862.974739);
      abstractBlock0.clone();
      abstractBlock0.setMargin(744.3126250924, (-862.974739), 2205.551494695, (-1062.479586));
      // Undeclared exception!
      try { 
        abstractBlock0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setWidth(1.0);
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimBorder(rectangle2D0);
      abstractBlock0.trimMargin(rectangle2D1);
      abstractBlock0.setPadding(0.0, 1.0, (-1920.17818), 0.0);
      abstractBlock0.trimToContentWidth(0.0);
      Rectangle2D rectangle2D2 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D3 = abstractBlock0.trimMargin(rectangle2D2);
      Rectangle2D rectangle2D4 = abstractBlock0.trimBorder(rectangle2D3);
      Rectangle2D rectangle2D5 = abstractBlock0.trimPadding(rectangle2D4);
      abstractBlock0.trimPadding(rectangle2D5);
      abstractBlock0.getBounds();
      abstractBlock0.getMargin();
      abstractBlock0.calculateTotalWidth((-659.51206076725));
      abstractBlock0.setMargin(245.25135876519, 0.0, 0.0, 880.533198064244);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setPadding(1695.0, 2.0, (-390.314981), (-556.0));
      RectangleInsets rectangleInsets0 = abstractBlock0.getMargin();
      abstractBlock0.setMargin(rectangleInsets0);
      abstractBlock0.getPadding();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimMargin(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimBorder(rectangle2D1);
      abstractBlock0.trimBorder(rectangle2D2);
      abstractBlock0.getPadding();
      abstractBlock0.setWidth((-1.0));
      abstractBlock0.getMargin();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D0);
      abstractBlock0.trimPadding(rectangle2D1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimBorder(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimPadding(rectangle2D1);
      Rectangle2D rectangle2D3 = abstractBlock0.trimMargin(rectangle2D2);
      abstractBlock0.setBounds(rectangle2D3);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        abstractBlock0.arrange(graphics2D0, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AbstractBlock abstractBlock1 = new AbstractBlock();
      abstractBlock0.setPadding((-1.0), (-1.0), (-1.0), (-1.0));
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock1.trimMargin(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimBorder(rectangle2D1);
      Rectangle2D rectangle2D3 = abstractBlock0.trimPadding(rectangle2D2);
      abstractBlock0.drawBorder(graphics2D0, rectangle2D3);
      abstractBlock0.trimToContentHeight(0.0);
      abstractBlock1.setHeight((-2353.09));
      abstractBlock0.clone();
      abstractBlock0.setBounds(rectangle2D1);
      abstractBlock0.setBorder(0.0, (-2353.09), (-2353.09), (-2353.09));
      abstractBlock0.setWidth((-2353.09));
      abstractBlock1.setPadding(0.0, (-2353.09), (-1.0), (-2353.09));
      abstractBlock1.setPadding((-2353.09), Double.POSITIVE_INFINITY, 34.93, 2.0);
      Object object0 = abstractBlock1.clone();
      abstractBlock0.equals(object0);
      abstractBlock0.getPadding();
      abstractBlock0.setBounds(rectangle2D0);
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        abstractBlock1.toContentConstraint(rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setWidth(0.0);
      Object object0 = abstractBlock0.clone();
      abstractBlock0.equals(object0);
      abstractBlock0.setBorder(1308.0, (-1990.961022063724), (-1990.961022063724), 1308.0);
      abstractBlock0.setPadding((-2335.7523626602), 0.0, 2142.3394, (-597.0));
      AbstractBlock abstractBlock1 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock1.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock1.trimPadding(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimMargin(rectangle2D1);
      Rectangle2D rectangle2D3 = abstractBlock0.trimBorder(rectangle2D2);
      abstractBlock0.trimMargin(rectangle2D3);
      abstractBlock1.setBorder(1308.0, (-1990.961022063724), 1.0, 1308.0);
      abstractBlock1.setWidth(513.68);
      abstractBlock0.getWidth();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.calculateTotalHeight((-628.7814788628));
      abstractBlock0.getHeight();
      abstractBlock0.setWidth(2.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = 3417.9797;
      abstractBlock0.setHeight(3417.9797);
      abstractBlock0.getPadding();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        abstractBlock0.drawBorder(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = (-1.0);
      double double1 = 0.0;
      abstractBlock0.setPadding((-1.0), 0.0, (-1.0), (-1.0));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        abstractBlock0.setBounds((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bounds' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      BlockFrame blockFrame0 = abstractBlock0.getFrame();
      abstractBlock0.setFrame(blockFrame0);
      abstractBlock0.trimToContentHeight(685.2);
      abstractBlock0.trimToContentWidth(1929.05636131);
      abstractBlock0.setHeight(1929.05636131);
      abstractBlock0.setBorder(0.0, Double.POSITIVE_INFINITY, 1.0, 1752.0);
      abstractBlock0.getContentXOffset();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.drawBorder(graphics2D0, rectangle2D0);
      abstractBlock0.setID("");
      abstractBlock0.trimMargin(rectangle2D0);
      abstractBlock0.getBounds();
      abstractBlock0.getMargin();
      abstractBlock0.setID("");
      abstractBlock0.getHeight();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D0);
      RectangleInsets rectangleInsets0 = null;
      // Undeclared exception!
      try { 
        abstractBlock0.setMargin((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'margin' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AbstractBlock abstractBlock1 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock1.trimPadding((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setBorder(1496.62824667, Double.POSITIVE_INFINITY, 1496.62824667, (-876.44067));
      abstractBlock0.setBorder(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-3192.0), (-524.7218895));
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimBorder(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimMargin(rectangle2D1);
      Rectangle2D rectangle2D3 = abstractBlock0.trimPadding(rectangle2D2);
      abstractBlock0.trimBorder(rectangle2D3);
      abstractBlock0.setPadding(0.0, (-102.762133), 0.0, 0.0);
      abstractBlock0.getID();
      abstractBlock0.setHeight(0.0);
      RectangleInsets rectangleInsets0 = abstractBlock0.getMargin();
      abstractBlock0.setMargin(rectangleInsets0);
      abstractBlock0.getHeight();
      abstractBlock0.setPadding(rectangleInsets0);
      abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.setPadding((-341.16306), 4.0, 4.0, 4.0);
      abstractBlock0.drawBorder(graphics2D0, rectangle2D0);
      abstractBlock0.getContentYOffset();
      Rectangle2D rectangle2D1 = abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.getContentXOffset();
      abstractBlock0.setHeight(4.0);
      abstractBlock0.getPadding();
      abstractBlock0.getWidth();
      abstractBlock0.trimBorder(rectangle2D1);
      abstractBlock0.setPadding(4.0, Double.POSITIVE_INFINITY, 4.0, 0.0);
      abstractBlock0.setBorder(4.0, 0.0, (-856.116), (-341.16306));
      abstractBlock0.calculateTotalWidth(0.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setFrame((BlockFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'frame' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.clone();
      abstractBlock0.trimToContentWidth(0.0);
      abstractBlock0.getContentYOffset();
      abstractBlock0.setID("");
      abstractBlock0.getHeight();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimMargin(rectangle2D0);
      abstractBlock0.trimBorder(rectangle2D1);
      abstractBlock0.getID();
      abstractBlock0.setID("");
      Object object0 = abstractBlock0.clone();
      abstractBlock0.equals(object0);
      abstractBlock0.setHeight(0.0);
      abstractBlock0.getBounds();
      BlockFrame blockFrame0 = abstractBlock0.getFrame();
      abstractBlock0.setFrame(blockFrame0);
      abstractBlock0.setMargin(0.0, 0.0, 0.0, 352.2402283258);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setPadding((-1338.034), (-1338.034), (-1338.034), 0.0);
      abstractBlock0.setMargin((-1338.034), (-1338.034), (-1338.034), (-1338.034));
      abstractBlock0.clone();
      abstractBlock0.getMargin();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimBorder(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimPadding(rectangle2D1);
      abstractBlock0.setBounds(rectangle2D0);
      Rectangle2D rectangle2D3 = abstractBlock0.trimMargin(rectangle2D2);
      abstractBlock0.setBounds(rectangle2D3);
      Rectangle2D rectangle2D4 = abstractBlock0.getBounds();
      abstractBlock0.getContentXOffset();
      abstractBlock0.getContentYOffset();
      abstractBlock0.calculateTotalWidth((-1338.034));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.drawBorder(graphics2D0, rectangle2D4);
      abstractBlock0.getWidth();
      abstractBlock0.setID("vp<nn");
      abstractBlock0.setBounds(rectangle2D3);
      RectangleInsets rectangleInsets0 = abstractBlock0.getMargin();
      abstractBlock0.setPadding(rectangleInsets0);
      abstractBlock0.setMargin(rectangleInsets0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleInsets rectangleInsets0 = abstractBlock0.getMargin();
      abstractBlock0.setPadding((-2270.625), (-2270.625), (-2270.625), 0.0);
      abstractBlock0.setPadding(rectangleInsets0);
      abstractBlock0.calculateTotalWidth(0.0);
      abstractBlock0.setPadding(rectangleInsets0);
      abstractBlock0.setMargin(3340.5942401, Double.POSITIVE_INFINITY, 0.0, 776.036679);
      abstractBlock0.setMargin(Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0);
      BlockFrame blockFrame0 = abstractBlock0.getFrame();
      abstractBlock0.setFrame(blockFrame0);
      abstractBlock0.calculateTotalWidth(0.0);
      abstractBlock0.getBounds();
      abstractBlock0.setMargin(0.0, 0.0, 0.0, 0.0);
      abstractBlock0.getBounds();
      abstractBlock0.trimToContentWidth(0.0);
      abstractBlock0.getMargin();
      abstractBlock0.setWidth(0.0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      double double0 = 0.0;
      abstractBlock0.setPadding((-439.7417254222826), (-3586.164247257595), (-3586.164247257595), 0.0);
      // Undeclared exception!
      try { 
        abstractBlock0.toContentConstraint(rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(lengthConstraintType0).toString();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(range0).getLowerBound();
      doReturn(0.0, 0.0, 0.0, 0.0).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-5567.1617)).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn((-1.0)).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      Object object0 = abstractBlock0.clone();
      abstractBlock0.equals(object0);
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock0.toContentConstraint(rectangleConstraint1);
      abstractBlock0.getMargin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimMargin(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimPadding(rectangle2D1);
      abstractBlock0.trimBorder(rectangle2D2);
      abstractBlock0.getContentYOffset();
      abstractBlock0.getBounds();
      abstractBlock0.trimToContentWidth(0.0);
      abstractBlock0.setBorder(3031.0, 3031.0, 3031.0, 1983.6);
      RectangleInsets rectangleInsets0 = abstractBlock0.getPadding();
      abstractBlock0.setPadding(rectangleInsets0);
      abstractBlock0.setWidth(0.0);
      abstractBlock0.getFrame();
      abstractBlock0.getBounds();
      abstractBlock0.calculateTotalHeight(0.0);
      abstractBlock0.equals(rectangle2D2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = new AbstractBlock();
      abstractBlock0.setPadding(397.0, 3401.5596, 3401.5596, 5332.759225009062);
      // Undeclared exception!
      try { 
        abstractBlock1.trimMargin((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.calculateTotalWidth((-1140.5545328347562));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.setID("Qf96}Z! kfa");
      abstractBlock0.clone();
      abstractBlock0.trimBorder(rectangle2D0);
      abstractBlock0.setMargin(2530.0214275468, Double.POSITIVE_INFINITY, 143.870497312095, 2.0);
      abstractBlock0.setWidth(1318.2);
      abstractBlock0.trimToContentWidth(1318.2);
      abstractBlock0.setHeight(1318.2);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D0);
      abstractBlock0.setID("~yh~D|c57<");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.clone();
      abstractBlock0.getBounds();
      abstractBlock0.setHeight((-840.644718));
      abstractBlock0.setHeight(0.0);
      abstractBlock0.trimToContentWidth((-1455.797647947242));
      abstractBlock0.setMargin(0.0, (-840.644718), (-3120.074), 1757.9254);
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      // Undeclared exception!
      try { 
        abstractBlock1.trimMargin((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin(0.0, 0.0, 2247.39246, 0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin(1.0, 1.0, (-3209.741371822323), (-1.0));
      abstractBlock0.setHeight((-1.0));
      abstractBlock0.setID((String) null);
      abstractBlock0.arrange((Graphics2D) null);
      abstractBlock0.setMargin(104.49999677, (-1767.195728070879), 0.0, (-1767.195728070879));
      abstractBlock0.getHeight();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.setWidth((-1.0));
      abstractBlock0.setMargin((-403.06023883269), 0.0, 0.0, (-1.0));
      abstractBlock0.setID((String) null);
      Object object0 = abstractBlock0.clone();
      abstractBlock0.equals(object0);
      abstractBlock0.setPadding(0.0, (-1.0), 2796.979818987, 0.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.equals((Object) null);
      abstractBlock0.getFrame();
      abstractBlock0.setBorder(0.0, 0.0, 0.0, 0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AbstractBlock abstractBlock1 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock1.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimMargin(rectangle2D0);
      abstractBlock0.drawBorder(graphics2D0, rectangle2D1);
      abstractBlock0.clone();
      abstractBlock0.setMargin(0.0, 0.0, 1929.865026099011, 0.0);
      abstractBlock0.setPadding(0.0, 0.0, 0.0, 0.0);
      abstractBlock0.setID("");
      abstractBlock0.trimToContentHeight(0.0);
      abstractBlock1.getWidth();
      abstractBlock0.getContentYOffset();
      abstractBlock1.setBorder((-3734.501453733), 1.0, 0.0, 0.0);
      abstractBlock1.setPadding(2394.75387, (-227.25), (-227.25), 197.68525282);
      abstractBlock0.getWidth();
      abstractBlock1.setHeight(0.0);
      abstractBlock1.setBorder(1614.0738421247388, 0.0, 2394.75387, 0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setBorder(0.0, (-1.0), 0.0, 0.0);
      RectangleInsets rectangleInsets0 = abstractBlock0.getPadding();
      abstractBlock0.setMargin(rectangleInsets0);
      abstractBlock0.trimToContentWidth(0.0);
      AbstractBlock abstractBlock1 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock1.getBounds();
      abstractBlock0.trimMargin(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setBorder(0.0, 0.0, 2816.16, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setBorder(2037.9612334444892, 0.0, 0.0, Double.POSITIVE_INFINITY);
      abstractBlock0.getPadding();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setWidth(0.0);
      abstractBlock0.setPadding(0.0, (-3875.1117342098), 0.0, (-803.64));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getHeight();
      AbstractBlock abstractBlock1 = new AbstractBlock();
      abstractBlock0.equals(abstractBlock1);
      // Undeclared exception!
      try { 
        abstractBlock1.trimBorder((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimMargin(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimBorder(rectangle2D1);
      Rectangle2D rectangle2D3 = abstractBlock0.trimPadding(rectangle2D2);
      abstractBlock0.trimBorder(rectangle2D3);
      abstractBlock0.trimMargin(rectangle2D3);
      abstractBlock0.getPadding();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D0);
      abstractBlock0.getHeight();
      abstractBlock0.trimBorder(rectangle2D1);
      abstractBlock0.getWidth();
      AbstractBlock abstractBlock1 = new AbstractBlock();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        abstractBlock1.toContentConstraint(rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimMargin(rectangle2D0);
      abstractBlock0.setBounds(rectangle2D1);
      abstractBlock0.setHeight(0.0);
      abstractBlock0.getBounds();
      abstractBlock0.setBorder(0.0, 0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setPadding(0.0, 422.4874031696, 0.0, 422.4874031696);
      Object object0 = abstractBlock0.clone();
      abstractBlock0.equals(object0);
      AbstractBlock abstractBlock1 = new AbstractBlock();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.trimPadding(rectangle2D0);
      AbstractBlock abstractBlock1 = new AbstractBlock();
      RectangleInsets rectangleInsets0 = abstractBlock1.getPadding();
      abstractBlock0.setPadding(rectangleInsets0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setPadding(0.0, 0.0, 411.564451, 0.0);
      abstractBlock0.clone();
      abstractBlock0.setBorder((-4898.94978217), (-4898.94978217), (-4898.94978217), (-4898.94978217));
      abstractBlock0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.arrange((Graphics2D) null);
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimMargin(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimBorder(rectangle2D1);
      abstractBlock0.trimBorder(rectangle2D2);
      RectangleInsets rectangleInsets0 = abstractBlock0.getMargin();
      abstractBlock0.setPadding(rectangleInsets0);
      abstractBlock0.trimToContentHeight(1109.3002802643);
      abstractBlock0.getFrame();
      abstractBlock0.getPadding();
      abstractBlock0.setID("org.jfree.chart.block.BlockBorder");
      abstractBlock0.getPadding();
      abstractBlock0.trimToContentHeight(238.76);
      abstractBlock0.getContentYOffset();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getPadding();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleInsets rectangleInsets0 = abstractBlock0.getMargin();
      abstractBlock0.setMargin(rectangleInsets0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.calculateTotalHeight(0.0);
      abstractBlock0.getHeight();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.setHeight((-5567.1617));
      Rectangle2D rectangle2D1 = abstractBlock0.trimMargin(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimPadding(rectangle2D1);
      Rectangle2D rectangle2D3 = abstractBlock0.trimBorder(rectangle2D2);
      abstractBlock0.getID();
      RectangleInsets rectangleInsets0 = abstractBlock0.getMargin();
      Rectangle2D rectangle2D4 = abstractBlock0.trimBorder(rectangle2D3);
      abstractBlock0.trimMargin(rectangle2D2);
      abstractBlock0.getHeight();
      AbstractBlock abstractBlock1 = new AbstractBlock();
      abstractBlock0.equals(abstractBlock1);
      abstractBlock1.setPadding(rectangleInsets0);
      BlockFrame blockFrame0 = abstractBlock0.getFrame();
      abstractBlock0.setWidth(1.0);
      abstractBlock0.setID((String) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.drawBorder(graphics2D0, rectangle2D4);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.drawBorder(graphics2D1, rectangle2D3);
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      doReturn("zi`?5", "zi`?5").when(lengthConstraintType0).toString();
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(4.0, (-25.72467), 0.0).when(range0).getLowerBound();
      doReturn((-198.10691789), Double.POSITIVE_INFINITY, 5058.32067175, 4811.45286912).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((double)0.0F).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock1.toContentConstraint(rectangleConstraint1);
      abstractBlock0.setMargin(1699.2, 0.0, 1.0, (-5567.1617));
      abstractBlock0.trimToContentHeight(1699.2);
      abstractBlock1.trimToContentHeight(0.0);
      abstractBlock0.setWidth(0.0);
      abstractBlock0.getID();
      abstractBlock0.getContentXOffset();
      abstractBlock0.setFrame(blockFrame0);
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock1.drawBorder(graphics2D2, rectangle2D4);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      BlockFrame blockFrame0 = abstractBlock0.getFrame();
      abstractBlock0.setWidth(2.0);
      abstractBlock0.setFrame(blockFrame0);
      AbstractBlock abstractBlock1 = new AbstractBlock();
      abstractBlock0.equals(abstractBlock1);
      abstractBlock1.getContentXOffset();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = abstractBlock1.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimBorder(rectangle2D0);
      Rectangle2D rectangle2D2 = abstractBlock0.trimMargin(rectangle2D1);
      abstractBlock0.drawBorder(graphics2D0, rectangle2D2);
      abstractBlock0.setHeight(0.0);
      abstractBlock0.trimToContentHeight(0.0);
      abstractBlock1.trimToContentWidth(2.0);
      abstractBlock1.setPadding(0.0, 0.0, 0.0, 0.0);
      abstractBlock0.getContentXOffset();
      abstractBlock0.getWidth();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      doReturn((Range) null).when(rectangleConstraint0).getWidthRange();
      // Undeclared exception!
      try { 
        abstractBlock1.toContentConstraint(rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthConstraintType' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin((-139.12677921658928), 0.0, 0.0, (-139.12677921658928));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.clone();
      abstractBlock0.calculateTotalWidth(1864.0);
      BlockFrame blockFrame0 = abstractBlock0.getFrame();
      abstractBlock0.setFrame(blockFrame0);
      RectangleInsets rectangleInsets0 = abstractBlock0.getMargin();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D0);
      abstractBlock0.getWidth();
      Rectangle2D rectangle2D1 = abstractBlock0.getBounds();
      BlockFrame blockFrame1 = abstractBlock0.getFrame();
      AbstractBlock abstractBlock1 = new AbstractBlock();
      Object object0 = abstractBlock1.clone();
      abstractBlock0.equals(object0);
      abstractBlock1.getBounds();
      abstractBlock1.calculateTotalWidth((-1.0));
      abstractBlock1.setBorder(0.0, 0.0, 15.768037015342, Double.POSITIVE_INFINITY);
      abstractBlock0.setMargin(rectangleInsets0);
      abstractBlock1.getMargin();
      AbstractBlock abstractBlock2 = (AbstractBlock)abstractBlock0.clone();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock2.drawBorder(graphics2D1, rectangle2D1);
      abstractBlock1.setHeight((-1.0));
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D2);
      AbstractBlock abstractBlock3 = new AbstractBlock();
      abstractBlock0.equals(abstractBlock3);
      abstractBlock0.getID();
      abstractBlock1.setFrame(blockFrame1);
      abstractBlock3.setFrame(blockFrame1);
      abstractBlock1.getHeight();
      abstractBlock1.calculateTotalHeight(Double.POSITIVE_INFINITY);
      abstractBlock3.trimToContentWidth(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.equals(abstractBlock0);
      abstractBlock0.setWidth(0.0);
      abstractBlock0.setMargin(0.0, 0.0, 0.0, 0.0);
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      abstractBlock1.setBorder(0.0, (-219.0), (-726.0), (-726.0));
      abstractBlock0.equals(abstractBlock1);
      abstractBlock0.getFrame();
      abstractBlock0.setWidth(0.0);
      abstractBlock0.trimToContentHeight(0.0);
      abstractBlock0.getFrame();
      abstractBlock0.getPadding();
      abstractBlock0.calculateTotalWidth((-3757.3295647211));
      abstractBlock0.getFrame();
      AbstractBlock abstractBlock2 = new AbstractBlock();
      abstractBlock2.setWidth(1.0);
      abstractBlock2.trimToContentHeight(0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.trimPadding(rectangle2D0);
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((-86.0), (-187.6521)).when(range0).getLowerBound();
      doReturn(2460.20805156244, (-5567.1617), 363.8741547, 2460.20805156244).when(range0).getUpperBound();
      LengthConstraintType lengthConstraintType1 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      doReturn("CONTRACT").when(lengthConstraintType1).toString();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-187.6521)).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn((-187.6521)).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType1).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      abstractBlock0.equals("CONTRACT");
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock0.arrange((Graphics2D) null, rectangleConstraint1);
      abstractBlock0.setBorder((-86.0), (-86.0), (-2542.923), 1.0);
      abstractBlock0.setID("CONTRACT");
      abstractBlock0.clone();
      abstractBlock0.getID();
      abstractBlock0.getContentYOffset();
      abstractBlock0.getPadding();
      abstractBlock0.calculateTotalWidth((-3552.3916));
      Rectangle2D rectangle2D1 = abstractBlock0.getBounds();
      abstractBlock0.trimPadding(rectangle2D1);
      abstractBlock0.getBounds();
      abstractBlock0.arrange((Graphics2D) null, rectangleConstraint1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      Rectangle2D rectangle2D1 = abstractBlock0.trimBorder(rectangle2D0);
      abstractBlock0.setMargin(0.0, 0.0, 0.0, 363.8741547);
      abstractBlock0.setWidth(0.0);
      abstractBlock0.setBorder(0.0, 0.0, (-2792.20829369263), 2.0);
      abstractBlock0.equals(rectangle2D1);
      RectangleInsets rectangleInsets0 = abstractBlock0.getPadding();
      abstractBlock0.setBorder(0.0, 2.0, (-1192.824235), 0.0);
      abstractBlock0.setPadding(rectangleInsets0);
      abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.getPadding();
      abstractBlock0.setHeight((-1192.824235));
      abstractBlock0.trimPadding(rectangle2D0);
      abstractBlock0.getContentYOffset();
      abstractBlock0.setBorder(0.0, 2.0, 0.0, 1.0);
      abstractBlock0.trimToContentWidth(0.0F);
      abstractBlock0.getContentXOffset();
      abstractBlock0.setBounds(rectangle2D1);
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn(556.5078223, (-1717.39635502559), 2.0, 0.0).when(range0).getLowerBound();
      doReturn((-681.92767), 0.0, Double.POSITIVE_INFINITY).when(range0).getUpperBound();
      LengthConstraintType lengthConstraintType1 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(lengthConstraintType1).toString();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((double)0.0F).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(1.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType1).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      abstractBlock0.toContentConstraint(rectangleConstraint1);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D0, rectangleConstraint1);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      abstractBlock0.arrange(graphics2D1, rectangleConstraint1);
      assertEquals((-1192.824235), abstractBlock0.getHeight(), 0.01);
  }
}
