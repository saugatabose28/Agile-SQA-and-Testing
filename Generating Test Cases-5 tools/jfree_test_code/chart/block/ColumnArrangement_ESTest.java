/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:38:43 GMT 2023
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColumnArrangement_ESTest extends ColumnArrangement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = mock(HorizontalAlignment.class, new ViolatedAssumptionAnswer());
      VerticalAlignment verticalAlignment0 = mock(VerticalAlignment.class, new ViolatedAssumptionAnswer());
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 2636.1920585823336, 2636.1920585823336);
      assertNotNull(columnArrangement0);
      
      HorizontalAlignment horizontalAlignment1 = mock(HorizontalAlignment.class, new ViolatedAssumptionAnswer());
      VerticalAlignment verticalAlignment1 = mock(VerticalAlignment.class, new ViolatedAssumptionAnswer());
      ColumnArrangement columnArrangement1 = new ColumnArrangement(horizontalAlignment0, verticalAlignment1, Double.POSITIVE_INFINITY, 2636.1920585823336);
      assertFalse(columnArrangement1.equals((Object)columnArrangement0));
      assertNotNull(columnArrangement1);
      
      boolean boolean0 = columnArrangement0.equals(columnArrangement1);
      assertFalse(columnArrangement0.equals((Object)columnArrangement1));
      assertFalse(columnArrangement1.equals((Object)columnArrangement0));
      assertFalse(boolean0);
      assertNotSame(columnArrangement0, columnArrangement1);
      assertNotSame(columnArrangement1, columnArrangement0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, graphics2D1, rectangleConstraint0);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
      
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      columnArrangement0.add(block0, (Object) null);
      boolean boolean0 = columnArrangement0.equals(columnArrangement0);
      assertTrue(boolean0);
      
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer2).getBlocks();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType1 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint1).getHeight();
      BlockContainer blockContainer3 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRF(blockContainer2, graphics2D4, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = mock(HorizontalAlignment.class, new ViolatedAssumptionAnswer());
      VerticalAlignment verticalAlignment0 = mock(VerticalAlignment.class, new ViolatedAssumptionAnswer());
      double double0 = 1.0;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, (-1.0), 1.0);
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List<ColorBlock>) null).when(blockContainer1).getBlocks();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(3828.5476935313986).when(rectangleConstraint0).getHeight();
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeFF(blockContainer1, graphics2D1, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List<ColorBlock>) null).when(blockContainer0).getBlocks();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(4679.370679217475).when(rectangleConstraint0).getHeight();
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNF(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = mock(HorizontalAlignment.class, new ViolatedAssumptionAnswer());
      VerticalAlignment verticalAlignment0 = mock(VerticalAlignment.class, new ViolatedAssumptionAnswer());
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, Double.POSITIVE_INFINITY, 2.0);
      assertNotNull(columnArrangement0);
      
      columnArrangement0.clear();
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType1 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(lengthConstraintType1).when(rectangleConstraint0).getWidthConstraintType();
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = mock(HorizontalAlignment.class, new ViolatedAssumptionAnswer());
      VerticalAlignment verticalAlignment0 = mock(VerticalAlignment.class, new ViolatedAssumptionAnswer());
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 2.0, 2.0);
      assertNotNull(columnArrangement0);
      
      List<EmptyBlock> list0 = null;
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List<EmptyBlock>) null).when(blockContainer1).getBlocks();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      double double1 = 4097.076575397;
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-171.610729875229)).when(rectangleConstraint1).getHeight();
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeFF(blockContainer1, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer2 = null;
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNN((BlockContainer) null, graphics2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer0).getBlocks();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNN(blockContainer0, graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = mock(HorizontalAlignment.class, new ViolatedAssumptionAnswer());
      VerticalAlignment verticalAlignment0 = mock(VerticalAlignment.class, new ViolatedAssumptionAnswer());
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 909.15);
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = null;
      // Undeclared exception!
      try { 
        columnArrangement0.arrange(blockContainer0, graphics2D0, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
      
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((LengthConstraintType) null).when(rectangleConstraint1).getHeightConstraintType();
      doReturn((LengthConstraintType) null).when(rectangleConstraint1).getWidthConstraintType();
      Size2D size2D1 = columnArrangement0.arrange(blockContainer1, graphics2D1, rectangleConstraint1);
      assertTrue(size2D1.equals((Object)size2D0));
      assertNotSame(size2D1, size2D0);
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertEquals(0.0, size2D1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertNotNull(size2D1);
      
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer3 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint2 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNF((BlockContainer) null, (Graphics2D) null, rectangleConstraint2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer0).getBlocks();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeFF(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer0).getBlocks();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNF(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer0).getBlocks();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRR(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer0).getBlocks();
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = mock(HorizontalAlignment.class, new ViolatedAssumptionAnswer());
      VerticalAlignment verticalAlignment0 = mock(VerticalAlignment.class, new ViolatedAssumptionAnswer());
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 3034.2275854);
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = null;
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer1).getBlocks();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNF(blockContainer1, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer0).getBlocks();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRF(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint2 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNF((BlockContainer) null, graphics2D1, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = mock(HorizontalAlignment.class, new ViolatedAssumptionAnswer());
      VerticalAlignment verticalAlignment0 = mock(VerticalAlignment.class, new ViolatedAssumptionAnswer());
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 2446.4103985, 2446.4103985);
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer0).getBlocks();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint0).getHeight();
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeFF(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = mock(HorizontalAlignment.class, new ViolatedAssumptionAnswer());
      VerticalAlignment verticalAlignment0 = mock(VerticalAlignment.class, new ViolatedAssumptionAnswer());
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 17.47880381536838, 17.47880381536838);
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer1).getBlocks();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNN(blockContainer1, graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, graphics2D1, rectangleConstraint0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertNotNull(size2D0);
      
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      columnArrangement0.add(block0, (Object) null);
      ColumnArrangement columnArrangement1 = new ColumnArrangement();
      assertTrue(columnArrangement1.equals((Object)columnArrangement0));
      assertNotNull(columnArrangement1);
      
      boolean boolean0 = columnArrangement0.equals(columnArrangement1);
      assertTrue(columnArrangement0.equals((Object)columnArrangement1));
      assertTrue(columnArrangement1.equals((Object)columnArrangement0));
      assertTrue(boolean0);
      assertNotSame(columnArrangement0, columnArrangement1);
      assertNotSame(columnArrangement1, columnArrangement0);
      
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer2).getBlocks();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType1 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer3 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint1).getHeight();
      BlockContainer blockContainer4 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnArrangement1.arrangeRF(blockContainer2, graphics2D4, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, graphics2D1, rectangleConstraint0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertNotNull(size2D0);
      
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      columnArrangement0.add(block0, (Object) null);
      ColumnArrangement columnArrangement1 = new ColumnArrangement();
      assertTrue(columnArrangement1.equals((Object)columnArrangement0));
      assertNotNull(columnArrangement1);
      
      boolean boolean0 = columnArrangement0.equals(columnArrangement1);
      assertTrue(columnArrangement0.equals((Object)columnArrangement1));
      assertTrue(columnArrangement1.equals((Object)columnArrangement0));
      assertTrue(boolean0);
      assertNotSame(columnArrangement0, columnArrangement1);
      assertNotSame(columnArrangement1, columnArrangement0);
      
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer2).getBlocks();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType1 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer3 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint1).getHeight();
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnArrangement1.arrangeRF(blockContainer2, graphics2D4, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = mock(HorizontalAlignment.class, new ViolatedAssumptionAnswer());
      VerticalAlignment verticalAlignment0 = mock(VerticalAlignment.class, new ViolatedAssumptionAnswer());
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 2.0);
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getHeightConstraintType();
      doReturn((LengthConstraintType) null).when(rectangleConstraint0).getWidthConstraintType();
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
      
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer1).getBlocks();
      Graphics2D graphics2D1 = null;
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rectangleConstraint1).getHeight();
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNF(blockContainer1, (Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = mock(HorizontalAlignment.class, new ViolatedAssumptionAnswer());
      VerticalAlignment verticalAlignment0 = mock(VerticalAlignment.class, new ViolatedAssumptionAnswer());
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 2635.1414567642264, 2635.1414567642264);
      assertNotNull(columnArrangement0);
      
      HorizontalAlignment horizontalAlignment1 = mock(HorizontalAlignment.class, new ViolatedAssumptionAnswer());
      VerticalAlignment verticalAlignment1 = mock(VerticalAlignment.class, new ViolatedAssumptionAnswer());
      ColumnArrangement columnArrangement1 = new ColumnArrangement(horizontalAlignment1, verticalAlignment1, Double.POSITIVE_INFINITY, 2635.1414567642264);
      assertFalse(columnArrangement1.equals((Object)columnArrangement0));
      assertNotNull(columnArrangement1);
      
      boolean boolean0 = columnArrangement0.equals(columnArrangement1);
      assertFalse(columnArrangement0.equals((Object)columnArrangement1));
      assertFalse(columnArrangement1.equals((Object)columnArrangement0));
      assertFalse(boolean0);
      assertNotSame(columnArrangement0, columnArrangement1);
      assertNotSame(columnArrangement1, columnArrangement0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint1 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(blockContainer1).getBlocks();
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer2 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint2 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint3 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer3 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint4 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer4 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      RectangleConstraint rectangleConstraint5 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRR(blockContainer1, graphics2D2, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }
}
