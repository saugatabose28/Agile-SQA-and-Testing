/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:32:16 GMT 2023
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.text.TextBlockAnchor;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.chart.ui.Size2D;
import org.jfree.chart.util.UnitType;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LabelBlock_ESTest extends LabelBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      doReturn("w!R|4dD6").when(font0).toString();
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      
      LabelBlock labelBlock0 = new LabelBlock("V0@({gSu", font0, color0);
      assertNotNull(labelBlock0);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      
      String string0 = labelBlock0.getURLText();
      assertNull(string0);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      
      boolean boolean0 = labelBlock0.equals("V0@({gSu");
      assertFalse(boolean0);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      
      Font font1 = labelBlock0.getFont();
      assertNotNull(font1);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertFalse(font1.isBold());
      assertEquals(0, font1.getSize());
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isItalic());
      assertEquals(0, font1.getStyle());
      assertNull(font1.getName());
      assertFalse(font1.isTransformed());
      assertFalse(font1.isPlain());
      assertFalse(font1.hasLayoutAttributes());
      assertEquals(0.0F, font1.getSize2D(), 0.01F);
      assertSame(font1, font0);
      
      labelBlock0.setPadding(0.0, 2786.770664395485, (-600.3946069), 0.0);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(2786.770664395485, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fontMetrics0).getAscent();
      doReturn(0).when(fontMetrics0).getHeight();
      doReturn(0).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      Size2D size2D0 = labelBlock0.arrange(graphics2D0, (RectangleConstraint) null);
      assertNotNull(size2D0);
      assertEquals((-600.3946069), size2D0.height, 0.01);
      assertEquals(2786.770664395485, size2D0.width, 0.01);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(2786.770664395485, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(2786.770664395485, size2D0.getWidth(), 0.01);
      assertEquals((-600.3946069), size2D0.getHeight(), 0.01);
      
      labelBlock0.setFont(font1);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(2786.770664395485, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertFalse(font1.isBold());
      assertEquals(0, font1.getSize());
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isItalic());
      assertEquals(0, font1.getStyle());
      assertNull(font1.getName());
      assertFalse(font1.isTransformed());
      assertFalse(font1.isPlain());
      assertFalse(font1.hasLayoutAttributes());
      assertEquals(0.0F, font1.getSize2D(), 0.01F);
      assertSame(font1, font0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      LabelBlock labelBlock0 = new LabelBlock("paint", font0);
      assertNotNull(labelBlock0);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(4492).when(fontMetrics0).getAscent();
      doReturn(4492).when(fontMetrics0).getHeight();
      doReturn(1).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((-3005.91114), Double.POSITIVE_INFINITY, (double)1).when(range0).getLowerBound();
      doReturn(801.340380795069, (-855.888), Double.POSITIVE_INFINITY).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-3005.91114)).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      RectangleConstraint rectangleConstraint1 = labelBlock0.toContentConstraint(rectangleConstraint0);
      assertNotNull(rectangleConstraint1);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      
      Size2D size2D0 = labelBlock0.arrange(graphics2D0, rectangleConstraint1);
      assertNotNull(size2D0);
      assertEquals(1.0, size2D0.width, 0.01);
      assertEquals(4492.0, size2D0.height, 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(4492.0, size2D0.getHeight(), 0.01);
      assertEquals(1.0, size2D0.getWidth(), 0.01);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      
      String string0 = labelBlock0.getToolTipText();
      assertNull(string0);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      labelBlock0.setPaint(color0);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      LabelBlock labelBlock1 = (LabelBlock)labelBlock0.clone();
      assertNotNull(labelBlock1);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertNull(labelBlock1.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      LabelBlock labelBlock2 = (LabelBlock)labelBlock0.clone();
      assertNotNull(labelBlock2);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock2.getContentXOffset(), 0.01);
      assertNull(labelBlock2.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock2.getTextAnchor());
      assertNull(labelBlock2.getURLText());
      assertEquals(0.0, labelBlock2.getContentYOffset(), 0.01);
      assertNull(labelBlock2.getID());
      assertEquals(0.0, labelBlock2.getHeight(), 0.01);
      assertEquals(0.0, labelBlock2.getWidth(), 0.01);
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertTrue(labelBlock2.equals((Object)labelBlock0));
      assertTrue(labelBlock2.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock2, labelBlock1);
      assertNotSame(labelBlock2, labelBlock0);
      
      boolean boolean0 = labelBlock0.equals(labelBlock2);
      assertTrue(boolean0);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock2.getContentXOffset(), 0.01);
      assertNull(labelBlock2.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock2.getTextAnchor());
      assertNull(labelBlock2.getURLText());
      assertEquals(0.0, labelBlock2.getContentYOffset(), 0.01);
      assertNull(labelBlock2.getID());
      assertEquals(0.0, labelBlock2.getHeight(), 0.01);
      assertEquals(0.0, labelBlock2.getWidth(), 0.01);
      assertTrue(labelBlock0.equals((Object)labelBlock2));
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertTrue(labelBlock2.equals((Object)labelBlock0));
      assertTrue(labelBlock2.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock2, labelBlock1);
      assertNotSame(labelBlock2, labelBlock0);
      
      String string1 = labelBlock0.getURLText();
      assertNull(string1);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertTrue(labelBlock0.equals((Object)labelBlock2));
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock0, labelBlock2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("tIFfy@#E4.Kcj@4|a");
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      labelBlock0.setTextAnchor(rectangleAnchor0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)labelBlock0.trimPadding(rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float2 = (Rectangle2D.Float)labelBlock0.trimBorder(rectangle2D_Float1);
      assertNotNull(rectangle2D_Float2);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float3 = (Rectangle2D.Float)labelBlock0.trimMargin(rectangle2D_Float2);
      assertNotNull(rectangle2D_Float3);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.width, 0.01F);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMaxY(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float3);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float3);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float3);
      assertSame(rectangle2D_Float3, rectangle2D_Float2);
      assertSame(rectangle2D_Float3, rectangle2D_Float0);
      assertSame(rectangle2D_Float3, rectangle2D_Float1);
      
      Rectangle2D.Float rectangle2D_Float4 = (Rectangle2D.Float)labelBlock0.trimPadding(rectangle2D_Float3);
      assertNotNull(rectangle2D_Float4);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float4.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float4.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float4.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float4.height, 0.01F);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float4.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float4.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float4.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float4.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float4.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float4.getMaxX(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float3);
      assertSame(rectangle2D_Float0, rectangle2D_Float4);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float3);
      assertSame(rectangle2D_Float1, rectangle2D_Float4);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float2, rectangle2D_Float4);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float3);
      assertSame(rectangle2D_Float3, rectangle2D_Float2);
      assertSame(rectangle2D_Float3, rectangle2D_Float4);
      assertSame(rectangle2D_Float3, rectangle2D_Float0);
      assertSame(rectangle2D_Float3, rectangle2D_Float1);
      assertSame(rectangle2D_Float4, rectangle2D_Float1);
      assertSame(rectangle2D_Float4, rectangle2D_Float0);
      assertSame(rectangle2D_Float4, rectangle2D_Float3);
      assertSame(rectangle2D_Float4, rectangle2D_Float2);
      
      BlockBorder blockBorder0 = (BlockBorder)labelBlock0.getFrame();
      assertNotNull(blockBorder0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      labelBlock0.setFrame(blockBorder0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      RectangleAnchor rectangleAnchor1 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.LEFT, rectangleAnchor1);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("RectangleAnchor.LEFT", rectangleAnchor1.toString());
      assertSame(rectangleAnchor1, rectangleAnchor0);
      
      String string0 = labelBlock0.getURLText();
      assertNull(string0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      TextBlockAnchor textBlockAnchor0 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      
      LabelBlock labelBlock1 = new LabelBlock("tIFfy@#E4.Kcj@4|a");
      assertNotNull(labelBlock1);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertNull(labelBlock1.getID());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertNull(labelBlock1.getURLText());
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      
      boolean boolean0 = labelBlock0.equals(labelBlock1);
      assertFalse(boolean0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertNull(labelBlock1.getID());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertNull(labelBlock1.getURLText());
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      Font font0 = labelBlock0.getFont();
      assertNotNull(font0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      Font font0 = null;
      LabelBlock labelBlock0 = new LabelBlock("", (Font) null);
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      Font font1 = labelBlock0.getFont();
      assertNull(font1);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      Color color0 = (Color)labelBlock0.getPaint();
      assertNotNull(color0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      
      // Undeclared exception!
      try { 
        labelBlock0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      LabelBlock labelBlock0 = new LabelBlock("", font0);
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      labelBlock0.setToolTipText("");
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)labelBlock0.trimMargin(rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float2 = (Rectangle2D.Float)labelBlock0.trimPadding(rectangle2D_Float1);
      assertNotNull(rectangle2D_Float2);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      
      Object object0 = labelBlock0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float2, (Object) null);
      assertNull(object0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      
      String string0 = labelBlock0.getURLText();
      assertNull(string0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      labelBlock0.setToolTipText("");
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      labelBlock0.setPaint(color0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      labelBlock0.setURLText((String) null);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Object object1 = labelBlock0.draw(graphics2D1, (Rectangle2D) rectangle2D_Float2, (Object) rectangle2D_Float0);
      assertNull(object1);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      
      TextBlockAnchor textBlockAnchor0 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor0);
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      labelBlock0.setContentAlignmentPoint(textBlockAnchor0);
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = labelBlock0.arrange(graphics2D2, (RectangleConstraint) null);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      
      Font font1 = mock(Font.class, new ViolatedAssumptionAnswer());
      labelBlock0.setFont(font1);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      boolean boolean0 = labelBlock0.equals(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      
      labelBlock0.setPaint(color0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      String string1 = labelBlock0.getToolTipText();
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      // Undeclared exception!
      try { 
        labelBlock0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      
      LabelBlock labelBlock0 = new LabelBlock("jZ<( +x.)D$y<lCnjF", font0, color0);
      assertNotNull(labelBlock0);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      Font font1 = mock(Font.class, new ViolatedAssumptionAnswer());
      labelBlock0.setFont(font1);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      Color color1 = (Color)labelBlock0.getPaint();
      assertNotNull(color1);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertSame(color0, color1);
      assertSame(color1, color0);
      
      labelBlock0.setPaint(color1);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertSame(color0, color1);
      assertSame(color1, color0);
      
      TextBlockAnchor textBlockAnchor0 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor0);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      assertSame(color0, color1);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      labelBlock0.setTextAnchor(rectangleAnchor0);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertSame(color0, color1);
      
      labelBlock0.setToolTipText("jZ<( +x.)D$y<lCnjF");
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals("jZ<( +x.)D$y<lCnjF", labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertSame(color0, color1);
      
      Color color2 = (Color)labelBlock0.getPaint();
      assertNotNull(color2);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals("jZ<( +x.)D$y<lCnjF", labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0, color2.getBlue());
      assertEquals(0, color2.getRed());
      assertEquals((-16777216), color2.getRGB());
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
      assertEquals(0, color2.getGreen());
      assertSame(color0, color1);
      assertSame(color0, color2);
      assertSame(color2, color1);
      assertSame(color2, color0);
      
      String string0 = labelBlock0.getToolTipText();
      assertNotNull(string0);
      assertEquals("jZ<( +x.)D$y<lCnjF", string0);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals("jZ<( +x.)D$y<lCnjF", labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.TOP_LEFT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertSame(color0, color1);
      assertSame(color0, color2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      LabelBlock labelBlock0 = new LabelBlock("_9V3vRkQ[{iVrWNJ", font0);
      assertNotNull(labelBlock0);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      Paint paint0 = null;
      Font font1 = mock(Font.class, new ViolatedAssumptionAnswer());
      labelBlock0.setFont(font1);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      labelBlock0.setMargin((-3440.15546550385), (-3440.15546550385), (-3440.15546550385), (-2154.4383));
      assertNull(labelBlock0.getURLText());
      assertEquals((-3440.15546550385), labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals((-3440.15546550385), labelBlock0.getContentYOffset(), 0.01);
      
      // Undeclared exception!
      try { 
        labelBlock0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "`=o[50!88HNM";
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      
      LabelBlock labelBlock0 = new LabelBlock("`=o[50!88HNM", font0, color0);
      assertNotNull(labelBlock0);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      Font font1 = mock(Font.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = labelBlock0.equals("`=o[50!88HNM");
      assertFalse(boolean0);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      LabelBlock labelBlock1 = new LabelBlock("`=o[50!88HNM", font1, color0);
      assertNotNull(labelBlock1);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      
      labelBlock1.setURLText("`=o[50!88HNM");
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals("`=o[50!88HNM", labelBlock1.getURLText());
      assertNull(labelBlock1.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock1, labelBlock0);
      
      boolean boolean1 = labelBlock0.equals(labelBlock1);
      assertFalse(boolean1);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals("`=o[50!88HNM", labelBlock1.getURLText());
      assertNull(labelBlock1.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      TextBlockAnchor textBlockAnchor0 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor0);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      
      labelBlock1.setContentAlignmentPoint(textBlockAnchor0);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals("`=o[50!88HNM", labelBlock1.getURLText());
      assertNull(labelBlock1.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock1.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals("`=o[50!88HNM", labelBlock1.getURLText());
      assertNull(labelBlock1.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock1, labelBlock0);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)labelBlock1.trimMargin(rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals("`=o[50!88HNM", labelBlock1.getURLText());
      assertNull(labelBlock1.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock1, labelBlock0);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float2 = (Rectangle2D.Float)labelBlock1.trimPadding(rectangle2D_Float1);
      assertNotNull(rectangle2D_Float2);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals("`=o[50!88HNM", labelBlock1.getURLText());
      assertNull(labelBlock1.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock1, labelBlock0);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      
      // Undeclared exception!
      try { 
        labelBlock1.draw(graphics2D0, (Rectangle2D) rectangle2D_Float2, (Object) "`=o[50!88HNM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      TextBlockAnchor textBlockAnchor0 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      
      labelBlock0.setPaint(color0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)labelBlock0.trimMargin(rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      
      Object object0 = labelBlock0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float1, (Object) textBlockAnchor0);
      assertNull(object0);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      
      TextBlockAnchor textBlockAnchor1 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor1);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor1.toString());
      assertSame(textBlockAnchor1, textBlockAnchor0);
      
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      labelBlock0.setFont(font0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      LabelBlock labelBlock1 = (LabelBlock)labelBlock0.clone();
      assertNotNull(labelBlock1);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertNull(labelBlock1.getURLText());
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      String string0 = labelBlock0.getToolTipText();
      assertNull(string0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      
      Font font1 = null;
      // Undeclared exception!
      try { 
        labelBlock0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      labelBlock0.setURLText("8i");
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      RectangleInsets rectangleInsets0 = labelBlock0.getPadding();
      assertNotNull(rectangleInsets0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      
      labelBlock0.setPadding(rectangleInsets0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      
      RectangleInsets rectangleInsets1 = labelBlock0.getMargin();
      assertNotNull(rectangleInsets1);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(0.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets1.getLeft(), 0.01);
      assertSame(rectangleInsets1, rectangleInsets0);
      
      labelBlock0.setMargin(rectangleInsets1);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(UnitType.ABSOLUTE, rectangleInsets1.getUnitType());
      assertEquals(0.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets1.getLeft(), 0.01);
      assertSame(rectangleInsets1, rectangleInsets0);
      
      labelBlock0.setURLText("8i");
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      Font font0 = labelBlock0.getFont();
      assertNotNull(font0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      labelBlock0.setTextAnchor(rectangleAnchor0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      RectangleAnchor rectangleAnchor1 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor1);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor1.toString());
      assertSame(rectangleAnchor1, rectangleAnchor0);
      
      Font font1 = labelBlock0.getFont();
      assertNotNull(font1);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertFalse(font1.isBold());
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isItalic());
      assertTrue(font1.isPlain());
      assertEquals("SansSerif", font1.getName());
      assertEquals(10, font1.getSize());
      assertEquals(10.0F, font1.getSize2D(), 0.01F);
      assertEquals(0, font1.getStyle());
      assertFalse(font1.isTransformed());
      assertFalse(font1.hasLayoutAttributes());
      assertSame(font1, font0);
      
      LabelBlock labelBlock1 = new LabelBlock("");
      assertNotNull(labelBlock1);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      
      LabelBlock labelBlock2 = new LabelBlock("8i", font0, labelBlock1.DEFAULT_PAINT);
      assertNotNull(labelBlock2);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock2.getContentXOffset(), 0.01);
      assertNull(labelBlock2.getURLText());
      assertNull(labelBlock2.getToolTipText());
      assertEquals(0.0, labelBlock2.getWidth(), 0.01);
      assertEquals(0.0, labelBlock2.getHeight(), 0.01);
      assertEquals(0.0, labelBlock2.getContentYOffset(), 0.01);
      assertNull(labelBlock2.getID());
      assertEquals(RectangleAnchor.CENTER, labelBlock2.getTextAnchor());
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertFalse(labelBlock2.equals((Object)labelBlock0));
      assertFalse(labelBlock2.equals((Object)labelBlock1));
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock1.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertFalse(labelBlock1.equals((Object)labelBlock2));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock1, labelBlock2);
      assertNotSame(labelBlock1, labelBlock0);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)labelBlock2.trimMargin(rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock2.getContentXOffset(), 0.01);
      assertNull(labelBlock2.getURLText());
      assertNull(labelBlock2.getToolTipText());
      assertEquals(0.0, labelBlock2.getWidth(), 0.01);
      assertEquals(0.0, labelBlock2.getHeight(), 0.01);
      assertEquals(0.0, labelBlock2.getContentYOffset(), 0.01);
      assertNull(labelBlock2.getID());
      assertEquals(RectangleAnchor.CENTER, labelBlock2.getTextAnchor());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertFalse(labelBlock0.equals((Object)labelBlock2));
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock1.equals((Object)labelBlock2));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertFalse(labelBlock2.equals((Object)labelBlock0));
      assertFalse(labelBlock2.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(font0, font1);
      assertNotSame(labelBlock1, labelBlock2);
      assertNotSame(labelBlock1, labelBlock0);
      assertNotSame(labelBlock2, labelBlock0);
      assertNotSame(labelBlock2, labelBlock1);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float2 = (Rectangle2D.Float)labelBlock2.trimBorder(rectangle2D_Float1);
      assertNotNull(rectangle2D_Float2);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock2.getContentXOffset(), 0.01);
      assertNull(labelBlock2.getURLText());
      assertNull(labelBlock2.getToolTipText());
      assertEquals(0.0, labelBlock2.getWidth(), 0.01);
      assertEquals(0.0, labelBlock2.getHeight(), 0.01);
      assertEquals(0.0, labelBlock2.getContentYOffset(), 0.01);
      assertNull(labelBlock2.getID());
      assertEquals(RectangleAnchor.CENTER, labelBlock2.getTextAnchor());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertFalse(labelBlock0.equals((Object)labelBlock2));
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock1.equals((Object)labelBlock2));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertFalse(labelBlock2.equals((Object)labelBlock0));
      assertFalse(labelBlock2.equals((Object)labelBlock1));
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(font0, font1);
      assertNotSame(labelBlock1, labelBlock2);
      assertNotSame(labelBlock1, labelBlock0);
      assertNotSame(labelBlock2, labelBlock0);
      assertNotSame(labelBlock2, labelBlock1);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      
      Rectangle2D.Float rectangle2D_Float3 = (Rectangle2D.Float)labelBlock2.trimBorder(rectangle2D_Float2);
      assertNotNull(rectangle2D_Float3);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, rectangle2D_Float3.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getCenterY(), 0.01);
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock2.getContentXOffset(), 0.01);
      assertNull(labelBlock2.getURLText());
      assertNull(labelBlock2.getToolTipText());
      assertEquals(0.0, labelBlock2.getWidth(), 0.01);
      assertEquals(0.0, labelBlock2.getHeight(), 0.01);
      assertEquals(0.0, labelBlock2.getContentYOffset(), 0.01);
      assertNull(labelBlock2.getID());
      assertEquals(RectangleAnchor.CENTER, labelBlock2.getTextAnchor());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertFalse(labelBlock0.equals((Object)labelBlock2));
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock1.equals((Object)labelBlock2));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertFalse(labelBlock2.equals((Object)labelBlock0));
      assertFalse(labelBlock2.equals((Object)labelBlock1));
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float3);
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(rectangle2D_Float3, rectangle2D_Float1);
      assertSame(rectangle2D_Float3, rectangle2D_Float2);
      assertSame(rectangle2D_Float3, rectangle2D_Float0);
      assertSame(font0, font1);
      assertNotSame(labelBlock1, labelBlock2);
      assertNotSame(labelBlock1, labelBlock0);
      assertNotSame(labelBlock2, labelBlock0);
      assertNotSame(labelBlock2, labelBlock1);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float0, rectangle2D_Float3);
      assertSame(rectangle2D_Float1, rectangle2D_Float3);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      
      boolean boolean0 = labelBlock1.equals(labelBlock2);
      assertFalse(boolean0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock2.getContentXOffset(), 0.01);
      assertNull(labelBlock2.getURLText());
      assertNull(labelBlock2.getToolTipText());
      assertEquals(0.0, labelBlock2.getWidth(), 0.01);
      assertEquals(0.0, labelBlock2.getHeight(), 0.01);
      assertEquals(0.0, labelBlock2.getContentYOffset(), 0.01);
      assertNull(labelBlock2.getID());
      assertEquals(RectangleAnchor.CENTER, labelBlock2.getTextAnchor());
      assertFalse(labelBlock0.equals((Object)labelBlock2));
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock1.equals((Object)labelBlock2));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertFalse(labelBlock2.equals((Object)labelBlock0));
      assertFalse(labelBlock2.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(font0, font1);
      assertNotSame(labelBlock1, labelBlock2);
      assertNotSame(labelBlock1, labelBlock0);
      assertNotSame(labelBlock2, labelBlock0);
      assertNotSame(labelBlock2, labelBlock1);
      
      labelBlock1.setPaint(labelBlock0.DEFAULT_PAINT);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertFalse(labelBlock0.equals((Object)labelBlock2));
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock1.equals((Object)labelBlock2));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock2);
      assertNotSame(labelBlock1, labelBlock0);
      
      boolean boolean1 = labelBlock0.equals(labelBlock1);
      assertFalse(boolean1);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertFalse(labelBlock0.equals((Object)labelBlock2));
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertTrue(boolean1 == boolean0);
      assertFalse(labelBlock1.equals((Object)labelBlock2));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock2);
      assertNotSame(labelBlock1, labelBlock0);
      
      labelBlock1.setFont(font0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertFalse(labelBlock0.equals((Object)labelBlock2));
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock1.equals((Object)labelBlock2));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(font0, font1);
      assertNotSame(labelBlock1, labelBlock2);
      assertNotSame(labelBlock1, labelBlock0);
      
      RectangleAnchor rectangleAnchor2 = labelBlock1.getTextAnchor();
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor2);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor2.toString());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertFalse(labelBlock1.equals((Object)labelBlock2));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertSame(rectangleAnchor2, rectangleAnchor0);
      assertSame(rectangleAnchor2, rectangleAnchor1);
      assertNotSame(labelBlock1, labelBlock2);
      assertNotSame(labelBlock1, labelBlock0);
      
      labelBlock0.setTextAnchor(rectangleAnchor1);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor1.toString());
      assertFalse(labelBlock0.equals((Object)labelBlock2));
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(rectangleAnchor1, rectangleAnchor0);
      assertSame(rectangleAnchor1, rectangleAnchor2);
      
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      labelBlock1.setPaint(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertFalse(labelBlock1.equals((Object)labelBlock2));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock1, labelBlock2);
      assertNotSame(labelBlock1, labelBlock0);
      
      String string0 = labelBlock2.getURLText();
      assertNull(string0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock2.getContentXOffset(), 0.01);
      assertNull(labelBlock2.getURLText());
      assertNull(labelBlock2.getToolTipText());
      assertEquals(0.0, labelBlock2.getWidth(), 0.01);
      assertEquals(0.0, labelBlock2.getHeight(), 0.01);
      assertEquals(0.0, labelBlock2.getContentYOffset(), 0.01);
      assertNull(labelBlock2.getID());
      assertEquals(RectangleAnchor.CENTER, labelBlock2.getTextAnchor());
      assertFalse(labelBlock0.equals((Object)labelBlock2));
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock1.equals((Object)labelBlock2));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertFalse(labelBlock2.equals((Object)labelBlock0));
      assertFalse(labelBlock2.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(font0, font1);
      assertNotSame(labelBlock1, labelBlock2);
      assertNotSame(labelBlock1, labelBlock0);
      assertNotSame(labelBlock2, labelBlock0);
      assertNotSame(labelBlock2, labelBlock1);
      
      Font font2 = labelBlock0.getFont();
      assertNotNull(font2);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertTrue(font2.isPlain());
      assertFalse(font2.hasUniformLineMetrics());
      assertEquals("SansSerif", font2.getName());
      assertFalse(font2.isItalic());
      assertEquals(0, font2.getStyle());
      assertEquals(10.0F, font2.getSize2D(), 0.01F);
      assertFalse(font2.hasLayoutAttributes());
      assertEquals(10, font2.getSize());
      assertFalse(font2.isTransformed());
      assertFalse(font2.isBold());
      assertFalse(labelBlock0.equals((Object)labelBlock2));
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(font2, font0);
      assertSame(font2, font1);
      
      Font font3 = labelBlock0.getFont();
      assertNotNull(font3);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertFalse(font3.hasUniformLineMetrics());
      assertTrue(font3.isPlain());
      assertFalse(font3.isBold());
      assertFalse(font3.isItalic());
      assertFalse(font3.isTransformed());
      assertEquals(0, font3.getStyle());
      assertEquals(10.0F, font3.getSize2D(), 0.01F);
      assertEquals(10, font3.getSize());
      assertFalse(font3.hasLayoutAttributes());
      assertEquals("SansSerif", font3.getName());
      assertFalse(labelBlock0.equals((Object)labelBlock2));
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(font3, font1);
      assertSame(font3, font2);
      assertSame(font3, font0);
      
      String string1 = labelBlock1.getURLText();
      assertNull(string1);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertFalse(labelBlock1.equals((Object)labelBlock2));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock1, labelBlock2);
      assertNotSame(labelBlock1, labelBlock0);
      
      RectangleAnchor rectangleAnchor3 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor3);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("8i", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor3.toString());
      assertFalse(labelBlock0.equals((Object)labelBlock2));
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(rectangleAnchor3, rectangleAnchor0);
      assertSame(rectangleAnchor3, rectangleAnchor1);
      assertSame(rectangleAnchor3, rectangleAnchor2);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        labelBlock2.draw(graphics2D0, (Rectangle2D) rectangle2D_Float1, (Object) rectangleInsets0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      LabelBlock labelBlock0 = new LabelBlock("", font0);
      assertNotNull(labelBlock0);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      LabelBlock labelBlock1 = (LabelBlock)labelBlock0.clone();
      assertNotNull(labelBlock1);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      
      labelBlock0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      
      TextBlockAnchor textBlockAnchor0 = null;
      // Undeclared exception!
      try { 
        labelBlock0.setContentAlignmentPoint((TextBlockAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      Font font0 = labelBlock0.getFont();
      assertNotNull(font0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      labelBlock0.setWidth(0.0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      TextBlockAnchor textBlockAnchor0 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      
      labelBlock0.setContentAlignmentPoint(textBlockAnchor0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      
      labelBlock0.setBorder(959.1092237, (-1.0), (-1.0), 1.0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      Size2D size2D0 = labelBlock0.arrange(graphics2D0, (RectangleConstraint) null);
      assertNotNull(size2D0);
      assertEquals(958.1092237, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(958.1092237, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      
      labelBlock0.setToolTipText("");
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      labelBlock0.setFont(font0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D1 = labelBlock0.arrange(graphics2D1, (RectangleConstraint) null);
      assertNotNull(size2D1);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals(958.1092237, size2D1.height, 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, size2D1.getWidth(), 0.01);
      assertEquals(958.1092237, size2D1.getHeight(), 0.01);
      assertTrue(size2D1.equals((Object)size2D0));
      assertNotSame(size2D1, size2D0);
      
      TextBlockAnchor textBlockAnchor1 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor1);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor1.toString());
      assertSame(textBlockAnchor1, textBlockAnchor0);
      
      labelBlock0.setContentAlignmentPoint(textBlockAnchor1);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor1.toString());
      assertSame(textBlockAnchor1, textBlockAnchor0);
      
      labelBlock0.setToolTipText("");
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)labelBlock0.trimPadding(rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float2 = (Rectangle2D.Float)labelBlock0.trimMargin(rectangle2D_Float1);
      assertNotNull(rectangle2D_Float2);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      
      labelBlock0.draw(graphics2D2, (Rectangle2D) rectangle2D_Float2);
      assertEquals((-958.10925F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(959.10925F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float1.x, 0.01F);
      assertEquals(959.10925F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals((-958.10925F), rectangle2D_Float1.height, 0.01F);
      assertEquals((-958.10925F), rectangle2D_Float2.height, 0.01F);
      assertEquals((-1.0F), rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(959.10925F, rectangle2D_Float2.y, 0.01F);
      assertEquals(480.05462646484375, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(959.1092529296875, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals((-1.0), rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(480.05462646484375, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(959.1092529296875, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(480.05462646484375, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(959.1092529296875, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals((-1.0), rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals((-1.0), rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      labelBlock0.draw(graphics2D3, (Rectangle2D) rectangle2D_Float1);
      assertEquals((-1916.2185F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-2.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(1918.2185F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-2.0F), rectangle2D_Float1.x, 0.01F);
      assertEquals(1918.2185F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals((-1916.2185F), rectangle2D_Float1.height, 0.01F);
      assertEquals(960.1092529296875, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(1918.218505859375, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals((-2.0), rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(960.1092529296875, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(1918.218505859375, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals((-2.0), rectangle2D_Float1.getMinX(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      
      labelBlock0.setContentAlignmentPoint(textBlockAnchor1);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor1.toString());
      assertSame(textBlockAnchor1, textBlockAnchor0);
      
      Graphics2D graphics2D4 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Object object0 = labelBlock0.draw(graphics2D4, (Rectangle2D) rectangle2D_Float0, (Object) graphics2D4);
      assertNull(object0);
      assertEquals((-2874.3276F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-3.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2877.3276F, rectangle2D_Float0.y, 0.01F);
      assertEquals(3.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(1440.163818359375, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(2877.32763671875, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-3.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      labelBlock0.setPaint(color0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      TextBlockAnchor textBlockAnchor2 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor2);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor2.toString());
      assertSame(textBlockAnchor2, textBlockAnchor0);
      assertSame(textBlockAnchor2, textBlockAnchor1);
      
      Graphics2D graphics2D5 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      labelBlock0.draw(graphics2D5, (Rectangle2D) rectangle2D_Float2);
      assertEquals((-4.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-3832.4368F), rectangle2D_Float0.height, 0.01F);
      assertEquals(3836.4368F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float1.x, 0.01F);
      assertEquals(3836.4368F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals((-3832.4368F), rectangle2D_Float1.height, 0.01F);
      assertEquals((-4.0F), rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals((-3832.4368F), rectangle2D_Float2.height, 0.01F);
      assertEquals(3836.4368F, rectangle2D_Float2.y, 0.01F);
      assertEquals(1920.2183837890625, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-4.0), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-4.0), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(3836.436767578125, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-4.0), rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(4.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(959.1092237, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals((-4.0), rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(1920.2183837890625, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(4.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals((-4.0), rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(3836.436767578125, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals((-4.0), rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(1920.2183837890625, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals((-4.0), rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(3836.436767578125, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals((-4.0), rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals((-4.0), rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(4.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "n{n|QN.";
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      
      LabelBlock labelBlock0 = new LabelBlock("n{n|QN.", font0, color0);
      assertNotNull(labelBlock0);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      LabelBlock labelBlock1 = new LabelBlock("n{n|QN.");
      assertNotNull(labelBlock1);
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertNull(labelBlock1.getURLText());
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock1.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock1, labelBlock0);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)labelBlock1.trimMargin(rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock1, labelBlock0);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float2 = (Rectangle2D.Float)labelBlock0.trimBorder(rectangle2D_Float0);
      assertNotNull(rectangle2D_Float2);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      
      // Undeclared exception!
      try { 
        labelBlock0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "anchor";
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      LabelBlock labelBlock0 = new LabelBlock("anchor", font0);
      assertNotNull(labelBlock0);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      RectangleInsets rectangleInsets0 = labelBlock0.getPadding();
      assertNotNull(rectangleInsets0);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      
      labelBlock0.setPadding(rectangleInsets0);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      RectangleConstraint rectangleConstraint0 = null;
      // Undeclared exception!
      try { 
        labelBlock0.arrange(graphics2D0, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(font0).toString();
      LabelBlock labelBlock0 = new LabelBlock("", font0);
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Size2D size2D0 = labelBlock0.arrange(graphics2D0, (RectangleConstraint) null);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      
      Font font1 = labelBlock0.getFont();
      assertNotNull(font1);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0F, font1.getSize2D(), 0.01F);
      assertEquals(0, font1.getStyle());
      assertFalse(font1.hasLayoutAttributes());
      assertNull(font1.getName());
      assertFalse(font1.isBold());
      assertFalse(font1.isTransformed());
      assertEquals(0, font1.getSize());
      assertFalse(font1.isItalic());
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isPlain());
      assertSame(font1, font0);
      
      TextBlockAnchor textBlockAnchor0 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabelBlock labelBlock0 = null;
      try {
        labelBlock0 = new LabelBlock((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(font0).toString();
      LabelBlock labelBlock0 = new LabelBlock("Size2D[width=", font0);
      assertNotNull(labelBlock0);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      TextBlockAnchor textBlockAnchor0 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor0);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      
      labelBlock0.setContentAlignmentPoint(textBlockAnchor0);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      
      TextBlockAnchor textBlockAnchor1 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor1);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor1.toString());
      assertSame(textBlockAnchor1, textBlockAnchor0);
      
      labelBlock0.setToolTipText((String) null);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      labelBlock0.setURLText("org.jfree.chart.block.LabelBlock");
      assertEquals("org.jfree.chart.block.LabelBlock", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      LabelBlock labelBlock1 = (LabelBlock)labelBlock0.clone();
      assertNotNull(labelBlock1);
      assertEquals("org.jfree.chart.block.LabelBlock", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals("org.jfree.chart.block.LabelBlock", labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      Font font1 = labelBlock0.getFont();
      assertNotNull(font1);
      assertEquals("org.jfree.chart.block.LabelBlock", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertFalse(font1.isPlain());
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.isTransformed());
      assertEquals(0, font1.getStyle());
      assertEquals(0.0F, font1.getSize2D(), 0.01F);
      assertNull(font1.getName());
      assertEquals(0, font1.getSize());
      assertFalse(font1.isItalic());
      assertFalse(font1.isBold());
      assertFalse(font1.hasUniformLineMetrics());
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(font1, font0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      labelBlock0.setTextAnchor(rectangleAnchor0);
      assertEquals("org.jfree.chart.block.LabelBlock", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, labelBlock0.getTextAnchor());
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      
      String string0 = labelBlock0.getURLText();
      assertNotNull(string0);
      assertEquals("org.jfree.chart.block.LabelBlock", string0);
      assertEquals("org.jfree.chart.block.LabelBlock", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, labelBlock0.getTextAnchor());
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      
      labelBlock0.setToolTipText("org.jfree.chart.block.LabelBlock");
      assertEquals("org.jfree.chart.block.LabelBlock", labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals("org.jfree.chart.block.LabelBlock", labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, labelBlock0.getTextAnchor());
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      labelBlock0.setPaint(color0);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)labelBlock0.trimBorder(rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      labelBlock0.setTextAnchor(rectangleAnchor0);
      assertEquals(RectangleAnchor.RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float2 = (Rectangle2D.Float)labelBlock0.trimMargin(rectangle2D_Float1);
      assertNotNull(rectangle2D_Float2);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(RectangleAnchor.RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      
      Object object0 = labelBlock0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float2, (Object) rectangle2D_Float2);
      assertNull(object0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(RectangleAnchor.RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      
      labelBlock0.setPaint(color0);
      assertEquals(RectangleAnchor.RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      labelBlock0.setPaint(color0);
      assertEquals(RectangleAnchor.RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      LabelBlock labelBlock1 = (LabelBlock)labelBlock0.clone();
      assertNotNull(labelBlock1);
      assertEquals(RectangleAnchor.RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(RectangleAnchor.RIGHT, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      boolean boolean0 = labelBlock0.equals(labelBlock1);
      assertTrue(boolean0);
      assertEquals(RectangleAnchor.RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(RectangleAnchor.RIGHT, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      labelBlock0.draw(graphics2D1, (Rectangle2D) rectangle2D_Float1);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(RectangleAnchor.RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      
      Color color1 = (Color)labelBlock0.getPaint();
      assertNotNull(color1);
      assertEquals(255, color1.getAlpha());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getRed());
      assertEquals(RectangleAnchor.RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertSame(color1, color0);
      assertNotSame(labelBlock0, labelBlock1);
      
      String string0 = labelBlock0.getURLText();
      assertNull(string0);
      assertEquals(RectangleAnchor.RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      
      String string1 = labelBlock0.getURLText();
      assertNull(string1);
      assertEquals(RectangleAnchor.RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      
      String string2 = labelBlock0.getURLText();
      assertNull(string2);
      assertEquals(RectangleAnchor.RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      
      RectangleAnchor rectangleAnchor1 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.RIGHT, rectangleAnchor1);
      assertEquals(RectangleAnchor.RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor1.toString());
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(rectangleAnchor1, rectangleAnchor0);
      
      // Undeclared exception!
      try { 
        labelBlock0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Float2, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      LabelBlock labelBlock0 = new LabelBlock("", font0);
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      
      labelBlock0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      LabelBlock labelBlock0 = new LabelBlock("", font0, color0);
      assertNotNull(labelBlock0);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      
      labelBlock0.setWidth(401.4307227);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(401.4307227, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      
      labelBlock0.setPaint(color0);
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(401.4307227, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        labelBlock0.draw(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      LabelBlock labelBlock0 = new LabelBlock("", font0);
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      
      labelBlock0.setHeight(1113.652396533);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(1113.652396533, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      
      TextBlockAnchor textBlockAnchor0 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor0);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(1113.652396533, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor0);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(1113.652396533, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      
      TextBlockAnchor textBlockAnchor1 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor1);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(1113.652396533, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor1.toString());
      assertSame(textBlockAnchor1, textBlockAnchor0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("Nd(?Bd");
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      labelBlock0.setTextAnchor(rectangleAnchor0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      
      String string0 = labelBlock0.getURLText();
      assertNull(string0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "Bh*][<h\\|`&soVB";
      Font font0 = null;
      LabelBlock labelBlock0 = null;
      try {
        labelBlock0 = new LabelBlock("Bh*][<h|`&soVB", (Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.text.TextLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      LabelBlock labelBlock0 = new LabelBlock("<", font0);
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      Font font1 = mock(Font.class, new ViolatedAssumptionAnswer());
      labelBlock0.setFont(font1);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      boolean boolean0 = labelBlock0.equals("<");
      assertFalse(boolean0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      // Undeclared exception!
      try { 
        labelBlock0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      LabelBlock labelBlock0 = null;
      try {
        labelBlock0 = new LabelBlock((String) null, font0, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("", (Font) null);
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      
      LabelBlock labelBlock1 = null;
      try {
        labelBlock1 = new LabelBlock("q`p[0X", (Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.text.TextLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      
      LabelBlock labelBlock0 = null;
      try {
        labelBlock0 = new LabelBlock("anchor", (Font) null, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.text.TextLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(font0).toString();
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      
      LabelBlock labelBlock0 = new LabelBlock("V0@({gSu", font0, color0);
      assertNotNull(labelBlock0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      String string0 = labelBlock0.getURLText();
      assertNull(string0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      Font font1 = mock(Font.class, new ViolatedAssumptionAnswer());
      LabelBlock labelBlock1 = new LabelBlock("V0@({gSu", font1, labelBlock0.DEFAULT_PAINT);
      assertNotNull(labelBlock1);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertNull(labelBlock1.getURLText());
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      
      boolean boolean0 = labelBlock0.equals(labelBlock1);
      assertFalse(boolean0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertNull(labelBlock1.getURLText());
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      boolean boolean1 = labelBlock0.equals("V0@({gSu");
      assertFalse(boolean1);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(labelBlock0, labelBlock1);
      
      Font font2 = labelBlock0.getFont();
      assertNotNull(font2);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0, font2.getStyle());
      assertNull(font2.getName());
      assertFalse(font2.isPlain());
      assertEquals(0, font2.getSize());
      assertFalse(font2.isItalic());
      assertFalse(font2.isBold());
      assertFalse(font2.hasUniformLineMetrics());
      assertFalse(font2.isTransformed());
      assertFalse(font2.hasLayoutAttributes());
      assertEquals(0.0F, font2.getSize2D(), 0.01F);
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(font2.equals((Object)font1));
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(font2, font0);
      assertNotSame(font2, font1);
      
      labelBlock0.setPadding(0.0, 2786.770664395485, (-600.3946069), 0.0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(2786.770664395485, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      // Undeclared exception!
      try { 
        labelBlock0.arrange(graphics2D0, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("anchor");
      assertNotNull(labelBlock0);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      String string0 = labelBlock0.getToolTipText();
      assertNull(string0);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      labelBlock0.setURLText((String) null);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      boolean boolean0 = labelBlock0.equals((Object) null);
      assertFalse(boolean0);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor0);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      
      LabelBlock labelBlock1 = (LabelBlock)labelBlock0.clone();
      assertNotNull(labelBlock1);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      boolean boolean1 = labelBlock0.equals(labelBlock1);
      assertTrue(boolean1);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getID());
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock1.getTextAnchor());
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      LabelBlock labelBlock2 = null;
      try {
        labelBlock2 = new LabelBlock((String) null, (Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.text.TextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      
      RectangleInsets rectangleInsets0 = labelBlock0.getMargin();
      assertNotNull(rectangleInsets0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      labelBlock0.setTextAnchor(rectangleAnchor0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      
      labelBlock0.setPadding(rectangleInsets0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(UnitType.ABSOLUTE, rectangleInsets0.getUnitType());
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      
      labelBlock0.setMargin(0.0, 0.0, 0.0, 121.434665808345);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      
      labelBlock0.setMargin(121.434665808345, (-223.72), 0.0, 0.0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      
      RectangleAnchor rectangleAnchor1 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.LEFT, rectangleAnchor1);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      assertEquals("RectangleAnchor.LEFT", rectangleAnchor1.toString());
      assertSame(rectangleAnchor1, rectangleAnchor0);
      
      RectangleAnchor rectangleAnchor2 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.LEFT, rectangleAnchor2);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      assertEquals("RectangleAnchor.LEFT", rectangleAnchor2.toString());
      assertSame(rectangleAnchor2, rectangleAnchor0);
      assertSame(rectangleAnchor2, rectangleAnchor1);
      
      labelBlock0.setTextAnchor(rectangleAnchor1);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      assertEquals("RectangleAnchor.LEFT", rectangleAnchor1.toString());
      assertSame(rectangleAnchor1, rectangleAnchor0);
      assertSame(rectangleAnchor1, rectangleAnchor2);
      
      boolean boolean0 = labelBlock0.equals("");
      assertFalse(boolean0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      
      RectangleAnchor rectangleAnchor3 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.LEFT, rectangleAnchor3);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      assertEquals("RectangleAnchor.LEFT", rectangleAnchor3.toString());
      assertSame(rectangleAnchor3, rectangleAnchor2);
      assertSame(rectangleAnchor3, rectangleAnchor1);
      assertSame(rectangleAnchor3, rectangleAnchor0);
      
      Font font0 = labelBlock0.getFont();
      assertNotNull(font0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      assertFalse(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      
      RectangleAnchor rectangleAnchor4 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.LEFT, rectangleAnchor4);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      assertEquals("RectangleAnchor.LEFT", rectangleAnchor4.toString());
      assertSame(rectangleAnchor4, rectangleAnchor0);
      assertSame(rectangleAnchor4, rectangleAnchor2);
      assertSame(rectangleAnchor4, rectangleAnchor1);
      assertSame(rectangleAnchor4, rectangleAnchor3);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      labelBlock0.draw(graphics2D1, (Rectangle2D) rectangle2D_Float0);
      assertEquals(223.72F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-121.43467F), rectangle2D_Float0.height, 0.01F);
      assertEquals(121.43467F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-223.72F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(121.4346694946289, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-223.72000122070312), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-111.86000061035156), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(60.71733474731445, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)labelBlock0.trimMargin(rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertEquals((-447.44F), rectangle2D_Float1.x, 0.01F);
      assertEquals((-242.86934F), rectangle2D_Float1.height, 0.01F);
      assertEquals(447.44F, rectangle2D_Float1.width, 0.01F);
      assertEquals(242.86934F, rectangle2D_Float1.y, 0.01F);
      assertEquals(447.44F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-242.86934F), rectangle2D_Float0.height, 0.01F);
      assertEquals(242.86934F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-447.44F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(121.4346694946289, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(242.8693389892578, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals((-447.44000244140625), rectangle2D_Float1.getMinX(), 0.01);
      assertEquals((-223.72000122070312), rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(242.8693389892578, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-447.44000244140625), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-223.72000122070312), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(121.4346694946289, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      
      Rectangle2D.Float rectangle2D_Float2 = (Rectangle2D.Float)labelBlock0.trimBorder(rectangle2D_Float1);
      assertNotNull(rectangle2D_Float2);
      assertEquals((-447.44F), rectangle2D_Float1.x, 0.01F);
      assertEquals((-242.86934F), rectangle2D_Float1.height, 0.01F);
      assertEquals(447.44F, rectangle2D_Float1.width, 0.01F);
      assertEquals(242.86934F, rectangle2D_Float1.y, 0.01F);
      assertEquals(447.44F, rectangle2D_Float2.width, 0.01F);
      assertEquals((-242.86934F), rectangle2D_Float2.height, 0.01F);
      assertEquals(242.86934F, rectangle2D_Float2.y, 0.01F);
      assertEquals((-447.44F), rectangle2D_Float2.x, 0.01F);
      assertEquals(447.44F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-242.86934F), rectangle2D_Float0.height, 0.01F);
      assertEquals(242.86934F, rectangle2D_Float0.y, 0.01F);
      assertEquals((-447.44F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(121.4346694946289, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(242.8693389892578, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals((-447.44000244140625), rectangle2D_Float1.getMinX(), 0.01);
      assertEquals((-223.72000122070312), rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals((-447.44000244140625), rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(121.4346694946289, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals((-223.72000122070312), rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(242.8693389892578, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(242.8693389892578, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-447.44000244140625), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-223.72000122070312), rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(121.4346694946289, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      
      LabelBlock labelBlock1 = (LabelBlock)labelBlock0.clone();
      assertNotNull(labelBlock1);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(RectangleAnchor.LEFT, labelBlock1.getTextAnchor());
      assertNull(labelBlock1.getID());
      assertEquals(121.434665808345, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getURLText());
      assertEquals((-223.72), labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      Object object0 = labelBlock0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float2, (Object) labelBlock1);
      assertNull(object0);
      assertEquals(364.30402F, rectangle2D_Float1.y, 0.01F);
      assertEquals(671.16F, rectangle2D_Float1.width, 0.01F);
      assertEquals((-671.16F), rectangle2D_Float1.x, 0.01F);
      assertEquals((-364.30402F), rectangle2D_Float1.height, 0.01F);
      assertEquals((-671.16F), rectangle2D_Float2.x, 0.01F);
      assertEquals((-364.30402F), rectangle2D_Float2.height, 0.01F);
      assertEquals(671.16F, rectangle2D_Float2.width, 0.01F);
      assertEquals(364.30402F, rectangle2D_Float2.y, 0.01F);
      assertEquals((-364.30402F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-671.16F), rectangle2D_Float0.x, 0.01F);
      assertEquals(671.16F, rectangle2D_Float0.width, 0.01F);
      assertEquals(364.30402F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals((-335.5799865722656), rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(182.15200805664062, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals((-671.1599731445312), rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(364.30401611328125, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(182.15200805664062, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(364.30401611328125, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals((-335.5799865722656), rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals((-671.1599731445312), rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNull(labelBlock1.getToolTipText());
      assertEquals(RectangleAnchor.LEFT, labelBlock1.getTextAnchor());
      assertNull(labelBlock1.getID());
      assertEquals(121.434665808345, labelBlock1.getContentYOffset(), 0.01);
      assertNull(labelBlock1.getURLText());
      assertEquals((-223.72), labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertEquals((-671.1599731445312), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(364.30401611328125, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(182.15200805664062, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-335.5799865722656), rectangle2D_Float0.getCenterX(), 0.01);
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertNotSame(labelBlock1, labelBlock0);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      
      RectangleAnchor rectangleAnchor5 = RectangleAnchor.RIGHT;
      labelBlock0.setTextAnchor(rectangleAnchor5);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(121.434665808345, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNull(labelBlock0.getID());
      assertEquals((-223.72), labelBlock0.getContentXOffset(), 0.01);
      assertFalse(labelBlock0.equals((Object)labelBlock1));
      assertFalse(rectangleAnchor5.equals((Object)rectangleAnchor4));
      assertFalse(rectangleAnchor5.equals((Object)rectangleAnchor2));
      assertFalse(rectangleAnchor5.equals((Object)rectangleAnchor1));
      assertFalse(rectangleAnchor5.equals((Object)rectangleAnchor0));
      assertFalse(rectangleAnchor5.equals((Object)rectangleAnchor3));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(rectangleAnchor5, rectangleAnchor4);
      assertNotSame(rectangleAnchor5, rectangleAnchor2);
      assertNotSame(rectangleAnchor5, rectangleAnchor1);
      assertNotSame(rectangleAnchor5, rectangleAnchor0);
      assertNotSame(rectangleAnchor5, rectangleAnchor3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      
      LabelBlock labelBlock0 = new LabelBlock("", font0, color0);
      assertNotNull(labelBlock0);
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      
      Color color1 = (Color)labelBlock0.getPaint();
      assertNotNull(color1);
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals((-16777216), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertSame(color0, color1);
      assertSame(color1, color0);
      
      labelBlock0.setBorder(0.0, 0.0, (-1.0), (-1.0));
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertSame(color0, color1);
      
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor0);
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertSame(color0, color1);
      
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.BOTTOM_RIGHT;
      labelBlock0.setTextAnchor(rectangleAnchor1);
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertFalse(rectangleAnchor1.equals((Object)rectangleAnchor0));
      assertSame(color0, color1);
      assertNotSame(rectangleAnchor1, rectangleAnchor0);
      
      TextBlockAnchor textBlockAnchor0 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor0);
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      assertSame(color0, color1);
      
      labelBlock0.setContentAlignmentPoint(textBlockAnchor0);
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      assertSame(color0, color1);
      
      RectangleAnchor rectangleAnchor2 = RectangleAnchor.TOP;
      labelBlock0.setTextAnchor(rectangleAnchor2);
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.TOP, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertFalse(rectangleAnchor2.equals((Object)rectangleAnchor1));
      assertFalse(rectangleAnchor2.equals((Object)rectangleAnchor0));
      assertSame(color0, color1);
      assertNotSame(rectangleAnchor2, rectangleAnchor1);
      assertNotSame(rectangleAnchor2, rectangleAnchor0);
      
      labelBlock0.setToolTipText("");
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.TOP, labelBlock0.getTextAnchor());
      assertEquals("", labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertSame(color0, color1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        labelBlock0.trimMargin((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("tIFfy@#E4.Kcj@4|a");
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      labelBlock0.setTextAnchor(rectangleAnchor0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)labelBlock0.trimPadding(rectangle2D_Float0);
      assertNotNull(rectangle2D_Float1);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float2 = (Rectangle2D.Float)labelBlock0.trimBorder(rectangle2D_Float1);
      assertNotNull(rectangle2D_Float2);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float3 = (Rectangle2D.Float)labelBlock0.trimMargin(rectangle2D_Float2);
      assertNotNull(rectangle2D_Float3);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.height, 0.01F);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getCenterX(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float0, rectangle2D_Float3);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float1, rectangle2D_Float3);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float3);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float3, rectangle2D_Float0);
      assertSame(rectangle2D_Float3, rectangle2D_Float1);
      assertSame(rectangle2D_Float3, rectangle2D_Float2);
      
      Rectangle2D.Float rectangle2D_Float4 = (Rectangle2D.Float)labelBlock0.trimPadding(rectangle2D_Float3);
      assertNotNull(rectangle2D_Float4);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float2.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float3.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float4.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float4.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float4.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float4.width, 0.01F);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float2.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float3.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float4.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float4.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float4.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float4.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float4.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float4.getMaxY(), 0.01);
      assertSame(rectangle2D_Float0, rectangle2D_Float2);
      assertSame(rectangle2D_Float0, rectangle2D_Float3);
      assertSame(rectangle2D_Float0, rectangle2D_Float4);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float2);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float1, rectangle2D_Float3);
      assertSame(rectangle2D_Float1, rectangle2D_Float4);
      assertSame(rectangle2D_Float2, rectangle2D_Float1);
      assertSame(rectangle2D_Float2, rectangle2D_Float3);
      assertSame(rectangle2D_Float2, rectangle2D_Float4);
      assertSame(rectangle2D_Float2, rectangle2D_Float0);
      assertSame(rectangle2D_Float3, rectangle2D_Float0);
      assertSame(rectangle2D_Float3, rectangle2D_Float1);
      assertSame(rectangle2D_Float3, rectangle2D_Float4);
      assertSame(rectangle2D_Float3, rectangle2D_Float2);
      assertSame(rectangle2D_Float4, rectangle2D_Float1);
      assertSame(rectangle2D_Float4, rectangle2D_Float2);
      assertSame(rectangle2D_Float4, rectangle2D_Float3);
      assertSame(rectangle2D_Float4, rectangle2D_Float0);
      
      BlockBorder blockBorder0 = (BlockBorder)labelBlock0.getFrame();
      assertNotNull(blockBorder0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      
      labelBlock0.setFrame(blockBorder0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      
      RectangleAnchor rectangleAnchor1 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.LEFT, rectangleAnchor1);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals("RectangleAnchor.LEFT", rectangleAnchor1.toString());
      assertSame(rectangleAnchor1, rectangleAnchor0);
      
      String string0 = labelBlock0.getURLText();
      assertNull(string0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      
      TextBlockAnchor textBlockAnchor0 = labelBlock0.getContentAlignmentPoint();
      assertNotNull(textBlockAnchor0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals("TextBlockAnchor.CENTER", textBlockAnchor0.toString());
      
      LabelBlock labelBlock1 = (LabelBlock)labelBlock0.clone();
      assertNotNull(labelBlock1);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock1.getTextAnchor());
      assertNull(labelBlock1.getToolTipText());
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      boolean boolean0 = labelBlock0.equals(labelBlock1);
      assertTrue(boolean0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock1.getTextAnchor());
      assertNull(labelBlock1.getToolTipText());
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock1, labelBlock0);
      
      Font font0 = labelBlock0.getFont();
      assertNotNull(font0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertNotSame(labelBlock0, labelBlock1);
      
      LabelBlock labelBlock2 = new LabelBlock("UI");
      assertNotNull(labelBlock2);
      assertNull(labelBlock2.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock2.getTextAnchor());
      assertEquals(0.0, labelBlock2.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock2.getContentYOffset(), 0.01);
      assertNull(labelBlock2.getID());
      assertEquals(0.0, labelBlock2.getHeight(), 0.01);
      assertNull(labelBlock2.getURLText());
      assertEquals(0.0, labelBlock2.getWidth(), 0.01);
      assertFalse(labelBlock2.equals((Object)labelBlock0));
      assertFalse(labelBlock2.equals((Object)labelBlock1));
      
      boolean boolean1 = labelBlock1.equals(labelBlock2);
      assertFalse(boolean1);
      assertNull(labelBlock2.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock2.getTextAnchor());
      assertEquals(0.0, labelBlock2.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock2.getContentYOffset(), 0.01);
      assertNull(labelBlock2.getID());
      assertEquals(0.0, labelBlock2.getHeight(), 0.01);
      assertNull(labelBlock2.getURLText());
      assertEquals(0.0, labelBlock2.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock0.getTextAnchor());
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertNull(labelBlock1.getID());
      assertNull(labelBlock1.getURLText());
      assertEquals(0.0, labelBlock1.getContentYOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertEquals(RectangleAnchor.LEFT, labelBlock1.getTextAnchor());
      assertNull(labelBlock1.getToolTipText());
      assertFalse(labelBlock2.equals((Object)labelBlock0));
      assertFalse(labelBlock2.equals((Object)labelBlock1));
      assertTrue(labelBlock0.equals((Object)labelBlock1));
      assertFalse(labelBlock0.equals((Object)labelBlock2));
      assertFalse(boolean1 == boolean0);
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      assertFalse(labelBlock1.equals((Object)labelBlock2));
      assertNotSame(labelBlock2, labelBlock0);
      assertNotSame(labelBlock2, labelBlock1);
      assertNotSame(labelBlock0, labelBlock1);
      assertNotSame(labelBlock0, labelBlock2);
      assertNotSame(labelBlock1, labelBlock0);
      assertNotSame(labelBlock1, labelBlock2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "";
      Font font0 = null;
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      LabelBlock labelBlock0 = new LabelBlock("", (Font) null, color0);
      assertNotNull(labelBlock0);
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      
      String string1 = labelBlock0.getToolTipText();
      assertNull(string1);
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      
      String string2 = "J}";
      labelBlock0.setURLText("J}");
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals("J}", labelBlock0.getURLText());
      
      boolean boolean0 = labelBlock0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals("J}", labelBlock0.getURLText());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        labelBlock0.trimMargin((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      LabelBlock labelBlock0 = new LabelBlock("paint", font0);
      FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(fontMetrics0).getAscent();
      doReturn((-1971)).when(fontMetrics0).getHeight();
      doReturn(1).when(fontMetrics0).stringWidth(anyString());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(fontMetrics0).when(graphics2D0).getFontMetrics(any(java.awt.Font.class));
      LengthConstraintType lengthConstraintType0 = mock(LengthConstraintType.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((-3005.91114), Double.POSITIVE_INFINITY, 1186.257424507).when(range0).getLowerBound();
      doReturn(801.340380795069, (-855.888), Double.POSITIVE_INFINITY).when(range0).getUpperBound();
      RectangleConstraint rectangleConstraint0 = mock(RectangleConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((-3005.91114)).when(rectangleConstraint0).getHeight();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getHeightConstraintType();
      doReturn(range0).when(rectangleConstraint0).getHeightRange();
      doReturn(0.0).when(rectangleConstraint0).getWidth();
      doReturn(lengthConstraintType0).when(rectangleConstraint0).getWidthConstraintType();
      doReturn(range0).when(rectangleConstraint0).getWidthRange();
      RectangleConstraint rectangleConstraint1 = labelBlock0.toContentConstraint(rectangleConstraint0);
      labelBlock0.arrange(graphics2D0, rectangleConstraint1);
      labelBlock0.getToolTipText();
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      labelBlock0.setPaint(color0);
      Object object0 = labelBlock0.clone();
      LabelBlock labelBlock1 = (LabelBlock)labelBlock0.clone();
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      labelBlock1.setTextAnchor(rectangleAnchor0);
      boolean boolean0 = labelBlock0.equals(labelBlock1);
      assertFalse(boolean0);
      
      labelBlock0.getURLText();
      labelBlock0.setPaint(color0);
      assertTrue(labelBlock0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("3nx!l}Lv");
      Font font0 = mock(Font.class, new ViolatedAssumptionAnswer());
      labelBlock0.setFont(font0);
      Font font1 = mock(Font.class, new ViolatedAssumptionAnswer());
      LabelBlock labelBlock1 = new LabelBlock("!O#`1(9n\"QCz3U>p", font1, labelBlock0.DEFAULT_PAINT);
      BlockFrame blockFrame0 = labelBlock0.getFrame();
      labelBlock0.equals(labelBlock1);
      labelBlock1.setFrame(blockFrame0);
      boolean boolean0 = labelBlock0.equals(labelBlock1);
      assertFalse(boolean0);
      
      labelBlock1.getPaint();
      Object object0 = labelBlock1.clone();
      assertTrue(object0.equals((Object)labelBlock1));
  }
}
