/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:02:57 GMT 2023
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LegendItemCollection_ESTest extends LegendItemCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      legendItemCollection0.add((LegendItem) null);
      int int0 = legendItemCollection0.getItemCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      // Undeclared exception!
      try { 
        legendItemCollection0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      // Undeclared exception!
      try { 
        legendItemCollection0.addAll((LegendItemCollection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.LegendItemCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      LegendItemCollection legendItemCollection1 = (LegendItemCollection)legendItemCollection0.clone();
      legendItemCollection1.add((LegendItem) null);
      boolean boolean0 = legendItemCollection0.equals(legendItemCollection1);
      assertFalse(legendItemCollection1.equals((Object)legendItemCollection0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      boolean boolean0 = legendItemCollection0.equals(legendItemCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      int int0 = legendItemCollection0.getItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      // Undeclared exception!
      try { 
        legendItemCollection0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      legendItemCollection0.add((LegendItem) null);
      LegendItem legendItem0 = legendItemCollection0.get(0);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      Object object0 = legendItemCollection0.clone();
      boolean boolean0 = legendItemCollection0.equals(object0);
      assertNotSame(object0, legendItemCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      legendItemCollection0.addAll(legendItemCollection0);
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      Iterator iterator0 = legendItemCollection0.iterator();
      boolean boolean0 = legendItemCollection0.equals(iterator0);
      assertFalse(boolean0);
  }
}
