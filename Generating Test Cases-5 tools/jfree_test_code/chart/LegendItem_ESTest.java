/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:40:12 GMT 2023
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.text.AttributedCharacterIterator;
import java.text.AttributedString;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.LegendItem;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.jfree.data.general.Dataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LegendItem_ESTest extends LegendItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("transformer", paint0);
      legendItem0.getDataset();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint1);
      LegendItem legendItem1 = (LegendItem)legendItem0.clone();
      legendItem1.setSeriesIndex((-2));
      legendItem0.equals(legendItem1);
      legendItem0.setDataset((Dataset) null);
      Paint paint2 = null;
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem2 = null;
      try {
        legendItem2 = new LegendItem((AttributedString) null, "transformer", "transformer", "A(<.gEs:w'4 Dzse", (Shape) null, (Paint) null, stroke0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("transformer", paint0);
      legendItem0.getDataset();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint1);
      LegendItem legendItem1 = (LegendItem)legendItem0.clone();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem1.setOutlineStroke(stroke0);
      legendItem0.equals(legendItem1);
      legendItem0.setDataset((Dataset) null);
      Paint paint2 = null;
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem2 = null;
      try {
        legendItem2 = new LegendItem((AttributedString) null, "transformer", "transformer", "A(<.gEs:w'4 rzse", (Shape) null, (Paint) null, stroke1, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("transformer", paint0);
      legendItem0.getDataset();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint1);
      legendItem0.equals(legendItem0);
      legendItem0.setDataset((Dataset) null);
      Paint paint2 = null;
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem1 = null;
      try {
        legendItem1 = new LegendItem((AttributedString) null, "transformer", "transformer", "A(<.gEs:w'4 rzse", (Shape) null, (Paint) null, stroke0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("org.jfree.data.general.AbstractSeriesDataset");
      LegendItem legendItem1 = (LegendItem)legendItem0.clone();
      legendItem0.setDescription("org.jfree.data.general.AbstractSeriesDataset");
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLabelPaint(paint0);
      legendItem0.setToolTipText("*5?=Rbf}nxLPH'O,/y");
      legendItem0.getAttributedLabel();
      legendItem0.setDatasetIndex(421);
      legendItem0.setShapeVisible(false);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      legendItem0.setSeriesKey(comparable0);
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      legendItem0.setShape(shape0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlinePaint(paint1);
      LegendItem legendItem2 = (LegendItem)legendItem0.clone();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem2.setLineStroke(stroke0);
      Color color0 = (Color)legendItem0.getFillPaint();
      legendItem0.setOutlinePaint(color0);
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      legendItem0.setShape(shape1);
      legendItem0.setSeriesIndex(0);
      legendItem0.setLabelPaint(color0);
      legendItem0.setDatasetIndex(0);
      legendItem0.getLabel();
      LegendItem legendItem3 = (LegendItem)legendItem2.clone();
      legendItem1.equals(legendItem3);
      LegendItem legendItem4 = (LegendItem)legendItem1.clone();
      legendItem0.equals(legendItem4);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn('a').when(attributedCharacterIterator0).first();
      doReturn(1062).when(attributedCharacterIterator0).getBeginIndex();
      doReturn(1784).when(attributedCharacterIterator0).getEndIndex();
      doReturn('a', 'a', 'a', 'a', 'a').when(attributedCharacterIterator0).next();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0).when(attributedString0).getIterator();
      String string0 = "fillPaint";
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem(attributedString0, "fillPaint", "fillPaint", (String) null, shape0, paint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 722
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn('a').when(attributedCharacterIterator0).first();
      doReturn(5).when(attributedCharacterIterator0).getBeginIndex();
      doReturn(3008).when(attributedCharacterIterator0).getEndIndex();
      doReturn('a', 'a', 'a', 'a', 'a').when(attributedCharacterIterator0).next();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0).when(attributedString0).getIterator();
      String string0 = "jNeFwMzCs";
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem(attributedString0, "$J", "jNeFwMzCs", "jNeFwMzCs", shape0, paint0, stroke0, paint1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3003
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn(2036).when(attributedCharacterIterator0).getBeginIndex();
      doReturn(2036).when(attributedCharacterIterator0).getEndIndex();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0).when(attributedString0).getIterator();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem(attributedString0, "fillPaint", "fillPaint", (String) null, shape0, paint0);
      legendItem0.setLineVisible(true);
      legendItem0.getSeriesIndex();
      Paint paint1 = legendItem0.getLinePaint();
      legendItem0.setLabelPaint(paint1);
      legendItem0.setSeriesIndex(0);
      legendItem0.getSeriesKey();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(shape1).toString();
      legendItem0.setShape(shape1);
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setLabelPaint(paint1);
      legendItem0.setLineStroke(stroke0);
      legendItem0.getShape();
      legendItem0.getLabelFont();
      legendItem0.getDataset();
      legendItem0.setDataset((Dataset) null);
      legendItem0.getLabelFont();
      legendItem0.setSeriesIndex(0);
      legendItem0.isLineVisible();
      legendItem0.getDatasetIndex();
      legendItem0.isShapeVisible();
      legendItem0.setDatasetIndex((-1685));
      legendItem0.getLine();
      legendItem0.getLabel();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlineStroke(stroke1);
      legendItem0.getLabelPaint();
      legendItem0.getShape();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("org.jfree.data.general.DatasetGroup", "F~Dd[J|ai y`Ki7y]$", "name", "'maxX' cannot be INF or NaN.", shape0, paint0, stroke0, paint0);
      legendItem0.setDatasetIndex((-1549));
      legendItem0.clone();
      legendItem0.getSeriesIndex();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint1);
      legendItem0.setDescription("wRQ=l7wXz/8(H};");
      legendItem0.getAttributedLabel();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem1 = new LegendItem("", ";hOY:){#", ";hOY:){#", "org.jfree.data.general.DatasetGroup", shape1, paint2);
      legendItem1.setToolTipText("5i&1s:/}XR>tR$JS.sY");
      legendItem1.equals(legendItem0);
      legendItem0.equals(legendItem1);
      legendItem1.isShapeOutlineVisible();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("transformer", paint0);
      legendItem0.setURLText("GradientPaintTransformType.HORIZONTAL");
      legendItem0.getDataset();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint1);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint2);
      LegendItem legendItem1 = new LegendItem("transformer");
      legendItem0.equals(legendItem1);
      legendItem0.setDataset((Dataset) null);
      Paint paint3 = null;
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem2 = null;
      try {
        legendItem2 = new LegendItem((AttributedString) null, "transformer", "transformer", "A(<.gEs:w'4 rzse", (Shape) null, (Paint) null, stroke0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shape0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("Zu%V", "Zu%V", "org.jfree.chart.LegendItem", "fillPaint", true, shape0, true, paint0, true, paint0, stroke0, true, shape0, stroke0, paint0);
      legendItem0.setSeriesIndex(645);
      legendItem0.setURLText("fillPaint");
      legendItem0.getShape();
      legendItem0.getSeriesIndex();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn('a').when(attributedCharacterIterator0).first();
      doReturn((-2239)).when(attributedCharacterIterator0).getBeginIndex();
      doReturn((-455)).when(attributedCharacterIterator0).getEndIndex();
      doReturn('a', 'a', 'a', 'a', 'a').when(attributedCharacterIterator0).next();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0).when(attributedString0).getIterator();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem(attributedString0, ",_E4", ",_E4", ",_E4", false, shape0, false, paint0, false, paint0, stroke0, false, shape0, stroke0, paint1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1784
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn((-15)).when(attributedCharacterIterator0).getBeginIndex();
      doReturn((-2672)).when(attributedCharacterIterator0).getEndIndex();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0).when(attributedString0).getIterator();
      Shape shape0 = null;
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem(attributedString0, "shape", "shape", "shape", (Shape) null, paint0, stroke0, paint0);
      legendItem0.getToolTipText();
      AttributedString attributedString1 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem1 = null;
      try {
        legendItem1 = new LegendItem(attributedString1, "shape", "", "^xt", true, (Shape) null, true, paint1, true, paint1, stroke1, false, (Shape) null, stroke1, paint1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'line' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null, (Map) null, (Map) null, (Map) null).when(attributedCharacterIterator0).getAttributes();
      doReturn(0, 0, 0, 0).when(attributedCharacterIterator0).getRunLimit();
      doReturn('a', 'a', 'a', 'a').when(attributedCharacterIterator0).first();
      doReturn(0).when(attributedCharacterIterator0).getBeginIndex();
      doReturn(0).when(attributedCharacterIterator0).getEndIndex();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0, (AttributedCharacterIterator) null, (AttributedCharacterIterator) null, (AttributedCharacterIterator) null, (AttributedCharacterIterator) null).when(attributedString0).getIterator();
      String string0 = "org.jfree.data.general.TestIntervalCategoryDataset";
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem(attributedString0, "org.jfree.data.general.TestIntervalCategoryDataset", ">", "lineStroke", shape0, stroke0, paint0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLinePaint(paint1);
      LegendItem legendItem1 = (LegendItem)legendItem0.clone();
      // Undeclared exception!
      try { 
        legendItem0.equals(legendItem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.AttributedStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn(1418).when(attributedCharacterIterator0).getBeginIndex();
      doReturn(1418).when(attributedCharacterIterator0).getEndIndex();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0).when(attributedString0).getIterator();
      String string0 = "";
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem(attributedString0, "", "", "", shape0, paint0);
      // Undeclared exception!
      try { 
        legendItem0.setOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(attributedCharacterIterator0).getBeginIndex();
      doReturn(0).when(attributedCharacterIterator0).getEndIndex();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0).when(attributedString0).getIterator();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem(attributedString0, "F$~>jt1QE+\"}s", "F$~>jt1QE+\"}s", "F$~>jt1QE+\"}s", shape0, paint0, stroke0, paint0);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlineStroke(stroke1);
      legendItem0.getURLText();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("", "", "", ")ih[?0", shape0, stroke0, paint0);
      legendItem0.setSeriesIndex(1921);
      legendItem0.isLineVisible();
      legendItem0.setDatasetIndex(1921);
      legendItem0.isShapeFilled();
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(attributedCharacterIterator0).getBeginIndex();
      doReturn(0).when(attributedCharacterIterator0).getEndIndex();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0).when(attributedString0).getIterator();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Shape shape2 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shape2).toString();
      LegendItem legendItem1 = new LegendItem(attributedString0, "", "Y(bApCOL7[{#!p68I`", "", true, shape1, false, paint1, false, paint1, stroke1, true, shape2, stroke1, paint1);
      legendItem1.getLabelFont();
      legendItem0.setLabelFont((Font) null);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint2);
      legendItem0.getOutlineStroke();
      Paint paint3 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLabelPaint(paint3);
      legendItem1.getLine();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(attributedCharacterIterator0).getBeginIndex();
      doReturn(0).when(attributedCharacterIterator0).getEndIndex();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(attributedString0).toString();
      doReturn(attributedCharacterIterator0).when(attributedString0).getIterator();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shape0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem(attributedString0, ",_E4", ",_E4", ",_E4", false, shape0, false, paint0, false, paint0, stroke0, false, shape0, stroke0, paint1);
      legendItem0.getLabelFont();
      legendItem0.setShapeVisible(true);
      legendItem0.setLabelFont((Font) null);
      legendItem0.getDataset();
      legendItem0.getAttributedLabel();
      legendItem0.getShape();
      legendItem0.getAttributedLabel();
      legendItem0.getDataset();
      legendItem0.setDataset((Dataset) null);
      legendItem0.setShapeVisible(false);
      legendItem0.setDataset((Dataset) null);
      legendItem0.setShapeVisible(false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null, (Map) null, (Map) null, (Map) null, (Map) null).when(attributedCharacterIterator0).getAttributes();
      doReturn(0, 0, 0, 0, 0).when(attributedCharacterIterator0).getRunLimit();
      doReturn('a', 'a', 'a', 'a').when(attributedCharacterIterator0).first();
      doReturn(0).when(attributedCharacterIterator0).getBeginIndex();
      doReturn(0).when(attributedCharacterIterator0).getEndIndex();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0, (AttributedCharacterIterator) null, (AttributedCharacterIterator) null, (AttributedCharacterIterator) null, (AttributedCharacterIterator) null).when(attributedString0).getIterator();
      String string0 = "org.jfree.data.general.TestIntervalCategoryDataset";
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem(attributedString0, "org.jfree.data.general.TestIntervalCategoryDataset", ">", "lineStroke", shape0, stroke0, paint0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLinePaint(paint1);
      Object object0 = legendItem0.clone();
      // Undeclared exception!
      legendItem0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(attributedCharacterIterator0).getBeginIndex();
      doReturn(0).when(attributedCharacterIterator0).getEndIndex();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0).when(attributedString0).getIterator();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shape0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem(attributedString0, "fillPaint", "label", "label", false, shape0, false, paint0, false, paint0, stroke0, true, shape0, stroke0, paint0);
      legendItem0.setToolTipText("");
      legendItem0.setURLText("fillPaint");
      legendItem0.isShapeVisible();
      legendItem0.getShape();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(attributedCharacterIterator0).getBeginIndex();
      doReturn(0).when(attributedCharacterIterator0).getEndIndex();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0).when(attributedString0).getIterator();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem(attributedString0, "", "", "org.jfree.chart.StandardChartTheme", shape0, stroke0, paint0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlinePaint(paint1);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLinePaint(paint2);
      legendItem0.setToolTipText("offset");
      legendItem0.getLabelFont();
      legendItem0.setLabelFont((Font) null);
      legendItem0.setURLText("\u0006G");
      Paint paint3 = legendItem0.getFillPaint();
      legendItem0.getDataset();
      legendItem0.setDataset((Dataset) null);
      legendItem0.setFillPaint(paint3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(attributedCharacterIterator0).getBeginIndex();
      doReturn(0).when(attributedCharacterIterator0).getEndIndex();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0).when(attributedString0).getIterator();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem(attributedString0, (String) null, "-<r", "-<r", shape0, paint0);
      legendItem0.clone();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setDescription((String) null);
      legendItem0.setFillPaint(paint1);
      legendItem0.getSeriesKey();
      // Undeclared exception!
      try { 
        legendItem0.setLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("@PS=R;4", "]=d84zt++a", "", "", shape0, paint0);
      legendItem0.getDataset();
      legendItem0.setDataset((Dataset) null);
      legendItem0.setLineVisible(true);
      legendItem0.setSeriesKey("]=d84zt++a");
      legendItem0.setSeriesKey("@PS=R;4");
      legendItem0.setURLText("");
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlineStroke(stroke0);
      legendItem0.setDatasetIndex(0);
      legendItem0.isLineVisible();
      legendItem0.setToolTipText("@PS=R;4");
      legendItem0.setToolTipText("");
      legendItem0.getToolTipText();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setLineStroke(stroke1);
      legendItem0.setToolTipText("_9@");
      legendItem0.setURLText((String) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("", (String) null, "", (String) null, shape0, stroke0, paint0);
      legendItem0.equals((Object) null);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlineStroke(stroke1);
      legendItem0.setSeriesKey((Comparable) null);
      legendItem0.setToolTipText("");
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      legendItem0.setURLText("");
      legendItem0.setDescription("");
      legendItem0.setShape(shape1);
      legendItem0.setSeriesIndex((-3033));
      legendItem0.getLabelFont();
      legendItem0.getDatasetIndex();
      Paint paint1 = legendItem0.getFillPaint();
      legendItem0.setLabelFont((Font) null);
      legendItem0.setLinePaint(paint1);
      Shape shape2 = mock(Shape.class, new ViolatedAssumptionAnswer());
      legendItem0.setShape(shape2);
      legendItem0.setSeriesKey((Comparable) null);
      legendItem0.getSeriesIndex();
      legendItem0.setShapeVisible(true);
      legendItem0.getLabelFont();
      legendItem0.getSeriesIndex();
      legendItem0.setFillPaint(paint1);
      legendItem0.getLineStroke();
      legendItem0.getLabelFont();
      legendItem0.getAttributedLabel();
      legendItem0.setDatasetIndex((-2550));
      legendItem0.setSeriesIndex(2526);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = null;
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("", "EuyhMxzNJJ{)}L", (String) null, "#{x?X>mDbF,+j:>}", shape0, paint0, stroke0, paint0);
      int int0 = 694;
      legendItem0.getSeriesIndex();
      legendItem0.setSeriesKey(0);
      legendItem0.setLineVisible(true);
      legendItem0.setSeriesIndex(694);
      legendItem0.setShapeVisible(true);
      legendItem0.getLinePaint();
      legendItem0.isShapeVisible();
      Object object0 = legendItem0.clone();
      GradientPaintTransformer gradientPaintTransformer0 = legendItem0.getFillPaintTransformer();
      legendItem0.setFillPaintTransformer(gradientPaintTransformer0);
      legendItem0.equals(object0);
      legendItem0.getToolTipText();
      legendItem0.getLabelPaint();
      // Undeclared exception!
      try { 
        legendItem0.setLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("'maxY' cannot be INF or NaN.", "'maxY' cannot be INF or NaN.", "_JQWTX]wnd%-", "_JQWTX]wnd%-", shape0, paint0);
      legendItem0.getDataset();
      legendItem0.setDataset((Dataset) null);
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem1 = new LegendItem("_JQWTX]wnd%-", "Y3{Z`azhB", "_JQWTX]wnd%-", "", false, shape1, false, paint1, true, paint1, stroke0, true, shape1, stroke0, paint1);
      legendItem0.equals(legendItem1);
      legendItem0.setLineVisible(false);
      legendItem0.getLineStroke();
      legendItem0.getLabelFont();
      legendItem0.setLineVisible(false);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint2);
      Shape shape2 = mock(Shape.class, new ViolatedAssumptionAnswer());
      legendItem1.setLine(shape2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("", "uK;962P>pd^$>S", "uK;962P>pd^$>S", "uK;962P>pd^$>S", (Shape) null, paint0, stroke0, paint0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLabelPaint(paint1);
      legendItem0.setShapeVisible(false);
      legendItem0.isShapeFilled();
      legendItem0.setSeriesKey("uK;962P>pd^$>S");
      legendItem0.getDataset();
      legendItem0.setDataset((Dataset) null);
      // Undeclared exception!
      try { 
        legendItem0.setShape((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("key");
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlineStroke(stroke0);
      legendItem0.setLine(shape0);
      legendItem0.getURLText();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlinePaint(paint0);
      legendItem0.getSeriesIndex();
      legendItem0.getLinePaint();
      legendItem0.getDataset();
      Object object0 = legendItem0.clone();
      legendItem0.equals(object0);
      legendItem0.setDataset((Dataset) null);
      Paint paint1 = legendItem0.getFillPaint();
      legendItem0.getDatasetIndex();
      legendItem0.getLineStroke();
      legendItem0.setOutlinePaint(paint1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shape0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("", "org.jfree.data.general.WaferMapDataset", "", "org.jfree.data.general.AbstractSeriesDataset", shape0, stroke0, paint0);
      legendItem0.setSeriesKey("");
      legendItem0.clone();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlineStroke(stroke1);
      legendItem0.equals("org.jfree.data.general.WaferMapDataset");
      legendItem0.setToolTipText("");
      legendItem0.getLine();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint1);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlinePaint(paint2);
      // Undeclared exception!
      try { 
        legendItem0.setLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Paint paint0 = null;
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem("; H(/}U ", (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'fillPaint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("", "", "fillPaint", "fillPaint", shape0, stroke0, (Paint) null);
      legendItem0.getLabel();
      legendItem0.equals("");
      legendItem0.getDatasetIndex();
      // Undeclared exception!
      try { 
        legendItem0.setOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shape0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint0).toString();
      LegendItem legendItem0 = new LegendItem("Kd|4", "", "shape", "4", shape0, paint0);
      legendItem0.getLabelFont();
      legendItem0.setLabelFont((Font) null);
      legendItem0.setDescription("Kd|4");
      Object object0 = legendItem0.clone();
      legendItem0.equals(object0);
      legendItem0.getFillPaint();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke0).toString();
      legendItem0.setLineVisible(false);
      legendItem0.setOutlineStroke(stroke0);
      legendItem0.getFillPaintTransformer();
      legendItem0.getSeriesIndex();
      legendItem0.getShape();
      legendItem0.setToolTipText("");
      legendItem0.getOutlineStroke();
      legendItem0.getLineStroke();
      legendItem0.isLineVisible();
      legendItem0.getLineStroke();
      legendItem0.setShapeVisible(false);
      legendItem0.setDatasetIndex(193);
      legendItem0.setURLText("uY<e3c84W%ldO(qO:");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("outlinePaint", "outlinePaint", "", "", false, shape0, false, paint0, false, paint0, stroke0, false, shape0, stroke0, paint0);
      legendItem0.setSeriesIndex(5);
      legendItem0.getDataset();
      legendItem0.setDataset((Dataset) null);
      legendItem0.setSeriesIndex((-146));
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      legendItem0.setLine(shape1);
      legendItem0.isShapeVisible();
      legendItem0.getDataset();
      legendItem0.setDataset((Dataset) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("n9h8/la$u1YNC", paint0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLinePaint(paint2);
      legendItem0.setSeriesIndex(3);
      legendItem0.setOutlinePaint(paint1);
      legendItem0.setSeriesKey("n9h8/la$u1YNC");
      legendItem0.isShapeFilled();
      legendItem0.setToolTipText("n9h8/la$u1YNC");
      legendItem0.setShapeVisible(true);
      legendItem0.getURLText();
      legendItem0.getAttributedLabel();
      legendItem0.getLabelFont();
      legendItem0.setLabelFont((Font) null);
      legendItem0.setURLText("n9h8/la$u1YNC");
      legendItem0.setDatasetIndex((-2891));
      Paint paint3 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlinePaint(paint3);
      legendItem0.setToolTipText("n9h8/la$u1YNC");
      legendItem0.setURLText("n9h8/la$u1YNC");
      legendItem0.setToolTipText((String) null);
      legendItem0.setSeriesIndex((-120));
      legendItem0.isShapeOutlineVisible();
      legendItem0.setLineVisible(true);
      legendItem0.setLabelFont((Font) null);
      legendItem0.getDataset();
      // Undeclared exception!
      try { 
        legendItem0.setLine((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'line' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "D>hq([6'";
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = null;
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem("D>hq([6'", (String) null, (String) null, "outlinePaint", shape0, paint0, (Stroke) null, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'outlineStroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem((AttributedString) null, "u^<->wc\"5g", "Tahoma", "lineStroke", true, shape0, true, (Paint) null, true, (Paint) null, stroke0, true, shape0, stroke0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem((String) null, "transformer", (String) null, "lineStroke", shape0, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("2@SmpGYErY`i }It", "*1", "", "*1", shape0, stroke0, paint0);
      legendItem0.setDatasetIndex((-3289));
      legendItem0.setLineVisible(true);
      legendItem0.setSeriesIndex((-3289));
      legendItem0.getLabelPaint();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        legendItem0.setFillPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "Requires 'xSamples' > 0";
      String string1 = "wp@#eU?7^^b)aMU";
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("dJV:", "dJV:", "Requires 'xSamples' > 0", "wp@#eU?7^^b)aMU", shape0, paint0);
      legendItem0.setSeriesIndex((-1));
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLinePaint(paint1);
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.equals("dJV:");
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      legendItem0.setSeriesIndex(1261);
      legendItem0.setShape(shape1);
      legendItem0.setOutlineStroke(stroke0);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLabelPaint(paint2);
      // Undeclared exception!
      try { 
        legendItem0.setFillPaintTransformer((GradientPaintTransformer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'transformer' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("@RA[IWB?n*U77", paint0);
      Object object0 = legendItem0.clone();
      legendItem0.equals(object0);
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint1).toString();
      legendItem0.getLabelFont();
      legendItem0.setLabelFont((Font) null);
      legendItem0.setLabelPaint(paint1);
      legendItem0.setShapeVisible(true);
      legendItem0.setShape(shape0);
      legendItem0.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke0).toString();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("", "", (String) null, (String) null, false, (Shape) null, true, paint0, false, paint0, stroke0, false, (Shape) null, stroke1, paint1);
      legendItem0.setDatasetIndex((-1));
      legendItem0.getDescription();
      legendItem0.getSeriesIndex();
      legendItem0.getOutlineStroke();
      legendItem0.getOutlinePaint();
      legendItem0.getDatasetIndex();
      legendItem0.setDatasetIndex(352);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("XQy0@)H<vX", "", "XQy0@)H<vX", (String) null, false, shape0, true, paint0, true, paint0, stroke0, true, shape0, stroke0, paint0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLinePaint(paint1);
      legendItem0.getDescription();
      legendItem0.getURLText();
      legendItem0.getSeriesKey();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AttributedString attributedString0 = null;
      String string0 = "1L;Z4g<ZKG)";
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem((AttributedString) null, "1L;Z4g<ZKG)", "1L;Z4g<ZKG)", "", shape0, stroke0, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("*_<F|RjS 0z9Jp=");
      legendItem0.setShapeVisible(true);
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint0);
      legendItem0.getDataset();
      legendItem0.setDataset((Dataset) null);
      legendItem0.isShapeVisible();
      legendItem0.getURLText();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setLineStroke(stroke0);
      legendItem0.setDataset((Dataset) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("org.jfree.data.general.DatasetGroup", "F~Dd[J|ai y`Ki7y]$", "name", "'maxX' cannot be INF or NaN.", shape0, paint0, stroke0, paint0);
      legendItem0.setDatasetIndex((-1549));
      legendItem0.clone();
      legendItem0.getSeriesIndex();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint1);
      legendItem0.setDescription("wRQ=l7wXz/8(H};");
      legendItem0.getAttributedLabel();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem1 = new LegendItem("", ";hOY:){#", ";hOY:){#", "org.jfree.data.general.DatasetGroup", shape1, paint2);
      legendItem0.equals(legendItem1);
      legendItem1.isShapeOutlineVisible();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("shape");
      legendItem0.setSeriesIndex(0);
      legendItem0.getDatasetIndex();
      legendItem0.setSeriesKey(0);
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlineStroke(stroke0);
      legendItem0.getURLText();
      legendItem0.setURLText("shape");
      legendItem0.getSeriesKey();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem(":'o}0S>UHZ<B)CJ]JH", ":'o}0S>UHZ<B)CJ]JH", "0xA9A938", ":'o}0S>UHZ<B)CJ]JH", shape0, stroke0, paint0);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlineStroke(stroke1);
      legendItem0.getLineStroke();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("q%2Lw6Q-@e:.lKg8hp", "y*Xuh{b12xY", "y*Xuh{b12xY", "q%2Lw6Q-@e:.lKg8hp", shape0, stroke0, paint0);
      legendItem0.getURLText();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("X8RfCB", "wUY^Roqb\"i", "", "6G2FEateRE&%',iAr", true, shape0, false, paint0, false, paint0, stroke0, false, shape0, stroke1, paint0);
      legendItem0.getLabel();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("fg('", paint0);
      GradientPaintTransformer gradientPaintTransformer0 = legendItem0.getFillPaintTransformer();
      legendItem0.setFillPaintTransformer(gradientPaintTransformer0);
      legendItem0.setDatasetIndex(4450);
      legendItem0.getLabelFont();
      legendItem0.getDataset();
      legendItem0.setDataset((Dataset) null);
      legendItem0.getDatasetIndex();
      legendItem0.getLabelFont();
      legendItem0.getDescription();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shape0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("UQ`", "org.jfree.data.category.DefaultCategoryDataset", "org.jfree.data.category.DefaultCategoryDataset", "", shape0, paint0, stroke0, paint0);
      legendItem0.setDescription("org.jfree.data.category.DefaultCategoryDataset");
      legendItem0.getDataset();
      legendItem0.clone();
      legendItem0.setDataset((Dataset) null);
      Shape shape1 = legendItem0.getShape();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlineStroke(stroke1);
      legendItem0.getDatasetIndex();
      legendItem0.isShapeFilled();
      legendItem0.getToolTipText();
      legendItem0.setSeriesKey("org.jfree.data.category.DefaultCategoryDataset");
      legendItem0.setShapeVisible(true);
      legendItem0.equals(shape1);
      legendItem0.setLine(shape1);
      legendItem0.setURLText("");
      legendItem0.setDatasetIndex(0);
      legendItem0.setSeriesIndex(0);
      legendItem0.isShapeOutlineVisible();
      legendItem0.getFillPaint();
      Paint paint1 = legendItem0.getLinePaint();
      legendItem0.setLabelPaint(paint1);
      legendItem0.isLineVisible();
      legendItem0.setDatasetIndex(0);
      legendItem0.getSeriesIndex();
      legendItem0.getDatasetIndex();
      // Undeclared exception!
      try { 
        legendItem0.setOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "";
      Shape shape0 = null;
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem("", "", "s?c[6)", "", (Shape) null, (Stroke) null, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'lineStroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("'minY' cannot be INF or NaN.");
      legendItem0.setToolTipText("");
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlineStroke(stroke0);
      legendItem0.setSeriesIndex((-1536));
      legendItem0.getLinePaint();
      legendItem0.getDataset();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("@c(-l", "", "@c(-l", "", shape0, stroke0, paint0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLabelPaint(paint1);
      legendItem0.getDataset();
      legendItem0.setDataset((Dataset) null);
      legendItem0.getDescription();
      legendItem0.getSeriesIndex();
      legendItem0.getFillPaint();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("", "stroke", "stroke", "", shape0, paint0);
      legendItem0.setDatasetIndex((-1766));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "offset";
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = null;
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem("offset", "offset", "%0u=8RB/\"Q4H", ",", true, shape0, true, paint0, true, paint0, stroke0, false, shape0, (Stroke) null, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'lineStroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "}XT?xn}G'";
      Shape shape0 = null;
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem((AttributedString) null, "ZlxvN(Sh0hEy", "}XT?xn}G'", "he^.@?^X|`YHr/y9", (Shape) null, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn((AttributedCharacterIterator) null).when(attributedString0).getIterator();
      String string0 = "";
      boolean boolean0 = true;
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem(attributedString0, (String) null, (String) null, "", true, shape0, true, paint0, true, paint0, stroke0, true, shape0, stroke1, paint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("8'efm^v4H[{", "5o", "", "5o", shape0, stroke0, paint0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint1);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint2);
      legendItem0.setSeriesIndex(0);
      legendItem0.setURLText("8'efm^v4H[{");
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlineStroke(stroke1);
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn((AttributedCharacterIterator) null).when(attributedString0).getIterator();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint3 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke2 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem1 = null;
      try {
        legendItem1 = new LegendItem(attributedString0, "id", "8'efm^v4H[{", "id", shape1, paint3, stroke2, paint3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("paint", paint0);
      legendItem0.equals("paint");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("", "", "^D@HN0]w<\"ps", "^D@HN0]w<\"ps", true, shape0, false, paint0, false, paint0, stroke0, false, shape0, stroke0, paint0);
      GradientPaintTransformer gradientPaintTransformer0 = legendItem0.getFillPaintTransformer();
      legendItem0.setFillPaintTransformer(gradientPaintTransformer0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("=|d ruxKl-^DL.6Bz", paint0);
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shape0).toString();
      legendItem0.setShapeVisible(false);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLinePaint(paint1);
      legendItem0.setShape(shape0);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLinePaint(paint2);
      legendItem0.getToolTipText();
      legendItem0.getSeriesKey();
      legendItem0.getToolTipText();
      legendItem0.getSeriesKey();
      legendItem0.getSeriesIndex();
      legendItem0.setToolTipText("=|d ruxKl-^DL.6Bz");
      legendItem0.getLine();
      legendItem0.getShape();
      legendItem0.getDataset();
      legendItem0.setDataset((Dataset) null);
      legendItem0.setDescription("=|d ruxKl-^DL.6Bz");
      legendItem0.setURLText("");
      legendItem0.getURLText();
      legendItem0.isShapeFilled();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("TN{QA5;@?n]i", "TN{QA5;@?n]i", "", "", false, shape0, false, paint0, false, paint0, stroke0, false, shape0, stroke0, paint0);
      legendItem0.getDataset();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("", "", "Legacy", "", shape0, paint0);
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlineStroke(stroke0);
      legendItem0.getDescription();
      legendItem0.getLabel();
      legendItem0.setDescription("");
      legendItem0.isShapeFilled();
      legendItem0.isShapeOutlineVisible();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn((AttributedCharacterIterator) null).when(attributedString0).getIterator();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem(attributedString0, ">,HC+", ">,HC+", ">,HC+", shape0, paint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("s|~", "z~J2cP%Sv", "s|~", "s3DGB", shape0, stroke0, paint0);
      legendItem0.isLineVisible();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint1);
      legendItem0.getLabelFont();
      legendItem0.setLineVisible(false);
      legendItem0.isShapeOutlineVisible();
      legendItem0.setDescription("s|~");
      Stroke stroke1 = legendItem0.getOutlineStroke();
      legendItem0.isShapeOutlineVisible();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn((AttributedCharacterIterator) null).when(attributedString0).getIterator();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem1 = null;
      try {
        legendItem1 = new LegendItem(attributedString0, "s|~", "s3DGB", "_4y4z[?", shape1, stroke1, paint2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem(attributedString0, "", "", "", shape0, paint0, (Stroke) null, paint1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'outlineStroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("", "b/4-#/Ee", "z wNTJ[lx,o[*Nyfwa", "z wNTJ[lx,o[*Nyfwa", shape0, paint0, stroke0, paint0);
      legendItem0.setToolTipText("stroke");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("");
      legendItem0.getOutlineStroke();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("", paint0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlinePaint(paint1);
      GradientPaintTransformer gradientPaintTransformer0 = legendItem0.getFillPaintTransformer();
      legendItem0.setFillPaintTransformer(gradientPaintTransformer0);
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      legendItem0.setLine(shape0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shape0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("XYhU&MGfU5%Z", "XYhU&MGfU5%Z", "XYhU&MGfU5%Z", "p^(56", shape0, paint0);
      legendItem0.getShape();
      Paint paint1 = legendItem0.getOutlinePaint();
      legendItem0.getAttributedLabel();
      legendItem0.setLabelPaint(paint1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("");
      legendItem0.isShapeOutlineVisible();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem(" g@vg-,k'J'", paint0);
      legendItem0.getURLText();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("Requires 'ySamples' > 0", "Requires 'ySamples' > 0", "Requires 'ySamples' > 0", "Requires 'ySamples' > 0", shape0, stroke0, paint0);
      legendItem0.setSeriesIndex(1395);
      legendItem0.getLabelFont();
      legendItem0.setLabelFont((Font) null);
      legendItem0.equals("Requires 'ySamples' > 0");
      legendItem0.isShapeFilled();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn('\"').when(attributedCharacterIterator0).first();
      doReturn((-2239)).when(attributedCharacterIterator0).getBeginIndex();
      doReturn((-455)).when(attributedCharacterIterator0).getEndIndex();
      doReturn('\"', '\"', 'Z', 'Z', '*').when(attributedCharacterIterator0).next();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0).when(attributedString0).getIterator();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem(attributedString0, ",_E4", ",_E4", ",_E4", false, shape0, false, paint0, false, paint0, stroke0, false, shape0, stroke0, paint1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1784
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("Requires 'xSamples' > 0", "Requires 'xSamples' > 0", "'maxY' cannot be INF or NaN.", "'maxY' cannot be INF or NaN.", shape0, paint0, stroke0, paint0);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke1).toString();
      legendItem0.setSeriesKey("'maxY' cannot be INF or NaN.");
      legendItem0.setOutlineStroke(stroke1);
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shape1).toString();
      legendItem0.setShape(shape1);
      legendItem0.setLineVisible(true);
      legendItem0.getLabelPaint();
      legendItem0.setURLText("+z^8oM07wF1Er^SmJ");
      legendItem0.setDatasetIndex(7);
      legendItem0.getShape();
      legendItem0.getLabelPaint();
      legendItem0.equals((Object) null);
      Object object0 = legendItem0.clone();
      Stroke stroke2 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setLineStroke(stroke2);
      legendItem0.setDataset((Dataset) null);
      legendItem0.getLine();
      legendItem0.equals(object0);
      legendItem0.getLabelPaint();
      legendItem0.clone();
      legendItem0.getLabel();
      legendItem0.getLabelFont();
      legendItem0.getOutlineStroke();
      legendItem0.getFillPaintTransformer();
      legendItem0.getLabelFont();
      legendItem0.getLine();
      legendItem0.getFillPaint();
      legendItem0.getOutlinePaint();
      legendItem0.equals("x|9vfaZ.,hl`4");
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("transformer", paint0);
      legendItem0.getDataset();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setFillPaint(paint1);
      Object object0 = legendItem0.clone();
      legendItem0.equals(object0);
      legendItem0.setDataset((Dataset) null);
      Paint paint2 = null;
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem1 = null;
      try {
        legendItem1 = new LegendItem((AttributedString) null, "transformer", "transformer", "A(<.gEs:w'4 rzse", (Shape) null, (Paint) null, stroke0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem(":$+", ":$+", ":$+", ":$+", shape0, paint0);
      legendItem0.setSeriesKey("\"gQtI}PjluMqa4(");
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLabelPaint(paint1);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setURLText("\"gQtI}PjluMqa4(");
      legendItem0.setOutlinePaint(paint2);
      legendItem0.setDescription("\"gQtI}PjluMqa4(");
      legendItem0.isShapeFilled();
      legendItem0.getDataset();
      legendItem0.setDataset((Dataset) null);
      legendItem0.getSeriesKey();
      Stroke stroke0 = legendItem0.getLineStroke();
      legendItem0.setOutlineStroke(stroke0);
      legendItem0.setDataset((Dataset) null);
      legendItem0.getToolTipText();
      legendItem0.getDescription();
      legendItem0.getDatasetIndex();
      legendItem0.setSeriesIndex((-483));
      legendItem0.setLineStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn((AttributedCharacterIterator) null).when(attributedString0).getIterator();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem(attributedString0, "updateValue: can't update null.", "updateValue: can't update null.", "", true, shape0, true, paint0, true, paint0, stroke0, true, shape0, stroke0, paint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("org.jfree.chart.ui.StandardGradientPaintTransformer");
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn("djvs[5Wc4drzqRezZS").when(stroke0).toString();
      legendItem0.setLineStroke(stroke0);
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLinePaint(paint0);
      Shape shape0 = legendItem0.getLine();
      legendItem0.getDescription();
      Stroke stroke1 = legendItem0.getLineStroke();
      legendItem0.setLineStroke(stroke1);
      legendItem0.setLineStroke(stroke1);
      legendItem0.getToolTipText();
      legendItem0.getSeriesIndex();
      legendItem0.clone();
      legendItem0.setURLText("org.jfree.chart.ui.StandardGradientPaintTransformer");
      legendItem0.isShapeVisible();
      GradientPaintTransformer gradientPaintTransformer0 = legendItem0.getFillPaintTransformer();
      legendItem0.getLine();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn("org.jfree.chart.ui.StandardGradientPaintTransformer").when(paint1).toString();
      legendItem0.setLinePaint(paint1);
      Paint paint2 = legendItem0.getFillPaint();
      legendItem0.setFillPaint(paint2);
      legendItem0.getShape();
      legendItem0.getDataset();
      legendItem0.setLine(shape0);
      legendItem0.setFillPaintTransformer(gradientPaintTransformer0);
      legendItem0.setSeriesIndex(0);
      legendItem0.getShape();
      legendItem0.getLabel();
      legendItem0.getSeriesKey();
      legendItem0.setURLText("org.jfree.chart.ui.StandardGradientPaintTransformer");
      legendItem0.getLabelFont();
      legendItem0.getLine();
      legendItem0.setLineVisible(true);
      legendItem0.isShapeOutlineVisible();
      legendItem0.getLinePaint();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem("0x6681CC", "0x6681CC", "0x6681CC", "0x6681CC", true, shape0, true, paint0, true, paint0, stroke0, true, shape0, stroke0, paint0);
      assertNotNull(legendItem0);
      assertEquals("0x6681CC", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("0x6681CC", legendItem0.getToolTipText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("0x6681CC", legendItem0.getDescription());
      assertEquals("0x6681CC", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setSeriesIndex(0);
      assertEquals("0x6681CC", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("0x6681CC", legendItem0.getToolTipText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("0x6681CC", legendItem0.getDescription());
      assertEquals("0x6681CC", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      
      legendItem0.setLineStroke(stroke1);
      assertEquals("0x6681CC", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("0x6681CC", legendItem0.getToolTipText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("0x6681CC", legendItem0.getDescription());
      assertEquals("0x6681CC", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      
      legendItem0.setShapeVisible(true);
      assertEquals("0x6681CC", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("0x6681CC", legendItem0.getToolTipText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("0x6681CC", legendItem0.getDescription());
      assertEquals("0x6681CC", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      
      legendItem0.setShapeVisible(true);
      assertEquals("0x6681CC", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("0x6681CC", legendItem0.getToolTipText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("0x6681CC", legendItem0.getDescription());
      assertEquals("0x6681CC", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      legendItem0.setShape(shape1);
      assertEquals("0x6681CC", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("0x6681CC", legendItem0.getToolTipText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("0x6681CC", legendItem0.getDescription());
      assertEquals("0x6681CC", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      legendItem0.setLinePaint(paint1);
      assertEquals("0x6681CC", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("0x6681CC", legendItem0.getToolTipText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("0x6681CC", legendItem0.getDescription());
      assertEquals("0x6681CC", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      
      legendItem0.setDescription("0x6681CC");
      assertEquals("0x6681CC", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("0x6681CC", legendItem0.getToolTipText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("0x6681CC", legendItem0.getDescription());
      assertEquals("0x6681CC", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      
      legendItem0.setLineVisible(true);
      assertEquals("0x6681CC", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("0x6681CC", legendItem0.getToolTipText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("0x6681CC", legendItem0.getDescription());
      assertEquals("0x6681CC", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      
      boolean boolean0 = legendItem0.isLineVisible();
      assertTrue(boolean0);
      assertEquals("0x6681CC", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("0x6681CC", legendItem0.getToolTipText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("0x6681CC", legendItem0.getDescription());
      assertEquals("0x6681CC", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      
      String string0 = legendItem0.getToolTipText();
      assertNotNull(string0);
      assertEquals("0x6681CC", string0);
      assertEquals("0x6681CC", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("0x6681CC", legendItem0.getToolTipText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("0x6681CC", legendItem0.getDescription());
      assertEquals("0x6681CC", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
      
      LegendItem legendItem1 = (LegendItem)legendItem0.clone();
      assertNotSame(legendItem1, legendItem0);
      assertNotSame(legendItem0, legendItem1);
      assertNotNull(legendItem1);
      assertFalse(legendItem1.equals((Object)legendItem0));
      assertEquals("0x6681CC", legendItem1.getLabel());
      assertEquals(0, legendItem1.getDatasetIndex());
      assertEquals("0x6681CC", legendItem1.getDescription());
      assertEquals(0, legendItem1.getSeriesIndex());
      assertEquals("0x6681CC", legendItem1.getURLText());
      assertTrue(legendItem1.isShapeVisible());
      assertTrue(legendItem1.isShapeOutlineVisible());
      assertTrue(legendItem1.isShapeFilled());
      assertEquals("0x6681CC", legendItem1.getToolTipText());
      assertTrue(legendItem1.isLineVisible());
      assertEquals("0x6681CC", legendItem0.getLabel());
      assertTrue(legendItem0.isShapeVisible());
      assertEquals("0x6681CC", legendItem0.getToolTipText());
      assertTrue(legendItem0.isLineVisible());
      assertEquals(0, legendItem0.getSeriesIndex());
      assertEquals("0x6681CC", legendItem0.getDescription());
      assertEquals("0x6681CC", legendItem0.getURLText());
      assertTrue(legendItem0.isShapeOutlineVisible());
      assertEquals(0, legendItem0.getDatasetIndex());
      assertTrue(legendItem0.isShapeFilled());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      AttributedCharacterIterator attributedCharacterIterator0 = mock(AttributedCharacterIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(attributedCharacterIterator0).getBeginIndex();
      doReturn(0).when(attributedCharacterIterator0).getEndIndex();
      AttributedString attributedString0 = mock(AttributedString.class, new ViolatedAssumptionAnswer());
      doReturn(attributedCharacterIterator0).when(attributedString0).getIterator();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      LegendItem legendItem0 = new LegendItem(attributedString0, "fillPaint", "fillPaint", (String) null, shape0, paint0);
      legendItem0.setLineVisible(true);
      legendItem0.getSeriesIndex();
      Paint paint1 = legendItem0.getLinePaint();
      legendItem0.setLabelPaint(paint1);
      legendItem0.setSeriesIndex(0);
      legendItem0.getSeriesKey();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shape1).toString();
      legendItem0.setShape(shape1);
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setLabelPaint(paint1);
      legendItem0.setLineStroke(stroke0);
      legendItem0.getShape();
      legendItem0.getLabelFont();
      legendItem0.getDataset();
      legendItem0.setDataset((Dataset) null);
      legendItem0.getLabelFont();
      legendItem0.setSeriesIndex(0);
      legendItem0.isLineVisible();
      legendItem0.getDatasetIndex();
      legendItem0.isShapeVisible();
      legendItem0.setDatasetIndex((-1685));
      legendItem0.getLine();
      legendItem0.getLabel();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      legendItem0.setOutlineStroke(stroke1);
      assertEquals((-1685), legendItem0.getDatasetIndex());
  }
}
