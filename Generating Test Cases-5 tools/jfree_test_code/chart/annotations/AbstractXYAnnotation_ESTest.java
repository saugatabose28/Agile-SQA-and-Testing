/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:52:05 GMT 2023
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYDataImageAnnotation;
import org.jfree.chart.annotations.XYDrawableAnnotation;
import org.jfree.chart.annotations.XYImageAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYPolygonAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.annotations.XYTitleAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.title.Title;
import org.jfree.chart.ui.Drawable;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.TextAnchor;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractXYAnnotation_ESTest extends AbstractXYAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("hl[`7M(rxB*S/qI|", (-4235.07058203), (-3158.20863), (-3158.20863));
      Stroke stroke0 = xYPointerAnnotation0.getArrowStroke();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, stroke0, xYPointerAnnotation0.DEFAULT_PAINT);
      xYPointerAnnotation0.setAngle((-1.0));
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(chartRenderingInfo0).when(plotRenderingInfo0).getOwner();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Drawable drawable0 = mock(Drawable.class, new ViolatedAssumptionAnswer());
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(231.20598989, (-1146.170383948), 3.0, 200.0, (-3259.5), drawable0);
      xYDrawableAnnotation0.setNotify(true);
      xYDrawableAnnotation0.equals((Object) null);
      xYPointerAnnotation0.addEntity(plotRenderingInfo0, shape1, 462, "m-%`B", "m-%`B");
      xYPointerAnnotation0.setToolTipText("m-%`B");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYDrawableAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 0, plotRenderingInfo1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation((-2168.8898), (-2671.43459733), title0, rectangleAnchor0);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-2671.43459733), (-2671.43459733), (-2168.8898), (-2168.8898));
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.removeChangeListener(annotationChangeListener0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(chartRenderingInfo0).when(plotRenderingInfo0).getOwner();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.addEntity(plotRenderingInfo0, shape0, (-45), "t", "EVrm4,^3j9 XM");
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("hl[`7M(rxB*S/qI|", (-4235.07058203), (-3158.20863), (-3158.20863));
      Stroke stroke0 = xYPointerAnnotation0.getArrowStroke();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, stroke0, xYPointerAnnotation0.DEFAULT_PAINT);
      xYPointerAnnotation0.setAngle((-1.0));
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(chartRenderingInfo0).when(plotRenderingInfo0).getOwner();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Drawable drawable0 = mock(Drawable.class, new ViolatedAssumptionAnswer());
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(231.20598989, (-1146.170383948), 3.0, 200.0, (-3259.5), drawable0);
      xYDrawableAnnotation0.equals((Object) null);
      xYPointerAnnotation0.addEntity(plotRenderingInfo0, shape1, 462, "m-%`B", "m-%`B");
      xYPointerAnnotation0.setToolTipText("m-%`B");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0);
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(chartRenderingInfo0).when(plotRenderingInfo0).getOwner();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      xYPolygonAnnotation0.addEntity(plotRenderingInfo0, shape0, 0, (String) null, "j7Vg");
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(300.0, 0.0, image0, rectangleAnchor0);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 7.0, 0, 0);
      Stroke stroke0 = xYPointerAnnotation0.getArrowStroke();
      Paint paint0 = xYPointerAnnotation0.getArrowPaint();
      XYShapeAnnotation xYShapeAnnotation0 = null;
      try {
        xYShapeAnnotation0 = new XYShapeAnnotation((Shape) null, stroke0, xYPointerAnnotation0.DEFAULT_PAINT, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("vuAksb1\"+eVa'W H4KU", 1401.761375312, 1.0);
      xYTextAnnotation0.setText("n");
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 0.0, (-1.0), 1.0, 1.0);
      xYDataImageAnnotation0.getWidth();
      xYDataImageAnnotation0.getXRange();
      xYDataImageAnnotation0.getImage();
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(0.0, 1401.761375312, title0, rectangleAnchor0);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.hasListener(eventListener0);
      xYTitleAnnotation0.getY();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("#si2u", 1.0, 1.0, 1.0);
      xYPointerAnnotation0.setTextAnchor(xYTextAnnotation0.DEFAULT_TEXT_ANCHOR);
      xYPointerAnnotation0.setBaseRadius(1.0);
      xYTextAnnotation0.equals(rectangleAnchor0);
      xYPointerAnnotation0.setArrowLength(1089.968970866664);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "d!)[x`t05G_f]!-hjlE";
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("d!)[x`t05G_f]!-hjlE", 0.0, 2204.5309038, 2204.5309038);
      double double0 = 0.0;
      XYPointerAnnotation xYPointerAnnotation1 = new XYPointerAnnotation("d!)[x`t05G_f]!-hjlE", 1161.41, (-3587.324), 0.0);
      xYPointerAnnotation0.equals(xYPointerAnnotation1);
      Paint paint0 = xYPointerAnnotation0.getPaint();
      xYPointerAnnotation0.setOutlinePaint(paint0);
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(2120.437830454156, 2204.5309038, title0, rectangleAnchor0);
      xYPointerAnnotation0.setOutlineVisible(true);
      xYTitleAnnotation0.setMaxHeight(0.0);
      Object object0 = xYPointerAnnotation0.clone();
      xYTitleAnnotation0.equals(object0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation1.setBaseRadius(0.0);
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYPointerAnnotation1.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 193, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Z2d;U=I", 0.0, 0.0, 0.0);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertNotNull(xYPointerAnnotation0);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals("Z2d;U=I", xYPointerAnnotation0.getText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      
      XYPointerAnnotation xYPointerAnnotation1 = (XYPointerAnnotation)xYPointerAnnotation0.clone();
      assertTrue(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotNull(xYPointerAnnotation1);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals("Z2d;U=I", xYPointerAnnotation0.getText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals(0.0, xYPointerAnnotation1.getX(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals(0.0, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals("Z2d;U=I", xYPointerAnnotation1.getText());
      
      xYPointerAnnotation0.setURL("yyyy");
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals("Z2d;U=I", xYPointerAnnotation0.getText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals("yyyy", xYPointerAnnotation0.getURL());
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      
      Color color0 = (Color)xYPointerAnnotation0.getArrowPaint();
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertNotNull(color0);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals("Z2d;U=I", xYPointerAnnotation0.getText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals("yyyy", xYPointerAnnotation0.getURL());
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      
      xYPointerAnnotation0.setArrowPaint(color0);
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals("Z2d;U=I", xYPointerAnnotation0.getText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals("yyyy", xYPointerAnnotation0.getURL());
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      
      double double0 = xYPointerAnnotation0.getX();
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals("Z2d;U=I", xYPointerAnnotation0.getText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals("yyyy", xYPointerAnnotation0.getURL());
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      
      String string0 = xYPointerAnnotation0.getURL();
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertEquals("yyyy", string0);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertNotNull(string0);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals("Z2d;U=I", xYPointerAnnotation0.getText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals("yyyy", xYPointerAnnotation0.getURL());
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Cszu|eC.hW$lS", 1.0E-5, 1.0E-5, 2502.158116576);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertNotNull(xYPointerAnnotation0);
      assertEquals("Cszu|eC.hW$lS", xYPointerAnnotation0.getText());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(2502.158116576, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(1.0E-5, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(1.0E-5, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)xYPointerAnnotation0.getArrowStroke();
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertNotNull(basicStroke0);
      assertEquals("Cszu|eC.hW$lS", xYPointerAnnotation0.getText());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(2502.158116576, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(1.0E-5, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(1.0E-5, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, (-2710.66723017352), 0.0, 3.0, 776.2, false);
      assertNotNull(xYDataImageAnnotation0);
      assertEquals((-2710.66723017352), xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(776.2, xYDataImageAnnotation0.getHeight(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(3.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertNull(xYDataImageAnnotation0.getURL());
      
      xYDataImageAnnotation0.setURL("Cszu|eC.hW$lS");
      assertEquals((-2710.66723017352), xYDataImageAnnotation0.getX(), 0.01);
      assertEquals("Cszu|eC.hW$lS", xYDataImageAnnotation0.getURL());
      assertEquals(776.2, xYDataImageAnnotation0.getHeight(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(3.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      
      Image image1 = xYDataImageAnnotation0.getImage();
      assertSame(image1, image0);
      assertNotNull(image1);
      assertEquals((-2710.66723017352), xYDataImageAnnotation0.getX(), 0.01);
      assertEquals("Cszu|eC.hW$lS", xYDataImageAnnotation0.getURL());
      assertEquals(776.2, xYDataImageAnnotation0.getHeight(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(3.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertEquals(0.0F, image1.getAccelerationPriority(), 0.01F);
      
      String string0 = xYDataImageAnnotation0.getToolTipText();
      assertNull(string0);
      assertEquals((-2710.66723017352), xYDataImageAnnotation0.getX(), 0.01);
      assertEquals("Cszu|eC.hW$lS", xYDataImageAnnotation0.getURL());
      assertEquals(776.2, xYDataImageAnnotation0.getHeight(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(3.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      
      XYDataImageAnnotation xYDataImageAnnotation1 = (XYDataImageAnnotation)xYDataImageAnnotation0.clone();
      assertTrue(xYDataImageAnnotation1.equals((Object)xYDataImageAnnotation0));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNotSame(xYDataImageAnnotation1, xYDataImageAnnotation0);
      assertNotNull(xYDataImageAnnotation1);
      assertEquals((-2710.66723017352), xYDataImageAnnotation0.getX(), 0.01);
      assertEquals("Cszu|eC.hW$lS", xYDataImageAnnotation0.getURL());
      assertEquals(776.2, xYDataImageAnnotation0.getHeight(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(3.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertEquals((-2710.66723017352), xYDataImageAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation1.getY(), 0.01);
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertEquals(776.2, xYDataImageAnnotation1.getHeight(), 0.01);
      assertEquals("Cszu|eC.hW$lS", xYDataImageAnnotation1.getURL());
      assertTrue(xYDataImageAnnotation1.getNotify());
      assertEquals(3.0, xYDataImageAnnotation1.getWidth(), 0.01);
      assertNull(xYDataImageAnnotation1.getToolTipText());
      
      xYDataImageAnnotation0.setURL("Cszu|eC.hW$lS");
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertEquals((-2710.66723017352), xYDataImageAnnotation0.getX(), 0.01);
      assertEquals("Cszu|eC.hW$lS", xYDataImageAnnotation0.getURL());
      assertEquals(776.2, xYDataImageAnnotation0.getHeight(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(3.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      
      Drawable drawable0 = mock(Drawable.class, new ViolatedAssumptionAnswer());
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(2053.84259441858, 1.0, 1.0, 1.0E-5, 3.0, drawable0);
      assertNotNull(xYDrawableAnnotation0);
      assertNull(xYDrawableAnnotation0.getToolTipText());
      assertTrue(xYDrawableAnnotation0.getNotify());
      assertNull(xYDrawableAnnotation0.getURL());
      
      XYDrawableAnnotation xYDrawableAnnotation1 = (XYDrawableAnnotation)xYDrawableAnnotation0.clone();
      assertTrue(xYDrawableAnnotation1.equals((Object)xYDrawableAnnotation0));
      assertNotSame(xYDrawableAnnotation0, xYDrawableAnnotation1);
      assertNotSame(xYDrawableAnnotation1, xYDrawableAnnotation0);
      assertNotNull(xYDrawableAnnotation1);
      assertNull(xYDrawableAnnotation0.getToolTipText());
      assertTrue(xYDrawableAnnotation0.getNotify());
      assertNull(xYDrawableAnnotation0.getURL());
      assertTrue(xYDrawableAnnotation1.getNotify());
      assertNull(xYDrawableAnnotation1.getURL());
      assertNull(xYDrawableAnnotation1.getToolTipText());
      
      double double0 = xYDataImageAnnotation0.getX();
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertEquals((-2710.66723017352), double0, 0.01);
      assertEquals((-2710.66723017352), xYDataImageAnnotation0.getX(), 0.01);
      assertEquals("Cszu|eC.hW$lS", xYDataImageAnnotation0.getURL());
      assertEquals(776.2, xYDataImageAnnotation0.getHeight(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(3.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      
      boolean boolean0 = xYDataImageAnnotation0.getIncludeInDataBounds();
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertFalse(boolean0);
      assertEquals((-2710.66723017352), xYDataImageAnnotation0.getX(), 0.01);
      assertEquals("Cszu|eC.hW$lS", xYDataImageAnnotation0.getURL());
      assertEquals(776.2, xYDataImageAnnotation0.getHeight(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(3.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stroke stroke0 = null;
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 50.0, 50.0, 50.0);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(xYPointerAnnotation0);
      assertEquals(50.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(50.0, xYPointerAnnotation0.getX(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(50.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      
      Color color0 = (Color)xYPointerAnnotation0.getOutlinePaint();
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(color0);
      assertEquals(50.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(50.0, xYPointerAnnotation0.getX(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(50.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(50.0, 50.0, 50.0, 50.0, (Stroke) null, color0);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(xYBoxAnnotation0);
      assertEquals(50.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(50.0, xYPointerAnnotation0.getX(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(50.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = null;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYBoxAnnotation0.draw(graphics2D0, (XYPlot) null, rectangle2D0, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYBoxAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0);
      assertNotNull(xYShapeAnnotation0);
      assertTrue(xYShapeAnnotation0.getNotify());
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(xYShapeAnnotation0.getToolTipText());
      
      xYShapeAnnotation0.setURL("UzO|e4I@taV");
      assertTrue(xYShapeAnnotation0.getNotify());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertEquals("UzO|e4I@taV", xYShapeAnnotation0.getURL());
      
      xYShapeAnnotation0.hashCode();
      assertTrue(xYShapeAnnotation0.getNotify());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertEquals("UzO|e4I@taV", xYShapeAnnotation0.getURL());
      
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(0.0, 0.0, title0);
      assertNotNull(xYTitleAnnotation0);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertTrue(xYTitleAnnotation0.getNotify());
      
      RectangleAnchor rectangleAnchor0 = xYTitleAnnotation0.getTitleAnchor();
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor0);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertTrue(xYTitleAnnotation0.getNotify());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      
      Drawable drawable0 = mock(Drawable.class, new ViolatedAssumptionAnswer());
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(0.0, 0.25, (-2963.454343788939), (-2963.454343788939), drawable0);
      assertNotNull(xYDrawableAnnotation0);
      assertNull(xYDrawableAnnotation0.getURL());
      assertNull(xYDrawableAnnotation0.getToolTipText());
      assertTrue(xYDrawableAnnotation0.getNotify());
      
      boolean boolean0 = xYDrawableAnnotation0.equals(xYShapeAnnotation0);
      assertFalse(boolean0);
      assertTrue(xYShapeAnnotation0.getNotify());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertEquals("UzO|e4I@taV", xYShapeAnnotation0.getURL());
      assertNull(xYDrawableAnnotation0.getURL());
      assertNull(xYDrawableAnnotation0.getToolTipText());
      assertTrue(xYDrawableAnnotation0.getNotify());
      
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", (-4719.89658489), 0.0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(xYTextAnnotation0);
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertNull(xYTextAnnotation0.getURL());
      assertEquals("", xYTextAnnotation0.getText());
      assertEquals((-4719.89658489), xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      
      double double0 = xYTextAnnotation0.getRotationAngle();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertNull(xYTextAnnotation0.getURL());
      assertEquals("", xYTextAnnotation0.getText());
      assertEquals((-4719.89658489), xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 137.84, (-1353.7142367), 137.84, 3340.2902, false);
      assertNotNull(xYDataImageAnnotation0);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertEquals(3340.2902, xYDataImageAnnotation0.getHeight(), 0.01);
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(137.84, xYDataImageAnnotation0.getWidth(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals((-1353.7142367), xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(137.84, xYDataImageAnnotation0.getX(), 0.01);
      
      boolean boolean1 = xYDataImageAnnotation0.getIncludeInDataBounds();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertEquals(3340.2902, xYDataImageAnnotation0.getHeight(), 0.01);
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(137.84, xYDataImageAnnotation0.getWidth(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals((-1353.7142367), xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(137.84, xYDataImageAnnotation0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 1.0;
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(1.0, 2088.54, image0);
      assertNotNull(xYImageAnnotation0);
      assertEquals(2088.54, xYImageAnnotation0.getY(), 0.01);
      assertNull(xYImageAnnotation0.getToolTipText());
      assertNull(xYImageAnnotation0.getURL());
      assertTrue(xYImageAnnotation0.getNotify());
      assertEquals(1.0, xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation0.getImageAnchor());
      
      String string0 = "";
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      XYImageAnnotation xYImageAnnotation1 = (XYImageAnnotation)xYImageAnnotation0.clone();
      assertTrue(xYImageAnnotation1.equals((Object)xYImageAnnotation0));
      assertNotSame(xYImageAnnotation0, xYImageAnnotation1);
      assertNotSame(xYImageAnnotation1, xYImageAnnotation0);
      assertNotNull(xYImageAnnotation1);
      assertEquals(2088.54, xYImageAnnotation0.getY(), 0.01);
      assertNull(xYImageAnnotation0.getToolTipText());
      assertNull(xYImageAnnotation0.getURL());
      assertTrue(xYImageAnnotation0.getNotify());
      assertEquals(1.0, xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation0.getImageAnchor());
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation1.getImageAnchor());
      assertNull(xYImageAnnotation1.getURL());
      assertTrue(xYImageAnnotation1.getNotify());
      assertEquals(1.0, xYImageAnnotation1.getX(), 0.01);
      assertNull(xYImageAnnotation1.getToolTipText());
      assertEquals(2088.54, xYImageAnnotation1.getY(), 0.01);
      
      boolean boolean0 = xYImageAnnotation0.equals(xYImageAnnotation1);
      assertTrue(xYImageAnnotation0.equals((Object)xYImageAnnotation1));
      assertTrue(xYImageAnnotation1.equals((Object)xYImageAnnotation0));
      assertNotSame(xYImageAnnotation0, xYImageAnnotation1);
      assertNotSame(xYImageAnnotation1, xYImageAnnotation0);
      assertTrue(boolean0);
      assertEquals(2088.54, xYImageAnnotation0.getY(), 0.01);
      assertNull(xYImageAnnotation0.getToolTipText());
      assertNull(xYImageAnnotation0.getURL());
      assertTrue(xYImageAnnotation0.getNotify());
      assertEquals(1.0, xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation0.getImageAnchor());
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation1.getImageAnchor());
      assertNull(xYImageAnnotation1.getURL());
      assertTrue(xYImageAnnotation1.getNotify());
      assertEquals(1.0, xYImageAnnotation1.getX(), 0.01);
      assertNull(xYImageAnnotation1.getToolTipText());
      assertEquals(2088.54, xYImageAnnotation1.getY(), 0.01);
      
      xYImageAnnotation0.addChangeListener(annotationChangeListener0);
      assertTrue(xYImageAnnotation0.equals((Object)xYImageAnnotation1));
      assertNotSame(xYImageAnnotation0, xYImageAnnotation1);
      assertEquals(2088.54, xYImageAnnotation0.getY(), 0.01);
      assertNull(xYImageAnnotation0.getToolTipText());
      assertNull(xYImageAnnotation0.getURL());
      assertTrue(xYImageAnnotation0.getNotify());
      assertEquals(1.0, xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation0.getImageAnchor());
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = xYImageAnnotation0.hasListener(eventListener0);
      assertTrue(xYImageAnnotation0.equals((Object)xYImageAnnotation1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(xYImageAnnotation0, xYImageAnnotation1);
      assertFalse(boolean1);
      assertEquals(2088.54, xYImageAnnotation0.getY(), 0.01);
      assertNull(xYImageAnnotation0.getToolTipText());
      assertNull(xYImageAnnotation0.getURL());
      assertTrue(xYImageAnnotation0.getNotify());
      assertEquals(1.0, xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation0.getImageAnchor());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYImageAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Drawable drawable0 = mock(Drawable.class, new ViolatedAssumptionAnswer());
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(411.46942145, 411.46942145, (-2749.7338), 411.46942145, drawable0);
      assertNotNull(xYDrawableAnnotation0);
      assertNull(xYDrawableAnnotation0.getURL());
      assertTrue(xYDrawableAnnotation0.getNotify());
      assertNull(xYDrawableAnnotation0.getToolTipText());
      
      XYDrawableAnnotation xYDrawableAnnotation1 = (XYDrawableAnnotation)xYDrawableAnnotation0.clone();
      assertTrue(xYDrawableAnnotation1.equals((Object)xYDrawableAnnotation0));
      assertNotSame(xYDrawableAnnotation0, xYDrawableAnnotation1);
      assertNotSame(xYDrawableAnnotation1, xYDrawableAnnotation0);
      assertNotNull(xYDrawableAnnotation1);
      assertNull(xYDrawableAnnotation0.getURL());
      assertTrue(xYDrawableAnnotation0.getNotify());
      assertNull(xYDrawableAnnotation0.getToolTipText());
      assertNull(xYDrawableAnnotation1.getURL());
      assertTrue(xYDrawableAnnotation1.getNotify());
      assertNull(xYDrawableAnnotation1.getToolTipText());
      
      xYDrawableAnnotation0.hashCode();
      assertTrue(xYDrawableAnnotation0.equals((Object)xYDrawableAnnotation1));
      assertNotSame(xYDrawableAnnotation0, xYDrawableAnnotation1);
      assertNull(xYDrawableAnnotation0.getURL());
      assertTrue(xYDrawableAnnotation0.getNotify());
      assertNull(xYDrawableAnnotation0.getToolTipText());
      
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation((-2749.7338), (-2749.7338), image0);
      assertNotNull(xYImageAnnotation0);
      assertTrue(xYImageAnnotation0.getNotify());
      assertNull(xYImageAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation0.getImageAnchor());
      assertNull(xYImageAnnotation0.getToolTipText());
      assertEquals((-2749.7338), xYImageAnnotation0.getX(), 0.01);
      assertEquals((-2749.7338), xYImageAnnotation0.getY(), 0.01);
      
      Image image1 = xYImageAnnotation0.getImage();
      assertSame(image1, image0);
      assertNotNull(image1);
      assertTrue(xYImageAnnotation0.getNotify());
      assertNull(xYImageAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation0.getImageAnchor());
      assertNull(xYImageAnnotation0.getToolTipText());
      assertEquals((-2749.7338), xYImageAnnotation0.getX(), 0.01);
      assertEquals((-2749.7338), xYImageAnnotation0.getY(), 0.01);
      assertEquals(0.0F, image1.getAccelerationPriority(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Drawable drawable0 = mock(Drawable.class, new ViolatedAssumptionAnswer());
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(810.8656188623714, 810.8656188623714, 810.8656188623714, (-2150.5110958), drawable0);
      assertNotNull(xYDrawableAnnotation0);
      assertNull(xYDrawableAnnotation0.getToolTipText());
      assertNull(xYDrawableAnnotation0.getURL());
      assertTrue(xYDrawableAnnotation0.getNotify());
      
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      xYDrawableAnnotation0.setToolTipText("");
      assertEquals("", xYDrawableAnnotation0.getToolTipText());
      assertNull(xYDrawableAnnotation0.getURL());
      assertTrue(xYDrawableAnnotation0.getNotify());
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(0.0, (-2150.5110958), title0, rectangleAnchor0);
      assertNotNull(xYTitleAnnotation0);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals((-2150.5110958), xYTitleAnnotation0.getY(), 0.01);
      
      boolean boolean0 = xYDrawableAnnotation0.equals(xYTitleAnnotation0);
      assertFalse(boolean0);
      assertEquals("", xYDrawableAnnotation0.getToolTipText());
      assertNull(xYDrawableAnnotation0.getURL());
      assertTrue(xYDrawableAnnotation0.getNotify());
      assertTrue(xYTitleAnnotation0.getNotify());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals((-2150.5110958), xYTitleAnnotation0.getY(), 0.01);
      
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("<Mmz", 0.0, 2632.2867153417687, (-2150.5110958));
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertNotNull(xYPointerAnnotation0);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("<Mmz", xYPointerAnnotation0.getText());
      assertEquals(0.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(2632.2867153417687, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-2150.5110958), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.addEntity(plotRenderingInfo0, shape0, 2015, "<Mmz", "<Mmz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.AbstractXYAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("'B8+~=y}", 1795.5, 270.0, 1064.842657);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(xYPointerAnnotation0);
      assertEquals(270.0, xYPointerAnnotation0.getY(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(1064.842657, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(1795.5, xYPointerAnnotation0.getX(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals("'B8+~=y}", xYPointerAnnotation0.getText());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      
      BasicStroke basicStroke0 = (BasicStroke)xYPointerAnnotation0.getArrowStroke();
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(basicStroke0);
      assertEquals(270.0, xYPointerAnnotation0.getY(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(1064.842657, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(1795.5, xYPointerAnnotation0.getX(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals("'B8+~=y}", xYPointerAnnotation0.getText());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1795.5, (-2185.0), (-2185.0), (-2185.0), basicStroke0, xYPointerAnnotation0.DEFAULT_PAINT);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(xYBoxAnnotation0);
      assertEquals(270.0, xYPointerAnnotation0.getY(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(1064.842657, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(1795.5, xYPointerAnnotation0.getX(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals("'B8+~=y}", xYPointerAnnotation0.getText());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      
      boolean boolean0 = xYBoxAnnotation0.equals("");
      assertFalse(boolean0);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(270.0, xYPointerAnnotation0.getY(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(1064.842657, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(1795.5, xYPointerAnnotation0.getX(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals("'B8+~=y}", xYPointerAnnotation0.getText());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Q&$(A2lMCO|", 875.341, 875.341, (-1.0));
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(xYPointerAnnotation0);
      assertEquals((-1.0), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("Q&$(A2lMCO|", xYPointerAnnotation0.getText());
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(875.341, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(875.341, xYPointerAnnotation0.getX(), 0.01);
      
      xYPointerAnnotation0.setToolTipText("Q&$(A2lMCO|");
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals((-1.0), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("Q&$(A2lMCO|", xYPointerAnnotation0.getText());
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(875.341, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(875.341, xYPointerAnnotation0.getX(), 0.01);
      assertEquals("Q&$(A2lMCO|", xYPointerAnnotation0.getToolTipText());
      
      double double0 = xYPointerAnnotation0.getLabelOffset();
      assertEquals(3.0, double0, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals((-1.0), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("Q&$(A2lMCO|", xYPointerAnnotation0.getText());
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(875.341, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(875.341, xYPointerAnnotation0.getX(), 0.01);
      assertEquals("Q&$(A2lMCO|", xYPointerAnnotation0.getToolTipText());
      
      TextAnchor textAnchor0 = XYTextAnnotation.DEFAULT_TEXT_ANCHOR;
      assertNotNull(textAnchor0);
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHalfAscent());
      
      xYPointerAnnotation0.setRotationAnchor(textAnchor0);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals((-1.0), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals("Q&$(A2lMCO|", xYPointerAnnotation0.getText());
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(875.341, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(875.341, xYPointerAnnotation0.getX(), 0.01);
      assertEquals("Q&$(A2lMCO|", xYPointerAnnotation0.getToolTipText());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHalfAscent());
      
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(3.0, 3.0, title0);
      assertNotNull(xYTitleAnnotation0);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(3.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(3.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      
      double double1 = xYTitleAnnotation0.getMaxHeight();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(3.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(3.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 341.0;
      doubleArray0[2] = 123.4;
      doubleArray0[3] = 2984.9566;
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0);
      assertArrayEquals(new double[] {0.0, 341.0, 123.4, 2984.9566}, doubleArray0, 0.01);
      assertNotNull(xYPolygonAnnotation0);
      assertEquals(4, doubleArray0.length);
      assertNull(xYPolygonAnnotation0.getURL());
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertTrue(xYPolygonAnnotation0.getNotify());
      
      String string0 = xYPolygonAnnotation0.getURL();
      assertArrayEquals(new double[] {0.0, 341.0, 123.4, 2984.9566}, doubleArray0, 0.01);
      assertNull(string0);
      assertEquals(4, doubleArray0.length);
      assertNull(xYPolygonAnnotation0.getURL());
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertTrue(xYPolygonAnnotation0.getNotify());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 0.0, (-5879.390582), 334.9, 0.0);
      assertNotNull(xYDataImageAnnotation0);
      assertEquals(334.9, xYDataImageAnnotation0.getWidth(), 0.01);
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals((-5879.390582), xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(0.0, xYDataImageAnnotation0.getHeight(), 0.01);
      
      xYDataImageAnnotation0.setURL("");
      assertEquals(334.9, xYDataImageAnnotation0.getWidth(), 0.01);
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals((-5879.390582), xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals("", xYDataImageAnnotation0.getURL());
      assertEquals(0.0, xYDataImageAnnotation0.getHeight(), 0.01);
      
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 0.0, (-1645.2902234301), 0.0);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertNotNull(xYPointerAnnotation0);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-1645.2902234301), xYPointerAnnotation0.getY(), 0.01);
      
      TextAnchor textAnchor0 = xYPointerAnnotation0.getTextAnchor();
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertNotNull(textAnchor0);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-1645.2902234301), xYPointerAnnotation0.getY(), 0.01);
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isRight());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isLeft());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0, 1.0, 1.0, (-910.868475346294));
      assertNotNull(xYBoxAnnotation0);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      
      XYBoxAnnotation xYBoxAnnotation1 = new XYBoxAnnotation((-910.868475346294), 1939.4083, 0.0, 1939.4083);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      assertNotNull(xYBoxAnnotation1);
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getURL());
      
      boolean boolean0 = xYBoxAnnotation0.equals(xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(boolean0);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getURL());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(454.289039, 0.0, title0, rectangleAnchor0);
      assertNotNull(xYTitleAnnotation0);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(454.289039, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTitleAnnotation0.addEntity(plotRenderingInfo0, shape0, 0, "Z)LC_{'", "Z)LC_{'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.AbstractXYAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", (-663.7898), 0.0, (-2013.3479137890183));
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotNull(xYPointerAnnotation0);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      
      xYPointerAnnotation0.setBaseRadius(24.07869182597347);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      
      Color color0 = (Color)xYPointerAnnotation0.getOutlinePaint();
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotNull(color0);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      xYPointerAnnotation0.setArrowWidth(24.07869182597347);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      
      boolean boolean0 = xYPointerAnnotation0.isOutlineVisible();
      assertFalse(boolean0);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      
      xYPointerAnnotation0.fireAnnotationChanged();
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(54.1666667, (-1.0), 3.0, (-663.7898));
      assertNotNull(xYBoxAnnotation0);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      
      boolean boolean1 = xYBoxAnnotation0.hasListener((EventListener) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((EntityCollection) null).when(chartRenderingInfo0).getEntityCollection();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(chartRenderingInfo0).when(plotRenderingInfo0).getOwner();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation0.setURL("");
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertEquals("", xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      
      xYBoxAnnotation0.addEntity(plotRenderingInfo0, shape0, 193, "", "");
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertEquals("", xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      
      XYPointerAnnotation xYPointerAnnotation1 = (XYPointerAnnotation)xYPointerAnnotation0.clone();
      assertTrue(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertNotNull(xYPointerAnnotation1);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals((-2013.3479137890183), xYPointerAnnotation1.getAngle(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation1.getX(), 0.01);
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("", xYPointerAnnotation1.getText());
      
      boolean boolean2 = xYBoxAnnotation0.equals(xYPointerAnnotation0);
      assertTrue(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertFalse(boolean2);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertEquals("", xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      
      xYPointerAnnotation1.setBaseRadius(0.0);
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals((-2013.3479137890183), xYPointerAnnotation1.getAngle(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("", xYPointerAnnotation1.getText());
      
      boolean boolean3 = xYBoxAnnotation0.equals("");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertEquals("", xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      
      double double0 = xYPointerAnnotation0.getY();
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      
      xYPointerAnnotation0.setOutlinePaint(color0);
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(1635.50483257206, 0.0, title0);
      assertNotNull(xYTitleAnnotation0);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(1635.50483257206, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      BasicStroke basicStroke0 = (BasicStroke)xYPointerAnnotation1.getArrowStroke();
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertNotNull(basicStroke0);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals((-2013.3479137890183), xYPointerAnnotation1.getAngle(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("", xYPointerAnnotation1.getText());
      
      Color color1 = (Color)xYPointerAnnotation0.getPaint();
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertSame(color1, color0);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertNotNull(color1);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getRed());
      
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape1, basicStroke0, color1, color1);
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertNotNull(xYShapeAnnotation0);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getRed());
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertTrue(xYShapeAnnotation0.getNotify());
      assertEquals((-2013.3479137890183), xYPointerAnnotation1.getAngle(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("", xYPointerAnnotation1.getText());
      
      boolean boolean4 = xYTitleAnnotation0.equals(xYShapeAnnotation0);
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertSame(color1, color0);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertFalse(boolean4);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(1635.50483257206, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getRed());
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertTrue(xYShapeAnnotation0.getNotify());
      assertEquals((-2013.3479137890183), xYPointerAnnotation1.getAngle(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("", xYPointerAnnotation1.getText());
      
      xYTitleAnnotation0.setMaxWidth((-271.218936294));
      assertEquals((-271.218936294), xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(1635.50483257206, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      
      String string0 = xYPointerAnnotation1.getToolTipText();
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertNull(string0);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals((-2013.3479137890183), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals((-2013.3479137890183), xYPointerAnnotation1.getAngle(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals((-663.7898), xYPointerAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals(24.07869182597347, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("", xYPointerAnnotation1.getText());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 341.0;
      doubleArray0[2] = 123.4;
      doubleArray0[3] = 2984.9566;
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0);
      assertArrayEquals(new double[] {0.0, 341.0, 123.4, 2984.9566}, doubleArray0, 0.01);
      assertNotNull(xYPolygonAnnotation0);
      assertEquals(4, doubleArray0.length);
      assertNull(xYPolygonAnnotation0.getURL());
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertTrue(xYPolygonAnnotation0.getNotify());
      
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("h&=", 341.0, 0.0, 589.9681641);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertNotNull(xYPointerAnnotation0);
      assertEquals("h&=", xYPointerAnnotation0.getText());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(589.9681641, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(341.0, xYPointerAnnotation0.getX(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      
      BasicStroke basicStroke0 = (BasicStroke)xYPointerAnnotation0.getArrowStroke();
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertNotNull(basicStroke0);
      assertEquals("h&=", xYPointerAnnotation0.getText());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(589.9681641, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(341.0, xYPointerAnnotation0.getX(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(707.24, 707.24, 589.9681641, 0.0, basicStroke0, xYPointerAnnotation0.DEFAULT_PAINT);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertNotNull(xYLineAnnotation0);
      assertEquals("h&=", xYPointerAnnotation0.getText());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(589.9681641, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(341.0, xYPointerAnnotation0.getX(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      xYLineAnnotation0.fireAnnotationChanged();
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals("h&=", xYPointerAnnotation0.getText());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(589.9681641, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(341.0, xYPointerAnnotation0.getX(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      boolean boolean0 = xYPolygonAnnotation0.equals(xYLineAnnotation0);
      assertArrayEquals(new double[] {0.0, 341.0, 123.4, 2984.9566}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNull(xYPolygonAnnotation0.getURL());
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertTrue(xYPolygonAnnotation0.getNotify());
      assertEquals("h&=", xYPointerAnnotation0.getText());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(589.9681641, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(341.0, xYPointerAnnotation0.getX(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      String string0 = xYPolygonAnnotation0.getURL();
      assertArrayEquals(new double[] {0.0, 341.0, 123.4, 2984.9566}, doubleArray0, 0.01);
      assertNull(string0);
      assertEquals(4, doubleArray0.length);
      assertNull(xYPolygonAnnotation0.getURL());
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertTrue(xYPolygonAnnotation0.getNotify());
      
      XYPointerAnnotation xYPointerAnnotation1 = (XYPointerAnnotation)xYPointerAnnotation0.clone();
      assertTrue(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(xYPointerAnnotation1);
      assertEquals("h&=", xYPointerAnnotation0.getText());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(589.9681641, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(341.0, xYPointerAnnotation0.getX(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals("h&=", xYPointerAnnotation1.getText());
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(589.9681641, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(341.0, xYPointerAnnotation1.getX(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0);
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("uC_}7PN55e@[)EfW", 1467.5802454754, 1467.5802454754);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.hasListener(eventListener0);
      xYTextAnnotation0.setOutlineVisible(true);
      xYShapeAnnotation0.setToolTipText("uC_}7PN55e@[)EfW");
      xYTextAnnotation0.setText("b6n");
      xYTextAnnotation0.isOutlineVisible();
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 1757.88, 0.0, 1467.5802454754, (-2947.37855709979), true);
      xYDataImageAnnotation0.equals(xYShapeAnnotation0);
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(0.0, 0.0, title0);
      xYTitleAnnotation0.setURL("uC_}7PN55e@[)EfW");
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(chartRenderingInfo0).when(plotRenderingInfo0).getOwner();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.addEntity(plotRenderingInfo0, shape1, 0, "uC_}7PN55e@[)EfW", "");
      xYTitleAnnotation0.setMaxHeight(605.5980779875507);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("uC_}7PN55e@[)EfW", 1757.88, (-2947.37855709979), (-2947.37855709979));
      xYPointerAnnotation0.getLabelOffset();
      xYPointerAnnotation0.setArrowWidth((-2579.2));
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 3511.208374226, 3511.208374226, 3511.208374226, 3511.208374226, true);
      xYDataImageAnnotation0.clone();
      Range range0 = xYDataImageAnnotation0.getYRange();
      assertEquals(3511.208374226, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      XYImageAnnotation xYImageAnnotation0 = null;
      try {
        xYImageAnnotation0 = new XYImageAnnotation(0.0, 0.0, (Image) null, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, (-4510.7567592), 1.0, 1.0, (-4510.7567592), true);
      xYDataImageAnnotation0.clone();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.addEntity((PlotRenderingInfo) null, shape0, 0, "*eBy'T}Ml(7c?F<#{", "#~WS$gf");
      xYDataImageAnnotation0.getHeight();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", (-4510.7567592), 1.0, 1.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.notifyListeners(annotationChangeEvent0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 1306, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("hl[`7M(rxB*S/qI|", (-4235.07058203), (-3158.20863), (-3158.20863));
      Stroke stroke0 = xYPointerAnnotation0.getArrowStroke();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, stroke0, xYPointerAnnotation0.DEFAULT_PAINT);
      xYPointerAnnotation0.setAngle((-1.0));
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(chartRenderingInfo0).when(plotRenderingInfo0).getOwner();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Drawable drawable0 = mock(Drawable.class, new ViolatedAssumptionAnswer());
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(231.20598989, (-1146.170383948), 3.0, 200.0, (-3259.5), drawable0);
      xYDrawableAnnotation0.setNotify(true);
      xYDrawableAnnotation0.equals((Object) null);
      xYPointerAnnotation0.addEntity(plotRenderingInfo0, shape1, 462, "m-%`B", "m-%`B");
      xYPointerAnnotation0.setToolTipText("m-%`B");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYDrawableAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 0, plotRenderingInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
