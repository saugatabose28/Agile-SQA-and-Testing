/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:50:04 GMT 2023
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.TextAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.text.TextUtils;
import org.jfree.chart.ui.TextAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoryPointerAnnotation_ESTest extends CategoryPointerAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(":&)QPCAv7}\"/&Pe", ":&)QPCAv7}\"/&Pe", 30.0, 409.5325084175994);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.fireAnnotationChanged();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.removeChangeListener((AnnotationChangeListener) null);
      Object object0 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.equals(object0);
      categoryPointerAnnotation0.setBaseRadius(409.5325084175994);
      categoryPointerAnnotation0.fireAnnotationChanged();
      categoryPointerAnnotation0.getArrowPaint();
      TextAnchor textAnchor0 = TextAnnotation.DEFAULT_TEXT_ANCHOR;
      categoryPointerAnnotation0.setTextAnchor(textAnchor0);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.getLabelOffset();
      categoryPointerAnnotation0.setAngle(30.0);
      categoryPointerAnnotation0.equals(textAnchor0);
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setArrowWidth(3.0);
      categoryPointerAnnotation0.setLabelOffset(30.0);
      CategoryPointerAnnotation categoryPointerAnnotation1 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      categoryPointerAnnotation1.setArrowLength(30.0);
      categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.getArrowPaint();
      object0.hashCode();
      categoryPointerAnnotation0.getArrowStroke();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("stroke", "stroke", (-992.39), (-992.39));
      CategoryPointerAnnotation categoryPointerAnnotation1 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      categoryPointerAnnotation1.setArrowLength((-992.39));
      categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      CategoryPointerAnnotation categoryPointerAnnotation2 = new CategoryPointerAnnotation("/gj7*", 5.0, 0.0, 10.0);
      categoryPointerAnnotation2.setValue(5.0);
      Color color0 = (Color)categoryPointerAnnotation2.getPaint();
      categoryPointerAnnotation2.setArrowPaint(categoryPointerAnnotation0.DEFAULT_PAINT);
      categoryPointerAnnotation0.setArrowPaint(color0);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation2.getArrowLength();
      categoryPointerAnnotation2.getArrowLength();
      categoryPointerAnnotation2.setText("2@|Sx&=%z2N!v*S");
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.setArrowPaint(categoryPointerAnnotation2.DEFAULT_PAINT);
      categoryPointerAnnotation2.getArrowStroke();
      categoryPointerAnnotation0.setArrowLength(0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation1.getArrowPaint();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryPointerAnnotation2.draw(graphics2D0, categoryPlot0, rectangle2D0, (CategoryAxis) null, valueAxis0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(":&)QPCAv7}\"/&Pe", ":&)QPCAv7}\"/&Pe", 30.0, 409.5325084175994);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.fireAnnotationChanged();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.removeChangeListener((AnnotationChangeListener) null);
      CategoryPointerAnnotation categoryPointerAnnotation1 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      categoryPointerAnnotation1.setAngle(761.568);
      categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      categoryPointerAnnotation0.setBaseRadius(409.5325084175994);
      categoryPointerAnnotation0.fireAnnotationChanged();
      categoryPointerAnnotation0.getArrowPaint();
      TextAnchor textAnchor0 = TextAnnotation.DEFAULT_TEXT_ANCHOR;
      categoryPointerAnnotation0.setTextAnchor(textAnchor0);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.getLabelOffset();
      categoryPointerAnnotation0.setAngle(30.0);
      categoryPointerAnnotation0.equals(textAnchor0);
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setArrowWidth(3.0);
      categoryPointerAnnotation0.setLabelOffset(30.0);
      CategoryPointerAnnotation categoryPointerAnnotation2 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      categoryPointerAnnotation2.hasListener((EventListener) null);
      categoryPointerAnnotation0.equals(categoryPointerAnnotation2);
      categoryPointerAnnotation0.getBaseRadius();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Null 'unitType' argument.", "Null 'unitType' argument.", 1163.8, 5.0);
      categoryPointerAnnotation0.setBaseRadius((-1858.661));
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setArrowPaint(paint0);
      TextAnchor textAnchor0 = TextAnnotation.DEFAULT_ROTATION_ANCHOR;
      categoryPointerAnnotation0.setTextAnchor(textAnchor0);
      categoryPointerAnnotation0.setBaseRadius(1163.8);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.notifyListeners(annotationChangeEvent0);
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.setArrowWidth(1163.8);
      categoryPointerAnnotation0.getTipRadius();
      categoryPointerAnnotation0.setAngle((-310.32128727796));
      categoryPointerAnnotation0.hashCode();
      CategoryPointerAnnotation categoryPointerAnnotation1 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      categoryPointerAnnotation1.setFont(categoryPointerAnnotation0.DEFAULT_FONT);
      categoryPointerAnnotation0.setArrowLength((-281.0));
      categoryPointerAnnotation0.setTipRadius(1163.8);
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.equals("Null 'unitType' argument.");
      categoryPointerAnnotation0.setTipRadius((-1305.557786));
      CategoryPointerAnnotation categoryPointerAnnotation2 = (CategoryPointerAnnotation)categoryPointerAnnotation0.clone();
      categoryPointerAnnotation1.equals(categoryPointerAnnotation2);
      categoryPointerAnnotation1.getArrowPaint();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Unknown layer.", "Unknown layer.", 3.0, 3.0);
      categoryPointerAnnotation0.setBaseRadius(3.0);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setPaint(paint0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.setLabelOffset((-1.0));
      categoryPointerAnnotation0.getTipRadius();
      categoryPointerAnnotation0.setArrowWidth((-3063.0));
      categoryPointerAnnotation0.getLabelOffset();
      categoryPointerAnnotation0.getBaseRadius();
      Font font0 = TextAnnotation.DEFAULT_FONT;
      categoryPointerAnnotation0.setFont(font0);
      categoryPointerAnnotation0.getAngle();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("s_<a(^r", "s_<a(^r", 0.0, 0.0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.setArrowLength(0.0);
      categoryPointerAnnotation0.addChangeListener(annotationChangeListener0);
      categoryPointerAnnotation0.setText("s_<a(^r");
      categoryPointerAnnotation0.setArrowLength(0.0);
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.setAngle((-427.838));
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.equals("s_<a(^r");
      categoryPointerAnnotation0.setTipRadius(0.0);
      categoryPointerAnnotation0.setLabelOffset(0.0);
      categoryPointerAnnotation0.setTipRadius(0.0);
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.setArrowPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("n^uA,6Q]@`)<zx9", "n^uA,6Q]@`)<zx9", Double.NEGATIVE_INFINITY, 1.0E-8);
      categoryPointerAnnotation0.setBaseRadius(Double.NEGATIVE_INFINITY);
      categoryPointerAnnotation0.setArrowWidth(10.0);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      Color color0 = (Color)TextAnnotation.DEFAULT_PAINT;
      categoryPointerAnnotation0.setLabelOffset(0.0);
      categoryPointerAnnotation0.setArrowPaint(color0);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.setArrowLength(0.0);
      Object object0 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.equals(object0);
      categoryPointerAnnotation0.getTipRadius();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setTipRadius(0.0);
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.setAngle(0.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("{0}", "{0}", (-719.77), 0.0);
      Object object0 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setBaseRadius(0.0);
      categoryPointerAnnotation0.setLabelOffset((-719.77));
      categoryPointerAnnotation0.getTipRadius();
      categoryPointerAnnotation0.hashCode();
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.hasListener(eventListener0);
      categoryPointerAnnotation0.setAngle(0.0);
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setNotify(true);
      categoryPointerAnnotation0.getTipRadius();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setBaseRadius(10.0);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.setAngle(10.0);
      categoryPointerAnnotation0.equals(object0);
      categoryPointerAnnotation0.clone();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("paint", "paint", 0.2, 50.0);
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setArrowLength((-317.370069309991));
      categoryPointerAnnotation0.setArrowPaint(paint0);
      categoryPointerAnnotation0.setArrowWidth((-2752.739273));
      categoryPointerAnnotation0.setLabelOffset((-2752.739273));
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.getArrowWidth();
      Object object0 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.setAngle(155.27796197);
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setBaseRadius(0.0);
      categoryPointerAnnotation0.setArrowWidth((-794.054471901));
      categoryPointerAnnotation0.getArrowStroke();
      object0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", (-2314.609), 0.0);
      categoryPointerAnnotation0.getArrowStroke();
      TextAnchor textAnchor0 = TextAnnotation.DEFAULT_ROTATION_ANCHOR;
      categoryPointerAnnotation0.setRotationAnchor(textAnchor0);
      CategoryPointerAnnotation categoryPointerAnnotation1 = new CategoryPointerAnnotation("text", 5.0, 661.339, (-2314.609));
      TextAnchor textAnchor1 = categoryPointerAnnotation1.getTextAnchor();
      categoryPointerAnnotation1.hashCode();
      categoryPointerAnnotation0.setTextAnchor(textAnchor1);
      Paint paint0 = categoryPointerAnnotation0.getPaint();
      categoryPointerAnnotation1.setValue(30.0);
      categoryPointerAnnotation0.setArrowPaint(paint0);
      CategoryAnchor categoryAnchor0 = categoryPointerAnnotation0.getCategoryAnchor();
      categoryPointerAnnotation0.setCategoryAnchor(categoryAnchor0);
      categoryPointerAnnotation0.setArrowLength((-3164.1035));
      categoryPointerAnnotation1.hashCode();
      categoryPointerAnnotation1.setArrowPaint(categoryPointerAnnotation0.DEFAULT_PAINT);
      categoryPointerAnnotation0.setTipRadius((-3164.1035));
      categoryPointerAnnotation1.getAngle();
      categoryPointerAnnotation1.equals(textAnchor1);
      categoryPointerAnnotation1.getArrowPaint();
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.setArrowWidth(0.0);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.equals("text");
      categoryPointerAnnotation1.setLabelOffset(50.0);
      categoryPointerAnnotation1.setArrowPaint(paint0);
      categoryPointerAnnotation1.setArrowPaint(categoryPointerAnnotation0.DEFAULT_PAINT);
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation1.getTipRadius();
      categoryPointerAnnotation1.getArrowStroke();
      categoryPointerAnnotation1.getArrowWidth();
      categoryPointerAnnotation1.setLabelOffset((-2314.609));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("9$}pv!vL&hq41S%\u0003", "9$}pv!vL&hq41S%\u0003", 0.0, 0.0);
      categoryPointerAnnotation0.setArrowWidth(0.0);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.setLabelOffset(0.0);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.setText("9$}pv!vL&hq41S%\u0003");
      categoryPointerAnnotation0.setArrowWidth(0.0);
      TextAnchor textAnchor0 = categoryPointerAnnotation0.getTextAnchor();
      categoryPointerAnnotation0.setRotationAnchor(textAnchor0);
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.getLabelOffset();
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.setLabelOffset(10.0);
      categoryPointerAnnotation0.setTipRadius(183.0);
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setTipRadius(0.0);
      categoryPointerAnnotation0.setTipRadius(0.0);
      categoryPointerAnnotation0.getLabelOffset();
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.getTipRadius();
      categoryPointerAnnotation0.setArrowPaint(paint0);
      categoryPointerAnnotation0.getTipRadius();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(",P( ~^4ff>o2T^|OC", ",P( ~^4ff>o2T^|OC", (-1593.47543643621), (-264.268339615));
      categoryPointerAnnotation0.fireAnnotationChanged();
      categoryPointerAnnotation0.setLabelOffset((-1593.47543643621));
      categoryPointerAnnotation0.setRotationAngle(208.558);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.equals(",P( ~^4ff>o2T^|OC");
      categoryPointerAnnotation0.setBaseRadius((-592.3577101));
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.getLabelOffset();
      categoryPointerAnnotation0.setArrowLength((-1593.47543643621));
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.setTipRadius((-1593.47543643621));
      categoryPointerAnnotation0.setArrowWidth((-888.3855272081));
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.setTipRadius((-1.0));
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.equals(",P( ~^4ff>o2T^|OC");
      categoryPointerAnnotation0.setArrowWidth((-592.3577101));
      categoryPointerAnnotation0.setLabelOffset((-1593.47543643621));
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setAngle(0.0);
      categoryPointerAnnotation0.getArrowLength();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("-=g", "-=g", 358.4339040816121, 358.4339040816121);
      categoryPointerAnnotation0.equals("-=g");
      categoryPointerAnnotation0.fireAnnotationChanged();
      categoryPointerAnnotation0.setTipRadius(358.4339040816121);
      categoryPointerAnnotation0.setText("bJAjcG.RX1TF_n");
      categoryPointerAnnotation0.setText("-=g");
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.setArrowWidth(358.4339040816121);
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setBaseRadius(30.0);
      categoryPointerAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 0.0, 0.0);
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setPaint(paint0);
      TextUtils.setUseFontMetricsGetStringBounds(true);
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowWidth(30.0);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.getLabelOffset();
      categoryPointerAnnotation0.setAngle(3.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 0.0, (-2957.653653774444));
      categoryPointerAnnotation0.setRotationAngle((-2957.653653774444));
      categoryPointerAnnotation0.setAngle(63.505688);
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setArrowPaint(paint0);
      categoryPointerAnnotation0.setPaint(paint0);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setArrowLength(0.0);
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setArrowWidth(3.0);
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.setArrowWidth((-1335.452795));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("X9a|lqYY", "X9a|lqYY", 0.0, 0.0);
      categoryPointerAnnotation0.setArrowLength((-4613.91811408948));
      categoryPointerAnnotation0.setTipRadius(270.0);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.equals("X9a|lqYY");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 2109.4934627306, (-1912.6));
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.setRotationAngle(0.0);
      Font font0 = categoryPointerAnnotation0.getFont();
      Paint paint0 = categoryPointerAnnotation0.getPaint();
      categoryPointerAnnotation0.setArrowPaint(paint0);
      categoryPointerAnnotation0.setFont(font0);
      categoryPointerAnnotation0.setArrowLength(2109.4934627306);
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setTipRadius((-3042.0));
      categoryPointerAnnotation0.setArrowLength((-698.027));
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setAngle((-1912.6));
      categoryPointerAnnotation0.getTipRadius();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.equals("");
      Object object0 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("arrow", "arrow", 0.0, 0.0);
      categoryPointerAnnotation0.clone();
      Color color0 = (Color)TextAnnotation.DEFAULT_PAINT;
      categoryPointerAnnotation0.setPaint(color0);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setAngle(0.0);
      categoryPointerAnnotation0.setText("/1/^3/_J");
      categoryPointerAnnotation0.setBaseRadius(0.0);
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setTipRadius(0.0);
      categoryPointerAnnotation0.setBaseRadius(0.0);
      categoryPointerAnnotation0.getLabelOffset();
      categoryPointerAnnotation0.getTipRadius();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("3{", "3{", 0.0, 0.0);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.setAngle(0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      TextUtils.setDrawStringsWithFontAttributes(false);
      CategoryPlot categoryPlot0 = null;
      categoryPointerAnnotation0.setNotify(false);
      categoryPointerAnnotation0.setNotify(false);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.clone();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.setValue(Double.POSITIVE_INFINITY);
      categoryPointerAnnotation0.setBaseRadius(0.0);
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.draw(graphics2D0, (CategoryPlot) null, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Xls $9SyAD:|M~j]", "Xls $9SyAD:|M~j]", 1.0, 1.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(categoryPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(categoryPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.setFont(categoryPlot0.DEFAULT_VALUE_LABEL_FONT);
      categoryPointerAnnotation0.setArrowPaint(categoryPlot0.DEFAULT_OUTLINE_PAINT);
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.setArrowStroke(categoryPlot0.DEFAULT_GRIDLINE_STROKE);
      categoryPointerAnnotation0.setBaseRadius(1.0F);
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 1.5707963267948966;
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("*im", "*im", 1.5707963267948966, 1.5707963267948966);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.fireAnnotationChanged();
      categoryPointerAnnotation0.setCategory("*im");
      categoryPointerAnnotation0.setAngle(0.0);
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setBaseRadius(0.0);
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.setArrowPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("paint", "paint", 0.2, 50.0);
      Paint paint0 = categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setArrowLength((-317.370069309991));
      categoryPointerAnnotation0.setArrowPaint(paint0);
      categoryPointerAnnotation0.setAngle(50.0);
      categoryPointerAnnotation0.setArrowWidth((-2752.739273));
      categoryPointerAnnotation0.setLabelOffset((-2752.739273));
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.setAngle(155.27796197);
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.setBaseRadius(0.0);
      categoryPointerAnnotation0.setArrowWidth((-794.054471901));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(">.(W#gc9$U", ">.(W#gc9$U", 992.0, 992.0);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setTipRadius(3396.5926097);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "TextAnchor.BOTTOM_CENTER";
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("TextAnchor.BOTTOM_CENTER", "TextAnchor.BOTTOM_CENTER", 0.0, 0.0);
      categoryPointerAnnotation0.setNotify(true);
      CategoryPointerAnnotation categoryPointerAnnotation1 = new CategoryPointerAnnotation("TextAnchor.BOTTOM_CENTER", 10.0, 0.0, 5019.614450095409);
      CategoryAnchor categoryAnchor0 = categoryPointerAnnotation1.getCategoryAnchor();
      categoryPointerAnnotation0.setCategoryAnchor(categoryAnchor0);
      categoryPointerAnnotation0.hashCode();
      Stroke stroke0 = null;
      categoryPointerAnnotation0.setBaseRadius(0.0);
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.setArrowStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("4{%WP6", "4{%WP6", 0.0, 1403.944);
      Paint paint0 = categoryPointerAnnotation0.getPaint();
      categoryPointerAnnotation0.setArrowPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Iq", "Iq", 959.0, 0.0);
      categoryPointerAnnotation0.setTipRadius(0.0);
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.getBaseRadius();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("B4,>", "B4,>", 0.0, 0.0);
      categoryPointerAnnotation0.setAngle(0.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("qx1;hUMX", "qx1;hUMX", (-1894.40171), 75.0);
      categoryPointerAnnotation0.setRotationAngle(75.0);
      categoryPointerAnnotation0.setLabelOffset(1715.395);
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.getArrowStroke();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = null;
      try {
        categoryPointerAnnotation0 = new CategoryPointerAnnotation((String) null, (Comparable) null, (-4537.77026), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", (-3675.2407), 20.0);
      categoryPointerAnnotation0.setArrowLength(20.0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("distributor", "distributor", 352.2932481467, 1.0E-100);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(categoryPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(categoryPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, (ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("LrhxNu\"~Bm", "LrhxNu\"~Bm", (-3074.37700855692), (-3074.37700855692));
      categoryPointerAnnotation0.getTipRadius();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("stroke", "stroke", (-992.39), (-992.39));
      categoryPointerAnnotation0.equals(categoryPointerAnnotation0);
      CategoryPointerAnnotation categoryPointerAnnotation1 = new CategoryPointerAnnotation("/gj7*", 5.0, 0.0, 10.0);
      categoryPointerAnnotation1.setValue(5.0);
      Paint paint0 = categoryPointerAnnotation1.getPaint();
      categoryPointerAnnotation1.setArrowPaint(categoryPointerAnnotation0.DEFAULT_PAINT);
      categoryPointerAnnotation0.setArrowPaint(paint0);
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation1.getArrowLength();
      categoryPointerAnnotation1.setText("2@|Sx&=%z2N!v*S");
      categoryPointerAnnotation0.getAngle();
      categoryPointerAnnotation0.setArrowPaint(categoryPointerAnnotation1.DEFAULT_PAINT);
      categoryPointerAnnotation1.getArrowStroke();
      categoryPointerAnnotation0.setArrowLength(0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryPointerAnnotation1.draw(graphics2D0, categoryPlot0, rectangle2D0, (CategoryAxis) null, valueAxis0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("L_1_@f&", "L_1_@f&", (-782.3602), 50.0);
      categoryPointerAnnotation0.setRotationAngle((-782.3602));
      categoryPointerAnnotation0.equals("L_1_@f&");
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.equals("L_1_@f&");
      TextUtils.setUseFontMetricsGetStringBounds(true);
      categoryPointerAnnotation0.getBaseRadius();
      categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.getTipRadius();
      categoryPointerAnnotation0.setText("paint");
      categoryPointerAnnotation0.setTipRadius(50.0);
      categoryPointerAnnotation0.setArrowWidth(50.0);
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.setArrowLength(50.0);
      categoryPointerAnnotation0.setBaseRadius(50.0);
      categoryPointerAnnotation0.setLabelOffset(1.5707963267948966);
      categoryPointerAnnotation0.setText("L_1_@f&");
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.setArrowPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("c\"]XJ4REI", "c\"]XJ4REI", 30.0, 30.0);
      categoryPointerAnnotation0.clone();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("nu6-pf{-89JPy", "nu6-pf{-89JPy", 0.0, 0.0);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryPointerAnnotation0.notifyListeners(annotationChangeEvent0);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.setBaseRadius(0.0);
      categoryPointerAnnotation0.getLabelOffset();
      CategoryPointerAnnotation categoryPointerAnnotation1 = new CategoryPointerAnnotation("nu6-pf{-89JPy", 3.0, (-116.06489967157), (-116.06489967157));
      categoryPointerAnnotation0.equals(categoryPointerAnnotation1);
      categoryPointerAnnotation1.getAngle();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(categoryPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(categoryPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryPointerAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, (CategoryAxis) null, (ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(":&)QPCAv7}\"/&Pe", ":&)QPCAv7}\"/&Pe", 30.0, 409.5325084175994);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.fireAnnotationChanged();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.removeChangeListener((AnnotationChangeListener) null);
      Object object0 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.equals(object0);
      categoryPointerAnnotation0.setBaseRadius(409.5325084175994);
      categoryPointerAnnotation0.fireAnnotationChanged();
      categoryPointerAnnotation0.getArrowPaint();
      TextAnchor textAnchor0 = TextAnnotation.DEFAULT_TEXT_ANCHOR;
      categoryPointerAnnotation0.setTextAnchor(textAnchor0);
      categoryPointerAnnotation0.hashCode();
      categoryPointerAnnotation0.setArrowStroke(stroke0);
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.getLabelOffset();
      categoryPointerAnnotation0.setAngle(30.0);
      categoryPointerAnnotation0.equals(textAnchor0);
      categoryPointerAnnotation0.getArrowLength();
      categoryPointerAnnotation0.getArrowPaint();
      categoryPointerAnnotation0.getArrowStroke();
      categoryPointerAnnotation0.getArrowWidth();
      categoryPointerAnnotation0.setArrowWidth(3.0);
      categoryPointerAnnotation0.setLabelOffset(30.0);
      Object object1 = categoryPointerAnnotation0.clone();
      categoryPointerAnnotation0.equals(object1);
      double double0 = categoryPointerAnnotation0.getBaseRadius();
      assertEquals(409.5325084175994, double0, 0.01);
  }
}
