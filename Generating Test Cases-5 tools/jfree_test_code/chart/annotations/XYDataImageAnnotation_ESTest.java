/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:34:25 GMT 2023
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.annotations.XYDataImageAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYDataImageAnnotation_ESTest extends XYDataImageAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 1906.4904701651105, 1906.4904701651105, 1906.4904701651105, 1906.4904701651105);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.removeChangeListener(annotationChangeListener0);
      xYDataImageAnnotation0.equals(xYDataImageAnnotation0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 0.0, (-412.66543), 723.2, 200.0);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.notifyListeners(annotationChangeEvent0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation1 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn(axisLocation1).when(xYPlot0).getRangeAxisLocation();
      AnnotationChangeEvent annotationChangeEvent1 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.notifyListeners(annotationChangeEvent1);
      XYDataImageAnnotation xYDataImageAnnotation1 = (XYDataImageAnnotation)xYDataImageAnnotation0.clone();
      xYDataImageAnnotation0.equals(xYDataImageAnnotation1);
      Rectangle2D rectangle2D0 = null;
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.getXRange();
      xYDataImageAnnotation1.getYRange();
      xYDataImageAnnotation0.getYRange();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYDataImageAnnotation0.draw(graphics2D0, xYPlot0, (Rectangle2D) null, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 0.0, 0.0, 0.0, 0.0, false);
      xYDataImageAnnotation0.getYRange();
      xYDataImageAnnotation0.getYRange();
      Graphics2D graphics2D0 = null;
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn(axisLocation0).when(xYPlot0).getRangeAxisLocation();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.removeChangeListener(annotationChangeListener1);
      xYDataImageAnnotation0.addChangeListener(annotationChangeListener0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener2 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.addChangeListener(annotationChangeListener2);
      xYDataImageAnnotation0.addChangeListener((AnnotationChangeListener) null);
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYDataImageAnnotation0.draw((Graphics2D) null, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(image0).toString();
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 0.0, 0.5, 569.35046911, 0.0, true);
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation1 = new XYDataImageAnnotation(image1, 0.0, 2.0, 569.35046911, 2.0, true);
      xYDataImageAnnotation0.getXRange();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation1.removeChangeListener(annotationChangeListener0);
      xYDataImageAnnotation1.getXRange();
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.addChangeListener(annotationChangeListener1);
      xYDataImageAnnotation0.equals(xYDataImageAnnotation1);
      xYDataImageAnnotation0.getImage();
      xYDataImageAnnotation0.getXRange();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 3954.642, 3954.642, 1246.963259531087, 1296.198414679756, false);
      xYDataImageAnnotation0.getYRange();
      xYDataImageAnnotation0.getY();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, (-1743.143212528109), 0.0, 0.14, 1.0);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.notifyListeners(annotationChangeEvent0);
      xYDataImageAnnotation0.getX();
      xYDataImageAnnotation0.getY();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 0.0, 0.0, 0.0, 0.0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.addChangeListener(annotationChangeListener0);
      xYDataImageAnnotation0.getIncludeInDataBounds();
      xYDataImageAnnotation0.getWidth();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, (-899.48541622548), (-899.48541622548), 0.0, (-1.0));
      xYDataImageAnnotation0.equals("Ou4iO8C=&#*hSqSw9Z{");
      xYDataImageAnnotation0.getXRange();
      xYDataImageAnnotation0.getXRange();
      xYDataImageAnnotation0.setURL("Ou4iO8C=&#*hSqSw9Z{");
      xYDataImageAnnotation0.getHeight();
      xYDataImageAnnotation0.fireAnnotationChanged();
      // Undeclared exception!
      try { 
        xYDataImageAnnotation0.getYRange();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-899.48541622548) <= upper (-900.48541622548).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn("Null 'unitType' argument.").when(image0).toString();
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 1987.56292, 1987.56292, 1987.56292, 500.0, true);
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation1 = new XYDataImageAnnotation(image1, 1987.56292, 1987.56292, 500.0, (-655.5), true);
      xYDataImageAnnotation0.equals(xYDataImageAnnotation1);
      Object object0 = xYDataImageAnnotation0.clone();
      xYDataImageAnnotation0.equals(object0);
      xYDataImageAnnotation0.clone();
      xYDataImageAnnotation0.setURL("");
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.addChangeListener(annotationChangeListener0);
      xYDataImageAnnotation0.setToolTipText("");
      xYDataImageAnnotation0.setToolTipText("");
      xYDataImageAnnotation0.equals("");
      xYDataImageAnnotation0.getWidth();
      xYDataImageAnnotation0.hashCode();
      xYDataImageAnnotation0.getIncludeInDataBounds();
      xYDataImageAnnotation0.getImage();
      xYDataImageAnnotation1.getXRange();
      xYDataImageAnnotation0.getIncludeInDataBounds();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 135.0, (-2892.697141663), (-2892.697141663), 135.0);
      xYDataImageAnnotation0.clone();
      xYDataImageAnnotation0.clone();
      xYDataImageAnnotation0.getX();
      xYDataImageAnnotation0.hashCode();
      xYDataImageAnnotation0.setNotify(true);
      // Undeclared exception!
      try { 
        xYDataImageAnnotation0.getXRange();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (135.0) <= upper (-2757.697141663).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 0.0, 0.0, 0.0, 0.0, false);
      xYDataImageAnnotation0.getX();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 0.0, (-1364.26), 0.0, 1539.581226112203);
      xYDataImageAnnotation0.getXRange();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 0.0, (-3576.9513711803), (-1084.70322513849), 0.0);
      xYDataImageAnnotation0.getWidth();
      xYDataImageAnnotation0.getWidth();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 0.0, 0.0, 0.0, 0.0);
      xYDataImageAnnotation0.getYRange();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      // Undeclared exception!
      try { 
        xYDataImageAnnotation0.addEntity(plotRenderingInfo0, (Shape) null, 0, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.AbstractXYAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 654.7053657326, (-1.0), 0.0, (-1.0));
      xYDataImageAnnotation0.getXRange();
      xYDataImageAnnotation0.getX();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYDataImageAnnotation0.getYRange();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-1.0) <= upper (-2.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 10.0, 10.0, 10.0, 0.0, false);
      xYDataImageAnnotation0.clone();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYDataImageAnnotation0.draw(graphics2D0, (XYPlot) null, rectangle2D0, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYDataImageAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Image image0 = null;
      XYDataImageAnnotation xYDataImageAnnotation0 = null;
      try {
        xYDataImageAnnotation0 = new XYDataImageAnnotation((Image) null, 918.74326, 0.0, (-1456.0), (-1456.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, (-64.212), (-64.212), (-64.212), 0.0);
      assertNotNull(xYDataImageAnnotation0);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(0.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertEquals((-64.212), xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals((-64.212), xYDataImageAnnotation0.getY(), 0.01);
      assertEquals((-64.212), xYDataImageAnnotation0.getX(), 0.01);
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.notifyListeners(annotationChangeEvent0);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(0.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertEquals((-64.212), xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals((-64.212), xYDataImageAnnotation0.getY(), 0.01);
      assertEquals((-64.212), xYDataImageAnnotation0.getX(), 0.01);
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYDataImageAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 206, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(image0).toString();
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 3070.0, 1149.49428622, 1149.49428622, 1149.49428622);
      assertNotNull(xYDataImageAnnotation0);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(1149.49428622, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertEquals(3070.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      
      xYDataImageAnnotation0.setNotify(false);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(1149.49428622, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getNotify());
      assertEquals(3070.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      
      Range range0 = xYDataImageAnnotation0.getXRange();
      assertNotNull(range0);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(1149.49428622, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getNotify());
      assertEquals(3070.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(1149.4942862200005, range0.getLength(), 0.01);
      assertEquals(4219.4942862200005, range0.getUpperBound(), 0.01);
      assertEquals(3644.7471431100003, range0.getCentralValue(), 0.01);
      assertEquals(3070.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      
      Range range1 = xYDataImageAnnotation0.getYRange();
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(1149.49428622, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getNotify());
      assertEquals(3070.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(1149.49428622, range1.getLength(), 0.01);
      assertEquals(2298.98857244, range1.getUpperBound(), 0.01);
      assertEquals(1149.49428622, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1724.24142933, range1.getCentralValue(), 0.01);
      
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation1 = new XYDataImageAnnotation(image1, 2889.43385707, 3070.0, 3070.0, 1149.49428622, false);
      assertFalse(xYDataImageAnnotation1.equals((Object)xYDataImageAnnotation0));
      assertNotNull(xYDataImageAnnotation1);
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertEquals(2889.43385707, xYDataImageAnnotation1.getX(), 0.01);
      assertTrue(xYDataImageAnnotation1.getNotify());
      assertEquals(1149.49428622, xYDataImageAnnotation1.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation1.getURL());
      assertEquals(3070.0, xYDataImageAnnotation1.getWidth(), 0.01);
      assertEquals(3070.0, xYDataImageAnnotation1.getY(), 0.01);
      assertNull(xYDataImageAnnotation1.getToolTipText());
      
      Range range2 = xYDataImageAnnotation1.getXRange();
      assertFalse(xYDataImageAnnotation1.equals((Object)xYDataImageAnnotation0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(xYDataImageAnnotation1, xYDataImageAnnotation0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertEquals(2889.43385707, xYDataImageAnnotation1.getX(), 0.01);
      assertTrue(xYDataImageAnnotation1.getNotify());
      assertEquals(1149.49428622, xYDataImageAnnotation1.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation1.getURL());
      assertEquals(3070.0, xYDataImageAnnotation1.getWidth(), 0.01);
      assertEquals(3070.0, xYDataImageAnnotation1.getY(), 0.01);
      assertNull(xYDataImageAnnotation1.getToolTipText());
      assertEquals(5959.43385707, range2.getUpperBound(), 0.01);
      assertEquals(2889.43385707, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(4424.43385707, range2.getCentralValue(), 0.01);
      assertEquals(3070.0, range2.getLength(), 0.01);
      
      boolean boolean0 = xYDataImageAnnotation0.equals(xYDataImageAnnotation1);
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertFalse(xYDataImageAnnotation1.equals((Object)xYDataImageAnnotation0));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNotSame(xYDataImageAnnotation1, xYDataImageAnnotation0);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(1149.49428622, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getNotify());
      assertEquals(3070.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertEquals(2889.43385707, xYDataImageAnnotation1.getX(), 0.01);
      assertTrue(xYDataImageAnnotation1.getNotify());
      assertEquals(1149.49428622, xYDataImageAnnotation1.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation1.getURL());
      assertEquals(3070.0, xYDataImageAnnotation1.getWidth(), 0.01);
      assertEquals(3070.0, xYDataImageAnnotation1.getY(), 0.01);
      assertNull(xYDataImageAnnotation1.getToolTipText());
      assertFalse(boolean0);
      
      xYDataImageAnnotation0.setToolTipText("S6UPN3)NTfZ6k");
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(1149.49428622, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals("S6UPN3)NTfZ6k", xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getNotify());
      assertEquals(3070.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      
      double double0 = xYDataImageAnnotation0.getX();
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(1149.49428622, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals("S6UPN3)NTfZ6k", xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getNotify());
      assertEquals(3070.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(3070.0, double0, 0.01);
      
      xYDataImageAnnotation0.setNotify(false);
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(1149.49428622, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals("S6UPN3)NTfZ6k", xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getNotify());
      assertEquals(3070.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      
      boolean boolean1 = xYDataImageAnnotation0.getIncludeInDataBounds();
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(1149.49428622, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals("S6UPN3)NTfZ6k", xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getNotify());
      assertEquals(3070.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertFalse(boolean1);
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.addChangeListener(annotationChangeListener0);
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(1149.49428622, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals("S6UPN3)NTfZ6k", xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getNotify());
      assertEquals(3070.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      
      double double1 = xYDataImageAnnotation0.getHeight();
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(1149.49428622, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals("S6UPN3)NTfZ6k", xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getNotify());
      assertEquals(3070.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(1149.49428622, double1, 0.01);
      
      double double2 = xYDataImageAnnotation0.getWidth();
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(1149.49428622, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals("S6UPN3)NTfZ6k", xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getNotify());
      assertEquals(3070.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(1149.49428622, double2, 0.01);
      
      Image image2 = xYDataImageAnnotation0.getImage();
      assertFalse(image2.equals((Object)image1));
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotNull(image2);
      assertSame(image2, image0);
      assertNotSame(image2, image1);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertEquals(0.0F, image2.getAccelerationPriority(), 0.01F);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(1149.49428622, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals("S6UPN3)NTfZ6k", xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getNotify());
      assertEquals(3070.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(1149.49428622, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      
      double double3 = xYDataImageAnnotation1.getWidth();
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertFalse(xYDataImageAnnotation1.equals((Object)xYDataImageAnnotation0));
      assertNotSame(xYDataImageAnnotation1, xYDataImageAnnotation0);
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertEquals(2889.43385707, xYDataImageAnnotation1.getX(), 0.01);
      assertTrue(xYDataImageAnnotation1.getNotify());
      assertEquals(1149.49428622, xYDataImageAnnotation1.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation1.getURL());
      assertEquals(3070.0, xYDataImageAnnotation1.getWidth(), 0.01);
      assertEquals(3070.0, xYDataImageAnnotation1.getY(), 0.01);
      assertNull(xYDataImageAnnotation1.getToolTipText());
      assertEquals(3070.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, (-1901.02968001772), (-1901.02968001772), (-1.0), (-1901.02968001772), true);
      assertNotNull(xYDataImageAnnotation0);
      assertEquals((-1901.02968001772), xYDataImageAnnotation0.getX(), 0.01);
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertTrue(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals((-1901.02968001772), xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals((-1901.02968001772), xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals((-1.0), xYDataImageAnnotation0.getWidth(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      
      // Undeclared exception!
      try { 
        xYDataImageAnnotation0.getYRange();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-1901.02968001772) <= upper (-3802.05936003544).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYDataImageAnnotation xYDataImageAnnotation0 = null;
      try {
        xYDataImageAnnotation0 = new XYDataImageAnnotation((Image) null, 0.0, 0.0, 0.0, 3203.6688, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 0.0, 0.0, 0.0, 200.0);
      assertNotNull(xYDataImageAnnotation0);
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.0, xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(0.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(200.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation1 = new XYDataImageAnnotation(image1, 200.0, 0.0, 0.0, 0.0, false);
      assertFalse(xYDataImageAnnotation1.equals((Object)xYDataImageAnnotation0));
      assertNotNull(xYDataImageAnnotation1);
      assertTrue(xYDataImageAnnotation1.getNotify());
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertEquals(0.0, xYDataImageAnnotation1.getY(), 0.01);
      assertNull(xYDataImageAnnotation1.getURL());
      assertEquals(0.0, xYDataImageAnnotation1.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation1.getToolTipText());
      assertEquals(200.0, xYDataImageAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation1.getWidth(), 0.01);
      
      boolean boolean0 = xYDataImageAnnotation0.equals(xYDataImageAnnotation1);
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertFalse(xYDataImageAnnotation1.equals((Object)xYDataImageAnnotation0));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNotSame(xYDataImageAnnotation1, xYDataImageAnnotation0);
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.0, xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(0.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(200.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertTrue(xYDataImageAnnotation1.getNotify());
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertEquals(0.0, xYDataImageAnnotation1.getY(), 0.01);
      assertNull(xYDataImageAnnotation1.getURL());
      assertEquals(0.0, xYDataImageAnnotation1.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation1.getToolTipText());
      assertEquals(200.0, xYDataImageAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation1.getWidth(), 0.01);
      assertFalse(boolean0);
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.addChangeListener(annotationChangeListener0);
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.0, xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(0.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(200.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      
      boolean boolean1 = xYDataImageAnnotation0.equals("KJ;*W8_*&");
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.0, xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(0.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(200.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertFalse(boolean1);
      
      xYDataImageAnnotation0.hashCode();
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.0, xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(0.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(200.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, (-4010.49359), (-4010.49359), (-4010.49359), (-4010.49359));
      assertNotNull(xYDataImageAnnotation0);
      assertEquals((-4010.49359), xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals((-4010.49359), xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals((-4010.49359), xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals((-4010.49359), xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      
      XYDataImageAnnotation xYDataImageAnnotation1 = (XYDataImageAnnotation)xYDataImageAnnotation0.clone();
      assertTrue(xYDataImageAnnotation1.equals((Object)xYDataImageAnnotation0));
      assertNotNull(xYDataImageAnnotation1);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNotSame(xYDataImageAnnotation1, xYDataImageAnnotation0);
      assertEquals((-4010.49359), xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals((-4010.49359), xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals((-4010.49359), xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals((-4010.49359), xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation1.getToolTipText());
      assertNull(xYDataImageAnnotation1.getURL());
      assertEquals((-4010.49359), xYDataImageAnnotation1.getX(), 0.01);
      assertEquals((-4010.49359), xYDataImageAnnotation1.getY(), 0.01);
      assertTrue(xYDataImageAnnotation1.getNotify());
      assertEquals((-4010.49359), xYDataImageAnnotation1.getWidth(), 0.01);
      assertEquals((-4010.49359), xYDataImageAnnotation1.getHeight(), 0.01);
      
      boolean boolean0 = xYDataImageAnnotation0.equals(xYDataImageAnnotation1);
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertTrue(xYDataImageAnnotation1.equals((Object)xYDataImageAnnotation0));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNotSame(xYDataImageAnnotation1, xYDataImageAnnotation0);
      assertEquals((-4010.49359), xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals((-4010.49359), xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals((-4010.49359), xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals((-4010.49359), xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation1.getToolTipText());
      assertNull(xYDataImageAnnotation1.getURL());
      assertEquals((-4010.49359), xYDataImageAnnotation1.getX(), 0.01);
      assertEquals((-4010.49359), xYDataImageAnnotation1.getY(), 0.01);
      assertTrue(xYDataImageAnnotation1.getNotify());
      assertEquals((-4010.49359), xYDataImageAnnotation1.getWidth(), 0.01);
      assertEquals((-4010.49359), xYDataImageAnnotation1.getHeight(), 0.01);
      assertTrue(boolean0);
      
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation2 = new XYDataImageAnnotation(image1, 1.0, (-4010.49359), (-4010.49359), (-1.0), true);
      assertFalse(xYDataImageAnnotation2.equals((Object)xYDataImageAnnotation0));
      assertFalse(xYDataImageAnnotation2.equals((Object)xYDataImageAnnotation1));
      assertNotNull(xYDataImageAnnotation2);
      assertEquals((-4010.49359), xYDataImageAnnotation2.getWidth(), 0.01);
      assertTrue(xYDataImageAnnotation2.getNotify());
      assertTrue(xYDataImageAnnotation2.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation2.getURL());
      assertEquals(1.0, xYDataImageAnnotation2.getX(), 0.01);
      assertEquals((-1.0), xYDataImageAnnotation2.getHeight(), 0.01);
      assertEquals((-4010.49359), xYDataImageAnnotation2.getY(), 0.01);
      assertNull(xYDataImageAnnotation2.getToolTipText());
      
      boolean boolean1 = xYDataImageAnnotation0.equals(xYDataImageAnnotation2);
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation2));
      assertFalse(xYDataImageAnnotation2.equals((Object)xYDataImageAnnotation0));
      assertFalse(xYDataImageAnnotation2.equals((Object)xYDataImageAnnotation1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation2);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNotSame(xYDataImageAnnotation2, xYDataImageAnnotation0);
      assertNotSame(xYDataImageAnnotation2, xYDataImageAnnotation1);
      assertEquals((-4010.49359), xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals((-4010.49359), xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals((-4010.49359), xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals((-4010.49359), xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertEquals((-4010.49359), xYDataImageAnnotation2.getWidth(), 0.01);
      assertTrue(xYDataImageAnnotation2.getNotify());
      assertTrue(xYDataImageAnnotation2.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation2.getURL());
      assertEquals(1.0, xYDataImageAnnotation2.getX(), 0.01);
      assertEquals((-1.0), xYDataImageAnnotation2.getHeight(), 0.01);
      assertEquals((-4010.49359), xYDataImageAnnotation2.getY(), 0.01);
      assertNull(xYDataImageAnnotation2.getToolTipText());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 626.2499453, 0.0, 0.0, 1499.9309332054609, false);
      assertNotNull(xYDataImageAnnotation0);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(626.2499453, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(1499.9309332054609, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      Range range0 = xYDataImageAnnotation0.getXRange();
      assertNotNull(range0);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(626.2499453, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(1499.9309332054609, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(626.2499453, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(626.2499453, range0.getCentralValue(), 0.01);
      assertEquals(626.2499453, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      
      boolean boolean0 = xYDataImageAnnotation0.hasListener(eventListener0);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(626.2499453, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(1499.9309332054609, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertFalse(boolean0);
      
      double double0 = xYDataImageAnnotation0.getX();
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(626.2499453, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(1499.9309332054609, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(626.2499453, double0, 0.01);
      
      Range range1 = xYDataImageAnnotation0.getXRange();
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(626.2499453, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(1499.9309332054609, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(626.2499453, range1.getLowerBound(), 0.01);
      assertEquals(626.2499453, range1.getCentralValue(), 0.01);
      assertEquals(626.2499453, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      
      double double1 = xYDataImageAnnotation0.getY();
      assertNotEquals(double1, double0, 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(626.2499453, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(1499.9309332054609, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(0.0, double1, 0.01);
      
      XYDataImageAnnotation xYDataImageAnnotation1 = (XYDataImageAnnotation)xYDataImageAnnotation0.clone();
      assertTrue(xYDataImageAnnotation1.equals((Object)xYDataImageAnnotation0));
      assertNotNull(xYDataImageAnnotation1);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNotSame(xYDataImageAnnotation1, xYDataImageAnnotation0);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(626.2499453, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(1499.9309332054609, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(0.0, xYDataImageAnnotation1.getWidth(), 0.01);
      assertNull(xYDataImageAnnotation1.getURL());
      assertNull(xYDataImageAnnotation1.getToolTipText());
      assertTrue(xYDataImageAnnotation1.getNotify());
      assertEquals(1499.9309332054609, xYDataImageAnnotation1.getHeight(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation1.getY(), 0.01);
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertEquals(626.2499453, xYDataImageAnnotation1.getX(), 0.01);
      
      boolean boolean1 = xYDataImageAnnotation0.equals(xYDataImageAnnotation1);
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertTrue(xYDataImageAnnotation1.equals((Object)xYDataImageAnnotation0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNotSame(xYDataImageAnnotation1, xYDataImageAnnotation0);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(626.2499453, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(1499.9309332054609, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(0.0, xYDataImageAnnotation1.getWidth(), 0.01);
      assertNull(xYDataImageAnnotation1.getURL());
      assertNull(xYDataImageAnnotation1.getToolTipText());
      assertTrue(xYDataImageAnnotation1.getNotify());
      assertEquals(1499.9309332054609, xYDataImageAnnotation1.getHeight(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation1.getY(), 0.01);
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertEquals(626.2499453, xYDataImageAnnotation1.getX(), 0.01);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(image0).toString();
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 905.0, 905.0, 905.0, 0.14);
      assertNotNull(xYDataImageAnnotation0);
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.fireAnnotationChanged();
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      
      xYDataImageAnnotation0.notifyListeners(annotationChangeEvent0);
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      
      Image image1 = xYDataImageAnnotation0.getImage();
      assertNotNull(image1);
      assertSame(image1, image0);
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(0.0F, image1.getAccelerationPriority(), 0.01F);
      
      xYDataImageAnnotation0.fireAnnotationChanged();
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      
      XYDataImageAnnotation xYDataImageAnnotation1 = (XYDataImageAnnotation)xYDataImageAnnotation0.clone();
      assertTrue(xYDataImageAnnotation1.equals((Object)xYDataImageAnnotation0));
      assertNotNull(xYDataImageAnnotation1);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNotSame(xYDataImageAnnotation1, xYDataImageAnnotation0);
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(0.14, xYDataImageAnnotation1.getHeight(), 0.01);
      assertTrue(xYDataImageAnnotation1.getNotify());
      assertNull(xYDataImageAnnotation1.getToolTipText());
      assertEquals(905.0, xYDataImageAnnotation1.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation1.getY(), 0.01);
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertEquals(905.0, xYDataImageAnnotation1.getX(), 0.01);
      assertNull(xYDataImageAnnotation1.getURL());
      
      xYDataImageAnnotation0.setNotify(true);
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      
      Range range0 = xYDataImageAnnotation0.getXRange();
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotNull(range0);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(905.0, range0.getLength(), 0.01);
      assertEquals(1357.5, range0.getCentralValue(), 0.01);
      assertEquals(1810.0, range0.getUpperBound(), 0.01);
      assertEquals(905.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      
      Range range1 = xYDataImageAnnotation0.getXRange();
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNotSame(range1, range0);
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(905.0, range1.getLowerBound(), 0.01);
      assertEquals(1357.5, range1.getCentralValue(), 0.01);
      assertEquals(1810.0, range1.getUpperBound(), 0.01);
      assertEquals(905.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      
      double double0 = xYDataImageAnnotation0.getWidth();
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(905.0, double0, 0.01);
      
      XYDataImageAnnotation xYDataImageAnnotation2 = new XYDataImageAnnotation(image1, 905.0, 905.0, 926.92951824, 1290.1402012351612);
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertFalse(xYDataImageAnnotation2.equals((Object)xYDataImageAnnotation0));
      assertFalse(xYDataImageAnnotation2.equals((Object)xYDataImageAnnotation1));
      assertNotNull(xYDataImageAnnotation2);
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(0.0F, image1.getAccelerationPriority(), 0.01F);
      assertEquals(1290.1402012351612, xYDataImageAnnotation2.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation2.getToolTipText());
      assertEquals(926.92951824, xYDataImageAnnotation2.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation2.getY(), 0.01);
      assertFalse(xYDataImageAnnotation2.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation2.getURL());
      assertTrue(xYDataImageAnnotation2.getNotify());
      assertEquals(905.0, xYDataImageAnnotation2.getX(), 0.01);
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.addChangeListener(annotationChangeListener0);
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation2));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation2);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation2.addChangeListener(annotationChangeListener1);
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation2));
      assertFalse(xYDataImageAnnotation2.equals((Object)xYDataImageAnnotation0));
      assertFalse(xYDataImageAnnotation2.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation2);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertSame(image1, image0);
      assertNotSame(xYDataImageAnnotation2, xYDataImageAnnotation0);
      assertNotSame(xYDataImageAnnotation2, xYDataImageAnnotation1);
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(0.0F, image1.getAccelerationPriority(), 0.01F);
      assertEquals(1290.1402012351612, xYDataImageAnnotation2.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation2.getToolTipText());
      assertEquals(926.92951824, xYDataImageAnnotation2.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation2.getY(), 0.01);
      assertFalse(xYDataImageAnnotation2.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation2.getURL());
      assertTrue(xYDataImageAnnotation2.getNotify());
      assertEquals(905.0, xYDataImageAnnotation2.getX(), 0.01);
      
      boolean boolean0 = xYDataImageAnnotation0.equals(xYDataImageAnnotation2);
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation2));
      assertFalse(xYDataImageAnnotation2.equals((Object)xYDataImageAnnotation0));
      assertFalse(xYDataImageAnnotation2.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation2);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertSame(image1, image0);
      assertNotSame(xYDataImageAnnotation2, xYDataImageAnnotation0);
      assertNotSame(xYDataImageAnnotation2, xYDataImageAnnotation1);
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(0.0F, image1.getAccelerationPriority(), 0.01F);
      assertEquals(1290.1402012351612, xYDataImageAnnotation2.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation2.getToolTipText());
      assertEquals(926.92951824, xYDataImageAnnotation2.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation2.getY(), 0.01);
      assertFalse(xYDataImageAnnotation2.getIncludeInDataBounds());
      assertNull(xYDataImageAnnotation2.getURL());
      assertTrue(xYDataImageAnnotation2.getNotify());
      assertEquals(905.0, xYDataImageAnnotation2.getX(), 0.01);
      assertFalse(boolean0);
      
      double double1 = xYDataImageAnnotation0.getWidth();
      assertTrue(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation2));
      assertEquals(double1, double0, 0.01);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation2);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNull(xYDataImageAnnotation0.getURL());
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(0.14, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getX(), 0.01);
      assertEquals(905.0, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(905.0, double1, 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYDataImageAnnotation2.draw(graphics2D0, xYPlot0, (Rectangle2D) null, valueAxis0, valueAxis0, (-817), (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 1176.228194218783, 1.0, 1008.0, 0.0);
      assertNotNull(xYDataImageAnnotation0);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(1.0, xYDataImageAnnotation0.getY(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(0.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(1008.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(1176.228194218783, xYDataImageAnnotation0.getX(), 0.01);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn(axisLocation0).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYDataImageAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 0, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 1597.164542, 897.55832686, 1597.164542, 0.0, false);
      assertNotNull(xYDataImageAnnotation0);
      assertEquals(1597.164542, xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(1597.164542, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(897.55832686, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation1 = new XYDataImageAnnotation(image1, 1597.164542, 0.0, 897.55832686, 897.55832686);
      assertFalse(xYDataImageAnnotation1.equals((Object)xYDataImageAnnotation0));
      assertNotNull(xYDataImageAnnotation1);
      assertEquals(897.55832686, xYDataImageAnnotation1.getWidth(), 0.01);
      assertEquals(897.55832686, xYDataImageAnnotation1.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation1.getToolTipText());
      assertTrue(xYDataImageAnnotation1.getNotify());
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertEquals(1597.164542, xYDataImageAnnotation1.getX(), 0.01);
      assertNull(xYDataImageAnnotation1.getURL());
      assertEquals(0.0, xYDataImageAnnotation1.getY(), 0.01);
      
      boolean boolean0 = xYDataImageAnnotation0.equals(xYDataImageAnnotation1);
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertFalse(xYDataImageAnnotation1.equals((Object)xYDataImageAnnotation0));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNotSame(xYDataImageAnnotation1, xYDataImageAnnotation0);
      assertEquals(1597.164542, xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(1597.164542, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(897.55832686, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(897.55832686, xYDataImageAnnotation1.getWidth(), 0.01);
      assertEquals(897.55832686, xYDataImageAnnotation1.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation1.getToolTipText());
      assertTrue(xYDataImageAnnotation1.getNotify());
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertEquals(1597.164542, xYDataImageAnnotation1.getX(), 0.01);
      assertNull(xYDataImageAnnotation1.getURL());
      assertEquals(0.0, xYDataImageAnnotation1.getY(), 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = xYDataImageAnnotation0.equals("1 $(");
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertEquals(1597.164542, xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(1597.164542, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(897.55832686, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertFalse(boolean1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Range range0 = xYDataImageAnnotation0.getYRange();
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotNull(range0);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertEquals(1597.164542, xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(1597.164542, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(897.55832686, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(897.55832686, range0.getCentralValue(), 0.01);
      assertEquals(897.55832686, range0.getUpperBound(), 0.01);
      assertEquals(897.55832686, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYDataImageAnnotation0.notifyListeners(annotationChangeEvent0);
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertEquals(1597.164542, xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(1597.164542, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(897.55832686, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      
      Range range1 = xYDataImageAnnotation0.getYRange();
      assertFalse(xYDataImageAnnotation0.equals((Object)xYDataImageAnnotation1));
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(xYDataImageAnnotation0, xYDataImageAnnotation1);
      assertNotSame(range1, range0);
      assertEquals(1597.164542, xYDataImageAnnotation0.getX(), 0.01);
      assertNull(xYDataImageAnnotation0.getToolTipText());
      assertTrue(xYDataImageAnnotation0.getNotify());
      assertEquals(1597.164542, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertNull(xYDataImageAnnotation0.getURL());
      assertEquals(897.55832686, xYDataImageAnnotation0.getY(), 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertFalse(range1.isNaNRange());
      assertEquals(897.55832686, range1.getCentralValue(), 0.01);
      assertEquals(897.55832686, range1.getUpperBound(), 0.01);
      assertEquals(897.55832686, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYDataImageAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 792, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(image0).toString();
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 4.9E-324, (-967.0), (-1.0), 0.0);
      xYDataImageAnnotation0.getHeight();
      xYDataImageAnnotation0.clone();
      xYDataImageAnnotation0.getYRange();
      xYDataImageAnnotation0.hashCode();
      xYDataImageAnnotation0.getY();
      xYDataImageAnnotation0.getIncludeInDataBounds();
      xYDataImageAnnotation0.getImage();
      xYDataImageAnnotation0.hashCode();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYDataImageAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 14.0, 14.0, 14.0, 2466.89074510617, true);
      Range range0 = xYDataImageAnnotation0.getXRange();
      assertEquals(14.0, xYDataImageAnnotation0.getY(), 0.01);
      assertEquals(21.0, range0.getCentralValue(), 0.01);
      assertEquals(14.0, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(2466.89074510617, xYDataImageAnnotation0.getHeight(), 0.01);
      assertTrue(xYDataImageAnnotation0.getIncludeInDataBounds());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 4192.7777143, 460.18344067616, 460.18344067616, 0.0);
      double double0 = xYDataImageAnnotation0.getX();
      assertEquals(4192.7777143, double0, 0.01);
      assertFalse(xYDataImageAnnotation0.getIncludeInDataBounds());
      assertEquals(460.18344067616, xYDataImageAnnotation0.getWidth(), 0.01);
      assertEquals(0.0, xYDataImageAnnotation0.getHeight(), 0.01);
      assertEquals(460.18344067616, xYDataImageAnnotation0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(image0, 1930.2556022797455, 1930.2556022797455, (-6272.8), 1930.2556022797455);
      XYDataImageAnnotation xYDataImageAnnotation1 = (XYDataImageAnnotation)xYDataImageAnnotation0.clone();
      boolean boolean0 = xYDataImageAnnotation0.equals(xYDataImageAnnotation1);
      assertFalse(xYDataImageAnnotation1.getIncludeInDataBounds());
      assertEquals((-6272.8), xYDataImageAnnotation1.getWidth(), 0.01);
      assertEquals(1930.2556022797455, xYDataImageAnnotation1.getY(), 0.01);
      assertEquals(1930.2556022797455, xYDataImageAnnotation1.getHeight(), 0.01);
      assertEquals(1930.2556022797455, xYDataImageAnnotation1.getX(), 0.01);
      assertTrue(boolean0);
  }
}
