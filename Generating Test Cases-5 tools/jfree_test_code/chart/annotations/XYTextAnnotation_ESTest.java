/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:33:14 GMT 2023
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.text.TextUtils;
import org.jfree.chart.ui.TextAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYTextAnnotation_ESTest extends XYTextAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 0.0, 0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.equals("");
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.setY((-1.0));
      xYTextAnnotation0.setFont(valueAxis0.DEFAULT_AXIS_LABEL_FONT);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.hasListener(eventListener0);
      // Undeclared exception!
      try { 
        xYTextAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 29, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 2450.7036634876, 2450.7036634876);
      Paint paint0 = xYTextAnnotation0.getPaint();
      xYTextAnnotation0.setBackgroundPaint(paint0);
      xYTextAnnotation0.getOutlineStroke();
      xYTextAnnotation0.setOutlineVisible(false);
      xYTextAnnotation0.getBackgroundPaint();
      xYTextAnnotation0.hashCode();
      Object object0 = xYTextAnnotation0.clone();
      object0.equals(object0);
      Font font0 = XYTextAnnotation.DEFAULT_FONT;
      xYTextAnnotation0.setFont(font0);
      xYTextAnnotation0.equals("");
      xYTextAnnotation0.getRotationAnchor();
      xYTextAnnotation0.getRotationAnchor();
      xYTextAnnotation0.hashCode();
      xYTextAnnotation0.getRotationAnchor();
      xYTextAnnotation0.setText("paint");
      xYTextAnnotation0.getTextAnchor();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("LNU", 1.0, (-695.764179177));
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      Color color0 = (Color)XYTextAnnotation.DEFAULT_PAINT;
      xYTextAnnotation0.clone();
      xYTextAnnotation0.setOutlinePaint(color0);
      XYTextAnnotation xYTextAnnotation1 = new XYTextAnnotation("LNU", (-695.764179177), 1.0);
      xYTextAnnotation0.equals("");
      xYTextAnnotation0.equals(xYTextAnnotation1);
      xYTextAnnotation0.setY(400.0);
      xYTextAnnotation0.removeChangeListener(annotationChangeListener0);
      xYTextAnnotation0.setY((-695.764179177));
      xYTextAnnotation0.hashCode();
      xYTextAnnotation0.getTextAnchor();
      Font font0 = xYTextAnnotation0.getFont();
      xYTextAnnotation0.setFont(font0);
      // Undeclared exception!
      try { 
        xYTextAnnotation0.setOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "XM|-SP\"kJiaZz}27";
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("XM|-SP\"kJiaZz}27", 1.0, 834.972218);
      xYTextAnnotation0.setURL("9G");
      xYTextAnnotation0.setRotationAngle(834.972218);
      xYTextAnnotation0.setRotationAngle(1.0);
      Stroke stroke0 = xYTextAnnotation0.getOutlineStroke();
      xYTextAnnotation0.setOutlineStroke(stroke0);
      Object object0 = xYTextAnnotation0.clone();
      xYTextAnnotation0.equals(object0);
      xYTextAnnotation0.clone();
      xYTextAnnotation0.getText();
      xYTextAnnotation0.getText();
      xYTextAnnotation0.getBackgroundPaint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTextAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, (ValueAxis) null, (ValueAxis) null, (-34505881), plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("_J[d::0", (-1.0), 0.0);
      Paint paint0 = xYTextAnnotation0.getOutlinePaint();
      xYTextAnnotation0.setPaint(paint0);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.hasListener(eventListener0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.removeChangeListener(annotationChangeListener0);
      xYTextAnnotation0.equals("_J[d::0");
      XYTextAnnotation xYTextAnnotation1 = new XYTextAnnotation("first", (-1.0), (-3486.1));
      xYTextAnnotation1.fireAnnotationChanged();
      TextAnchor textAnchor0 = xYTextAnnotation1.getTextAnchor();
      xYTextAnnotation0.setTextAnchor(textAnchor0);
      xYTextAnnotation0.getPaint();
      xYTextAnnotation0.clone();
      xYTextAnnotation1.setBackgroundPaint(xYTextAnnotation0.DEFAULT_PAINT);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.setOutlinePaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTextAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("iCp>:#*tgRWC~v%e{&", 0.0, 0.0);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.notifyListeners(annotationChangeEvent0);
      xYTextAnnotation0.hashCode();
      xYTextAnnotation0.setX(0.0);
      xYTextAnnotation0.setOutlineVisible(false);
      xYTextAnnotation0.getRotationAngle();
      xYTextAnnotation0.setOutlineVisible(false);
      xYTextAnnotation0.getBackgroundPaint();
      xYTextAnnotation0.setBackgroundPaint((Paint) null);
      Paint paint0 = xYTextAnnotation0.getPaint();
      xYTextAnnotation0.setPaint(paint0);
      xYTextAnnotation0.getPaint();
      xYTextAnnotation0.setText("iCp>:#*tgRWC~v%e{&");
      xYTextAnnotation0.isOutlineVisible();
      xYTextAnnotation0.isOutlineVisible();
      xYTextAnnotation0.getOutlineStroke();
      xYTextAnnotation0.getOutlinePaint();
      xYTextAnnotation0.getRotationAnchor();
      xYTextAnnotation0.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTextAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 1140.11250225, 512.99515);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        xYTextAnnotation0.setText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", (-1921.855552), (-1921.855552));
      Paint paint0 = xYTextAnnotation0.getOutlinePaint();
      xYTextAnnotation0.setPaint(paint0);
      Font font0 = XYTextAnnotation.DEFAULT_FONT;
      xYTextAnnotation0.setFont(font0);
      xYTextAnnotation0.setX((-1921.855552));
      xYTextAnnotation0.getRotationAnchor();
      xYTextAnnotation0.clone();
      xYTextAnnotation0.hashCode();
      xYTextAnnotation0.setBackgroundPaint(paint0);
      xYTextAnnotation0.setBackgroundPaint(paint0);
      xYTextAnnotation0.getRotationAnchor();
      xYTextAnnotation0.equals("");
      xYTextAnnotation0.clone();
      XYTextAnnotation xYTextAnnotation1 = new XYTextAnnotation("", 0.0, (-1203.3108229066504));
      xYTextAnnotation0.equals(xYTextAnnotation1);
      xYTextAnnotation0.setBackgroundPaint(paint0);
      xYTextAnnotation0.setRotationAngle(0.0);
      xYTextAnnotation0.getY();
      xYTextAnnotation0.equals(xYTextAnnotation1);
      xYTextAnnotation1.getRotationAnchor();
      Object object0 = xYTextAnnotation1.clone();
      xYTextAnnotation1.equals(object0);
      xYTextAnnotation1.setRotationAnchor(xYTextAnnotation0.DEFAULT_TEXT_ANCHOR);
      xYTextAnnotation1.getTextAnchor();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("paint", (-1542.426291), 0.0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      xYTextAnnotation0.setText("paint");
      xYTextAnnotation0.isOutlineVisible();
      xYTextAnnotation0.setX(0.0);
      xYTextAnnotation0.setOutlineVisible(true);
      Font font0 = XYTextAnnotation.DEFAULT_FONT;
      xYTextAnnotation0.setFont(font0);
      Paint paint0 = xYTextAnnotation0.getPaint();
      xYTextAnnotation0.setPaint(paint0);
      TextAnchor textAnchor0 = XYTextAnnotation.DEFAULT_TEXT_ANCHOR;
      xYTextAnnotation0.setRotationAnchor(textAnchor0);
      xYTextAnnotation0.getY();
      xYTextAnnotation0.isOutlineVisible();
      xYTextAnnotation0.setY(0.01);
      xYTextAnnotation0.equals(font0);
      xYTextAnnotation0.getFont();
      xYTextAnnotation0.getOutlinePaint();
      xYTextAnnotation0.getBackgroundPaint();
      xYTextAnnotation0.equals((Object) null);
      xYTextAnnotation0.hashCode();
      xYTextAnnotation0.setY((-1777.0));
      xYTextAnnotation0.setX(0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("paint", (-520.8781084726146), (-520.8781084726146));
      Paint paint0 = xYTextAnnotation0.getOutlinePaint();
      xYTextAnnotation0.setPaint(paint0);
      xYTextAnnotation0.fireAnnotationChanged();
      TextUtils.setUseDrawRotatedStringWorkaround(false);
      // Undeclared exception!
      try { 
        xYTextAnnotation0.setRotationAnchor((TextAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", (-1.0), (-1.0));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.setY((-1.0));
      xYTextAnnotation0.setNotify(true);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.fireAnnotationChanged();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTextAnnotation0.draw(graphics2D0, (XYPlot) null, rectangle2D0, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("paint", 1903.50408471, 0.5235987755982988);
      TextUtils.setUseFontMetricsGetStringBounds(false);
      TextAnchor textAnchor0 = xYTextAnnotation0.getRotationAnchor();
      Color color0 = (Color)XYTextAnnotation.DEFAULT_PAINT;
      xYTextAnnotation0.setOutlinePaint(color0);
      xYTextAnnotation0.fireAnnotationChanged();
      xYTextAnnotation0.getY();
      Font font0 = xYTextAnnotation0.getFont();
      xYTextAnnotation0.setFont(font0);
      xYTextAnnotation0.getText();
      xYTextAnnotation0.getOutlinePaint();
      Paint paint0 = xYTextAnnotation0.getOutlinePaint();
      xYTextAnnotation0.equals(paint0);
      xYTextAnnotation0.setBackgroundPaint(color0);
      xYTextAnnotation0.setText("paint");
      xYTextAnnotation0.equals(color0);
      Paint paint1 = xYTextAnnotation0.getOutlinePaint();
      xYTextAnnotation0.getFont();
      xYTextAnnotation0.setOutlineVisible(false);
      xYTextAnnotation0.hashCode();
      xYTextAnnotation0.setRotationAngle(399.7);
      xYTextAnnotation0.setBackgroundPaint(paint1);
      xYTextAnnotation0.getFont();
      xYTextAnnotation0.hashCode();
      xYTextAnnotation0.equals(textAnchor0);
      xYTextAnnotation0.getPaint();
      xYTextAnnotation0.setRotationAnchor(textAnchor0);
      xYTextAnnotation0.getOutlinePaint();
      xYTextAnnotation0.getPaint();
      xYTextAnnotation0.getRotationAngle();
      xYTextAnnotation0.setTextAnchor(textAnchor0);
      xYTextAnnotation0.getBackgroundPaint();
      xYTextAnnotation0.setPaint(paint1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("m[`iDEsC+'8AC", 938.7022, 1806.37);
      xYTextAnnotation0.setOutlineVisible(true);
      xYTextAnnotation0.setRotationAngle((-1.0));
      xYTextAnnotation0.hashCode();
      xYTextAnnotation0.getPaint();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "vSY<oEV&< qz\\Qs'H";
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("vSY<oEV&< qzQs'H", 0.25, 0.0);
      TextAnchor textAnchor0 = null;
      // Undeclared exception!
      try { 
        xYTextAnnotation0.setTextAnchor((TextAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("+qE]/rrECx[M", 0.0, 0.0);
      TextAnchor textAnchor0 = XYTextAnnotation.DEFAULT_ROTATION_ANCHOR;
      xYTextAnnotation0.setRotationAnchor(textAnchor0);
      TextUtils.setUseDrawRotatedStringWorkaround(false);
      xYTextAnnotation0.getX();
      TextAnchor textAnchor1 = xYTextAnnotation0.getRotationAnchor();
      Paint paint0 = xYTextAnnotation0.getPaint();
      xYTextAnnotation0.setBackgroundPaint(paint0);
      xYTextAnnotation0.setTextAnchor(textAnchor0);
      xYTextAnnotation0.equals(textAnchor0);
      xYTextAnnotation0.hashCode();
      xYTextAnnotation0.getOutlineStroke();
      xYTextAnnotation0.setRotationAnchor(textAnchor1);
      xYTextAnnotation0.getOutlinePaint();
      xYTextAnnotation0.isOutlineVisible();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 706.490879913, 706.490879913);
      xYTextAnnotation0.setY(706.490879913);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      TextUtils.setUseFontMetricsGetStringBounds(true);
      Paint paint0 = xYTextAnnotation0.getOutlinePaint();
      xYTextAnnotation0.setPaint(paint0);
      TextUtils.setUseFontMetricsGetStringBounds(true);
      xYTextAnnotation0.setURL("");
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.hashCode();
      xYTextAnnotation0.setRotationAngle(0.0);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.addChangeListener(annotationChangeListener0);
      xYTextAnnotation0.setPaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      // Undeclared exception!
      try { 
        xYTextAnnotation0.addEntity(plotRenderingInfo0, xYPlot0.DEFAULT_LEGEND_ITEM_BOX, 10, "", "d-MMM-yyyy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.AbstractXYAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("y;ObwLP", 622.4, (-1.0));
      Stroke stroke0 = xYTextAnnotation0.getOutlineStroke();
      xYTextAnnotation0.setOutlineStroke(stroke0);
      xYTextAnnotation0.getX();
      xYTextAnnotation0.getRotationAnchor();
      xYTextAnnotation0.getY();
      xYTextAnnotation0.getText();
      xYTextAnnotation0.getBackgroundPaint();
      xYTextAnnotation0.setBackgroundPaint((Paint) null);
      // Undeclared exception!
      try { 
        xYTextAnnotation0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("stroke", (-2013.44692), (-615.4508246375724));
      xYTextAnnotation0.clone();
      xYTextAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", (-3589.7319), 1351.948);
      xYTextAnnotation0.getY();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 0.0, 488.304);
      Stroke stroke0 = xYTextAnnotation0.getOutlineStroke();
      xYTextAnnotation0.setOutlineStroke(stroke0);
      xYTextAnnotation0.hashCode();
      xYTextAnnotation0.hashCode();
      TextAnchor textAnchor0 = xYTextAnnotation0.getTextAnchor();
      xYTextAnnotation0.setTextAnchor(textAnchor0);
      xYTextAnnotation0.setRotationAngle(488.304);
      xYTextAnnotation0.setY(0.0);
      xYTextAnnotation0.getText();
      xYTextAnnotation0.clone();
      xYTextAnnotation0.getFont();
      xYTextAnnotation0.setX(488.304);
      xYTextAnnotation0.getBackgroundPaint();
      xYTextAnnotation0.setTextAnchor(textAnchor0);
      xYTextAnnotation0.setTextAnchor(textAnchor0);
      xYTextAnnotation0.getX();
      xYTextAnnotation0.setX(488.304);
      TextUtils.setDrawStringsWithFontAttributes(false);
      xYTextAnnotation0.getRotationAngle();
      // Undeclared exception!
      try { 
        xYTextAnnotation0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("3'u[KBNJGal ", 0.0, 0.0);
      xYTextAnnotation0.setText("");
      TextUtils.setUseFontMetricsGetStringBounds(false);
      xYTextAnnotation0.equals((Object) null);
      xYTextAnnotation0.addChangeListener((AnnotationChangeListener) null);
      xYTextAnnotation0.setToolTipText("3'u[KBNJGal ");
      Paint paint0 = xYTextAnnotation0.getOutlinePaint();
      xYTextAnnotation0.setX(0.0);
      xYTextAnnotation0.setPaint(paint0);
      xYTextAnnotation0.setRotationAngle((-1691.0));
      Paint paint1 = xYTextAnnotation0.getPaint();
      xYTextAnnotation0.getRotationAngle();
      xYTextAnnotation0.getOutlineStroke();
      xYTextAnnotation0.getY();
      xYTextAnnotation0.setOutlinePaint(paint1);
      xYTextAnnotation0.setX((-1.0));
      TextAnchor textAnchor0 = xYTextAnnotation0.getRotationAnchor();
      xYTextAnnotation0.setTextAnchor(textAnchor0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("d-MMM, HH:mm", (-1451.0), (-1451.0));
      xYTextAnnotation0.setX((-1451.0));
      TextAnchor textAnchor0 = xYTextAnnotation0.getTextAnchor();
      xYTextAnnotation0.setTextAnchor(textAnchor0);
      XYTextAnnotation xYTextAnnotation1 = new XYTextAnnotation("d-MMM, HH:mm", 0.0, 0.0);
      Paint paint0 = xYTextAnnotation1.getPaint();
      xYTextAnnotation0.setOutlinePaint(paint0);
      xYTextAnnotation1.getY();
      xYTextAnnotation0.getOutlinePaint();
      xYTextAnnotation0.getX();
      // Undeclared exception!
      try { 
        xYTextAnnotation1.setOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("-U", 0.0, 0.0);
      Stroke stroke0 = xYTextAnnotation0.getOutlineStroke();
      xYTextAnnotation0.setOutlineStroke(stroke0);
      xYTextAnnotation0.setText("-U");
      Font font0 = xYTextAnnotation0.getFont();
      xYTextAnnotation0.setFont(font0);
      Object object0 = xYTextAnnotation0.clone();
      xYTextAnnotation0.equals(object0);
      xYTextAnnotation0.getRotationAngle();
      xYTextAnnotation0.setY(0.0);
      xYTextAnnotation0.setY(0.0);
      Graphics2D graphics2D0 = null;
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot1 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot1).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot1).getOrientation();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTextAnnotation0.draw((Graphics2D) null, xYPlot1, rectangle2D1, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "";
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", (-90.0), (-90.0));
      xYTextAnnotation0.clone();
      xYTextAnnotation0.setY((-7.0));
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.notifyListeners(annotationChangeEvent0);
      AnnotationChangeEvent annotationChangeEvent1 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      AnnotationChangeEvent annotationChangeEvent2 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.notifyListeners(annotationChangeEvent2);
      xYTextAnnotation0.notifyListeners(annotationChangeEvent1);
      double double0 = 0.0;
      xYTextAnnotation0.setX(0.0);
      xYTextAnnotation0.getFont();
      xYTextAnnotation0.setX((-90.0));
      xYTextAnnotation0.isOutlineVisible();
      xYTextAnnotation0.clone();
      xYTextAnnotation0.clone();
      double double1 = 3318.550399163107;
      XYTextAnnotation xYTextAnnotation1 = new XYTextAnnotation("", 3318.550399163107, 0.0);
      xYTextAnnotation1.getBackgroundPaint();
      // Undeclared exception!
      try { 
        xYTextAnnotation0.setOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = null;
      try {
        xYTextAnnotation0 = new XYTextAnnotation((String) null, (-3031.3883), 578.37534129);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation(":;[rB0,uefy9FsI", (-2458.5234), (-2458.5234));
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.hasListener(eventListener0);
      xYTextAnnotation0.addChangeListener(annotationChangeListener0);
      String string0 = "style";
      xYTextAnnotation0.setURL("style");
      xYTextAnnotation0.setOutlineVisible(false);
      // Undeclared exception!
      try { 
        xYTextAnnotation0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("M", 0.0, 0.0);
      xYTextAnnotation0.setY(2420.6426);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("N", 2173.205889360905, 2173.205889360905);
      XYTextAnnotation xYTextAnnotation1 = new XYTextAnnotation("N", 0.0, 2173.205889360905);
      Object object0 = xYTextAnnotation1.clone();
      xYTextAnnotation0.equals(object0);
      xYTextAnnotation0.getPaint();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("=LG", (-4235.082892115506), 0.12);
      TextAnchor textAnchor0 = XYTextAnnotation.DEFAULT_TEXT_ANCHOR;
      Color color0 = (Color)XYTextAnnotation.DEFAULT_PAINT;
      xYTextAnnotation0.setBackgroundPaint(color0);
      TextUtils.setUseFontMetricsGetStringBounds(true);
      xYTextAnnotation0.setRotationAnchor(textAnchor0);
      xYTextAnnotation0.getX();
      Object object0 = xYTextAnnotation0.clone();
      xYTextAnnotation0.equals(object0);
      xYTextAnnotation0.getX();
      xYTextAnnotation0.getRotationAngle();
      Stroke stroke0 = xYTextAnnotation0.getOutlineStroke();
      xYTextAnnotation0.setOutlineStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("wX^xKs9He!&Y", 640.22, 640.22);
      xYTextAnnotation0.clone();
      xYTextAnnotation0.setOutlineVisible(true);
      xYTextAnnotation0.setOutlineVisible(false);
      TextAnchor textAnchor0 = xYTextAnnotation0.getRotationAnchor();
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTextAnnotation0.notifyListeners(annotationChangeEvent0);
      xYTextAnnotation0.setRotationAnchor(textAnchor0);
      Paint paint0 = xYTextAnnotation0.getOutlinePaint();
      xYTextAnnotation0.isOutlineVisible();
      Font font0 = xYTextAnnotation0.getFont();
      xYTextAnnotation0.setFont(font0);
      xYTextAnnotation0.setOutlinePaint(paint0);
      xYTextAnnotation0.setTextAnchor(textAnchor0);
      xYTextAnnotation0.getText();
      xYTextAnnotation0.setOutlinePaint(paint0);
      xYTextAnnotation0.getFont();
      xYTextAnnotation0.getPaint();
      xYTextAnnotation0.setText("wX^xKs9He!&Y");
      xYTextAnnotation0.getY();
      xYTextAnnotation0.setText("");
      xYTextAnnotation0.setTextAnchor(textAnchor0);
      xYTextAnnotation0.setBackgroundPaint(paint0);
      xYTextAnnotation0.setPaint(paint0);
      xYTextAnnotation0.setRotationAngle(640.22);
      xYTextAnnotation0.setTextAnchor(textAnchor0);
      xYTextAnnotation0.getBackgroundPaint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTextAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 1.0, 0.0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(xYTextAnnotation0);
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      
      Color color0 = (Color)XYTextAnnotation.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      
      TextUtils.setUseFontMetricsGetStringBounds(true);
      xYTextAnnotation0.setOutlinePaint(color0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      
      XYTextAnnotation xYTextAnnotation1 = new XYTextAnnotation("c", (-1633.8059937), 0.0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation1.equals((Object)xYTextAnnotation0));
      assertNotNull(xYTextAnnotation1);
      assertEquals((-1633.8059937), xYTextAnnotation1.getX(), 0.01);
      assertNull(xYTextAnnotation1.getToolTipText());
      assertFalse(xYTextAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation1.getRotationAngle(), 0.01);
      assertEquals(0.0, xYTextAnnotation1.getY(), 0.01);
      assertEquals("c", xYTextAnnotation1.getText());
      assertTrue(xYTextAnnotation1.getNotify());
      assertNull(xYTextAnnotation1.getURL());
      
      xYTextAnnotation1.setNotify(false);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation1.equals((Object)xYTextAnnotation0));
      assertNotSame(xYTextAnnotation1, xYTextAnnotation0);
      assertFalse(xYTextAnnotation1.getNotify());
      assertEquals((-1633.8059937), xYTextAnnotation1.getX(), 0.01);
      assertNull(xYTextAnnotation1.getToolTipText());
      assertFalse(xYTextAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation1.getRotationAngle(), 0.01);
      assertEquals(0.0, xYTextAnnotation1.getY(), 0.01);
      assertEquals("c", xYTextAnnotation1.getText());
      assertNull(xYTextAnnotation1.getURL());
      
      TextAnchor textAnchor0 = xYTextAnnotation1.getTextAnchor();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation1.equals((Object)xYTextAnnotation0));
      assertNotNull(textAnchor0);
      assertNotSame(xYTextAnnotation1, xYTextAnnotation0);
      assertFalse(xYTextAnnotation1.getNotify());
      assertEquals((-1633.8059937), xYTextAnnotation1.getX(), 0.01);
      assertNull(xYTextAnnotation1.getToolTipText());
      assertFalse(xYTextAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation1.getRotationAngle(), 0.01);
      assertEquals(0.0, xYTextAnnotation1.getY(), 0.01);
      assertEquals("c", xYTextAnnotation1.getText());
      assertNull(xYTextAnnotation1.getURL());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBottom());
      
      xYTextAnnotation0.setTextAnchor(textAnchor0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertFalse(xYTextAnnotation1.equals((Object)xYTextAnnotation0));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertNotSame(xYTextAnnotation1, xYTextAnnotation0);
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation1.getNotify());
      assertEquals((-1633.8059937), xYTextAnnotation1.getX(), 0.01);
      assertNull(xYTextAnnotation1.getToolTipText());
      assertFalse(xYTextAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation1.getRotationAngle(), 0.01);
      assertEquals(0.0, xYTextAnnotation1.getY(), 0.01);
      assertEquals("c", xYTextAnnotation1.getText());
      assertNull(xYTextAnnotation1.getURL());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isTop());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBottom());
      
      xYTextAnnotation0.hashCode();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      
      Font font0 = xYTextAnnotation0.getFont();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotNull(font0);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals(10, font0.getSize());
      assertFalse(font0.isBold());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      
      boolean boolean0 = xYTextAnnotation0.equals(color0);
      assertFalse(boolean0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      
      XYTextAnnotation xYTextAnnotation2 = (XYTextAnnotation)xYTextAnnotation1.clone();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation1.equals((Object)xYTextAnnotation0));
      assertTrue(xYTextAnnotation2.equals((Object)xYTextAnnotation1));
      assertFalse(xYTextAnnotation2.equals((Object)xYTextAnnotation0));
      assertNotNull(xYTextAnnotation2);
      assertNotSame(xYTextAnnotation1, xYTextAnnotation0);
      assertNotSame(xYTextAnnotation1, xYTextAnnotation2);
      assertNotSame(xYTextAnnotation2, xYTextAnnotation0);
      assertNotSame(xYTextAnnotation2, xYTextAnnotation1);
      assertFalse(xYTextAnnotation1.getNotify());
      assertEquals((-1633.8059937), xYTextAnnotation1.getX(), 0.01);
      assertNull(xYTextAnnotation1.getToolTipText());
      assertFalse(xYTextAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation1.getRotationAngle(), 0.01);
      assertEquals(0.0, xYTextAnnotation1.getY(), 0.01);
      assertEquals("c", xYTextAnnotation1.getText());
      assertNull(xYTextAnnotation1.getURL());
      assertFalse(xYTextAnnotation2.isOutlineVisible());
      assertNull(xYTextAnnotation2.getURL());
      assertEquals(0.0, xYTextAnnotation2.getRotationAngle(), 0.01);
      assertNull(xYTextAnnotation2.getToolTipText());
      assertFalse(xYTextAnnotation2.getNotify());
      assertEquals(0.0, xYTextAnnotation2.getY(), 0.01);
      assertEquals("c", xYTextAnnotation2.getText());
      assertEquals((-1633.8059937), xYTextAnnotation2.getX(), 0.01);
      
      xYTextAnnotation0.hashCode();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation2));
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation2);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      
      double double0 = xYTextAnnotation1.getY();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation1.equals((Object)xYTextAnnotation2));
      assertFalse(xYTextAnnotation1.equals((Object)xYTextAnnotation0));
      assertNotSame(xYTextAnnotation1, xYTextAnnotation0);
      assertNotSame(xYTextAnnotation1, xYTextAnnotation2);
      assertFalse(xYTextAnnotation1.getNotify());
      assertEquals((-1633.8059937), xYTextAnnotation1.getX(), 0.01);
      assertNull(xYTextAnnotation1.getToolTipText());
      assertFalse(xYTextAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation1.getRotationAngle(), 0.01);
      assertEquals(0.0, xYTextAnnotation1.getY(), 0.01);
      assertEquals("c", xYTextAnnotation1.getText());
      assertNull(xYTextAnnotation1.getURL());
      
      xYTextAnnotation0.setRotationAngle((-67.0189028));
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation2));
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation2);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals((-67.0189028), xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      
      XYTextAnnotation xYTextAnnotation3 = new XYTextAnnotation("org.jfree.chart.axis.NumberAxis", (-67.0189028), (-1633.8059937));
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation0));
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation2));
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation1));
      assertNotNull(xYTextAnnotation3);
      assertNull(xYTextAnnotation3.getURL());
      assertEquals((-67.0189028), xYTextAnnotation3.getX(), 0.01);
      assertNull(xYTextAnnotation3.getToolTipText());
      assertTrue(xYTextAnnotation3.getNotify());
      assertEquals("org.jfree.chart.axis.NumberAxis", xYTextAnnotation3.getText());
      assertEquals(0.0, xYTextAnnotation3.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation3.isOutlineVisible());
      assertEquals((-1633.8059937), xYTextAnnotation3.getY(), 0.01);
      
      XYTextAnnotation xYTextAnnotation4 = (XYTextAnnotation)xYTextAnnotation3.clone();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation4.equals((Object)xYTextAnnotation3));
      assertFalse(xYTextAnnotation4.equals((Object)xYTextAnnotation1));
      assertFalse(xYTextAnnotation4.equals((Object)xYTextAnnotation2));
      assertFalse(xYTextAnnotation4.equals((Object)xYTextAnnotation0));
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation0));
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation2));
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation1));
      assertNotNull(xYTextAnnotation4);
      assertNotSame(xYTextAnnotation4, xYTextAnnotation1);
      assertNotSame(xYTextAnnotation4, xYTextAnnotation3);
      assertNotSame(xYTextAnnotation4, xYTextAnnotation2);
      assertNotSame(xYTextAnnotation4, xYTextAnnotation0);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation0);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation2);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation4);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation1);
      assertNull(xYTextAnnotation4.getURL());
      assertEquals((-1633.8059937), xYTextAnnotation4.getY(), 0.01);
      assertNull(xYTextAnnotation4.getToolTipText());
      assertEquals((-67.0189028), xYTextAnnotation4.getX(), 0.01);
      assertEquals(0.0, xYTextAnnotation4.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation4.isOutlineVisible());
      assertEquals("org.jfree.chart.axis.NumberAxis", xYTextAnnotation4.getText());
      assertTrue(xYTextAnnotation4.getNotify());
      assertNull(xYTextAnnotation3.getURL());
      assertEquals((-67.0189028), xYTextAnnotation3.getX(), 0.01);
      assertNull(xYTextAnnotation3.getToolTipText());
      assertTrue(xYTextAnnotation3.getNotify());
      assertEquals("org.jfree.chart.axis.NumberAxis", xYTextAnnotation3.getText());
      assertEquals(0.0, xYTextAnnotation3.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation3.isOutlineVisible());
      assertEquals((-1633.8059937), xYTextAnnotation3.getY(), 0.01);
      
      boolean boolean1 = xYTextAnnotation0.equals(xYTextAnnotation4);
      assertFalse(boolean1);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation4.equals((Object)xYTextAnnotation3));
      assertFalse(xYTextAnnotation4.equals((Object)xYTextAnnotation1));
      assertFalse(xYTextAnnotation4.equals((Object)xYTextAnnotation2));
      assertFalse(xYTextAnnotation4.equals((Object)xYTextAnnotation0));
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation3));
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation4));
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation2));
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertTrue(boolean1 == boolean0);
      assertTrue(xYTextAnnotation3.equals((Object)xYTextAnnotation4));
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation0));
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation2));
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation1));
      assertNotSame(xYTextAnnotation4, xYTextAnnotation1);
      assertNotSame(xYTextAnnotation4, xYTextAnnotation3);
      assertNotSame(xYTextAnnotation4, xYTextAnnotation2);
      assertNotSame(xYTextAnnotation4, xYTextAnnotation0);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation3);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation4);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation2);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation0);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation2);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation4);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation1);
      assertNull(xYTextAnnotation4.getURL());
      assertEquals((-1633.8059937), xYTextAnnotation4.getY(), 0.01);
      assertNull(xYTextAnnotation4.getToolTipText());
      assertEquals((-67.0189028), xYTextAnnotation4.getX(), 0.01);
      assertEquals(0.0, xYTextAnnotation4.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation4.isOutlineVisible());
      assertEquals("org.jfree.chart.axis.NumberAxis", xYTextAnnotation4.getText());
      assertTrue(xYTextAnnotation4.getNotify());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals((-67.0189028), xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertNull(xYTextAnnotation3.getURL());
      assertEquals((-67.0189028), xYTextAnnotation3.getX(), 0.01);
      assertNull(xYTextAnnotation3.getToolTipText());
      assertTrue(xYTextAnnotation3.getNotify());
      assertEquals("org.jfree.chart.axis.NumberAxis", xYTextAnnotation3.getText());
      assertEquals(0.0, xYTextAnnotation3.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation3.isOutlineVisible());
      assertEquals((-1633.8059937), xYTextAnnotation3.getY(), 0.01);
      
      Color color1 = (Color)xYTextAnnotation1.getOutlinePaint();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation1.equals((Object)xYTextAnnotation2));
      assertFalse(xYTextAnnotation1.equals((Object)xYTextAnnotation4));
      assertFalse(xYTextAnnotation1.equals((Object)xYTextAnnotation0));
      assertFalse(xYTextAnnotation1.equals((Object)xYTextAnnotation3));
      assertNotNull(color1);
      assertSame(color1, color0);
      assertNotSame(xYTextAnnotation1, xYTextAnnotation4);
      assertNotSame(xYTextAnnotation1, xYTextAnnotation0);
      assertNotSame(xYTextAnnotation1, xYTextAnnotation3);
      assertNotSame(xYTextAnnotation1, xYTextAnnotation2);
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertFalse(xYTextAnnotation1.getNotify());
      assertEquals((-1633.8059937), xYTextAnnotation1.getX(), 0.01);
      assertNull(xYTextAnnotation1.getToolTipText());
      assertFalse(xYTextAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation1.getRotationAngle(), 0.01);
      assertEquals(0.0, xYTextAnnotation1.getY(), 0.01);
      assertEquals("c", xYTextAnnotation1.getText());
      assertNull(xYTextAnnotation1.getURL());
      
      TextAnchor textAnchor1 = xYTextAnnotation3.getRotationAnchor();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation3.equals((Object)xYTextAnnotation4));
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation0));
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation2));
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation1));
      assertNotNull(textAnchor1);
      assertSame(textAnchor1, textAnchor0);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation0);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation2);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation4);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation1);
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBaseline());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isTop());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isBottom());
      assertNull(xYTextAnnotation3.getURL());
      assertEquals((-67.0189028), xYTextAnnotation3.getX(), 0.01);
      assertNull(xYTextAnnotation3.getToolTipText());
      assertTrue(xYTextAnnotation3.getNotify());
      assertEquals("org.jfree.chart.axis.NumberAxis", xYTextAnnotation3.getText());
      assertEquals(0.0, xYTextAnnotation3.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation3.isOutlineVisible());
      assertEquals((-1633.8059937), xYTextAnnotation3.getY(), 0.01);
      
      xYTextAnnotation3.setPaint(xYTextAnnotation0.DEFAULT_PAINT);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation3));
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation4));
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation2));
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertTrue(xYTextAnnotation3.equals((Object)xYTextAnnotation4));
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation0));
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation2));
      assertFalse(xYTextAnnotation3.equals((Object)xYTextAnnotation1));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation3);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation4);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation2);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation0);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation2);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation4);
      assertNotSame(xYTextAnnotation3, xYTextAnnotation1);
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals((-67.0189028), xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertNull(xYTextAnnotation3.getURL());
      assertEquals((-67.0189028), xYTextAnnotation3.getX(), 0.01);
      assertNull(xYTextAnnotation3.getToolTipText());
      assertTrue(xYTextAnnotation3.getNotify());
      assertEquals("org.jfree.chart.axis.NumberAxis", xYTextAnnotation3.getText());
      assertEquals(0.0, xYTextAnnotation3.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation3.isOutlineVisible());
      assertEquals((-1633.8059937), xYTextAnnotation3.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("-U", 0.0, 0.0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(xYTextAnnotation0);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("-U", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertNull(xYTextAnnotation0.getURL());
      
      BasicStroke basicStroke0 = (BasicStroke)xYTextAnnotation0.getOutlineStroke();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(basicStroke0);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("-U", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      xYTextAnnotation0.setOutlineStroke(basicStroke0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("-U", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      xYTextAnnotation0.setText("-U");
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("-U", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertNull(xYTextAnnotation0.getURL());
      
      Font font0 = xYTextAnnotation0.getFont();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(font0);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("-U", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertNull(xYTextAnnotation0.getURL());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      
      xYTextAnnotation0.setFont(font0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("-U", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertNull(xYTextAnnotation0.getURL());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      
      XYTextAnnotation xYTextAnnotation1 = (XYTextAnnotation)xYTextAnnotation0.clone();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation1.equals((Object)xYTextAnnotation0));
      assertNotNull(xYTextAnnotation1);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertNotSame(xYTextAnnotation1, xYTextAnnotation0);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("-U", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(0.0, xYTextAnnotation1.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation1.isOutlineVisible());
      assertTrue(xYTextAnnotation1.getNotify());
      assertEquals("-U", xYTextAnnotation1.getText());
      assertNull(xYTextAnnotation1.getToolTipText());
      assertNull(xYTextAnnotation1.getURL());
      assertEquals(0.0, xYTextAnnotation1.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation1.getX(), 0.01);
      
      xYTextAnnotation1.setBackgroundPaint(xYTextAnnotation0.DEFAULT_PAINT);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertFalse(xYTextAnnotation1.equals((Object)xYTextAnnotation0));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertNotSame(xYTextAnnotation1, xYTextAnnotation0);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("-U", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(0.0, xYTextAnnotation1.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation1.isOutlineVisible());
      assertTrue(xYTextAnnotation1.getNotify());
      assertEquals("-U", xYTextAnnotation1.getText());
      assertNull(xYTextAnnotation1.getToolTipText());
      assertNull(xYTextAnnotation1.getURL());
      assertEquals(0.0, xYTextAnnotation1.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation1.getX(), 0.01);
      
      boolean boolean0 = xYTextAnnotation0.equals(xYTextAnnotation1);
      assertFalse(boolean0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertFalse(xYTextAnnotation1.equals((Object)xYTextAnnotation0));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertNotSame(xYTextAnnotation1, xYTextAnnotation0);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("-U", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(0.0, xYTextAnnotation1.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation1.isOutlineVisible());
      assertTrue(xYTextAnnotation1.getNotify());
      assertEquals("-U", xYTextAnnotation1.getText());
      assertNull(xYTextAnnotation1.getToolTipText());
      assertNull(xYTextAnnotation1.getURL());
      assertEquals(0.0, xYTextAnnotation1.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation1.getX(), 0.01);
      
      double double0 = xYTextAnnotation0.getRotationAngle();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("-U", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertNull(xYTextAnnotation0.getURL());
      
      xYTextAnnotation0.setY(0.0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("-U", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertNull(xYTextAnnotation0.getURL());
      
      xYTextAnnotation0.setY(0.0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("-U", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertNull(xYTextAnnotation0.getURL());
      
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot1 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot1).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot1).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTextAnnotation0.draw((Graphics2D) null, xYPlot1, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = null;
      try {
        xYTextAnnotation0 = new XYTextAnnotation((String) null, (-1.0), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("SansSerif", 440.070435, 440.070435);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(xYTextAnnotation0);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(440.070435, xYTextAnnotation0.getY(), 0.01);
      
      Font font0 = XYTextAnnotation.DEFAULT_FONT;
      assertNotNull(font0);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      
      xYTextAnnotation0.setFont(font0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(440.070435, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isBold());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      
      double double0 = xYTextAnnotation0.getY();
      assertEquals(440.070435, double0, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(440.070435, xYTextAnnotation0.getY(), 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)xYTextAnnotation0.getOutlineStroke();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(basicStroke0);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(440.070435, xYTextAnnotation0.getY(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      Color color0 = (Color)xYTextAnnotation0.getOutlinePaint();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(color0);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(440.070435, xYTextAnnotation0.getY(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      xYTextAnnotation0.setOutlinePaint(color0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(440.070435, xYTextAnnotation0.getY(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      xYTextAnnotation0.setOutlineStroke(basicStroke0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(440.070435, xYTextAnnotation0.getY(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      double double1 = xYTextAnnotation0.getX();
      assertEquals(440.070435, double1, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(double1, double0, 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(440.070435, xYTextAnnotation0.getY(), 0.01);
      
      xYTextAnnotation0.setRotationAngle((-2486.215));
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals((-2486.215), xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(440.070435, xYTextAnnotation0.getY(), 0.01);
      
      xYTextAnnotation0.setY(1062.501196);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(1062.501196, xYTextAnnotation0.getY(), 0.01);
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals((-2486.215), xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      
      xYTextAnnotation0.setOutlineStroke(basicStroke0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(1062.501196, xYTextAnnotation0.getY(), 0.01);
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals((-2486.215), xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      xYTextAnnotation0.setRotationAngle(1062.501196);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(1062.501196, xYTextAnnotation0.getY(), 0.01);
      assertEquals(1062.501196, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      
      Font font1 = xYTextAnnotation0.getFont();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(font1);
      assertSame(font1, font0);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(1062.501196, xYTextAnnotation0.getY(), 0.01);
      assertEquals(1062.501196, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(10, font1.getSize());
      assertEquals(10.0F, font1.getSize2D(), 0.01F);
      assertFalse(font1.isTransformed());
      assertEquals(0, font1.getStyle());
      assertEquals("SansSerif", font1.getName());
      assertFalse(font1.isBold());
      assertTrue(font1.isPlain());
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isItalic());
      assertFalse(font1.hasLayoutAttributes());
      
      xYTextAnnotation0.setOutlinePaint(color0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(1062.501196, xYTextAnnotation0.getY(), 0.01);
      assertEquals(1062.501196, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      String string0 = xYTextAnnotation0.getText();
      assertEquals("SansSerif", string0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(string0);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(1062.501196, xYTextAnnotation0.getY(), 0.01);
      assertEquals(1062.501196, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      
      boolean boolean0 = xYTextAnnotation0.equals(color0);
      assertFalse(boolean0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(1062.501196, xYTextAnnotation0.getY(), 0.01);
      assertEquals(1062.501196, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals("SansSerif", xYTextAnnotation0.getText());
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      xYTextAnnotation0.setText("irCE=@iV##");
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("irCE=@iV##", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(1062.501196, xYTextAnnotation0.getY(), 0.01);
      assertEquals(1062.501196, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      
      Color color1 = (Color)xYTextAnnotation0.getPaint();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(color1);
      assertSame(color1, color0);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("irCE=@iV##", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(1062.501196, xYTextAnnotation0.getY(), 0.01);
      assertEquals(1062.501196, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getGreen());
      
      double double2 = xYTextAnnotation0.getX();
      assertEquals(440.070435, double2, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("irCE=@iV##", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(1062.501196, xYTextAnnotation0.getY(), 0.01);
      assertEquals(1062.501196, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      
      xYTextAnnotation0.setPaint(color0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertSame(color0, color1);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("irCE=@iV##", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(1062.501196, xYTextAnnotation0.getY(), 0.01);
      assertEquals(1062.501196, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      xYTextAnnotation0.setRotationAngle(1062.501196);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("irCE=@iV##", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(1062.501196, xYTextAnnotation0.getY(), 0.01);
      assertEquals(1062.501196, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      
      Paint paint0 = xYTextAnnotation0.getBackgroundPaint();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNull(paint0);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("irCE=@iV##", xYTextAnnotation0.getText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(1062.501196, xYTextAnnotation0.getY(), 0.01);
      assertEquals(1062.501196, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(440.070435, xYTextAnnotation0.getX(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 2450.7036634876, 2450.7036634876);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(xYTextAnnotation0);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      
      Color color0 = (Color)xYTextAnnotation0.getPaint();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(color0);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      
      xYTextAnnotation0.setBackgroundPaint(color0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      
      BasicStroke basicStroke0 = (BasicStroke)xYTextAnnotation0.getOutlineStroke();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(basicStroke0);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      
      xYTextAnnotation0.setOutlineVisible(false);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      
      Color color1 = (Color)xYTextAnnotation0.getBackgroundPaint();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(color1);
      assertSame(color1, color0);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      
      xYTextAnnotation0.hashCode();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      
      XYTextAnnotation xYTextAnnotation1 = (XYTextAnnotation)xYTextAnnotation0.clone();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation1.equals((Object)xYTextAnnotation0));
      assertNotNull(xYTextAnnotation1);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertNotSame(xYTextAnnotation1, xYTextAnnotation0);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation1.getURL());
      assertNull(xYTextAnnotation1.getToolTipText());
      assertFalse(xYTextAnnotation1.isOutlineVisible());
      assertTrue(xYTextAnnotation1.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation1.getY(), 0.01);
      assertEquals(2450.7036634876, xYTextAnnotation1.getX(), 0.01);
      assertEquals("", xYTextAnnotation1.getText());
      assertEquals(0.0, xYTextAnnotation1.getRotationAngle(), 0.01);
      
      boolean boolean0 = xYTextAnnotation0.equals(xYTextAnnotation1);
      assertTrue(boolean0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertTrue(xYTextAnnotation1.equals((Object)xYTextAnnotation0));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertNotSame(xYTextAnnotation1, xYTextAnnotation0);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation1.getURL());
      assertNull(xYTextAnnotation1.getToolTipText());
      assertFalse(xYTextAnnotation1.isOutlineVisible());
      assertTrue(xYTextAnnotation1.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation1.getY(), 0.01);
      assertEquals(2450.7036634876, xYTextAnnotation1.getX(), 0.01);
      assertEquals("", xYTextAnnotation1.getText());
      assertEquals(0.0, xYTextAnnotation1.getRotationAngle(), 0.01);
      
      Font font0 = XYTextAnnotation.DEFAULT_FONT;
      assertNotNull(font0);
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      
      xYTextAnnotation0.setFont(font0);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      
      boolean boolean1 = xYTextAnnotation0.equals("");
      assertFalse(boolean1);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      
      TextAnchor textAnchor0 = xYTextAnnotation0.getRotationAnchor();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotNull(textAnchor0);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isBottom());
      
      TextAnchor textAnchor1 = xYTextAnnotation0.getRotationAnchor();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotNull(textAnchor1);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertSame(textAnchor1, textAnchor0);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      assertFalse(textAnchor1.isBaseline());
      assertFalse(textAnchor1.isRight());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isBottom());
      assertFalse(textAnchor1.isTop());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isLeft());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      
      xYTextAnnotation0.hashCode();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      
      TextAnchor textAnchor2 = xYTextAnnotation0.getRotationAnchor();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotNull(textAnchor2);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertSame(textAnchor2, textAnchor0);
      assertSame(textAnchor2, textAnchor1);
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      assertFalse(textAnchor2.isBaseline());
      assertTrue(textAnchor2.isVerticalCenter());
      assertTrue(textAnchor2.isHorizontalCenter());
      assertFalse(textAnchor2.isTop());
      assertEquals("TextAnchor.CENTER", textAnchor2.toString());
      assertFalse(textAnchor2.isLeft());
      assertFalse(textAnchor2.isHalfAscent());
      assertFalse(textAnchor2.isBottom());
      assertFalse(textAnchor2.isRight());
      
      xYTextAnnotation0.setText("paint");
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertEquals("paint", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      
      TextAnchor textAnchor3 = xYTextAnnotation0.getTextAnchor();
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(xYTextAnnotation0.equals((Object)xYTextAnnotation1));
      assertNotNull(textAnchor3);
      assertNotSame(xYTextAnnotation0, xYTextAnnotation1);
      assertSame(textAnchor3, textAnchor1);
      assertSame(textAnchor3, textAnchor2);
      assertSame(textAnchor3, textAnchor0);
      assertEquals("paint", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertTrue(xYTextAnnotation0.getNotify());
      assertEquals(2450.7036634876, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2450.7036634876, xYTextAnnotation0.getX(), 0.01);
      assertFalse(textAnchor3.isRight());
      assertFalse(textAnchor3.isHalfAscent());
      assertFalse(textAnchor3.isBottom());
      assertEquals("TextAnchor.CENTER", textAnchor3.toString());
      assertFalse(textAnchor3.isTop());
      assertFalse(textAnchor3.isLeft());
      assertTrue(textAnchor3.isVerticalCenter());
      assertTrue(textAnchor3.isHorizontalCenter());
      assertFalse(textAnchor3.isBaseline());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation(":il4", 0.0, 0.0);
      xYTextAnnotation0.hashCode();
      xYTextAnnotation0.setNotify(false);
      TextUtils.setUseFontMetricsGetStringBounds(false);
      XYTextAnnotation xYTextAnnotation1 = new XYTextAnnotation("^YKrSv`x\"UN~)(9kzJ", (-106.673356622612), 0.0);
      xYTextAnnotation0.setOutlinePaint(xYTextAnnotation1.DEFAULT_PAINT);
      Object object0 = xYTextAnnotation1.clone();
      xYTextAnnotation0.equals(object0);
      double double0 = xYTextAnnotation1.getY();
      assertEquals(0.0, double0, 0.01);
      
      xYTextAnnotation1.hashCode();
      assertEquals((-106.673356622612), xYTextAnnotation1.getX(), 0.01);
      assertTrue(xYTextAnnotation1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("i[5z?T)XdSIl($g'\"o", 2538.51, 295.432760296);
      xYTextAnnotation0.isOutlineVisible();
      xYTextAnnotation0.getOutlinePaint();
      xYTextAnnotation0.getFont();
      xYTextAnnotation0.setX(2203.9106);
      xYTextAnnotation0.setRotationAngle(2538.51);
      xYTextAnnotation0.clone();
      assertEquals(2538.51, xYTextAnnotation0.getRotationAngle(), 0.01);
  }
}
