/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:44:29 GMT 2023
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.annotations.TextAnnotation;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.ui.TextAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextAnnotation_ESTest extends TextAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("org.jfree.chart.ui.RectangleEdge");
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      textAnnotation0.hasListener(eventListener0);
      textAnnotation0.equals(textAnnotation0);
      TextAnchor textAnchor0 = textAnnotation0.getTextAnchor();
      textAnnotation0.setTextAnchor(textAnchor0);
      textAnnotation0.setNotify(true);
      textAnnotation0.setRotationAnchor(textAnchor0);
      textAnnotation0.getFont();
      textAnnotation0.equals(textAnchor0);
      textAnnotation0.setRotationAnchor(textAnchor0);
      textAnnotation0.getText();
      // Undeclared exception!
      try { 
        textAnnotation0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      
      Color color0 = (Color)TextAnnotation.DEFAULT_PAINT;
      textAnnotation0.setPaint(color0);
      textAnnotation0.getText();
      textAnnotation0.fireAnnotationChanged();
      textAnnotation0.setRotationAngle(1178.967869);
      TextAnnotation textAnnotation1 = new TextAnnotation("GxLW");
      textAnnotation0.equals("GxLW");
      TextAnchor textAnchor0 = textAnnotation1.getTextAnchor();
      textAnnotation0.setRotationAnchor(textAnchor0);
      textAnnotation0.getTextAnchor();
      TextAnchor textAnchor1 = textAnnotation1.getRotationAnchor();
      textAnnotation1.setFont(textAnnotation0.DEFAULT_FONT);
      textAnnotation1.getRotationAngle();
      textAnnotation0.setFont(textAnnotation1.DEFAULT_FONT);
      textAnnotation0.getFont();
      textAnnotation1.setRotationAngle(1178.967869);
      textAnnotation1.setRotationAngle(1178.967869);
      textAnnotation0.setRotationAnchor(textAnchor1);
      textAnnotation0.setText("");
      textAnnotation0.hashCode();
      textAnnotation0.getRotationAnchor();
      textAnnotation1.getRotationAnchor();
      textAnnotation0.getRotationAngle();
      TextAnnotation textAnnotation2 = new TextAnnotation("");
      textAnnotation0.equals(textAnnotation2);
      textAnnotation1.setNotify(true);
      textAnnotation1.setRotationAngle(1178.967869);
      textAnnotation1.getTextAnchor();
      textAnnotation0.setFont(textAnnotation1.DEFAULT_FONT);
      textAnnotation0.setPaint(textAnnotation2.DEFAULT_PAINT);
      textAnnotation2.getFont();
      textAnnotation0.setText("");
      textAnnotation2.setText("");
      textAnnotation1.setTextAnchor(textAnnotation2.DEFAULT_TEXT_ANCHOR);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("t");
      textAnnotation0.fireAnnotationChanged();
      textAnnotation0.setText("");
      TextAnchor textAnchor0 = TextAnnotation.DEFAULT_ROTATION_ANCHOR;
      textAnnotation0.setRotationAnchor(textAnchor0);
      Object object0 = textAnnotation0.clone();
      textAnnotation0.equals(object0);
      Font font0 = textAnnotation0.getFont();
      textAnnotation0.setFont(font0);
      textAnnotation0.setText("");
      textAnnotation0.hashCode();
      Paint paint0 = textAnnotation0.getPaint();
      textAnnotation0.setPaint(paint0);
      TextAnchor textAnchor1 = TextAnnotation.DEFAULT_TEXT_ANCHOR;
      textAnnotation0.setRotationAnchor(textAnchor1);
      TextAnchor textAnchor2 = textAnnotation0.getTextAnchor();
      textAnnotation0.setFont(font0);
      textAnnotation0.getRotationAngle();
      textAnnotation0.setText("");
      textAnnotation0.setFont(font0);
      textAnnotation0.setRotationAngle(0.0);
      TextAnchor textAnchor3 = textAnnotation0.getRotationAnchor();
      textAnnotation0.getFont();
      textAnnotation0.setTextAnchor(textAnchor2);
      textAnnotation0.getRotationAnchor();
      textAnnotation0.getText();
      textAnnotation0.setRotationAnchor(textAnchor3);
      textAnnotation0.setText("");
      Color color0 = (Color)TextAnnotation.DEFAULT_PAINT;
      textAnnotation0.setPaint(color0);
      textAnnotation0.setPaint(paint0);
      textAnnotation0.setRotationAngle((-1172.0487));
      textAnnotation0.hashCode();
      // Undeclared exception!
      try { 
        textAnnotation0.setText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("org.jfree.chart.annotations.TextAnnotation");
      textAnnotation0.getText();
      textAnnotation0.setRotationAngle((-848.6));
      Font font0 = TextAnnotation.DEFAULT_FONT;
      textAnnotation0.hashCode();
      textAnnotation0.setFont(font0);
      textAnnotation0.hashCode();
      textAnnotation0.getFont();
      TextAnchor textAnchor0 = textAnnotation0.getTextAnchor();
      textAnnotation0.setRotationAnchor(textAnchor0);
      textAnnotation0.setRotationAnchor(textAnchor0);
      TextAnnotation textAnnotation1 = new TextAnnotation("org.jfree.chart.annotations.TextAnnotation");
      Object object0 = textAnnotation1.clone();
      textAnnotation0.equals(object0);
      textAnnotation1.setPaint(textAnnotation0.DEFAULT_PAINT);
      Font font1 = textAnnotation0.getFont();
      textAnnotation1.setRotationAnchor(textAnnotation0.DEFAULT_TEXT_ANCHOR);
      textAnnotation0.getRotationAngle();
      textAnnotation1.getRotationAngle();
      textAnnotation1.setRotationAnchor(textAnnotation0.DEFAULT_TEXT_ANCHOR);
      textAnnotation1.getTextAnchor();
      textAnnotation1.setTextAnchor(textAnnotation0.DEFAULT_TEXT_ANCHOR);
      textAnnotation1.hashCode();
      textAnnotation0.setText("org.jfree.chart.annotations.TextAnnotation");
      textAnnotation1.equals(font1);
      textAnnotation1.hashCode();
      textAnnotation0.getRotationAngle();
      TextAnchor textAnchor1 = textAnnotation0.getTextAnchor();
      textAnnotation0.setRotationAngle(0.0);
      textAnnotation0.getTextAnchor();
      textAnnotation0.setRotationAnchor(textAnchor0);
      textAnnotation1.setFont(font1);
      textAnnotation0.getRotationAngle();
      textAnnotation1.setRotationAngle(0.0);
      textAnnotation0.setRotationAnchor(textAnchor1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("");
      TextAnnotation textAnnotation1 = new TextAnnotation("`@/PRa3T43oh6Z0IbR");
      textAnnotation1.clone();
      textAnnotation1.setText("scB>Vn");
      textAnnotation0.setRotationAngle(1268.9109726);
      textAnnotation0.equals(textAnnotation1);
      textAnnotation1.getPaint();
      textAnnotation0.hashCode();
      textAnnotation1.setPaint(textAnnotation0.DEFAULT_PAINT);
      textAnnotation1.setTextAnchor(textAnnotation0.DEFAULT_ROTATION_ANCHOR);
      textAnnotation1.setTextAnchor(textAnnotation0.DEFAULT_ROTATION_ANCHOR);
      textAnnotation1.getFont();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "xBe9nQZ.";
      TextAnnotation textAnnotation0 = new TextAnnotation("xBe9nQZ.");
      Paint paint0 = textAnnotation0.getPaint();
      textAnnotation0.setPaint(paint0);
      textAnnotation0.getFont();
      textAnnotation0.setText("xBe9nQZ.");
      textAnnotation0.setPaint(paint0);
      TextAnchor textAnchor0 = null;
      textAnnotation0.setText("xBe9nQZ.");
      // Undeclared exception!
      try { 
        textAnnotation0.setTextAnchor((TextAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("");
      Color color0 = (Color)TextAnnotation.DEFAULT_PAINT;
      textAnnotation0.setPaint(color0);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      textAnnotation0.hasListener(eventListener0);
      // Undeclared exception!
      try { 
        textAnnotation0.setRotationAnchor((TextAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("org.jfree.chart.ui.TextAnchor");
      // Undeclared exception!
      try { 
        textAnnotation0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextAnnotation textAnnotation0 = null;
      try {
        textAnnotation0 = new TextAnnotation((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("GOvti .6S{p");
      textAnnotation0.setRotationAngle((-1039.0172874569341));
      textAnnotation0.getRotationAngle();
      TextAnchor textAnchor0 = textAnnotation0.getRotationAnchor();
      textAnnotation0.setRotationAnchor(textAnchor0);
      Color color0 = (Color)TextAnnotation.DEFAULT_PAINT;
      textAnnotation0.setPaint(color0);
      textAnnotation0.setPaint(color0);
      textAnnotation0.equals(color0);
      textAnnotation0.setPaint(color0);
      textAnnotation0.equals("GOvti .6S{p");
      textAnnotation0.getPaint();
      textAnnotation0.getTextAnchor();
      textAnnotation0.getFont();
      textAnnotation0.getRotationAnchor();
      textAnnotation0.setText("GOvti .6S{p");
      textAnnotation0.getPaint();
      Font font0 = textAnnotation0.getFont();
      textAnnotation0.setFont(font0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("73$");
      textAnnotation0.clone();
      textAnnotation0.getPaint();
      textAnnotation0.getText();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("!lV$");
      textAnnotation0.equals("!lV$");
      textAnnotation0.clone();
      textAnnotation0.hashCode();
      textAnnotation0.getRotationAnchor();
      Font font0 = TextAnnotation.DEFAULT_FONT;
      textAnnotation0.setFont(font0);
      textAnnotation0.setRotationAngle((-1452.3437652));
      textAnnotation0.getPaint();
      textAnnotation0.setText("!lV$");
      textAnnotation0.hashCode();
      textAnnotation0.setText("");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("+XfoMM6");
      textAnnotation0.setRotationAngle((-1433.87));
      textAnnotation0.setRotationAngle(1.0);
      textAnnotation0.getTextAnchor();
      textAnnotation0.getRotationAngle();
      textAnnotation0.getPaint();
      textAnnotation0.fireAnnotationChanged();
      Font font0 = textAnnotation0.getFont();
      textAnnotation0.setFont(font0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("!,KBQ]LLT:MlDt");
      TextAnchor textAnchor0 = textAnnotation0.getRotationAnchor();
      textAnnotation0.setRotationAnchor(textAnchor0);
      textAnnotation0.hashCode();
      textAnnotation0.setRotationAngle(2559.03);
      textAnnotation0.getText();
      textAnnotation0.setRotationAngle((-1.0));
      textAnnotation0.getPaint();
      textAnnotation0.setTextAnchor(textAnchor0);
      textAnnotation0.equals("!,KBQ]LLT:MlDt");
      textAnnotation0.hashCode();
      textAnnotation0.getTextAnchor();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("");
      TextAnnotation textAnnotation1 = new TextAnnotation("");
      Font font0 = textAnnotation1.getFont();
      textAnnotation0.setFont(font0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("pieChart");
      textAnnotation0.hasListener((EventListener) null);
      textAnnotation0.equals("pieChart");
      Object object0 = textAnnotation0.clone();
      textAnnotation0.equals(object0);
      textAnnotation0.setText("X!/ke");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("TextAnchor.HALF_ASCENT_CENTER");
      TextAnchor textAnchor0 = textAnnotation0.getTextAnchor();
      textAnnotation0.setRotationAnchor(textAnchor0);
      textAnnotation0.hashCode();
      textAnnotation0.getRotationAngle();
      textAnnotation0.setRotationAngle(0.0);
      textAnnotation0.getRotationAngle();
      textAnnotation0.getTextAnchor();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("%F0ZdX");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals("%F0ZdX", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      
      TextAnchor textAnchor0 = TextAnnotation.DEFAULT_ROTATION_ANCHOR;
      assertNotNull(textAnchor0);
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertTrue(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      
      textAnnotation0.setRotationAnchor(textAnchor0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals("%F0ZdX", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertTrue(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      
      textAnnotation0.hashCode();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals("%F0ZdX", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      
      TextAnchor textAnchor1 = textAnnotation0.getTextAnchor();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertSame(textAnchor1, textAnchor0);
      assertNotNull(textAnchor1);
      assertEquals("%F0ZdX", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isTop());
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      textAnnotation0.addChangeListener(annotationChangeListener0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals("%F0ZdX", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      
      boolean boolean0 = textAnnotation0.hasListener(eventListener0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(boolean0);
      assertEquals("%F0ZdX", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      
      textAnnotation0.setTextAnchor(textAnchor1);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertSame(textAnchor1, textAnchor0);
      assertEquals("%F0ZdX", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertFalse(textAnchor1.isBaseline());
      assertTrue(textAnchor1.isVerticalCenter());
      assertFalse(textAnchor1.isRight());
      assertFalse(textAnchor1.isLeft());
      assertFalse(textAnchor1.isHalfAscent());
      assertFalse(textAnchor1.isBottom());
      assertTrue(textAnchor1.isHorizontalCenter());
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
      assertFalse(textAnchor1.isTop());
      
      TextAnchor textAnchor2 = textAnnotation0.getRotationAnchor();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertSame(textAnchor2, textAnchor0);
      assertSame(textAnchor2, textAnchor1);
      assertNotNull(textAnchor2);
      assertEquals("%F0ZdX", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertEquals("TextAnchor.CENTER", textAnchor2.toString());
      assertFalse(textAnchor2.isTop());
      assertFalse(textAnchor2.isBottom());
      assertFalse(textAnchor2.isHalfAscent());
      assertTrue(textAnchor2.isHorizontalCenter());
      assertTrue(textAnchor2.isVerticalCenter());
      assertFalse(textAnchor2.isRight());
      assertFalse(textAnchor2.isBaseline());
      assertFalse(textAnchor2.isLeft());
      
      Paint paint0 = null;
      // Undeclared exception!
      try { 
        textAnnotation0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertEquals("", textAnnotation0.getText());
      
      textAnnotation0.hashCode();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertEquals("", textAnnotation0.getText());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("i=2{Ve;q");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals("i=2{Ve;q", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      
      TextAnchor textAnchor0 = textAnnotation0.getTextAnchor();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnchor0);
      assertEquals("i=2{Ve;q", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnchor0.isVerticalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isHalfAscent());
      assertFalse(textAnchor0.isLeft());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isBottom());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isTop());
      
      TextAnnotation textAnnotation1 = (TextAnnotation)textAnnotation0.clone();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(textAnnotation1.equals((Object)textAnnotation0));
      assertNotSame(textAnnotation0, textAnnotation1);
      assertNotSame(textAnnotation1, textAnnotation0);
      assertNotNull(textAnnotation1);
      assertEquals("i=2{Ve;q", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation1.getNotify());
      assertEquals("i=2{Ve;q", textAnnotation1.getText());
      assertEquals(0.0, textAnnotation1.getRotationAngle(), 0.01);
      
      boolean boolean0 = textAnnotation0.equals(textAnnotation1);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(textAnnotation0.equals((Object)textAnnotation1));
      assertTrue(textAnnotation1.equals((Object)textAnnotation0));
      assertNotSame(textAnnotation0, textAnnotation1);
      assertNotSame(textAnnotation1, textAnnotation0);
      assertTrue(boolean0);
      assertEquals("i=2{Ve;q", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation1.getNotify());
      assertEquals("i=2{Ve;q", textAnnotation1.getText());
      assertEquals(0.0, textAnnotation1.getRotationAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("SansSerif");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals("SansSerif", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      
      boolean boolean0 = textAnnotation0.equals((Object) null);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(boolean0);
      assertEquals("SansSerif", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("Indices must be Integer instances.");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals("Indices must be Integer instances.", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      
      textAnnotation0.setRotationAngle((-6372.5988492163));
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals((-6372.5988492163), textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("Indices must be Integer instances.", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("O");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals("O", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      
      double double0 = textAnnotation0.getRotationAngle();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals("O", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      
      TextAnchor textAnchor0 = textAnnotation0.getTextAnchor();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnchor0);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertTrue(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
      
      textAnnotation0.setRotationAnchor(textAnchor0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isLeft());
      assertTrue(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBaseline());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isRight());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("O\",^NJ+vRVA\"D");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("O\",^NJ+vRVA\"D", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      
      Color color0 = (Color)textAnnotation0.getPaint();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(color0);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("O\",^NJ+vRVA\"D", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      
      textAnnotation0.setPaint(color0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("O\",^NJ+vRVA\"D", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals("", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      
      Color color0 = (Color)textAnnotation0.getPaint();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(color0);
      assertEquals("", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals("", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      
      Font font0 = textAnnotation0.getFont();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(font0);
      assertEquals("", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      
      textAnnotation0.setFont(font0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals("", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      
      Font font1 = textAnnotation0.getFont();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertSame(font1, font0);
      assertNotNull(font1);
      assertEquals("", textAnnotation0.getText());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertFalse(font1.isItalic());
      assertFalse(font1.hasUniformLineMetrics());
      assertTrue(font1.isPlain());
      assertFalse(font1.isBold());
      assertEquals(10.0F, font1.getSize2D(), 0.01F);
      assertEquals(10, font1.getSize());
      assertFalse(font1.hasLayoutAttributes());
      assertEquals(0, font1.getStyle());
      assertFalse(font1.isTransformed());
      assertEquals("SansSerif", font1.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertEquals("", textAnnotation0.getText());
      
      String string0 = textAnnotation0.getText();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertEquals("", textAnnotation0.getText());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertEquals("", textAnnotation0.getText());
      
      TextAnchor textAnchor0 = textAnnotation0.getRotationAnchor();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnchor0);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertEquals("", textAnnotation0.getText());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isLeft());
      assertTrue(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBaseline());
      
      textAnnotation0.setTextAnchor(textAnchor0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertEquals("", textAnnotation0.getText());
      assertFalse(textAnchor0.isRight());
      assertFalse(textAnchor0.isHalfAscent());
      assertEquals("TextAnchor.CENTER", textAnchor0.toString());
      assertFalse(textAnchor0.isTop());
      assertFalse(textAnchor0.isBottom());
      assertFalse(textAnchor0.isLeft());
      assertTrue(textAnchor0.isVerticalCenter());
      assertTrue(textAnchor0.isHorizontalCenter());
      assertFalse(textAnchor0.isBaseline());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("w(z(");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals("w(z(", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      
      textAnnotation0.setText("#;+._!d[5f3`");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(textAnnotation0.getNotify());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("#;+._!d[5f3`", textAnnotation0.getText());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("org.jfree.chart.ui.RectangleEdge");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("org.jfree.chart.ui.RectangleEdge", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      
      boolean boolean0 = textAnnotation0.equals(textAnnotation0);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("org.jfree.chart.ui.RectangleEdge", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      
      textAnnotation0.setTextAnchor(textAnnotation0.DEFAULT_TEXT_ANCHOR);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("org.jfree.chart.ui.RectangleEdge", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      
      Font font0 = textAnnotation0.getFont();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(font0);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("org.jfree.chart.ui.RectangleEdge", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      
      boolean boolean1 = textAnnotation0.equals(textAnnotation0.DEFAULT_ROTATION_ANCHOR);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("org.jfree.chart.ui.RectangleEdge", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      
      textAnnotation0.setRotationAnchor(textAnnotation0.DEFAULT_ROTATION_ANCHOR);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("org.jfree.chart.ui.RectangleEdge", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      
      String string0 = textAnnotation0.getText();
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals("org.jfree.chart.ui.RectangleEdge", string0);
      assertNotNull(string0);
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      assertEquals("org.jfree.chart.ui.RectangleEdge", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      
      // Undeclared exception!
      try { 
        textAnnotation0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("dEhg8qWV44vhz7F");
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(textAnnotation0);
      assertEquals("dEhg8qWV44vhz7F", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
      
      textAnnotation0.setFont(textAnnotation0.DEFAULT_FONT);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals("dEhg8qWV44vhz7F", textAnnotation0.getText());
      assertTrue(textAnnotation0.getNotify());
      assertEquals(0.0, textAnnotation0.getRotationAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextAnnotation textAnnotation0 = new TextAnnotation("");
      TextAnnotation textAnnotation1 = new TextAnnotation("`@/PRa3T43oh6Z0IbR");
      Object object0 = textAnnotation1.clone();
      object0.equals(textAnnotation1);
      textAnnotation1.setText("");
      textAnnotation0.setRotationAngle(1268.9109726);
      textAnnotation0.equals(textAnnotation1);
      TextAnnotation textAnnotation2 = new TextAnnotation("lyvDR8Xc");
      textAnnotation1.equals(textAnnotation2);
      textAnnotation1.getPaint();
      textAnnotation0.hashCode();
      textAnnotation1.setPaint(textAnnotation0.DEFAULT_PAINT);
      textAnnotation1.setTextAnchor(textAnnotation0.DEFAULT_ROTATION_ANCHOR);
      textAnnotation0.getRotationAnchor();
      assertEquals(1268.9109726, textAnnotation0.getRotationAngle(), 0.01);
  }
}
