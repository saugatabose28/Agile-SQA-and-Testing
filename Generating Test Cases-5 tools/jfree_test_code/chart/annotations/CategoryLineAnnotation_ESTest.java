/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:58:57 GMT 2023
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoryLineAnnotation_ESTest extends CategoryLineAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-693.2576), comparable0, 95.8333333, paint0, stroke0);
      categoryLineAnnotation0.setCategory1("%:EWnhAj`-");
      categoryLineAnnotation0.hashCode();
      categoryLineAnnotation0.equals("%:EWnhAj`-");
      categoryLineAnnotation0.hashCode();
      categoryLineAnnotation0.setValue1((-693.2576));
      categoryLineAnnotation0.setValue2((-2030.93963192936));
      categoryLineAnnotation0.getValue1();
      categoryLineAnnotation0.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 2007).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn(axisLocation0).when(categoryPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(categoryPlot0).getOrientation();
      categoryLineAnnotation0.getCategory1();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 4202.029620648, paint0, stroke0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.equals(categoryLineAnnotation0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 2092.364037577004, comparable0, 2092.364037577004, paint0, stroke0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn((AxisLocation) null).when(categoryPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(categoryPlot0).getOrientation();
      Rectangle2D rectangle2D0 = null;
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.addChangeListener((AnnotationChangeListener) null);
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.hashCode();
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, (Rectangle2D) null, categoryAxis0, valueAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 2117.97285513347, comparable1, 2117.97285513347, paint0, stroke0);
      Object object0 = categoryLineAnnotation0.clone();
      categoryLineAnnotation0.setValue1((-4.0));
      categoryLineAnnotation0.equals(object0);
      categoryLineAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-693.2576), comparable0, 95.8333333, paint0, stroke0);
      categoryLineAnnotation0.setCategory1("%:EWnhAj`-");
      categoryLineAnnotation0.hashCode();
      categoryLineAnnotation0.equals("%:EWnhAj`-");
      categoryLineAnnotation0.hashCode();
      categoryLineAnnotation0.setValue1((-693.2576));
      categoryLineAnnotation0.setValue2((-2030.93963192936));
      categoryLineAnnotation0.getValue1();
      categoryLineAnnotation0.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn((CategoryDataset) null).when(categoryPlot0).getDataset();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, (-902.46), paint0, stroke0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.addChangeListener(annotationChangeListener0);
      Object object0 = categoryLineAnnotation0.clone();
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.addChangeListener(annotationChangeListener1);
      categoryLineAnnotation0.setNotify(false);
      categoryLineAnnotation0.hashCode();
      Comparable<CategoryLineAnnotation> comparable1 = (Comparable<CategoryLineAnnotation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      categoryLineAnnotation0.setCategory2(comparable1);
      categoryLineAnnotation0.setValue2(488.2976);
      categoryLineAnnotation0.getValue2();
      categoryLineAnnotation0.equals(object0);
      categoryLineAnnotation0.getCategory2();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke1);
      categoryLineAnnotation0.hashCode();
      categoryLineAnnotation0.setValue2((-1.0));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn((CategoryDataset) null).when(categoryPlot0).getDataset();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 0.0, paint0, stroke0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.removeChangeListener(annotationChangeListener0);
      categoryLineAnnotation0.setValue2(829.0106752633101);
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setPaint(paint2);
      categoryLineAnnotation0.addChangeListener((AnnotationChangeListener) null);
      CategoryLineAnnotation categoryLineAnnotation1 = new CategoryLineAnnotation(comparable1, 0.0, comparable1, 0.0, paint1, stroke1);
      categoryLineAnnotation0.equals(categoryLineAnnotation1);
      Paint paint3 = mock(Paint.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation1.setPaint(paint3);
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation1.addChangeListener((AnnotationChangeListener) null);
      categoryLineAnnotation0.setCategory2(comparable2);
      categoryLineAnnotation1.setValue2(0.0);
      Comparable<String> comparable3 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation1.setCategory2(comparable3);
      categoryLineAnnotation1.equals((Object) null);
      categoryLineAnnotation1.hashCode();
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-238.4652), comparable0, (-238.4652), paint0, stroke0);
      categoryLineAnnotation0.getValue2();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-3676.884665211), comparable0, 0.0, paint0, stroke0);
      Object object0 = categoryLineAnnotation0.clone();
      categoryLineAnnotation0.equals(object0);
      categoryLineAnnotation0.setValue1(0.0);
      categoryLineAnnotation0.clone();
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.hashCode();
      categoryLineAnnotation0.setCategory2(comparable1);
      categoryLineAnnotation0.getValue2();
      categoryLineAnnotation0.getCategory1();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 0.0, paint0, stroke0);
      categoryLineAnnotation0.getValue1();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double double0 = 1.0;
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 1.0, comparable0, 0.0, paint0, stroke0);
      categoryLineAnnotation0.setNotify(true);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.addChangeListener(annotationChangeListener0);
      Comparable<CategoryLineAnnotation> comparable1 = (Comparable<CategoryLineAnnotation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke1);
      Stroke stroke2 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke2);
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.setStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-116.291819), comparable0, (-116.291819), paint0, stroke0);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke1);
      categoryLineAnnotation0.setValue1(0.0);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.notifyListeners(annotationChangeEvent0);
      categoryLineAnnotation0.equals("5@:kJNk^|}g^j\"!I");
      Object object0 = categoryLineAnnotation0.clone();
      Stroke stroke2 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke2);
      categoryLineAnnotation0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 3155.372388, comparable0, 3155.372388, paint0, stroke0);
      categoryLineAnnotation0.getCategory2();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparable<CategoryLineAnnotation> comparable0 = (Comparable<CategoryLineAnnotation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 0.0, paint0, stroke0);
      categoryLineAnnotation0.setValue2(797.11831838);
      categoryLineAnnotation0.hasListener((EventListener) null);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke1);
      categoryLineAnnotation0.setValue1((-1592.6987609458));
      categoryLineAnnotation0.setNotify(false);
      categoryLineAnnotation0.getPaint();
      categoryLineAnnotation0.setValue2((-4009.3163337038));
      categoryLineAnnotation0.setValue1(0.0);
      categoryLineAnnotation0.setValue1(0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setValue2((-864.6949181457));
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn((CategoryDataset) null).when(categoryPlot0).getDataset();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-3.0), comparable0, (-3.0), paint0, stroke0);
      categoryLineAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparable<CategoryLineAnnotation> comparable0 = (Comparable<CategoryLineAnnotation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      Comparable<CategoryLineAnnotation> comparable1 = (Comparable<CategoryLineAnnotation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable1, 0.0, paint0, stroke0);
      categoryLineAnnotation0.hashCode();
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setCategory1(comparable2);
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.setCategory1((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke0).toString();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 1096.78086, comparable0, 1096.78086, paint0, stroke0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setPaint(paint1);
      categoryLineAnnotation0.hashCode();
      categoryLineAnnotation0.setCategory1((-1875132996));
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setPaint(paint2);
      categoryLineAnnotation0.getCategory2();
      Object object0 = categoryLineAnnotation0.clone();
      categoryLineAnnotation0.equals(object0);
      Stroke stroke1 = categoryLineAnnotation0.getStroke();
      categoryLineAnnotation0.getValue1();
      categoryLineAnnotation0.getValue1();
      Paint paint3 = mock(Paint.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setPaint(paint3);
      categoryLineAnnotation0.setStroke(stroke1);
      categoryLineAnnotation0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 0.0, paint0, stroke0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.fireAnnotationChanged();
      categoryLineAnnotation0.setValue1(0.0);
      categoryLineAnnotation0.setCategory1(comparable1);
      categoryLineAnnotation0.setValue1(0.0);
      categoryLineAnnotation0.clone();
      categoryLineAnnotation0.setValue2(0.0);
      categoryLineAnnotation0.setValue2(1.0);
      Comparable<Object> comparable2 = null;
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.setCategory2((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparable<Object> comparable0 = null;
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = null;
      try {
        categoryLineAnnotation0 = new CategoryLineAnnotation((Comparable) null, 100.0, (Comparable) null, 100.0, (Paint) null, stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category1' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 1573.21710869, comparable0, 1573.21710869, paint0, stroke0);
      Object object0 = categoryLineAnnotation0.clone();
      categoryLineAnnotation0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stroke0).toString();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 1.0, comparable0, Double.NaN, paint0, stroke0);
      assertNotNull(categoryLineAnnotation0);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(1.0, categoryLineAnnotation0.getValue1(), 0.01);
      
      categoryLineAnnotation0.hashCode();
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(1.0, categoryLineAnnotation0.getValue1(), 0.01);
      
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setValue1(1.0);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(1.0, categoryLineAnnotation0.getValue1(), 0.01);
      
      categoryLineAnnotation0.setValue1(Double.NaN);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.hashCode();
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      Paint paint3 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation1 = new CategoryLineAnnotation(comparable1, (-4014.9), comparable1, 0.0, paint3, stroke1);
      assertFalse(categoryLineAnnotation1.equals((Object)categoryLineAnnotation0));
      assertNotNull(categoryLineAnnotation1);
      assertEquals(0.0, categoryLineAnnotation1.getValue2(), 0.01);
      assertEquals((-4014.9), categoryLineAnnotation1.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation1.getNotify());
      
      boolean boolean0 = categoryLineAnnotation0.equals(categoryLineAnnotation1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertFalse(categoryLineAnnotation1.equals((Object)categoryLineAnnotation0));
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation1, categoryLineAnnotation0);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(0.0, categoryLineAnnotation1.getValue2(), 0.01);
      assertEquals((-4014.9), categoryLineAnnotation1.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation1.getNotify());
      assertFalse(boolean0);
      
      categoryLineAnnotation0.setPaint(paint2);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.addChangeListener(annotationChangeListener0);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      categoryLineAnnotation0.setPaint(paint1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      categoryLineAnnotation0.hashCode();
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.addChangeListener(annotationChangeListener1);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      CategoryLineAnnotation categoryLineAnnotation2 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertFalse(categoryLineAnnotation2.equals((Object)categoryLineAnnotation0));
      assertFalse(categoryLineAnnotation2.equals((Object)categoryLineAnnotation1));
      assertNotNull(categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation0);
      assertNotSame(categoryLineAnnotation2, categoryLineAnnotation1);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertTrue(categoryLineAnnotation2.getNotify());
      assertEquals(Double.NaN, categoryLineAnnotation2.getValue2(), 0.01);
      assertEquals(Double.NaN, categoryLineAnnotation2.getValue1(), 0.01);
      
      Stroke stroke2 = categoryLineAnnotation0.getStroke();
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      assertFalse(stroke2.equals((Object)stroke1));
      assertNotNull(stroke2);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertNotSame(stroke2, stroke1);
      assertSame(stroke2, stroke0);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      Paint paint4 = mock(Paint.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setPaint(paint4);
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      Comparable comparable2 = categoryLineAnnotation0.getCategory1();
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      assertNotNull(comparable2);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      
      CategoryLineAnnotation categoryLineAnnotation3 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation1));
      assertFalse(categoryLineAnnotation0.equals((Object)categoryLineAnnotation2));
      assertFalse(categoryLineAnnotation3.equals((Object)categoryLineAnnotation1));
      assertFalse(categoryLineAnnotation3.equals((Object)categoryLineAnnotation2));
      assertFalse(categoryLineAnnotation3.equals((Object)categoryLineAnnotation0));
      assertNotNull(categoryLineAnnotation3);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation3);
      assertNotSame(categoryLineAnnotation0, categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation3, categoryLineAnnotation1);
      assertNotSame(categoryLineAnnotation3, categoryLineAnnotation2);
      assertNotSame(categoryLineAnnotation3, categoryLineAnnotation0);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(Double.NaN, categoryLineAnnotation0.getValue1(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(Double.NaN, categoryLineAnnotation3.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation3.getNotify());
      assertEquals(Double.NaN, categoryLineAnnotation3.getValue1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<CategoryLineAnnotation> comparable1 = (Comparable<CategoryLineAnnotation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.0, comparable0, 1205.8239497, paint0, stroke0);
      assertNotNull(categoryLineAnnotation0);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(1205.8239497, categoryLineAnnotation0.getValue2(), 0.01);
      
      Comparable<CategoryLineAnnotation> comparable1 = (Comparable<CategoryLineAnnotation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setCategory2(comparable1);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(1205.8239497, categoryLineAnnotation0.getValue2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(paint0).toString();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(stroke0).toString();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 2238.8072511833534, comparable0, 2238.8072511833534, paint0, stroke0);
      assertNotNull(categoryLineAnnotation0);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      
      categoryLineAnnotation0.fireAnnotationChanged();
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      
      categoryLineAnnotation0.addChangeListener((AnnotationChangeListener) null);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      
      categoryLineAnnotation0.setNotify(true);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.removeChangeListener(annotationChangeListener0);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      
      categoryLineAnnotation0.setNotify(false);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      
      Stroke stroke1 = categoryLineAnnotation0.getStroke();
      assertNotNull(stroke1);
      assertSame(stroke1, stroke0);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      
      categoryLineAnnotation0.setValue2(2238.8072511833534);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      
      categoryLineAnnotation0.setValue1(2238.8072511833534);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      
      Paint paint1 = categoryLineAnnotation0.getPaint();
      assertNotNull(paint1);
      assertSame(paint1, paint0);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      assertEquals(0, paint1.getTransparency());
      
      double double0 = categoryLineAnnotation0.getValue1();
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      assertEquals(2238.8072511833534, double0, 0.01);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setPaint(paint1);
      assertSame(paint1, paint0);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      assertEquals(0, paint1.getTransparency());
      
      categoryLineAnnotation0.setCategory1(comparable1);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      
      boolean boolean0 = categoryLineAnnotation0.equals("org.jfree.chart.axis.DateAxisTest$MyDateAxis");
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      assertFalse(boolean0);
      
      categoryLineAnnotation0.setCategory2("org.jfree.chart.axis.DateAxisTest$MyDateAxis");
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      
      categoryLineAnnotation0.setCategory2("org.jfree.chart.axis.DateAxisTest$MyDateAxis");
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      
      categoryLineAnnotation0.setStroke(stroke1);
      assertSame(stroke1, stroke0);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      
      Stroke stroke2 = categoryLineAnnotation0.getStroke();
      assertNotNull(stroke2);
      assertSame(stroke2, stroke1);
      assertSame(stroke2, stroke0);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      
      double double1 = categoryLineAnnotation0.getValue2();
      assertEquals(double1, double0, 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      assertEquals(2238.8072511833534, double1, 0.01);
      
      double double2 = categoryLineAnnotation0.getValue2();
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      assertEquals(2238.8072511833534, double2, 0.01);
      
      Paint paint2 = categoryLineAnnotation0.getPaint();
      assertNotNull(paint2);
      assertSame(paint2, paint0);
      assertSame(paint2, paint1);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
      assertEquals(0, paint2.getTransparency());
      
      categoryLineAnnotation0.setCategory1("org.jfree.chart.axis.DateAxisTest$MyDateAxis");
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(2238.8072511833534, categoryLineAnnotation0.getValue2(), 0.01);
      assertFalse(categoryLineAnnotation0.getNotify());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = null;
      try {
        categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-1421.6673561692), comparable0, 0.0, (Paint) null, stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, 0.25, comparable0, 0.0, paint0, stroke0);
      categoryLineAnnotation0.setValue1(0.25);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getColumnCount();
      CategoryPlot categoryPlot0 = mock(CategoryPlot.class, new ViolatedAssumptionAnswer());
      doReturn(categoryDataset0).when(categoryPlot0).getDataset();
      doReturn((AxisLocation) null).when(categoryPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(categoryPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      CategoryAxis categoryAxis0 = mock(CategoryAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.draw(graphics2D0, categoryPlot0, rectangle2D0, categoryAxis0, valueAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("fK3Y(\"1h:xM", (String) null).when(comparable0).toString();
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(comparable0, (-116.291819), comparable0, (-116.291819), paint0, stroke0);
      categoryLineAnnotation0.equals("5@:kJNk^|}g^j\"!I");
      Object object0 = categoryLineAnnotation0.clone();
      assertTrue(object0.equals((Object)categoryLineAnnotation0));
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      categoryLineAnnotation0.setStroke(stroke1);
      boolean boolean0 = categoryLineAnnotation0.equals(object0);
      assertFalse(boolean0);
  }
}
