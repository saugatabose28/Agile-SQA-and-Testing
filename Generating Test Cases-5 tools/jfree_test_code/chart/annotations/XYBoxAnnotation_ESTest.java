/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:51:47 GMT 2023
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYBoxAnnotation_ESTest extends XYBoxAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(0.0, 0.0, 0.0, (-1110.5));
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNotNull(xYBoxAnnotation0);
      
      XYBoxAnnotation xYBoxAnnotation1 = (XYBoxAnnotation)xYBoxAnnotation0.clone();
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNotNull(xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertTrue(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      boolean boolean0 = xYBoxAnnotation0.equals(xYBoxAnnotation1);
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertTrue(boolean0);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      XYBoxAnnotation xYBoxAnnotation2 = new XYBoxAnnotation(0.0, 0.0, 0.0, 0.0);
      assertNull(xYBoxAnnotation2.getURL());
      assertTrue(xYBoxAnnotation2.getNotify());
      assertNull(xYBoxAnnotation2.getToolTipText());
      assertNotNull(xYBoxAnnotation2);
      assertFalse(xYBoxAnnotation2.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation2.equals((Object)xYBoxAnnotation0));
      
      boolean boolean1 = xYBoxAnnotation0.equals(xYBoxAnnotation2);
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation2.getURL());
      assertTrue(xYBoxAnnotation2.getNotify());
      assertNull(xYBoxAnnotation2.getToolTipText());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation0);
      assertFalse(boolean1);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation2));
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation2.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation2.equals((Object)xYBoxAnnotation0));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = xYBoxAnnotation0.equals(xYBoxAnnotation1);
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation2);
      assertTrue(boolean2);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation2));
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation2));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation3 = new XYBoxAnnotation(0.0, 0.0, 797.52146, 0.0, stroke0, paint0, paint0);
      assertTrue(xYBoxAnnotation3.getNotify());
      assertNull(xYBoxAnnotation3.getToolTipText());
      assertNull(xYBoxAnnotation3.getURL());
      assertNotNull(xYBoxAnnotation3);
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation0));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation1));
      
      boolean boolean3 = xYBoxAnnotation3.equals(xYBoxAnnotation0);
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation3.getNotify());
      assertNull(xYBoxAnnotation3.getToolTipText());
      assertNull(xYBoxAnnotation3.getURL());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation3);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation1);
      assertFalse(boolean3);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation3));
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation0));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(0.0, 0.0, 0.0, 0.0, stroke0, paint0);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNotNull(xYBoxAnnotation0);
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation1 = new XYBoxAnnotation(0.0, 0.0, 0.0, 0.0, stroke1, paint1, paint1);
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNotNull(xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation1.fireAnnotationChanged();
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      xYBoxAnnotation0.fireAnnotationChanged();
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      
      xYBoxAnnotation1.setNotify(false);
      assertNull(xYBoxAnnotation1.getURL());
      assertFalse(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      boolean boolean0 = xYBoxAnnotation1.equals(xYBoxAnnotation0);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertFalse(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(boolean0);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener2 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation1.removeChangeListener(annotationChangeListener2);
      assertNull(xYBoxAnnotation1.getURL());
      assertFalse(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      xYBoxAnnotation1.removeChangeListener(annotationChangeListener1);
      assertNull(xYBoxAnnotation1.getURL());
      assertFalse(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      xYBoxAnnotation1.addChangeListener(annotationChangeListener0);
      assertNull(xYBoxAnnotation1.getURL());
      assertFalse(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      boolean boolean1 = xYBoxAnnotation0.getNotify();
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      AnnotationChangeListener annotationChangeListener3 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation0.addChangeListener(annotationChangeListener3);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation0.notifyListeners((AnnotationChangeEvent) null);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYBoxAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 1504, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-1407.0536238623727), (-1407.0536238623727), 0.0, 322.6);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNotNull(xYBoxAnnotation0);
      
      XYBoxAnnotation xYBoxAnnotation1 = (XYBoxAnnotation)xYBoxAnnotation0.clone();
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation1.getURL());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNotNull(xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertTrue(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      boolean boolean0 = xYBoxAnnotation0.equals(xYBoxAnnotation0);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertTrue(boolean0);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stroke stroke0 = null;
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0, 1731.0, (-1.0), (-1903.66), (Stroke) null, paint0);
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNotNull(xYBoxAnnotation0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYBoxAnnotation0.draw(graphics2D1, xYPlot0, rectangle2D0, (ValueAxis) null, (ValueAxis) null, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(0.0, 0.0, 0.0, 0.0, stroke0, paint0);
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNotNull(xYBoxAnnotation0);
      
      XYBoxAnnotation xYBoxAnnotation1 = (XYBoxAnnotation)xYBoxAnnotation0.clone();
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNotNull(xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertTrue(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      xYBoxAnnotation0.hashCode();
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      
      XYBoxAnnotation xYBoxAnnotation2 = (XYBoxAnnotation)xYBoxAnnotation0.clone();
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertTrue(xYBoxAnnotation2.getNotify());
      assertNull(xYBoxAnnotation2.getURL());
      assertNull(xYBoxAnnotation2.getToolTipText());
      assertNotNull(xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation1);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation0));
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation3 = new XYBoxAnnotation(0.0, 0.0, 0.0, (-1164.73807), stroke1, (Paint) null);
      assertNull(xYBoxAnnotation3.getToolTipText());
      assertTrue(xYBoxAnnotation3.getNotify());
      assertNull(xYBoxAnnotation3.getURL());
      assertNotNull(xYBoxAnnotation3);
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation0));
      
      XYBoxAnnotation xYBoxAnnotation4 = (XYBoxAnnotation)xYBoxAnnotation3.clone();
      assertNull(xYBoxAnnotation3.getToolTipText());
      assertTrue(xYBoxAnnotation3.getNotify());
      assertNull(xYBoxAnnotation3.getURL());
      assertNull(xYBoxAnnotation4.getURL());
      assertTrue(xYBoxAnnotation4.getNotify());
      assertNull(xYBoxAnnotation4.getToolTipText());
      assertNotNull(xYBoxAnnotation4);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation4);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation4, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation4, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation4, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation4, xYBoxAnnotation3);
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation0));
      assertTrue(xYBoxAnnotation4.equals((Object)xYBoxAnnotation3));
      assertFalse(xYBoxAnnotation4.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation4.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation4.equals((Object)xYBoxAnnotation0));
      
      boolean boolean0 = xYBoxAnnotation0.equals(xYBoxAnnotation4);
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation3.getToolTipText());
      assertTrue(xYBoxAnnotation3.getNotify());
      assertNull(xYBoxAnnotation3.getURL());
      assertNull(xYBoxAnnotation4.getURL());
      assertTrue(xYBoxAnnotation4.getNotify());
      assertNull(xYBoxAnnotation4.getToolTipText());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation3);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation4);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation4);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation4, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation4, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation4, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation4, xYBoxAnnotation3);
      assertFalse(boolean0);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation3));
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation4));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation0));
      assertTrue(xYBoxAnnotation3.equals((Object)xYBoxAnnotation4));
      assertTrue(xYBoxAnnotation4.equals((Object)xYBoxAnnotation3));
      assertFalse(xYBoxAnnotation4.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation4.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation4.equals((Object)xYBoxAnnotation0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(871.590942084584, 871.590942084584, 871.590942084584, 0.0);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNotNull(xYBoxAnnotation0);
      
      XYBoxAnnotation xYBoxAnnotation1 = new XYBoxAnnotation(0.0, 871.590942084584, 879.919093, 0.0);
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNotNull(xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      XYBoxAnnotation xYBoxAnnotation2 = (XYBoxAnnotation)xYBoxAnnotation1.clone();
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation2.getURL());
      assertTrue(xYBoxAnnotation2.getNotify());
      assertNull(xYBoxAnnotation2.getToolTipText());
      assertNotNull(xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation2.equals((Object)xYBoxAnnotation0));
      
      boolean boolean0 = xYBoxAnnotation0.equals(xYBoxAnnotation2);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation2.getURL());
      assertTrue(xYBoxAnnotation2.getNotify());
      assertNull(xYBoxAnnotation2.getToolTipText());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation1);
      assertFalse(boolean0);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation1.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation2.equals((Object)xYBoxAnnotation0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(0.0, 0.0, 0.0, (-1110.5));
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNotNull(xYBoxAnnotation0);
      
      XYBoxAnnotation xYBoxAnnotation1 = (XYBoxAnnotation)xYBoxAnnotation0.clone();
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNotNull(xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertTrue(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      boolean boolean0 = xYBoxAnnotation0.equals(xYBoxAnnotation1);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertTrue(boolean0);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      XYBoxAnnotation xYBoxAnnotation2 = (XYBoxAnnotation)xYBoxAnnotation0.clone();
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation2.getURL());
      assertTrue(xYBoxAnnotation2.getNotify());
      assertNull(xYBoxAnnotation2.getToolTipText());
      assertNotNull(xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation0);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation0));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation1));
      
      boolean boolean1 = xYBoxAnnotation0.equals(xYBoxAnnotation2);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation2.getURL());
      assertTrue(xYBoxAnnotation2.getNotify());
      assertNull(xYBoxAnnotation2.getToolTipText());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation0);
      assertTrue(boolean1);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation2));
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation0));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = xYBoxAnnotation0.equals(xYBoxAnnotation1);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertTrue(boolean2);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation2));
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      assertTrue(xYBoxAnnotation1.equals((Object)xYBoxAnnotation2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation3 = new XYBoxAnnotation(0.0, 0.0, 797.52146, 0.0, stroke0, paint0, paint0);
      assertNull(xYBoxAnnotation3.getURL());
      assertTrue(xYBoxAnnotation3.getNotify());
      assertNull(xYBoxAnnotation3.getToolTipText());
      assertNotNull(xYBoxAnnotation3);
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation0));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation1));
      
      boolean boolean3 = xYBoxAnnotation3.equals(xYBoxAnnotation0);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation3.getURL());
      assertTrue(xYBoxAnnotation3.getNotify());
      assertNull(xYBoxAnnotation3.getToolTipText());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation3);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation1);
      assertFalse(boolean3);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation3));
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation0));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation1));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = xYBoxAnnotation0.equals(xYBoxAnnotation3);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation3.getURL());
      assertTrue(xYBoxAnnotation3.getNotify());
      assertNull(xYBoxAnnotation3.getToolTipText());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation3);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation3, xYBoxAnnotation1);
      assertFalse(boolean4);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation3));
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation0));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation3.equals((Object)xYBoxAnnotation1));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYBoxAnnotation0.draw(graphics2D0, (XYPlot) null, rectangle2D0, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYBoxAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1979.41, 1979.41, 1979.41, 1979.41, stroke0, paint0, paint1);
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNotNull(xYBoxAnnotation0);
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation0.setNotify(true);
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      
      Paint paint2 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation1 = new XYBoxAnnotation(1979.41, 1979.41, 4.9E-324, 4.9E-324, stroke1, paint2);
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNotNull(xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      boolean boolean0 = xYBoxAnnotation0.equals(xYBoxAnnotation1);
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(boolean0);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      XYBoxAnnotation xYBoxAnnotation2 = (XYBoxAnnotation)xYBoxAnnotation1.clone();
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation2.getToolTipText());
      assertTrue(xYBoxAnnotation2.getNotify());
      assertNull(xYBoxAnnotation2.getURL());
      assertNotNull(xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation2.equals((Object)xYBoxAnnotation0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(0.01, 0.01, 677.651, 677.651);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNotNull(xYBoxAnnotation0);
      
      xYBoxAnnotation0.hashCode();
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      
      xYBoxAnnotation0.hashCode();
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      
      xYBoxAnnotation0.hashCode();
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      
      xYBoxAnnotation0.hashCode();
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation0.addChangeListener(annotationChangeListener0);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      
      int int0 = 0;
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYBoxAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0, 1.0, 1.0, 1.0);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertNotNull(xYBoxAnnotation0);
      
      XYBoxAnnotation xYBoxAnnotation1 = (XYBoxAnnotation)xYBoxAnnotation0.clone();
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNotNull(xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertTrue(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      XYBoxAnnotation xYBoxAnnotation2 = (XYBoxAnnotation)xYBoxAnnotation0.clone();
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation2.getNotify());
      assertNull(xYBoxAnnotation2.getURL());
      assertNull(xYBoxAnnotation2.getToolTipText());
      assertNotNull(xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation1);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation0));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation1));
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYBoxAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(0.0, 0.0, 0.0, 0.0, stroke0, paint0);
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNotNull(xYBoxAnnotation0);
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation1 = new XYBoxAnnotation(0.0, 1281.0302766499, 1281.0302766499, 0.0, stroke1, paint1, paint1);
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNotNull(xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation1.fireAnnotationChanged();
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      xYBoxAnnotation0.fireAnnotationChanged();
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      
      xYBoxAnnotation1.setNotify(false);
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertFalse(xYBoxAnnotation1.getNotify());
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      boolean boolean0 = xYBoxAnnotation1.equals(xYBoxAnnotation0);
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertFalse(xYBoxAnnotation1.getNotify());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(boolean0);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener2 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation1.removeChangeListener(annotationChangeListener2);
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertFalse(xYBoxAnnotation1.getNotify());
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      xYBoxAnnotation1.removeChangeListener(annotationChangeListener1);
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertFalse(xYBoxAnnotation1.getNotify());
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      xYBoxAnnotation1.addChangeListener(annotationChangeListener0);
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertFalse(xYBoxAnnotation1.getNotify());
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      boolean boolean1 = xYBoxAnnotation0.equals(xYBoxAnnotation1);
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertFalse(xYBoxAnnotation1.getNotify());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      AnnotationChangeListener annotationChangeListener3 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation0.addChangeListener(annotationChangeListener3);
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation0.notifyListeners((AnnotationChangeEvent) null);
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYBoxAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(723.7184246, 723.7184246, (-545.496), 408.5278178168176);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNotNull(xYBoxAnnotation0);
      
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation0.notifyListeners(annotationChangeEvent0);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      
      xYBoxAnnotation0.hashCode();
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      
      boolean boolean0 = xYBoxAnnotation0.equals("31-May-2008");
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertFalse(boolean0);
      
      xYBoxAnnotation0.hashCode();
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation0.getNotify());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYBoxAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, (-2579), plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-542.7), (-3077.881291), 0.0, 0.0, stroke0, paint0, paint0);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNotNull(xYBoxAnnotation0);
      
      XYBoxAnnotation xYBoxAnnotation1 = (XYBoxAnnotation)xYBoxAnnotation0.clone();
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertNotNull(xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertTrue(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      boolean boolean0 = xYBoxAnnotation0.equals(xYBoxAnnotation1);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertTrue(boolean0);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      xYBoxAnnotation0.hashCode();
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-1585.587380938497), (-1585.587380938497), (-1585.587380938497), (-1585.587380938497), stroke0, paint0);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNotNull(xYBoxAnnotation0);
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation0.removeChangeListener(annotationChangeListener0);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation1 = new XYBoxAnnotation((-1585.587380938497), (-1585.587380938497), 602.92, (-1585.587380938497), stroke1, paint1, paint1);
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertNotNull(xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      boolean boolean0 = xYBoxAnnotation0.equals(xYBoxAnnotation1);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(boolean0);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      XYBoxAnnotation xYBoxAnnotation2 = (XYBoxAnnotation)xYBoxAnnotation1.clone();
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertTrue(xYBoxAnnotation2.getNotify());
      assertNull(xYBoxAnnotation2.getURL());
      assertNull(xYBoxAnnotation2.getToolTipText());
      assertNotNull(xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation0);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation2.equals((Object)xYBoxAnnotation0));
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYBoxAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, (ValueAxis) null, (ValueAxis) null, 10, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0, (-1.0), (-1.0), (-1.0));
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNotNull(xYBoxAnnotation0);
      
      XYBoxAnnotation xYBoxAnnotation1 = (XYBoxAnnotation)xYBoxAnnotation0.clone();
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNotNull(xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertTrue(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      XYBoxAnnotation xYBoxAnnotation2 = (XYBoxAnnotation)xYBoxAnnotation0.clone();
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation2.getURL());
      assertNull(xYBoxAnnotation2.getToolTipText());
      assertTrue(xYBoxAnnotation2.getNotify());
      assertNotNull(xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation0);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation0));
      
      boolean boolean0 = xYBoxAnnotation0.equals(xYBoxAnnotation2);
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation2.getURL());
      assertNull(xYBoxAnnotation2.getToolTipText());
      assertTrue(xYBoxAnnotation2.getNotify());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation2, xYBoxAnnotation0);
      assertTrue(boolean0);
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation0.equals((Object)xYBoxAnnotation2));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation1));
      assertTrue(xYBoxAnnotation2.equals((Object)xYBoxAnnotation0));
      
      xYBoxAnnotation0.setToolTipText("");
      assertNull(xYBoxAnnotation0.getURL());
      assertEquals("", xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      
      xYBoxAnnotation0.hashCode();
      assertNull(xYBoxAnnotation0.getURL());
      assertEquals("", xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      
      xYBoxAnnotation0.hashCode();
      assertNull(xYBoxAnnotation0.getURL());
      assertEquals("", xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation2);
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation2));
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(3298.6545223, 3298.6545223, 3298.6545223, 3298.6545223);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNotNull(xYBoxAnnotation0);
      
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation1 = new XYBoxAnnotation(4860.704850638476, 4860.704850638476, 4860.704850638476, 3298.6545223, stroke0, paint0, paint0);
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertNotNull(xYBoxAnnotation1);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      boolean boolean0 = xYBoxAnnotation0.equals(xYBoxAnnotation1);
      assertTrue(xYBoxAnnotation0.getNotify());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertNotSame(xYBoxAnnotation0, xYBoxAnnotation1);
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(boolean0);
      assertFalse(xYBoxAnnotation0.equals((Object)xYBoxAnnotation1));
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      
      String string0 = "";
      boolean boolean1 = xYBoxAnnotation1.equals("");
      assertTrue(xYBoxAnnotation1.getNotify());
      assertNull(xYBoxAnnotation1.getToolTipText());
      assertNull(xYBoxAnnotation1.getURL());
      assertNotSame(xYBoxAnnotation1, xYBoxAnnotation0);
      assertFalse(boolean1);
      assertFalse(xYBoxAnnotation1.equals((Object)xYBoxAnnotation0));
      assertTrue(boolean1 == boolean0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYBoxAnnotation1.draw(graphics2D0, xYPlot0, rectangle2D0, (ValueAxis) null, (ValueAxis) null, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(0.0, 0.0, 0.0, 2590.451045125);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation1 = new XYBoxAnnotation(0.0, 0.0, 0.0, (-1979.13536290087), stroke0, paint0);
      xYBoxAnnotation0.equals(xYBoxAnnotation1);
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation0.clone();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYBoxAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 2124, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-1.0), (-1.0), 0.0, (-1663.3247671602), stroke0, paint0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation0.addChangeListener(annotationChangeListener0);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation0.hasListener(eventListener0);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYBoxAnnotation0.notifyListeners(annotationChangeEvent0);
      // Undeclared exception!
      try { 
        xYBoxAnnotation0.addEntity(plotRenderingInfo0, (Shape) null, 2840, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.AbstractXYAnnotation", e);
      }
  }
}
