/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:54:26 GMT 2023
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYLineAnnotation_ESTest extends XYLineAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, 1.0E-8, 0.0, 2082.3021495267853);
      XYLineAnnotation xYLineAnnotation1 = (XYLineAnnotation)xYLineAnnotation0.clone();
      xYLineAnnotation1.setToolTipText("p\"eLX1#H:>'0bt9d`");
      xYLineAnnotation0.equals(xYLineAnnotation1);
      xYLineAnnotation0.equals(xYLineAnnotation0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, (ValueAxis) null, (ValueAxis) null, (-1073741824), (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(22.0, 290.52, 1389.103042, (-1112.999063537), stroke0, paint0);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.notifyListeners(annotationChangeEvent0);
      String string0 = "";
      xYLineAnnotation0.setToolTipText("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.equals("");
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1.0), (-1.0), 0.0, (-1.0), stroke0, paint0);
      xYLineAnnotation0.equals((Object) null);
      xYLineAnnotation0.equals((Object) null);
      xYLineAnnotation0.fireAnnotationChanged();
      xYLineAnnotation0.setNotify(false);
      xYLineAnnotation0.hashCode();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.removeChangeListener(annotationChangeListener0);
      xYLineAnnotation0.hashCode();
      xYLineAnnotation0.equals((Object) null);
      xYLineAnnotation0.hashCode();
      xYLineAnnotation0.hashCode();
      xYLineAnnotation0.equals((Object) null);
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation((-1.0), (-1.0), 0.0, (-3.2));
      xYLineAnnotation0.equals(xYLineAnnotation1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(731.35, (-1236.988956), 1680.6740252, 1680.6740252);
      PlotRenderingInfo plotRenderingInfo0 = null;
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.addEntity((PlotRenderingInfo) null, shape0, 40, "3dd@YKce>'|xW?S]", "No3e1{d}xx#Y\"");
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(731.35, (-1236.988956), 0.0, (-180.0), stroke0, paint0);
      xYLineAnnotation0.equals(xYLineAnnotation1);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 29, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(475.181, 475.181, 0.0, 0.0);
      xYLineAnnotation0.clone();
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(475.181, 475.181, 475.181, 0.0);
      xYLineAnnotation1.fireAnnotationChanged();
      Object object0 = xYLineAnnotation1.clone();
      xYLineAnnotation0.equals(object0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.hashCode();
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation1.draw(graphics2D2, xYPlot0, rectangle2D1, (ValueAxis) null, (ValueAxis) null, 10, plotRenderingInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, 409.960847230895, 409.960847230895, 924.07252999233, stroke0, paint0);
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.notifyListeners(annotationChangeEvent0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.addChangeListener(annotationChangeListener0);
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(0.0, 0.0, 0.0, 22.0, stroke1, paint1);
      xYLineAnnotation0.equals(xYLineAnnotation1);
      Object object0 = xYLineAnnotation0.clone();
      xYLineAnnotation0.equals(object0);
      Object object1 = xYLineAnnotation0.clone();
      xYLineAnnotation1.equals(object1);
      xYLineAnnotation0.clone();
      xYLineAnnotation1.clone();
      xYLineAnnotation1.equals(". r!");
      xYLineAnnotation0.equals(". r!");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation1.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 29, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1085.26424, 736.4953336, 736.4953336, 736.4953336, stroke0, paint0);
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(1085.26424, 1085.26424, 0.0, 0.0);
      xYLineAnnotation0.equals(xYLineAnnotation1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-454.3765647168), (-454.3765647168), (-454.3765647168), (-454.3765647168));
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(802.83187, 0.0, 1161.32724, 1161.32724);
      xYLineAnnotation0.equals(xYLineAnnotation1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, 0.0, 1.0, 0.0);
      Object object0 = xYLineAnnotation0.clone();
      xYLineAnnotation0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(887.973373, 1.0, 1.0, 887.973373);
      xYLineAnnotation0.clone();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-2769.0), (-2759.3279377345), 0.0, (-1913.2036898738936));
      xYLineAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(20.0, 20.0, 20.0, 0.0, stroke0, paint0);
      xYLineAnnotation0.fireAnnotationChanged();
      xYLineAnnotation0.equals("g#{v-");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2600.731565030007, 1876.224, 0.0, 1876.224);
      xYLineAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-55.09814795943), 0.0, (-1771.0591722014742), 4449.41308170519, stroke0, paint0);
      xYLineAnnotation0.setNotify(false);
      String string0 = "JL.^0j,so*J.*a";
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw((Graphics2D) null, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Paint paint0 = null;
      XYLineAnnotation xYLineAnnotation0 = null;
      try {
        xYLineAnnotation0 = new XYLineAnnotation(1.0E-4, 1.0E-4, 1.0, (-3169.2027718666986), (Stroke) null, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1209.976410051659, 1209.976410051659, 0.0, 0.0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.addChangeListener(annotationChangeListener0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = null;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, (XYPlot) null, rectangle2D0, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-153.4), (-153.4), (-153.4), 0.0);
      xYLineAnnotation0.hashCode();
      xYLineAnnotation0.clone();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-944.7589), (-896.1709711), 0.0, (-944.7589), stroke0, paint0);
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation((-2977.829), (-2977.829), (-896.1709711), 0.0);
      xYLineAnnotation0.equals(xYLineAnnotation1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1085.26424, 1085.26424, 1085.26424, 1085.26424, stroke0, paint0);
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(1085.26424, 1085.26424, 1085.26424, 1085.26424);
      xYLineAnnotation0.equals(xYLineAnnotation1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, 1.0E-8, 0.0, 2082.3021495267853);
      xYLineAnnotation0.clone();
      Object object0 = xYLineAnnotation0.clone();
      xYLineAnnotation0.equals(object0);
      xYLineAnnotation0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, (-3887.4), 964.6118785525, (-3887.4), stroke0, paint0);
      xYLineAnnotation0.setToolTipText("</A4,");
      Object object0 = xYLineAnnotation0.clone();
      xYLineAnnotation0.equals(object0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = null;
      int int0 = 2010;
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, (ValueAxis) null, (ValueAxis) null, 2010, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(22.0, 290.52, 1389.103042, (-1112.999063537), stroke0, paint0);
      assertNotNull(xYLineAnnotation0);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.notifyListeners(annotationChangeEvent0);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      xYLineAnnotation0.setToolTipText("");
      assertNull(xYLineAnnotation0.getURL());
      assertEquals("", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = xYLineAnnotation0.equals("");
      assertFalse(boolean0);
      assertNull(xYLineAnnotation0.getURL());
      assertEquals("", xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation0.getNotify());
      
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1.0), (-1.0), 0.0, (-1.0), stroke0, paint0);
      assertNotNull(xYLineAnnotation0);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation0);
      assertTrue(boolean0);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      boolean boolean1 = xYLineAnnotation0.equals(xYLineAnnotation0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      xYLineAnnotation0.setNotify(true);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      xYLineAnnotation0.hashCode();
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.removeChangeListener(annotationChangeListener0);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      xYLineAnnotation0.hashCode();
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      boolean boolean2 = xYLineAnnotation0.equals(xYLineAnnotation0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      xYLineAnnotation0.hashCode();
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      xYLineAnnotation0.hashCode();
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      boolean boolean3 = xYLineAnnotation0.equals(xYLineAnnotation0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation((-1.0), (-1.0), 0.0, (-3.2));
      assertNotNull(xYLineAnnotation1);
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
      
      boolean boolean4 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertFalse(boolean4);
      assertNotSame(xYLineAnnotation0, xYLineAnnotation1);
      assertNotSame(xYLineAnnotation1, xYLineAnnotation0);
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(xYLineAnnotation0.getNotify());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(xYLineAnnotation1.getNotify());
      assertNull(xYLineAnnotation1.getToolTipText());
      assertNull(xYLineAnnotation1.getURL());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-745.2276729617188), 0.0, 0.0, (-745.2276729617188));
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation((-745.2276729617188), (-745.2276729617188), 0.0, 0.0, stroke0, paint0);
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertFalse(boolean0);
      
      xYLineAnnotation0.hashCode();
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1771.680634672967), 1818.024761935, 1637.218359241688, 1818.024761935);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = null;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.fireAnnotationChanged();
      xYLineAnnotation0.fireAnnotationChanged();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      xYLineAnnotation0.hasListener((EventListener) null);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw(graphics2D0, (XYPlot) null, rectangle2D0, valueAxis0, valueAxis1, 29, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYLineAnnotation", e);
      }
  }
}
