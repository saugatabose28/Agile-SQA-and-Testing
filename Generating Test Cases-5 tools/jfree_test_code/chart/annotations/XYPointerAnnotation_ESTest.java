/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:13:46 GMT 2023
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.text.TextUtils;
import org.jfree.chart.ui.TextAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYPointerAnnotation_ESTest extends XYPointerAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("00l:L=M", 1500.86, 1232.6988, 1500.86);
      xYPointerAnnotation0.setAngle(1500.86);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.fireAnnotationChanged();
      xYPointerAnnotation0.addChangeListener(annotationChangeListener0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.setBaseRadius(1500.86);
      xYPointerAnnotation0.setLabelOffset(1500.86);
      xYPointerAnnotation0.setURL("");
      xYPointerAnnotation0.setOutlineVisible(true);
      xYPointerAnnotation0.setTipRadius(1232.6988);
      XYPointerAnnotation xYPointerAnnotation1 = (XYPointerAnnotation)xYPointerAnnotation0.clone();
      xYPointerAnnotation1.setArrowLength((-2785.959635690551));
      xYPointerAnnotation0.equals(xYPointerAnnotation1);
      xYPointerAnnotation0.setLabelOffset(1500.86);
      xYPointerAnnotation0.clone();
      xYPointerAnnotation0.setArrowLength(0.0);
      xYPointerAnnotation0.getArrowPaint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.removeChangeListener(annotationChangeListener1);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("00l:L=M", 22.0, 1232.6988, 22.0);
      xYPointerAnnotation0.setAngle(22.0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.fireAnnotationChanged();
      xYPointerAnnotation0.addChangeListener(annotationChangeListener0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.setLabelOffset(22.0);
      xYPointerAnnotation0.setURL("");
      xYPointerAnnotation0.setOutlineVisible(true);
      xYPointerAnnotation0.setTipRadius(1232.6988);
      Object object0 = xYPointerAnnotation0.clone();
      xYPointerAnnotation0.setArrowWidth(3.141592653589793);
      xYPointerAnnotation0.equals(object0);
      xYPointerAnnotation0.setLabelOffset(22.0);
      xYPointerAnnotation0.clone();
      xYPointerAnnotation0.setArrowLength(0.0);
      xYPointerAnnotation0.getArrowPaint();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.removeChangeListener(annotationChangeListener1);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("VpZ+5jR#V[>PZH#", (-1226.24882892), (-1226.24882892), 1844.58415);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.hasListener(eventListener0);
      EventListener eventListener1 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.hasListener(eventListener1);
      xYPointerAnnotation0.equals(xYPointerAnnotation0);
      TextAnchor textAnchor0 = xYPointerAnnotation0.getRotationAnchor();
      xYPointerAnnotation0.setRotationAnchor(textAnchor0);
      xYPointerAnnotation0.setRotationAngle((-2558.408425));
      xYPointerAnnotation0.setNotify(true);
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.clone();
      xYPointerAnnotation0.getBackgroundPaint();
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.setArrowPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 57.274936, (-652.443374678), (-596.63052450336));
      xYPointerAnnotation0.setAngle(57.274936);
      xYPointerAnnotation0.setText("");
      TextUtils.setUseDrawRotatedStringWorkaround(false);
      xYPointerAnnotation0.notifyListeners((AnnotationChangeEvent) null);
      XYPointerAnnotation xYPointerAnnotation1 = (XYPointerAnnotation)xYPointerAnnotation0.clone();
      xYPointerAnnotation0.setNotify(true);
      BasicStroke basicStroke0 = (BasicStroke)xYPointerAnnotation0.getOutlineStroke();
      xYPointerAnnotation0.setArrowStroke(basicStroke0);
      xYPointerAnnotation0.setBaseRadius((-652.443374678));
      xYPointerAnnotation0.setArrowWidth((-596.63052450336));
      xYPointerAnnotation0.equals("");
      xYPointerAnnotation0.getArrowWidth();
      xYPointerAnnotation0.setTipRadius(2123.2552288);
      xYPointerAnnotation0.setTipRadius(2123.2552288);
      xYPointerAnnotation0.setArrowWidth(0.0);
      xYPointerAnnotation0.hashCode();
      xYPointerAnnotation0.getTipRadius();
      XYPointerAnnotation xYPointerAnnotation2 = (XYPointerAnnotation)xYPointerAnnotation1.clone();
      xYPointerAnnotation0.equals(xYPointerAnnotation2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("QJ!8u$>>R$", 3397.1484, 3397.1484, 3397.1484);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.setToolTipText("vzc!6rktV3`");
      xYPointerAnnotation0.setTipRadius((-2729.267029730804));
      xYPointerAnnotation0.removeChangeListener(annotationChangeListener0);
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.hashCode();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = null;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.draw(graphics2D0, (XYPlot) null, rectangle2D0, valueAxis0, valueAxis0, (-1952257861), plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 0.0, 0.0, 0.0);
      xYPointerAnnotation0.setOutlineVisible(false);
      xYPointerAnnotation0.setBaseRadius((-10.0));
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.addChangeListener(annotationChangeListener0);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.notifyListeners(annotationChangeEvent0);
      xYPointerAnnotation0.setX(1.0E-8);
      xYPointerAnnotation0.setTipRadius(1.0E-8);
      xYPointerAnnotation0.getBaseRadius();
      xYPointerAnnotation0.setText("org.jfree.chart.plot.CrosshairState");
      xYPointerAnnotation0.getArrowPaint();
      TextAnchor textAnchor0 = XYTextAnnotation.DEFAULT_ROTATION_ANCHOR;
      xYPointerAnnotation0.setRotationAnchor(textAnchor0);
      xYPointerAnnotation0.setTipRadius(0.0);
      xYPointerAnnotation0.getArrowPaint();
      xYPointerAnnotation0.getArrowPaint();
      Stroke stroke0 = xYPointerAnnotation0.getOutlineStroke();
      xYPointerAnnotation0.setArrowStroke(stroke0);
      xYPointerAnnotation0.setArrowWidth(0.0);
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.getLabelOffset();
      xYPointerAnnotation0.hashCode();
      xYPointerAnnotation0.hashCode();
      xYPointerAnnotation0.setArrowLength(0.0);
      xYPointerAnnotation0.getArrowLength();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 400.0, 400.0, 400.0);
      xYPointerAnnotation0.setOutlineVisible(true);
      Color color0 = (Color)XYTextAnnotation.DEFAULT_PAINT;
      Stroke stroke0 = xYPointerAnnotation0.getOutlineStroke();
      xYPointerAnnotation0.setOutlineStroke(stroke0);
      xYPointerAnnotation0.setArrowPaint(color0);
      xYPointerAnnotation0.getArrowPaint();
      xYPointerAnnotation0.getArrowPaint();
      xYPointerAnnotation0.hashCode();
      XYPointerAnnotation xYPointerAnnotation1 = (XYPointerAnnotation)xYPointerAnnotation0.clone();
      xYPointerAnnotation1.setAngle((-5505.369797290689));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      xYPointerAnnotation0.clone();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("kGWU0yvj", 3397.1484, 1435.99, 1299.9653709728);
      xYPointerAnnotation0.fireAnnotationChanged();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.addChangeListener(annotationChangeListener0);
      xYPointerAnnotation0.setLabelOffset(1435.99);
      xYPointerAnnotation0.setAngle(1435.99);
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.addChangeListener(annotationChangeListener1);
      xYPointerAnnotation0.setLabelOffset(0.0);
      xYPointerAnnotation0.setAngle(3397.1484);
      xYPointerAnnotation0.equals("kGWU0yvj");
      xYPointerAnnotation0.setArrowWidth(1299.9653709728);
      TextAnchor textAnchor0 = xYPointerAnnotation0.getTextAnchor();
      xYPointerAnnotation0.setTextAnchor(textAnchor0);
      xYPointerAnnotation0.setArrowLength(359.11959978);
      xYPointerAnnotation0.getLabelOffset();
      xYPointerAnnotation0.getArrowStroke();
      Object object0 = xYPointerAnnotation0.clone();
      xYPointerAnnotation0.equals(object0);
      xYPointerAnnotation0.getArrowLength();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = null;
      Rectangle2D rectangle2D0 = null;
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.draw(graphics2D0, (XYPlot) null, (Rectangle2D) null, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("org.jfree.chart.plot.PlotRenderingInfo", (-3988.73340514293), (-3988.73340514293), (-3988.73340514293));
      xYPointerAnnotation0.setTipRadius((-3988.73340514293));
      xYPointerAnnotation0.setTipRadius((-3988.73340514293));
      String string0 = "j9+9)?YowRI";
      XYPointerAnnotation xYPointerAnnotation1 = new XYPointerAnnotation("j9+9)?YowRI", 30.0, 10.0, 0.0);
      xYPointerAnnotation1.setRotationAnchor(xYPointerAnnotation0.DEFAULT_TEXT_ANCHOR);
      xYPointerAnnotation1.setArrowLength(5.0);
      xYPointerAnnotation1.setX((-2135.1305595));
      Paint paint0 = xYPointerAnnotation1.getPaint();
      xYPointerAnnotation0.setArrowPaint(paint0);
      xYPointerAnnotation1.setLabelOffset(10.0);
      xYPointerAnnotation1.equals(xYPointerAnnotation0);
      xYPointerAnnotation1.setArrowPaint(paint0);
      xYPointerAnnotation1.getArrowLength();
      xYPointerAnnotation1.getArrowWidth();
      xYPointerAnnotation0.setBaseRadius((-2135.1305595));
      xYPointerAnnotation0.getTipRadius();
      xYPointerAnnotation0.setAngle(1.0);
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.setArrowStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("6(BJV>xuA", 22.0, 22.0, 1.0E-8);
      Color color0 = (Color)XYTextAnnotation.DEFAULT_PAINT;
      xYPointerAnnotation0.setArrowPaint(color0);
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.setTipRadius(22.0);
      Color color1 = (Color)XYTextAnnotation.DEFAULT_PAINT;
      xYPointerAnnotation0.setPaint(color1);
      xYPointerAnnotation0.setNotify(true);
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.equals("");
      xYPointerAnnotation0.setAngle((-2786.405434));
      xYPointerAnnotation0.getArrowLength();
      xYPointerAnnotation0.setArrowLength((-2329.45167717));
      Object object0 = xYPointerAnnotation0.clone();
      xYPointerAnnotation0.equals(object0);
      xYPointerAnnotation0.setLabelOffset(0.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("hc!o7/", 3660.0, (-767.149), 75.0);
      Font font0 = xYPointerAnnotation0.getFont();
      xYPointerAnnotation0.setFont(font0);
      Object object0 = xYPointerAnnotation0.clone();
      xYPointerAnnotation0.getLabelOffset();
      xYPointerAnnotation0.setArrowLength(3.0);
      xYPointerAnnotation0.getArrowPaint();
      xYPointerAnnotation0.equals(object0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.draw(graphics2D0, (XYPlot) null, rectangle2D0, valueAxis0, valueAxis0, (-169), plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 0.0, 0.0, 0.0);
      xYPointerAnnotation0.setY(795.78199723);
      Paint paint0 = xYPointerAnnotation0.getPaint();
      xYPointerAnnotation0.setArrowPaint(paint0);
      xYPointerAnnotation0.setTipRadius(5.0);
      xYPointerAnnotation0.getArrowWidth();
      XYPointerAnnotation xYPointerAnnotation1 = new XYPointerAnnotation("yxJG3TY;l8#fPdy", 270.0, 0.0, 3.0);
      xYPointerAnnotation0.equals(xYPointerAnnotation1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("gJ1QV^:", 0.0, 0.0, 0.0);
      xYPointerAnnotation0.setToolTipText("");
      xYPointerAnnotation0.setURL("");
      Font font0 = xYPointerAnnotation0.getFont();
      xYPointerAnnotation0.setLabelOffset((-1651.477636));
      xYPointerAnnotation0.setFont(font0);
      xYPointerAnnotation0.setBaseRadius(0.0);
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.clone();
      xYPointerAnnotation0.getArrowLength();
      xYPointerAnnotation0.setArrowLength(0.0);
      xYPointerAnnotation0.setArrowLength(0.0);
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.getArrowWidth();
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.getBaseRadius();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 1.0E-8, 0.0, 1.0E-8);
      Stroke stroke0 = xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.setArrowStroke(stroke0);
      xYPointerAnnotation0.equals("");
      xYPointerAnnotation0.setAngle((-2359.02));
      Color color0 = (Color)XYTextAnnotation.DEFAULT_PAINT;
      xYPointerAnnotation0.setArrowPaint(color0);
      xYPointerAnnotation0.setArrowPaint(color0);
      xYPointerAnnotation0.getLabelOffset();
      xYPointerAnnotation0.getLabelOffset();
      xYPointerAnnotation0.setArrowWidth(1.0E-8);
      xYPointerAnnotation0.setLabelOffset((-2173.78397162948));
      xYPointerAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 0.0, 2.0, (-4352.38284894084));
      xYPointerAnnotation0.setAngle((-4352.38284894084));
      xYPointerAnnotation0.setTipRadius((-4352.38284894084));
      xYPointerAnnotation0.setTipRadius(0.0);
      xYPointerAnnotation0.getTipRadius();
      xYPointerAnnotation0.setX(811.52485450577);
      xYPointerAnnotation0.setBaseRadius(0.0);
      xYPointerAnnotation0.getArrowLength();
      xYPointerAnnotation0.hashCode();
      xYPointerAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("paint", 0.0, 0.0, 0.0);
      TextUtils.setDrawStringsWithFontAttributes(false);
      Stroke stroke0 = xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.setArrowStroke(stroke0);
      xYPointerAnnotation0.setY((-2794.005));
      xYPointerAnnotation0.equals("paint");
      xYPointerAnnotation0.setBaseRadius((-2794.005));
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.setArrowLength(1740.11670913742);
      TextUtils.setUseFontMetricsGetStringBounds(true);
      xYPointerAnnotation0.setArrowWidth(0.0);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.hasListener(eventListener0);
      xYPointerAnnotation0.clone();
      xYPointerAnnotation0.getArrowWidth();
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.getLabelOffset();
      xYPointerAnnotation0.setArrowLength(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Left most point on the axis should be beginning of range.", 0.025, 6.0, 6.0);
      xYPointerAnnotation0.getAngle();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 0.04;
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("WG", 0.04, 0.04, 0.04);
      Paint paint0 = xYPointerAnnotation0.getArrowPaint();
      xYPointerAnnotation0.setBackgroundPaint(paint0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.draw((Graphics2D) null, (XYPlot) null, (Rectangle2D) null, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("=y", (-2031.754), 0.0, 2059.643779);
      xYPointerAnnotation0.getArrowLength();
      Paint paint0 = xYPointerAnnotation0.getPaint();
      xYPointerAnnotation0.setArrowPaint(paint0);
      xYPointerAnnotation0.getTipRadius();
      xYPointerAnnotation0.hashCode();
      xYPointerAnnotation0.setArrowWidth((-1.0));
      xYPointerAnnotation0.getArrowWidth();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("VpZ+5jR#V[>PZH#", (-1226.24882892), (-1226.24882892), 1844.58415);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.hasListener(eventListener0);
      EventListener eventListener1 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.hasListener(eventListener1);
      Object object0 = xYPointerAnnotation0.clone();
      xYPointerAnnotation0.equals(object0);
      TextAnchor textAnchor0 = xYPointerAnnotation0.getRotationAnchor();
      xYPointerAnnotation0.setRotationAnchor(textAnchor0);
      xYPointerAnnotation0.setRotationAngle((-2558.408425));
      xYPointerAnnotation0.setNotify(true);
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.clone();
      xYPointerAnnotation0.getBackgroundPaint();
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.setArrowPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("first", 2103.92237845234, 0.2, (-409.60685153999873));
      xYPointerAnnotation0.getArrowLength();
      xYPointerAnnotation0.fireAnnotationChanged();
      xYPointerAnnotation0.equals("first");
      xYPointerAnnotation0.setNotify(false);
      Stroke stroke0 = xYPointerAnnotation0.getOutlineStroke();
      xYPointerAnnotation0.setArrowStroke(stroke0);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.notifyListeners(annotationChangeEvent0);
      xYPointerAnnotation0.setArrowLength((-1975.0));
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.setArrowPaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      TextUtils.setUseDrawRotatedStringWorkaround(false);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.setArrowLength(0.05);
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("3U 9ZtS`^pt", 1.5707963267948966, 1.5707963267948966, 1.5707963267948966);
      xYPointerAnnotation0.setURL("$v~7fF");
      TextUtils.setUseFontMetricsGetStringBounds(true);
      xYPointerAnnotation0.setNotify(true);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.setAngle(1.5707963267948966);
      xYPointerAnnotation0.hasListener(eventListener0);
      TextUtils.setUseFontMetricsGetStringBounds(true);
      xYPointerAnnotation0.setBaseRadius(0.0);
      xYPointerAnnotation0.setX(0.0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      xYPointerAnnotation0.getArrowLength();
      xYPointerAnnotation0.equals("3U 9ZtS`^pt");
      xYPointerAnnotation0.setURL((String) null);
      xYPointerAnnotation0.setLabelOffset(0.0);
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.setBaseRadius(508.9812348652);
      xYPointerAnnotation0.setArrowLength(1.5707963267948966);
      xYPointerAnnotation0.getArrowLength();
      xYPointerAnnotation0.getArrowLength();
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.setArrowStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("sbCy}UD2s74", 0.0, 0.0, (-5596.80966646));
      xYPointerAnnotation0.setLabelOffset((-1.0));
      TextUtils.setDrawStringsWithFontAttributes(false);
      xYPointerAnnotation0.setRotationAngle((-2047.0595620942133));
      xYPointerAnnotation0.getBaseRadius();
      TextUtils.setDrawStringsWithFontAttributes(false);
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.setAngle((-1.0));
      xYPointerAnnotation0.equals("sbCy}UD2s74");
      xYPointerAnnotation0.getLabelOffset();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Location not recognised.", (-2585.6926681), (-2585.6926681), (-2585.6926681));
      Paint paint0 = xYPointerAnnotation0.getOutlinePaint();
      xYPointerAnnotation0.setArrowPaint(paint0);
      xYPointerAnnotation0.getArrowPaint();
      xYPointerAnnotation0.setBaseRadius((-2585.6926681));
      Object object0 = xYPointerAnnotation0.clone();
      xYPointerAnnotation0.setTipRadius((-1370.76427849983));
      xYPointerAnnotation0.getBaseRadius();
      xYPointerAnnotation0.setURL("Location not recognised.");
      xYPointerAnnotation0.setTipRadius(0.0);
      xYPointerAnnotation0.getBaseRadius();
      xYPointerAnnotation0.setLabelOffset(0.0);
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.equals(object0);
      xYPointerAnnotation0.getArrowWidth();
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.setTipRadius((-1370.76427849983));
      xYPointerAnnotation0.setArrowLength((-2585.6926681));
      xYPointerAnnotation0.setBaseRadius((-1240.3235));
      xYPointerAnnotation0.setTipRadius(1287.441212792094);
      xYPointerAnnotation0.hashCode();
      xYPointerAnnotation0.hashCode();
      xYPointerAnnotation0.hashCode();
      xYPointerAnnotation0.setBaseRadius(952.747263);
      xYPointerAnnotation0.setLabelOffset((-2585.6926681));
      xYPointerAnnotation0.getArrowPaint();
      xYPointerAnnotation0.getArrowLength();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("TextAnchor.CENTER_LEFT", (-497.9931696932965), 10.0, (-917.0522724607783));
      xYPointerAnnotation0.getAngle();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("zyU*3TYUmiuu#4>", 2147.16100335103, 91.875, 91.875);
      xYPointerAnnotation0.setX(2147.16100335103);
      xYPointerAnnotation0.setAngle(Double.POSITIVE_INFINITY);
      Font font0 = XYTextAnnotation.DEFAULT_FONT;
      xYPointerAnnotation0.setFont(font0);
      xYPointerAnnotation0.setTipRadius(91.875);
      xYPointerAnnotation0.setToolTipText("");
      xYPointerAnnotation0.setArrowLength((-3606.315784596967));
      xYPointerAnnotation0.fireAnnotationChanged();
      xYPointerAnnotation0.hashCode();
      xYPointerAnnotation0.getArrowLength();
      xYPointerAnnotation0.setArrowWidth(Double.POSITIVE_INFINITY);
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.setAngle((-2236.06276));
      xYPointerAnnotation0.setTipRadius(2147.16100335103);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("XYw=^E3ZrK9w$d!t{", (-1220.6), (-3274.4513632854096), (-1220.6));
      xYPointerAnnotation0.setURL("resolveRangeAxisLocation()");
      TextAnchor textAnchor0 = xYPointerAnnotation0.getRotationAnchor();
      xYPointerAnnotation0.setTextAnchor(textAnchor0);
      xYPointerAnnotation0.setURL("resolveRangeAxisLocation()");
      TextUtils.setDrawStringsWithFontAttributes(false);
      xYPointerAnnotation0.getLabelOffset();
      xYPointerAnnotation0.setBaseRadius((-3274.4513632854096));
      xYPointerAnnotation0.getArrowStroke();
      Stroke stroke0 = xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.setArrowStroke(stroke0);
      xYPointerAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("R]o f8Pk", (-1769.0917546356106), 0.0, (-1.0));
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.setArrowWidth((-1.0));
      xYPointerAnnotation0.hashCode();
      Paint paint0 = xYPointerAnnotation0.getOutlinePaint();
      xYPointerAnnotation0.setArrowPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("A^1d,Aq#9l7", 30.0, 0.0, 1160.1095817089583);
      Paint paint0 = xYPointerAnnotation0.getPaint();
      xYPointerAnnotation0.setOutlinePaint(paint0);
      xYPointerAnnotation0.setArrowLength(1.0);
      xYPointerAnnotation0.getArrowLength();
      xYPointerAnnotation0.getLabelOffset();
      xYPointerAnnotation0.getArrowPaint();
      xYPointerAnnotation0.getArrowPaint();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("y_J.R]%EHuWfkam", 1207.6658279, 1207.6658279, 10.0);
      xYPointerAnnotation0.setLabelOffset(10.0);
      Stroke stroke0 = xYPointerAnnotation0.getOutlineStroke();
      xYPointerAnnotation0.setArrowStroke(stroke0);
      TextUtils.setDrawStringsWithFontAttributes(true);
      xYPointerAnnotation0.setBaseRadius(2571.055781944107);
      xYPointerAnnotation0.hashCode();
      xYPointerAnnotation0.getLabelOffset();
      xYPointerAnnotation0.getLabelOffset();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = null;
      try {
        xYPointerAnnotation0 = new XYPointerAnnotation((String) null, 488.7959788, 488.7959788, 1.5707963267948966);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("VpZ+5jR#V[>PZH#", (-1226.24882892), (-1226.24882892), 1844.58415);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.hasListener(eventListener0);
      EventListener eventListener1 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.hasListener(eventListener1);
      xYPointerAnnotation0.clone();
      TextUtils.setUseFontMetricsGetStringBounds(false);
      xYPointerAnnotation0.equals(xYPointerAnnotation0);
      xYPointerAnnotation0.getRotationAnchor();
      xYPointerAnnotation0.setRotationAngle((-2558.408425));
      xYPointerAnnotation0.setNotify(true);
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.clone();
      xYPointerAnnotation0.getBackgroundPaint();
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.setArrowPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("!]f;?xTh+Knw", (-1.0), 3963.428773142, 3963.428773142);
      Stroke stroke0 = xYPointerAnnotation0.getOutlineStroke();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.addChangeListener(annotationChangeListener0);
      xYPointerAnnotation0.setArrowStroke(stroke0);
      xYPointerAnnotation0.clone();
      Font font0 = xYPointerAnnotation0.getFont();
      xYPointerAnnotation0.setFont(font0);
      xYPointerAnnotation0.setArrowWidth(228.3599087084);
      xYPointerAnnotation0.getArrowWidth();
      xYPointerAnnotation0.getBaseRadius();
      XYPointerAnnotation xYPointerAnnotation1 = new XYPointerAnnotation("!]f;?xTh+Knw", 0.14, (-2699.424), 54.1666667);
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation1.addChangeListener(annotationChangeListener1);
      xYPointerAnnotation0.equals(xYPointerAnnotation1);
      xYPointerAnnotation1.setArrowLength(0.0);
      xYPointerAnnotation1.setArrowLength(3963.428773142);
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation1.setArrowLength(3.0);
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.setBaseRadius(3.0);
      xYPointerAnnotation0.setAngle(2.0);
      xYPointerAnnotation1.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("org.jfree.chart.annotations.XYPointerAnnotation", 5.0, 5.0, 0.0);
      Stroke stroke0 = xYPointerAnnotation0.getOutlineStroke();
      xYPointerAnnotation0.setArrowStroke(stroke0);
      xYPointerAnnotation0.getTipRadius();
      xYPointerAnnotation0.setTipRadius(10.0);
      xYPointerAnnotation0.hashCode();
      Color color0 = (Color)XYTextAnnotation.DEFAULT_PAINT;
      xYPointerAnnotation0.setArrowPaint(color0);
      xYPointerAnnotation0.equals(color0);
      xYPointerAnnotation0.getArrowPaint();
      xYPointerAnnotation0.getArrowPaint();
      xYPointerAnnotation0.clone();
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.getLabelOffset();
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.getArrowStroke();
      Object object0 = xYPointerAnnotation0.clone();
      xYPointerAnnotation0.equals(object0);
      xYPointerAnnotation0.getLabelOffset();
      xYPointerAnnotation0.setLabelOffset(1.5707963267948966);
      xYPointerAnnotation0.setLabelOffset((-2858.067709));
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.getBaseRadius();
      xYPointerAnnotation0.setArrowLength(1.5707963267948966);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis1, 500, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("^@KX%<yBaH_]l=?yX", 312.70316376, 1387.001682, 1.0);
      Object object0 = xYPointerAnnotation0.clone();
      xYPointerAnnotation0.fireAnnotationChanged();
      xYPointerAnnotation0.setText("^@KX%<yBaH_]l=?yX");
      object0.hashCode();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      Font font0 = xYPointerAnnotation0.getFont();
      xYPointerAnnotation0.setFont(font0);
      xYPointerAnnotation0.setBaseRadius(1.0);
      xYPointerAnnotation0.setTipRadius(0.0);
      xYPointerAnnotation0.addChangeListener(annotationChangeListener0);
      TextAnchor textAnchor0 = xYPointerAnnotation0.getTextAnchor();
      xYPointerAnnotation0.setTextAnchor(textAnchor0);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.hasListener(eventListener0);
      xYPointerAnnotation0.setArrowLength(2124.791);
      xYPointerAnnotation0.setURL(" Yq_OQP$~Jz:H^nr");
      xYPointerAnnotation0.setURL(" Yq_OQP$~Jz:H^nr");
      xYPointerAnnotation0.setURL("3c&");
      xYPointerAnnotation0.getArrowLength();
      xYPointerAnnotation0.setRotationAngle(0.0);
      xYPointerAnnotation0.getArrowPaint();
      xYPointerAnnotation0.getBaseRadius();
      xYPointerAnnotation0.getArrowPaint();
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.hashCode();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("3", 3048.0, 3048.0, 3048.0);
      assertNotNull(xYPointerAnnotation0);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      xYPointerAnnotation0.setArrowLength(5.0);
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      boolean boolean0 = xYPointerAnnotation0.equals("3");
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertFalse(boolean0);
      
      xYPointerAnnotation0.setOutlineVisible(true);
      assertTrue(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.notifyListeners(annotationChangeEvent0);
      assertTrue(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      XYPointerAnnotation xYPointerAnnotation1 = new XYPointerAnnotation("3", 26.153910827899026, 0.0, 30.0);
      assertNotNull(xYPointerAnnotation1);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(26.153910827899026, xYPointerAnnotation1.getX(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("3", xYPointerAnnotation1.getText());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      
      Color color0 = (Color)xYPointerAnnotation1.getArrowPaint();
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertNotNull(color0);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(26.153910827899026, xYPointerAnnotation1.getX(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("3", xYPointerAnnotation1.getText());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      
      xYPointerAnnotation0.setOutlinePaint(color0);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertTrue(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(26.153910827899026, xYPointerAnnotation1.getX(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("3", xYPointerAnnotation1.getText());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      
      double double0 = xYPointerAnnotation0.getAngle();
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertTrue(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3048.0, double0, 0.01);
      
      xYPointerAnnotation0.setBaseRadius(3048.0);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertTrue(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      xYPointerAnnotation0.setTipRadius(0.0);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertTrue(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      double double1 = xYPointerAnnotation1.getAngle();
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(26.153910827899026, xYPointerAnnotation1.getX(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("3", xYPointerAnnotation1.getText());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, double1, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)xYPointerAnnotation0.getArrowStroke();
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertNotNull(basicStroke0);
      assertTrue(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      double double2 = xYPointerAnnotation1.getArrowLength();
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(26.153910827899026, xYPointerAnnotation1.getX(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("3", xYPointerAnnotation1.getText());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(5.0, double2, 0.01);
      
      XYPointerAnnotation xYPointerAnnotation2 = (XYPointerAnnotation)xYPointerAnnotation1.clone();
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertNotSame(xYPointerAnnotation2, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation2, xYPointerAnnotation0);
      assertNotNull(xYPointerAnnotation2);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(26.153910827899026, xYPointerAnnotation1.getX(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("3", xYPointerAnnotation1.getText());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(30.0, xYPointerAnnotation2.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation2.getArrowLength(), 0.01);
      assertFalse(xYPointerAnnotation2.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation2.getRotationAngle(), 0.01);
      assertNull(xYPointerAnnotation2.getToolTipText());
      assertEquals(10.0, xYPointerAnnotation2.getTipRadius(), 0.01);
      assertEquals(26.153910827899026, xYPointerAnnotation2.getX(), 0.01);
      assertEquals(30.0, xYPointerAnnotation2.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation2.getText());
      assertTrue(xYPointerAnnotation2.getNotify());
      assertNull(xYPointerAnnotation2.getURL());
      assertEquals(0.0, xYPointerAnnotation2.getY(), 0.01);
      assertEquals(3.0, xYPointerAnnotation2.getLabelOffset(), 0.01);
      assertEquals(3.0, xYPointerAnnotation2.getArrowWidth(), 0.01);
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertFalse(xYPointerAnnotation2.equals((Object)xYPointerAnnotation0));
      assertTrue(xYPointerAnnotation2.equals((Object)xYPointerAnnotation1));
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      
      xYPointerAnnotation2.setBaseRadius(5.0);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertNotSame(xYPointerAnnotation2, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation2, xYPointerAnnotation0);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(26.153910827899026, xYPointerAnnotation1.getX(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("3", xYPointerAnnotation1.getText());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(5.0, xYPointerAnnotation2.getArrowLength(), 0.01);
      assertFalse(xYPointerAnnotation2.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation2.getRotationAngle(), 0.01);
      assertNull(xYPointerAnnotation2.getToolTipText());
      assertEquals(10.0, xYPointerAnnotation2.getTipRadius(), 0.01);
      assertEquals(26.153910827899026, xYPointerAnnotation2.getX(), 0.01);
      assertEquals(30.0, xYPointerAnnotation2.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation2.getText());
      assertTrue(xYPointerAnnotation2.getNotify());
      assertNull(xYPointerAnnotation2.getURL());
      assertEquals(5.0, xYPointerAnnotation2.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation2.getY(), 0.01);
      assertEquals(3.0, xYPointerAnnotation2.getLabelOffset(), 0.01);
      assertEquals(3.0, xYPointerAnnotation2.getArrowWidth(), 0.01);
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation2));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertFalse(xYPointerAnnotation2.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation2.equals((Object)xYPointerAnnotation0));
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      
      boolean boolean1 = xYPointerAnnotation1.equals(xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertNotSame(xYPointerAnnotation2, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation2, xYPointerAnnotation0);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(26.153910827899026, xYPointerAnnotation1.getX(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("3", xYPointerAnnotation1.getText());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(5.0, xYPointerAnnotation2.getArrowLength(), 0.01);
      assertFalse(xYPointerAnnotation2.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation2.getRotationAngle(), 0.01);
      assertNull(xYPointerAnnotation2.getToolTipText());
      assertEquals(10.0, xYPointerAnnotation2.getTipRadius(), 0.01);
      assertEquals(26.153910827899026, xYPointerAnnotation2.getX(), 0.01);
      assertEquals(30.0, xYPointerAnnotation2.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation2.getText());
      assertTrue(xYPointerAnnotation2.getNotify());
      assertNull(xYPointerAnnotation2.getURL());
      assertEquals(5.0, xYPointerAnnotation2.getBaseRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation2.getY(), 0.01);
      assertEquals(3.0, xYPointerAnnotation2.getLabelOffset(), 0.01);
      assertEquals(3.0, xYPointerAnnotation2.getArrowWidth(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation2));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertFalse(xYPointerAnnotation2.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation2.equals((Object)xYPointerAnnotation0));
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertFalse(boolean1);
      
      xYPointerAnnotation1.setTipRadius(5.0);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertEquals(5.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(26.153910827899026, xYPointerAnnotation1.getX(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("3", xYPointerAnnotation1.getText());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation2));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      
      double double3 = xYPointerAnnotation0.getBaseRadius();
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation2);
      assertTrue(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation2));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3048.0, double3, 0.01);
      
      XYPointerAnnotation xYPointerAnnotation3 = (XYPointerAnnotation)xYPointerAnnotation0.clone();
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation3);
      assertNotSame(xYPointerAnnotation3, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation3, xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation3, xYPointerAnnotation0);
      assertNotNull(xYPointerAnnotation3);
      assertTrue(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(3.0, xYPointerAnnotation3.getArrowWidth(), 0.01);
      assertEquals(0.0, xYPointerAnnotation3.getTipRadius(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation3.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation3.getToolTipText());
      assertEquals(3048.0, xYPointerAnnotation3.getX(), 0.01);
      assertEquals("3", xYPointerAnnotation3.getText());
      assertEquals(0.0, xYPointerAnnotation3.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation3.getY(), 0.01);
      assertTrue(xYPointerAnnotation3.isOutlineVisible());
      assertEquals(3048.0, xYPointerAnnotation3.getAngle(), 0.01);
      assertEquals(5.0, xYPointerAnnotation3.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation3.getURL());
      assertTrue(xYPointerAnnotation3.getNotify());
      assertEquals(3.0, xYPointerAnnotation3.getLabelOffset(), 0.01);
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation2));
      assertTrue(xYPointerAnnotation3.equals((Object)xYPointerAnnotation0));
      assertFalse(xYPointerAnnotation3.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation3.equals((Object)xYPointerAnnotation2));
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      
      xYPointerAnnotation0.setRotationAngle(0.0);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation3);
      assertTrue(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertTrue(xYPointerAnnotation0.equals((Object)xYPointerAnnotation3));
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation2));
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      
      XYPointerAnnotation xYPointerAnnotation4 = (XYPointerAnnotation)xYPointerAnnotation0.clone();
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation4);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation3);
      assertNotSame(xYPointerAnnotation4, xYPointerAnnotation3);
      assertNotSame(xYPointerAnnotation4, xYPointerAnnotation0);
      assertNotSame(xYPointerAnnotation4, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation4, xYPointerAnnotation2);
      assertNotNull(xYPointerAnnotation4);
      assertTrue(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertTrue(xYPointerAnnotation4.isOutlineVisible());
      assertEquals(3048.0, xYPointerAnnotation4.getAngle(), 0.01);
      assertNull(xYPointerAnnotation4.getURL());
      assertNull(xYPointerAnnotation4.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation4.getArrowLength(), 0.01);
      assertTrue(xYPointerAnnotation4.getNotify());
      assertEquals(0.0, xYPointerAnnotation4.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation4.getArrowWidth(), 0.01);
      assertEquals("3", xYPointerAnnotation4.getText());
      assertEquals(0.0, xYPointerAnnotation4.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation4.getLabelOffset(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation4.getBaseRadius(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation4.getX(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation4.getY(), 0.01);
      assertTrue(xYPointerAnnotation0.equals((Object)xYPointerAnnotation3));
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation2));
      assertTrue(xYPointerAnnotation4.equals((Object)xYPointerAnnotation3));
      assertFalse(xYPointerAnnotation4.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation4.equals((Object)xYPointerAnnotation2));
      assertTrue(xYPointerAnnotation4.equals((Object)xYPointerAnnotation0));
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      
      xYPointerAnnotation1.setArrowWidth(3.0);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation3);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation4);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertEquals(5.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(26.153910827899026, xYPointerAnnotation1.getX(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("3", xYPointerAnnotation1.getText());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation2));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation3));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation4));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      
      double double4 = xYPointerAnnotation0.getTipRadius();
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation4);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation3);
      assertTrue(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertTrue(xYPointerAnnotation0.equals((Object)xYPointerAnnotation3));
      assertTrue(xYPointerAnnotation0.equals((Object)xYPointerAnnotation4));
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation2));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = xYPointerAnnotation1.getAngle();
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation3);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation4);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertEquals(5.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(26.153910827899026, xYPointerAnnotation1.getX(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("3", xYPointerAnnotation1.getText());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation2));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation3));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation4));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, double5, 0.01);
      
      xYPointerAnnotation1.setAngle(0.0);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation3);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation4);
      assertNotSame(xYPointerAnnotation1, xYPointerAnnotation0);
      assertEquals(5.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation1.getURL());
      assertEquals(26.153910827899026, xYPointerAnnotation1.getX(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation1.getNotify());
      assertEquals(0.0, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals("3", xYPointerAnnotation1.getText());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation1.getToolTipText());
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation2));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation3));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation4));
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      
      boolean boolean2 = xYPointerAnnotation3.equals(xYPointerAnnotation4);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation4);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation0, xYPointerAnnotation3);
      assertNotSame(xYPointerAnnotation3, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation3, xYPointerAnnotation2);
      assertNotSame(xYPointerAnnotation3, xYPointerAnnotation0);
      assertNotSame(xYPointerAnnotation3, xYPointerAnnotation4);
      assertNotSame(xYPointerAnnotation4, xYPointerAnnotation3);
      assertNotSame(xYPointerAnnotation4, xYPointerAnnotation0);
      assertNotSame(xYPointerAnnotation4, xYPointerAnnotation1);
      assertNotSame(xYPointerAnnotation4, xYPointerAnnotation2);
      assertTrue(xYPointerAnnotation0.isOutlineVisible());
      assertTrue(xYPointerAnnotation0.getNotify());
      assertEquals(3048.0, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertNull(xYPointerAnnotation0.getURL());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(0.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals("3", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(3.0, xYPointerAnnotation3.getArrowWidth(), 0.01);
      assertEquals(0.0, xYPointerAnnotation3.getTipRadius(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation3.getBaseRadius(), 0.01);
      assertNull(xYPointerAnnotation3.getToolTipText());
      assertEquals(3048.0, xYPointerAnnotation3.getX(), 0.01);
      assertEquals("3", xYPointerAnnotation3.getText());
      assertEquals(0.0, xYPointerAnnotation3.getRotationAngle(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation3.getY(), 0.01);
      assertTrue(xYPointerAnnotation3.isOutlineVisible());
      assertEquals(3048.0, xYPointerAnnotation3.getAngle(), 0.01);
      assertEquals(5.0, xYPointerAnnotation3.getArrowLength(), 0.01);
      assertNull(xYPointerAnnotation3.getURL());
      assertTrue(xYPointerAnnotation3.getNotify());
      assertEquals(3.0, xYPointerAnnotation3.getLabelOffset(), 0.01);
      assertTrue(xYPointerAnnotation4.isOutlineVisible());
      assertEquals(3048.0, xYPointerAnnotation4.getAngle(), 0.01);
      assertNull(xYPointerAnnotation4.getURL());
      assertNull(xYPointerAnnotation4.getToolTipText());
      assertEquals(5.0, xYPointerAnnotation4.getArrowLength(), 0.01);
      assertTrue(xYPointerAnnotation4.getNotify());
      assertEquals(0.0, xYPointerAnnotation4.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation4.getArrowWidth(), 0.01);
      assertEquals("3", xYPointerAnnotation4.getText());
      assertEquals(0.0, xYPointerAnnotation4.getRotationAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation4.getLabelOffset(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation4.getBaseRadius(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation4.getX(), 0.01);
      assertEquals(3048.0, xYPointerAnnotation4.getY(), 0.01);
      assertTrue(xYPointerAnnotation0.equals((Object)xYPointerAnnotation3));
      assertTrue(xYPointerAnnotation0.equals((Object)xYPointerAnnotation4));
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation0.equals((Object)xYPointerAnnotation2));
      assertTrue(xYPointerAnnotation3.equals((Object)xYPointerAnnotation4));
      assertTrue(xYPointerAnnotation3.equals((Object)xYPointerAnnotation0));
      assertFalse(xYPointerAnnotation3.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation3.equals((Object)xYPointerAnnotation2));
      assertTrue(xYPointerAnnotation4.equals((Object)xYPointerAnnotation3));
      assertFalse(xYPointerAnnotation4.equals((Object)xYPointerAnnotation1));
      assertFalse(xYPointerAnnotation4.equals((Object)xYPointerAnnotation2));
      assertTrue(xYPointerAnnotation4.equals((Object)xYPointerAnnotation0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_LABEL_OFFSET, 0.01);
      assertEquals(30.0, XYPointerAnnotation.DEFAULT_BASE_RADIUS, 0.01);
      assertEquals(3.0, XYPointerAnnotation.DEFAULT_ARROW_WIDTH, 0.01);
      assertEquals(10.0, XYPointerAnnotation.DEFAULT_TIP_RADIUS, 0.01);
      assertEquals(5.0, XYPointerAnnotation.DEFAULT_ARROW_LENGTH, 0.01);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 2755.0, 2755.0, 2755.0);
      xYPointerAnnotation0.setTipRadius(2755.0);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYPointerAnnotation0.notifyListeners(annotationChangeEvent0);
      xYPointerAnnotation0.setBaseRadius(0.0);
      xYPointerAnnotation0.setAngle(2755.0);
      xYPointerAnnotation0.setLabelOffset(820.92);
      xYPointerAnnotation0.setAngle(148.09733332465);
      xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.setAngle(0.0);
      Paint paint0 = xYPointerAnnotation0.getOutlinePaint();
      xYPointerAnnotation0.setY(148.09733332465);
      xYPointerAnnotation0.setBackgroundPaint(paint0);
      xYPointerAnnotation0.getAngle();
      xYPointerAnnotation0.setBaseRadius(2755.0);
      Object object0 = xYPointerAnnotation0.clone();
      xYPointerAnnotation0.equals(object0);
      xYPointerAnnotation0.getArrowWidth();
      xYPointerAnnotation0.getBaseRadius();
      xYPointerAnnotation0.setTipRadius(820.92);
      xYPointerAnnotation0.getArrowLength();
      xYPointerAnnotation0.clone();
      xYPointerAnnotation0.getArrowStroke();
      assertEquals(820.92, xYPointerAnnotation0.getLabelOffset(), 0.01);
  }
}
