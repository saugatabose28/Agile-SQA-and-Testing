/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:12:12 GMT 2023
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.annotations.XYImageAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.ui.RectangleAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYImageAnnotation_ESTest extends XYImageAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation((-1.0), (-1.0), image0, rectangleAnchor0);
      assertEquals((-1.0), xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYImageAnnotation0.getImageAnchor());
      assertNull(xYImageAnnotation0.getToolTipText());
      assertTrue(xYImageAnnotation0.getNotify());
      assertNull(xYImageAnnotation0.getURL());
      assertEquals((-1.0), xYImageAnnotation0.getY(), 0.01);
      assertNotNull(xYImageAnnotation0);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.addChangeListener(annotationChangeListener0);
      assertEquals((-1.0), xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYImageAnnotation0.getImageAnchor());
      assertNull(xYImageAnnotation0.getToolTipText());
      assertTrue(xYImageAnnotation0.getNotify());
      assertNull(xYImageAnnotation0.getURL());
      assertEquals((-1.0), xYImageAnnotation0.getY(), 0.01);
      
      xYImageAnnotation0.setNotify(true);
      assertEquals((-1.0), xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYImageAnnotation0.getImageAnchor());
      assertNull(xYImageAnnotation0.getToolTipText());
      assertTrue(xYImageAnnotation0.getNotify());
      assertNull(xYImageAnnotation0.getURL());
      assertEquals((-1.0), xYImageAnnotation0.getY(), 0.01);
      
      xYImageAnnotation0.setToolTipText("o'myi.$QWGSLt");
      assertEquals("o'myi.$QWGSLt", xYImageAnnotation0.getToolTipText());
      assertEquals((-1.0), xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYImageAnnotation0.getImageAnchor());
      assertTrue(xYImageAnnotation0.getNotify());
      assertNull(xYImageAnnotation0.getURL());
      assertEquals((-1.0), xYImageAnnotation0.getY(), 0.01);
      
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      doReturn(axisLocation0).when(xYPlot0).getRangeAxisLocation();
      boolean boolean0 = xYImageAnnotation0.equals(xYImageAnnotation0);
      assertEquals("o'myi.$QWGSLt", xYImageAnnotation0.getToolTipText());
      assertEquals((-1.0), xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYImageAnnotation0.getImageAnchor());
      assertTrue(xYImageAnnotation0.getNotify());
      assertNull(xYImageAnnotation0.getURL());
      assertEquals((-1.0), xYImageAnnotation0.getY(), 0.01);
      assertTrue(boolean0);
      
      xYImageAnnotation0.setNotify(false);
      assertEquals("o'myi.$QWGSLt", xYImageAnnotation0.getToolTipText());
      assertFalse(xYImageAnnotation0.getNotify());
      assertEquals((-1.0), xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYImageAnnotation0.getImageAnchor());
      assertNull(xYImageAnnotation0.getURL());
      assertEquals((-1.0), xYImageAnnotation0.getY(), 0.01);
      
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.addChangeListener(annotationChangeListener1);
      assertEquals("o'myi.$QWGSLt", xYImageAnnotation0.getToolTipText());
      assertFalse(xYImageAnnotation0.getNotify());
      assertEquals((-1.0), xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYImageAnnotation0.getImageAnchor());
      assertNull(xYImageAnnotation0.getURL());
      assertEquals((-1.0), xYImageAnnotation0.getY(), 0.01);
      
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener2 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.removeChangeListener(annotationChangeListener2);
      assertEquals("o'myi.$QWGSLt", xYImageAnnotation0.getToolTipText());
      assertFalse(xYImageAnnotation0.getNotify());
      assertEquals((-1.0), xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYImageAnnotation0.getImageAnchor());
      assertNull(xYImageAnnotation0.getURL());
      assertEquals((-1.0), xYImageAnnotation0.getY(), 0.01);
      
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener3 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.addChangeListener(annotationChangeListener3);
      assertEquals("o'myi.$QWGSLt", xYImageAnnotation0.getToolTipText());
      assertFalse(xYImageAnnotation0.getNotify());
      assertEquals((-1.0), xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYImageAnnotation0.getImageAnchor());
      assertNull(xYImageAnnotation0.getURL());
      assertEquals((-1.0), xYImageAnnotation0.getY(), 0.01);
      
      xYImageAnnotation0.fireAnnotationChanged();
      assertEquals("o'myi.$QWGSLt", xYImageAnnotation0.getToolTipText());
      assertFalse(xYImageAnnotation0.getNotify());
      assertEquals((-1.0), xYImageAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_RIGHT, xYImageAnnotation0.getImageAnchor());
      assertNull(xYImageAnnotation0.getURL());
      assertEquals((-1.0), xYImageAnnotation0.getY(), 0.01);
      
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYImageAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, (ValueAxis) null, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(6.0, 1.0E-6, image0, rectangleAnchor0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYImageAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(1088.94249273143, 1.0, image0, rectangleAnchor0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn(axisLocation0).when(xYPlot0).getRangeAxisLocation();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.hasListener(eventListener0);
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.fireAnnotationChanged();
      // Undeclared exception!
      try { 
        xYImageAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis1, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(0.0, 0.0, image0, rectangleAnchor0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYImageAnnotation xYImageAnnotation1 = new XYImageAnnotation((-1772.13912228329), 1.0F, image1, rectangleAnchor0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation1.removeChangeListener(annotationChangeListener0);
      xYImageAnnotation0.equals(xYImageAnnotation1);
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYImageAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(image0).toString();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation((-1293.94233), 0.0, image0, rectangleAnchor0);
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(image1).toString();
      XYImageAnnotation xYImageAnnotation1 = new XYImageAnnotation((-1293.94233), 1.7976931348623157E308, image1, rectangleAnchor0);
      xYImageAnnotation0.equals(xYImageAnnotation1);
      xYImageAnnotation0.addChangeListener((AnnotationChangeListener) null);
      xYImageAnnotation0.setURL("image");
      xYImageAnnotation0.getX();
      xYImageAnnotation0.getY();
      xYImageAnnotation0.getX();
      xYImageAnnotation0.getImage();
      xYImageAnnotation0.addChangeListener((AnnotationChangeListener) null);
      xYImageAnnotation0.getImage();
      xYImageAnnotation0.getY();
      xYImageAnnotation0.clone();
      xYImageAnnotation0.getY();
      xYImageAnnotation1.getImage();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(0.0, 0.0, image0, rectangleAnchor0);
      xYImageAnnotation0.getX();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(865.718880932761, 865.718880932761, image0, rectangleAnchor0);
      xYImageAnnotation0.fireAnnotationChanged();
      xYImageAnnotation0.getX();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation((-1.0), (-1.0), image0, rectangleAnchor0);
      xYImageAnnotation0.getX();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Image image0 = null;
      XYImageAnnotation xYImageAnnotation0 = null;
      try {
        xYImageAnnotation0 = new XYImageAnnotation(91.875, 91.875, (Image) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(302.16676909673, (-3381.1), image0);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.hasListener(eventListener0);
      xYImageAnnotation0.getY();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      XYImageAnnotation xYImageAnnotation0 = null;
      try {
        xYImageAnnotation0 = new XYImageAnnotation(500.0, 1507.89082319423, (Image) null, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation((-500.857), 0.0, image0, rectangleAnchor0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = null;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.setToolTipText("LOW_END");
      xYImageAnnotation0.notifyListeners(annotationChangeEvent0);
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D1 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYImageAnnotation0.draw(graphics2D1, (XYPlot) null, rectangle2D1, valueAxis1, valueAxis1, 1, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYImageAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(0.0, 0.0, image0);
      xYImageAnnotation0.fireAnnotationChanged();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.clone();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.setToolTipText("image");
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.removeChangeListener(annotationChangeListener1);
      xYImageAnnotation0.removeChangeListener(annotationChangeListener0);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYImageAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(0.0, 0.0, image0);
      xYImageAnnotation0.setURL("");
      xYImageAnnotation0.hashCode();
      xYImageAnnotation0.hashCode();
      xYImageAnnotation0.equals("");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation((-1.0), (-1.0), image0, rectangleAnchor0);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn((ChartRenderingInfo) null).when(plotRenderingInfo0).getOwner();
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYImageAnnotation0.addEntity(plotRenderingInfo0, shape0, (-3715), "lmQ:G4-BSQ+-G:", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.AbstractXYAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(image0).toString();
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(2154.0136441, 2154.0136441, image0);
      xYImageAnnotation0.fireAnnotationChanged();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.equals(plotRenderingInfo0);
      xYImageAnnotation0.getImage();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.notifyListeners(annotationChangeEvent0);
      xYImageAnnotation0.hasListener(eventListener0);
      xYImageAnnotation0.clone();
      xYImageAnnotation0.setURL("k]qy}J/ 4zlK</U");
      xYImageAnnotation0.clone();
      xYImageAnnotation0.setToolTipText("k]qy}J/ 4zlK</U");
      xYImageAnnotation0.hashCode();
      xYImageAnnotation0.getImage();
      xYImageAnnotation0.hasListener((EventListener) null);
      xYImageAnnotation0.getY();
      xYImageAnnotation0.getY();
      xYImageAnnotation0.getX();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Image image0 = null;
      XYImageAnnotation xYImageAnnotation0 = null;
      try {
        xYImageAnnotation0 = new XYImageAnnotation(0.0, 0.0, (Image) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(54.1666667, 54.1666667, image0);
      assertEquals(54.1666667, xYImageAnnotation0.getY(), 0.01);
      assertNull(xYImageAnnotation0.getToolTipText());
      assertEquals(54.1666667, xYImageAnnotation0.getX(), 0.01);
      assertNull(xYImageAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation0.getImageAnchor());
      assertTrue(xYImageAnnotation0.getNotify());
      assertNotNull(xYImageAnnotation0);
      
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYImageAnnotation xYImageAnnotation1 = new XYImageAnnotation(54.1666667, 0.0, image1);
      assertEquals(0.0, xYImageAnnotation1.getY(), 0.01);
      assertNull(xYImageAnnotation1.getToolTipText());
      assertEquals(54.1666667, xYImageAnnotation1.getX(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation1.getImageAnchor());
      assertTrue(xYImageAnnotation1.getNotify());
      assertNull(xYImageAnnotation1.getURL());
      assertFalse(xYImageAnnotation1.equals((Object)xYImageAnnotation0));
      assertNotNull(xYImageAnnotation1);
      
      Image image2 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      xYImageAnnotation1.fireAnnotationChanged();
      assertEquals(0.0, xYImageAnnotation1.getY(), 0.01);
      assertNull(xYImageAnnotation1.getToolTipText());
      assertEquals(54.1666667, xYImageAnnotation1.getX(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation1.getImageAnchor());
      assertTrue(xYImageAnnotation1.getNotify());
      assertNull(xYImageAnnotation1.getURL());
      assertFalse(xYImageAnnotation1.equals((Object)xYImageAnnotation0));
      assertNotSame(xYImageAnnotation1, xYImageAnnotation0);
      
      XYImageAnnotation xYImageAnnotation2 = new XYImageAnnotation(Double.NaN, 0.0, image2, rectangleAnchor0);
      assertNull(xYImageAnnotation2.getToolTipText());
      assertNull(xYImageAnnotation2.getURL());
      assertTrue(xYImageAnnotation2.getNotify());
      assertEquals(Double.NaN, xYImageAnnotation2.getX(), 0.01);
      assertEquals(0.0, xYImageAnnotation2.getY(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, xYImageAnnotation2.getImageAnchor());
      assertFalse(xYImageAnnotation2.equals((Object)xYImageAnnotation1));
      assertFalse(xYImageAnnotation2.equals((Object)xYImageAnnotation0));
      assertNotNull(xYImageAnnotation2);
      
      boolean boolean0 = xYImageAnnotation1.equals(xYImageAnnotation2);
      assertEquals(0.0, xYImageAnnotation1.getY(), 0.01);
      assertNull(xYImageAnnotation1.getToolTipText());
      assertEquals(54.1666667, xYImageAnnotation1.getX(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation1.getImageAnchor());
      assertTrue(xYImageAnnotation1.getNotify());
      assertNull(xYImageAnnotation1.getURL());
      assertNull(xYImageAnnotation2.getToolTipText());
      assertNull(xYImageAnnotation2.getURL());
      assertTrue(xYImageAnnotation2.getNotify());
      assertEquals(Double.NaN, xYImageAnnotation2.getX(), 0.01);
      assertEquals(0.0, xYImageAnnotation2.getY(), 0.01);
      assertEquals(RectangleAnchor.BOTTOM_LEFT, xYImageAnnotation2.getImageAnchor());
      assertFalse(xYImageAnnotation1.equals((Object)xYImageAnnotation0));
      assertFalse(xYImageAnnotation1.equals((Object)xYImageAnnotation2));
      assertFalse(xYImageAnnotation2.equals((Object)xYImageAnnotation1));
      assertFalse(xYImageAnnotation2.equals((Object)xYImageAnnotation0));
      assertNotSame(xYImageAnnotation1, xYImageAnnotation0);
      assertNotSame(xYImageAnnotation1, xYImageAnnotation2);
      assertNotSame(xYImageAnnotation2, xYImageAnnotation1);
      assertNotSame(xYImageAnnotation2, xYImageAnnotation0);
      assertFalse(boolean0);
      
      boolean boolean1 = xYImageAnnotation0.equals(xYImageAnnotation1);
      assertEquals(54.1666667, xYImageAnnotation0.getY(), 0.01);
      assertNull(xYImageAnnotation0.getToolTipText());
      assertEquals(54.1666667, xYImageAnnotation0.getX(), 0.01);
      assertNull(xYImageAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation0.getImageAnchor());
      assertTrue(xYImageAnnotation0.getNotify());
      assertEquals(0.0, xYImageAnnotation1.getY(), 0.01);
      assertNull(xYImageAnnotation1.getToolTipText());
      assertEquals(54.1666667, xYImageAnnotation1.getX(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation1.getImageAnchor());
      assertTrue(xYImageAnnotation1.getNotify());
      assertNull(xYImageAnnotation1.getURL());
      assertFalse(xYImageAnnotation0.equals((Object)xYImageAnnotation2));
      assertFalse(xYImageAnnotation0.equals((Object)xYImageAnnotation1));
      assertFalse(xYImageAnnotation1.equals((Object)xYImageAnnotation0));
      assertFalse(xYImageAnnotation1.equals((Object)xYImageAnnotation2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(xYImageAnnotation0, xYImageAnnotation2);
      assertNotSame(xYImageAnnotation0, xYImageAnnotation1);
      assertNotSame(xYImageAnnotation1, xYImageAnnotation0);
      assertNotSame(xYImageAnnotation1, xYImageAnnotation2);
      assertFalse(boolean1);
      
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.notifyListeners(annotationChangeEvent0);
      assertEquals(54.1666667, xYImageAnnotation0.getY(), 0.01);
      assertNull(xYImageAnnotation0.getToolTipText());
      assertEquals(54.1666667, xYImageAnnotation0.getX(), 0.01);
      assertNull(xYImageAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation0.getImageAnchor());
      assertTrue(xYImageAnnotation0.getNotify());
      assertFalse(xYImageAnnotation0.equals((Object)xYImageAnnotation2));
      assertFalse(xYImageAnnotation0.equals((Object)xYImageAnnotation1));
      assertNotSame(xYImageAnnotation0, xYImageAnnotation2);
      assertNotSame(xYImageAnnotation0, xYImageAnnotation1);
      
      XYImageAnnotation xYImageAnnotation3 = (XYImageAnnotation)xYImageAnnotation0.clone();
      assertEquals(54.1666667, xYImageAnnotation0.getY(), 0.01);
      assertNull(xYImageAnnotation0.getToolTipText());
      assertEquals(54.1666667, xYImageAnnotation0.getX(), 0.01);
      assertNull(xYImageAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation0.getImageAnchor());
      assertTrue(xYImageAnnotation0.getNotify());
      assertNull(xYImageAnnotation3.getURL());
      assertTrue(xYImageAnnotation3.getNotify());
      assertEquals(54.1666667, xYImageAnnotation3.getX(), 0.01);
      assertEquals(54.1666667, xYImageAnnotation3.getY(), 0.01);
      assertNull(xYImageAnnotation3.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation3.getImageAnchor());
      assertFalse(xYImageAnnotation0.equals((Object)xYImageAnnotation2));
      assertFalse(xYImageAnnotation0.equals((Object)xYImageAnnotation1));
      assertFalse(xYImageAnnotation3.equals((Object)xYImageAnnotation2));
      assertFalse(xYImageAnnotation3.equals((Object)xYImageAnnotation1));
      assertTrue(xYImageAnnotation3.equals((Object)xYImageAnnotation0));
      assertNotSame(xYImageAnnotation0, xYImageAnnotation2);
      assertNotSame(xYImageAnnotation0, xYImageAnnotation3);
      assertNotSame(xYImageAnnotation0, xYImageAnnotation1);
      assertNotSame(xYImageAnnotation3, xYImageAnnotation0);
      assertNotSame(xYImageAnnotation3, xYImageAnnotation2);
      assertNotSame(xYImageAnnotation3, xYImageAnnotation1);
      assertNotNull(xYImageAnnotation3);
      
      double double0 = xYImageAnnotation0.getY();
      assertEquals(54.1666667, xYImageAnnotation0.getY(), 0.01);
      assertNull(xYImageAnnotation0.getToolTipText());
      assertEquals(54.1666667, xYImageAnnotation0.getX(), 0.01);
      assertNull(xYImageAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation0.getImageAnchor());
      assertTrue(xYImageAnnotation0.getNotify());
      assertFalse(xYImageAnnotation0.equals((Object)xYImageAnnotation2));
      assertFalse(xYImageAnnotation0.equals((Object)xYImageAnnotation1));
      assertTrue(xYImageAnnotation0.equals((Object)xYImageAnnotation3));
      assertNotSame(xYImageAnnotation0, xYImageAnnotation2);
      assertNotSame(xYImageAnnotation0, xYImageAnnotation3);
      assertNotSame(xYImageAnnotation0, xYImageAnnotation1);
      assertEquals(54.1666667, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(420.08793, 420.08793, image0, rectangleAnchor0);
      assertNull(xYImageAnnotation0.getURL());
      assertEquals(420.08793, xYImageAnnotation0.getX(), 0.01);
      assertEquals(420.08793, xYImageAnnotation0.getY(), 0.01);
      assertEquals(RectangleAnchor.RIGHT, xYImageAnnotation0.getImageAnchor());
      assertTrue(xYImageAnnotation0.getNotify());
      assertNull(xYImageAnnotation0.getToolTipText());
      assertNotNull(xYImageAnnotation0);
      
      double double0 = xYImageAnnotation0.getY();
      assertNull(xYImageAnnotation0.getURL());
      assertEquals(420.08793, xYImageAnnotation0.getX(), 0.01);
      assertEquals(420.08793, xYImageAnnotation0.getY(), 0.01);
      assertEquals(RectangleAnchor.RIGHT, xYImageAnnotation0.getImageAnchor());
      assertTrue(xYImageAnnotation0.getNotify());
      assertNull(xYImageAnnotation0.getToolTipText());
      assertEquals(420.08793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation((-52.6551), (-52.6551), image0, rectangleAnchor0);
      assertEquals(RectangleAnchor.RIGHT, xYImageAnnotation0.getImageAnchor());
      assertEquals((-52.6551), xYImageAnnotation0.getX(), 0.01);
      assertEquals((-52.6551), xYImageAnnotation0.getY(), 0.01);
      assertNull(xYImageAnnotation0.getToolTipText());
      assertNull(xYImageAnnotation0.getURL());
      assertTrue(xYImageAnnotation0.getNotify());
      assertNotNull(xYImageAnnotation0);
      
      RectangleAnchor rectangleAnchor1 = xYImageAnnotation0.getImageAnchor();
      assertEquals(RectangleAnchor.RIGHT, xYImageAnnotation0.getImageAnchor());
      assertEquals((-52.6551), xYImageAnnotation0.getX(), 0.01);
      assertEquals((-52.6551), xYImageAnnotation0.getY(), 0.01);
      assertNull(xYImageAnnotation0.getToolTipText());
      assertNull(xYImageAnnotation0.getURL());
      assertTrue(xYImageAnnotation0.getNotify());
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor1.toString());
      assertSame(rectangleAnchor0, rectangleAnchor1);
      assertSame(rectangleAnchor1, rectangleAnchor0);
      assertEquals(RectangleAnchor.RIGHT, rectangleAnchor1);
      
      RectangleAnchor rectangleAnchor2 = xYImageAnnotation0.getImageAnchor();
      assertEquals(RectangleAnchor.RIGHT, xYImageAnnotation0.getImageAnchor());
      assertEquals((-52.6551), xYImageAnnotation0.getX(), 0.01);
      assertEquals((-52.6551), xYImageAnnotation0.getY(), 0.01);
      assertNull(xYImageAnnotation0.getToolTipText());
      assertNull(xYImageAnnotation0.getURL());
      assertTrue(xYImageAnnotation0.getNotify());
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor2.toString());
      assertSame(rectangleAnchor0, rectangleAnchor2);
      assertSame(rectangleAnchor0, rectangleAnchor1);
      assertSame(rectangleAnchor2, rectangleAnchor0);
      assertSame(rectangleAnchor2, rectangleAnchor1);
      assertEquals(RectangleAnchor.RIGHT, rectangleAnchor2);
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.addChangeListener(annotationChangeListener0);
      assertEquals(RectangleAnchor.RIGHT, xYImageAnnotation0.getImageAnchor());
      assertEquals((-52.6551), xYImageAnnotation0.getX(), 0.01);
      assertEquals((-52.6551), xYImageAnnotation0.getY(), 0.01);
      assertNull(xYImageAnnotation0.getToolTipText());
      assertNull(xYImageAnnotation0.getURL());
      assertTrue(xYImageAnnotation0.getNotify());
      assertSame(rectangleAnchor0, rectangleAnchor2);
      assertSame(rectangleAnchor0, rectangleAnchor1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYImageAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(0.0, 1504.066726648441, image0);
      assertTrue(xYImageAnnotation0.getNotify());
      assertNull(xYImageAnnotation0.getToolTipText());
      assertNull(xYImageAnnotation0.getURL());
      assertEquals(1504.066726648441, xYImageAnnotation0.getY(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation0.getImageAnchor());
      assertEquals(0.0, xYImageAnnotation0.getX(), 0.01);
      assertNotNull(xYImageAnnotation0);
      
      double double0 = xYImageAnnotation0.getY();
      assertTrue(xYImageAnnotation0.getNotify());
      assertNull(xYImageAnnotation0.getToolTipText());
      assertNull(xYImageAnnotation0.getURL());
      assertEquals(1504.066726648441, xYImageAnnotation0.getY(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYImageAnnotation0.getImageAnchor());
      assertEquals(0.0, xYImageAnnotation0.getX(), 0.01);
      assertEquals(1504.066726648441, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(image0).toString();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(0.0, 0.0, image0, rectangleAnchor0);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      Object object0 = xYImageAnnotation0.clone();
      xYImageAnnotation0.equals(object0);
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYImageAnnotation xYImageAnnotation1 = new XYImageAnnotation(0.0, 0.0, image1);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation1.notifyListeners(annotationChangeEvent0);
      xYImageAnnotation1.setNotify(true);
      xYImageAnnotation0.equals(xYImageAnnotation1);
      xYImageAnnotation0.hasListener(eventListener0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.removeChangeListener(annotationChangeListener0);
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.clone();
      xYImageAnnotation0.addChangeListener(annotationChangeListener1);
      Object object1 = xYImageAnnotation0.clone();
      xYImageAnnotation0.getImage();
      xYImageAnnotation0.equals(object1);
      xYImageAnnotation0.getImage();
      xYImageAnnotation0.getImage();
      xYImageAnnotation0.getY();
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYImageAnnotation1.draw((Graphics2D) null, xYPlot0, rectangle2D0, valueAxis0, valueAxis1, 5192, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation((-511.687324), (-1307.8795867549), image0);
      xYImageAnnotation0.getImageAnchor();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYImageAnnotation0.clone();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = null;
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYImageAnnotation0.draw(graphics2D0, (XYPlot) null, rectangle2D0, valueAxis0, valueAxis0, 500, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYImageAnnotation", e);
      }
  }
}
