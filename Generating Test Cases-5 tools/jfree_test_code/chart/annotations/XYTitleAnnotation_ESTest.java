/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:47:29 GMT 2023
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.annotations.XYTitleAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.title.Title;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.util.XYCoordinateType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYTitleAnnotation_ESTest extends XYTitleAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(2047.26801159, 2047.26801159, title0);
      xYTitleAnnotation0.getMaxWidth();
      xYTitleAnnotation0.hashCode();
      xYTitleAnnotation0.clone();
      double double0 = 18.25883549264099;
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation1 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn(axisLocation1).when(xYPlot0).getRangeAxisLocation();
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTitleAnnotation0.draw(graphics2D0, xYPlot0, (Rectangle2D) null, valueAxis0, valueAxis0, 30, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(1490.8500215494578, 1490.8500215494578, title0, rectangleAnchor0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      doReturn(axisLocation0).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.getTitleAnchor();
      xYTitleAnnotation0.clone();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTitleAnnotation0.draw((Graphics2D) null, xYPlot0, rectangle2D0, (ValueAxis) null, (ValueAxis) null, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation((-341.351669), 3542.1, title0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.addChangeListener(annotationChangeListener0);
      Title title1 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      xYTitleAnnotation0.setToolTipText("2oMkKBq\")o+4z1\"JC");
      XYTitleAnnotation xYTitleAnnotation1 = new XYTitleAnnotation((-341.351669), 2122.76123828, title1, rectangleAnchor0);
      xYTitleAnnotation1.hashCode();
      xYTitleAnnotation1.fireAnnotationChanged();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation1.hasListener(eventListener0);
      xYTitleAnnotation0.equals(xYTitleAnnotation1);
      xYTitleAnnotation0.hashCode();
      xYTitleAnnotation0.setMaxHeight(3542.1);
      xYTitleAnnotation1.getTitleAnchor();
      xYTitleAnnotation0.getTitleAnchor();
      xYTitleAnnotation1.getTitleAnchor();
      xYTitleAnnotation1.getMaxWidth();
      xYTitleAnnotation0.clone();
      xYTitleAnnotation0.getY();
      xYTitleAnnotation1.setMaxHeight(0.0);
      xYTitleAnnotation0.getMaxHeight();
      xYTitleAnnotation1.setMaxHeight((-2643.46));
      xYTitleAnnotation0.setMaxHeight(3542.1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(0.0, (-61.0), title0, rectangleAnchor0);
      xYTitleAnnotation0.fireAnnotationChanged();
      xYTitleAnnotation0.getMaxHeight();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      Title title1 = mock(Title.class, new ViolatedAssumptionAnswer());
      XYTitleAnnotation xYTitleAnnotation1 = new XYTitleAnnotation(0.0, 0.0, title1, rectangleAnchor0);
      xYTitleAnnotation0.equals(xYTitleAnnotation1);
      xYTitleAnnotation0.hasListener((EventListener) null);
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTitleAnnotation0.draw(graphics2D0, (XYPlot) null, rectangle2D0, valueAxis0, valueAxis0, (-4382), plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYTitleAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation((-180.0), (-180.0), title0, rectangleAnchor0);
      xYTitleAnnotation0.equals(rectangleAnchor0);
      xYTitleAnnotation0.hashCode();
      xYTitleAnnotation0.setURL((String) null);
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.notifyListeners(annotationChangeEvent0);
      xYTitleAnnotation0.getCoordinateType();
      xYTitleAnnotation0.hashCode();
      xYTitleAnnotation0.setMaxWidth((-180.0));
      xYTitleAnnotation0.setMaxWidth((-180.0));
      xYTitleAnnotation0.setMaxWidth(4106.480494214);
      xYTitleAnnotation0.hashCode();
      xYTitleAnnotation0.clone();
      xYTitleAnnotation0.getMaxWidth();
      xYTitleAnnotation0.getMaxWidth();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTitleAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(title0).toString();
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(288.0526043158, 1.0, title0);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.hasListener(eventListener0);
      Title title1 = xYTitleAnnotation0.getTitle();
      xYTitleAnnotation0.equals(title1);
      xYTitleAnnotation0.setMaxHeight(1931.6065257);
      xYTitleAnnotation0.setMaxWidth(2838.1);
      Object object0 = xYTitleAnnotation0.clone();
      xYTitleAnnotation0.equals(object0);
      xYTitleAnnotation0.setMaxHeight(288.0526043158);
      xYTitleAnnotation0.hashCode();
      xYTitleAnnotation0.getMaxHeight();
      xYTitleAnnotation0.getTitleAnchor();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(0.0, 0.0, title0, rectangleAnchor0);
      xYTitleAnnotation0.setMaxWidth((-2085.4399713459916));
      xYTitleAnnotation0.getMaxWidth();
      xYTitleAnnotation0.fireAnnotationChanged();
      xYTitleAnnotation0.getMaxWidth();
      xYTitleAnnotation0.getMaxHeight();
      xYTitleAnnotation0.getX();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(1442.374, 1442.374, title0, rectangleAnchor0);
      Object object0 = xYTitleAnnotation0.clone();
      xYTitleAnnotation0.hashCode();
      xYTitleAnnotation0.clone();
      xYTitleAnnotation0.setMaxWidth(334.581046928);
      xYTitleAnnotation0.equals(object0);
      xYTitleAnnotation0.setMaxWidth(334.581046928);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(2438.6721080142, 2438.6721080142, title0);
      xYTitleAnnotation0.setNotify(true);
      xYTitleAnnotation0.clone();
      xYTitleAnnotation0.equals("anchor");
      xYTitleAnnotation0.getY();
      xYTitleAnnotation0.getMaxHeight();
      xYTitleAnnotation0.getMaxHeight();
      xYTitleAnnotation0.getY();
      xYTitleAnnotation0.getMaxWidth();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(0.0, 0.0, title0, rectangleAnchor0);
      xYTitleAnnotation0.fireAnnotationChanged();
      xYTitleAnnotation0.getCoordinateType();
      xYTitleAnnotation0.getY();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 0.25;
      XYTitleAnnotation xYTitleAnnotation0 = null;
      try {
        xYTitleAnnotation0 = new XYTitleAnnotation(0.25, 0.0, (Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'title' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(225.0, 225.0, title0, rectangleAnchor0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.addChangeListener(annotationChangeListener0);
      xYTitleAnnotation0.getMaxWidth();
      Object object0 = xYTitleAnnotation0.clone();
      xYTitleAnnotation0.equals(object0);
      Title title1 = mock(Title.class, new ViolatedAssumptionAnswer());
      XYTitleAnnotation xYTitleAnnotation1 = new XYTitleAnnotation(1968.44339449, 225.0, title1);
      xYTitleAnnotation0.equals(xYTitleAnnotation1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation((-80.409255093), 1.5707963267948966, title0, rectangleAnchor0);
      xYTitleAnnotation0.getX();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(0.0, (-1775.501090417407), title0);
      xYTitleAnnotation0.getX();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(1704.345582285, (-436.93447885149), title0, rectangleAnchor0);
      xYTitleAnnotation0.setToolTipText("%@-.uG`4}\"ql#\"kqSj");
      xYTitleAnnotation0.equals("%@-.uG`4}\"ql#\"kqSj");
      xYTitleAnnotation0.setToolTipText("%@-.uG`4}\"ql#\"kqSj");
      xYTitleAnnotation0.setMaxWidth(0.0);
      xYTitleAnnotation0.setMaxWidth(1.0);
      xYTitleAnnotation0.getX();
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.notifyListeners(annotationChangeEvent0);
      AnnotationChangeEvent annotationChangeEvent1 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.notifyListeners(annotationChangeEvent1);
      xYTitleAnnotation0.getX();
      xYTitleAnnotation0.hashCode();
      xYTitleAnnotation0.clone();
      xYTitleAnnotation0.setMaxHeight(1704.345582285);
      xYTitleAnnotation0.getTitleAnchor();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTitleAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, Integer.MAX_VALUE, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(832.4, 832.4, title0, rectangleAnchor0);
      xYTitleAnnotation0.setToolTipText("");
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.removeChangeListener(annotationChangeListener0);
      xYTitleAnnotation0.setToolTipText("'?ySDFp4OeO1-;umVy");
      String string0 = "-imm";
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.setNotify(true);
      // Undeclared exception!
      try { 
        xYTitleAnnotation0.draw(graphics2D0, (XYPlot) null, rectangle2D0, valueAxis0, valueAxis0, 2237, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYTitleAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      XYTitleAnnotation xYTitleAnnotation0 = null;
      try {
        xYTitleAnnotation0 = new XYTitleAnnotation(0.0, (-295.20150284948), (Title) null, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'title' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(0.0, 0.0, title0);
      xYTitleAnnotation0.getMaxWidth();
      Title title1 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      XYTitleAnnotation xYTitleAnnotation1 = new XYTitleAnnotation(0.0, 0.0, title1, rectangleAnchor0);
      xYTitleAnnotation0.equals(xYTitleAnnotation1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(title0).toString();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(2031.671339, 2031.671339, title0, rectangleAnchor0);
      xYTitleAnnotation0.getTitle();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(title0).toString();
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(2536.3542, 2536.3542, title0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.setMaxWidth(2536.3542);
      xYTitleAnnotation0.setToolTipText("}0yBI#/-u7 =e");
      xYTitleAnnotation0.fireAnnotationChanged();
      xYTitleAnnotation0.removeChangeListener(annotationChangeListener0);
      Title title1 = xYTitleAnnotation0.getTitle();
      xYTitleAnnotation0.clone();
      xYTitleAnnotation0.getTitle();
      xYTitleAnnotation0.clone();
      xYTitleAnnotation0.setURL("");
      xYTitleAnnotation0.getTitle();
      xYTitleAnnotation0.getTitle();
      xYTitleAnnotation0.getTitle();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      XYTitleAnnotation xYTitleAnnotation1 = new XYTitleAnnotation(2536.3542, 2536.3542, title1, rectangleAnchor0);
      xYTitleAnnotation1.hashCode();
      Object object0 = xYTitleAnnotation1.clone();
      xYTitleAnnotation0.equals(object0);
      xYTitleAnnotation0.getTitle();
      xYTitleAnnotation0.getTitleAnchor();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTitleAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(704.3785594, 704.3785594, title0, rectangleAnchor0);
      xYTitleAnnotation0.setMaxWidth(0.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(656.0, 3726.979, title0);
      xYTitleAnnotation0.setToolTipText((String) null);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.addChangeListener(annotationChangeListener0);
      xYTitleAnnotation0.setNotify(false);
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.removeChangeListener(annotationChangeListener1);
      AnnotationChangeListener annotationChangeListener2 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.addChangeListener(annotationChangeListener2);
      xYTitleAnnotation0.setURL("d-MMM");
      xYTitleAnnotation0.setNotify(false);
      xYTitleAnnotation0.setURL("d-MMM");
      xYTitleAnnotation0.setMaxHeight((-659.879234));
      xYTitleAnnotation0.clone();
      xYTitleAnnotation0.getMaxWidth();
      xYTitleAnnotation0.getX();
      xYTitleAnnotation0.setURL("F-!4$X\"9){rgo`4n");
      xYTitleAnnotation0.fireAnnotationChanged();
      xYTitleAnnotation0.getTitleAnchor();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.hasListener(eventListener0);
      xYTitleAnnotation0.getCoordinateType();
      xYTitleAnnotation0.setMaxHeight((-659.879234));
      xYTitleAnnotation0.hashCode();
      xYTitleAnnotation0.setMaxWidth((-3158.166337767085));
      xYTitleAnnotation0.getX();
      xYTitleAnnotation0.clone();
      xYTitleAnnotation0.clone();
      xYTitleAnnotation0.getMaxHeight();
      xYTitleAnnotation0.setMaxWidth(0.0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(0.0, 0.0, title0, rectangleAnchor0);
      assertNotNull(xYTitleAnnotation0);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(RectangleAnchor.RIGHT, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      
      xYTitleAnnotation0.setURL(";35[%xyEw,tyOna,F");
      assertTrue(xYTitleAnnotation0.getNotify());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(RectangleAnchor.RIGHT, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(";35[%xyEw,tyOna,F", xYTitleAnnotation0.getURL());
      
      xYTitleAnnotation0.setMaxHeight(0.0);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(RectangleAnchor.RIGHT, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(";35[%xyEw,tyOna,F", xYTitleAnnotation0.getURL());
      
      xYTitleAnnotation0.setNotify(false);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertFalse(xYTitleAnnotation0.getNotify());
      assertEquals(RectangleAnchor.RIGHT, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(";35[%xyEw,tyOna,F", xYTitleAnnotation0.getURL());
      
      XYTitleAnnotation xYTitleAnnotation1 = (XYTitleAnnotation)xYTitleAnnotation0.clone();
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertNotSame(xYTitleAnnotation1, xYTitleAnnotation0);
      assertNotNull(xYTitleAnnotation1);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertFalse(xYTitleAnnotation0.getNotify());
      assertEquals(RectangleAnchor.RIGHT, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(";35[%xyEw,tyOna,F", xYTitleAnnotation0.getURL());
      assertEquals(";35[%xyEw,tyOna,F", xYTitleAnnotation1.getURL());
      assertNull(xYTitleAnnotation1.getToolTipText());
      assertEquals(0.0, xYTitleAnnotation1.getY(), 0.01);
      assertFalse(xYTitleAnnotation1.getNotify());
      assertEquals(RectangleAnchor.RIGHT, xYTitleAnnotation1.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation1.getMaxHeight(), 0.01);
      assertEquals(0.0, xYTitleAnnotation1.getMaxWidth(), 0.01);
      assertTrue(xYTitleAnnotation1.equals((Object)xYTitleAnnotation0));
      
      boolean boolean0 = xYTitleAnnotation0.equals(rectangleAnchor0);
      assertFalse(boolean0);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertFalse(xYTitleAnnotation0.getNotify());
      assertEquals(RectangleAnchor.RIGHT, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(";35[%xyEw,tyOna,F", xYTitleAnnotation0.getURL());
      assertTrue(xYTitleAnnotation0.equals((Object)xYTitleAnnotation1));
      
      xYTitleAnnotation0.setMaxHeight(342.643602);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertEquals(342.643602, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertFalse(xYTitleAnnotation0.getNotify());
      assertEquals(RectangleAnchor.RIGHT, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(";35[%xyEw,tyOna,F", xYTitleAnnotation0.getURL());
      assertFalse(xYTitleAnnotation0.equals((Object)xYTitleAnnotation1));
      
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.notifyListeners(annotationChangeEvent0);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertEquals(342.643602, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertFalse(xYTitleAnnotation0.getNotify());
      assertEquals(RectangleAnchor.RIGHT, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(";35[%xyEw,tyOna,F", xYTitleAnnotation0.getURL());
      assertFalse(xYTitleAnnotation0.equals((Object)xYTitleAnnotation1));
      
      xYTitleAnnotation0.hashCode();
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertEquals(342.643602, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertFalse(xYTitleAnnotation0.getNotify());
      assertEquals(RectangleAnchor.RIGHT, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(";35[%xyEw,tyOna,F", xYTitleAnnotation0.getURL());
      assertFalse(xYTitleAnnotation0.equals((Object)xYTitleAnnotation1));
      
      XYCoordinateType xYCoordinateType0 = xYTitleAnnotation0.getCoordinateType();
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertNotNull(xYCoordinateType0);
      assertEquals(342.643602, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertFalse(xYTitleAnnotation0.getNotify());
      assertEquals(RectangleAnchor.RIGHT, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(";35[%xyEw,tyOna,F", xYTitleAnnotation0.getURL());
      assertEquals("XYCoordinateType.RELATIVE", xYCoordinateType0.toString());
      assertFalse(xYTitleAnnotation0.equals((Object)xYTitleAnnotation1));
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      doReturn((AxisLocation) null).when(xYPlot0).getRangeAxisLocation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTitleAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, (ValueAxis) null, (ValueAxis) null, 193, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(0.0, (-2379.217783483083), title0);
      assertNotNull(xYTitleAnnotation0);
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals((-2379.217783483083), xYTitleAnnotation0.getY(), 0.01);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.removeChangeListener(annotationChangeListener0);
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals((-2379.217783483083), xYTitleAnnotation0.getY(), 0.01);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      
      Title title1 = mock(Title.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.setMaxWidth((-2379.217783483083));
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals((-2379.217783483083), xYTitleAnnotation0.getY(), 0.01);
      assertEquals((-2379.217783483083), xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      
      XYTitleAnnotation xYTitleAnnotation1 = new XYTitleAnnotation((-2379.217783483083), 0.0, title1);
      assertNotNull(xYTitleAnnotation1);
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation1.getTitleAnchor());
      assertTrue(xYTitleAnnotation1.getNotify());
      assertEquals(0.0, xYTitleAnnotation1.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation1.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation1.getURL());
      assertNull(xYTitleAnnotation1.getToolTipText());
      assertEquals((-2379.217783483083), xYTitleAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation1.getMaxWidth(), 0.01);
      assertFalse(xYTitleAnnotation1.equals((Object)xYTitleAnnotation0));
      
      XYTitleAnnotation xYTitleAnnotation2 = (XYTitleAnnotation)xYTitleAnnotation1.clone();
      assertNotSame(xYTitleAnnotation1, xYTitleAnnotation0);
      assertNotSame(xYTitleAnnotation1, xYTitleAnnotation2);
      assertNotSame(xYTitleAnnotation2, xYTitleAnnotation1);
      assertNotSame(xYTitleAnnotation2, xYTitleAnnotation0);
      assertNotNull(xYTitleAnnotation2);
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation1.getTitleAnchor());
      assertTrue(xYTitleAnnotation1.getNotify());
      assertEquals(0.0, xYTitleAnnotation1.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation1.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation1.getURL());
      assertNull(xYTitleAnnotation1.getToolTipText());
      assertEquals((-2379.217783483083), xYTitleAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation1.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation2.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation2.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation2.getURL());
      assertEquals(0.0, xYTitleAnnotation2.getMaxWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation2.getTitleAnchor());
      assertTrue(xYTitleAnnotation2.getNotify());
      assertNull(xYTitleAnnotation2.getToolTipText());
      assertEquals((-2379.217783483083), xYTitleAnnotation2.getX(), 0.01);
      assertFalse(xYTitleAnnotation1.equals((Object)xYTitleAnnotation0));
      assertTrue(xYTitleAnnotation2.equals((Object)xYTitleAnnotation1));
      assertFalse(xYTitleAnnotation2.equals((Object)xYTitleAnnotation0));
      
      boolean boolean0 = xYTitleAnnotation0.equals(xYTitleAnnotation2);
      assertFalse(boolean0);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation2);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertNotSame(xYTitleAnnotation1, xYTitleAnnotation0);
      assertNotSame(xYTitleAnnotation1, xYTitleAnnotation2);
      assertNotSame(xYTitleAnnotation2, xYTitleAnnotation1);
      assertNotSame(xYTitleAnnotation2, xYTitleAnnotation0);
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals((-2379.217783483083), xYTitleAnnotation0.getY(), 0.01);
      assertEquals((-2379.217783483083), xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation1.getTitleAnchor());
      assertTrue(xYTitleAnnotation1.getNotify());
      assertEquals(0.0, xYTitleAnnotation1.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation1.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation1.getURL());
      assertNull(xYTitleAnnotation1.getToolTipText());
      assertEquals((-2379.217783483083), xYTitleAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation1.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation2.getY(), 0.01);
      assertEquals(0.0, xYTitleAnnotation2.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation2.getURL());
      assertEquals(0.0, xYTitleAnnotation2.getMaxWidth(), 0.01);
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation2.getTitleAnchor());
      assertTrue(xYTitleAnnotation2.getNotify());
      assertNull(xYTitleAnnotation2.getToolTipText());
      assertEquals((-2379.217783483083), xYTitleAnnotation2.getX(), 0.01);
      assertFalse(xYTitleAnnotation0.equals((Object)xYTitleAnnotation2));
      assertFalse(xYTitleAnnotation0.equals((Object)xYTitleAnnotation1));
      assertFalse(xYTitleAnnotation1.equals((Object)xYTitleAnnotation0));
      assertTrue(xYTitleAnnotation1.equals((Object)xYTitleAnnotation2));
      assertTrue(xYTitleAnnotation2.equals((Object)xYTitleAnnotation1));
      assertFalse(xYTitleAnnotation2.equals((Object)xYTitleAnnotation0));
      
      double double0 = xYTitleAnnotation0.getY();
      assertEquals((-2379.217783483083), double0, 0.01);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation2);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals((-2379.217783483083), xYTitleAnnotation0.getY(), 0.01);
      assertEquals((-2379.217783483083), xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertFalse(xYTitleAnnotation0.equals((Object)xYTitleAnnotation2));
      assertFalse(xYTitleAnnotation0.equals((Object)xYTitleAnnotation1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation((-1.0), (-1.0), title0);
      assertNotNull(xYTitleAnnotation0);
      assertEquals((-1.0), xYTitleAnnotation0.getY(), 0.01);
      assertEquals((-1.0), xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertTrue(xYTitleAnnotation0.getNotify());
      
      xYTitleAnnotation0.fireAnnotationChanged();
      assertEquals((-1.0), xYTitleAnnotation0.getY(), 0.01);
      assertEquals((-1.0), xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertTrue(xYTitleAnnotation0.getNotify());
      
      xYTitleAnnotation0.fireAnnotationChanged();
      assertEquals((-1.0), xYTitleAnnotation0.getY(), 0.01);
      assertEquals((-1.0), xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertTrue(xYTitleAnnotation0.getNotify());
      
      XYTitleAnnotation xYTitleAnnotation1 = (XYTitleAnnotation)xYTitleAnnotation0.clone();
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertNotSame(xYTitleAnnotation1, xYTitleAnnotation0);
      assertNotNull(xYTitleAnnotation1);
      assertEquals((-1.0), xYTitleAnnotation0.getY(), 0.01);
      assertEquals((-1.0), xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertTrue(xYTitleAnnotation0.getNotify());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation1.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation1.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation1.getURL());
      assertNull(xYTitleAnnotation1.getToolTipText());
      assertEquals(0.0, xYTitleAnnotation1.getMaxWidth(), 0.01);
      assertEquals((-1.0), xYTitleAnnotation1.getX(), 0.01);
      assertTrue(xYTitleAnnotation1.getNotify());
      assertEquals((-1.0), xYTitleAnnotation1.getY(), 0.01);
      assertTrue(xYTitleAnnotation1.equals((Object)xYTitleAnnotation0));
      
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.notifyListeners(annotationChangeEvent0);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertEquals((-1.0), xYTitleAnnotation0.getY(), 0.01);
      assertEquals((-1.0), xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertTrue(xYTitleAnnotation0.getNotify());
      assertTrue(xYTitleAnnotation0.equals((Object)xYTitleAnnotation1));
      
      xYTitleAnnotation0.removeChangeListener(annotationChangeListener0);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertEquals((-1.0), xYTitleAnnotation0.getY(), 0.01);
      assertEquals((-1.0), xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertTrue(xYTitleAnnotation0.getNotify());
      assertTrue(xYTitleAnnotation0.equals((Object)xYTitleAnnotation1));
      
      AnnotationChangeListener annotationChangeListener1 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.addChangeListener(annotationChangeListener1);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertEquals((-1.0), xYTitleAnnotation0.getY(), 0.01);
      assertEquals((-1.0), xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertTrue(xYTitleAnnotation0.getNotify());
      assertTrue(xYTitleAnnotation0.equals((Object)xYTitleAnnotation1));
      
      XYTitleAnnotation xYTitleAnnotation2 = (XYTitleAnnotation)xYTitleAnnotation0.clone();
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation2);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertNotSame(xYTitleAnnotation2, xYTitleAnnotation0);
      assertNotSame(xYTitleAnnotation2, xYTitleAnnotation1);
      assertNotNull(xYTitleAnnotation2);
      assertEquals((-1.0), xYTitleAnnotation0.getY(), 0.01);
      assertEquals((-1.0), xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertTrue(xYTitleAnnotation0.getNotify());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation2.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation2.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation2.getURL());
      assertNull(xYTitleAnnotation2.getToolTipText());
      assertEquals(0.0, xYTitleAnnotation2.getMaxWidth(), 0.01);
      assertTrue(xYTitleAnnotation2.getNotify());
      assertEquals((-1.0), xYTitleAnnotation2.getY(), 0.01);
      assertEquals((-1.0), xYTitleAnnotation2.getX(), 0.01);
      assertTrue(xYTitleAnnotation0.equals((Object)xYTitleAnnotation1));
      assertTrue(xYTitleAnnotation2.equals((Object)xYTitleAnnotation1));
      assertTrue(xYTitleAnnotation2.equals((Object)xYTitleAnnotation0));
      
      boolean boolean0 = xYTitleAnnotation0.equals(xYTitleAnnotation2);
      assertTrue(boolean0);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation2);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertNotSame(xYTitleAnnotation2, xYTitleAnnotation0);
      assertNotSame(xYTitleAnnotation2, xYTitleAnnotation1);
      assertEquals((-1.0), xYTitleAnnotation0.getY(), 0.01);
      assertEquals((-1.0), xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertTrue(xYTitleAnnotation0.getNotify());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation2.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation2.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation2.getURL());
      assertNull(xYTitleAnnotation2.getToolTipText());
      assertEquals(0.0, xYTitleAnnotation2.getMaxWidth(), 0.01);
      assertTrue(xYTitleAnnotation2.getNotify());
      assertEquals((-1.0), xYTitleAnnotation2.getY(), 0.01);
      assertEquals((-1.0), xYTitleAnnotation2.getX(), 0.01);
      assertTrue(xYTitleAnnotation0.equals((Object)xYTitleAnnotation2));
      assertTrue(xYTitleAnnotation0.equals((Object)xYTitleAnnotation1));
      assertTrue(xYTitleAnnotation2.equals((Object)xYTitleAnnotation1));
      assertTrue(xYTitleAnnotation2.equals((Object)xYTitleAnnotation0));
      
      xYTitleAnnotation0.hashCode();
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation2);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertEquals((-1.0), xYTitleAnnotation0.getY(), 0.01);
      assertEquals((-1.0), xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals(RectangleAnchor.CENTER, xYTitleAnnotation0.getTitleAnchor());
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertTrue(xYTitleAnnotation0.getNotify());
      assertTrue(xYTitleAnnotation0.equals((Object)xYTitleAnnotation2));
      assertTrue(xYTitleAnnotation0.equals((Object)xYTitleAnnotation1));
      
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(0.0, 0.0, title0, rectangleAnchor0);
      assertNotNull(xYTitleAnnotation0);
      assertTrue(xYTitleAnnotation0.getNotify());
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(RectangleAnchor.BOTTOM, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      
      xYTitleAnnotation0.setNotify(false);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(RectangleAnchor.BOTTOM, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertFalse(xYTitleAnnotation0.getNotify());
      
      Title title1 = mock(Title.class, new ViolatedAssumptionAnswer());
      RectangleAnchor rectangleAnchor1 = RectangleAnchor.BOTTOM;
      EntityCollection entityCollection0 = mock(EntityCollection.class, new ViolatedAssumptionAnswer());
      ChartRenderingInfo chartRenderingInfo0 = mock(ChartRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(entityCollection0).when(chartRenderingInfo0).getEntityCollection();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      doReturn(chartRenderingInfo0).when(plotRenderingInfo0).getOwner();
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.addChangeListener(annotationChangeListener0);
      assertSame(rectangleAnchor0, rectangleAnchor1);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(RectangleAnchor.BOTTOM, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertFalse(xYTitleAnnotation0.getNotify());
      
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.addEntity(plotRenderingInfo0, shape0, 2807, "", "Null 'unitType' argument.");
      assertSame(rectangleAnchor0, rectangleAnchor1);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(RectangleAnchor.BOTTOM, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertFalse(xYTitleAnnotation0.getNotify());
      
      XYTitleAnnotation xYTitleAnnotation1 = new XYTitleAnnotation(0.0, 1716.193, title1, rectangleAnchor1);
      assertNotNull(xYTitleAnnotation1);
      assertEquals(RectangleAnchor.BOTTOM, xYTitleAnnotation1.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation1.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation1.getURL());
      assertEquals(0.0, xYTitleAnnotation1.getMaxWidth(), 0.01);
      assertEquals(1716.193, xYTitleAnnotation1.getY(), 0.01);
      assertNull(xYTitleAnnotation1.getToolTipText());
      assertTrue(xYTitleAnnotation1.getNotify());
      assertFalse(xYTitleAnnotation1.equals((Object)xYTitleAnnotation0));
      
      boolean boolean0 = xYTitleAnnotation0.equals(xYTitleAnnotation1);
      assertFalse(boolean0);
      assertSame(rectangleAnchor0, rectangleAnchor1);
      assertNotSame(xYTitleAnnotation0, xYTitleAnnotation1);
      assertSame(rectangleAnchor1, rectangleAnchor0);
      assertNotSame(xYTitleAnnotation1, xYTitleAnnotation0);
      assertEquals(0.0, xYTitleAnnotation0.getY(), 0.01);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(RectangleAnchor.BOTTOM, xYTitleAnnotation0.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation0.getURL());
      assertFalse(xYTitleAnnotation0.getNotify());
      assertEquals(RectangleAnchor.BOTTOM, xYTitleAnnotation1.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation1.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation1.getURL());
      assertEquals(0.0, xYTitleAnnotation1.getMaxWidth(), 0.01);
      assertEquals(1716.193, xYTitleAnnotation1.getY(), 0.01);
      assertNull(xYTitleAnnotation1.getToolTipText());
      assertTrue(xYTitleAnnotation1.getNotify());
      assertFalse(xYTitleAnnotation0.equals((Object)xYTitleAnnotation1));
      assertFalse(xYTitleAnnotation1.equals((Object)xYTitleAnnotation0));
      
      XYTitleAnnotation xYTitleAnnotation2 = (XYTitleAnnotation)xYTitleAnnotation1.clone();
      assertSame(rectangleAnchor1, rectangleAnchor0);
      assertNotSame(xYTitleAnnotation1, xYTitleAnnotation2);
      assertNotSame(xYTitleAnnotation1, xYTitleAnnotation0);
      assertNotSame(xYTitleAnnotation2, xYTitleAnnotation1);
      assertNotSame(xYTitleAnnotation2, xYTitleAnnotation0);
      assertNotNull(xYTitleAnnotation2);
      assertEquals(RectangleAnchor.BOTTOM, xYTitleAnnotation1.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation1.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation1.getURL());
      assertEquals(0.0, xYTitleAnnotation1.getMaxWidth(), 0.01);
      assertEquals(1716.193, xYTitleAnnotation1.getY(), 0.01);
      assertNull(xYTitleAnnotation1.getToolTipText());
      assertTrue(xYTitleAnnotation1.getNotify());
      assertTrue(xYTitleAnnotation2.getNotify());
      assertNull(xYTitleAnnotation2.getToolTipText());
      assertEquals(RectangleAnchor.BOTTOM, xYTitleAnnotation2.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation2.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation2.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation2.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation2.getURL());
      assertEquals(1716.193, xYTitleAnnotation2.getY(), 0.01);
      assertFalse(xYTitleAnnotation1.equals((Object)xYTitleAnnotation0));
      assertTrue(xYTitleAnnotation2.equals((Object)xYTitleAnnotation1));
      assertFalse(xYTitleAnnotation2.equals((Object)xYTitleAnnotation0));
      
      boolean boolean1 = xYTitleAnnotation1.equals(xYTitleAnnotation2);
      assertTrue(boolean1);
      assertSame(rectangleAnchor1, rectangleAnchor0);
      assertNotSame(xYTitleAnnotation1, xYTitleAnnotation2);
      assertNotSame(xYTitleAnnotation1, xYTitleAnnotation0);
      assertNotSame(xYTitleAnnotation2, xYTitleAnnotation1);
      assertNotSame(xYTitleAnnotation2, xYTitleAnnotation0);
      assertEquals(RectangleAnchor.BOTTOM, xYTitleAnnotation1.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation1.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation1.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation1.getURL());
      assertEquals(0.0, xYTitleAnnotation1.getMaxWidth(), 0.01);
      assertEquals(1716.193, xYTitleAnnotation1.getY(), 0.01);
      assertNull(xYTitleAnnotation1.getToolTipText());
      assertTrue(xYTitleAnnotation1.getNotify());
      assertTrue(xYTitleAnnotation2.getNotify());
      assertNull(xYTitleAnnotation2.getToolTipText());
      assertEquals(RectangleAnchor.BOTTOM, xYTitleAnnotation2.getTitleAnchor());
      assertEquals(0.0, xYTitleAnnotation2.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation2.getMaxWidth(), 0.01);
      assertEquals(0.0, xYTitleAnnotation2.getMaxHeight(), 0.01);
      assertNull(xYTitleAnnotation2.getURL());
      assertEquals(1716.193, xYTitleAnnotation2.getY(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(xYTitleAnnotation1.equals((Object)xYTitleAnnotation0));
      assertTrue(xYTitleAnnotation1.equals((Object)xYTitleAnnotation2));
      assertTrue(xYTitleAnnotation2.equals((Object)xYTitleAnnotation1));
      assertFalse(xYTitleAnnotation2.equals((Object)xYTitleAnnotation0));
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      doReturn("b[0\"").when(title0).toString();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(0.0, 1.0, title0, rectangleAnchor0);
      xYTitleAnnotation0.hashCode();
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.notifyListeners(annotationChangeEvent0);
      xYTitleAnnotation0.getTitle();
      double double0 = xYTitleAnnotation0.getY();
      assertEquals(1.0, double0, 0.01);
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYTitleAnnotation0.hasListener(eventListener0);
      xYTitleAnnotation0.setMaxWidth(0.0);
      assertEquals(0.0, xYTitleAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01);
  }
}
