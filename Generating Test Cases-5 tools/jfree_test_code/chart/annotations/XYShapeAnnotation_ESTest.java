/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:03:11 GMT 2023
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYShapeAnnotation_ESTest extends XYShapeAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, (Stroke) null, (Paint) null, (Paint) null);
      xYShapeAnnotation0.equals(xYShapeAnnotation0);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYShapeAnnotation0.hasListener(eventListener0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYShapeAnnotation0.fireAnnotationChanged();
      xYShapeAnnotation0.setURL("");
      xYShapeAnnotation0.addChangeListener(annotationChangeListener0);
      xYShapeAnnotation0.equals((Object) null);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, stroke0, paint0, paint0);
      Object object0 = xYShapeAnnotation0.clone();
      xYShapeAnnotation0.clone();
      xYShapeAnnotation0.equals(object0);
      xYShapeAnnotation0.equals(object0);
      xYShapeAnnotation0.hashCode();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYShapeAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0);
      xYShapeAnnotation0.setNotify(false);
      xYShapeAnnotation0.notifyListeners((AnnotationChangeEvent) null);
      Object object0 = xYShapeAnnotation0.clone();
      xYShapeAnnotation0.equals(object0);
      xYShapeAnnotation0.clone();
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation1 = null;
      try {
        xYShapeAnnotation1 = new XYShapeAnnotation((Shape) null, stroke0, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = null;
      Rectangle2D rectangle2D0 = null;
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      xYShapeAnnotation0.addChangeListener((AnnotationChangeListener) null);
      xYShapeAnnotation0.clone();
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYShapeAnnotation0.draw(graphics2D0, (XYPlot) null, (Rectangle2D) null, valueAxis0, valueAxis0, 2494, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYShapeAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = null;
      XYShapeAnnotation xYShapeAnnotation0 = null;
      try {
        xYShapeAnnotation0 = new XYShapeAnnotation((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, (Stroke) null, paint0);
      xYShapeAnnotation0.hashCode();
      xYShapeAnnotation0.clone();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, stroke0, paint0, paint0);
      Shape shape1 = null;
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation1 = null;
      try {
        xYShapeAnnotation1 = new XYShapeAnnotation((Shape) null, stroke1, (Paint) null, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, stroke0, paint0);
      xYShapeAnnotation0.hashCode();
      xYShapeAnnotation0.clone();
      xYShapeAnnotation0.hashCode();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYShapeAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, stroke0, paint0);
      xYShapeAnnotation0.clone();
      Stroke stroke1 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint1 = mock(Paint.class, new ViolatedAssumptionAnswer());
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYShapeAnnotation0.hashCode();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYShapeAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, (-11), plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, stroke0, paint0, paint0);
      Object object0 = xYShapeAnnotation0.clone();
      xYShapeAnnotation0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, stroke0, paint0, paint0);
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      AnnotationChangeEvent annotationChangeEvent1 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYShapeAnnotation0.notifyListeners(annotationChangeEvent1);
      xYShapeAnnotation0.clone();
      xYShapeAnnotation0.notifyListeners(annotationChangeEvent0);
      XYShapeAnnotation xYShapeAnnotation1 = new XYShapeAnnotation(shape1);
      AnnotationChangeEvent annotationChangeEvent2 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYShapeAnnotation1.notifyListeners(annotationChangeEvent2);
      xYShapeAnnotation0.fireAnnotationChanged();
      xYShapeAnnotation0.equals(xYShapeAnnotation1);
      xYShapeAnnotation0.hashCode();
      xYShapeAnnotation1.clone();
      xYShapeAnnotation0.clone();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, stroke0, paint0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYShapeAnnotation0.removeChangeListener(annotationChangeListener0);
      xYShapeAnnotation0.fireAnnotationChanged();
      xYShapeAnnotation0.hashCode();
      xYShapeAnnotation0.clone();
      xYShapeAnnotation0.clone();
      xYShapeAnnotation0.setURL("%altK(D4c%B!WSz_");
      xYShapeAnnotation0.clone();
      Shape shape1 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation1 = new XYShapeAnnotation(shape1);
      xYShapeAnnotation0.equals(xYShapeAnnotation1);
      xYShapeAnnotation0.equals("org.jfree.chart.plot.CategoryPlot");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn((AxisLocation) null).when(xYPlot0).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYShapeAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Stroke stroke0 = mock(Stroke.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, stroke0, paint0, paint0);
      xYShapeAnnotation0.hashCode();
      xYShapeAnnotation0.equals(xYShapeAnnotation0);
      xYShapeAnnotation0.clone();
      Object object0 = xYShapeAnnotation0.clone();
      xYShapeAnnotation0.hashCode();
      xYShapeAnnotation0.clone();
      xYShapeAnnotation0.equals(object0);
      xYShapeAnnotation0.clone();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYShapeAnnotation0.hasListener(eventListener0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      PlotOrientation plotOrientation0 = mock(PlotOrientation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot0).getDomainAxisLocation();
      doReturn(plotOrientation0).when(xYPlot0).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYShapeAnnotation0.draw(graphics2D0, xYPlot0, rectangle2D0, valueAxis0, valueAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resolveDomainAxisLocation()
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0, (Stroke) null, paint0);
      assertTrue(xYShapeAnnotation0.getNotify());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      assertNotNull(xYShapeAnnotation0);
      
      boolean boolean0 = xYShapeAnnotation0.equals((Object) null);
      assertTrue(xYShapeAnnotation0.getNotify());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      assertFalse(boolean0);
      
      AnnotationChangeEvent annotationChangeEvent0 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      AxisLocation axisLocation0 = mock(AxisLocation.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      xYShapeAnnotation0.addChangeListener((AnnotationChangeListener) null);
      assertTrue(xYShapeAnnotation0.getNotify());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      
      AnnotationChangeEvent annotationChangeEvent1 = mock(AnnotationChangeEvent.class, new ViolatedAssumptionAnswer());
      xYShapeAnnotation0.notifyListeners(annotationChangeEvent1);
      assertTrue(xYShapeAnnotation0.getNotify());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      xYShapeAnnotation0.hashCode();
      assertTrue(xYShapeAnnotation0.getNotify());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      
      int int0 = 20;
      PlotRenderingInfo plotRenderingInfo0 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      int int1 = xYShapeAnnotation0.hashCode();
      assertFalse(int1 == int0);
      assertTrue(xYShapeAnnotation0.getNotify());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = xYShapeAnnotation0.hasListener(eventListener0);
      assertTrue(boolean1 == boolean0);
      assertTrue(xYShapeAnnotation0.getNotify());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      assertFalse(boolean1);
      
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot1 = mock(XYPlot.class, new ViolatedAssumptionAnswer());
      doReturn(axisLocation0).when(xYPlot1).getDomainAxisLocation();
      doReturn((PlotOrientation) null).when(xYPlot1).getOrientation();
      Rectangle2D rectangle2D0 = mock(Rectangle2D.class, new ViolatedAssumptionAnswer());
      ValueAxis valueAxis1 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      PlotRenderingInfo plotRenderingInfo1 = mock(PlotRenderingInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYShapeAnnotation0.draw(graphics2D0, xYPlot1, rectangle2D0, valueAxis1, valueAxis1, 500, plotRenderingInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = mock(Shape.class, new ViolatedAssumptionAnswer());
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(shape0);
      xYShapeAnnotation0.setURL("shape");
      xYShapeAnnotation0.equals("");
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYShapeAnnotation0.hasListener(eventListener0);
      AnnotationChangeListener annotationChangeListener0 = mock(AnnotationChangeListener.class, new ViolatedAssumptionAnswer());
      xYShapeAnnotation0.addChangeListener(annotationChangeListener0);
      xYShapeAnnotation0.setNotify(true);
      xYShapeAnnotation0.fireAnnotationChanged();
      EventListener eventListener1 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      xYShapeAnnotation0.hasListener(eventListener1);
      xYShapeAnnotation0.equals((Object) null);
      boolean boolean0 = xYShapeAnnotation0.equals((Object) null);
      assertFalse(boolean0);
      
      xYShapeAnnotation0.hashCode();
      xYShapeAnnotation0.hashCode();
      Object object0 = xYShapeAnnotation0.clone();
      assertTrue(object0.equals((Object)xYShapeAnnotation0));
  }
}
