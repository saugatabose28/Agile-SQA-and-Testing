/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:48:26 GMT 2023
 */

package org.jfree.chart.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.Arc2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.text.AttributedCharacterIterator;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.JApplet;
import javax.swing.JLayeredPane;
import javax.swing.border.BevelBorder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.editor.DefaultTitleEditor;
import org.jfree.chart.entity.ChartEntity;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.ImageTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.ShortTextTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.ui.HorizontalAlignment;
import org.jfree.chart.ui.VerticalAlignment;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.time.FixedMillisecond;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultTitleEditor_ESTest extends DefaultTitleEditor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      DefaultTitleEditor defaultTitleEditor0 = new DefaultTitleEditor(textTitle0);
      // Undeclared exception!
      try { 
        defaultTitleEditor0.attemptFontSelection();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      textTitle0.draw((Graphics2D) null, (Rectangle2D) null);
      DefaultTitleEditor defaultTitleEditor0 = new DefaultTitleEditor(textTitle0);
      defaultTitleEditor0.getMouseWheelListeners();
      textTitle0.setBorder((-574.5582), 1000.0, 1871.426141088239, 1000.0);
      Paint paint0 = defaultTitleEditor0.getTitlePaint();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      String string0 = "dvL((LSr&Axme4";
      Integer.getInteger("dvL((LSr&Axme4", (-800));
      defaultValueDataset0.equals(paint0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      String string1 = "Layer.BACKGROUND";
      PeriodAxis periodAxis0 = new PeriodAxis("Layer.BACKGROUND");
      thermometerPlot0.getDataRange(periodAxis0);
      defaultValueDataset0.clone();
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      defaultTitleEditor0.setTitleProperties(jFreeChart0);
      defaultTitleEditor0.getTitleText();
      defaultTitleEditor0.getTitlePaint();
      defaultTitleEditor0.getTitleFont();
      // Undeclared exception!
      try { 
        defaultTitleEditor0.attemptPaintSelection();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      DefaultTitleEditor defaultTitleEditor0 = new DefaultTitleEditor(shortTextTitle0);
      defaultTitleEditor0.getTitleFont();
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("", fixedMillisecond0, fixedMillisecond0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      defaultTitleEditor0.setTitleProperties(jFreeChart0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultTitleEditor defaultTitleEditor0 = new DefaultTitleEditor((Title) null);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      defaultTitleEditor0.removeHierarchyListener(hierarchyListener0);
      defaultTitleEditor0.getInheritsPopupMenu();
      ActionEvent actionEvent0 = mock(ActionEvent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(actionEvent0).getActionCommand();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      defaultTitleEditor0.addInputMethodListener(inputMethodListener0);
      defaultTitleEditor0.getGraphics();
      defaultTitleEditor0.printComponents((Graphics) null);
      defaultTitleEditor0.setToolTipText("Rmt'9qFB");
      defaultTitleEditor0.getPropertyChangeListeners();
      defaultTitleEditor0.getTransferHandler();
      // Undeclared exception!
      try { 
        defaultTitleEditor0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultTitleEditor defaultTitleEditor0 = new DefaultTitleEditor((Title) null);
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTitleEditor0.isFocusCycleRoot());
      assertFalse(defaultTitleEditor0.getIgnoreRepaint());
      assertTrue(defaultTitleEditor0.getFocusTraversalKeysEnabled());
      assertNotNull(defaultTitleEditor0);
      
      String string0 = defaultTitleEditor0.getUIClassID();
      assertEquals("PanelUI", string0);
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTitleEditor0.isFocusCycleRoot());
      assertFalse(defaultTitleEditor0.getIgnoreRepaint());
      assertTrue(defaultTitleEditor0.getFocusTraversalKeysEnabled());
      assertNotNull(string0);
      
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      assertNotNull(hierarchyListener1);
      
      HierarchyListener hierarchyListener2 = AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      assertNull(hierarchyListener2);
      
      defaultTitleEditor0.removeHierarchyListener((HierarchyListener) null);
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTitleEditor0.isFocusCycleRoot());
      assertFalse(defaultTitleEditor0.getIgnoreRepaint());
      assertTrue(defaultTitleEditor0.getFocusTraversalKeysEnabled());
      
      Insets insets0 = defaultTitleEditor0.getInsets();
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.bottom);
      assertEquals(0, insets0.right);
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTitleEditor0.isFocusCycleRoot());
      assertFalse(defaultTitleEditor0.getIgnoreRepaint());
      assertTrue(defaultTitleEditor0.getFocusTraversalKeysEnabled());
      assertNotNull(insets0);
      
      insets0.set(0, 1973, (-3397), 1);
      assertEquals((-3397), insets0.bottom);
      assertEquals(1973, insets0.left);
      assertEquals(0, insets0.top);
      assertEquals(1, insets0.right);
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTitleEditor0.isFocusCycleRoot());
      assertFalse(defaultTitleEditor0.getIgnoreRepaint());
      assertTrue(defaultTitleEditor0.getFocusTraversalKeysEnabled());
      
      Insets insets1 = defaultTitleEditor0.getInsets(insets0);
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.bottom);
      assertEquals(0, insets0.right);
      assertEquals(0, insets1.left);
      assertEquals(0, insets1.bottom);
      assertEquals(0, insets1.top);
      assertEquals(0, insets1.right);
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTitleEditor0.isFocusCycleRoot());
      assertFalse(defaultTitleEditor0.getIgnoreRepaint());
      assertTrue(defaultTitleEditor0.getFocusTraversalKeysEnabled());
      assertNotNull(insets1);
      assertSame(insets0, insets1);
      assertSame(insets1, insets0);
      
      Font font0 = defaultTitleEditor0.getTitleFont();
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicySet());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTitleEditor0.isFocusCycleRoot());
      assertFalse(defaultTitleEditor0.getIgnoreRepaint());
      assertTrue(defaultTitleEditor0.getFocusTraversalKeysEnabled());
      assertTrue(font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertNotNull(font0);
      
      // Undeclared exception!
      try { 
        defaultTitleEditor0.attemptPaintSelection();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Title title0 = mock(Title.class, new ViolatedAssumptionAnswer());
      DefaultTitleEditor defaultTitleEditor0 = null;
      try {
        defaultTitleEditor0 = new DefaultTitleEditor(title0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.title.Title$MockitoMock$1842335848 cannot be cast to org.jfree.chart.title.TextTitle
         //
         verifyException("org.jfree.chart.editor.DefaultTitleEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      assertTrue(compositeTitle0.visible);
      assertTrue(compositeTitle0.getNotify());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01);
      assertTrue(compositeTitle0.isVisible());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01);
      assertNull(compositeTitle0.getID());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
      assertNotNull(compositeTitle0);
      
      DefaultTitleEditor defaultTitleEditor0 = null;
      try {
        defaultTitleEditor0 = new DefaultTitleEditor(compositeTitle0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.title.CompositeTitle cannot be cast to org.jfree.chart.title.TextTitle
         //
         verifyException("org.jfree.chart.editor.DefaultTitleEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      assertTrue(dateTitle0.visible);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertTrue(dateTitle0.getNotify());
      assertTrue(dateTitle0.isVisible());
      assertNotNull(dateTitle0);
      
      DefaultTitleEditor defaultTitleEditor0 = new DefaultTitleEditor(dateTitle0);
      assertTrue(dateTitle0.visible);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertTrue(dateTitle0.getNotify());
      assertTrue(dateTitle0.isVisible());
      assertTrue(defaultTitleEditor0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTitleEditor0.isFocusCycleRoot());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTitleEditor0.getIgnoreRepaint());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicySet());
      assertNotNull(defaultTitleEditor0);
      
      Font font0 = defaultTitleEditor0.getTitleFont();
      assertTrue(dateTitle0.visible);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertTrue(dateTitle0.getNotify());
      assertTrue(dateTitle0.isVisible());
      assertTrue(defaultTitleEditor0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTitleEditor0.isFocusCycleRoot());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTitleEditor0.getIgnoreRepaint());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicySet());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertNotNull(font0);
      
      String string0 = defaultTitleEditor0.getTitleText();
      assertTrue(dateTitle0.visible);
      assertEquals("February 14, 2014", string0);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertTrue(dateTitle0.getNotify());
      assertTrue(dateTitle0.isVisible());
      assertTrue(defaultTitleEditor0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTitleEditor0.isFocusCycleRoot());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTitleEditor0.getIgnoreRepaint());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicySet());
      assertNotNull(string0);
      
      dateTitle0.setToolTipText("?1l22");
      assertTrue(dateTitle0.visible);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals("?1l22", dateTitle0.getToolTipText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertTrue(dateTitle0.getNotify());
      assertTrue(dateTitle0.isVisible());
      
      HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Font font1 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(font1.hasUniformLineMetrics());
      assertTrue(font1.isPlain());
      assertFalse(font1.isItalic());
      assertFalse(font1.isBold());
      assertEquals(0, font1.getStyle());
      assertFalse(font1.isTransformed());
      assertEquals(12, font1.getSize());
      assertEquals(12.0F, font1.getSize2D(), 0.01F);
      assertEquals("Default", font1.getName());
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.equals((Object)font0));
      assertNotNull(font1);
      assertNotSame(font1, font0);
      
      ActionEvent actionEvent0 = new ActionEvent(font0, 913, "cb0xVcaH6~}ebD", 913, 4);
      assertTrue(dateTitle0.visible);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals("?1l22", dateTitle0.getToolTipText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertTrue(dateTitle0.getNotify());
      assertTrue(dateTitle0.isVisible());
      assertTrue(defaultTitleEditor0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTitleEditor0.isFocusCycleRoot());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTitleEditor0.getIgnoreRepaint());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicySet());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("cb0xVcaH6~}ebD", actionEvent0.getActionCommand());
      assertEquals(4, actionEvent0.getModifiers());
      assertEquals(913, actionEvent0.getID());
      assertEquals(913L, actionEvent0.getWhen());
      assertFalse(font0.equals((Object)font1));
      assertNotNull(actionEvent0);
      
      String string1 = actionEvent0.paramString();
      assertTrue(dateTitle0.visible);
      assertEquals("unknown type,cmd=cb0xVcaH6~}ebD,when=913,modifiers=\u2318", string1);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals("?1l22", dateTitle0.getToolTipText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertTrue(dateTitle0.getNotify());
      assertTrue(dateTitle0.isVisible());
      assertTrue(defaultTitleEditor0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTitleEditor0.isFocusCycleRoot());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTitleEditor0.getIgnoreRepaint());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicySet());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("cb0xVcaH6~}ebD", actionEvent0.getActionCommand());
      assertEquals(4, actionEvent0.getModifiers());
      assertEquals(913, actionEvent0.getID());
      assertEquals(913L, actionEvent0.getWhen());
      assertFalse(font0.equals((Object)font1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(font0, font1);
      
      String string2 = actionEvent0.paramString();
      assertTrue(dateTitle0.visible);
      assertEquals("unknown type,cmd=cb0xVcaH6~}ebD,when=913,modifiers=\u2318", string2);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals("?1l22", dateTitle0.getToolTipText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertTrue(dateTitle0.getNotify());
      assertTrue(dateTitle0.isVisible());
      assertTrue(defaultTitleEditor0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTitleEditor0.isFocusCycleRoot());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTitleEditor0.getIgnoreRepaint());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicySet());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("cb0xVcaH6~}ebD", actionEvent0.getActionCommand());
      assertEquals(4, actionEvent0.getModifiers());
      assertEquals(913, actionEvent0.getID());
      assertEquals(913L, actionEvent0.getWhen());
      assertFalse(font0.equals((Object)font1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(font0, font1);
      
      defaultTitleEditor0.actionPerformed(actionEvent0);
      assertTrue(dateTitle0.visible);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals("?1l22", dateTitle0.getToolTipText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertTrue(dateTitle0.getNotify());
      assertTrue(dateTitle0.isVisible());
      assertTrue(defaultTitleEditor0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTitleEditor0.isFocusCycleRoot());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTitleEditor0.getIgnoreRepaint());
      assertFalse(defaultTitleEditor0.isFocusTraversalPolicySet());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals("Dialog", font0.getName());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("cb0xVcaH6~}ebD", actionEvent0.getActionCommand());
      assertEquals(4, actionEvent0.getModifiers());
      assertEquals(913, actionEvent0.getID());
      assertEquals(913L, actionEvent0.getWhen());
      assertFalse(font0.equals((Object)font1));
      assertNotSame(font0, font1);
      
      // Undeclared exception!
      try { 
        defaultTitleEditor0.attemptPaintSelection();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "General";
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("General");
      DefaultTitleEditor defaultTitleEditor0 = new DefaultTitleEditor(shortTextTitle0);
      defaultTitleEditor0.isPaintingTile();
      defaultTitleEditor0.getInputMap();
      int int0 = (-1809);
      defaultTitleEditor0.repaint(173, 0, (-1809), (-1809));
      // Undeclared exception!
      try { 
        defaultTitleEditor0.attemptPaintSelection();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-3264.86);
      GrayPaintScale grayPaintScale0 = null;
      try {
        grayPaintScale0 = new GrayPaintScale((-3264.86), 0.0, (-460));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires alpha in the range 0 to 255.
         //
         verifyException("org.jfree.chart.renderer.GrayPaintScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      PaintScale paintScale0 = xYShapeRenderer0.getPaintScale();
      String string0 = "Select...";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Select...");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      combinedDomainXYPlot0.getDomainAxis(500);
      PaintScaleLegend paintScaleLegend0 = null;
      try {
        paintScaleLegend0 = new PaintScaleLegend(paintScale0, (ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
