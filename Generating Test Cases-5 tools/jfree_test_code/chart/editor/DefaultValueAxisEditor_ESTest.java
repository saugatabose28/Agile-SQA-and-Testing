/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:29:27 GMT 2023
 */

package org.jfree.chart.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Label;
import java.awt.MultipleGradientPaint;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Shape;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetContext;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.MouseEvent;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.awt.image.IndexColorModel;
import java.awt.image.Raster;
import java.awt.image.SampleModel;
import java.awt.image.SinglePixelPackedSampleModel;
import java.awt.image.WritableRaster;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JSpinner;
import javax.swing.KeyStroke;
import javax.swing.SpinnerListModel;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.mock.javax.swing.filechooser.MockFileSystemView;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.editor.DefaultValueAxisEditor;
import org.jfree.chart.entity.ChartEntity;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.ui.Layer;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultValueAxisEditor_ESTest extends DefaultValueAxisEditor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setLowerBound(12.0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(valueAxis0);
      defaultValueAxisEditor0.getRootPane();
      defaultValueAxisEditor0.getMinimumValue();
      // Undeclared exception!
      try { 
        defaultValueAxisEditor0.attemptGridPaintSelection();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(33.0, 33.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      combinedDomainXYPlot0.setRangeCrosshairStroke(basicStroke0);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis();
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(valueAxis0);
      defaultValueAxisEditor0.getMinimumValue();
      ActionEvent actionEvent0 = new ActionEvent(cyclicNumberAxis0, 10, "D^[1<Nph$)@yOb[|");
      actionEvent0.setSource(valueAxis0);
      actionEvent0.setSource("D^[1<Nph$)@yOb[|");
      defaultValueAxisEditor0.actionPerformed(actionEvent0);
      actionEvent0.setSource(combinedDomainXYPlot0);
      defaultValueAxisEditor0.setAxisProperties(valueAxis0);
      actionEvent0.paramString();
      defaultValueAxisEditor0.actionPerformed(actionEvent0);
      defaultValueAxisEditor0.actionPerformed(actionEvent0);
      Label label0 = null;
      try {
        label0 = new Label("D^[1<Nph$)@yOb[|", (-2401));
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = 0;
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis(0);
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(valueAxis0);
      defaultValueAxisEditor0.getMaximumValue();
      defaultValueAxisEditor0.getAutoTickUnitSelectionCheckBox();
      defaultValueAxisEditor0.getMaximumValue();
      defaultValueAxisEditor0.toggleAutoRange();
      defaultValueAxisEditor0.createTickUnitPanel();
      SpinnerListModel spinnerListModel0 = null;
      try {
        spinnerListModel0 = new SpinnerListModel((List<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpinnerListModel(List) expects non-null non-empty List
         //
         verifyException("javax.swing.SpinnerListModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      jFreeChart0.setTitle("Stroke_Selection");
      thermometerPlot0.addChangeListener(jFreeChart0);
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(valueAxis0);
      defaultValueAxisEditor0.createTickUnitPanel();
      defaultValueAxisEditor0.focusGained((FocusEvent) null);
      defaultValueAxisEditor0.isAutoRange();
      defaultValueAxisEditor0.getAutoTickUnitSelectionCheckBox();
      int int0 = (-1298);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(4, (-1298), (byte[]) null, 5627, true, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Map size (-1298) must be >= 1
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis();
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(valueAxis0);
      defaultValueAxisEditor0.toggleAutoTick();
      defaultValueAxisEditor0.toggleAutoRange();
      defaultValueAxisEditor0.toggleAutoTick();
      defaultValueAxisEditor0.validateMaximum();
      FocusEvent focusEvent0 = new FocusEvent(defaultValueAxisEditor0, 0, false);
      focusEvent0.setSource(defaultValueAxisEditor0);
      defaultValueAxisEditor0.focusLost(focusEvent0);
      defaultValueAxisEditor0.createTickUnitPanel();
      defaultValueAxisEditor0.focusLost(focusEvent0);
      // Undeclared exception!
      try { 
        defaultValueAxisEditor0.attemptGridStrokeSelection();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis();
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(valueAxis0);
      defaultValueAxisEditor0.toggleAutoRange();
      StyledEditorKit.FontFamilyAction styledEditorKit_FontFamilyAction0 = new StyledEditorKit.FontFamilyAction("Minimum_range_value", "Minimum_range_value");
      KeyStroke.getKeyStroke("org.jfree.chart.axis.LogarithmicAxis");
      // Undeclared exception!
      try { 
        defaultValueAxisEditor0.registerKeyboardAction((ActionListener) styledEditorKit_FontFamilyAction0, (KeyStroke) null, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must be one of JComponent.WHEN_IN_FOCUSED_WINDOW, JComponent.WHEN_FOCUSED or JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        defaultValueAxisEditor0.attemptGridStrokeSelection();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "\u0005KLuf 6~g?v(");
      CyclicNumberAxis.DEFAULT_ADVANCE_LINE_STROKE = cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE;
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        defaultValueAxisEditor0.focusLost((FocusEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultValueAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultValueAxisEditor defaultValueAxisEditor0 = null;
      try {
        defaultValueAxisEditor0 = new DefaultValueAxisEditor((ValueAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(valueAxis0);
      defaultValueAxisEditor0.getMinimumValue();
      defaultValueAxisEditor0.validateMaximum();
      defaultValueAxisEditor0.getMinimumValue();
      thermometerPlot0.setRange((-2.2167779267), 0.0);
      defaultValueAxisEditor0.setAutoTickUnitSelection(false);
      defaultValueDataset0.hasListener(defaultValueAxisEditor0);
      defaultValueAxisEditor0.setAutoTickUnitSelection(true);
      defaultValueAxisEditor0.isAutoRange();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(valueAxis0).getLabel();
      doReturn((Font) null).when(valueAxis0).getLabelFont();
      doReturn((RectangleInsets) null).when(valueAxis0).getLabelInsets();
      doReturn((Paint) null).when(valueAxis0).getLabelPaint();
      doReturn((Font) null).when(valueAxis0).getTickLabelFont();
      doReturn((RectangleInsets) null).when(valueAxis0).getTickLabelInsets();
      doReturn((Paint) null).when(valueAxis0).getTickLabelPaint();
      doReturn(false).when(valueAxis0).isTickLabelsVisible();
      doReturn(false).when(valueAxis0).isTickMarksVisible();
      doReturn(0.0).when(valueAxis0).getLowerBound();
      doReturn(0.0).when(valueAxis0).getUpperBound();
      doReturn(false).when(valueAxis0).isAutoRange();
      doReturn(false).when(valueAxis0).isAutoTickUnitSelection();
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(valueAxis0);
      defaultValueAxisEditor0.createVolatileImage(500, 500);
      defaultValueAxisEditor0.getComponentPopupMenu();
      defaultValueAxisEditor0.getGraphicsConfiguration();
      defaultValueAxisEditor0.prepareImage((Image) null, (ImageObserver) null);
      defaultValueAxisEditor0.getVetoableChangeListeners();
      defaultValueAxisEditor0.getMaximumValue();
      // Undeclared exception!
      try { 
        defaultValueAxisEditor0.attemptGridPaintSelection();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(logAxis0);
      defaultValueAxisEditor0.getMaximumValue();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValueAxis valueAxis0 = mock(ValueAxis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(valueAxis0).getLabel();
      doReturn((Font) null).when(valueAxis0).getLabelFont();
      doReturn((RectangleInsets) null).when(valueAxis0).getLabelInsets();
      doReturn((Paint) null).when(valueAxis0).getLabelPaint();
      doReturn((Font) null).when(valueAxis0).getTickLabelFont();
      doReturn((RectangleInsets) null).when(valueAxis0).getTickLabelInsets();
      doReturn((Paint) null).when(valueAxis0).getTickLabelPaint();
      doReturn(false).when(valueAxis0).isTickLabelsVisible();
      doReturn(false).when(valueAxis0).isTickMarksVisible();
      doReturn(0.0).when(valueAxis0).getLowerBound();
      doReturn(0.0).when(valueAxis0).getUpperBound();
      doReturn(false).when(valueAxis0).isAutoRange();
      doReturn(false).when(valueAxis0).isAutoTickUnitSelection();
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(valueAxis0);
      defaultValueAxisEditor0.getAutoTickUnitSelectionCheckBox();
      defaultValueAxisEditor0.getLabel();
      defaultValueAxisEditor0.getGraphics();
      defaultValueAxisEditor0.update((Graphics) null);
      FocusEvent focusEvent0 = mock(FocusEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(focusEvent0).getSource();
      defaultValueAxisEditor0.isTickMarksVisible();
      defaultValueAxisEditor0.setToolTipText("");
      defaultValueAxisEditor0.repaint((long) 500);
      defaultValueAxisEditor0.firePropertyChange("", true, false);
      defaultValueAxisEditor0.focusLost(focusEvent0);
      defaultValueAxisEditor0.requestFocus();
      // Undeclared exception!
      try { 
        defaultValueAxisEditor0.setAxisProperties((Axis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(valueAxis0);
      ActionEvent actionEvent0 = new ActionEvent(defaultValueAxisEditor0, 0, "org.jfree.chart.renderer.xy.StackedXYBarRenderer", 3, (-963));
      // Undeclared exception!
      try { 
        MultipleGradientPaint.ColorSpaceType.valueOf("M&JJr@`$2**%er:M:\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.awt.MultipleGradientPaint.ColorSpaceType.M&JJr@`$2**%er:M:\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(cyclicNumberAxis0);
      defaultValueAxisEditor0.setAxisProperties(cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(cyclicNumberAxis0);
      FocusEvent focusEvent0 = new FocusEvent(defaultValueAxisEditor0, (-317), false, defaultValueAxisEditor0);
      defaultValueAxisEditor0.focusLost(focusEvent0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxisForDataset(3);
      DefaultValueAxisEditor defaultValueAxisEditor0 = null;
      try {
        defaultValueAxisEditor0 = new DefaultValueAxisEditor((ValueAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultValueAxisEditor defaultValueAxisEditor0 = null;
      try {
        defaultValueAxisEditor0 = new DefaultValueAxisEditor((ValueAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      String string0 = "";
      String string1 = "";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1), "", (-1), (-1), 0, (-1), (-1), (-1), 0, (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2739.5155918), 0.0, "*55PzbWPzT3");
      cyclicNumberAxis0.setTickLabelFont(logAxis0.DEFAULT_TICK_LABEL_FONT);
      AxisLabelLocation axisLabelLocation0 = cyclicNumberAxis0.getLabelLocation();
      logAxis0.setLabelLocation(axisLabelLocation0);
      DefaultValueAxisEditor defaultValueAxisEditor0 = new DefaultValueAxisEditor(logAxis0);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      defaultValueAxisEditor0.addInputMethodListener((InputMethodListener) null);
      defaultValueAxisEditor0.getAutoTickUnitSelectionCheckBox();
      defaultValueAxisEditor0.validateMinimum();
      defaultValueAxisEditor0.isAutoRange();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05);
      cyclicNumberAxis1.setNegativeArrowVisible(false);
      logAxis0.setVisible(true);
      ActionEvent actionEvent0 = new ActionEvent(cyclicNumberAxis1, 0, "*5+nbaH8i-8$", 500, 2169);
      actionEvent0.setSource(defaultValueAxisEditor0);
      defaultValueAxisEditor0.actionPerformed(actionEvent0);
      defaultValueAxisEditor0.isAutoRange();
      defaultValueAxisEditor0.validateMaximum();
      defaultValueAxisEditor0.isAutoTickUnitSelection();
      defaultValueAxisEditor0.isAutoTickUnitSelection();
      JCheckBox jCheckBox0 = defaultValueAxisEditor0.getAutoTickUnitSelectionCheckBox();
      defaultValueAxisEditor0.toggleAutoTick();
      defaultValueAxisEditor0.setAutoTickUnitSelectionCheckBox(jCheckBox0);
      defaultValueAxisEditor0.setAutoTickUnitSelection(false);
      // Undeclared exception!
      try { 
        defaultValueAxisEditor0.attemptGridPaintSelection();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      combinedDomainCategoryPlot0.getRangeAxis();
      DefaultValueAxisEditor defaultValueAxisEditor0 = null;
      try {
        defaultValueAxisEditor0 = new DefaultValueAxisEditor((ValueAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = 4;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setUseSubrangePaint(false);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      // Undeclared exception!
      try { 
        Plot.resolveRangeAxisLocation((AxisLocation) null, plotOrientation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "RK(";
      DateAxis dateAxis0 = new DateAxis("RK(");
      // Undeclared exception!
      try { 
        dateAxis0.setAutoRangeMinimumSize(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.notifyListeners((PlotChangeEvent) null);
      combinedDomainXYPlot0.getDomainAxis((-3160));
      DefaultValueAxisEditor defaultValueAxisEditor0 = null;
      try {
        defaultValueAxisEditor0 = new DefaultValueAxisEditor((ValueAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultAxisEditor", e);
      }
  }
}
