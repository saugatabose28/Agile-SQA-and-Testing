/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:59:09 GMT 2023
 */

package org.jfree.chart.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.text.Format;
import java.util.Locale;
import javax.swing.JFormattedTextField;
import javax.swing.JList;
import javax.swing.JTabbedPane;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.text.DefaultFormatter;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnit;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.editor.DefaultPolarPlotEditor;
import org.jfree.chart.entity.ChartEntity;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.PolarItemRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultPolarPlotEditor_ESTest extends DefaultPolarPlotEditor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarPlotEditor defaultPolarPlotEditor0 = new DefaultPolarPlotEditor(polarPlot0);
      defaultPolarPlotEditor0.getHierarchyListeners();
      boolean boolean0 = true;
      defaultPolarPlotEditor0.getFocusTraversalPolicy();
      defaultPolarPlotEditor0.setRequestFocusEnabled(true);
      FocusEvent focusEvent0 = null;
      Locale locale0 = defaultPolarPlotEditor0.getLocale();
      locale0.getScript();
      defaultPolarPlotEditor0.setLocale(locale0);
      // Undeclared exception!
      try { 
        defaultPolarPlotEditor0.focusLost((FocusEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultPolarPlotEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarPlotEditor defaultPolarPlotEditor0 = new DefaultPolarPlotEditor(polarPlot0);
      ActionEvent actionEvent0 = new ActionEvent(polarPlot0, 0, "");
      defaultPolarPlotEditor0.actionPerformed(actionEvent0);
      FocusEvent focusEvent0 = new FocusEvent(defaultPolarPlotEditor0, 1861);
      defaultPolarPlotEditor0.focusGained(focusEvent0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarPlotEditor defaultPolarPlotEditor0 = new DefaultPolarPlotEditor(polarPlot0);
      ActionEvent actionEvent0 = new ActionEvent(polarPlot0, 10, (String) null);
      // Undeclared exception!
      try { 
        defaultPolarPlotEditor0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      LogAxis logAxis0 = new LogAxis("b'ME");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      combinedRangeCategoryPlot0.getRangeAxis(500);
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getRenderer();
      PolarPlot polarPlot1 = new PolarPlot(xYTaskDataset0, (ValueAxis) null, (PolarItemRenderer) null);
      DefaultPolarPlotEditor defaultPolarPlotEditor0 = new DefaultPolarPlotEditor(polarPlot1);
      // Undeclared exception!
      try { 
        defaultPolarPlotEditor0.updatePlotProperties(combinedRangeCategoryPlot0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.CombinedRangeCategoryPlot cannot be cast to org.jfree.chart.plot.PolarPlot
         //
         verifyException("org.jfree.chart.editor.DefaultPolarPlotEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarPlotEditor defaultPolarPlotEditor0 = new DefaultPolarPlotEditor(polarPlot0);
      JFreeChart jFreeChart0 = new JFreeChart("5!", polarPlot0);
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent(polarPlot0, jFreeChart0, 10, 15);
      JFreeChart jFreeChart1 = chartProgressEvent0.getChart();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultTreeCellRenderer0, 172, 2, 0, 0, 10, 2, true, 2002, 0, 0);
      PolarChartPanel polarChartPanel0 = new PolarChartPanel(jFreeChart0);
      polarChartPanel0.getEntityForPoint(1555, 3054);
      ChartMouseEvent chartMouseEvent0 = new ChartMouseEvent(jFreeChart1, mouseWheelEvent0, (ChartEntity) null);
      JFreeChart jFreeChart2 = chartMouseEvent0.getChart();
      polarPlot0.setChart(jFreeChart2);
      FocusEvent focusEvent0 = new FocusEvent(defaultPolarPlotEditor0, 10);
      focusEvent0.paramString();
      defaultPolarPlotEditor0.focusLost(focusEvent0);
      // Undeclared exception!
      try { 
        defaultPolarPlotEditor0.updatePlotProperties((Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultPlotEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PolarPlot polarPlot0 = mock(PolarPlot.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null).when(polarPlot0).getBackgroundPaint();
      doReturn((RectangleInsets) null).when(polarPlot0).getInsets();
      doReturn((Paint) null).when(polarPlot0).getOutlinePaint();
      doReturn((Stroke) null).when(polarPlot0).getOutlineStroke();
      doReturn(0.0).when(polarPlot0).getAngleOffset();
      doReturn((TickUnit) null).when(polarPlot0).getAngleTickUnit();
      doReturn((ValueAxis) null).when(polarPlot0).getAxis();
      doReturn((String) null).when(polarPlot0).getPlotType();
      DefaultPolarPlotEditor defaultPolarPlotEditor0 = null;
      try {
        defaultPolarPlotEditor0 = new DefaultPolarPlotEditor(polarPlot0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultPolarPlotEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarPlotEditor defaultPolarPlotEditor0 = new DefaultPolarPlotEditor(polarPlot0);
      defaultPolarPlotEditor0.validateAngleOffset();
      MultiListUI multiListUI0 = new MultiListUI();
      JList<String> jList0 = new JList<String>();
      // Undeclared exception!
      try { 
        multiListUI0.getAccessibleChild(defaultPolarPlotEditor0, (-646));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarPlotEditor defaultPolarPlotEditor0 = new DefaultPolarPlotEditor(polarPlot0);
      Class<PolarPlot> class0 = PolarPlot.class;
      defaultPolarPlotEditor0.getListeners(class0);
      polarPlot0.zoom((-1799.529374049));
      defaultPolarPlotEditor0.updatePlotProperties(polarPlot0);
      defaultPolarPlotEditor0.validateAngleOffset();
      JTabbedPane jTabbedPane0 = defaultPolarPlotEditor0.createPlotTabs(polarPlot0);
      defaultPolarPlotEditor0.validateAngleOffset();
      Point point0 = new Point(0, 1512);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((Format) mockSimpleDateFormat0);
      Dimension dimension0 = jFormattedTextField0.getPreferredSize();
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      defaultPolarPlotEditor0.computeVisibleRect(rectangle0);
      FocusEvent focusEvent0 = new FocusEvent(defaultPolarPlotEditor0, 0, false, jTabbedPane0);
      defaultPolarPlotEditor0.focusLost(focusEvent0);
      defaultPolarPlotEditor0.validateTickUnit();
      defaultPolarPlotEditor0.validateAngleOffset();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "e~~<p";
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("uv~\"o7P", "uv~\"o7P", "uv~\"o7P", "e~~<p");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "zOb";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = "";
      stringArray0[3] = "";
      stringArray0[4] = "org.jfree.chart.editor.DefaultPolarPlotEditor";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.resizeRange(45.0);
      polarPlot0.getDataRange(symbolAxis0);
      polarPlot0.getDatasetCount();
      DefaultPolarPlotEditor defaultPolarPlotEditor0 = new DefaultPolarPlotEditor(polarPlot0);
      DefaultFormatter defaultFormatter0 = new DefaultFormatter();
      DefaultFormatterFactory defaultFormatterFactory0 = new DefaultFormatterFactory(defaultFormatter0, defaultFormatter0);
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField(defaultFormatterFactory0, "");
      jFormattedTextField0.setFocusable(true);
      defaultPolarPlotEditor0.getClientProperty(jFormattedTextField0);
      defaultPolarPlotEditor0.createPlotTabs(polarPlot0);
      defaultPolarPlotEditor0.updatePlotProperties(polarPlot0);
      defaultPolarPlotEditor0.validateAngleOffset();
      defaultPolarPlotEditor0.createPlotTabs(polarPlot0);
      FocusEvent focusEvent0 = new FocusEvent(defaultPolarPlotEditor0, 0, true, jFormattedTextField0);
      defaultPolarPlotEditor0.focusGained(focusEvent0);
      defaultPolarPlotEditor0.validateAngleOffset();
      defaultPolarPlotEditor0.validateAngleOffset();
      defaultPolarPlotEditor0.focusLost(focusEvent0);
      defaultPolarPlotEditor0.validateTickUnit();
      MockFile mockFile0 = new MockFile("org.jfree.chart.editor.DefaultPolarPlotEditor");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      PeriodAxis periodAxis0 = new PeriodAxis("f{OW>@{CppC|'");
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getRenderer(4);
      PolarPlot polarPlot1 = new PolarPlot(defaultTableXYDataset0, periodAxis0, (PolarItemRenderer) null);
      DefaultPolarPlotEditor defaultPolarPlotEditor0 = new DefaultPolarPlotEditor(polarPlot1);
      defaultPolarPlotEditor0.validateTickUnit();
      defaultPolarPlotEditor0.validateTickUnit();
      defaultPolarPlotEditor0.updatePlotProperties(polarPlot1);
      defaultPolarPlotEditor0.validateAngleOffset();
      FocusEvent focusEvent0 = new FocusEvent(defaultPolarPlotEditor0, (-1135), true, defaultPolarPlotEditor0);
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(83);
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Plot.resolveRangeAxisLocation(axisLocation1, plotOrientation0);
      defaultPolarPlotEditor0.focusLost(focusEvent0);
      defaultPolarPlotEditor0.updatePlotProperties(polarPlot0);
      defaultPolarPlotEditor0.validateAngleOffset();
      defaultPolarPlotEditor0.validateTickUnit();
      defaultPolarPlotEditor0.validateTickUnit();
      defaultPolarPlotEditor0.validateTickUnit();
      assertFalse(defaultPolarPlotEditor0.isFocusTraversalPolicySet());
  }
}
