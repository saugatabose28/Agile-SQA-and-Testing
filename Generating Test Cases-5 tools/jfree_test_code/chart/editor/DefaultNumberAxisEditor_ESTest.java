/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:28:33 GMT 2023
 */

package org.jfree.chart.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.TexturePaint;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferShort;
import java.awt.image.IndexColorModel;
import java.awt.image.Raster;
import java.awt.image.SampleModel;
import java.awt.image.SinglePixelPackedSampleModel;
import java.awt.image.WritableRaster;
import java.sql.Connection;
import java.time.format.TextStyle;
import java.util.Hashtable;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JLayeredPane;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.LineBorder;
import org.jfree.chart.editor.DefaultNumberAxisEditor;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNumberAxisEditor_ESTest extends DefaultNumberAxisEditor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Color color0 = Color.GREEN;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(color0, color0, color0, color0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-338.52933F);
      floatArray0[2] = (-1314.255F);
      floatArray0[3] = 1273.9F;
      floatArray0[4] = 1250.66F;
      floatArray0[5] = 2.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      color0.getColorComponents(floatArray0);
      waterfallBarRenderer0.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      ModuloAxis moduloAxis0 = new ModuloAxis("org.jfree.data.time.Millisecond", (Range) null);
      moduloAxis0.clone();
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(moduloAxis0);
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.setAxisProperties(moduloAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.141592653589793, (-3099.9249205011));
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      defaultNumberAxisEditor0.toggleAutoTick();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      defaultNumberAxisEditor0.requestFocus(false);
      combinedDomainCategoryPlot0.getRangeAxisForDataset(0);
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.setAxisProperties((Axis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(864.675271388, 864.675271388);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      defaultNumberAxisEditor0.toggleAutoTick();
      Integer integer0 = new Integer((-2820));
      ActionEvent actionEvent0 = new ActionEvent(integer0, 0, "TickUnitValue", 0, 500);
      defaultNumberAxisEditor0.actionPerformed(actionEvent0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(",l=");
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(logarithmicAxis0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      logarithmicAxis0.resizeRange2(2743L, (-1522.81985812));
      ActionEvent actionEvent0 = new ActionEvent(integer0, 500, "AutoTickOnOff", 2743L, 500);
      actionEvent0.paramString();
      logarithmicAxis0.setLowerMargin(2692.11559419);
      defaultNumberAxisEditor0.actionPerformed(actionEvent0);
      defaultNumberAxisEditor0.setAxisProperties(logarithmicAxis0);
      defaultNumberAxisEditor0.validateTickUnit();
      defaultNumberAxisEditor0.validateTickUnit();
      Object object0 = new Object();
      ActionEvent actionEvent1 = new ActionEvent(object0, 500, "AutoTickOnOff", 500);
      defaultNumberAxisEditor0.actionPerformed(actionEvent1);
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      textStyle0.asStandalone();
      ActionEvent actionEvent2 = new ActionEvent(textStyle0, 500, "", 1822);
      actionEvent2.paramString();
      defaultNumberAxisEditor0.actionPerformed(actionEvent2);
      FocusEvent focusEvent0 = new FocusEvent(defaultNumberAxisEditor0, 1822, true);
      defaultNumberAxisEditor0.focusLost(focusEvent0);
      defaultNumberAxisEditor0.focusLost(focusEvent0);
      defaultNumberAxisEditor0.createTickUnitPanel();
      defaultNumberAxisEditor0.focusLost(focusEvent0);
      defaultNumberAxisEditor0.validateTickUnit();
      defaultNumberAxisEditor0.createTickUnitPanel();
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.focusLost((FocusEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultValueAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("!@b'?0M{$}8R6");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      Stroke stroke0 = combinedDomainXYPlot0.getRangeMinorGridlineStroke();
      LineBorder lineBorder0 = new LineBorder(thermometerPlot0.DEFAULT_OUTLINE_PAINT, stroke0, combinedDomainXYPlot0.DEFAULT_INSETS);
      Stroke stroke1 = lineBorder0.getStroke();
      thermometerPlot0.setThermometerStroke(stroke1);
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.annotations.XYTextAnnotation");
      Range range0 = thermometerPlot0.getDataRange(dateAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Manual_TickUnit_value", range0);
      Range.expand(range0, 0.0F, (-635.1978));
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(moduloAxis0);
      defaultNumberAxisEditor0.getHeight();
      defaultNumberAxisEditor0.createTickUnitPanel();
      defaultNumberAxisEditor0.toggleAutoTick();
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.setAxisProperties(dateAxis0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.axis.DateAxis cannot be cast to org.jfree.chart.axis.NumberAxis
         //
         verifyException("org.jfree.chart.editor.DefaultNumberAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-915.767042027818), "1+ZsH>");
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      defaultNumberAxisEditor0.getWidth();
      ActionEvent actionEvent0 = new ActionEvent(cyclicNumberAxis0, 500, (String) null);
      actionEvent0.paramString();
      actionEvent0.setSource((Object) null);
      defaultNumberAxisEditor0.getClientProperty("unknown type,cmd=null,when=0,modifiers=");
      actionEvent0.setSource((Object) null);
      cyclicNumberAxis0.setAdvanceLineVisible(false);
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "{5H[EKg";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(symbolAxis0);
      defaultNumberAxisEditor0.setAxisProperties(symbolAxis0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberAxis numberAxis0 = mock(NumberAxis.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(numberAxis0).getLabel();
      doReturn((Font) null).when(numberAxis0).getLabelFont();
      doReturn((RectangleInsets) null).when(numberAxis0).getLabelInsets();
      doReturn((Paint) null).when(numberAxis0).getLabelPaint();
      doReturn((Font) null).when(numberAxis0).getTickLabelFont();
      doReturn((RectangleInsets) null).when(numberAxis0).getTickLabelInsets();
      doReturn((Paint) null).when(numberAxis0).getTickLabelPaint();
      doReturn(false).when(numberAxis0).isTickLabelsVisible();
      doReturn(false).when(numberAxis0).isTickMarksVisible();
      doReturn((NumberTickUnit) null).when(numberAxis0).getTickUnit();
      doReturn(0.0).when(numberAxis0).getLowerBound();
      doReturn(0.0).when(numberAxis0).getUpperBound();
      doReturn(false).when(numberAxis0).isAutoRange();
      doReturn(false).when(numberAxis0).isAutoTickUnitSelection();
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = null;
      try {
        defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultNumberAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.jfree.chart.util.StrokeList";
      stringArray0[1] = "org.jfree.chart.util.StrokeList";
      stringArray0[2] = "org.jfree.chart.util.StrokeList";
      stringArray0[3] = "org.jfree.chart.util.StrokeList";
      stringArray0[4] = "uC:M6,Ej5^YH6t+";
      stringArray0[5] = "org.jfree.chart.util.StrokeList";
      SymbolAxis symbolAxis0 = new SymbolAxis("org.jfree.chart.util.StrokeList", stringArray0);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(symbolAxis0);
      defaultNumberAxisEditor0.firePropertyChange("BcvM", 2.0F, 2.0F);
      defaultNumberAxisEditor0.setVerifyInputWhenFocusTarget(true);
      FocusEvent focusEvent0 = new FocusEvent(defaultNumberAxisEditor0, 500, true, defaultNumberAxisEditor0);
      symbolAxis0.setInverted(true);
      defaultNumberAxisEditor0.focusLost(focusEvent0);
      defaultNumberAxisEditor0.toggleAutoTick();
      focusEvent0.getOppositeComponent();
      defaultNumberAxisEditor0.toggleAutoTick();
      defaultNumberAxisEditor0.focusLost(focusEvent0);
      defaultNumberAxisEditor0.toggleAutoTick();
      defaultNumberAxisEditor0.focusLost(focusEvent0);
      defaultNumberAxisEditor0.toggleAutoTick();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      defaultNumberAxisEditor0.getClientProperty(integer0);
      defaultNumberAxisEditor0.isFocusOwner();
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 500, "uC:M6,Ej5^YH6t+", (-2611L), 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      JViewport jViewport0 = new JViewport();
      Point point0 = new Point();
      Point point1 = jViewport0.toViewCoordinates(point0);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.findSubplot((PlotRenderingInfo) null, point1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis0);
      defaultNumberAxisEditor0.setAxisProperties(numberAxis0);
      FocusEvent focusEvent0 = new FocusEvent(defaultNumberAxisEditor0, 0);
      focusEvent0.paramString();
      defaultNumberAxisEditor0.focusLost(focusEvent0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = null;
      try {
        defaultNumberAxisEditor0 = new DefaultNumberAxisEditor((NumberAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      BorderLayout borderLayout0 = new BorderLayout();
      ImageIcon imageIcon0 = new ImageIcon("I3PH%4i");
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("I3PH%4i", imageIcon0);
      Dimension dimension0 = borderLayout0.preferredLayoutSize(jCheckBoxMenuItem0);
      defaultNumberAxisEditor0.getToolkit();
      defaultNumberAxisEditor0.setMinimumSize(dimension0);
      defaultNumberAxisEditor0.setAxisProperties(cyclicNumberAxis0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.setDefaultSeriesVisibleInLegend(false, false);
      jCheckBoxMenuItem0.setVisible(true);
      Font font0 = defaultPolarItemRenderer0.getDefaultItemLabelFont();
      dimension0.height = 500;
      jCheckBoxMenuItem0.isDoubleBuffered();
      cyclicNumberAxis0.setLabelFont(font0);
      ActionEvent actionEvent0 = new ActionEvent(defaultNumberAxisEditor0, 500, "");
      actionEvent0.paramString();
      defaultNumberAxisEditor0.getFocusListeners();
      actionEvent0.paramString();
      defaultNumberAxisEditor0.actionPerformed(actionEvent0);
      defaultNumberAxisEditor0.createTickUnitPanel();
      defaultPolarItemRenderer0.setAutoPopulateSeriesOutlinePaint(true);
      defaultNumberAxisEditor0.createTickUnitPanel();
      cyclicNumberAxis0.setLabelFont(defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_FONT);
      FocusEvent focusEvent0 = new FocusEvent(defaultNumberAxisEditor0, 500, false);
      focusEvent0.getOppositeComponent();
      defaultNumberAxisEditor0.focusLost(focusEvent0);
      defaultNumberAxisEditor0.toggleAutoTick();
      defaultNumberAxisEditor0.toggleAutoTick();
      defaultNumberAxisEditor0.setAxisProperties(cyclicNumberAxis0);
      defaultNumberAxisEditor0.setAxisProperties(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.25, "#-B@Q^.gE0");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      combinedDomainXYPlot0.getDomainAxisLocation(500);
      combinedDomainXYPlot0.getDataRange(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setDefaultAutoRange((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-4910.867477467), "C>");
      cyclicNumberAxis0.setTickMarkOutsideLength(0.0F);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      defaultNumberAxisEditor0.validateTickUnit();
      assertFalse(defaultNumberAxisEditor0.isFocusCycleRoot());
  }
}
