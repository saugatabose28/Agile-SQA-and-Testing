/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:19:09 GMT 2023
 */

package org.jfree.data.gantt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.gantt.Task;
import org.jfree.data.gantt.TaskSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TaskSeries_ESTest extends TaskSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("org.jfree.data.gantt.TaskSeries");
      // Undeclared exception!
      try { 
        taskSeries0.get((-781));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TaskSeries taskSeries0 = null;
      try {
        taskSeries0 = new TaskSeries((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("6`u");
      int int0 = taskSeries0.getItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("]Y:NY&5;ca/ZN4ta0'");
      TaskSeries taskSeries1 = new TaskSeries("Ox");
      boolean boolean0 = taskSeries0.equals(taskSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("6`u");
      Object object0 = taskSeries0.clone();
      boolean boolean0 = taskSeries0.equals(object0);
      assertNotSame(object0, taskSeries0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("6`u");
      boolean boolean0 = taskSeries0.equals(taskSeries0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("XCD=D>");
      boolean boolean0 = taskSeries0.equals("XCD=D>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("6`u");
      Task task0 = taskSeries0.get("6`u");
      assertNull(task0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("TbDE #]rxs6bf9Ku52]");
      // Undeclared exception!
      try { 
        taskSeries0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("6`u");
      taskSeries0.remove((Task) null);
      assertTrue(taskSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("");
      // Undeclared exception!
      try { 
        taskSeries0.add((Task) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'task' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("");
      taskSeries0.removeAll();
      assertNull(taskSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("");
      List list0 = taskSeries0.getTasks();
      assertTrue(list0.isEmpty());
  }
}
