/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:35:32 GMT 2023
 */

package org.jfree.data.gantt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EventListener;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.StandardChartTheme;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlidingGanttCategoryDataset_ESTest extends SlidingGanttCategoryDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 5;
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(ganttCategoryDataset0).toString();
      doReturn(0, 0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getColumnKey(anyInt());
      doReturn(0, 0, 0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(10, 0).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getEndValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 1756);
      slidingGanttCategoryDataset0.getPercentComplete(1756, 0, (-3158));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 0, 0);
      slidingGanttCategoryDataset0.getEndValue((-3158), (-3158));
      slidingGanttCategoryDataset1.getColumnKey(1756);
      slidingGanttCategoryDataset1.validateObject();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset2 = (SlidingGanttCategoryDataset)slidingGanttCategoryDataset1.clone();
      slidingGanttCategoryDataset1.getRowIndex((Comparable) null);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset3 = (SlidingGanttCategoryDataset)slidingGanttCategoryDataset1.getUnderlyingDataset();
      slidingGanttCategoryDataset3.getPercentComplete((Comparable) null, (Comparable) "0xFFFFBF");
      slidingGanttCategoryDataset2.clone();
      slidingGanttCategoryDataset0.getUnderlyingDataset();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset1.getEndValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(3594).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(3594).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(3594).when(ganttCategoryDataset0).getColumnCount();
      Comparable<StandardChartTheme> comparable0 = (Comparable<StandardChartTheme>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1, 105);
      slidingGanttCategoryDataset0.getUnderlyingDataset();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 2546, 20);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset1.getStartValue((Comparable) comparable0, (Comparable) "H[6zmyl6;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: H[6zmyl6;
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(ganttCategoryDataset0).getEndValue(anyInt() , anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 622, 3329);
      slidingGanttCategoryDataset0.getEndValue(3672, (-1296), 0);
      GanttCategoryDataset ganttCategoryDataset1 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset1).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset1).getColumnKey(anyInt());
      doReturn(0).when(ganttCategoryDataset1).getRowIndex(any(java.lang.Comparable.class));
      doReturn(1).when(ganttCategoryDataset1).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset1).getEndValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset1).getPercentComplete(anyInt() , anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(ganttCategoryDataset1, 0, 1756);
      slidingGanttCategoryDataset1.getPercentComplete(1756, 0, (-3158));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset2 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset1, 0, 0);
      slidingGanttCategoryDataset1.getEndValue((-3158), (-3158));
      slidingGanttCategoryDataset2.getColumnKey(1756);
      slidingGanttCategoryDataset2.validateObject();
      slidingGanttCategoryDataset2.clone();
      slidingGanttCategoryDataset2.getRowIndex((Comparable) null);
      GanttCategoryDataset ganttCategoryDataset2 = slidingGanttCategoryDataset2.getUnderlyingDataset();
      ((SlidingGanttCategoryDataset) ganttCategoryDataset2).getColumnIndex("0xFFFFBF");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 0);
      int int0 = 0;
      int int1 = (-2639);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.setFirstCategoryIndex(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(298, 298, 0).when(ganttCategoryDataset0).getColumnCount();
      doReturn(0).when(ganttCategoryDataset0).getRowCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 3);
      slidingGanttCategoryDataset0.getColumnCount();
      slidingGanttCategoryDataset0.setMaximumCategoryCount(3);
      slidingGanttCategoryDataset0.setFirstCategoryIndex(3);
      slidingGanttCategoryDataset0.getStartValue(0, 0);
      slidingGanttCategoryDataset0.getRowCount();
      slidingGanttCategoryDataset0.getColumnKeys();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt() , anyInt());
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      int int1 = 0;
      Number number0 = slidingGanttCategoryDataset0.getStartValue(0, 0);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
      
      Number number1 = slidingGanttCategoryDataset0.getStartValue(0, 0, 0);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number1);
      
      int int2 = slidingGanttCategoryDataset0.getRowCount();
      assertEquals(0, int2);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getEndValue(anyInt() , anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt() , anyInt());
      int int0 = (-2321);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 2423, (-2321));
      int int1 = (-126);
      slidingGanttCategoryDataset0.getPercentComplete((-126), 2423, (-2372));
      int int2 = (-2488);
      DatasetGroup datasetGroup0 = slidingGanttCategoryDataset0.getGroup();
      slidingGanttCategoryDataset0.setGroup(datasetGroup0);
      slidingGanttCategoryDataset0.getEndValue((-2488), (-126), 722);
      slidingGanttCategoryDataset0.getStartValue((-126), 1);
      slidingGanttCategoryDataset0.getFirstCategoryIndex();
      String string0 = "_*u7=*\"e6S|gM4|E#A";
      slidingGanttCategoryDataset0.equals("_*u7=*\"e6S|gM4|E#A");
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue((Comparable) "_*u7=*\"e6S|gM4|E#A", (Comparable) "_*u7=*\"e6S|gM4|E#A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: _*u7=*\"e6S|gM4|E#A
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-1344);
      Comparable<SlidingGanttCategoryDataset> comparable0 = (Comparable<SlidingGanttCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = 1;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1344), (-1344));
      Comparable<SlidingGanttCategoryDataset> comparable1 = (Comparable<SlidingGanttCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue(comparable0, comparable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 5;
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(ganttCategoryDataset0).toString();
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getColumnKey(anyInt());
      doReturn(0, 0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(1).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null, (Number) null).when(ganttCategoryDataset0).getEndValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 1756);
      slidingGanttCategoryDataset0.getPercentComplete(1756, 0, (-3158));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 0, 0);
      slidingGanttCategoryDataset0.getEndValue((-3158), (-3158));
      slidingGanttCategoryDataset1.getColumnKey(1756);
      slidingGanttCategoryDataset1.validateObject();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset2 = (SlidingGanttCategoryDataset)slidingGanttCategoryDataset1.clone();
      slidingGanttCategoryDataset1.getRowIndex((Comparable) null);
      slidingGanttCategoryDataset1.getUnderlyingDataset();
      slidingGanttCategoryDataset0.getUnderlyingDataset();
      slidingGanttCategoryDataset0.getUnderlyingDataset();
      slidingGanttCategoryDataset1.getEndValue(1756, 12);
      slidingGanttCategoryDataset2.getStartValue((-2698), 9);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset1.getEndValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 5;
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(ganttCategoryDataset0).toString();
      doReturn(0, 0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getColumnKey(anyInt());
      doReturn(0, 0, 0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(11, 0).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getEndValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getEndValue(anyInt() , anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 1756);
      slidingGanttCategoryDataset0.getPercentComplete(1756, 0, (-3158));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 0, 0);
      slidingGanttCategoryDataset0.getEndValue((-3158), (-3158));
      slidingGanttCategoryDataset1.getColumnKey(1756);
      slidingGanttCategoryDataset1.validateObject();
      slidingGanttCategoryDataset1.clone();
      slidingGanttCategoryDataset1.getRowIndex((Comparable) null);
      slidingGanttCategoryDataset1.getUnderlyingDataset();
      slidingGanttCategoryDataset0.getUnderlyingDataset();
      slidingGanttCategoryDataset0.getEndValue((Comparable) null, (Comparable) null, 5);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset1.getEndValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((List) null).when(ganttCategoryDataset0).getRowKeys();
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt());
      int int0 = 1795;
      int int1 = (-1);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 1795, (-1));
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(1795, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      List list0 = slidingGanttCategoryDataset0.getRowKeys();
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(1795, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNull(list0);
      
      Number number0 = slidingGanttCategoryDataset0.getPercentComplete((-1201), (-1919));
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(1795, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNull(number0);
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getSubIntervalCount(comparable0, comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-413)).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      Object object0 = slidingGanttCategoryDataset0.clone();
      object0.equals(object0);
      Comparable<SlidingGanttCategoryDataset> comparable0 = (Comparable<SlidingGanttCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingGanttCategoryDataset0.getRowIndex(comparable0);
      slidingGanttCategoryDataset0.getPercentComplete((-1), (-413));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 5;
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(ganttCategoryDataset0).toString();
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getColumnKey(anyInt());
      doReturn(0, 0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(1340).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getEndValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 1756);
      slidingGanttCategoryDataset0.getPercentComplete(1756, 0, (-3158));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 0, 0);
      slidingGanttCategoryDataset0.getEndValue((-3158), (-3158));
      slidingGanttCategoryDataset1.getColumnKey(1756);
      slidingGanttCategoryDataset1.validateObject();
      slidingGanttCategoryDataset1.clone();
      slidingGanttCategoryDataset1.getRowIndex((Comparable) null);
      slidingGanttCategoryDataset1.getUnderlyingDataset();
      slidingGanttCategoryDataset0.getUnderlyingDataset();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset1.getEndValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Comparable<SlidingGanttCategoryDataset> comparable0 = (Comparable<SlidingGanttCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getColumnKey(anyInt());
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Number) null).when(ganttCategoryDataset0).getValue(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      int int0 = 0;
      slidingGanttCategoryDataset0.getValue((-2355), 0);
      slidingGanttCategoryDataset0.getColumnKey(0);
      Comparable<TaskSeriesCollection> comparable1 = (Comparable<TaskSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getValue(comparable1, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null, (Comparable) null).when(ganttCategoryDataset0).getRowKey(anyInt());
      doReturn(0).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, (-4238));
      slidingGanttCategoryDataset0.getRowKey((-2393));
      slidingGanttCategoryDataset0.getColumnCount();
      slidingGanttCategoryDataset0.getStartValue((-1998), 2776, (-4238));
      slidingGanttCategoryDataset0.getRowKey((-4238));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null, (Comparable) null).when(ganttCategoryDataset0).getColumnKey(anyInt());
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(40, 40, 0).when(ganttCategoryDataset0).getColumnCount();
      doReturn(0).when(ganttCategoryDataset0).getRowCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt());
      int int0 = 0;
      int int1 = 3;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 3);
      slidingGanttCategoryDataset0.getColumnCount();
      slidingGanttCategoryDataset0.setMaximumCategoryCount(3);
      slidingGanttCategoryDataset0.setFirstCategoryIndex(3);
      slidingGanttCategoryDataset0.getStartValue(0, 0);
      slidingGanttCategoryDataset0.getRowCount();
      slidingGanttCategoryDataset0.getColumnKeys();
      Comparable<StandardChartTheme> comparable0 = (Comparable<StandardChartTheme>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getSubIntervalCount(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: Mock for Comparable, hashCode: 297673910
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(ganttCategoryDataset0).toString();
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((List) null).when(ganttCategoryDataset0).getRowKeys();
      doReturn(0).when(ganttCategoryDataset0).getRowCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt() , anyInt());
      doReturn(0).when(ganttCategoryDataset0).getSubIntervalCount(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-924), 0);
      slidingGanttCategoryDataset0.getRowKeys();
      slidingGanttCategoryDataset0.getSubIntervalCount(0, 0);
      slidingGanttCategoryDataset0.getUnderlyingDataset();
      int int0 = 1560;
      int int1 = 163;
      slidingGanttCategoryDataset0.getRowCount();
      slidingGanttCategoryDataset0.getValue(1560, 163);
      slidingGanttCategoryDataset0.getPercentComplete((-1581), 1560, 0);
      slidingGanttCategoryDataset0.getStartValue((-5495), 0);
      slidingGanttCategoryDataset0.getUnderlyingDataset();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = (-11);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-11), (-11));
      Comparable<SlidingGanttCategoryDataset> comparable0 = (Comparable<SlidingGanttCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue((Comparable) (-11), (Comparable) comparable0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-2247), (-2247));
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getValue(comparable0, comparable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(ganttCategoryDataset0).toString();
      doReturn((List) null).when(ganttCategoryDataset0).getRowKeys();
      doReturn(0).when(ganttCategoryDataset0).getRowCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt() , anyInt());
      doReturn(0).when(ganttCategoryDataset0).getSubIntervalCount(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-924), 0);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-924), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      List list0 = slidingGanttCategoryDataset0.getRowKeys();
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-924), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(list0);
      
      int int0 = slidingGanttCategoryDataset0.getSubIntervalCount(0, 0);
      assertEquals(0, int0);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-924), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      GanttCategoryDataset ganttCategoryDataset1 = slidingGanttCategoryDataset0.getUnderlyingDataset();
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-924), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(ganttCategoryDataset1);
      assertSame(ganttCategoryDataset1, ganttCategoryDataset0);
      
      int int1 = slidingGanttCategoryDataset0.getRowCount();
      assertEquals(0, int1);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-924), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(int1 == int0);
      
      Number number0 = slidingGanttCategoryDataset0.getValue(1560, 163);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-924), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
      
      Number number1 = slidingGanttCategoryDataset0.getPercentComplete((-1581), 1560, 0);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-924), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number1);
      
      Number number2 = slidingGanttCategoryDataset0.getStartValue((-5495), 0);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-924), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(1).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(1).when(ganttCategoryDataset0).getRowCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getEndValue(anyInt() , anyInt() , anyInt());
      doReturn((-113)).when(ganttCategoryDataset0).getSubIntervalCount(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-102), 0);
      slidingGanttCategoryDataset0.getSubIntervalCount((-1193), 1537);
      slidingGanttCategoryDataset0.getEndValue(0, (-102), (-102));
      slidingGanttCategoryDataset0.getColumnCount();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingGanttCategoryDataset0.getRowCount();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      slidingGanttCategoryDataset0.addChangeListener(datasetChangeListener0);
      int int0 = 89;
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete((Comparable) comparable0, (Comparable) 0, 89);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: 0
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = (-2363);
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-4182)).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((-2363), (-4182)).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      int int1 = 2793;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 2793, 2793);
      slidingGanttCategoryDataset0.getRowIndex((Comparable) null);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = (-4243);
      int int1 = (-691);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-4243), (-691));
      int int2 = 9;
      int int3 = 739;
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getRowCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((List) null).when(ganttCategoryDataset0).getRowKeys();
      doReturn((Number) null, (Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt() , anyInt());
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      DatasetGroup datasetGroup0 = slidingGanttCategoryDataset0.getGroup();
      slidingGanttCategoryDataset0.setGroup(datasetGroup0);
      int int1 = 5;
      slidingGanttCategoryDataset0.validateObject();
      slidingGanttCategoryDataset0.getStartValue(5, 5, 0);
      slidingGanttCategoryDataset0.getStartValue(0, 0, 2168);
      slidingGanttCategoryDataset0.getRowKeys();
      Comparable<SlidingGanttCategoryDataset> comparable0 = (Comparable<SlidingGanttCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue(comparable0, comparable0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Comparable<TaskSeriesCollection> comparable0 = (Comparable<TaskSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getRowKey(anyInt());
      doReturn((List) null).when(ganttCategoryDataset0).getRowKeys();
      doReturn(0, 0, 0).when(ganttCategoryDataset0).getColumnCount();
      doReturn(0).when(ganttCategoryDataset0).getRowCount();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, (-3239));
      slidingGanttCategoryDataset0.getColumnKeys();
      slidingGanttCategoryDataset0.getRowKey(5660);
      slidingGanttCategoryDataset0.getRowIndex((Comparable) null);
      slidingGanttCategoryDataset0.getRowKeys();
      slidingGanttCategoryDataset0.getColumnCount();
      slidingGanttCategoryDataset0.getMaximumCategoryCount();
      slidingGanttCategoryDataset0.getRowCount();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.setFirstCategoryIndex(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-2363)).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(1604, 2211).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      DatasetGroup datasetGroup0 = slidingGanttCategoryDataset0.getGroup();
      slidingGanttCategoryDataset0.setGroup(datasetGroup0);
      slidingGanttCategoryDataset0.setMaximumCategoryCount(0);
      slidingGanttCategoryDataset0.getColumnCount();
      slidingGanttCategoryDataset0.getRowIndex((Comparable) null);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      slidingGanttCategoryDataset0.hasListener(eventListener0);
      slidingGanttCategoryDataset0.getPercentComplete((-2363), 0);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(1232).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(comparable0, comparable0).when(ganttCategoryDataset0).getColumnKey(anyInt());
      doReturn(1232).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      Comparable<String> comparable1 = null;
      slidingGanttCategoryDataset0.getColumnKey(0);
      slidingGanttCategoryDataset0.getColumnCount();
      slidingGanttCategoryDataset0.setNotify(false);
      slidingGanttCategoryDataset0.getColumnKey(0);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Number) null).when(ganttCategoryDataset0).getEndValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt() , anyInt());
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      slidingGanttCategoryDataset0.getEndValue(1, 0);
      Comparable<SlidingGanttCategoryDataset> comparable0 = (Comparable<SlidingGanttCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      slidingGanttCategoryDataset0.getPercentComplete(0, 0, 453);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue(comparable0, comparable0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 1517, 2898);
      slidingGanttCategoryDataset0.getPercentComplete(1901, 2898, 2898);
      GanttCategoryDataset ganttCategoryDataset1 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(1517).when(ganttCategoryDataset1).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(1517).when(ganttCategoryDataset1).getRowIndex(any(java.lang.Comparable.class));
      doReturn(comparable0).when(ganttCategoryDataset1).getRowKey(anyInt());
      doReturn(0).when(ganttCategoryDataset1).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset1).getPercentComplete(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(ganttCategoryDataset1, 4, (-1));
      slidingGanttCategoryDataset1.getPercentComplete(1, (-1691));
      Comparable comparable1 = slidingGanttCategoryDataset1.getRowKey((-1));
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset1.getPercentComplete(comparable1, comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: Mock for Comparable, hashCode: 1527079918
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getRowKey(anyInt());
      doReturn(3448).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getValue(anyInt() , anyInt());
      int int0 = (-626);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, (-626));
      Comparable<TaskSeriesCollection> comparable0 = (Comparable<TaskSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = 6;
      slidingGanttCategoryDataset0.setFirstCategoryIndex(6);
      slidingGanttCategoryDataset0.getValue(0, 0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingGanttCategoryDataset0.getRowKey((-5247));
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable2).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue(comparable2, comparable2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: Mock for Comparable, hashCode: 929983408
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(36).when(ganttCategoryDataset0).getSubIntervalCount(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 11, 11);
      slidingGanttCategoryDataset0.getSubIntervalCount(1, (-2083));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(ganttCategoryDataset0).getRowKeys();
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-273), 610);
      slidingGanttCategoryDataset0.getStartValue(347, 347);
      GanttCategoryDataset ganttCategoryDataset1 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-273)).when(ganttCategoryDataset1).getRowCount();
      doReturn((Number) null).when(ganttCategoryDataset1).getPercentComplete(anyInt() , anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(ganttCategoryDataset1, (-3658), (-3658));
      slidingGanttCategoryDataset1.getRowCount();
      Comparable<SlidingGanttCategoryDataset> comparable0 = (Comparable<SlidingGanttCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingGanttCategoryDataset1.getPercentComplete((-3658), (-3499), (-83));
      slidingGanttCategoryDataset0.getRowKeys();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((List) null).when(ganttCategoryDataset0).getRowKeys();
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt());
      int int0 = 1795;
      int int1 = (-1);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 1795, (-1));
      slidingGanttCategoryDataset0.getRowKeys();
      slidingGanttCategoryDataset0.getPercentComplete((-1201), (-1919));
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(1232).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(1232).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((-1), 2570).when(ganttCategoryDataset0).getColumnCount();
      doReturn(0).when(ganttCategoryDataset0).getRowCount();
      doReturn((-3595)).when(ganttCategoryDataset0).getSubIntervalCount(anyInt() , anyInt());
      int int0 = (-56);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-56), (-108));
      int int1 = 374;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, (-56), (-108));
      DatasetGroup datasetGroup0 = slidingGanttCategoryDataset1.getGroup();
      slidingGanttCategoryDataset0.setGroup(datasetGroup0);
      slidingGanttCategoryDataset0.getSubIntervalCount((-56), 374);
      slidingGanttCategoryDataset1.getRowCount();
      slidingGanttCategoryDataset0.getFirstCategoryIndex();
      Comparable<StandardChartTheme> comparable0 = (Comparable<StandardChartTheme>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset1.getPercentComplete((Comparable) (-56), (Comparable) comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: 
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getRowKey(anyInt());
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 2680, 0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 2680, 3);
      DatasetGroup datasetGroup0 = slidingGanttCategoryDataset0.getGroup();
      slidingGanttCategoryDataset1.setGroup(datasetGroup0);
      slidingGanttCategoryDataset0.equals(slidingGanttCategoryDataset1);
      int int1 = 0;
      slidingGanttCategoryDataset0.getRowKey(0);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 0, 0);
      slidingGanttCategoryDataset0.equals(slidingGanttCategoryDataset1);
      DatasetGroup datasetGroup0 = slidingGanttCategoryDataset0.getGroup();
      slidingGanttCategoryDataset0.setGroup(datasetGroup0);
      slidingGanttCategoryDataset1.setMaximumCategoryCount(0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset1.getPercentComplete(comparable0, comparable0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: Mock for Comparable, hashCode: 145117515
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 0);
      Comparable<SlidingGanttCategoryDataset> comparable0 = (Comparable<SlidingGanttCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete(comparable0, comparable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 0);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 0);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getRowKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0, 0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-1683), 12);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 12, 151);
      slidingGanttCategoryDataset0.equals(slidingGanttCategoryDataset1);
      slidingGanttCategoryDataset1.setMaximumCategoryCount(12);
      slidingGanttCategoryDataset1.hasListener((EventListener) null);
      slidingGanttCategoryDataset1.getStartValue(151, 5);
      Comparable<SlidingGanttCategoryDataset> comparable0 = (Comparable<SlidingGanttCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingGanttCategoryDataset1.getRowIndex(comparable0);
      slidingGanttCategoryDataset1.clone();
      slidingGanttCategoryDataset1.getPercentComplete(1, (-1));
      Comparable<StandardChartTheme> comparable1 = (Comparable<StandardChartTheme>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset1.getStartValue(comparable1, comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: Mock for Comparable, hashCode: 754475973
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getRowKey(anyInt());
      doReturn((List) null).when(ganttCategoryDataset0).getRowKeys();
      doReturn(0, 0, 0).when(ganttCategoryDataset0).getColumnCount();
      doReturn(0).when(ganttCategoryDataset0).getRowCount();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, (-3239));
      slidingGanttCategoryDataset0.getColumnKeys();
      slidingGanttCategoryDataset0.getRowKey(5660);
      slidingGanttCategoryDataset0.getRowIndex((Comparable) null);
      slidingGanttCategoryDataset0.getRowKeys();
      slidingGanttCategoryDataset0.getColumnCount();
      slidingGanttCategoryDataset0.getMaximumCategoryCount();
      slidingGanttCategoryDataset0.getRowCount();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.setFirstCategoryIndex(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getRowKey(anyInt());
      doReturn(0).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null, (Number) null).when(ganttCategoryDataset0).getValue(anyInt() , anyInt());
      doReturn((Number) null, (Number) null).when(ganttCategoryDataset0).getEndValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getEndValue(anyInt() , anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-1), (-2472));
      slidingGanttCategoryDataset0.getColumnIndex((-2472));
      slidingGanttCategoryDataset0.getPercentComplete((-1), (-1));
      slidingGanttCategoryDataset0.getFirstCategoryIndex();
      slidingGanttCategoryDataset0.getValue((-3479), (-406));
      slidingGanttCategoryDataset0.getValue((-729), (-3196));
      slidingGanttCategoryDataset0.getEndValue((-914), 3);
      slidingGanttCategoryDataset0.getRowKey(1388);
      slidingGanttCategoryDataset0.getEndValue(2, (-1));
      slidingGanttCategoryDataset0.getEndValue(0, 2, (-3479));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(ganttCategoryDataset0).toString();
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-2941), (-2941));
      slidingGanttCategoryDataset0.getPercentComplete((-2941), 0, 0);
      slidingGanttCategoryDataset0.clone();
      slidingGanttCategoryDataset0.getUnderlyingDataset();
      Comparable<SlidingGanttCategoryDataset> comparable0 = (Comparable<SlidingGanttCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<StandardChartTheme> comparable1 = (Comparable<StandardChartTheme>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete(comparable0, comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: Mock for Comparable, hashCode: 495567185
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1489), 2789);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete(comparable0, comparable0, 2789);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      slidingGanttCategoryDataset0.getColumnCount();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.setFirstCategoryIndex((-2012));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue(comparable0, comparable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0, 0).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 1952);
      slidingGanttCategoryDataset0.getStartValue(0, 1);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      slidingGanttCategoryDataset0.removeChangeListener(datasetChangeListener0);
      slidingGanttCategoryDataset0.getColumnCount();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<SlidingGanttCategoryDataset> comparable1 = null;
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete(comparable0, (Comparable) null, 1952);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete((Comparable) 0, (Comparable) comparable0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1399, 0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getRowKey(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 0);
      boolean boolean0 = true;
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = (-808);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 4, (-808));
      Comparable<StandardChartTheme> comparable0 = (Comparable<StandardChartTheme>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue(comparable0, comparable0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 1930;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1930, 1930);
      int int1 = 0;
      int int2 = 856;
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete(1930, 0, 856);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 3;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 3, 3);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getRowIndex(comparable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt() , anyInt());
      doReturn(0).when(ganttCategoryDataset0).getSubIntervalCount(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      slidingGanttCategoryDataset0.addChangeListener(datasetChangeListener0);
      slidingGanttCategoryDataset0.getSubIntervalCount(0, 0);
      slidingGanttCategoryDataset0.setMaximumCategoryCount(0);
      slidingGanttCategoryDataset0.getStartValue(255, 255, 255);
      slidingGanttCategoryDataset0.getFirstCategoryIndex();
      int int0 = 2812;
      Comparable<StandardChartTheme> comparable0 = (Comparable<StandardChartTheme>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: Mock for Comparable, hashCode: 263523040
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(ganttCategoryDataset0).getColumnKey(anyInt());
      doReturn(0).when(ganttCategoryDataset0).getColumnCount();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-1164), 2);
      slidingGanttCategoryDataset0.getColumnKeys();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 1, (-2138));
      slidingGanttCategoryDataset0.getColumnIndex((Comparable) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = (-586);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-586), (-586));
      slidingGanttCategoryDataset0.clone();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue((-684), 1156, (-586));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 1873, 1873);
      slidingGanttCategoryDataset0.getFirstCategoryIndex();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0, 0).when(ganttCategoryDataset0).getColumnCount();
      int int0 = (-1);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-1), (-1));
      slidingGanttCategoryDataset0.setNotify(false);
      List list0 = slidingGanttCategoryDataset0.getColumnKeys();
      slidingGanttCategoryDataset0.equals(list0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getRowKey(anyInt());
      doReturn(0).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null, (Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt());
      int int0 = (-1);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-1), (-1));
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = (-432);
      slidingGanttCategoryDataset0.getPercentComplete((-432), (-1));
      slidingGanttCategoryDataset0.getColumnIndex(comparable0);
      slidingGanttCategoryDataset0.getPercentComplete((-1), 1795);
      slidingGanttCategoryDataset0.getRowKey((-1));
      slidingGanttCategoryDataset0.clone();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int2 = (-2584);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.setMaximumCategoryCount((-2584));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'max' >= 0.
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      Object object0 = slidingGanttCategoryDataset0.clone();
      slidingGanttCategoryDataset0.equals(object0);
      Comparable<SlidingGanttCategoryDataset> comparable0 = (Comparable<SlidingGanttCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingGanttCategoryDataset0.getRowIndex(comparable0);
      slidingGanttCategoryDataset0.getPercentComplete((-1), 0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getRowKey(anyInt());
      doReturn(0).when(ganttCategoryDataset0).getSubIntervalCount(anyInt() , anyInt());
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      slidingGanttCategoryDataset0.addChangeListener(datasetChangeListener0);
      slidingGanttCategoryDataset0.getColumnCount();
      slidingGanttCategoryDataset0.getSubIntervalCount(0, 0);
      slidingGanttCategoryDataset0.getRowKey(3);
      slidingGanttCategoryDataset0.equals((Object) null);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      int int0 = (-739);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-739), (-739));
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.setMaximumCategoryCount((-739));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'max' >= 0.
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getColumnKey(anyInt());
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((List) null).when(ganttCategoryDataset0).getRowKeys();
      doReturn(0).when(ganttCategoryDataset0).getRowCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getEndValue(anyInt() , anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      slidingGanttCategoryDataset0.getColumnCount();
      slidingGanttCategoryDataset0.getStartValue(8, 0);
      slidingGanttCategoryDataset0.getColumnKey(1);
      slidingGanttCategoryDataset0.getPercentComplete(0, 8);
      slidingGanttCategoryDataset0.getRowCount();
      slidingGanttCategoryDataset0.getValue(0, 0);
      slidingGanttCategoryDataset0.getEndValue(0, 0, 0);
      slidingGanttCategoryDataset0.getMaximumCategoryCount();
      slidingGanttCategoryDataset0.getRowKeys();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue((Comparable) null, (Comparable) null, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Number) null).when(ganttCategoryDataset0).getValue(anyInt() , anyInt());
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      slidingGanttCategoryDataset0.getValue(0, 0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue((Comparable) null, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: Mock for Comparable, hashCode: 480859576
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 1502, 1095);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getValue((Comparable) 1095, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getRowKey(anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 9, 9);
      slidingGanttCategoryDataset0.getPercentComplete(14, 9);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      slidingGanttCategoryDataset0.getRowKey(9);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      slidingGanttCategoryDataset0.getColumnIndex(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getColumnCount();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-133), (-133));
      slidingGanttCategoryDataset0.getColumnCount();
      slidingGanttCategoryDataset0.clone();
      Comparable<TaskSeriesCollection> comparable0 = (Comparable<TaskSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingGanttCategoryDataset0.getRowIndex(comparable0);
      slidingGanttCategoryDataset0.setMaximumCategoryCount(0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 310);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getRowKey(1529);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      slidingGanttCategoryDataset0.getStartValue(0, 0, (-1134));
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: Mock for Comparable, hashCode: 1586611253
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, (-730), (-2171));
      slidingGanttCategoryDataset0.equals(slidingGanttCategoryDataset1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(ganttCategoryDataset0).toString();
      doReturn(0).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 3643, 3643);
      slidingGanttCategoryDataset0.getColumnCount();
      slidingGanttCategoryDataset0.getUnderlyingDataset();
      slidingGanttCategoryDataset0.clone();
      slidingGanttCategoryDataset0.getPercentComplete(0, 0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue((Comparable) 0, (Comparable) comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getSubIntervalCount(anyInt() , anyInt());
      int int0 = 1473;
      int int1 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 1473, 0);
      int int2 = (-828);
      slidingGanttCategoryDataset0.getSubIntervalCount(1473, (-1));
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue((Comparable) 0, (Comparable) comparable0, (-2440));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue((Comparable) null, (Comparable) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0, 0).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt());
      int int0 = (-1529);
      int int1 = (-2923);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-1529), (-2923));
      int int2 = 0;
      Comparable<String> comparable0 = null;
      slidingGanttCategoryDataset0.getPercentComplete(0, (-1529));
      slidingGanttCategoryDataset0.getColumnKeys();
      slidingGanttCategoryDataset0.setNotify(false);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete((Comparable) null, (Comparable) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      int int1 = (-4256);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete((Comparable) null, (Comparable) null, (-4256));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = (-233);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, (-233));
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete(comparable0, comparable0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 2, 983);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getColumnKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getValue(anyInt() , anyInt());
      int int0 = (-219);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-219), (-219));
      slidingGanttCategoryDataset0.validateObject();
      int int1 = 20;
      int int2 = 295;
      slidingGanttCategoryDataset0.getValue(20, 295);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.setFirstCategoryIndex(20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(ganttCategoryDataset0).toString();
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getColumnKey(anyInt());
      doReturn(0, 0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Number) null).when(ganttCategoryDataset0).getEndValue(anyInt() , anyInt());
      doReturn((Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt() , anyInt());
      int int0 = 1144;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 1144, 1756);
      assertEquals(1144, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1756, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number0 = slidingGanttCategoryDataset0.getPercentComplete(1756, 1144, (-3158));
      assertEquals(1144, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1756, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertNull(number0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 1144, 0);
      assertEquals(1144, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1756, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals(1144, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      Number number1 = slidingGanttCategoryDataset0.getEndValue((-3158), (-3158));
      assertEquals(1144, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1756, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertNull(number1);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      
      Comparable comparable0 = slidingGanttCategoryDataset1.getColumnKey(0);
      assertEquals(1144, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1756, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals(1144, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertNull(comparable0);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      slidingGanttCategoryDataset1.validateObject();
      assertEquals(1144, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1756, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals(1144, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset2 = (SlidingGanttCategoryDataset)slidingGanttCategoryDataset1.clone();
      assertEquals(1144, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1756, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals(1144, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset2.getMaximumCategoryCount());
      assertEquals(1144, slidingGanttCategoryDataset2.getFirstCategoryIndex());
      assertTrue(slidingGanttCategoryDataset2.getNotify());
      assertNotNull(slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset2, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset2, slidingGanttCategoryDataset0);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertTrue(slidingGanttCategoryDataset2.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset2.equals((Object)slidingGanttCategoryDataset0));
      
      int int1 = slidingGanttCategoryDataset1.getRowIndex((Comparable) null);
      assertEquals(0, int1);
      assertEquals(1144, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1756, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals(1144, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset2);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset2));
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertTrue(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset2));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertFalse(int1 == int0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset3 = (SlidingGanttCategoryDataset)slidingGanttCategoryDataset1.getUnderlyingDataset();
      assertEquals(1144, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1756, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals(1144, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(1756, slidingGanttCategoryDataset3.getMaximumCategoryCount());
      assertEquals(1144, slidingGanttCategoryDataset3.getFirstCategoryIndex());
      assertTrue(slidingGanttCategoryDataset3.getNotify());
      assertNotNull(slidingGanttCategoryDataset3);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset3);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset3);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset2);
      assertSame(slidingGanttCategoryDataset3, slidingGanttCategoryDataset0);
      assertNotSame(slidingGanttCategoryDataset3, slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset3, slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset2));
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertTrue(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset2));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertFalse(slidingGanttCategoryDataset3.equals((Object)slidingGanttCategoryDataset2));
      assertFalse(slidingGanttCategoryDataset3.equals((Object)slidingGanttCategoryDataset1));
      
      GanttCategoryDataset ganttCategoryDataset1 = slidingGanttCategoryDataset0.getUnderlyingDataset();
      assertEquals(1144, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1756, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertNotNull(ganttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset3);
      assertSame(ganttCategoryDataset1, ganttCategoryDataset0);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset2));
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset1.getEndValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getValue(anyInt() , anyInt());
      int int0 = (-812);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-812), 20);
      assertEquals(20, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-812), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = 0;
      Number number0 = slidingGanttCategoryDataset0.getValue(0, (-812));
      assertEquals(20, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-812), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue(comparable1, comparable1, (-812));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnCount();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 1663, 1663);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(1663, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1663, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      int int0 = slidingGanttCategoryDataset0.getMaximumCategoryCount();
      assertEquals(1663, int0);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(1663, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1663, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.setFirstCategoryIndex(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 40, 40);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(40, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(40, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      int int0 = 1;
      slidingGanttCategoryDataset0.setMaximumCategoryCount(1);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(40, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue((-1), (-944));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 712);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(712, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getColumnKey(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1223), 1110);
      assertEquals(1110, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-1223), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue(0, 1110, 1110);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getColumnCount();
      int int0 = (-1644);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-1644), (-1644));
      assertEquals((-1644), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1644), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<SlidingGanttCategoryDataset> comparable1 = (Comparable<SlidingGanttCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue(comparable0, comparable1, (-1644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = (-1);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1), (-1));
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue(comparable0, comparable0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 7, 7);
      assertEquals(7, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(7, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getSubIntervalCount(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 0);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete(0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(ganttCategoryDataset0).getColumnKey(anyInt());
      doReturn(0, 0, 0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0, 0, 0, 0, 0).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getValue(anyInt() , anyInt());
      doReturn((Number) null, (Number) null).when(ganttCategoryDataset0).getEndValue(anyInt() , anyInt());
      doReturn((Number) null, (Number) null).when(ganttCategoryDataset0).getPercentComplete(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-61), (-1292));
      assertEquals((-1292), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, (-61), 3040);
      assertEquals((-1292), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3040, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      DatasetGroup datasetGroup0 = slidingGanttCategoryDataset1.getGroup();
      assertEquals((-1292), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3040, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      slidingGanttCategoryDataset0.setGroup(datasetGroup0);
      assertEquals((-1292), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3040, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      Number number0 = slidingGanttCategoryDataset1.getValue((Comparable) null, (Comparable) null);
      assertEquals((-1292), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3040, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertNull(number0);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      Comparable comparable0 = slidingGanttCategoryDataset0.getColumnKey(0);
      assertEquals((-1292), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(comparable0);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      
      int int1 = 2595;
      Number number1 = slidingGanttCategoryDataset0.getEndValue((-1292), 2595);
      assertEquals((-1292), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number1);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      
      Number number2 = slidingGanttCategoryDataset1.getEndValue(3040, 605);
      assertEquals((-1292), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3040, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertNull(number2);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      Number number3 = slidingGanttCategoryDataset0.getPercentComplete((-61), 2595);
      assertEquals((-1292), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number3);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      
      Number number4 = slidingGanttCategoryDataset1.getPercentComplete((Comparable) null, (Comparable) null);
      assertEquals((-1292), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3040, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals((-61), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertNull(number4);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue((Comparable) null, (Comparable) null, 605);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0, 0).when(ganttCategoryDataset0).getColumnCount();
      int int0 = (-2532);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, (-2532));
      assertEquals((-2532), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      List list0 = slidingGanttCategoryDataset0.getColumnKeys();
      assertEquals((-2532), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = (SlidingGanttCategoryDataset)slidingGanttCategoryDataset0.clone();
      assertEquals((-2532), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2532), slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals(0, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertTrue(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      Comparable<TaskSeriesCollection> comparable0 = (Comparable<TaskSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<TaskSeriesCollection> comparable1 = (Comparable<TaskSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue(comparable0, comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null, (Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 767, 767);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(767, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(767, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number0 = slidingGanttCategoryDataset0.getStartValue(0, 40);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(767, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(767, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
      
      Number number1 = slidingGanttCategoryDataset0.getStartValue((-1344), 0);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(767, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(767, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number1);
      
      GanttCategoryDataset ganttCategoryDataset1 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset1).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Number) null).when(ganttCategoryDataset1).getPercentComplete(anyInt() , anyInt());
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(ganttCategoryDataset1, 0, 0);
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals(0, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset2 = (SlidingGanttCategoryDataset)slidingGanttCategoryDataset1.clone();
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals(0, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset2.getFirstCategoryIndex());
      assertTrue(slidingGanttCategoryDataset2.getNotify());
      assertEquals(0, slidingGanttCategoryDataset2.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset2, slidingGanttCategoryDataset0);
      assertNotSame(slidingGanttCategoryDataset2, slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertFalse(slidingGanttCategoryDataset2.equals((Object)slidingGanttCategoryDataset0));
      assertTrue(slidingGanttCategoryDataset2.equals((Object)slidingGanttCategoryDataset1));
      
      boolean boolean0 = slidingGanttCategoryDataset1.equals(slidingGanttCategoryDataset2);
      assertTrue(boolean0);
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals(0, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset2.getFirstCategoryIndex());
      assertTrue(slidingGanttCategoryDataset2.getNotify());
      assertEquals(0, slidingGanttCategoryDataset2.getMaximumCategoryCount());
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset2, slidingGanttCategoryDataset0);
      assertNotSame(slidingGanttCategoryDataset2, slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertTrue(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset2));
      assertFalse(slidingGanttCategoryDataset2.equals((Object)slidingGanttCategoryDataset0));
      assertTrue(slidingGanttCategoryDataset2.equals((Object)slidingGanttCategoryDataset1));
      
      Comparable<SlidingGanttCategoryDataset> comparable0 = (Comparable<SlidingGanttCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = slidingGanttCategoryDataset1.getRowIndex(comparable0);
      assertEquals(0, int0);
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals(0, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset2);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertTrue(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset2));
      
      Number number2 = slidingGanttCategoryDataset1.getPercentComplete((-1), 0);
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals(0, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertNull(number2);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset2);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertTrue(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset2));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 0);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getEndValue((-2639), 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(2518).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(2518, 2518).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 0);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      slidingGanttCategoryDataset0.setMaximumCategoryCount(0);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      int int1 = slidingGanttCategoryDataset0.getColumnCount();
      assertEquals(0, int1);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(int1 == int0);
      
      Comparable<TaskSeriesCollection> comparable0 = null;
      int int2 = slidingGanttCategoryDataset0.getRowIndex((Comparable) null);
      assertEquals(2518, int2);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      List list0 = slidingGanttCategoryDataset0.getColumnKeys();
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      int int3 = 0;
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = slidingGanttCategoryDataset0.hasListener(eventListener0);
      assertFalse(boolean0);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("C4").when(comparable2).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getValue(comparable1, comparable2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: C4
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(681).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(681).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(681, 1629).when(ganttCategoryDataset0).getColumnCount();
      int int0 = (-1);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-1), (-1));
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertNotNull(slidingGanttCategoryDataset0);
      
      slidingGanttCategoryDataset0.setNotify(false);
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertFalse(slidingGanttCategoryDataset0.getNotify());
      
      List list0 = slidingGanttCategoryDataset0.getColumnKeys();
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertFalse(slidingGanttCategoryDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = slidingGanttCategoryDataset0.equals(list0);
      assertFalse(boolean0);
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertFalse(slidingGanttCategoryDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = (SlidingGanttCategoryDataset)slidingGanttCategoryDataset0.clone();
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertFalse(slidingGanttCategoryDataset0.getNotify());
      assertFalse(slidingGanttCategoryDataset1.getNotify());
      assertEquals((-1), slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertTrue(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      boolean boolean1 = slidingGanttCategoryDataset0.equals(slidingGanttCategoryDataset1);
      assertTrue(boolean1);
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertFalse(slidingGanttCategoryDataset0.getNotify());
      assertFalse(slidingGanttCategoryDataset1.getNotify());
      assertEquals((-1), slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertTrue(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertTrue(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertFalse(boolean1 == boolean0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("org.jfree.data.gantt.SlidingGanttCategoryDataset").when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: org.jfree.data.gantt.SlidingGanttCategoryDataset
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getColumnCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt() , anyInt());
      int int0 = (-2143);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, (-2143), (-2143));
      assertEquals((-2143), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-2143), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number0 = slidingGanttCategoryDataset0.getStartValue(6, 6, 306);
      assertEquals((-2143), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-2143), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
      
      int int1 = (-2355);
      Comparable<TaskSeriesCollection> comparable0 = (Comparable<TaskSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue((Comparable) "org.jfree.data.general.DatasetChangeEvent", (Comparable) comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 3594;
      int int1 = (-1005);
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 1916, 3594);
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(3594, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1916, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue((Comparable) 1916, (Comparable) comparable0, 3594);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = mock(GanttCategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(ganttCategoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(ganttCategoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(298, 298, 0).when(ganttCategoryDataset0).getColumnCount();
      doReturn(0).when(ganttCategoryDataset0).getRowCount();
      doReturn((Number) null).when(ganttCategoryDataset0).getStartValue(anyInt() , anyInt());
      int int0 = 0;
      int int1 = 3;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(ganttCategoryDataset0, 0, 3);
      slidingGanttCategoryDataset0.getColumnCount();
      slidingGanttCategoryDataset0.setMaximumCategoryCount(3);
      slidingGanttCategoryDataset0.setFirstCategoryIndex(3);
      slidingGanttCategoryDataset0.getStartValue(0, 0);
      slidingGanttCategoryDataset0.getRowCount();
      slidingGanttCategoryDataset0.getColumnKeys();
      Comparable<StandardChartTheme> comparable0 = (Comparable<StandardChartTheme>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getSubIntervalCount(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }
}
