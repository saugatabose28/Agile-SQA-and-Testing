/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:30:28 GMT 2023
 */

package org.jfree.data.gantt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.gantt.Task;
import org.jfree.data.time.TimePeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Task_ESTest extends Task_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Task task0 = new Task("ze\"", date0, date0);
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date1).getTime();
      Date date2 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date2).getTime();
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn("-4_K,$9UkU@1mOvD_").when(timePeriod0).toString();
      doReturn(date2).when(timePeriod0).getEnd();
      doReturn(date1).when(timePeriod0).getStart();
      Task task1 = new Task("ze\"", timePeriod0);
      Double double0 = new Double(0L);
      task0.removeSubtask(task1);
      task1.clone();
      task1.setPercentComplete(double0);
      task0.addSubtask(task1);
      task0.getSubtaskCount();
      task1.getSubtaskCount();
      task0.getDuration();
      Object object0 = task1.clone();
      task1.addSubtask(task0);
      task1.addSubtask(task0);
      task0.equals(object0);
      task1.setDescription("description");
      TimePeriod timePeriod1 = task1.getDuration();
      task1.setDescription("ze\"");
      Double double1 = new Double(0);
      task1.setPercentComplete(double1);
      task0.setDuration(timePeriod1);
      task1.removeSubtask(task0);
      Task task2 = task1.getSubtask(0);
      Double double2 = new Double(0);
      task2.setPercentComplete(double2);
      task0.setDuration(timePeriod1);
      Object object1 = task2.clone();
      task2.equals(object1);
      task1.removeSubtask(task1);
      task0.setPercentComplete(double1);
      task1.addSubtask(task0);
      Object object2 = task2.clone();
      task0.equals(object2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Task task0 = new Task("ze\"f", date0, date0);
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timePeriod0).toString();
      doReturn((Date) null).when(timePeriod0).getStart();
      Task task1 = new Task("ze\"f", timePeriod0);
      Double double0 = new Double((-526.2088946399));
      task0.removeSubtask(task1);
      task1.clone();
      task1.setPercentComplete(double0);
      task0.addSubtask(task1);
      task0.getSubtaskCount();
      task1.getDescription();
      task1.getSubtaskCount();
      task0.getDuration();
      Object object0 = task1.clone();
      task1.addSubtask(task0);
      task1.addSubtask(task0);
      task0.equals(object0);
      task1.setDescription("description");
      TimePeriod timePeriod1 = task1.getDuration();
      task1.setDescription("ze\"f");
      Double double1 = new Double(0);
      task1.setPercentComplete(double1);
      task0.setDuration(timePeriod1);
      task1.removeSubtask(task0);
      Task task2 = task1.getSubtask(0);
      Double double2 = new Double(0);
      task2.setPercentComplete(double2);
      task0.setDuration(timePeriod1);
      Object object1 = task2.clone();
      task2.equals(object1);
      task1.removeSubtask(task0);
      task0.setPercentComplete(double1);
      task1.addSubtask(task0);
      Object object2 = task2.clone();
      task0.equals(object2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Task task0 = new Task("", date0, date0);
      task0.getSubtaskCount();
      task0.setDescription("3t)UJJlN>=m7Ny");
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date1).getTime();
      Date date2 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date2).getTime();
      task0.setPercentComplete((double) 0);
      Task task1 = new Task("", date1, date2);
      task1.removeSubtask(task0);
      task0.removeSubtask(task1);
      task1.setDescription("");
      task1.getDescription();
      Date date3 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date3).getTime();
      task0.setPercentComplete((double) 0);
      task1.removeSubtask(task0);
      Task task2 = new Task("", date3, date3);
      task2.equals(task1);
      task2.equals("8Lc+TB}8YE4u{2");
      task0.removeSubtask(task2);
      task2.setPercentComplete((double) 0);
      task1.setDescription("");
      Double double0 = new Double(0);
      Object object0 = task1.clone();
      task2.equals(object0);
      task2.equals(task0);
      task0.setPercentComplete(double0);
      Object object1 = task2.clone();
      task1.equals(object1);
      task2.removeSubtask(task1);
      task0.removeSubtask(task1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "org.jfree.data.gantt.Task";
      Task task0 = null;
      try {
        task0 = new Task("org.jfree.data.gantt.Task", (Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Task task0 = new Task("M`HFwrA7%]ieE-p&4", date0, date0);
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((Date) null).when(timePeriod0).getStart();
      Task task1 = new Task("M`HFwrA7%]ieE-p&4", timePeriod0);
      task1.setPercentComplete((-769.2783672771073));
      task0.removeSubtask(task1);
      task0.equals(task1);
      task0.setPercentComplete(0.0);
      task0.clone();
      task1.getPercentComplete();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Task task0 = new Task("locale", date0, date0);
      Double double0 = new Double(1.0);
      task0.setPercentComplete(double0);
      task0.setPercentComplete(1.0);
      task0.clone();
      task0.clone();
      task0.clone();
      // Undeclared exception!
      try { 
        task0.setDescription((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'description' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      Task task0 = new Task("", timePeriod0);
      task0.setPercentComplete(0.0);
      TimePeriod timePeriod1 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      Task task1 = new Task("", timePeriod1);
      task0.addSubtask(task1);
      task0.setPercentComplete(0.0);
      task0.getPercentComplete();
      task0.clone();
      task0.setDescription("");
      // Undeclared exception!
      try { 
        task0.getSubtask(37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date1).getTime();
      Task task0 = new Task("", date0, date1);
      Object object0 = task0.clone();
      task0.equals(object0);
      task0.getSubtaskCount();
      task0.equals("");
      task0.getDescription();
      task0.getDescription();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      Task task0 = new Task("IlBUHZ", timePeriod0);
      task0.clone();
      task0.clone();
      TimePeriod timePeriod1 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      task0.setDuration(timePeriod1);
      task0.setPercentComplete(1.0);
      Object object0 = task0.clone();
      task0.equals(object0);
      task0.setDuration((TimePeriod) null);
      task0.getPercentComplete();
      task0.getDuration();
      task0.getDuration();
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Task task1 = new Task("IlBUHZ", date0, date0);
      task0.removeSubtask(task1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Task task0 = new Task("", date0, date0);
      assertNotNull(task0);
      assertEquals("", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      
      Double double0 = new Double(246.1373566);
      task0.setPercentComplete(double0);
      Double double1 = new Double(0.0);
      task0.equals(double1);
      task0.setPercentComplete(double1);
      task0.setDescription("");
      task0.clone();
      task0.setDescription("");
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      Task task1 = new Task("", timePeriod0);
      task1.addSubtask(task0);
      task1.setDescription("<3R,rD}9,Cst5");
      task0.removeSubtask(task1);
      task1.addSubtask(task0);
      task0.setPercentComplete(double1);
      Double double2 = new Double(0.0);
      task0.setPercentComplete(double2);
      Task task2 = task1.getSubtask(0);
      task1.addSubtask(task2);
      task1.getDescription();
      task0.removeSubtask(task1);
      task2.setDescription("");
      task2.getSubtaskCount();
      task0.getSubtaskCount();
      task2.setDescription("");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Task task0 = new Task("", date0, date0);
      assertNotNull(task0);
      assertEquals("", task0.getDescription());
      assertNull(task0.getPercentComplete());
      assertEquals(0, task0.getSubtaskCount());
      
      Task task1 = (Task)task0.clone();
      assertNotNull(task1);
      assertNotSame(task0, task1);
      assertNotSame(task1, task0);
      assertTrue(task1.equals((Object)task0));
      assertEquals("", task0.getDescription());
      assertNull(task0.getPercentComplete());
      assertEquals(0, task0.getSubtaskCount());
      assertEquals(0, task1.getSubtaskCount());
      assertNull(task1.getPercentComplete());
      assertEquals("", task1.getDescription());
      
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date1).getTime();
      Task task2 = new Task("<$'<*nkcb|Rwh7Pz", date1, date1);
      assertNotNull(task2);
      assertFalse(task2.equals((Object)task1));
      assertFalse(task2.equals((Object)task0));
      assertNull(task2.getPercentComplete());
      assertEquals(0, task2.getSubtaskCount());
      assertEquals("<$'<*nkcb|Rwh7Pz", task2.getDescription());
      
      task0.removeSubtask(task2);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertNotSame(task2, task1);
      assertNotSame(task2, task0);
      assertFalse(task0.equals((Object)task2));
      assertTrue(task0.equals((Object)task1));
      assertFalse(task2.equals((Object)task1));
      assertFalse(task2.equals((Object)task0));
      assertEquals("", task0.getDescription());
      assertNull(task0.getPercentComplete());
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task2.getPercentComplete());
      assertEquals(0, task2.getSubtaskCount());
      assertEquals("<$'<*nkcb|Rwh7Pz", task2.getDescription());
      
      task0.setPercentComplete(1071.05299002);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertFalse(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertEquals("", task0.getDescription());
      assertEquals(1071.05299002, task0.getPercentComplete(), 0.01);
      assertEquals(0, task0.getSubtaskCount());
      
      task0.setPercentComplete((-1.0));
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertFalse(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertEquals("", task0.getDescription());
      assertEquals((-1.0), task0.getPercentComplete(), 0.01);
      assertEquals(0, task0.getSubtaskCount());
      
      Double double0 = task0.getPercentComplete();
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertFalse(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertEquals("", task0.getDescription());
      assertEquals((-1.0), task0.getPercentComplete(), 0.01);
      assertEquals(0, task0.getSubtaskCount());
      
      task2.addSubtask(task0);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertNotSame(task2, task1);
      assertNotSame(task2, task0);
      assertFalse(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertFalse(task2.equals((Object)task1));
      assertFalse(task2.equals((Object)task0));
      assertEquals("", task0.getDescription());
      assertEquals((-1.0), task0.getPercentComplete(), 0.01);
      assertEquals(0, task0.getSubtaskCount());
      assertEquals(1, task2.getSubtaskCount());
      assertNull(task2.getPercentComplete());
      assertEquals("<$'<*nkcb|Rwh7Pz", task2.getDescription());
      
      Task task3 = new Task("", (TimePeriod) null);
      assertNotNull(task3);
      assertFalse(task3.equals((Object)task1));
      assertFalse(task3.equals((Object)task0));
      assertFalse(task3.equals((Object)task2));
      assertEquals("", task3.getDescription());
      assertEquals(0, task3.getSubtaskCount());
      assertNull(task3.getPercentComplete());
      
      boolean boolean0 = task2.equals(task3);
      assertFalse(boolean0);
      assertNotSame(task2, task1);
      assertNotSame(task2, task0);
      assertNotSame(task2, task3);
      assertNotSame(task3, task1);
      assertNotSame(task3, task0);
      assertNotSame(task3, task2);
      assertFalse(task2.equals((Object)task1));
      assertFalse(task2.equals((Object)task0));
      assertFalse(task2.equals((Object)task3));
      assertFalse(task3.equals((Object)task1));
      assertFalse(task3.equals((Object)task0));
      assertFalse(task3.equals((Object)task2));
      assertEquals(1, task2.getSubtaskCount());
      assertNull(task2.getPercentComplete());
      assertEquals("<$'<*nkcb|Rwh7Pz", task2.getDescription());
      assertEquals("", task3.getDescription());
      assertEquals(0, task3.getSubtaskCount());
      assertNull(task3.getPercentComplete());
      
      task0.setDuration((TimePeriod) null);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertNotSame(task0, task3);
      assertFalse(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertFalse(task0.equals((Object)task3));
      assertEquals("", task0.getDescription());
      assertEquals((-1.0), task0.getPercentComplete(), 0.01);
      assertEquals(0, task0.getSubtaskCount());
      
      task2.setPercentComplete(776.0);
      assertNotSame(task2, task1);
      assertNotSame(task2, task0);
      assertNotSame(task2, task3);
      assertFalse(task2.equals((Object)task1));
      assertFalse(task2.equals((Object)task0));
      assertFalse(task2.equals((Object)task3));
      assertEquals(1, task2.getSubtaskCount());
      assertEquals(776.0, task2.getPercentComplete(), 0.01);
      assertEquals("<$'<*nkcb|Rwh7Pz", task2.getDescription());
      
      boolean boolean1 = task0.equals("<$'<*nkcb|Rwh7Pz");
      assertFalse(boolean1);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertNotSame(task0, task3);
      assertFalse(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertFalse(task0.equals((Object)task3));
      assertTrue(boolean1 == boolean0);
      assertEquals("", task0.getDescription());
      assertEquals((-1.0), task0.getPercentComplete(), 0.01);
      assertEquals(0, task0.getSubtaskCount());
      
      Double double1 = new Double((-1.0));
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      task2.setPercentComplete(double1);
      assertNotSame(task2, task1);
      assertNotSame(task2, task0);
      assertNotSame(task2, task3);
      assertFalse(task2.equals((Object)task1));
      assertFalse(task2.equals((Object)task0));
      assertFalse(task2.equals((Object)task3));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1, task2.getSubtaskCount());
      assertEquals((-1.0), task2.getPercentComplete(), 0.01);
      assertEquals("<$'<*nkcb|Rwh7Pz", task2.getDescription());
      
      task2.setDescription("<$'<*nkcb|Rwh7Pz");
      assertNotSame(task2, task1);
      assertNotSame(task2, task0);
      assertNotSame(task2, task3);
      assertFalse(task2.equals((Object)task1));
      assertFalse(task2.equals((Object)task0));
      assertFalse(task2.equals((Object)task3));
      assertEquals(1, task2.getSubtaskCount());
      assertEquals((-1.0), task2.getPercentComplete(), 0.01);
      assertEquals("<$'<*nkcb|Rwh7Pz", task2.getDescription());
      
      task0.removeSubtask(task2);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertNotSame(task0, task3);
      assertNotSame(task2, task1);
      assertNotSame(task2, task0);
      assertNotSame(task2, task3);
      assertFalse(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertFalse(task0.equals((Object)task3));
      assertFalse(task2.equals((Object)task1));
      assertFalse(task2.equals((Object)task0));
      assertFalse(task2.equals((Object)task3));
      assertEquals("", task0.getDescription());
      assertEquals((-1.0), task0.getPercentComplete(), 0.01);
      assertEquals(0, task0.getSubtaskCount());
      assertEquals(1, task2.getSubtaskCount());
      assertEquals((-1.0), task2.getPercentComplete(), 0.01);
      assertEquals("<$'<*nkcb|Rwh7Pz", task2.getDescription());
      
      String string0 = task2.getDescription();
      assertNotNull(string0);
      assertEquals("<$'<*nkcb|Rwh7Pz", string0);
      assertNotSame(task2, task1);
      assertNotSame(task2, task0);
      assertNotSame(task2, task3);
      assertFalse(task2.equals((Object)task1));
      assertFalse(task2.equals((Object)task0));
      assertFalse(task2.equals((Object)task3));
      assertEquals(1, task2.getSubtaskCount());
      assertEquals((-1.0), task2.getPercentComplete(), 0.01);
      assertEquals("<$'<*nkcb|Rwh7Pz", task2.getDescription());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      Task task0 = new Task("", timePeriod0);
      task0.setPercentComplete((-784.0));
      task0.equals("");
      task0.setDescription("");
      task0.getPercentComplete();
      task0.getSubtaskCount();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Task task0 = new Task("", (TimePeriod) null);
      Double double0 = new Double((-2665.7934181));
      task0.setPercentComplete(double0);
      task0.getPercentComplete();
      Double double1 = new Double((-2665.7934181));
      task0.setPercentComplete(double1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "s=zV)3<t3.Z(8|Z}";
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Task task0 = new Task("s=zV)3<t3.Z(8|Z}", date0, date0);
      // Undeclared exception!
      try { 
        task0.addSubtask((Task) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtask' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      Task task0 = new Task("subtask", timePeriod0);
      TimePeriod timePeriod1 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      TimePeriod timePeriod2 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      Task task1 = new Task("hour", timePeriod2);
      task0.addSubtask(task1);
      Task task2 = new Task("subtask", timePeriod1);
      task2.setPercentComplete(1.0);
      task0.removeSubtask(task2);
      task2.setDescription("");
      task0.setPercentComplete(0.0);
      task0.setDescription("subtask");
      task0.removeSubtask(task2);
      task2.setDescription("subtask");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Task task0 = new Task("ni_{(V]oUG}R9q", (TimePeriod) null);
      assertNotNull(task0);
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      
      task0.setDescription("ni_{(V]oUG}R9q");
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      
      Task task1 = new Task("ni_{(V]oUG}R9q", (TimePeriod) null);
      assertNotNull(task1);
      assertTrue(task1.equals((Object)task0));
      assertNull(task1.getPercentComplete());
      assertEquals(0, task1.getSubtaskCount());
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      task0.setPercentComplete(double0);
      assertNotSame(task0, task1);
      assertFalse(task0.equals((Object)task1));
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      assertEquals(1.0, task0.getPercentComplete(), 0.01);
      
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      task1.setPercentComplete(double1);
      assertNotSame(task1, task0);
      assertTrue(task1.equals((Object)task0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.0, task1.getPercentComplete(), 0.01);
      assertEquals(0, task1.getSubtaskCount());
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
      
      task0.addSubtask(task1);
      assertNotSame(task0, task1);
      assertNotSame(task1, task0);
      assertFalse(task0.equals((Object)task1));
      assertFalse(task1.equals((Object)task0));
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(1, task0.getSubtaskCount());
      assertEquals(1.0, task0.getPercentComplete(), 0.01);
      assertEquals(1.0, task1.getPercentComplete(), 0.01);
      assertEquals(0, task1.getSubtaskCount());
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
      
      task1.addSubtask(task0);
      assertNotSame(task0, task1);
      assertNotSame(task1, task0);
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(1, task0.getSubtaskCount());
      assertEquals(1.0, task0.getPercentComplete(), 0.01);
      assertEquals(1.0, task1.getPercentComplete(), 0.01);
      assertEquals(1, task1.getSubtaskCount());
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
      
      Double double2 = new Double(1.0);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      task0.removeSubtask(task1);
      assertNotSame(task0, task1);
      assertNotSame(task1, task0);
      assertFalse(task0.equals((Object)task1));
      assertFalse(task1.equals((Object)task0));
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      assertEquals(1.0, task0.getPercentComplete(), 0.01);
      assertEquals(1.0, task1.getPercentComplete(), 0.01);
      assertEquals(1, task1.getSubtaskCount());
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
      
      task1.setDescription("ni_{(V]oUG}R9q");
      assertNotSame(task1, task0);
      assertFalse(task1.equals((Object)task0));
      assertEquals(1.0, task1.getPercentComplete(), 0.01);
      assertEquals(1, task1.getSubtaskCount());
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
      
      Double double3 = new Double(1.0);
      assertNotNull(double3);
      assertEquals(1.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      task0.setPercentComplete(double3);
      assertNotSame(task0, task1);
      assertFalse(task0.equals((Object)task1));
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      assertEquals(1.0, task0.getPercentComplete(), 0.01);
      
      int int0 = task0.getSubtaskCount();
      assertEquals(0, int0);
      assertNotSame(task0, task1);
      assertFalse(task0.equals((Object)task1));
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      assertEquals(1.0, task0.getPercentComplete(), 0.01);
      
      task0.removeSubtask(task1);
      assertNotSame(task0, task1);
      assertNotSame(task1, task0);
      assertFalse(task0.equals((Object)task1));
      assertFalse(task1.equals((Object)task0));
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      assertEquals(1.0, task0.getPercentComplete(), 0.01);
      assertEquals(1.0, task1.getPercentComplete(), 0.01);
      assertEquals(1, task1.getSubtaskCount());
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
      
      Task task2 = (Task)task0.clone();
      assertNotNull(task2);
      assertNotSame(task2, task0);
      assertNotSame(task2, task1);
      assertNotSame(task0, task1);
      assertNotSame(task0, task2);
      assertTrue(task2.equals((Object)task0));
      assertFalse(task2.equals((Object)task1));
      assertFalse(task0.equals((Object)task1));
      assertEquals("ni_{(V]oUG}R9q", task2.getDescription());
      assertEquals(1.0, task2.getPercentComplete(), 0.01);
      assertEquals(0, task2.getSubtaskCount());
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      assertEquals(1.0, task0.getPercentComplete(), 0.01);
      
      // Undeclared exception!
      try { 
        task0.getSubtask(475);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 475, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      Task task0 = null;
      try {
        task0 = new Task((String) null, timePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'description' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "Th?";
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      Task task0 = new Task("Th?", timePeriod0);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Double double0 = new Double(0.0);
      task0.setPercentComplete(double0);
      Task task1 = new Task("i99`H", date0, date0);
      task0.setPercentComplete(0.0);
      TimePeriod timePeriod1 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      task1.setPercentComplete(double0);
      task1.setDuration(timePeriod1);
      task1.addSubtask(task0);
      task0.setPercentComplete(0.0);
      task0.addSubtask(task1);
      TimePeriod timePeriod2 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      task0.setDuration(timePeriod2);
      task1.getSubtaskCount();
      task1.removeSubtask(task0);
      // Undeclared exception!
      try { 
        task0.getSubtask(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timePeriod0).toString();
      Task task0 = new Task("'/K=0sYH", timePeriod0);
      task0.clone();
      task0.getDescription();
      task0.equals("'/K=0sYH");
      TimePeriod timePeriod1 = task0.getDuration();
      task0.setDuration(timePeriod1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Task task0 = new Task("", date0, date0);
      task0.clone();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timePeriod0).toString();
      Task task0 = new Task("", timePeriod0);
      task0.getDuration();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      Task task0 = new Task("b`f[{m[pZgg[u^O", timePeriod0);
      assertNotNull(task0);
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("b`f[{m[pZgg[u^O", task0.getDescription());
      
      task0.setDescription("b`f[{m[pZgg[u^O");
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("b`f[{m[pZgg[u^O", task0.getDescription());
      
      boolean boolean0 = task0.equals("b`f[{m[pZgg[u^O");
      assertFalse(boolean0);
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("b`f[{m[pZgg[u^O", task0.getDescription());
      
      boolean boolean1 = task0.equals("b`f[{m[pZgg[u^O");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("b`f[{m[pZgg[u^O", task0.getDescription());
      
      task0.setDescription("b`f[{m[pZgg[u^O");
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("b`f[{m[pZgg[u^O", task0.getDescription());
      
      String string0 = "PW4{qAUN5VEzs";
      TimePeriod timePeriod1 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      task0.setDuration(timePeriod1);
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("b`f[{m[pZgg[u^O", task0.getDescription());
      
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Task task1 = new Task("PW4{qAUN5VEzs", date0, date0);
      assertNotNull(task1);
      assertFalse(task1.equals((Object)task0));
      assertEquals(0, task1.getSubtaskCount());
      assertNull(task1.getPercentComplete());
      assertEquals("PW4{qAUN5VEzs", task1.getDescription());
      
      task0.removeSubtask(task1);
      assertNotSame(task0, task1);
      assertNotSame(task1, task0);
      assertFalse(task0.equals((Object)task1));
      assertFalse(task1.equals((Object)task0));
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("b`f[{m[pZgg[u^O", task0.getDescription());
      assertEquals(0, task1.getSubtaskCount());
      assertNull(task1.getPercentComplete());
      assertEquals("PW4{qAUN5VEzs", task1.getDescription());
      
      boolean boolean2 = task0.equals("b`f[{m[pZgg[u^O");
      assertFalse(boolean2);
      assertNotSame(task0, task1);
      assertFalse(task0.equals((Object)task1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("b`f[{m[pZgg[u^O", task0.getDescription());
      
      TimePeriod timePeriod2 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(timePeriod2).toString();
      task0.setDuration(timePeriod2);
      assertNotSame(task0, task1);
      assertFalse(task0.equals((Object)task1));
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("b`f[{m[pZgg[u^O", task0.getDescription());
      
      Task task2 = (Task)task0.clone();
      assertNotNull(task2);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertNotSame(task2, task1);
      assertNotSame(task2, task0);
      assertFalse(task0.equals((Object)task1));
      assertTrue(task2.equals((Object)task0));
      assertFalse(task2.equals((Object)task1));
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("b`f[{m[pZgg[u^O", task0.getDescription());
      assertEquals(0, task2.getSubtaskCount());
      assertNull(task2.getPercentComplete());
      assertEquals("b`f[{m[pZgg[u^O", task2.getDescription());
      
      task0.setPercentComplete(2729.144745203486);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertFalse(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertEquals(0, task0.getSubtaskCount());
      assertEquals(2729.144745203486, task0.getPercentComplete(), 0.01);
      assertEquals("b`f[{m[pZgg[u^O", task0.getDescription());
      
      TimePeriod timePeriod3 = task0.getDuration();
      assertNotNull(timePeriod3);
      assertSame(timePeriod3, timePeriod2);
      assertNotSame(timePeriod3, timePeriod1);
      assertNotSame(timePeriod3, timePeriod0);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertFalse(timePeriod3.equals((Object)timePeriod1));
      assertFalse(timePeriod3.equals((Object)timePeriod0));
      assertFalse(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertEquals(0, task0.getSubtaskCount());
      assertEquals(2729.144745203486, task0.getPercentComplete(), 0.01);
      assertEquals("b`f[{m[pZgg[u^O", task0.getDescription());
      
      TimePeriod timePeriod4 = task0.getDuration();
      assertNotNull(timePeriod4);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertSame(timePeriod4, timePeriod3);
      assertNotSame(timePeriod4, timePeriod0);
      assertNotSame(timePeriod4, timePeriod1);
      assertSame(timePeriod4, timePeriod2);
      assertFalse(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertFalse(timePeriod4.equals((Object)timePeriod0));
      assertFalse(timePeriod4.equals((Object)timePeriod1));
      assertEquals(0, task0.getSubtaskCount());
      assertEquals(2729.144745203486, task0.getPercentComplete(), 0.01);
      assertEquals("b`f[{m[pZgg[u^O", task0.getDescription());
      
      int int0 = (-9999);
      // Undeclared exception!
      try { 
        task0.getSubtask((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Task task0 = null;
      try {
        task0 = new Task((String) null, date0, date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'description' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Task task0 = new Task("7k)K6,j", date0, date0);
      assertNotNull(task0);
      assertNull(task0.getPercentComplete());
      assertEquals(0, task0.getSubtaskCount());
      assertEquals("7k)K6,j", task0.getDescription());
      
      task0.setPercentComplete(0.0);
      assertEquals(0.0, task0.getPercentComplete(), 0.01);
      assertEquals(0, task0.getSubtaskCount());
      assertEquals("7k)K6,j", task0.getDescription());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "6c1RO)9d*";
      TimePeriod timePeriod0 = null;
      Task task0 = new Task("6c1RO)9d*", (TimePeriod) null);
      assertNotNull(task0);
      assertNull(task0.getPercentComplete());
      assertEquals("6c1RO)9d*", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      
      TimePeriod timePeriod1 = task0.getDuration();
      assertNull(timePeriod1);
      assertNull(task0.getPercentComplete());
      assertEquals("6c1RO)9d*", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      
      task0.setDuration((TimePeriod) null);
      assertNull(task0.getPercentComplete());
      assertEquals("6c1RO)9d*", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      
      boolean boolean0 = task0.equals((Object) null);
      assertFalse(boolean0);
      assertNull(task0.getPercentComplete());
      assertEquals("6c1RO)9d*", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      
      task0.setDescription("org.jfree.data.gantt.Task");
      assertNull(task0.getPercentComplete());
      assertEquals("org.jfree.data.gantt.Task", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      
      double double0 = (-1643.1952563790194);
      Double double1 = new Double((-1643.1952563790194));
      assertNotNull(double1);
      assertEquals((-1643.1952563790194), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      task0.setPercentComplete(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1643.1952563790194), task0.getPercentComplete(), 0.01);
      assertEquals("org.jfree.data.gantt.Task", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      
      // Undeclared exception!
      try { 
        task0.getSubtask(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Task task0 = new Task("ni_{(V]oUG}R9q", (TimePeriod) null);
      assertNotNull(task0);
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      
      task0.setDescription("ni_{(V]oUG}R9q");
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      
      Task task1 = new Task("ni_{(V]oUG}R9q", (TimePeriod) null);
      assertNotNull(task1);
      assertTrue(task1.equals((Object)task0));
      assertEquals(0, task1.getSubtaskCount());
      assertNull(task1.getPercentComplete());
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      task1.setPercentComplete(double0);
      assertNotSame(task1, task0);
      assertFalse(task1.equals((Object)task0));
      assertEquals(0, task1.getSubtaskCount());
      assertEquals(1.0, task1.getPercentComplete(), 0.01);
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
      
      task0.addSubtask(task1);
      assertNotSame(task0, task1);
      assertNotSame(task1, task0);
      assertFalse(task0.equals((Object)task1));
      assertFalse(task1.equals((Object)task0));
      assertEquals(1, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(0, task1.getSubtaskCount());
      assertEquals(1.0, task1.getPercentComplete(), 0.01);
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
      
      task1.addSubtask(task0);
      assertNotSame(task0, task1);
      assertNotSame(task1, task0);
      assertFalse(task0.equals((Object)task1));
      assertFalse(task1.equals((Object)task0));
      assertEquals(1, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(1, task1.getSubtaskCount());
      assertEquals(1.0, task1.getPercentComplete(), 0.01);
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
      
      Double double1 = task0.getPercentComplete();
      assertNull(double1);
      assertNotSame(task0, task1);
      assertFalse(task0.equals((Object)task1));
      assertEquals(1, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      
      task0.removeSubtask(task1);
      assertNotSame(task0, task1);
      assertNotSame(task1, task0);
      assertFalse(task0.equals((Object)task1));
      assertFalse(task1.equals((Object)task0));
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(1, task1.getSubtaskCount());
      assertEquals(1.0, task1.getPercentComplete(), 0.01);
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
      
      task0.addSubtask(task1);
      assertNotSame(task0, task1);
      assertNotSame(task1, task0);
      assertFalse(task0.equals((Object)task1));
      assertFalse(task1.equals((Object)task0));
      assertEquals(1, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(1, task1.getSubtaskCount());
      assertEquals(1.0, task1.getPercentComplete(), 0.01);
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
      
      task1.setDescription("ni_{(V]oUG}R9q");
      assertNotSame(task1, task0);
      assertFalse(task1.equals((Object)task0));
      assertEquals(1, task1.getSubtaskCount());
      assertEquals(1.0, task1.getPercentComplete(), 0.01);
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
      
      Double double2 = new Double(1.0);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      task0.setPercentComplete(double2);
      assertNotSame(task0, task1);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(1, task0.getSubtaskCount());
      assertEquals(1.0, task0.getPercentComplete(), 0.01);
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      
      int int0 = task0.getSubtaskCount();
      assertEquals(1, int0);
      assertNotSame(task0, task1);
      assertEquals(1, task0.getSubtaskCount());
      assertEquals(1.0, task0.getPercentComplete(), 0.01);
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      
      task0.removeSubtask(task1);
      assertNotSame(task0, task1);
      assertNotSame(task1, task0);
      assertFalse(task0.equals((Object)task1));
      assertFalse(task1.equals((Object)task0));
      assertEquals(0, task0.getSubtaskCount());
      assertEquals(1.0, task0.getPercentComplete(), 0.01);
      assertEquals("ni_{(V]oUG}R9q", task0.getDescription());
      assertEquals(1, task1.getSubtaskCount());
      assertEquals(1.0, task1.getPercentComplete(), 0.01);
      assertEquals("ni_{(V]oUG}R9q", task1.getDescription());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Task task0 = new Task(" |Z'6ohy.,$Nf%g1G", (TimePeriod) null);
      assertNotNull(task0);
      assertEquals(" |Z'6ohy.,$Nf%g1G", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      
      task0.setDuration((TimePeriod) null);
      assertEquals(" |Z'6ohy.,$Nf%g1G", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      Task task0 = null;
      try {
        task0 = new Task((String) null, timePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'description' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date1).getTime();
      Task task0 = new Task("F+pk`;c`", date0, date1);
      assertNotNull(task0);
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("F+pk`;c`", task0.getDescription());
      
      Task task1 = (Task)task0.clone();
      assertNotNull(task1);
      assertNotSame(task0, task1);
      assertNotSame(task1, task0);
      assertTrue(task1.equals((Object)task0));
      assertEquals(0, task0.getSubtaskCount());
      assertNull(task0.getPercentComplete());
      assertEquals("F+pk`;c`", task0.getDescription());
      assertEquals(0, task1.getSubtaskCount());
      assertNull(task1.getPercentComplete());
      assertEquals("F+pk`;c`", task1.getDescription());
      
      task0.setPercentComplete((-1606.738));
      assertNotSame(task0, task1);
      assertFalse(task0.equals((Object)task1));
      assertEquals(0, task0.getSubtaskCount());
      assertEquals((-1606.738), task0.getPercentComplete(), 0.01);
      assertEquals("F+pk`;c`", task0.getDescription());
      
      Task task2 = (Task)task0.clone();
      assertNotNull(task2);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertNotSame(task2, task0);
      assertNotSame(task2, task1);
      assertFalse(task0.equals((Object)task1));
      assertTrue(task2.equals((Object)task0));
      assertFalse(task2.equals((Object)task1));
      assertEquals(0, task0.getSubtaskCount());
      assertEquals((-1606.738), task0.getPercentComplete(), 0.01);
      assertEquals("F+pk`;c`", task0.getDescription());
      assertEquals(0, task2.getSubtaskCount());
      assertEquals("F+pk`;c`", task2.getDescription());
      assertEquals((-1606.738), task2.getPercentComplete(), 0.01);
      
      boolean boolean0 = task0.equals(task1);
      assertFalse(boolean0);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertNotSame(task1, task2);
      assertNotSame(task1, task0);
      assertTrue(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertFalse(task1.equals((Object)task2));
      assertFalse(task1.equals((Object)task0));
      assertEquals(0, task0.getSubtaskCount());
      assertEquals((-1606.738), task0.getPercentComplete(), 0.01);
      assertEquals("F+pk`;c`", task0.getDescription());
      assertEquals(0, task1.getSubtaskCount());
      assertNull(task1.getPercentComplete());
      assertEquals("F+pk`;c`", task1.getDescription());
      
      boolean boolean1 = task0.equals(task2);
      assertTrue(boolean1);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertNotSame(task2, task0);
      assertNotSame(task2, task1);
      assertTrue(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertTrue(task2.equals((Object)task0));
      assertFalse(task2.equals((Object)task1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, task0.getSubtaskCount());
      assertEquals((-1606.738), task0.getPercentComplete(), 0.01);
      assertEquals("F+pk`;c`", task0.getDescription());
      assertEquals(0, task2.getSubtaskCount());
      assertEquals("F+pk`;c`", task2.getDescription());
      assertEquals((-1606.738), task2.getPercentComplete(), 0.01);
      
      boolean boolean2 = task0.equals(task1);
      assertFalse(boolean2);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertNotSame(task1, task2);
      assertNotSame(task1, task0);
      assertTrue(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertFalse(task1.equals((Object)task2));
      assertFalse(task1.equals((Object)task0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, task0.getSubtaskCount());
      assertEquals((-1606.738), task0.getPercentComplete(), 0.01);
      assertEquals("F+pk`;c`", task0.getDescription());
      assertEquals(0, task1.getSubtaskCount());
      assertNull(task1.getPercentComplete());
      assertEquals("F+pk`;c`", task1.getDescription());
      
      String string0 = task0.getDescription();
      assertNotNull(string0);
      assertEquals("F+pk`;c`", string0);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertTrue(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertEquals(0, task0.getSubtaskCount());
      assertEquals((-1606.738), task0.getPercentComplete(), 0.01);
      assertEquals("F+pk`;c`", task0.getDescription());
      
      int int0 = task0.getSubtaskCount();
      assertEquals(0, int0);
      assertNotSame(task0, task2);
      assertNotSame(task0, task1);
      assertTrue(task0.equals((Object)task2));
      assertFalse(task0.equals((Object)task1));
      assertEquals(0, task0.getSubtaskCount());
      assertEquals((-1606.738), task0.getPercentComplete(), 0.01);
      assertEquals("F+pk`;c`", task0.getDescription());
      
      // Undeclared exception!
      try { 
        task0.getSubtask(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      TimePeriod timePeriod1 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      TimePeriod timePeriod2 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      Task task0 = new Task("=E$f", timePeriod2);
      assertNotNull(task0);
      assertNull(task0.getPercentComplete());
      assertEquals("=E$f", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      Task task0 = new Task("", timePeriod0);
      assertNotNull(task0);
      assertNull(task0.getPercentComplete());
      assertEquals("", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
      
      Double double0 = task0.getPercentComplete();
      assertNull(double0);
      assertNull(task0.getPercentComplete());
      assertEquals("", task0.getDescription());
      assertEquals(0, task0.getSubtaskCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(1L, 1L).when(date0).getTime();
      Task task0 = new Task("ze\"f", date0, date0);
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(date1).getTime();
      Date date2 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(date2).getTime();
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn("ze\"f").when(timePeriod0).toString();
      doReturn(date2).when(timePeriod0).getEnd();
      doReturn(date1, (Date) null).when(timePeriod0).getStart();
      Task task1 = new Task("ze\"f", timePeriod0);
      Double double0 = new Double((-526.2088946399));
      task0.removeSubtask(task1);
      Object object0 = task1.clone();
      task1.setPercentComplete(double0);
      task0.addSubtask(task1);
      task0.getSubtaskCount();
      task1.getDescription();
      task1.getSubtaskCount();
      task0.getDuration();
      task1.addSubtask(task0);
      task1.addSubtask(task0);
      task0.equals(object0);
      task1.setDescription("deslripti+n");
      TimePeriod timePeriod1 = task1.getDuration();
      Double double1 = new Double(0);
      task1.setPercentComplete(double1);
      task0.setDuration(timePeriod1);
      task1.removeSubtask(task0);
      Task task2 = task1.getSubtask(0);
      Double double2 = new Double(0);
      task2.setPercentComplete(double2);
      task0.setDuration(timePeriod1);
      Task task3 = (Task)task2.clone();
      task2.equals(task3);
      task1.removeSubtask(task0);
      task0.setPercentComplete(double1);
      task1.addSubtask(task0);
      task2.clone();
      task2.getDescription();
      String string0 = task3.getDescription();
      assertEquals(1, task1.getSubtaskCount());
      assertEquals("ze\"f", string0);
  }
}
