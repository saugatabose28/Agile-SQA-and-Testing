/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:25:08 GMT 2023
 */

package org.jfree.data.gantt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.gantt.Task;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.time.TimePeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYTaskDataset_ESTest extends XYTaskDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((Date) null).when(timePeriod0).getEnd();
      doReturn((Date) null).when(timePeriod0).getStart();
      Task task0 = mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn(timePeriod0).when(task0).getDuration();
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(task0).when(taskSeries0).get(anyInt());
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      double double0 = xYTaskDataset0.getStartXValue((-535), (-3411));
      assertEquals((-535.4), double0, 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      xYTaskDataset0.removeChangeListener((DatasetChangeListener) null);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      Number number0 = xYTaskDataset0.getX(0, 0);
      assertFalse(number0.equals((Object)double0));
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      xYTaskDataset0.setTransposed(false);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      xYTaskDataset0.validateObject();
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      boolean boolean0 = xYTaskDataset0.isTransposed();
      assertFalse(boolean0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      boolean boolean1 = xYTaskDataset0.isTransposed();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      xYTaskDataset0.setTransposed(true);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      
      Number number1 = xYTaskDataset0.getStartY(0, 3600);
      assertFalse(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double0));
      assertNotNull(number1);
      assertEquals((-0.4), number1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      
      boolean boolean2 = xYTaskDataset0.isTransposed();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      
      xYTaskDataset0.setSeriesWidth(2.0);
      assertEquals(2.0, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getX(0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(2143970674).when(taskSeries0).getItemCount();
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn("").when(taskSeriesCollection0).toString();
      doReturn(taskSeries0).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      TaskSeries taskSeries1 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Task) null).when(taskSeries1).get(anyInt());
      TaskSeriesCollection taskSeriesCollection1 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries1).when(taskSeriesCollection1).getSeries(anyInt());
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotNull(xYTaskDataset1);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      
      boolean boolean0 = xYTaskDataset0.equals(xYTaskDataset1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertFalse(boolean0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      
      Number number0 = xYTaskDataset0.getStartX(3715, (-2140353855));
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotNull(number0);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(3714.6, number0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      boolean boolean1 = xYTaskDataset1.equals(xYTaskDataset0);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertFalse(boolean1);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      
      int int0 = xYTaskDataset0.getItemCount(3715);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(2143970674, int0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      xYTaskDataset1.setNotify(false);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertFalse(xYTaskDataset1.getNotify());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection2 = xYTaskDataset0.getTasks();
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(taskSeriesCollection2.equals((Object)taskSeriesCollection1));
      assertNotNull(taskSeriesCollection2);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertSame(taskSeriesCollection2, taskSeriesCollection0);
      assertNotSame(taskSeriesCollection2, taskSeriesCollection1);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, taskSeriesCollection2.getSeriesCount());
      assertEquals(0, taskSeriesCollection2.getRowCount());
      assertFalse(taskSeriesCollection2.getNotify());
      assertEquals(0, taskSeriesCollection2.getColumnCount());
      
      double double0 = xYTaskDataset1.getStartXValue(6, (-1163));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(5.6, double0, 0.01);
      assertFalse(xYTaskDataset1.getNotify());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      
      int int1 = (-306);
      // Undeclared exception!
      try { 
        xYTaskDataset1.getY(0, (-306));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((Date) null).when(timePeriod0).getEnd();
      Task task0 = mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn(timePeriod0).when(task0).getDuration();
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(task0).when(taskSeries0).get(anyInt());
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      int int0 = 488;
      double double0 = xYTaskDataset0.getStartXValue(0, 0);
      assertEquals((-0.4), double0, 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndY(488, 488);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Task task0 = mock(Task.class, new ViolatedAssumptionAnswer());
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(taskSeries0).getItemCount();
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0, (TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      double double0 = xYTaskDataset0.getStartXValue((-535), (-3411));
      assertEquals((-535.4), double0, 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      xYTaskDataset0.removeChangeListener((DatasetChangeListener) null);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      Number number0 = xYTaskDataset0.getX(0, 0);
      assertFalse(number0.equals((Object)double0));
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      xYTaskDataset0.setTransposed(false);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      xYTaskDataset0.validateObject();
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      boolean boolean0 = xYTaskDataset0.isTransposed();
      assertFalse(boolean0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      boolean boolean1 = xYTaskDataset0.isTransposed();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      xYTaskDataset0.setTransposed(true);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      Number number1 = xYTaskDataset0.getStartY(0, 3600);
      assertFalse(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double0));
      assertNotNull(number1);
      assertEquals((-0.4), number1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      boolean boolean2 = xYTaskDataset0.isTransposed();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      xYTaskDataset0.setSeriesWidth(2.0);
      assertTrue(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(2.0, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      int int0 = xYTaskDataset0.getItemCount(0);
      assertEquals(0, int0);
      assertTrue(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(2.0, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getX(0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn((-2122219134)).when(taskSeries0).getItemCount();
      TaskSeries taskSeries1 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(taskSeries1).getItemCount();
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0, taskSeries1).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      double double0 = xYTaskDataset0.getSeriesWidth();
      assertEquals(0.8, double0, 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      double double1 = xYTaskDataset0.getStartXValue(0, 6);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-0.4), double1, 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      int int0 = (-2790);
      Number number0 = xYTaskDataset0.getEndX((-2790), (-2790));
      assertFalse(number0.equals((Object)double0));
      assertFalse(number0.equals((Object)double1));
      assertNotNull(number0);
      assertEquals((-2789.6), number0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      Number number1 = xYTaskDataset0.getStartX((-2790), (-2790));
      assertFalse(number1.equals((Object)double0));
      assertFalse(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double1));
      assertNotNull(number1);
      assertEquals((-2790.4), number1);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      int int1 = xYTaskDataset0.getItemCount(0);
      assertFalse(int1 == int0);
      assertEquals((-2122219134), int1);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      int int2 = xYTaskDataset0.getItemCount(0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      TaskSeriesCollection taskSeriesCollection1 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(number0).when(taskSeriesCollection1).getSeriesKey(anyInt());
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertFalse(number0.equals((Object)double0));
      assertFalse(number0.equals((Object)number1));
      assertFalse(number0.equals((Object)double1));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotNull(xYTaskDataset1);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      
      xYTaskDataset1.setTransposed(false);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(number0.equals((Object)double0));
      assertFalse(number0.equals((Object)number1));
      assertFalse(number0.equals((Object)double1));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      
      xYTaskDataset0.removeChangeListener(xYTaskDataset1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(number0.equals((Object)double0));
      assertFalse(number0.equals((Object)number1));
      assertFalse(number0.equals((Object)double1));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      
      Comparable comparable0 = xYTaskDataset1.getSeriesKey(2481);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(number0.equals((Object)double0));
      assertFalse(number0.equals((Object)number1));
      assertFalse(number0.equals((Object)double1));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotNull(comparable0);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertSame(number0, comparable0);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals((-2789.6), comparable0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.setSeriesWidth((-300.1986));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'w' > 0.0.
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Task task0 = mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriod) null).when(task0).getDuration();
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(task0).when(taskSeries0).get(anyInt());
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      int int0 = 345;
      int int1 = (-3429);
      DatasetGroup datasetGroup0 = xYTaskDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      xYTaskDataset0.setGroup(datasetGroup0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      TaskSeriesCollection taskSeriesCollection1 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotNull(xYTaskDataset1);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertFalse(xYTaskDataset1.isTransposed());
      
      xYTaskDataset0.removeChangeListener(xYTaskDataset1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertFalse(xYTaskDataset1.isTransposed());
      
      xYTaskDataset0.setTransposed(true);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndX(345, (-3429));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      xYTaskDataset0.setTransposed(true);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      Number number0 = xYTaskDataset0.getStartY(2146527491, 2146527491);
      assertNotNull(number0);
      assertEquals(2.1465274906E9, number0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      double double0 = xYTaskDataset0.getStartYValue(2178, 2178);
      assertEquals(2177.6, double0, 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      double double1 = xYTaskDataset0.getEndYValue((-2828), 2178);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2827.6), double1, 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartXValue((-2141203131), 2178);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Task task0 = mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriod) null).when(task0).getDuration();
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(task0).when(taskSeries0).get(anyInt());
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      
      int int0 = (-575);
      int int1 = (-302);
      double double0 = xYTaskDataset0.getStartXValue(2808, 2808);
      assertEquals(2807.6, double0, 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      
      double double1 = xYTaskDataset0.getSeriesWidth();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.8, double1, 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartYValue((-302), (-2141203131));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(taskSeries0).getItemCount();
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(taskSeriesCollection0).toString();
      doReturn(taskSeries0).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection1 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection1).getSeries(anyInt());
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotNull(xYTaskDataset1);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      
      boolean boolean0 = xYTaskDataset1.equals(xYTaskDataset1);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertTrue(boolean0);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      
      int int0 = xYTaskDataset0.getItemCount(3743);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(0, int0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      xYTaskDataset1.setNotify(true);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      
      TaskSeriesCollection taskSeriesCollection2 = xYTaskDataset0.getTasks();
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(taskSeriesCollection2.equals((Object)taskSeriesCollection1));
      assertNotNull(taskSeriesCollection2);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(taskSeriesCollection2, taskSeriesCollection1);
      assertSame(taskSeriesCollection2, taskSeriesCollection0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, taskSeriesCollection2.getRowCount());
      assertEquals(0, taskSeriesCollection2.getColumnCount());
      assertEquals(0, taskSeriesCollection2.getSeriesCount());
      assertFalse(taskSeriesCollection2.getNotify());
      
      double double0 = xYTaskDataset1.getStartXValue(6, (-1163));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(5.6, double0, 0.01);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      
      int int1 = (-306);
      // Undeclared exception!
      try { 
        xYTaskDataset1.getY(0, (-306));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(2340).when(taskSeriesCollection0).getSeriesCount();
      doReturn(comparable0, (Comparable) null).when(taskSeriesCollection0).getSeriesKey(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(2340, xYTaskDataset0.getSeriesCount());
      
      double double0 = xYTaskDataset0.getEndXValue(0, 0);
      assertEquals(0.4, double0, 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(2340, xYTaskDataset0.getSeriesCount());
      
      Comparable<TaskSeriesCollection> comparable1 = (Comparable<TaskSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTaskDataset0.indexOf(comparable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn("org.jfree.data.gantt.TaskSeriesCollection", (String) null).when(taskSeriesCollection0).toString();
      doReturn((String) null).when(taskSeriesCollection0).clone();
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      doReturn((-989)).when(taskSeriesCollection0).getSeriesCount();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals((-989), xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      DatasetGroup datasetGroup0 = xYTaskDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals((-989), xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      int int0 = 1;
      double double0 = xYTaskDataset0.getStartXValue((-439), 1);
      assertEquals((-439.4), double0, 0.01);
      assertEquals((-989), xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      XYTaskDataset xYTaskDataset1 = (XYTaskDataset)xYTaskDataset0.clone();
      assertNotNull(xYTaskDataset1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals((-989), xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      
      int int1 = xYTaskDataset0.getSeriesCount();
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(int1 == int0);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals((-989), int1);
      assertEquals((-989), xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      TaskSeriesCollection taskSeriesCollection1 = xYTaskDataset0.getTasks();
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotNull(taskSeriesCollection1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertEquals((-989), xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(taskSeriesCollection1.getNotify());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals((-989), taskSeriesCollection1.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection2 = xYTaskDataset0.getTasks();
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotNull(taskSeriesCollection2);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertSame(taskSeriesCollection2, taskSeriesCollection1);
      assertSame(taskSeriesCollection2, taskSeriesCollection0);
      assertEquals((-989), xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(taskSeriesCollection2.getNotify());
      assertEquals(0, taskSeriesCollection2.getColumnCount());
      assertEquals((-989), taskSeriesCollection2.getSeriesCount());
      assertEquals(0, taskSeriesCollection2.getRowCount());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndYValue((-989), (-1297));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Task) null).when(taskSeries0).get(anyInt());
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      xYTaskDataset0.setSeriesWidth(0.8);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number0 = xYTaskDataset0.getStartX(10, (-1459));
      assertNotNull(number0);
      assertEquals(9.6, number0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartYValue((-1459), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(taskSeriesCollection0).clone();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      XYTaskDataset xYTaskDataset1 = (XYTaskDataset)xYTaskDataset0.clone();
      assertNotNull(xYTaskDataset1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      TaskSeriesCollection taskSeriesCollection1 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(xYTaskDataset1).when(taskSeriesCollection1).clone();
      XYTaskDataset xYTaskDataset2 = new XYTaskDataset(taskSeriesCollection1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(xYTaskDataset2.equals((Object)xYTaskDataset1));
      assertFalse(xYTaskDataset2.equals((Object)xYTaskDataset0));
      assertNotNull(xYTaskDataset2);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      assertFalse(xYTaskDataset2.isTransposed());
      assertTrue(xYTaskDataset2.getNotify());
      assertEquals(0.8, xYTaskDataset2.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset2.getSeriesCount());
      
      // Undeclared exception!
      try { 
        xYTaskDataset2.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.gantt.XYTaskDataset cannot be cast to org.jfree.data.gantt.TaskSeriesCollection
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Task) null).when(taskSeries0).get(anyInt());
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndYValue((-1), 4271);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Task) null).when(taskSeries0).get(anyInt());
      Comparable<TaskSeriesCollection> comparable0 = (Comparable<TaskSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0).when(taskSeriesCollection0).getSeries(anyInt());
      doReturn(comparable0).when(taskSeriesCollection0).getSeriesKey(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      Number number0 = xYTaskDataset0.getX(233, (-924));
      assertNotNull(number0);
      assertEquals(233.0, number0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      xYTaskDataset0.addChangeListener((DatasetChangeListener) null);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      Comparable comparable1 = xYTaskDataset0.getSeriesKey((-924));
      assertNotNull(comparable1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getY(2097, 2097);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      double double0 = xYTaskDataset0.getEndXValue((-54), (-54));
      assertEquals((-53.6), double0, 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      int int0 = 0;
      double double1 = xYTaskDataset0.getEndXValue(0, 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.4, double1, 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      xYTaskDataset0.setSeriesWidth(610.300817);
      assertEquals(610.300817, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection1 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(taskSeriesCollection1).clone();
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotNull(xYTaskDataset1);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      
      XYTaskDataset xYTaskDataset2 = (XYTaskDataset)xYTaskDataset1.clone();
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertFalse(xYTaskDataset2.equals((Object)xYTaskDataset0));
      assertNotNull(xYTaskDataset2);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertNotSame(xYTaskDataset1, xYTaskDataset2);
      assertNotSame(xYTaskDataset2, xYTaskDataset1);
      assertNotSame(xYTaskDataset2, xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertFalse(xYTaskDataset2.isTransposed());
      assertTrue(xYTaskDataset2.getNotify());
      assertEquals(0.8, xYTaskDataset2.getSeriesWidth(), 0.01);
      
      xYTaskDataset1.validateObject();
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset2));
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertNotSame(xYTaskDataset1, xYTaskDataset2);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      
      boolean boolean0 = xYTaskDataset0.equals(xYTaskDataset1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset2));
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset2));
      assertNotSame(xYTaskDataset0, xYTaskDataset2);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertNotSame(xYTaskDataset1, xYTaskDataset2);
      assertFalse(boolean0);
      assertEquals(610.300817, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      
      xYTaskDataset1.removeChangeListener(xYTaskDataset0);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset2));
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset2));
      assertNotSame(xYTaskDataset0, xYTaskDataset2);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertNotSame(xYTaskDataset1, xYTaskDataset2);
      assertEquals(610.300817, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      
      // Undeclared exception!
      try { 
        xYTaskDataset1.setSeriesWidth(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'w' > 0.0.
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(taskSeriesCollection0).clone();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      xYTaskDataset0.setTransposed(false);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      boolean boolean0 = xYTaskDataset0.equals("");
      assertFalse(boolean0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      xYTaskDataset0.setNotify(false);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertFalse(xYTaskDataset0.getNotify());
      
      xYTaskDataset0.setTransposed(true);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.getNotify());
      
      double double0 = xYTaskDataset0.getEndYValue(0, 0);
      assertEquals(0.4, double0, 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.getNotify());
      
      boolean boolean1 = xYTaskDataset0.equals("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.getNotify());
      
      XYTaskDataset xYTaskDataset1 = (XYTaskDataset)xYTaskDataset0.clone();
      assertNotNull(xYTaskDataset1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.isTransposed());
      assertFalse(xYTaskDataset1.getNotify());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      double double0 = xYTaskDataset0.getXValue(0, 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.setSeriesWidth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'w' > 0.0.
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      xYTaskDataset0.validateObject();
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      boolean boolean0 = xYTaskDataset0.equals("tasks");
      assertFalse(boolean0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      Number number0 = xYTaskDataset0.getEndX(0, 1840);
      assertNotNull(number0);
      assertEquals(0.4, number0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      Number number1 = xYTaskDataset0.getEndX((-84), 1840);
      assertFalse(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals((-83.6), number1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartY(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      int int0 = 368;
      int int1 = (-3429);
      DatasetGroup datasetGroup0 = xYTaskDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.seriesChanged(seriesChangeEvent0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      xYTaskDataset0.setGroup(datasetGroup0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      TaskSeriesCollection taskSeriesCollection1 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotNull(xYTaskDataset1);
      assertFalse(xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      
      xYTaskDataset0.removeChangeListener(xYTaskDataset1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      
      xYTaskDataset0.setTransposed(true);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndX(368, (-3429));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(taskSeriesCollection0).clone();
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      xYTaskDataset0.setTransposed(true);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      
      int int0 = (-1978);
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      
      XYTaskDataset xYTaskDataset1 = (XYTaskDataset)xYTaskDataset0.clone();
      assertNotNull(xYTaskDataset1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.isTransposed());
      
      int int1 = 3;
      Double double0 = (Double)xYTaskDataset0.getY((-1978), 3);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotNull(double0);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals((-1978.0), (double)double0, 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndX(232, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      boolean boolean0 = xYTaskDataset0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndY(1, 3223);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      int int0 = 1773;
      xYTaskDataset0.validateObject();
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      double double0 = xYTaskDataset0.getXValue(1773, 1773);
      assertEquals(1773.0, double0, 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndYValue(1773, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndYValue(29, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      int int0 = 11;
      int int1 = 2725;
      // Undeclared exception!
      try { 
        xYTaskDataset0.getY(11, 2725);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      doReturn(0).when(taskSeriesCollection0).getSeriesCount();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = xYTaskDataset0.indexOf(comparable0);
      assertEquals((-1), int0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      int int1 = (-192);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getYValue((-192), (-192));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndYValue(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(taskSeriesCollection0).clone();
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      XYTaskDataset xYTaskDataset1 = (XYTaskDataset)xYTaskDataset0.clone();
      assertNotNull(xYTaskDataset1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      
      boolean boolean0 = xYTaskDataset0.equals(xYTaskDataset1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertFalse(boolean0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      
      xYTaskDataset0.setNotify(false);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      int int0 = 2;
      xYTaskDataset0.validateObject();
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      xYTaskDataset0.seriesChanged((SeriesChangeEvent) null);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      double double0 = xYTaskDataset0.getEndXValue(2, 2);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(2.4, double0, 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getY(2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getY(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        xYTaskDataset0.setSeriesWidth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'w' > 0.0.
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskSeriesCollection0).toString();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      Number number0 = xYTaskDataset0.getStartX((-2082), 0);
      assertNotNull(number0);
      assertEquals((-2082.4), number0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      TaskSeriesCollection taskSeriesCollection1 = xYTaskDataset0.getTasks();
      assertNotNull(taskSeriesCollection1);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertFalse(taskSeriesCollection1.getNotify());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      
      TaskSeriesCollection taskSeriesCollection2 = xYTaskDataset0.getTasks();
      assertNotNull(taskSeriesCollection2);
      assertSame(taskSeriesCollection2, taskSeriesCollection0);
      assertSame(taskSeriesCollection2, taskSeriesCollection1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, taskSeriesCollection2.getSeriesCount());
      assertEquals(0, taskSeriesCollection2.getColumnCount());
      assertFalse(taskSeriesCollection2.getNotify());
      assertEquals(0, taskSeriesCollection2.getRowCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(taskSeries0).getItemCount();
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0, (TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number0 = xYTaskDataset0.getX((-1475), (-1));
      assertNotNull(number0);
      assertEquals((-1475.0), number0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      int int0 = xYTaskDataset0.getItemCount((-1));
      assertEquals(0, int0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getItemCount(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      doReturn(0).when(taskSeriesCollection0).getSeriesCount();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number0 = xYTaskDataset0.getEndX(2176, (-701));
      assertNotNull(number0);
      assertEquals(2176.4, number0);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      int int0 = xYTaskDataset0.getSeriesCount();
      assertEquals(0, int0);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      xYTaskDataset0.setTransposed(true);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartXValue(2176, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.setSeriesWidth((-1606.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'w' > 0.0.
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.setSeriesWidth(Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'w' > 0.0.
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      xYTaskDataset0.setTransposed(false);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      Number number0 = xYTaskDataset0.getStartX(1, 1);
      assertNotNull(number0);
      assertEquals(0.6, number0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      Number number1 = xYTaskDataset0.getEndX(1, 1);
      assertFalse(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(1.4, number1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      boolean boolean0 = xYTaskDataset0.isTransposed();
      assertFalse(boolean0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      double double0 = xYTaskDataset0.getEndXValue(1269, 1269);
      assertEquals(1269.4, double0, 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getYValue(2826, 1269);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(taskSeriesCollection0).getSeriesKey(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection1 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(taskSeriesCollection1).clone();
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotNull(xYTaskDataset1);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertTrue(xYTaskDataset1.getNotify());
      
      boolean boolean0 = xYTaskDataset0.hasListener(xYTaskDataset1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertFalse(boolean0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertTrue(xYTaskDataset1.getNotify());
      
      double double0 = xYTaskDataset1.getXValue((-1631), 1);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals((-1631.0), double0, 0.01);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertTrue(xYTaskDataset1.getNotify());
      
      double double1 = xYTaskDataset0.getSeriesWidth();
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(0.8, double1, 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      xYTaskDataset0.datasetChanged((DatasetChangeEvent) null);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      Comparable comparable0 = xYTaskDataset0.getSeriesKey(1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNull(comparable0);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      XYTaskDataset xYTaskDataset2 = (XYTaskDataset)xYTaskDataset1.clone();
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotNull(xYTaskDataset2);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertNotSame(xYTaskDataset1, xYTaskDataset2);
      assertNotSame(xYTaskDataset2, xYTaskDataset0);
      assertNotSame(xYTaskDataset2, xYTaskDataset1);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0.8, xYTaskDataset2.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset2.isTransposed());
      assertTrue(xYTaskDataset2.getNotify());
      
      double double2 = xYTaskDataset0.getStartXValue(1002, 1002);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset2));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset0, xYTaskDataset2);
      assertEquals(1001.6, double2, 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(taskSeriesCollection0).clone();
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      XYTaskDataset xYTaskDataset1 = (XYTaskDataset)xYTaskDataset0.clone();
      assertNotNull(xYTaskDataset1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      
      XYTaskDataset xYTaskDataset2 = (XYTaskDataset)xYTaskDataset0.clone();
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotNull(xYTaskDataset2);
      assertNotSame(xYTaskDataset0, xYTaskDataset2);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset2, xYTaskDataset0);
      assertNotSame(xYTaskDataset2, xYTaskDataset1);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.8, xYTaskDataset2.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset2.isTransposed());
      assertTrue(xYTaskDataset2.getNotify());
      
      xYTaskDataset0.datasetChanged((DatasetChangeEvent) null);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset2));
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset2);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      xYTaskDataset0.setTransposed(true);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset2));
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset2);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      
      boolean boolean0 = xYTaskDataset0.equals((Object) null);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset2));
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset2);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertFalse(boolean0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getXValue(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number0 = xYTaskDataset0.getStartX(630, 630);
      assertNotNull(number0);
      assertEquals(629.6, number0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number1 = xYTaskDataset0.getStartX(630, 630);
      assertTrue(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(629.6, number1);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(taskSeriesCollection0).clone();
      doReturn((Comparable) null).when(taskSeriesCollection0).getSeriesKey(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      Comparable comparable0 = xYTaskDataset0.getSeriesKey(0);
      assertNull(comparable0);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      XYTaskDataset xYTaskDataset1 = (XYTaskDataset)xYTaskDataset0.clone();
      assertNotNull(xYTaskDataset1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      
      xYTaskDataset0.setTransposed(false);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      boolean boolean0 = xYTaskDataset0.equals(xYTaskDataset1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertFalse(boolean0);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      
      double double0 = xYTaskDataset0.getStartXValue(0, (-7));
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals((-0.4), double0, 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      boolean boolean0 = xYTaskDataset0.equals(datasetChangeEvent0);
      assertFalse(boolean0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XYTaskDataset xYTaskDataset0 = null;
      try {
        xYTaskDataset0 = new XYTaskDataset((TaskSeriesCollection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'tasks' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      int int0 = (-1363);
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      int int1 = 5;
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartYValue(4442, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      int int0 = 1854;
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndY(1854, 1854);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      double double0 = xYTaskDataset0.getSeriesWidth();
      assertEquals(0.8, double0, 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      Number number0 = xYTaskDataset0.getX(0, 0);
      assertFalse(number0.equals((Object)double0));
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      int int0 = (-2344);
      int int1 = 11;
      TaskSeriesCollection taskSeriesCollection1 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection1).getSeries(anyInt());
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotNull(xYTaskDataset1);
      assertFalse(xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      
      int int2 = 1800;
      // Undeclared exception!
      try { 
        xYTaskDataset1.getStartY((-1353), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      double double0 = xYTaskDataset0.getSeriesWidth();
      assertEquals(0.8, double0, 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(taskSeriesCollection0).clone();
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      int int0 = 0;
      xYTaskDataset0.setNotify(false);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.getNotify());
      
      Number number0 = xYTaskDataset0.getX(1475, 0);
      assertNotNull(number0);
      assertEquals(1475.0, number0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.getNotify());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.setSeriesWidth(487.075);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(487.075, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.getNotify());
      
      xYTaskDataset0.seriesChanged(seriesChangeEvent0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(487.075, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.getNotify());
      
      Number number1 = xYTaskDataset0.getEndX(2600, 0);
      assertFalse(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(2843.5375, number1);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(487.075, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.getNotify());
      
      XYTaskDataset xYTaskDataset1 = (XYTaskDataset)xYTaskDataset0.clone();
      assertNotNull(xYTaskDataset1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(487.075, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(487.075, xYTaskDataset1.getSeriesWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getItemCount(2600);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      TaskSeriesCollection taskSeriesCollection1 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotNull(xYTaskDataset1);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertFalse(xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      
      xYTaskDataset0.setTransposed(true);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      xYTaskDataset1.setTransposed(true);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.isTransposed());
      
      int int0 = 5;
      // Undeclared exception!
      try { 
        xYTaskDataset0.getX(5, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(taskSeriesCollection0).clone();
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      XYTaskDataset xYTaskDataset1 = (XYTaskDataset)xYTaskDataset0.clone();
      assertNotNull(xYTaskDataset1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      
      boolean boolean0 = xYTaskDataset0.isTransposed();
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertFalse(boolean0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndY(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number0 = xYTaskDataset0.getEndX((-1685), (-1685));
      assertNotNull(number0);
      assertEquals((-1684.6), number0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getItemCount(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0).when(taskSeriesCollection0).getSeriesKey(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      TaskSeriesCollection taskSeriesCollection1 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(xYTaskDataset0).when(taskSeriesCollection1).clone();
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotNull(xYTaskDataset1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      
      boolean boolean0 = xYTaskDataset0.hasListener(xYTaskDataset1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertFalse(boolean0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      
      double double0 = xYTaskDataset1.getXValue((-1631), 1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals((-1631.0), double0, 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      
      double double1 = xYTaskDataset0.getSeriesWidth();
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(0.8, double1, 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      xYTaskDataset0.datasetChanged((DatasetChangeEvent) null);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      Comparable comparable1 = xYTaskDataset0.getSeriesKey(1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotNull(comparable1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      // Undeclared exception!
      try { 
        xYTaskDataset1.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.gantt.XYTaskDataset cannot be cast to org.jfree.data.gantt.TaskSeriesCollection
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(taskSeriesCollection0).clone();
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      XYTaskDataset xYTaskDataset1 = (XYTaskDataset)xYTaskDataset0.clone();
      assertNotNull(xYTaskDataset1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      
      boolean boolean0 = xYTaskDataset0.equals(xYTaskDataset1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertFalse(boolean0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      
      xYTaskDataset0.setTransposed(true);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      int int0 = 1711;
      double double0 = xYTaskDataset0.getYValue(0, 1711);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      int int1 = 2146060530;
      double double1 = xYTaskDataset0.getYValue(2146060530, 2146060530);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(2.14606053E9, double1, 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getXValue(0, 2146060530);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(taskSeries0).getItemCount();
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(taskSeriesCollection0).toString();
      doReturn(taskSeries0).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection1 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection1).getSeries(anyInt());
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotNull(xYTaskDataset1);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertFalse(xYTaskDataset1.isTransposed());
      
      boolean boolean0 = xYTaskDataset0.equals(xYTaskDataset1);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertFalse(boolean0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertFalse(xYTaskDataset1.isTransposed());
      
      int int0 = xYTaskDataset0.getItemCount(3743);
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(0, int0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      xYTaskDataset1.setNotify(false);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertFalse(xYTaskDataset1.isTransposed());
      assertFalse(xYTaskDataset1.getNotify());
      
      TaskSeriesCollection taskSeriesCollection2 = xYTaskDataset0.getTasks();
      assertFalse(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(taskSeriesCollection2.equals((Object)taskSeriesCollection1));
      assertNotNull(taskSeriesCollection2);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertSame(taskSeriesCollection2, taskSeriesCollection0);
      assertNotSame(taskSeriesCollection2, taskSeriesCollection1);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, taskSeriesCollection2.getRowCount());
      assertFalse(taskSeriesCollection2.getNotify());
      assertEquals(0, taskSeriesCollection2.getSeriesCount());
      assertEquals(0, taskSeriesCollection2.getColumnCount());
      
      double double0 = xYTaskDataset1.getStartXValue(6, (-1163));
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(5.6, double0, 0.01);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertFalse(xYTaskDataset1.isTransposed());
      assertFalse(xYTaskDataset1.getNotify());
      
      int int1 = (-306);
      // Undeclared exception!
      try { 
        xYTaskDataset1.getY(0, (-306));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      int int0 = (-1324);
      double double0 = xYTaskDataset0.getEndXValue((-1324), (-1324));
      assertEquals((-1323.6), double0, 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      Number number0 = xYTaskDataset0.getX((-1324), (-1324));
      assertFalse(number0.equals((Object)double0));
      assertNotNull(number0);
      assertEquals((-1324.0), number0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndYValue((-1324), (-1324));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      int int0 = (-575);
      int int1 = (-302);
      boolean boolean0 = xYTaskDataset0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartYValue((-302), 776);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Task task0 = mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriod) null).when(task0).getDuration();
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn(task0).when(taskSeries0).get(anyInt());
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      int int0 = 473;
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndY(473, 473);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      doReturn((Comparable) null).when(taskSeriesCollection0).getSeriesKey(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      int int0 = (-4013);
      Comparable comparable0 = xYTaskDataset0.getSeriesKey((-4013));
      assertNull(comparable0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      
      int int1 = 5;
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartY((-4013), 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Task) null).when(taskSeries0).get(anyInt());
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      Number number0 = xYTaskDataset0.getStartX(11, 11);
      assertNotNull(number0);
      assertEquals(10.6, number0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getY(11, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TaskSeries) null).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      
      xYTaskDataset0.setTransposed(true);
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      
      DatasetGroup datasetGroup0 = xYTaskDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      xYTaskDataset0.setGroup(datasetGroup0);
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      int int0 = (-640);
      double double0 = xYTaskDataset0.getEndYValue((-640), (-640));
      assertEquals((-639.6), double0, 0.01);
      assertTrue(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertTrue(xYTaskDataset0.getNotify());
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getXValue((-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Task task0 = mock(Task.class, new ViolatedAssumptionAnswer());
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(taskSeriesCollection0).clone();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Object object0 = xYTaskDataset0.clone();
      TaskSeriesCollection taskSeriesCollection1 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(taskSeriesCollection1).clone();
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      // Undeclared exception!
      try { 
        xYTaskDataset1.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.gantt.XYTaskDataset cannot be cast to org.jfree.data.gantt.TaskSeriesCollection
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TaskSeries taskSeries0 = mock(TaskSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Task) null).when(taskSeries0).get(anyInt());
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(taskSeries0).when(taskSeriesCollection0).getSeries(anyInt());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.getStartXValue((-535), (-3411));
      xYTaskDataset0.removeChangeListener((DatasetChangeListener) null);
      xYTaskDataset0.getX(0, 0);
      xYTaskDataset0.setTransposed(false);
      xYTaskDataset0.validateObject();
      xYTaskDataset0.isTransposed();
      xYTaskDataset0.isTransposed();
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      xYTaskDataset0.seriesChanged(seriesChangeEvent0);
      xYTaskDataset0.setTransposed(true);
      xYTaskDataset0.getStartY(0, 3600);
      xYTaskDataset0.isTransposed();
      xYTaskDataset0.setSeriesWidth(2.0);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getX(0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }
}
