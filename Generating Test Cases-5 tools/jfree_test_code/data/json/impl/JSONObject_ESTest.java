/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:40:12 GMT 2023
 */

package org.jfree.data.json.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Writer;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.json.impl.JSONObject;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "X2$P|";
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      String string1 = jSONObject0.toJSONString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string1);
      
      Object object0 = jSONObject0.putIfAbsent("X2$P|", "X2$P|");
      assertNull(object0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.size());
      
      String string2 = JSONObject.toString("X2$P|", (Object) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\"X2$P|\":null", string2);
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      BiFunction<String, String, Object> biFunction0 = (BiFunction<String, String, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(jSONObject0).when(biFunction0).apply(anyString() , anyString());
      JSONObject jSONObject1 = (JSONObject)jSONObject0.compute("X2$P|", biFunction0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.size());
      assertEquals(1, jSONObject1.size());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      // Undeclared exception!
      try { 
        JSONObject.writeJSONString((Map) jSONObject0, writer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      Object object0 = jSONObject0.remove((Object) null);
      assertNull(object0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = jSONObject0.remove((Object) "`\"06H", (Object) "`\"06H");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertFalse(boolean0);
      
      Object object1 = jSONObject0.putIfAbsent("F~|k(D\"ZJD}:Aiy", "5/`IHxW*5kn");
      assertNull(object1);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      
      jSONObject0.writeJSONString(writer0);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      
      String string0 = jSONObject0.toJSONString();
      assertNotNull(string0);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals("{\"F~|k(D\\\"ZJD}:A\\u007Fiy\":\"5\\/`IHxW*5kn\"}", string0);
      
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONObject0.writeJSONString(writer1);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      
      Writer writer2 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONObject0.writeJSONString(writer2);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      
      String string1 = JSONObject.toJSONString((Map) jSONObject1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals("{}", string1);
      
      JSONObject jSONObject2 = (JSONObject)jSONObject1.clone();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotNull(jSONObject2);
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.size());
      assertNotSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      
      boolean boolean1 = jSONObject1.replace((Object) "", (Object) "{\"F~|k(D\"ZJD}:Aiy\":\"5/`IHxW*5kn\"}", (Object) jSONObject2);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.equals((Object)jSONObject2));
      assertTrue(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertTrue(boolean1 == boolean0);
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.size());
      assertNotSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(boolean1);
      
      String string2 = jSONObject0.toJSONString();
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertEquals("{\"F~|k(D\\\"ZJD}:A\\u007Fiy\":\"5\\/`IHxW*5kn\"}", string2);
      
      String string3 = JSONObject.toJSONString((Map) jSONObject0);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertNotNull(string3);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertEquals("{\"F~|k(D\\\"ZJD}:A\\u007Fiy\":\"5\\/`IHxW*5kn\"}", string3);
      
      String string4 = JSONObject.toJSONString((Map) jSONObject1);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.equals((Object)jSONObject2));
      assertNotNull(string4);
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertNotSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals("{}", string4);
      
      Writer writer3 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONObject.writeJSONString((Map) jSONObject1, writer3);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.equals((Object)jSONObject2));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertNotSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      
      Writer writer4 = null;
      // Undeclared exception!
      try { 
        jSONObject0.writeJSONString((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      Writer writer1 = null;
      // Undeclared exception!
      try { 
        JSONObject.writeJSONString((Map) jSONObject0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      BiFunction<Integer, Integer, Object> biFunction0 = (BiFunction<Integer, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jSONObject0.replaceAll(biFunction0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      jSONObject0.writeJSONString(writer0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      JSONObject jSONObject1 = (JSONObject)jSONObject0.clone();
      assertTrue(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      
      Object object0 = null;
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = jSONObject0.computeIfPresent((Object) null, biFunction1);
      assertTrue(jSONObject0.equals((Object)jSONObject1));
      assertNull(object1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotSame(jSONObject0, jSONObject1);
      
      Object object2 = jSONObject0.getOrDefault(jSONObject1, (Object) null);
      assertTrue(jSONObject0.equals((Object)jSONObject1));
      assertTrue(jSONObject1.equals((Object)jSONObject0));
      assertNull(object2);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      
      BiFunction<String, String, String> biFunction2 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSONObject0.merge(jSONObject1, (Object) null, biFunction2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = JSONObject.toString("", (Object) "");
      assertNotNull(string0);
      assertEquals("\"\":\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      Object object0 = jSONObject0.put((Object) null, (Object) null);
      assertNull(object0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.size());
      
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.size());
      assertEquals("{\"null\":null}", string1);
      
      Object object1 = jSONObject0.put("\"\":\"\"", "\"\":\"\"");
      assertNull(object1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.size());
      
      String string2 = jSONObject0.toJSONString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.size());
      assertEquals("{\"null\":null,\"\\\"\\\":\\\"\\\"\":\"\\\"\\\":\\\"\\\"\"}", string2);
      
      String string3 = jSONObject0.toString();
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.size());
      assertEquals("{\"null\":null,\"\\\"\\\":\\\"\\\"\":\"\\\"\\\":\\\"\\\"\"}", string3);
      
      String string4 = JSONObject.toString("{\"null\":null,\"\"\":\"\"\":\"\"\":\"\"\"}", (Object) "\"\":\"\"");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("\"{\\\"null\\\":null,\\\"\\\"\\\":\\\"\\\"\\\":\\\"\\\"\\\":\\\"\\\"\\\"}\":\"\\\"\\\":\\\"\\\"\"", string4);
      
      String string5 = jSONObject0.toString();
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.size());
      assertEquals("{\"null\":null,\"\\\"\\\":\\\"\\\"\":\"\\\"\\\":\\\"\\\"\"}", string5);
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONObject0.writeJSONString(writer0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.size());
      
      Object object2 = jSONObject0.getOrDefault((Object) null, "\"{\"null\":null,\"\\\"\\\":\\\"\\\"\":\"\\\"\\\":\\\"\\\"\"}\":\"\"\":\"\"\"");
      assertNull(object2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.size());
      
      Object object3 = jSONObject0.putIfAbsent("{\"null\":null,\"\"\":\"\"\":\"\"\":\"\"\"}", (Object) null);
      assertNull(object3);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.size());
      
      Object object4 = jSONObject0.replace((Object) "!Qvti(", (Object) null);
      assertNull(object4);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.size());
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONObject.writeJSONString((Map) jSONObject1, writer1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotSame(jSONObject1, jSONObject0);
      
      String string6 = JSONObject.toJSONString((Map) jSONObject0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotNull(string6);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.size());
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals("{\"null\":null,\"\\\"\\\":\\\"\\\"\":\"\\\"\\\":\\\"\\\"\",\"{\\\"null\\\":null,\\\"\\\"\\\":\\\"\\\"\\\":\\\"\\\"\\\":\\\"\\\"\\\"}\":null}", string6);
      
      Writer writer2 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONObject.writeJSONString((Map) jSONObject0, writer2);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.size());
      assertNotSame(jSONObject0, jSONObject1);
      
      Writer writer3 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONObject.writeJSONString((Map) jSONObject0, writer3);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.size());
      assertNotSame(jSONObject0, jSONObject1);
      
      String string7 = JSONObject.toJSONString((Map) jSONObject1);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(string7);
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals("{}", string7);
      
      String string8 = jSONObject0.toJSONString();
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.size());
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals("{\"null\":null,\"\\\"\\\":\\\"\\\"\":\"\\\"\\\":\\\"\\\"\",\"{\\\"null\\\":null,\\\"\\\"\\\":\\\"\\\"\\\":\\\"\\\"\\\":\\\"\\\"\\\"}\":null}", string8);
      
      Writer writer4 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONObject.writeJSONString((Map) jSONObject1, writer4);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotSame(jSONObject1, jSONObject0);
      
      String string9 = jSONObject0.toString();
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertNotNull(string9);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.size());
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals("{\"null\":null,\"\\\"\\\":\\\"\\\"\":\"\\\"\\\":\\\"\\\"\",\"{\\\"null\\\":null,\\\"\\\"\\\":\\\"\\\"\\\":\\\"\\\"\\\":\\\"\\\"\\\"}\":null}", string9);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = JSONObject.toJSONString((Map) null);
      assertNotNull(string0);
      assertEquals("null", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      String string1 = jSONObject0.toJSONString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string1);
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONObject.writeJSONString((Map) null, writer0);
      String string2 = jSONObject0.toJSONString();
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string2);
      
      boolean boolean0 = jSONObject0.remove((Object) "{}", (Object) "HX u1>eUA}");
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(boolean0);
      
      String string3 = JSONObject.toJSONString((Map) jSONObject0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string3);
      
      Object object0 = jSONObject0.remove((Object) "{}");
      assertNull(object0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      String string4 = JSONObject.toString("{}", (Object) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("\"{}\":null", string4);
      
      String string5 = JSONObject.toString(".R'w2", (Object) jSONObject0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("\".R'w2\":{}", string5);
      
      String string6 = jSONObject0.toJSONString();
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string6);
      
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONObject.writeJSONString((Map) jSONObject0, writer1);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      String string7 = JSONObject.toJSONString((Map) jSONObject0);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string7);
      
      String string8 = JSONObject.toJSONString((Map) jSONObject0);
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string8);
      
      String string9 = jSONObject0.toJSONString();
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string9);
      
      String string10 = jSONObject0.toJSONString();
      assertTrue(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string1));
      assertNotNull(string10);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string10);
      
      String string11 = JSONObject.toJSONString((Map) null);
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertNotNull(string11);
      assertEquals("null", string11);
      
      String string12 = jSONObject0.toJSONString();
      assertTrue(string12.equals((Object)string6));
      assertTrue(string12.equals((Object)string3));
      assertTrue(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string11));
      assertTrue(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string4));
      assertTrue(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string5));
      assertTrue(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string0));
      assertTrue(string12.equals((Object)string10));
      assertTrue(string12.equals((Object)string1));
      assertNotNull(string12);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string12);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      BiFunction<Object, String, Integer> biFunction0 = (BiFunction<Object, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      Object object0 = jSONObject0.compute("TS93NE*P", biFunction0);
      assertNull(object0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONObject.writeJSONString((Map) jSONObject0, writer0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      Object object1 = jSONObject0.replace((Object) null, (Object) null);
      assertNull(object1);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      Object object2 = jSONObject0.get("im(~M^F3HA\"~&Pz");
      assertNull(object2);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string0);
      
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object3 = jSONObject0.merge((Object) null, "im(~M^F3HA\"~&Pz", biFunction1);
      assertFalse(object3.equals((Object)string0));
      assertNotNull(object3);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals("im(~M^F3HA\"~&Pz", object3);
      
      Object object4 = jSONObject0.put((Object) null, (Object) null);
      assertFalse(object4.equals((Object)string0));
      assertNotNull(object4);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals("im(~M^F3HA\"~&Pz", object4);
      
      String string1 = jSONObject0.toJSONString();
      assertFalse(string1.equals((Object)object4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)object3));
      assertNotNull(string1);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals("{\"null\":null}", string1);
      
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONObject0.writeJSONString(writer1);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      
      String string2 = JSONObject.toString("}PXene0QH", (Object) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)object4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)object3));
      assertNotNull(string2);
      assertEquals("\"}PXene0QH\":null", string2);
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      
      String string3 = JSONObject.toJSONString((Map) jSONObject1);
      assertFalse(string3.equals((Object)object3));
      assertFalse(string3.equals((Object)object4));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(string3);
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals("{}", string3);
      
      String string4 = JSONObject.toJSONString((Map) jSONObject1);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)object4));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)object3));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(string4);
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals("{}", string4);
      
      String string5 = JSONObject.toJSONString((Map) jSONObject1);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)object4));
      assertFalse(string5.equals((Object)object3));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(string5);
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals("{}", string5);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        JSONObject.writeJSONString((Map) jSONObject0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      Object object0 = jSONObject0.remove((Object) null);
      assertNull(object0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      Object object1 = jSONObject0.put((Object) null, (Object) null);
      assertNull(object1);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = (JSONObject)jSONObject0.clone();
      assertTrue(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.size());
      assertFalse(jSONObject1.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      
      Object object2 = jSONObject0.replace((Object) null, (Object) jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNull(object2);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.size());
      assertFalse(jSONObject1.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      
      JSONObject.writeJSONString((Map) jSONObject0, writer0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      
      String string0 = JSONObject.toString("", (Object) "");
      assertNotNull(string0);
      assertEquals("\"\":\"\"", string0);
      
      String string1 = jSONObject0.toJSONString();
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals("{\"null\":{\"null\":null}}", string1);
      
      String string2 = jSONObject0.toJSONString();
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals("{\"null\":{\"null\":null}}", string2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = null;
      String string1 = "org.jfree.data.json.impl.JSONObject";
      String string2 = JSONObject.toString((String) null, (Object) "org.jfree.data.json.impl.JSONObject");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\"null\":\"org.jfree.data.json.impl.JSONObject\"", string2);
      
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      Function<String, Object> function0 = (Function<String, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      BiFunction<Integer, String, Object> biFunction0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.computeIfPresent((Object) null, (BiFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.toJSONString();
      jSONObject0.toString();
      jSONObject0.putIfAbsent("tE", "{}");
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      jSONObject0.computeIfAbsent("{}", function0);
      jSONObject0.remove((Object) null);
      jSONObject0.remove((Object) "{}");
      JSONObject.writeJSONString((Map) jSONObject0, writer0);
      jSONObject0.toString();
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      Writer writer2 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONObject.writeJSONString((Map) jSONObject0, writer2);
      jSONObject0.writeJSONString(writer1);
      JSONObject.toString("{}", (Object) "{\"tE\":\"{}\"}");
      Writer writer3 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONObject.writeJSONString((Map) jSONObject0, writer3);
      JSONObject.toString("", (Object) null);
      JSONObject.toJSONString((Map) jSONObject0);
      Writer writer4 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONObject.writeJSONString((Map) jSONObject0, writer4);
      JSONObject.toJSONString((Map) jSONObject0);
      jSONObject0.toJSONString();
      jSONObject0.toString();
      Writer writer5 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONObject0.writeJSONString(writer5);
      jSONObject0.toJSONString();
      jSONObject0.toString();
      jSONObject0.toString();
      String string0 = jSONObject0.toString();
      assertEquals("{\"tE\":\"{}\"}", string0);
      
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.toJSONString((Map) jSONObject1);
      String string1 = JSONObject.toString("", (Object) "");
      assertEquals("\"\":\"\"", string1);
  }
}
