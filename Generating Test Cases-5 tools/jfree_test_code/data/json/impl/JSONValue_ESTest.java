/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:15:02 GMT 2023
 */

package org.jfree.data.json.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.json.impl.JSONArray;
import org.jfree.data.json.impl.JSONObject;
import org.jfree.data.json.impl.JSONValue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONValue_ESTest extends JSONValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONValue.escape((String) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONValue jSONValue0 = new JSONValue();
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      JSONValue.writeJSONString(jSONArray0, stringWriter0);
      Boolean boolean0 = Boolean.TRUE;
      JSONValue.toJSONString(boolean0);
      JSONValue.writeJSONString(boolean0, stringWriter0);
      Byte byte0 = new Byte((byte)0);
      JSONValue.toJSONString(byte0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Byte byte0 = new Byte((byte)27);
      StringWriter stringWriter0 = new StringWriter(0);
      JSONValue.writeJSONString(byte0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(0.0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("\b");
      StringWriter stringWriter1 = stringWriter0.append('');
      JSONValue.writeJSONString(double0, stringWriter1);
      StringBuffer stringBuffer0 = new StringBuffer("I*wM\"l@(%O~-{]I'");
      stringBuffer0.deleteCharAt(0);
      JSONValue.escape("I*wM\"l@(%O~-{]I'", stringBuffer0);
      JSONValue.escape("/");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONValue.escape("org.jfree.data.json.impl.JSONObject", (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double((-1143.4));
      Double.sum(2032.8, (-52.8318));
      Double.max(2019.992159, 2011.7);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        JSONValue.writeJSONString(double0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('Z');
      StringWriter stringWriter1 = stringWriter0.append('F');
      JSONValue.writeJSONString((Object) null, stringWriter1);
      JSONValue jSONValue0 = new JSONValue();
      JSONValue.escape("\"i0gPB=>L");
      Integer integer0 = new Integer(6);
      JSONValue.toJSONString(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = Integer.getInteger("]r1Xs@cm#%|$F4z7`:", 0);
      JSONValue.toJSONString(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONValue.toJSONString((Object) null);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "D>y\\";
      stringWriter0.write("D>y");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "null");
      stringWriter0.write(1873);
      stringWriter0.write("null");
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '5';
      charArray0[2] = '4';
      charArray0[3] = '<';
      charArray0[4] = ',';
      charArray0[5] = 'Q';
      charArray0[6] = 'W';
      charArray0[7] = '/';
      // Undeclared exception!
      try { 
        stringWriter1.write(charArray0, 1873, 1873);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 160;
      stringBuffer0.appendCodePoint(160);
      JSONValue.escape("xkSG$0", stringBuffer0);
      Long long0 = new Long(3969L);
      Long.getLong("xkSG$0", long0);
      JSONValue.toJSONString(long0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = '7';
      charArray0[2] = 'n';
      charArray0[3] = 'f';
      // Undeclared exception!
      try { 
        stringBuffer0.append(charArray0, 160, 160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONValue.escape("_G(!8(R@gfL2");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "_G(!8(R@gfL2");
      char[] charArray0 = new char[0];
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "_G(!8(R@gfL2", 1, 1);
      JSONValue.writeJSONString("_G(!8(R@gfL2", stringWriter2);
      JSONValue jSONValue0 = new JSONValue();
      StringBuffer stringBuffer0 = new StringBuffer();
      JSONValue.escape("_G(!8(R@gfL2", stringBuffer0);
      JSONValue.escape("");
      JSONValue.writeJSONString("_G(!8(R@gfL2", stringWriter2);
      JSONValue.toJSONString(stringWriter0);
      stringWriter1.close();
      JSONValue.escape("R3T7;*}/IL", stringBuffer0);
      JSONValue.toJSONString("");
      JSONValue.writeJSONString(stringWriter0, stringWriter2);
      Double double0 = new Double(0.0);
      StringWriter stringWriter3 = stringWriter1.append('$');
      stringWriter3.write("java.io.StringWriter@0000000002", 1, 1);
      JSONValue.writeJSONString(double0, stringWriter3);
      StringBuffer stringBuffer1 = new StringBuffer();
      JSONValue.escape("fIRUOV6pL(uJ4q5", stringBuffer1);
      Boolean boolean0 = Boolean.valueOf(true);
      JSONValue.writeJSONString(boolean0, stringWriter3);
      JSONValue.writeJSONString(stringWriter1, stringWriter1);
      Boolean boolean1 = Boolean.valueOf(true);
      JSONValue.toJSONString(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONValue.escape("_G(!8(R@gfL2");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "_G(!8(R@gfL2");
      char[] charArray0 = new char[0];
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "_G(!8(R@gfL2", 1, 1);
      JSONValue.writeJSONString("_G(!8(R@gfL2", stringWriter2);
      JSONValue jSONValue0 = new JSONValue();
      StringBuffer stringBuffer0 = new StringBuffer();
      JSONValue.escape("_G(!8(R@gfL2", stringBuffer0);
      JSONValue.escape("");
      JSONValue.writeJSONString("_G(!8(R@gfL2", stringWriter2);
      JSONValue.toJSONString(stringWriter0);
      stringWriter1.close();
      JSONValue.escape("R3T7;*}/IL", stringBuffer0);
      JSONValue.toJSONString("");
      JSONValue.writeJSONString(stringWriter0, stringWriter2);
      Double double0 = new Double(0.0);
      StringWriter stringWriter3 = stringWriter1.append('$');
      JSONValue.writeJSONString(double0, stringWriter3);
      StringBuffer stringBuffer1 = new StringBuffer();
      JSONValue.escape("fIRUOV6pL(uJ4q5", stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Float float0 = new Float((-1.0));
      Float.isFinite((-3892.0F));
      JSONValue.toJSONString(float0);
      JSONValue.escape("CdnYIU#-3*{b{1M");
      StringWriter stringWriter0 = new StringWriter(2743);
      stringWriter0.write("CdnYIU#-3*{b{1M");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "CdnYIU#-3*{b{1M", 0, 0);
      StringWriter stringWriter2 = stringWriter1.append('@');
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "CdnYIU#-3*{b{1M");
      JSONValue.writeJSONString("java.lang.Float@0000000001", stringWriter3);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put((Object) null, float0);
      jSONObject0.getOrDefault("java.lang.Float@0000000001", (Object) null);
      JSONValue.writeJSONString(jSONObject0, stringWriter1);
      Double double0 = Double.valueOf(2140.7);
      JSONValue.toJSONString(double0);
      StringBuffer stringBuffer0 = new StringBuffer();
      JSONValue.escape("<@u%", stringBuffer0);
      JSONValue.escape("CdnYIU#-3*{b{1M");
      JSONObject jSONObject1 = new JSONObject();
      JSONValue.toJSONString(jSONObject1);
      JSONValue.escape("");
      JSONValue.writeJSONString((Object) null, stringWriter3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Float float0 = new Float((-1.0));
      Float.sum((-1.0F), (-1.0F));
      Float.isFinite((-3892.0F));
      JSONValue.toJSONString(float0);
      JSONValue.escape("CdnYIU#-3*{b{1M");
      StringWriter stringWriter0 = new StringWriter(2743);
      stringWriter0.write("CdnYIU#-3*{b{1M");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "CdnYIU#-3*{b{1M", 0, 0);
      StringWriter stringWriter2 = stringWriter1.append('@');
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "CdnYIU#-3*{b{1M");
      JSONValue.writeJSONString("java.lang.Float@0000000001", stringWriter3);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put((Object) null, float0);
      jSONObject0.getOrDefault("java.lang.Float@0000000001", (Object) null);
      JSONValue.writeJSONString(jSONObject0, stringWriter1);
      Double double0 = Double.valueOf(2140.7);
      JSONValue.toJSONString(double0);
      StringBuffer stringBuffer0 = new StringBuffer();
      JSONValue.escape("<@u%", stringBuffer0);
      JSONValue.escape("\n");
      JSONObject jSONObject1 = new JSONObject();
      JSONValue.toJSONString(jSONObject1);
      JSONValue.escape("");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONValue jSONValue0 = new JSONValue();
      JSONValue.toJSONString(jSONValue0);
      JSONValue.escape("");
      Float float0 = new Float((-1.0F));
      Float.min((-1.0F), (-1.0F));
      JSONValue.toJSONString(float0);
      JSONValue.escape("org.jfree.data.json.impl.JSONValue@0000000001");
      JSONValue.escape("6P");
      JSONValue.escape("P<7Q!F~9Y\"N'X3");
      JSONValue.toJSONString("org.jfree.data.json.impl.JSONValue@0000000001");
      Long long0 = new Long((-1L));
      JSONValue.toJSONString(long0);
      Double double0 = new Double(0.0);
      Double.sum(1.0, (-1.0));
      JSONValue.toJSONString(double0);
      Boolean boolean0 = Boolean.TRUE;
      JSONValue.toJSONString(boolean0);
      Integer integer0 = new Integer(0);
      StringWriter stringWriter0 = new StringWriter(0);
      JSONValue.writeJSONString(integer0, stringWriter0);
      Double double1 = new Double((-1L));
      Double.min((-3966.659245712), 0.0);
      JSONValue.writeJSONString(double1, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "S@nP:.^cW");
      assertNotNull(stringBuffer0);
      assertEquals(9, stringBuffer0.length());
      assertEquals("S@nP:.^cW", stringBuffer0.toString());
      
      stringBuffer0.setLength(912);
      assertEquals("S@nP:.^cW\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(912, stringBuffer0.length());
      
      JSONValue.escape("S@nP:.^cW", stringBuffer0);
      assertEquals(921, stringBuffer0.length());
      assertEquals("S@nP:.^cW\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000S@nP:.^cW", stringBuffer0.toString());
      
      JSONValue jSONValue0 = new JSONValue();
      assertNotNull(jSONValue0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONValue.escape(" vcXz.TLK");
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " vcXz.TLK");
      JSONValue.writeJSONString(object0, stringWriter0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = '|';
      charArray0[2] = '$';
      charArray0[3] = '?';
      charArray0[4] = '_';
      charArray0[5] = 'l';
      stringBuffer0.append(charArray0);
      stringBuffer0.setCharAt(0, 'm');
      JSONValue.escape("org.jfree.data.json.impl.JSONArray", stringBuffer0);
      JSONValue.writeJSONString(" vcXz.TLK", stringWriter0);
      JSONValue.writeJSONString("org.jfree.data.json.impl.JSONArray", stringWriter1);
      Float float0 = new Float((-1917.7369F));
      JSONValue.writeJSONString(float0, stringWriter1);
      assertSame(stringWriter0, stringWriter1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(34);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      JSONValue.escape("@xj;o'Kj9J^|E|6T=7", stringBuffer0);
      assertEquals(18, stringBuffer0.length());
      assertEquals("@xj;o'Kj9J^|E|6T=7", stringWriter0.toString());
  }
}
