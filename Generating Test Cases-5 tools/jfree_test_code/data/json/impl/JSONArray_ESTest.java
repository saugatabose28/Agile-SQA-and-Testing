/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:09:06 GMT 2023
 */

package org.jfree.data.json.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.ListIterator;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.json.impl.JSONArray;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) null, writer0);
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) null, writer1);
      Writer writer2 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) null, writer2);
      Writer writer3 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) null, writer3);
      Writer writer4 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) null, writer4);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      jSONArray0.ensureCapacity(93);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      String string0 = JSONArray.toJSONString((List) jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      jSONArray0.ensureCapacity((-88));
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      String string1 = JSONArray.toJSONString((List) jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(string1.equals((Object)string0));
      assertEquals("[]", string1);
      assertNotNull(string1);
      
      jSONArray0.add(0, (Object) "[]");
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      jSONArray0.ensureCapacity(0);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      Integer integer0 = new Integer(168);
      assertEquals(168, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = jSONArray0.add((Object) integer0);
      assertEquals(2, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(boolean0);
      
      Writer writer5 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONArray0.writeJSONString(writer5);
      assertEquals(2, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      Writer writer6 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONArray0.writeJSONString(writer6);
      assertEquals(2, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      String string2 = JSONArray.toJSONString((List) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("null", string2);
      assertNotNull(string2);
      
      Writer writer7 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) jSONArray0, writer7);
      assertEquals(2, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      String string3 = jSONArray0.toString();
      assertEquals(2, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = JSONArray.toJSONString((List) jSONArray0);
      assertEquals(2, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      ListIterator listIterator0 = jSONArray0.listIterator();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      Stream stream0 = jSONArray0.parallelStream();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(stream0);
      
      boolean boolean0 = jSONArray0.remove((Object) "");
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertFalse(boolean0);
      
      String string0 = jSONArray0.toString();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = jSONArray0.add((Object) "[]");
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jSONArray0.writeJSONString(writer0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      
      String string1 = JSONArray.toJSONString((List) jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("[\"[]\"]", string1);
      assertNotNull(string1);
      
      String string2 = jSONArray0.toString();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("[\"[]\"]", string2);
      assertNotNull(string2);
      
      String string3 = JSONArray.toJSONString((List) jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("[\"[]\"]", string3);
      assertNotNull(string3);
      
      String string4 = jSONArray0.toString();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("[\"[]\"]", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = new JSONArray();
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertTrue(jSONArray2.equals((Object)jSONArray1));
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertNotNull(jSONArray2);
      
      boolean boolean0 = jSONArray1.add((Object) jSONArray2);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertTrue(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray2.forEach(consumer0);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      
      boolean boolean1 = jSONArray1.containsAll(jSONArray2);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSONArray0.addAll(0, (Collection) jSONArray1);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertTrue(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertTrue(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string0 = jSONArray0.toJSONString();
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertEquals("[[]]", string0);
      assertNotNull(string0);
      
      String string1 = jSONArray0.toString();
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertTrue(string1.equals((Object)string0));
      assertEquals("[[]]", string1);
      assertNotNull(string1);
      
      String string2 = jSONArray0.toString();
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("[[]]", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray0.sort(comparator0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      boolean boolean0 = jSONArray0.add((Object) null);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertTrue(boolean0);
      
      String string0 = JSONArray.toJSONString((List) jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) jSONArray0, writer0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) jSONArray0, writer1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Object> list0 = null;
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) null, writer0);
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) null, writer1);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 788;
      Object[] objectArray0 = jSONArray0.toArray();
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int int1 = 430;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray0.sort(comparator0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      // Undeclared exception!
      try { 
        JSONArray.writeJSONString((List) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      jSONArray0.add(0, (Object) "null");
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) jSONArray0, writer0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      
      Object[] objectArray0 = jSONArray0.toArray();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONArray0.writeJSONString(writer1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = JSONArray.toJSONString((List) null);
      assertEquals("null", string0);
      assertNotNull(string0);
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) null, writer0);
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      String string1 = JSONArray.toJSONString((List) jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(string1.equals((Object)string0));
      assertEquals("[]", string1);
      assertNotNull(string1);
      
      String string2 = jSONArray0.toString();
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("[]", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        jSONArray0.writeJSONString((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONArray0.writeJSONString(writer0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray.toJSONString((List) jSONArray0);
      jSONArray0.stream();
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONArray0.writeJSONString(writer1);
      Writer writer2 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONArray0.add((Object) "[]");
      jSONArray0.writeJSONString(writer2);
      jSONArray0.toJSONString();
      Writer writer3 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONArray0.writeJSONString(writer3);
      // Undeclared exception!
      try { 
        JSONArray.writeJSONString((List) jSONArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.writeJSONString((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) jSONArray0, writer0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray0.sort(comparator0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      boolean boolean0 = jSONArray0.add((Object) null);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertTrue(boolean0);
      
      String string0 = jSONArray0.toString();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) jSONArray0, writer0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) jSONArray0, writer1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      ListIterator listIterator0 = jSONArray0.listIterator();
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        JSONArray.writeJSONString((List) jSONArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) null, writer0);
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) null, writer1);
      Writer writer2 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) null, writer2);
      Writer writer3 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) null, writer3);
      Writer writer4 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) null, writer4);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.ensureCapacity(93);
      JSONArray.toJSONString((List) jSONArray0);
      jSONArray0.ensureCapacity((-88));
      JSONArray.toJSONString((List) jSONArray0);
      jSONArray0.add(0, (Object) "[]");
      jSONArray0.ensureCapacity(0);
      Integer integer0 = new Integer(168);
      jSONArray0.add((Object) integer0);
      Writer writer5 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONArray0.writeJSONString(writer5);
      Writer writer6 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONArray0.writeJSONString(writer6);
      JSONArray.toJSONString((List) null);
      Writer writer7 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) jSONArray0, writer7);
      String string0 = jSONArray0.toString();
      String string1 = jSONArray0.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.toString();
      jSONArray0.trimToSize();
      jSONArray0.clone();
      jSONArray0.stream();
      jSONArray0.clear();
      jSONArray0.toJSONString();
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      Writer writer1 = mock(Writer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSONArray0.remove((-5214));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONString();
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONArray0.writeJSONString(writer0);
      assertTrue(jSONArray0.isEmpty());
  }
}
