/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:59:41 GMT 2023
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.statistics.Statistics;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statistics_ESTest extends Statistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      double double0 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(2, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      numberArray0[0] = (Number) Double.NaN;
      numberArray0[1] = (Number) Double.NaN;
      double double1 = Statistics.calculateMean(numberArray0, true);
      assertEquals(2, numberArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      Number[] numberArray1 = new Number[2];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      double double2 = Statistics.calculateMean(numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotSame(numberArray0, numberArray1);
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      numberArray1[0] = (Number) Double.NaN;
      double double3 = Statistics.calculateMedian((List) null);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      
      numberArray1[1] = (Number) Double.NaN;
      double double4 = Statistics.getSlope(numberArray0, numberArray1);
      assertEquals(2, numberArray0.length);
      assertEquals(2, numberArray1.length);
      assertNotSame(numberArray0, numberArray1);
      assertNotSame(numberArray1, numberArray0);
      assertEquals(Double.NaN, double4, 0.01);
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      
      double double5 = Statistics.calculateMean(numberArray1);
      assertEquals(2, numberArray1.length);
      assertNotSame(numberArray1, numberArray0);
      assertEquals(Double.NaN, double5, 0.01);
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      double double0 = Statistics.calculateMean(numberArray0, true);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Statistics.getSlope(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int int0 = 0;
      double[][] doubleArray0 = Statistics.getMovingAverage(numberArray0, numberArray0, 0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(0, numberArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double2 = Statistics.calculateMean(numberArray0, true);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = Statistics.calculateMean(numberArray0, true);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      
      Number[] numberArray1 = new Number[0];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      double double4 = Statistics.getCorrelation(numberArray1, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, numberArray1.length);
      assertNotSame(numberArray0, numberArray1);
      assertNotSame(numberArray1, numberArray0);
      assertEquals(Double.NaN, double4, 0.01);
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      
      boolean boolean0 = false;
      double double5 = Statistics.calculateMean(numberArray0, false);
      assertEquals(0, numberArray0.length);
      assertNotSame(numberArray0, numberArray1);
      assertEquals(Double.NaN, double5, 0.01);
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray0));
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      List<Byte> list0 = null;
      int int1 = 667;
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 667, 667, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Byte> list0 = null;
      double double0 = Statistics.calculateMedian((List) null);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = false;
      double double1 = Statistics.calculateMedian((List) null, false);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      Number[] numberArray0 = new Number[0];
      // Undeclared exception!
      try { 
        Statistics.getLinearFit((Number[]) null, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xData' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Number[] numberArray0 = new Number[1];
      double double0 = Statistics.calculateMean(numberArray0, true);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      numberArray0[0] = (Number) Double.NaN;
      Number[] numberArray1 = new Number[2];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      double double1 = Statistics.getSlope(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotSame(numberArray0, numberArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertEquals(double1, double0, 0.01);
      
      numberArray1[0] = (Number) Double.NaN;
      // Undeclared exception!
      try { 
        Statistics.getSlope(numberArray1, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Number[] numberArray0 = new Number[1];
      List<Byte> list0 = null;
      double double0 = Statistics.calculateMedian((List) null, true);
      assertEquals(Double.NaN, double0, 0.01);
      
      numberArray0[0] = (Number) Double.NaN;
      double[] doubleArray0 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, numberArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      Number[] numberArray1 = new Number[1];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      double double1 = Statistics.calculateMean(numberArray0, true);
      assertEquals(1, numberArray0.length);
      assertNotSame(numberArray0, numberArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertEquals(double1, double0, 0.01);
      
      double double2 = Statistics.calculateMean(numberArray1);
      assertEquals(1, numberArray1.length);
      assertNotSame(numberArray1, numberArray0);
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = Statistics.getCorrelation(numberArray1, numberArray1);
      assertEquals(1, numberArray1.length);
      assertNotSame(numberArray1, numberArray0);
      assertEquals(Double.NaN, double3, 0.01);
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      
      // Undeclared exception!
      try { 
        Statistics.getLinearFit(numberArray1, numberArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List<Byte> list0 = null;
      double double0 = Statistics.calculateMedian((List) null);
      assertEquals(Double.NaN, double0, 0.01);
      
      Number[] numberArray0 = new Number[3];
      Number[] numberArray1 = new Number[1];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      double double1 = Statistics.calculateMean(numberArray1);
      assertEquals(1, numberArray1.length);
      assertNotSame(numberArray1, numberArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertEquals(double1, double0, 0.01);
      
      numberArray1[0] = (Number) Double.NaN;
      // Undeclared exception!
      try { 
        Statistics.getSlope(numberArray1, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      double double0 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      numberArray0[0] = (Number) Double.NaN;
      double double1 = Statistics.calculateMean(numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      numberArray0[1] = (Number) Double.NaN;
      double double2 = Statistics.calculateMean(numberArray0, true);
      assertEquals(3, numberArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      numberArray0[2] = (Number) Double.NaN;
      double double3 = Statistics.calculateMean(numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      
      double double4 = Statistics.getSlope(numberArray0, numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      
      double double5 = Statistics.calculateMean(numberArray0, true);
      assertEquals(3, numberArray0.length);
      assertEquals(Double.NaN, double5, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      
      double double6 = Statistics.getStdDev(numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(Double.NaN, double6, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double0, 0.01);
      
      double double7 = Statistics.calculateMean(numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(Double.NaN, double7, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double3, 0.01);
      
      double double8 = Statistics.calculateMean(numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(Double.NaN, double8, 0.01);
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double6, 0.01);
      assertEquals(double8, double7, 0.01);
      
      Number[] numberArray1 = new Number[0];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage(numberArray0, numberArray1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Number[] numberArray0 = new Number[1];
      Number[] numberArray1 = new Number[0];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      // Undeclared exception!
      try { 
        Statistics.getCorrelation(numberArray1, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'data1' and 'data2' arrays must have same length.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      List<Float> list0 = null;
      int int0 = 773;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 1, 773, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Number[] numberArray0 = new Number[4];
      List<Byte> list0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 2749, 0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2748
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Object> list0 = null;
      int int0 = 584;
      int int1 = (-777);
      boolean boolean0 = false;
      double double0 = Statistics.calculateMedian((List) null, 584, (-777), false);
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 584, 981);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = Statistics.calculateMedian((List) null, 818, (-1010), false);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Statistics.calculateMedian((List) null);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 1628, (-1010));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2637
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = Statistics.calculateMedian((List) null, 0, (-1));
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Statistics.getLinearFit((Number[]) null, (Number[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xData' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Number[] numberArray0 = null;
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage((Number[]) null, (Number[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      List<Integer> list0 = null;
      boolean boolean0 = false;
      double double0 = Statistics.calculateMedian((List) null, false);
      assertEquals(Double.NaN, double0, 0.01);
      
      numberArray0[0] = (Number) Double.NaN;
      double double1 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(2, numberArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      numberArray0[1] = (Number) Double.NaN;
      boolean boolean1 = false;
      double double2 = Statistics.calculateMean(numberArray0, false);
      assertEquals(2, numberArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Collection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      boolean boolean0 = false;
      double double0 = Statistics.calculateMean(numberArray0, false);
      assertEquals(3, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      numberArray0[0] = (Number) Double.NaN;
      // Undeclared exception!
      try { 
        Statistics.getSlope(numberArray0, numberArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 3881, 3881, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      // Undeclared exception!
      try { 
        Statistics.getStdDev(numberArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List<Byte> list0 = null;
      int int0 = (-2473);
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 2, (-2473));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2474
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Number[] numberArray0 = new Number[1];
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Collection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      double double0 = Statistics.getSlope(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Statistics.calculateMean(numberArray0, true);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      Collection<String> collection0 = null;
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Collection) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Number[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      double double0 = Statistics.getSlope(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      Number[] numberArray1 = new Number[0];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage(numberArray0, numberArray1, (-429));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -429
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Number[] numberArray0 = new Number[6];
      List<Float> list0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, (-1), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Number[] numberArray0 = new Number[8];
      Number[] numberArray1 = new Number[0];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      // Undeclared exception!
      try { 
        Statistics.getCorrelation(numberArray0, numberArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'data1' and 'data2' arrays must have same length.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      double double0 = Statistics.getSlope(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Statistics.getCorrelation((Number[]) null, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data1' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Number[] numberArray0 = null;
      // Undeclared exception!
      try { 
        Statistics.getCorrelation((Number[]) null, (Number[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data1' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.getLinearFit((Number[]) null, (Number[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xData' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Number[] numberArray0 = null;
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Number[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      boolean boolean0 = true;
      double double0 = Statistics.calculateMean(numberArray0, true);
      assertEquals(2, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      numberArray0[0] = (Number) Double.NaN;
      // Undeclared exception!
      try { 
        Statistics.getSlope(numberArray0, numberArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      double[] doubleArray0 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(0, numberArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[][] doubleArray1 = Statistics.getMovingAverage(numberArray0, numberArray0, 0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = Statistics.getMovingAverage(numberArray0, numberArray0, 0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        Statistics.getSlope(numberArray0, (Number[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'yData' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      double double0 = Statistics.calculateMean(numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Statistics.calculateMean(numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[][] doubleArray0 = Statistics.getMovingAverage(numberArray0, numberArray0, 0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double double2 = Statistics.calculateMean(numberArray0, false);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = Statistics.calculateMean(numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      
      boolean boolean0 = false;
      double double4 = Statistics.calculateMean(numberArray0, false);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      
      double[][] doubleArray1 = Statistics.getMovingAverage(numberArray0, numberArray0, 0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        Statistics.getStdDev(numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zero length 'data' array.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      double double0 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(2, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      numberArray0[0] = (Number) Double.NaN;
      double double1 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(2, numberArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      numberArray0[1] = (Number) Double.NaN;
      double double2 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(2, numberArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      Number[] numberArray1 = null;
      // Undeclared exception!
      try { 
        Statistics.getSlope((Number[]) null, (Number[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xData' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      List<Object> list0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 0, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      // Undeclared exception!
      try { 
        Statistics.getStdDev(numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zero length 'data' array.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Number[] numberArray0 = new Number[1];
      double double0 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      numberArray0[0] = (Number) Double.NaN;
      double[] doubleArray0 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, numberArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double double1 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, numberArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double2 = Statistics.getStdDev(numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double double3 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      
      List<Short> list0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 393, 393, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      double double0 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(0, numberArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double double1 = Statistics.getSlope(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(0, numberArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double2 = Statistics.calculateMean(numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double[][] doubleArray2 = Statistics.getMovingAverage(numberArray0, numberArray0, 0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double3 = Statistics.calculateMean(numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      
      double[][] doubleArray3 = Statistics.getMovingAverage(numberArray0, numberArray0, 0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      
      double double4 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      
      double double5 = Statistics.calculateMean(numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double5, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      
      List<Byte> list0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, (-1409), 1756, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      double double0 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(2, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      numberArray0[0] = (Number) Double.NaN;
      List<Long> list0 = null;
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 3599, 3599, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Number[] numberArray0 = null;
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Number[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      double double0 = Statistics.getSlope(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Statistics.getStdDev(numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zero length 'data' array.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Number[] numberArray0 = new Number[1];
      double double0 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      numberArray0[0] = (Number) Double.NaN;
      double[] doubleArray0 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, numberArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double double1 = Statistics.getStdDev(numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = Statistics.calculateMean(numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double double3 = Statistics.getSlope(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      
      double[] doubleArray1 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, numberArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int int0 = 1628;
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage(numberArray0, numberArray0, 1628);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period can't be longer than dataset.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      double double0 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(0, numberArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double double1 = Statistics.getSlope(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(0, numberArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double2 = Statistics.calculateMean(numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double[][] doubleArray2 = Statistics.getMovingAverage(numberArray0, numberArray0, 0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double3 = Statistics.calculateMean(numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      
      double[][] doubleArray3 = Statistics.getMovingAverage(numberArray0, numberArray0, 0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      
      double double4 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      
      double double5 = Statistics.calculateMean(numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(Double.NaN, double5, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      
      List<Byte> list0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 0, 1756, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Number[] numberArray0 = new Number[1];
      double double0 = Statistics.calculateMean(numberArray0, false);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      numberArray0[0] = (Number) Double.NaN;
      double[] doubleArray0 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, numberArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[][] doubleArray1 = Statistics.getMovingAverage(numberArray0, numberArray0, 0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(1, numberArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = Statistics.getMovingAverage(numberArray0, numberArray0, 0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      
      double[][] doubleArray4 = Statistics.getMovingAverage(numberArray0, numberArray0, 0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, doubleArray4.length);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotNull(doubleArray4);
      
      double double1 = Statistics.calculateMean(numberArray0, false);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = Statistics.calculateMean(numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = Statistics.calculateMean(numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      
      double[] doubleArray5 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray5, 0.01);
      assertEquals(1, numberArray0.length);
      assertEquals(2, doubleArray5.length);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertNotNull(doubleArray5);
      
      double[] doubleArray6 = Statistics.getLinearFit(numberArray0, numberArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray6, 0.01);
      assertEquals(1, numberArray0.length);
      assertEquals(2, doubleArray6.length);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray5);
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertNotNull(doubleArray6);
      
      double double4 = Statistics.calculateMedian((List) null, false);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      
      double double5 = Statistics.calculateMean(numberArray0, false);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double5, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      
      double double6 = Statistics.calculateMedian((List) null);
      assertEquals(Double.NaN, double6, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double5, 0.01);
      
      double double7 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double7, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double3, 0.01);
      
      double double8 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, double8, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double6, 0.01);
      assertEquals(double8, double7, 0.01);
      
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Collection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      List<Long> list0 = null;
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 1, 1080, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1;
      List<Long> list0 = null;
      int int1 = 0;
      Statistics.calculateMedian((List) null, 1, 0);
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Collection) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
