/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:48:16 GMT 2023
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EventListener;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.KeyedObjects2D;
import org.jfree.data.Range;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.MeanAndStandardDeviation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultStatisticalCategoryDataset_ESTest extends DefaultStatisticalCategoryDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(boolean0);
      
      defaultStatisticalCategoryDataset0.setNotify(true);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      int int0 = (-1490);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = (DefaultStatisticalCategoryDataset)defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeRow(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      defaultStatisticalCategoryDataset0.setNotify(false);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<KeyedObjects2D> comparable1 = (Comparable<KeyedObjects2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.add(Double.NaN, (-1.0), comparable1, comparable1);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      Comparable<MeanAndStandardDeviation> comparable2 = (Comparable<MeanAndStandardDeviation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultStatisticalCategoryDataset0.getColumnIndex(comparable2);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals((-1), int0);
      
      int int1 = defaultStatisticalCategoryDataset0.getRowIndex(comparable0);
      assertTrue(int1 == int0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals((-1), int1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = (DefaultStatisticalCategoryDataset)defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset1.getColumnCount());
      assertFalse(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset1.getRowCount());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals(defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset1.getColumnCount());
      assertFalse(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(boolean0);
      
      defaultStatisticalCategoryDataset0.clear();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      int int2 = 32;
      int int3 = defaultStatisticalCategoryDataset0.getRowCount();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, int3);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.add((Number) 0, (Number) null, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Comparable<DefaultStatisticalCategoryDataset> comparable0 = (Comparable<DefaultStatisticalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.setNotify(true);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      defaultStatisticalCategoryDataset0.setNotify(true);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable2 = null;
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getRowIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.add(0.0, 0.0, comparable0, comparable0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      defaultStatisticalCategoryDataset0.addChangeListener(datasetChangeListener1);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      defaultStatisticalCategoryDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Comparable<KeyedObjects2D> comparable1 = (Comparable<KeyedObjects2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.add((-5546.569297805), (-5546.569297805), comparable1, comparable1);
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getMeanValue(1762, 1762);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1762, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      defaultStatisticalCategoryDataset0.add(0.0, 1405.0722417102, comparable0, comparable0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      Comparable<DefaultStatisticalCategoryDataset> comparable1 = (Comparable<DefaultStatisticalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      List list1 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      
      defaultStatisticalCategoryDataset0.removeColumn(0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeRow(comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (null) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      defaultStatisticalCategoryDataset0.add(Double.NaN, Double.NaN, comparable0, comparable0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = (DefaultStatisticalCategoryDataset)defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset1.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset1.getRowCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset2 = (DefaultStatisticalCategoryDataset)defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset2);
      assertNotSame(defaultStatisticalCategoryDataset2, defaultStatisticalCategoryDataset0);
      assertNotSame(defaultStatisticalCategoryDataset2, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset2);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset2.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset2.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset2.getNotify());
      
      Comparable comparable1 = defaultStatisticalCategoryDataset0.getColumnKey(0);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset2);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset2));
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotNull(comparable1);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      int int0 = 1367;
      defaultStatisticalCategoryDataset0.clear();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset2);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset2));
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getRowKey(1367);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1367, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = (DefaultStatisticalCategoryDataset)defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.hasListener(eventListener0);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertFalse(boolean0);
      
      int int0 = (-287);
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getColumnKey((-287));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeRow((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      defaultStatisticalCategoryDataset0.clear();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Comparable<DefaultStatisticalCategoryDataset> comparable0 = (Comparable<DefaultStatisticalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      List list1 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      defaultStatisticalCategoryDataset0.add((Number) null, (Number) null, comparable0, comparable0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      List list2 = defaultStatisticalCategoryDataset0.getColumnKeys();
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnIndex(comparable1);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeRow((Comparable) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (-1) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      defaultStatisticalCategoryDataset0.validateObject();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getStdDevValue((Comparable) comparable0, (Comparable) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (null) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Comparable<KeyedObjects2D> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.add(0.0, 0.0, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Comparable<KeyedObjects2D> comparable0 = null;
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = defaultStatisticalCategoryDataset0.hasListener(eventListener0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertFalse(boolean0);
      
      Comparable<DefaultStatisticalCategoryDataset> comparable1 = (Comparable<DefaultStatisticalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getValue((Comparable) null, comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals((Object) null);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertFalse(boolean0);
      
      defaultStatisticalCategoryDataset0.clear();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Comparable<DefaultStatisticalCategoryDataset> comparable0 = (Comparable<DefaultStatisticalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getStdDevValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (null) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals(defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertTrue(boolean0);
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, int0);
      
      List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotNull(list0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int int1 = defaultStatisticalCategoryDataset0.getRowCount();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(int1 == int0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, int1);
      
      int int2 = defaultStatisticalCategoryDataset0.getRowCount();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, int2);
      
      Comparable<MeanAndStandardDeviation> comparable0 = (Comparable<MeanAndStandardDeviation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.add((Number) 0, (Number) 0, (Comparable) comparable0, (Comparable) comparable0);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      int int3 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, int3);
      
      int int4 = (-1047);
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset1.removeColumn((-1047));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      double double0 = defaultStatisticalCategoryDataset0.getRangeUpperBound(true);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = (DefaultStatisticalCategoryDataset)defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals(defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertTrue(boolean0);
      
      double double1 = defaultStatisticalCategoryDataset0.getRangeLowerBound(true);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, double1, 0.01);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.addChangeListener(datasetChangeListener0);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.add(998.77205, Double.NaN, comparable0, comparable0);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DatasetGroup datasetGroup0 = defaultStatisticalCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultStatisticalCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultStatisticalCategoryDataset0.add(1.0, 1.0, comparable0, comparable0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Comparable<MeanAndStandardDeviation> comparable1 = (Comparable<MeanAndStandardDeviation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.add(2290.194, (-1663.49358034261), comparable1, comparable1);
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = defaultStatisticalCategoryDataset0.hasListener(eventListener0);
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.remove((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      double double0 = defaultStatisticalCategoryDataset0.getRangeLowerBound(false);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getStdDevValue((-414), 682);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      defaultStatisticalCategoryDataset0.setNotify(false);
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<KeyedObjects2D> comparable1 = (Comparable<KeyedObjects2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.add(Double.NaN, (-1.0), comparable1, comparable1);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Comparable<MeanAndStandardDeviation> comparable2 = (Comparable<MeanAndStandardDeviation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultStatisticalCategoryDataset0.getColumnIndex(comparable2);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals((-1), int0);
      
      int int1 = defaultStatisticalCategoryDataset0.getRowIndex(comparable0);
      assertTrue(int1 == int0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals((-1), int1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = (DefaultStatisticalCategoryDataset)defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset1.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset1.getRowCount());
      assertFalse(defaultStatisticalCategoryDataset1.getNotify());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals(defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset1.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset1.getRowCount());
      assertFalse(defaultStatisticalCategoryDataset1.getNotify());
      assertTrue(boolean0);
      
      defaultStatisticalCategoryDataset0.clear();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertFalse(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      int int2 = 32;
      Comparable<String> comparable3 = null;
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getColumnIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      int int0 = defaultStatisticalCategoryDataset0.getRowCount();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, int0);
      
      int int1 = defaultStatisticalCategoryDataset0.getRowIndex(0);
      assertFalse(int1 == int0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals((-1), int1);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.remove((-1), comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (-1) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Comparable<Object> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeColumn((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, int0);
      
      int int1 = defaultStatisticalCategoryDataset0.getColumnIndex(0);
      assertFalse(int1 == int0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals((-1), int1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      
      int int2 = defaultStatisticalCategoryDataset1.getColumnCount();
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertEquals(0, int2);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int3 = defaultStatisticalCategoryDataset0.getRowIndex(comparable0);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals((-1), int3);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.add((Number) (-1), (Number) 0, (Comparable) (-1), (Comparable) comparable1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getMeanValue((-2526), (-2001));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getValue((-68), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeColumn((-3508));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Comparable<DefaultStatisticalCategoryDataset> comparable0 = (Comparable<DefaultStatisticalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getStdDevValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (null) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      defaultStatisticalCategoryDataset0.clear();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = (DefaultStatisticalCategoryDataset)defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals(defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(boolean0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNull(range0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeColumn(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = true;
      defaultStatisticalCategoryDataset0.setNotify(true);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getColumnKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getColumnKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Comparable<Object> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getStdDevValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Comparable<DefaultStatisticalCategoryDataset> comparable0 = (Comparable<DefaultStatisticalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.add(218.0, Double.POSITIVE_INFINITY, comparable0, comparable0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      int int0 = defaultStatisticalCategoryDataset0.getRowCount();
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, int0);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getValue((Comparable) 1, (Comparable) comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (1) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getMeanValue(470, (-198));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 470, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      boolean boolean0 = true;
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      int int0 = (-2604);
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getRowKey((-2604));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int int0 = defaultStatisticalCategoryDataset0.getRowCount();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getRowKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultStatisticalCategoryDataset0.getColumnIndex(comparable0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals((-1), int0);
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = defaultStatisticalCategoryDataset0.hasListener(eventListener0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertFalse(boolean0);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = defaultStatisticalCategoryDataset0.getColumnIndex(comparable1);
      assertTrue(int1 == int0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeColumn((Comparable) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Column key (-1) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getStdDevValue(2435, 2195);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2435, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeRow((-3230));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Comparable<Object> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getMeanValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeColumn(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Column key (null) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getMeanValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (null) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, int0);
      
      int int1 = defaultStatisticalCategoryDataset0.getRowIndex(0);
      assertFalse(int1 == int0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals((-1), int1);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getValue((Comparable) (-1), (Comparable) comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (-1) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Comparable<KeyedObjects2D> comparable0 = (Comparable<KeyedObjects2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultStatisticalCategoryDataset0.getColumnIndex(comparable0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getValue((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Comparable<String> comparable0 = null;
      DatasetGroup datasetGroup0 = defaultStatisticalCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultStatisticalCategoryDataset0.setGroup(datasetGroup0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getMeanValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      defaultStatisticalCategoryDataset0.validateObject();
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Comparable<DefaultStatisticalCategoryDataset> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.remove((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = (DefaultStatisticalCategoryDataset)defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals(defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      Comparable<KeyedObjects2D> comparable0 = (Comparable<KeyedObjects2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (null) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Comparable<DefaultStatisticalCategoryDataset> comparable0 = (Comparable<DefaultStatisticalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.remove(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (null) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeRow(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (null) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.add(0.0, 1405.0722417102, comparable0, comparable0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      Number number0 = defaultStatisticalCategoryDataset0.getValue(0, 0);
      assertNotNull(number0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0.0, number0);
      
      Comparable<DefaultStatisticalCategoryDataset> comparable1 = (Comparable<DefaultStatisticalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultStatisticalCategoryDataset0.getRowIndex(comparable1);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeRow((Comparable) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (-1) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = (DefaultStatisticalCategoryDataset)defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals(defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertTrue(boolean0);
      
      defaultStatisticalCategoryDataset0.setNotify(true);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      int int0 = (-1490);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset2 = (DefaultStatisticalCategoryDataset)defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset2);
      assertNotSame(defaultStatisticalCategoryDataset2, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset2, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset2);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset2.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset2.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset2.getColumnCount());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeRow(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultStatisticalCategoryDataset0.getColumnIndex(comparable1);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals((-1), int0);
      
      int int1 = defaultStatisticalCategoryDataset0.getColumnIndex((-1));
      assertTrue(int1 == int0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals((-1), int1);
      
      int int2 = defaultStatisticalCategoryDataset0.getRowIndex(comparable0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals((-1), int2);
      
      Comparable<DefaultStatisticalCategoryDataset> comparable2 = (Comparable<DefaultStatisticalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.add((-827.689113031894), 4261.761497228, (Comparable) (-1), (Comparable) comparable2);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getValue(2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.addChangeListener(datasetChangeListener0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultStatisticalCategoryDataset0.getRowIndex(comparable0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals((-1), int0);
      
      double double0 = defaultStatisticalCategoryDataset0.getRangeUpperBound(false);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getStdDevValue((-56), (-56));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset2 = (DefaultStatisticalCategoryDataset)defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset2);
      assertNotSame(defaultStatisticalCategoryDataset2, defaultStatisticalCategoryDataset0);
      assertNotSame(defaultStatisticalCategoryDataset2, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset2);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset2.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset2.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset2.getColumnCount());
      
      defaultStatisticalCategoryDataset0.setNotify(true);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset2);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset2));
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      boolean boolean0 = defaultStatisticalCategoryDataset1.equals(defaultStatisticalCategoryDataset2);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset2);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset2);
      assertNotSame(defaultStatisticalCategoryDataset2, defaultStatisticalCategoryDataset0);
      assertNotSame(defaultStatisticalCategoryDataset2, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset2));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset2));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset0));
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset2.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset2.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset2.getColumnCount());
      assertTrue(boolean0);
      
      boolean boolean1 = defaultStatisticalCategoryDataset0.equals(defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset2);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset2);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset2));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset2));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertTrue(boolean1);
      
      int int0 = defaultStatisticalCategoryDataset1.getColumnCount();
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset2);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset2));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, int0);
      
      int int1 = defaultStatisticalCategoryDataset1.getRowCount();
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset2);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset2));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertTrue(int1 == int0);
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, int1);
      
      int int2 = defaultStatisticalCategoryDataset0.getRowIndex(0);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset2);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals((-1), int2);
      
      int int3 = defaultStatisticalCategoryDataset0.getColumnIndex((-1));
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset2);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset2));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals((-1), int3);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset1.getValue((Comparable) 0, (Comparable) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (0) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.getColumnKeys();
      defaultStatisticalCategoryDataset0.clear();
      Comparable<DefaultStatisticalCategoryDataset> comparable0 = (Comparable<DefaultStatisticalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("T@cf").when(comparable0).toString();
      defaultStatisticalCategoryDataset0.getRowKeys();
      defaultStatisticalCategoryDataset0.add((Number) null, (Number) null, comparable0, comparable0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultStatisticalCategoryDataset0.getColumnKeys();
      defaultStatisticalCategoryDataset0.getColumnIndex(comparable1);
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeRow((Comparable) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (-1) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      boolean boolean0 = true;
      Comparable<MeanAndStandardDeviation> comparable0 = (Comparable<MeanAndStandardDeviation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.remove(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (null) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      int int0 = 1699;
      defaultStatisticalCategoryDataset0.getRangeBounds(true);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeRow(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (null) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }
}
