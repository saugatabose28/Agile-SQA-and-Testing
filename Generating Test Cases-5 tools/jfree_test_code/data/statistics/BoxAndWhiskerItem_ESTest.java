/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:17:58 GMT 2023
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BoxAndWhiskerItem_ESTest extends BoxAndWhiskerItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-367.01575079), (-367.01575079), (-367.01575079), (-367.01575079), (-367.01575079), (-367.01575079), (-367.01575079), 1633.224420856886, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      boolean boolean0 = boxAndWhiskerItem0.equals((Object) null);
      assertFalse(boolean0);
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNull(list0);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
      
      List list1 = boxAndWhiskerItem0.getOutliers();
      assertNull(list1);
      
      Number number0 = boxAndWhiskerItem0.getMedian();
      assertNotNull(number0);
      assertEquals((-367.01575079), number0);
      
      String string1 = boxAndWhiskerItem0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Double double0 = new Double(1633.224420856886);
      assertNotNull(double0);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals(1633.224420856886, (double)double0, 0.01);
      
      Number number1 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double0));
      assertEquals((-367.01575079), number1);
      
      Number number2 = boxAndWhiskerItem0.getQ1();
      assertNotNull(number2);
      assertTrue(number2.equals((Object)number1));
      assertFalse(number2.equals((Object)double0));
      assertTrue(number2.equals((Object)number0));
      assertEquals((-367.01575079), number2);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(number1, number0, number0, number1, number1, double0, number0, number1, (List) null);
      assertNotNull(boxAndWhiskerItem1);
      assertFalse(number0.equals((Object)double0));
      assertTrue(number0.equals((Object)number2));
      assertTrue(number0.equals((Object)number1));
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertNotEquals((double)double0, (double)number2, 0.01);
      assertNotEquals((double)double0, (double)number1, 0.01);
      assertTrue(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double0));
      assertTrue(number1.equals((Object)number2));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      boolean boolean1 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number0.equals((Object)double0));
      assertTrue(number0.equals((Object)number2));
      assertTrue(number0.equals((Object)number1));
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertNotEquals((double)double0, (double)number2, 0.01);
      assertNotEquals((double)double0, (double)number1, 0.01);
      assertTrue(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double0));
      assertTrue(number1.equals((Object)number2));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List list2 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list2);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 0.0, 1873.9281912, 0.0, 0.0, 0.0, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      boolean boolean0 = boxAndWhiskerItem0.equals(number0);
      assertFalse(boolean0);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(number0, number0, number0, number0, number0, number0, number0, number0, (List) null);
      assertNotNull(boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      boolean boolean1 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = boxAndWhiskerItem0.equals("org.jfree.data.statistics.BoxAndWhiskerItem@1[mean=0.0,median=0.0,q1=0.0,q3=0.0]");
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = boxAndWhiskerItem1.toString();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(string1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean3 = boxAndWhiskerItem0.equals(number0);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Number number1 = boxAndWhiskerItem0.getMinRegularValue();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number1.equals((Object)number0));
      assertEquals(1873.9281912, number1);
      
      Number number2 = boxAndWhiskerItem0.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number2);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number2.equals((Object)number0));
      assertFalse(number2.equals((Object)number1));
      assertEquals(0.0, number2);
      
      String string2 = boxAndWhiskerItem0.toString();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(string2);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list0);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number3 = boxAndWhiskerItem0.getMean();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number3);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number3.equals((Object)number0));
      assertTrue(number3.equals((Object)number2));
      assertFalse(number3.equals((Object)number1));
      assertEquals(0.0, number3);
      
      Number number4 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number4);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number4.equals((Object)number2));
      assertTrue(number4.equals((Object)number0));
      assertTrue(number4.equals((Object)number3));
      assertFalse(number4.equals((Object)number1));
      assertEquals(0.0, number4);
      
      String string3 = boxAndWhiskerItem0.toString();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(string3);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Number number5 = boxAndWhiskerItem0.getMedian();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number5);
      assertFalse(number5.equals((Object)number1));
      assertTrue(number5.equals((Object)number2));
      assertTrue(number5.equals((Object)number0));
      assertTrue(number5.equals((Object)number3));
      assertTrue(number5.equals((Object)number4));
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertEquals(0.0, number5);
      
      boolean boolean4 = boxAndWhiskerItem0.equals(number3);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(number3.equals((Object)number4));
      assertTrue(number3.equals((Object)number0));
      assertTrue(number3.equals((Object)number2));
      assertTrue(number3.equals((Object)number5));
      assertFalse(number3.equals((Object)number1));
      assertFalse(boolean4);
      
      List list1 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number6 = boxAndWhiskerItem0.getQ3();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number6);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number6.equals((Object)number1));
      assertTrue(number6.equals((Object)number4));
      assertTrue(number6.equals((Object)number5));
      assertTrue(number6.equals((Object)number0));
      assertTrue(number6.equals((Object)number2));
      assertTrue(number6.equals((Object)number3));
      assertEquals(0.0, number6);
      
      Number number7 = boxAndWhiskerItem0.getMinRegularValue();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number7);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number7.equals((Object)number5));
      assertFalse(number7.equals((Object)number3));
      assertFalse(number7.equals((Object)number0));
      assertFalse(number7.equals((Object)number2));
      assertFalse(number7.equals((Object)number6));
      assertFalse(number7.equals((Object)number4));
      assertEquals(1873.9281912, number7);
      
      Number number8 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number8);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number8.equals((Object)number3));
      assertFalse(number8.equals((Object)number7));
      assertTrue(number8.equals((Object)number0));
      assertTrue(number8.equals((Object)number6));
      assertTrue(number8.equals((Object)number2));
      assertFalse(number8.equals((Object)number1));
      assertTrue(number8.equals((Object)number5));
      assertEquals(0.0, number8);
      
      Number number9 = boxAndWhiskerItem0.getMedian();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number9);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number9.equals((Object)number6));
      assertFalse(number9.equals((Object)number1));
      assertTrue(number9.equals((Object)number8));
      assertTrue(number9.equals((Object)number4));
      assertFalse(number9.equals((Object)number7));
      assertTrue(number9.equals((Object)number0));
      assertTrue(number9.equals((Object)number2));
      assertTrue(number9.equals((Object)number3));
      assertEquals(0.0, number9);
      
      Number number10 = boxAndWhiskerItem0.getMedian();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number10);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number10.equals((Object)number6));
      assertFalse(number10.equals((Object)number1));
      assertTrue(number10.equals((Object)number3));
      assertTrue(number10.equals((Object)number0));
      assertTrue(number10.equals((Object)number2));
      assertFalse(number10.equals((Object)number7));
      assertTrue(number10.equals((Object)number8));
      assertTrue(number10.equals((Object)number4));
      assertEquals(0.0, number10);
      
      Number number11 = boxAndWhiskerItem1.getMean();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(number11);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number0.equals((Object)number4));
      assertFalse(number0.equals((Object)number7));
      assertTrue(number0.equals((Object)number3));
      assertTrue(number0.equals((Object)number9));
      assertTrue(number0.equals((Object)number6));
      assertTrue(number0.equals((Object)number2));
      assertTrue(number0.equals((Object)number10));
      assertFalse(number0.equals((Object)number1));
      assertTrue(number0.equals((Object)number8));
      assertTrue(number0.equals((Object)number5));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(number11.equals((Object)number7));
      assertTrue(number11.equals((Object)number3));
      assertTrue(number11.equals((Object)number9));
      assertFalse(number11.equals((Object)number1));
      assertTrue(number11.equals((Object)number2));
      assertTrue(number11.equals((Object)number8));
      assertTrue(number11.equals((Object)number5));
      assertTrue(number11.equals((Object)number6));
      assertTrue(number11.equals((Object)number10));
      assertTrue(number11.equals((Object)number4));
      assertEquals(0.0, number11);
      
      Number number12 = boxAndWhiskerItem0.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number12);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number12.equals((Object)number9));
      assertTrue(number12.equals((Object)number3));
      assertFalse(number12.equals((Object)number7));
      assertTrue(number12.equals((Object)number4));
      assertTrue(number12.equals((Object)number10));
      assertTrue(number12.equals((Object)number8));
      assertTrue(number12.equals((Object)number6));
      assertTrue(number12.equals((Object)number11));
      assertFalse(number12.equals((Object)number1));
      assertTrue(number12.equals((Object)number5));
      assertTrue(number12.equals((Object)number0));
      assertEquals(0.0, number12);
      
      List list2 = boxAndWhiskerItem1.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNull(list2);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number0.equals((Object)number4));
      assertFalse(number0.equals((Object)number7));
      assertTrue(number0.equals((Object)number3));
      assertTrue(number0.equals((Object)number9));
      assertTrue(number0.equals((Object)number12));
      assertTrue(number0.equals((Object)number6));
      assertTrue(number0.equals((Object)number2));
      assertTrue(number0.equals((Object)number10));
      assertFalse(number0.equals((Object)number1));
      assertTrue(number0.equals((Object)number8));
      assertTrue(number0.equals((Object)number5));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      Number number13 = boxAndWhiskerItem1.getQ3();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(number13);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number0.equals((Object)number4));
      assertFalse(number0.equals((Object)number7));
      assertTrue(number0.equals((Object)number3));
      assertTrue(number0.equals((Object)number9));
      assertTrue(number0.equals((Object)number12));
      assertTrue(number0.equals((Object)number6));
      assertTrue(number0.equals((Object)number2));
      assertTrue(number0.equals((Object)number10));
      assertFalse(number0.equals((Object)number1));
      assertTrue(number0.equals((Object)number8));
      assertTrue(number0.equals((Object)number5));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(number13.equals((Object)number1));
      assertTrue(number13.equals((Object)number6));
      assertTrue(number13.equals((Object)number12));
      assertTrue(number13.equals((Object)number4));
      assertTrue(number13.equals((Object)number2));
      assertTrue(number13.equals((Object)number9));
      assertTrue(number13.equals((Object)number8));
      assertFalse(number13.equals((Object)number7));
      assertTrue(number13.equals((Object)number10));
      assertTrue(number13.equals((Object)number3));
      assertTrue(number13.equals((Object)number5));
      assertEquals(0.0, number13);
      
      Number number14 = boxAndWhiskerItem1.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(number14);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number0.equals((Object)number4));
      assertFalse(number0.equals((Object)number7));
      assertTrue(number0.equals((Object)number3));
      assertTrue(number0.equals((Object)number9));
      assertTrue(number0.equals((Object)number12));
      assertTrue(number0.equals((Object)number6));
      assertTrue(number0.equals((Object)number2));
      assertTrue(number0.equals((Object)number10));
      assertFalse(number0.equals((Object)number1));
      assertTrue(number0.equals((Object)number8));
      assertTrue(number0.equals((Object)number5));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertTrue(number14.equals((Object)number4));
      assertFalse(number14.equals((Object)number7));
      assertFalse(number14.equals((Object)number1));
      assertTrue(number14.equals((Object)number6));
      assertTrue(number14.equals((Object)number10));
      assertTrue(number14.equals((Object)number9));
      assertTrue(number14.equals((Object)number12));
      assertTrue(number14.equals((Object)number8));
      assertTrue(number14.equals((Object)number5));
      assertTrue(number14.equals((Object)number2));
      assertTrue(number14.equals((Object)number3));
      assertEquals(0.0, number14);
      
      List list3 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list3);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number15 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number15);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number15.equals((Object)number5));
      assertTrue(number15.equals((Object)number3));
      assertTrue(number15.equals((Object)number9));
      assertTrue(number15.equals((Object)number4));
      assertTrue(number15.equals((Object)number2));
      assertTrue(number15.equals((Object)number12));
      assertFalse(number15.equals((Object)number1));
      assertTrue(number15.equals((Object)number8));
      assertTrue(number15.equals((Object)number6));
      assertFalse(number15.equals((Object)number7));
      assertTrue(number15.equals((Object)number10));
      assertEquals(0.0, number15);
      
      Number number16 = boxAndWhiskerItem1.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(number16);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number0.equals((Object)number4));
      assertFalse(number0.equals((Object)number7));
      assertTrue(number0.equals((Object)number3));
      assertTrue(number0.equals((Object)number9));
      assertTrue(number0.equals((Object)number12));
      assertTrue(number0.equals((Object)number6));
      assertTrue(number0.equals((Object)number2));
      assertTrue(number0.equals((Object)number10));
      assertFalse(number0.equals((Object)number1));
      assertTrue(number0.equals((Object)number8));
      assertTrue(number0.equals((Object)number5));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertTrue(number16.equals((Object)number5));
      assertTrue(number16.equals((Object)number3));
      assertTrue(number16.equals((Object)number2));
      assertTrue(number16.equals((Object)number4));
      assertTrue(number16.equals((Object)number6));
      assertFalse(number16.equals((Object)number1));
      assertTrue(number16.equals((Object)number10));
      assertFalse(number16.equals((Object)number7));
      assertTrue(number16.equals((Object)number8));
      assertTrue(number16.equals((Object)number9));
      assertTrue(number16.equals((Object)number12));
      assertEquals(0.0, number16);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      boolean boolean0 = boxAndWhiskerItem0.equals((Object) null);
      assertFalse(boolean0);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (List) null);
      assertNotNull(boxAndWhiskerItem1);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(string0);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list0);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      String string1 = boxAndWhiskerItem1.toString();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(string1);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(string1.equals((Object)string0));
      
      List list1 = boxAndWhiskerItem1.getOutliers();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNull(list1);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      List list2 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list2);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      List list3 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list3);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      boolean boolean1 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Number number0 = boxAndWhiskerItem1.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNull(number0);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      Number number1 = boxAndWhiskerItem0.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number1);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number2 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number2);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number3 = boxAndWhiskerItem0.getMean();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number3);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      List list4 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list4);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number4 = boxAndWhiskerItem0.getMedian();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number4);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      String string2 = boxAndWhiskerItem1.toString();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      boolean boolean2 = boxAndWhiskerItem0.equals(boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Number number5 = boxAndWhiskerItem1.getQ3();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNull(number5);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      List list5 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list5);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number6 = boxAndWhiskerItem1.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNull(number6);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      Number number7 = boxAndWhiskerItem0.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number7);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNull(list0);
      
      String string1 = boxAndWhiskerItem0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = boxAndWhiskerItem0.toString();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = boxAndWhiskerItem0.toString();
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      Number number0 = boxAndWhiskerItem0.getMinRegularValue();
      assertNull(number0);
      
      Number number1 = boxAndWhiskerItem0.getMinRegularValue();
      assertNull(number1);
      
      List list1 = boxAndWhiskerItem0.getOutliers();
      assertNull(list1);
      
      List list2 = boxAndWhiskerItem0.getOutliers();
      assertNull(list2);
      
      Number number2 = boxAndWhiskerItem0.getMinRegularValue();
      assertNull(number2);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 312.336904, 312.336904, (List) null);
      assertNotNull(boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(boolean0);
      
      Number number3 = boxAndWhiskerItem0.getQ3();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number3);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      String string4 = boxAndWhiskerItem0.toString();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(string4);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = boxAndWhiskerItem0.toString();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(string5);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      
      List list3 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list3);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number4 = boxAndWhiskerItem0.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number4);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number5 = boxAndWhiskerItem0.getMinOutlier();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number5);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      boolean boolean0 = boxAndWhiskerItem0.equals((Object) null);
      assertFalse(boolean0);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNull(list0);
      
      String string1 = boxAndWhiskerItem0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = boxAndWhiskerItem0.equals("^\"");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = boxAndWhiskerItem0.equals("^\"");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Number number0 = boxAndWhiskerItem0.getQ3();
      assertNull(number0);
      
      Number number1 = boxAndWhiskerItem0.getQ3();
      assertNull(number1);
      
      List list1 = boxAndWhiskerItem0.getOutliers();
      assertNull(list1);
      
      Number number2 = boxAndWhiskerItem0.getMinOutlier();
      assertNull(number2);
      
      Number number3 = boxAndWhiskerItem0.getMinOutlier();
      assertNull(number3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 3043.154625464378, 3043.154625464378, 3043.154625464378, 0.0, 0.0, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMean();
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
      
      boolean boolean0 = boxAndWhiskerItem0.equals(number0);
      assertFalse(boolean0);
      
      Number number1 = boxAndWhiskerItem0.getMinOutlier();
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(0.0, number1);
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNull(list0);
      
      Number number2 = boxAndWhiskerItem0.getQ1();
      assertNotNull(number2);
      assertTrue(number2.equals((Object)number1));
      assertTrue(number2.equals((Object)number0));
      assertEquals(0.0, number2);
      
      Number number3 = boxAndWhiskerItem0.getMedian();
      assertNotNull(number3);
      assertTrue(number3.equals((Object)number1));
      assertTrue(number3.equals((Object)number0));
      assertTrue(number3.equals((Object)number2));
      assertEquals(0.0, number3);
      
      Number number4 = boxAndWhiskerItem0.getMinOutlier();
      assertNotNull(number4);
      assertTrue(number4.equals((Object)number3));
      assertTrue(number4.equals((Object)number0));
      assertTrue(number4.equals((Object)number2));
      assertEquals(0.0, number4);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(number1, number1, number4, number4, number3, number2, number3, number2, (List) null);
      assertNotNull(boxAndWhiskerItem1);
      assertTrue(number1.equals((Object)number0));
      assertTrue(number1.equals((Object)number2));
      assertTrue(number1.equals((Object)number3));
      assertTrue(number2.equals((Object)number4));
      assertTrue(number2.equals((Object)number3));
      assertTrue(number2.equals((Object)number1));
      assertTrue(number2.equals((Object)number0));
      assertTrue(number3.equals((Object)number4));
      assertTrue(number3.equals((Object)number1));
      assertTrue(number3.equals((Object)number0));
      assertTrue(number3.equals((Object)number2));
      assertTrue(number4.equals((Object)number3));
      assertTrue(number4.equals((Object)number0));
      assertTrue(number4.equals((Object)number2));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      String string1 = boxAndWhiskerItem1.toString();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(string1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number1.equals((Object)number0));
      assertTrue(number1.equals((Object)number2));
      assertTrue(number1.equals((Object)number3));
      assertTrue(number2.equals((Object)number4));
      assertTrue(number2.equals((Object)number3));
      assertTrue(number2.equals((Object)number1));
      assertTrue(number2.equals((Object)number0));
      assertTrue(number3.equals((Object)number4));
      assertTrue(number3.equals((Object)number1));
      assertTrue(number3.equals((Object)number0));
      assertTrue(number3.equals((Object)number2));
      assertTrue(number4.equals((Object)number3));
      assertTrue(number4.equals((Object)number0));
      assertTrue(number4.equals((Object)number2));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number1.equals((Object)number0));
      assertTrue(number1.equals((Object)number2));
      assertTrue(number1.equals((Object)number3));
      assertTrue(number2.equals((Object)number4));
      assertTrue(number2.equals((Object)number3));
      assertTrue(number2.equals((Object)number1));
      assertTrue(number2.equals((Object)number0));
      assertTrue(number3.equals((Object)number4));
      assertTrue(number3.equals((Object)number1));
      assertTrue(number3.equals((Object)number0));
      assertTrue(number3.equals((Object)number2));
      assertTrue(number4.equals((Object)number3));
      assertTrue(number4.equals((Object)number0));
      assertTrue(number4.equals((Object)number2));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Number number5 = boxAndWhiskerItem1.getQ3();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(number5);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number1.equals((Object)number0));
      assertTrue(number1.equals((Object)number2));
      assertTrue(number1.equals((Object)number3));
      assertTrue(number2.equals((Object)number4));
      assertTrue(number2.equals((Object)number3));
      assertTrue(number2.equals((Object)number1));
      assertTrue(number2.equals((Object)number0));
      assertTrue(number3.equals((Object)number4));
      assertTrue(number3.equals((Object)number1));
      assertTrue(number3.equals((Object)number0));
      assertTrue(number3.equals((Object)number2));
      assertTrue(number4.equals((Object)number3));
      assertTrue(number4.equals((Object)number0));
      assertTrue(number4.equals((Object)number2));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertTrue(number5.equals((Object)number2));
      assertTrue(number5.equals((Object)number3));
      assertTrue(number5.equals((Object)number0));
      assertEquals(0.0, number5);
      
      Number number6 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number6);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number6.equals((Object)number1));
      assertFalse(number6.equals((Object)number4));
      assertFalse(number6.equals((Object)number0));
      assertFalse(number6.equals((Object)number5));
      assertFalse(number6.equals((Object)number3));
      assertFalse(number6.equals((Object)number2));
      assertEquals(3043.154625464378, number6);
      
      Number number7 = boxAndWhiskerItem0.getQ3();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number7);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number7.equals((Object)number6));
      assertFalse(number7.equals((Object)number4));
      assertFalse(number7.equals((Object)number2));
      assertFalse(number7.equals((Object)number3));
      assertFalse(number7.equals((Object)number5));
      assertFalse(number7.equals((Object)number0));
      assertFalse(number7.equals((Object)number1));
      assertEquals(3043.154625464378, number7);
      
      Number number8 = boxAndWhiskerItem1.getMean();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(number8);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number1.equals((Object)number7));
      assertTrue(number1.equals((Object)number0));
      assertTrue(number1.equals((Object)number2));
      assertFalse(number1.equals((Object)number6));
      assertTrue(number1.equals((Object)number3));
      assertTrue(number2.equals((Object)number4));
      assertTrue(number2.equals((Object)number5));
      assertTrue(number2.equals((Object)number3));
      assertFalse(number2.equals((Object)number6));
      assertTrue(number2.equals((Object)number1));
      assertFalse(number2.equals((Object)number7));
      assertTrue(number2.equals((Object)number0));
      assertTrue(number3.equals((Object)number4));
      assertTrue(number3.equals((Object)number1));
      assertTrue(number3.equals((Object)number5));
      assertTrue(number3.equals((Object)number0));
      assertTrue(number3.equals((Object)number2));
      assertFalse(number3.equals((Object)number7));
      assertFalse(number3.equals((Object)number6));
      assertTrue(number4.equals((Object)number3));
      assertTrue(number4.equals((Object)number0));
      assertFalse(number4.equals((Object)number6));
      assertTrue(number4.equals((Object)number2));
      assertFalse(number4.equals((Object)number7));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertTrue(number8.equals((Object)number3));
      assertTrue(number8.equals((Object)number2));
      assertFalse(number8.equals((Object)number7));
      assertTrue(number8.equals((Object)number0));
      assertFalse(number8.equals((Object)number6));
      assertEquals(0.0, number8);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, (-1.0), 0.0, 0.0, (-535.565148), 0.0, 0.0, (-2371.0), (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMinOutlier();
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(0.0, (-1.0), (-1183.9887016255545), 1239.199549450638, 0.0, 43.404, (-858.948954375002), (-2371.0), (List) null);
      assertNotNull(boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(boolean0);
      
      Number number1 = boxAndWhiskerItem0.getMinRegularValue();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number1.equals((Object)number0));
      assertEquals((-535.565148), number1);
      
      Number number2 = boxAndWhiskerItem0.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number2);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number2.equals((Object)number0));
      assertFalse(number2.equals((Object)number1));
      assertEquals(0.0, number2);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(string0);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      boolean boolean1 = boxAndWhiskerItem0.equals("org.jfree.data.statistics.BoxAndWhiskerItem@1[mean=0.0,median=-1.0,q1=0.0,q3=0.0]");
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Number number3 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number3);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number3.equals((Object)number0));
      assertFalse(number3.equals((Object)number1));
      assertTrue(number3.equals((Object)number2));
      assertEquals(0.0, number3);
      
      Number number4 = boxAndWhiskerItem0.getQ3();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number4);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number4.equals((Object)number1));
      assertTrue(number4.equals((Object)number0));
      assertTrue(number4.equals((Object)number3));
      assertTrue(number4.equals((Object)number2));
      assertEquals(0.0, number4);
      
      String string1 = boxAndWhiskerItem0.toString();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(string1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(string1.equals((Object)string0));
      
      Number number5 = boxAndWhiskerItem0.getMinOutlier();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number5);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number5.equals((Object)number1));
      assertTrue(number5.equals((Object)number3));
      assertTrue(number5.equals((Object)number4));
      assertTrue(number5.equals((Object)number2));
      assertEquals(0.0, number5);
      
      Number number6 = boxAndWhiskerItem0.getMinOutlier();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number6);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number6.equals((Object)number4));
      assertTrue(number6.equals((Object)number3));
      assertFalse(number6.equals((Object)number1));
      assertTrue(number6.equals((Object)number2));
      assertEquals(0.0, number6);
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list0);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number7 = boxAndWhiskerItem0.getMedian();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number7);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number7.equals((Object)number6));
      assertFalse(number7.equals((Object)number5));
      assertFalse(number7.equals((Object)number1));
      assertFalse(number7.equals((Object)number4));
      assertFalse(number7.equals((Object)number0));
      assertFalse(number7.equals((Object)number3));
      assertFalse(number7.equals((Object)number2));
      assertEquals((-1.0), number7);
      
      Number number8 = boxAndWhiskerItem0.getMinOutlier();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number8);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number8.equals((Object)number1));
      assertTrue(number8.equals((Object)number2));
      assertTrue(number8.equals((Object)number3));
      assertFalse(number8.equals((Object)number7));
      assertTrue(number8.equals((Object)number4));
      assertEquals(0.0, number8);
      
      Number number9 = boxAndWhiskerItem0.getMedian();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number9);
      assertFalse(number9.equals((Object)number0));
      assertFalse(number9.equals((Object)number8));
      assertFalse(number9.equals((Object)number2));
      assertFalse(number9.equals((Object)number5));
      assertFalse(number9.equals((Object)number6));
      assertFalse(number9.equals((Object)number3));
      assertFalse(number9.equals((Object)number1));
      assertFalse(number9.equals((Object)number4));
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertEquals((-1.0), number9);
      
      Number number10 = boxAndWhiskerItem0.getMinOutlier();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number10);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number10.equals((Object)number9));
      assertTrue(number10.equals((Object)number2));
      assertFalse(number10.equals((Object)number1));
      assertTrue(number10.equals((Object)number4));
      assertTrue(number10.equals((Object)number3));
      assertFalse(number10.equals((Object)number7));
      assertEquals(0.0, number10);
      
      List list1 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number11 = boxAndWhiskerItem0.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number11);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number11.equals((Object)number0));
      assertFalse(number11.equals((Object)number1));
      assertTrue(number11.equals((Object)number4));
      assertFalse(number11.equals((Object)number9));
      assertTrue(number11.equals((Object)number3));
      assertTrue(number11.equals((Object)number6));
      assertFalse(number11.equals((Object)number7));
      assertTrue(number11.equals((Object)number10));
      assertTrue(number11.equals((Object)number8));
      assertTrue(number11.equals((Object)number5));
      assertEquals(0.0, number11);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 88.140593631664, 88.140593631664, 0.0, 0.0, 4260.953337848184, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMinOutlier();
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-681.249958646), (-681.249958646), (-681.249958646), (-2686.390492691), (-1.0), (-1.0), (-1503.8), 0.0, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((-681.249958646), (-1503.8), (-2686.390492691), (-1503.8), 0.0, (-1.0), 0.0, (-1503.8), (List) null);
      assertNotNull(boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(boolean0);
      
      Number number0 = boxAndWhiskerItem1.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(number0);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertEquals((-1.0), number0);
      
      Number number1 = boxAndWhiskerItem1.getMean();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(number1);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(number1.equals((Object)number0));
      assertEquals((-681.249958646), number1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      boolean boolean0 = boxAndWhiskerItem0.equals((Object) null);
      assertFalse(boolean0);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (List) null);
      assertNotNull(boxAndWhiskerItem1);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(string0);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list0);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      String string1 = boxAndWhiskerItem1.toString();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(string1);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(string1.equals((Object)string0));
      
      List list1 = boxAndWhiskerItem1.getOutliers();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNull(list1);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      List list2 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list2);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      boolean boolean1 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Number number0 = boxAndWhiskerItem1.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNull(number0);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      Number number1 = boxAndWhiskerItem0.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number1);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number2 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number2);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number3 = boxAndWhiskerItem0.getMean();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number3);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      List list3 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list3);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number4 = boxAndWhiskerItem0.getMedian();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number4);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      String string2 = boxAndWhiskerItem1.toString();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(string2);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      BoxAndWhiskerItem boxAndWhiskerItem2 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (List) null);
      assertNotNull(boxAndWhiskerItem2);
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      
      boolean boolean2 = boxAndWhiskerItem0.equals(boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem2));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Number number5 = boxAndWhiskerItem1.getQ3();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNull(number5);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem2));
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      List list4 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list4);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem2));
      
      Number number6 = boxAndWhiskerItem1.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNull(number6);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem2));
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      Number number7 = boxAndWhiskerItem0.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number7);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem2));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1128.4569866406653), (-1128.4569866406653), 0.0, (-1128.4569866406653), (-1128.4569866406653), 3127.306575, (-2595.48009041), 1901.23, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
      
      String string1 = boxAndWhiskerItem0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Number number0 = boxAndWhiskerItem0.getQ3();
      assertNotNull(number0);
      assertEquals((-1128.4569866406653), number0);
      
      Number number1 = boxAndWhiskerItem0.getQ1();
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(0.0, number1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1.0), (-1.0), 0.0, (-1.0), 2619.1586097, 0.0, (-1.0), 1800.726278006, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNull(list0);
      
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotNull(number0);
      assertEquals(1800.726278006, number0);
      
      Number number1 = boxAndWhiskerItem0.getMean();
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals((-1.0), number1);
      
      Number number2 = boxAndWhiskerItem0.getMedian();
      assertNotNull(number2);
      assertFalse(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number1));
      assertEquals((-1.0), number2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-383.0765233), (-383.0765233), 2224.1944658053944, 72.47633406349, 72.47633406349, (-2399.2), 2224.1944658053944, (-1824.9), (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
      
      Number number0 = boxAndWhiskerItem0.getMean();
      assertNotNull(number0);
      assertEquals((-383.0765233), number0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(1.0, 1.0, (-618.504638), (-618.504638), 1.0, 1.0, 0.0, 0.0, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(0.0, 1.0, (-1781.9544465), (-1781.9544465), (-998.29902459), (-1450.3410584062), 135.96550357, 135.96550357, (List) null);
      assertNotNull(boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(727.07519675012, 727.07519675012, 727.07519675012, 0.0, 727.07519675012, 0.0, 1349.758657, 1.0, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotNull(number0);
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, (-794.609984008), (-794.609984008), (-794.609984008), 0.0, (-794.609984008), 0.0, (-794.609984008), (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMedian();
      assertNotNull(number0);
      assertEquals((-794.609984008), number0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(5423.30931594807, 5423.30931594807, 5423.30931594807, (-1916.92078), (-1916.92078), 277.2166869671739, (-447.819794), 1042.2083466035, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getQ1();
      assertNotNull(number0);
      assertEquals(5423.30931594807, number0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(1139.73537, 0.0, 1139.73537, 1016.3, 0.0, 1139.73537, 1016.3, (-1.0), (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNotNull(number0);
      assertEquals(1139.73537, number0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(2178.29380338, (-615.8903209627), (-1861.0), 569.92, 2178.29380338, 512.850404, (-6187.8), (-525.1177394363), (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNull(list0);
      
      Number number0 = boxAndWhiskerItem0.getMinRegularValue();
      assertNotNull(number0);
      assertEquals(2178.29380338, number0);
      
      Number number1 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals((-525.1177394363), number1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, (-2704.6), (-2704.6), 0.0, (-2704.6), 0.0, (-2704.6), (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMedian();
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2880.2375729869364, 0.0, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(363.5476730475533, 875.023526837, 363.5476730475533, 363.5476730475533, (-1526.92252), 1.0, (-1526.92252), 2533.175991, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getQ3();
      assertNotNull(number0);
      assertEquals(363.5476730475533, number0);
      
      Number number1 = boxAndWhiskerItem0.getMedian();
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(875.023526837, number1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, (-100.67), (-1.0), 0.0, (-1.0), (-1.0), (-100.67), (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotNull(number0);
      assertEquals((-100.67), number0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(2844.5762169112654, 0.0, 0.0, 2844.5762169112654, (-1.0), 2844.5762169112654, (-1.0), 1976.47509257, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotNull(number0);
      assertEquals(1976.47509257, number0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1369.22201301), (-1369.22201301), (-1369.22201301), 0.0, 0.0, 0.0, 0.0, 1.0, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Number number1 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNotNull(number1);
      assertEquals(0.0, number1);
      
      Number number2 = boxAndWhiskerItem0.getMinRegularValue();
      assertNotNull(number2);
      assertTrue(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number1));
      assertEquals(0.0, number2);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, (-2293.0), 0.0, 0.0, 1876.8, 1876.8, 0.0, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNull(list0);
      
      boolean boolean0 = boxAndWhiskerItem0.equals((Object) null);
      assertFalse(boolean0);
      
      List list1 = boxAndWhiskerItem0.getOutliers();
      assertNull(list1);
      
      boolean boolean1 = boxAndWhiskerItem0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Number number0 = boxAndWhiskerItem0.getMean();
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Number number1 = boxAndWhiskerItem0.getQ3();
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(0.0, number1);
      
      Number number2 = boxAndWhiskerItem0.getQ3();
      assertNotNull(number2);
      assertTrue(number2.equals((Object)number0));
      assertEquals(0.0, number2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-3020.034974644), (-3020.034974644), (-862.4), (-719.46903411071), (-719.46903411071), (-862.4), 407.51, 4457.1672706, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
      
      Number number0 = boxAndWhiskerItem0.getMinRegularValue();
      assertNotNull(number0);
      assertEquals((-719.46903411071), number0);
      
      Number number1 = boxAndWhiskerItem0.getQ1();
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals((-862.4), number1);
      
      Number number2 = boxAndWhiskerItem0.getMedian();
      assertNotNull(number2);
      assertFalse(number2.equals((Object)number1));
      assertFalse(number2.equals((Object)number0));
      assertEquals((-3020.034974644), number2);
      
      Number number3 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNotNull(number3);
      assertFalse(number3.equals((Object)number2));
      assertTrue(number3.equals((Object)number1));
      assertFalse(number3.equals((Object)number0));
      assertEquals((-862.4), number3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(273.2529, 273.2529, 273.2529, (-1283.8409480334617), 0.0, 0.0, 1.0, 0.0, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
      
      Number number0 = boxAndWhiskerItem0.getMedian();
      assertNotNull(number0);
      assertEquals(273.2529, number0);
      
      Number number1 = boxAndWhiskerItem0.getMean();
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(273.2529, number1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(2398.1, 0.0, 0.0, 1487.0, 1888.45, 0.0, 0.0, 1487.0, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(2400.890661865, (-1.0), 1.0, (-1.0), (-1.0), 2400.890661865, (-1.0), (-1264.71782), (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMinOutlier();
      assertNotNull(number0);
      assertEquals((-1.0), number0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 0.0, 0.0, (-1.0), (-4578.269), 0.0, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getQ1();
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1.0), (-133.3673233463404), 422.0, (-133.3673233463404), (-1.0), (-1.0), 0.0, (-1.0), (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMinRegularValue();
      assertNotNull(number0);
      assertEquals((-1.0), number0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(1193.78, 1193.78, 1193.78, 1193.78, 0.0, (-3160.5254), (-3160.5254), 1.0, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getQ3();
      assertNotNull(number0);
      assertEquals(1193.78, number0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1.0), (-1.0), (-987.4702118576326), (-987.4702118576326), (-1.0), (-1.0), 130.1771895, (-987.4702118576326), (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMean();
      assertNotNull(number0);
      assertEquals((-1.0), number0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-2659.999), 0.0, 0.0, 1.0, 0.0, (-2659.999), 1.0, (-2659.999), (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMinOutlier();
      assertNotNull(number0);
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, (-1821.0), (-1821.0), 0.0, 661.4493372704003, 0.0, 661.4493372704003, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNull(list0);
      
      boolean boolean0 = boxAndWhiskerItem0.equals((Object) null);
      assertFalse(boolean0);
      
      List list1 = boxAndWhiskerItem0.getOutliers();
      assertNull(list1);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
      
      String string1 = boxAndWhiskerItem0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      List list2 = boxAndWhiskerItem0.getOutliers();
      assertNull(list2);
      
      String string2 = boxAndWhiskerItem0.toString();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      List list3 = boxAndWhiskerItem0.getOutliers();
      assertNull(list3);
      
      String string3 = boxAndWhiskerItem0.toString();
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean1 = boxAndWhiskerItem0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = boxAndWhiskerItem0.toString();
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = boxAndWhiskerItem0.toString();
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      
      List list4 = boxAndWhiskerItem0.getOutliers();
      assertNull(list4);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, (-2546.558800066106), 0.0, 0.0, 0.0, 0.0, (List) null);
      assertNotNull(boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      List list5 = boxAndWhiskerItem1.getOutliers();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNull(list5);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      boolean boolean2 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(boolean2);
      
      boolean boolean3 = boxAndWhiskerItem1.equals((Object) null);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(boolean3);
      
      boolean boolean4 = boxAndWhiskerItem0.equals("org.jfree.data.statistics.BoxAndWhiskerItem@1[mean=0.0,median=0.0,q1=-1821.0,q3=-1821.0]");
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      List list6 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list6);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      String string6 = boxAndWhiskerItem1.toString();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      boolean boolean5 = boxAndWhiskerItem1.equals("org.jfree.data.statistics.BoxAndWhiskerItem@1[mean=0.0,median=0.0,q1=-1821.0,q3=-1821.0]");
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(boolean5);
      
      BoxAndWhiskerItem boxAndWhiskerItem2 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (List) null);
      assertNotNull(boxAndWhiskerItem2);
      assertFalse(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      assertFalse(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      
      boolean boolean6 = boxAndWhiskerItem0.equals(boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem2));
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      assertFalse(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-367.01575079), (-367.01575079), (-367.01575079), (-367.01575079), (-367.01575079), (-367.01575079), (-367.01575079), 1633.224420856886, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      boolean boolean0 = boxAndWhiskerItem0.equals((Object) null);
      assertFalse(boolean0);
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNull(list0);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
      
      List list1 = boxAndWhiskerItem0.getOutliers();
      assertNull(list1);
      
      Number number0 = boxAndWhiskerItem0.getMedian();
      assertNotNull(number0);
      assertEquals((-367.01575079), number0);
      
      String string1 = boxAndWhiskerItem0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Number number1 = boxAndWhiskerItem0.getQ1();
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals((-367.01575079), number1);
      
      Number number2 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNotNull(number2);
      assertTrue(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number1));
      assertEquals((-367.01575079), number2);
      
      Number number3 = boxAndWhiskerItem0.getQ1();
      assertNotNull(number3);
      assertTrue(number3.equals((Object)number2));
      assertTrue(number3.equals((Object)number0));
      assertEquals((-367.01575079), number3);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(number2, number0, number0, number2, number2, number1, number0, number2, (List) null);
      assertNotNull(boxAndWhiskerItem1);
      assertTrue(number0.equals((Object)number3));
      assertTrue(number0.equals((Object)number2));
      assertTrue(number0.equals((Object)number1));
      assertTrue(number1.equals((Object)number2));
      assertTrue(number1.equals((Object)number0));
      assertTrue(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number3));
      assertTrue(number2.equals((Object)number1));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      boolean boolean1 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(number0.equals((Object)number3));
      assertTrue(number0.equals((Object)number2));
      assertTrue(number0.equals((Object)number1));
      assertTrue(number1.equals((Object)number2));
      assertTrue(number1.equals((Object)number0));
      assertTrue(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number3));
      assertTrue(number2.equals((Object)number1));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, (-1709.1665380638926), 1784.592334, 1784.592334, 1873.9281912, 0.0, 0.0, 0.0, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      boolean boolean0 = boxAndWhiskerItem0.equals(number0);
      assertFalse(boolean0);
      
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(number0, number0, number0, number0, number0, number0, number0, number0, (List) null);
      assertNotNull(boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      boolean boolean1 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = boxAndWhiskerItem0.equals("org.jfree.data.statistics.BoxAndWhiskerItem@1[mean=0.0,median=-1709.1665380638926,q1=1784.592334,q3=1784.592334]");
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = boxAndWhiskerItem1.toString();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(string1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean3 = boxAndWhiskerItem0.equals(number0);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Number number1 = boxAndWhiskerItem0.getMinRegularValue();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number1.equals((Object)number0));
      assertEquals(1873.9281912, number1);
      
      Number number2 = boxAndWhiskerItem0.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number2);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number2.equals((Object)number1));
      assertFalse(number2.equals((Object)number0));
      assertEquals(1784.592334, number2);
      
      String string2 = boxAndWhiskerItem0.toString();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(string2);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list0);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number3 = boxAndWhiskerItem0.getMean();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number3);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number3.equals((Object)number1));
      assertFalse(number3.equals((Object)number2));
      assertTrue(number3.equals((Object)number0));
      assertEquals(0.0, number3);
      
      Number number4 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number4);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number4.equals((Object)number1));
      assertTrue(number4.equals((Object)number3));
      assertTrue(number4.equals((Object)number0));
      assertFalse(number4.equals((Object)number2));
      assertEquals(0.0, number4);
      
      String string3 = boxAndWhiskerItem0.toString();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(string3);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      Number number5 = boxAndWhiskerItem0.getMedian();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number5);
      assertFalse(number5.equals((Object)number2));
      assertFalse(number5.equals((Object)number0));
      assertFalse(number5.equals((Object)number4));
      assertFalse(number5.equals((Object)number1));
      assertFalse(number5.equals((Object)number3));
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertEquals((-1709.1665380638926), number5);
      
      boolean boolean4 = boxAndWhiskerItem0.equals(number3);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(number3.equals((Object)number4));
      assertFalse(number3.equals((Object)number1));
      assertFalse(number3.equals((Object)number2));
      assertFalse(number3.equals((Object)number5));
      assertTrue(number3.equals((Object)number0));
      assertFalse(boolean4);
      
      List list1 = boxAndWhiskerItem1.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNull(list1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number0.equals((Object)number2));
      assertTrue(number0.equals((Object)number3));
      assertFalse(number0.equals((Object)number5));
      assertTrue(number0.equals((Object)number4));
      assertFalse(number0.equals((Object)number1));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      Number number6 = boxAndWhiskerItem0.getQ3();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number6);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number6.equals((Object)number3));
      assertFalse(number6.equals((Object)number4));
      assertFalse(number6.equals((Object)number0));
      assertTrue(number6.equals((Object)number2));
      assertFalse(number6.equals((Object)number5));
      assertFalse(number6.equals((Object)number1));
      assertEquals(1784.592334, number6);
      
      Number number7 = boxAndWhiskerItem0.getMinRegularValue();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number7);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number7.equals((Object)number4));
      assertFalse(number7.equals((Object)number2));
      assertFalse(number7.equals((Object)number3));
      assertFalse(number7.equals((Object)number5));
      assertFalse(number7.equals((Object)number0));
      assertFalse(number7.equals((Object)number6));
      assertEquals(1873.9281912, number7);
      
      Number number8 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number8);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number8.equals((Object)number2));
      assertFalse(number8.equals((Object)number7));
      assertTrue(number8.equals((Object)number0));
      assertFalse(number8.equals((Object)number5));
      assertTrue(number8.equals((Object)number3));
      assertFalse(number8.equals((Object)number6));
      assertFalse(number8.equals((Object)number1));
      assertEquals(0.0, number8);
      
      Number number9 = boxAndWhiskerItem0.getMedian();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number9);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number9.equals((Object)number8));
      assertFalse(number9.equals((Object)number6));
      assertFalse(number9.equals((Object)number0));
      assertFalse(number9.equals((Object)number1));
      assertFalse(number9.equals((Object)number3));
      assertFalse(number9.equals((Object)number4));
      assertFalse(number9.equals((Object)number7));
      assertFalse(number9.equals((Object)number2));
      assertEquals((-1709.1665380638926), number9);
      
      Number number10 = boxAndWhiskerItem0.getMedian();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number10);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number10.equals((Object)number0));
      assertFalse(number10.equals((Object)number4));
      assertFalse(number10.equals((Object)number1));
      assertFalse(number10.equals((Object)number6));
      assertFalse(number10.equals((Object)number2));
      assertFalse(number10.equals((Object)number7));
      assertFalse(number10.equals((Object)number3));
      assertFalse(number10.equals((Object)number8));
      assertEquals((-1709.1665380638926), number10);
      
      Number number11 = boxAndWhiskerItem1.getMean();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(number11);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number0.equals((Object)number2));
      assertFalse(number0.equals((Object)number6));
      assertTrue(number0.equals((Object)number3));
      assertTrue(number0.equals((Object)number8));
      assertFalse(number0.equals((Object)number9));
      assertFalse(number0.equals((Object)number5));
      assertTrue(number0.equals((Object)number4));
      assertFalse(number0.equals((Object)number1));
      assertFalse(number0.equals((Object)number7));
      assertFalse(number0.equals((Object)number10));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(number11.equals((Object)number1));
      assertFalse(number11.equals((Object)number10));
      assertFalse(number11.equals((Object)number7));
      assertFalse(number11.equals((Object)number5));
      assertTrue(number11.equals((Object)number4));
      assertFalse(number11.equals((Object)number6));
      assertTrue(number11.equals((Object)number3));
      assertFalse(number11.equals((Object)number2));
      assertFalse(number11.equals((Object)number9));
      assertTrue(number11.equals((Object)number8));
      assertEquals(0.0, number11);
      
      Number number12 = boxAndWhiskerItem0.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number12);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number12.equals((Object)number11));
      assertFalse(number12.equals((Object)number3));
      assertFalse(number12.equals((Object)number0));
      assertFalse(number12.equals((Object)number10));
      assertTrue(number12.equals((Object)number6));
      assertFalse(number12.equals((Object)number8));
      assertFalse(number12.equals((Object)number1));
      assertFalse(number12.equals((Object)number5));
      assertFalse(number12.equals((Object)number7));
      assertFalse(number12.equals((Object)number9));
      assertFalse(number12.equals((Object)number4));
      assertEquals(1784.592334, number12);
      
      List list2 = boxAndWhiskerItem1.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNull(list2);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number0.equals((Object)number2));
      assertFalse(number0.equals((Object)number6));
      assertTrue(number0.equals((Object)number3));
      assertTrue(number0.equals((Object)number8));
      assertFalse(number0.equals((Object)number9));
      assertFalse(number0.equals((Object)number5));
      assertTrue(number0.equals((Object)number4));
      assertFalse(number0.equals((Object)number1));
      assertFalse(number0.equals((Object)number7));
      assertFalse(number0.equals((Object)number10));
      assertFalse(number0.equals((Object)number12));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      Number number13 = boxAndWhiskerItem1.getQ3();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(number13);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number0.equals((Object)number2));
      assertFalse(number0.equals((Object)number6));
      assertTrue(number0.equals((Object)number3));
      assertTrue(number0.equals((Object)number8));
      assertFalse(number0.equals((Object)number9));
      assertFalse(number0.equals((Object)number5));
      assertTrue(number0.equals((Object)number4));
      assertFalse(number0.equals((Object)number1));
      assertFalse(number0.equals((Object)number7));
      assertFalse(number0.equals((Object)number10));
      assertFalse(number0.equals((Object)number12));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(number13.equals((Object)number5));
      assertFalse(number13.equals((Object)number12));
      assertTrue(number13.equals((Object)number3));
      assertTrue(number13.equals((Object)number8));
      assertFalse(number13.equals((Object)number9));
      assertFalse(number13.equals((Object)number7));
      assertFalse(number13.equals((Object)number2));
      assertFalse(number13.equals((Object)number6));
      assertFalse(number13.equals((Object)number1));
      assertFalse(number13.equals((Object)number10));
      assertTrue(number13.equals((Object)number4));
      assertEquals(0.0, number13);
      
      Number number14 = boxAndWhiskerItem1.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(number14);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number0.equals((Object)number2));
      assertFalse(number0.equals((Object)number6));
      assertTrue(number0.equals((Object)number3));
      assertTrue(number0.equals((Object)number8));
      assertFalse(number0.equals((Object)number9));
      assertFalse(number0.equals((Object)number5));
      assertTrue(number0.equals((Object)number4));
      assertFalse(number0.equals((Object)number1));
      assertFalse(number0.equals((Object)number7));
      assertFalse(number0.equals((Object)number10));
      assertFalse(number0.equals((Object)number12));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(number14.equals((Object)number2));
      assertFalse(number14.equals((Object)number10));
      assertFalse(number14.equals((Object)number6));
      assertFalse(number14.equals((Object)number12));
      assertFalse(number14.equals((Object)number1));
      assertTrue(number14.equals((Object)number4));
      assertTrue(number14.equals((Object)number3));
      assertFalse(number14.equals((Object)number7));
      assertTrue(number14.equals((Object)number8));
      assertFalse(number14.equals((Object)number9));
      assertFalse(number14.equals((Object)number5));
      assertEquals(0.0, number14);
      
      List list3 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list3);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number15 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(number15);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number15.equals((Object)number2));
      assertFalse(number15.equals((Object)number7));
      assertFalse(number15.equals((Object)number5));
      assertTrue(number15.equals((Object)number4));
      assertFalse(number15.equals((Object)number10));
      assertTrue(number15.equals((Object)number3));
      assertTrue(number15.equals((Object)number8));
      assertFalse(number15.equals((Object)number9));
      assertFalse(number15.equals((Object)number12));
      assertFalse(number15.equals((Object)number1));
      assertFalse(number15.equals((Object)number6));
      assertEquals(0.0, number15);
      
      Number number16 = boxAndWhiskerItem1.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(number16);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(number0.equals((Object)number2));
      assertFalse(number0.equals((Object)number6));
      assertTrue(number0.equals((Object)number3));
      assertTrue(number0.equals((Object)number8));
      assertFalse(number0.equals((Object)number9));
      assertFalse(number0.equals((Object)number5));
      assertTrue(number0.equals((Object)number4));
      assertFalse(number0.equals((Object)number1));
      assertFalse(number0.equals((Object)number7));
      assertFalse(number0.equals((Object)number10));
      assertFalse(number0.equals((Object)number12));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(number16.equals((Object)number6));
      assertTrue(number16.equals((Object)number4));
      assertFalse(number16.equals((Object)number10));
      assertFalse(number16.equals((Object)number12));
      assertFalse(number16.equals((Object)number1));
      assertFalse(number16.equals((Object)number7));
      assertFalse(number16.equals((Object)number5));
      assertFalse(number16.equals((Object)number2));
      assertTrue(number16.equals((Object)number3));
      assertFalse(number16.equals((Object)number9));
      assertTrue(number16.equals((Object)number8));
      assertEquals(0.0, number16);
      
      List list4 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list4);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      boolean boolean0 = boxAndWhiskerItem0.equals((Object) null);
      assertFalse(boolean0);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (List) null);
      assertNotNull(boxAndWhiskerItem1);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      String string0 = boxAndWhiskerItem1.toString();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(string0);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list0);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      String string1 = boxAndWhiskerItem1.toString();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotNull(string1);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertTrue(string1.equals((Object)string0));
      
      List list1 = boxAndWhiskerItem1.getOutliers();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNull(list1);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      List list2 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list2);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      boolean boolean1 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Number number0 = boxAndWhiskerItem1.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNull(number0);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      Number number1 = boxAndWhiskerItem0.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number1);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number2 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number2);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number3 = boxAndWhiskerItem0.getMean();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number3);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      List list3 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list3);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      Number number4 = boxAndWhiskerItem0.getMedian();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number4);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      
      String string2 = boxAndWhiskerItem0.toString();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotNull(string2);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      BoxAndWhiskerItem boxAndWhiskerItem2 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (List) null);
      assertNotNull(boxAndWhiskerItem2);
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      
      boolean boolean2 = boxAndWhiskerItem0.equals(boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem2));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Number number5 = boxAndWhiskerItem1.getQ3();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem2);
      assertNull(number5);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem2));
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      List list4 = boxAndWhiskerItem0.getOutliers();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(list4);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem2));
      
      Number number6 = boxAndWhiskerItem1.getMaxRegularValue();
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem2);
      assertNull(number6);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem2));
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      Number number7 = boxAndWhiskerItem0.getQ1();
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNull(number7);
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem2));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 3043.154625464378, 3043.154625464378, 3043.154625464378, 0.0, 0.0, (List) null);
      Number number0 = boxAndWhiskerItem0.getMean();
      boxAndWhiskerItem0.toString();
      boolean boolean0 = boxAndWhiskerItem0.equals(number0);
      Number number1 = boxAndWhiskerItem0.getMinOutlier();
      boxAndWhiskerItem0.getOutliers();
      Number number2 = boxAndWhiskerItem0.getQ1();
      Number number3 = boxAndWhiskerItem0.getMedian();
      Number number4 = boxAndWhiskerItem0.getMinOutlier();
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(number1, number1, number4, number4, number3, number2, number3, number2, (List) null);
      boxAndWhiskerItem0.equals(number4);
      boxAndWhiskerItem1.toString();
      boxAndWhiskerItem1.equals(number4);
      boolean boolean1 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertTrue(boolean1 == boolean0);
      
      boxAndWhiskerItem1.getQ3();
      Number number5 = boxAndWhiskerItem0.getMaxRegularValue();
      Number number6 = boxAndWhiskerItem0.getQ3();
      assertTrue(number6.equals((Object)number5));
      
      boxAndWhiskerItem1.getMean();
      BoxAndWhiskerItem boxAndWhiskerItem2 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, (-145.6874), (List) null);
      boolean boolean2 = boxAndWhiskerItem1.equals(boxAndWhiskerItem2);
      assertTrue(number3.equals((Object)number0));
      assertFalse(boolean2);
      assertTrue(number4.equals((Object)number2));
  }
}
