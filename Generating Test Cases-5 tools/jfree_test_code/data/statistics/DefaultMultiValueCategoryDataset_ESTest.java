/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:47:10 GMT 2023
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.event.InputMethodListener;
import java.awt.event.MouseWheelListener;
import java.util.EventListener;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.KeyedObjects2D;
import org.jfree.data.Range;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultHeatMapDatasetTest;
import org.jfree.data.general.DefaultPieDatasetTest;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultMultiValueCategoryDataset_ESTest extends DefaultMultiValueCategoryDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = defaultMultiValueCategoryDataset0.getNotify();
      assertTrue(boolean0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean1 = linkedList0.retainAll(linkedList1);
      assertFalse(boolean1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      Byte byte0 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte0);
      assertNotNull(byte0);
      
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      assertNull(mouseWheelListener1);
      
      MouseWheelListener mouseWheelListener2 = AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      assertNull(mouseWheelListener2);
      
      boolean boolean2 = defaultMultiValueCategoryDataset0.hasListener((EventListener) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      defaultMultiValueCategoryDataset0.add(linkedList0, byte0, byte0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      
      Number number0 = defaultMultiValueCategoryDataset0.getValue(0, 0);
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNull(number0);
      
      Comparable<DefaultMultiValueCategoryDataset> comparable0 = (Comparable<DefaultMultiValueCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      boolean boolean3 = defaultMultiValueCategoryDataset0.equals((Object) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = defaultMultiValueCategoryDataset0.getRowCount();
      assertEquals(1, int0);
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      
      int int1 = defaultMultiValueCategoryDataset0.getRowIndex("Colmn key (");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue(0, (int) (byte) (-99));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyedObjects2D keyedObjects2D0 = defaultMultiValueCategoryDataset0.data;
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertNotNull(keyedObjects2D0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = keyedObjects2D0.getColumnIndex(double0);
      assertEquals((-1), int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      
      boolean boolean0 = Double.isFinite((-1264.5878822805691));
      assertTrue(boolean0);
      
      double double1 = Double.max((-3028.83), 0.0);
      assertEquals(0.0, double1, 0.01);
      
      keyedObjects2D0.setObject(double0, double0, double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, keyedObjects2D0.getRowCount());
      assertEquals(1, keyedObjects2D0.getColumnCount());
      
      String string0 = "values";
      Comparable<KeyedObjects2D> comparable0 = (Comparable<KeyedObjects2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("values", "values", "").when(comparable0).toString();
      keyedObjects2D0.setObject(defaultMultiValueCategoryDataset0, comparable0, comparable0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      
      defaultMultiValueCategoryDataset0.data = keyedObjects2D0;
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.data.getColumnCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.data.getRowCount());
      
      keyedObjects2D0.setObject(double0, double0, double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      
      defaultMultiValueCategoryDataset0.setNotify(false);
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      
      int int1 = defaultMultiValueCategoryDataset0.getColumnIndex(double0);
      assertEquals(0, int1);
      assertEquals((double)double0, (double)double1, 0.01);
      assertFalse(int1 == int0);
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List list1 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list1.equals((Object)list0));
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      Double double2 = (Double)keyedObjects2D0.getObject(0, 0);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertNotNull(double2);
      
      boolean boolean1 = true;
      double double3 = defaultMultiValueCategoryDataset0.getRangeUpperBound(true);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      
      List list2 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, list2.size());
      assertFalse(list2.isEmpty());
      assertNotNull(list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      
      int int2 = (-1);
      int int3 = (-1134);
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((Comparable) double0, (Comparable) double2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.util.List
         //
         verifyException("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyedObjects2D keyedObjects2D0 = defaultMultiValueCategoryDataset0.data;
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertNotNull(keyedObjects2D0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = Double.isFinite((-1264.5878822805691));
      assertTrue(boolean0);
      
      double double1 = Double.max((-3028.83), 0.0);
      assertEquals(0.0, double1, 0.01);
      
      keyedObjects2D0.setObject(double0, double0, double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, keyedObjects2D0.getRowCount());
      assertEquals(1, keyedObjects2D0.getColumnCount());
      
      Comparable<KeyedObjects2D> comparable0 = (Comparable<KeyedObjects2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("", "z3", "", (String) null).when(comparable0).toString();
      keyedObjects2D0.setObject(defaultMultiValueCategoryDataset0, comparable0, comparable0);
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      
      defaultMultiValueCategoryDataset0.data = keyedObjects2D0;
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.data.getColumnCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.data.getRowCount());
      
      keyedObjects2D0.setObject(double0, double0, double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      
      defaultMultiValueCategoryDataset0.setNotify(false);
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List list1 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list1.equals((Object)list0));
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      Object object0 = keyedObjects2D0.getObject(0, 0);
      assertEquals(0.0, object0);
      assertTrue(object0.equals((Object)double1));
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      assertNotNull(object0);
      
      double double2 = defaultMultiValueCategoryDataset0.getRangeUpperBound(true);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      
      List list2 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, list2.size());
      assertFalse(list2.isEmpty());
      assertNotNull(list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(range0);
      
      List list3 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(list3.isEmpty());
      assertEquals(2, list3.size());
      assertNotNull(list3);
      assertNotSame(list3, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean1 = defaultMultiValueCategoryDataset0.equals(object1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues((Comparable) double0, (Comparable) double0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.util.List
         //
         verifyException("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyedObjects2D keyedObjects2D0 = defaultMultiValueCategoryDataset0.data;
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertNotNull(keyedObjects2D0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = Double.isFinite((-1264.5878822805691));
      assertTrue(boolean0);
      
      double double1 = Double.max((-3028.83), 0.0);
      assertEquals(0.0, double1, 0.01);
      
      Comparable<KeyedObjects2D> comparable0 = (Comparable<KeyedObjects2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(comparable0).toString();
      keyedObjects2D0.setObject(defaultMultiValueCategoryDataset0, comparable0, comparable0);
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, keyedObjects2D0.getRowCount());
      assertEquals(1, keyedObjects2D0.getColumnCount());
      
      defaultMultiValueCategoryDataset0.data = keyedObjects2D0;
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, keyedObjects2D0.getRowCount());
      assertEquals(1, keyedObjects2D0.getColumnCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.data.getRowCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.data.getColumnCount());
      
      keyedObjects2D0.setObject(double0, double0, double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      
      defaultMultiValueCategoryDataset0.setNotify(false);
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnIndex(double0);
      assertEquals(1, int0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List list1 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list1.equals((Object)list0));
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      // Undeclared exception!
      try { 
        keyedObjects2D0.getObject(3, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyedObjects2D keyedObjects2D0 = defaultMultiValueCategoryDataset0.data;
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertNotNull(keyedObjects2D0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = Double.isFinite((-1264.5878822805691));
      assertTrue(boolean0);
      
      double double1 = Double.max((-3028.83), 0.0);
      assertEquals(0.0, double1, 0.01);
      
      keyedObjects2D0.setObject(double0, double0, double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, keyedObjects2D0.getRowCount());
      assertEquals(1, keyedObjects2D0.getColumnCount());
      
      Comparable<KeyedObjects2D> comparable0 = (Comparable<KeyedObjects2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(")F,T#Eh\"J", "8Oc8lb4C)fD)", "Requires 'ySamples' > 0").when(comparable0).toString();
      keyedObjects2D0.setObject(defaultMultiValueCategoryDataset0, comparable0, comparable0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      
      defaultMultiValueCategoryDataset0.data = keyedObjects2D0;
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.data.getColumnCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.data.getRowCount());
      
      keyedObjects2D0.setObject(double0, double0, double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      
      defaultMultiValueCategoryDataset0.setNotify(false);
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnIndex(double0);
      assertEquals(0, int0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List list1 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list1.equals((Object)list0));
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      Object object0 = keyedObjects2D0.getObject(0, 0);
      assertEquals(0.0, object0);
      assertTrue(object0.equals((Object)double1));
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      assertNotNull(object0);
      
      boolean boolean1 = false;
      double double2 = defaultMultiValueCategoryDataset0.getRangeUpperBound(false);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      
      List list2 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertFalse(list2.isEmpty());
      assertEquals(2, list2.size());
      assertNotNull(list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      
      Comparable comparable1 = defaultMultiValueCategoryDataset0.getRowKey(0);
      assertEquals(0.0, comparable1);
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(comparable1);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((-1), (-1134));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultPieDatasetTest defaultPieDatasetTest0 = new DefaultPieDatasetTest();
      assertNotNull(defaultPieDatasetTest0);
      
      defaultPieDatasetTest0.testGetKey();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.addChangeListener(defaultPieDatasetTest0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals(defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      double double0 = defaultMultiValueCategoryDataset0.getRangeUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      defaultMultiValueCategoryDataset0.removeChangeListener(defaultPieDatasetTest0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      List list0 = defaultMultiValueCategoryDataset1.getRowKeys();
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = defaultMultiValueCategoryDataset0.hasListener(defaultPieDatasetTest0);
      assertFalse(boolean1);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset2 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset2.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset2.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset2.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset0);
      
      boolean boolean2 = defaultMultiValueCategoryDataset0.equals(defaultMultiValueCategoryDataset2);
      assertTrue(boolean2);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset2.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset2.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset2.getRowCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      
      int int1 = defaultMultiValueCategoryDataset0.getRowCount();
      assertEquals(0, int1);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(int1 == int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset3 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset3.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset3.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset3.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset3.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset3.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset3.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset3, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset3, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset3, defaultMultiValueCategoryDataset0);
      
      double double1 = defaultMultiValueCategoryDataset0.getRangeLowerBound(true);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset3));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      assertNotNull(datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      
      DatasetGroup datasetGroup2 = (DatasetGroup)datasetGroup0.clone();
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup2.equals((Object)datasetGroup0));
      assertTrue(datasetGroup2.equals((Object)datasetGroup1));
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup2.getID());
      assertNotNull(datasetGroup2);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup2, datasetGroup1);
      assertNotSame(datasetGroup2, datasetGroup0);
      
      DatasetGroup datasetGroup3 = (DatasetGroup)datasetGroup0.clone();
      assertTrue(datasetGroup0.equals((Object)datasetGroup2));
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup3.equals((Object)datasetGroup2));
      assertTrue(datasetGroup3.equals((Object)datasetGroup1));
      assertTrue(datasetGroup3.equals((Object)datasetGroup0));
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup3.getID());
      assertNotNull(datasetGroup3);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup0, datasetGroup3);
      assertNotSame(datasetGroup3, datasetGroup1);
      assertNotSame(datasetGroup3, datasetGroup2);
      assertNotSame(datasetGroup3, datasetGroup0);
      
      defaultMultiValueCategoryDataset0.setGroup(datasetGroup0);
      assertTrue(datasetGroup0.equals((Object)datasetGroup2));
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup0.equals((Object)datasetGroup3));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup0, datasetGroup3);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      defaultMultiValueCategoryDataset0.add(list0, comparable0, comparable0);
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      double double0 = defaultMultiValueCategoryDataset0.getRangeUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(1, int0);
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(1, defaultMultiValueCategoryDataset1.getRowCount());
      assertEquals(1, defaultMultiValueCategoryDataset1.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      double double1 = defaultMultiValueCategoryDataset0.getRangeUpperBound(true);
      assertEquals(Double.NaN, double1, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(double1, double0, 0.01);
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      DefaultHeatMapDatasetTest defaultHeatMapDatasetTest0 = new DefaultHeatMapDatasetTest();
      assertNotNull(defaultHeatMapDatasetTest0);
      
      defaultMultiValueCategoryDataset0.removeChangeListener(defaultHeatMapDatasetTest0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      Byte byte0 = Byte.valueOf((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = Byte.compare((byte)0, (byte)0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      defaultMultiValueCategoryDataset0.add(list0, byte0, byte0);
      assertFalse(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      int int2 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(2, int2);
      assertFalse(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset2 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertFalse(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset0));
      assertFalse(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset2.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset2.getColumnCount());
      assertEquals(2, defaultMultiValueCategoryDataset2.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset0);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset1);
      
      int int3 = Byte.compare((byte)0, (byte)0);
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      
      double double2 = defaultMultiValueCategoryDataset0.getRangeUpperBound(true);
      assertEquals(Double.NaN, double2, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertFalse(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset3 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertFalse(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertFalse(defaultMultiValueCategoryDataset3.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset3.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset3.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset3.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset3.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset3.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset3, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset3, defaultMultiValueCategoryDataset0);
      assertNotSame(defaultMultiValueCategoryDataset3, defaultMultiValueCategoryDataset2);
      
      Comparable comparable1 = defaultMultiValueCategoryDataset0.getColumnKey((byte)0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset3));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertFalse(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(comparable1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset3);
      
      int int4 = (-2171);
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowKey((-2171));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = 0;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      byte byte0 = (byte) (-99);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList0.retainAll(linkedList1);
      assertFalse(boolean0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      Byte byte1 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      assertNull(mouseWheelListener1);
      
      MouseWheelListener mouseWheelListener2 = AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      assertNull(mouseWheelListener2);
      
      boolean boolean1 = defaultMultiValueCategoryDataset0.hasListener((EventListener) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      defaultMultiValueCategoryDataset0.add(linkedList0, byte1, byte1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      
      Number number0 = defaultMultiValueCategoryDataset0.getValue(0, 0);
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNull(number0);
      
      Comparable<DefaultMultiValueCategoryDataset> comparable0 = (Comparable<DefaultMultiValueCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      boolean boolean2 = defaultMultiValueCategoryDataset0.equals((Object) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (null) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultMultiValueCategoryDataset0.getGroup();
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      assertNotNull(datasetGroup1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      
      defaultMultiValueCategoryDataset0.setGroup(datasetGroup0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(datasetGroup0, datasetGroup1);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals(long0);
      assertFalse(boolean0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      double double0 = defaultMultiValueCategoryDataset0.getRangeLowerBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.add((List) null, long0, long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Comparable<String> comparable0 = null;
      DefaultPieDatasetTest defaultPieDatasetTest0 = new DefaultPieDatasetTest();
      assertNotNull(defaultPieDatasetTest0);
      
      defaultPieDatasetTest0.testGetKey();
      defaultPieDatasetTest0.testCloning();
      defaultMultiValueCategoryDataset0.addChangeListener(defaultPieDatasetTest0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((Comparable) null, comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getColumnIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      DefaultPieDatasetTest defaultPieDatasetTest0 = new DefaultPieDatasetTest();
      assertNotNull(defaultPieDatasetTest0);
      
      defaultMultiValueCategoryDataset0.removeChangeListener(defaultPieDatasetTest0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Long> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      Long long0 = new Long((-1754L));
      assertEquals((-1754L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = linkedList0.add(long0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((-1754L)));
      
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      linkedList0.push(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(0L));
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultMultiValueCategoryDataset0.add(linkedList0, comparable0, comparable0);
      assertFalse(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, linkedList0.size());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertTrue(linkedList0.contains(0L));
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyedObjects2D keyedObjects2D0 = defaultMultiValueCategoryDataset0.data;
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertNotNull(keyedObjects2D0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = Double.isFinite((-1264.5878822805691));
      assertTrue(boolean0);
      
      double double1 = Double.max((-3028.83), 0.0);
      assertEquals(0.0, double1, 0.01);
      
      keyedObjects2D0.setObject(double0, double0, double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, keyedObjects2D0.getColumnCount());
      assertEquals(1, keyedObjects2D0.getRowCount());
      
      Comparable<KeyedObjects2D> comparable0 = (Comparable<KeyedObjects2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      keyedObjects2D0.setObject(defaultMultiValueCategoryDataset0, comparable0, comparable0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      
      defaultMultiValueCategoryDataset0.data = keyedObjects2D0;
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.data.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.data.getColumnCount());
      
      keyedObjects2D0.setObject(double0, double0, double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      
      defaultMultiValueCategoryDataset0.setNotify(false);
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnIndex(double0);
      assertEquals(0, int0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      List list1 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list1.equals((Object)list0));
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      Object object0 = keyedObjects2D0.getObject(0, 0);
      assertEquals(0.0, object0);
      assertTrue(object0.equals((Object)double1));
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(2, keyedObjects2D0.getRowCount());
      assertEquals(2, keyedObjects2D0.getColumnCount());
      assertNotNull(object0);
      
      boolean boolean1 = true;
      double double2 = defaultMultiValueCategoryDataset0.getRangeUpperBound(true);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      
      List list2 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertEquals(2, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(2, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(list2.isEmpty());
      assertEquals(2, list2.size());
      assertNotNull(list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((-1), (-1134));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertNotNull(keyedObjects2D0);
      
      defaultMultiValueCategoryDataset0.data = keyedObjects2D0;
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.data.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.data.getRowCount());
      
      int int0 = 3005;
      LinkedList<KeyedObjects2D> linkedList0 = new LinkedList<KeyedObjects2D>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(keyedObjects2D0));
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<DefaultMultiValueCategoryDataset> comparable1 = (Comparable<DefaultMultiValueCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultMultiValueCategoryDataset0.add(linkedList0, comparable0, comparable1);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(keyedObjects2D0));
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowKey(3005);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3005, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.add(linkedList0, comparable0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertNotNull(keyedObjects2D0);
      
      defaultMultiValueCategoryDataset0.data = keyedObjects2D0;
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.data.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.data.getRowCount());
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues((Comparable) 0, (Comparable) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (0) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      defaultMultiValueCategoryDataset0.setNotify(false);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      double double0 = defaultMultiValueCategoryDataset0.getRangeUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      
      int int0 = 0;
      int int1 = 1;
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertNotNull(keyedObjects2D0);
      
      keyedObjects2D0.clear();
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      
      defaultMultiValueCategoryDataset0.data = keyedObjects2D0;
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.data.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.data.getRowCount());
      
      long long1 = Long.sum(1L, (-1L));
      assertEquals(0L, long1);
      
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals(long0);
      assertFalse(boolean0);
      assertFalse(long0.equals((Object)long1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      
      Comparable<DefaultMultiValueCategoryDataset> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertNotNull(keyedObjects2D0);
      
      keyedObjects2D0.clear();
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      
      defaultMultiValueCategoryDataset0.data = keyedObjects2D0;
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.data.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.data.getRowCount());
      
      int int0 = 0;
      defaultMultiValueCategoryDataset0.validateObject();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getColumnKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getColumnKey((-1857));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      String string0 = "s";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      defaultMultiValueCategoryDataset0.add(linkedList0, "s", "s");
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, linkedList0.size());
      
      DatasetGroup datasetGroup0 = new DatasetGroup("s");
      assertEquals("s", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertEquals("s", datasetGroup0.getID());
      assertEquals("s", datasetGroup1.getID());
      assertNotNull(datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      
      DatasetGroup datasetGroup2 = (DatasetGroup)datasetGroup0.clone();
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup2.equals((Object)datasetGroup1));
      assertTrue(datasetGroup2.equals((Object)datasetGroup0));
      assertEquals("s", datasetGroup0.getID());
      assertEquals("s", datasetGroup2.getID());
      assertNotNull(datasetGroup2);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup2, datasetGroup0);
      assertNotSame(datasetGroup2, datasetGroup1);
      
      int int0 = defaultMultiValueCategoryDataset0.getRowIndex("s");
      assertEquals(0, int0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      
      DatasetGroup datasetGroup3 = (DatasetGroup)datasetGroup0.clone();
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup0.equals((Object)datasetGroup2));
      assertTrue(datasetGroup3.equals((Object)datasetGroup1));
      assertTrue(datasetGroup3.equals((Object)datasetGroup2));
      assertTrue(datasetGroup3.equals((Object)datasetGroup0));
      assertEquals("s", datasetGroup0.getID());
      assertEquals("s", datasetGroup3.getID());
      assertNotNull(datasetGroup3);
      assertNotSame(datasetGroup0, datasetGroup3);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup3, datasetGroup1);
      assertNotSame(datasetGroup3, datasetGroup0);
      assertNotSame(datasetGroup3, datasetGroup2);
      
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals(datasetGroup0);
      assertFalse(boolean0);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup0.equals((Object)datasetGroup3));
      assertTrue(datasetGroup0.equals((Object)datasetGroup2));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals("s", datasetGroup0.getID());
      assertNotSame(datasetGroup0, datasetGroup3);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup2);
      
      defaultMultiValueCategoryDataset0.setGroup(datasetGroup0);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup0.equals((Object)datasetGroup3));
      assertTrue(datasetGroup0.equals((Object)datasetGroup2));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals("s", datasetGroup0.getID());
      assertNotSame(datasetGroup0, datasetGroup3);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup2);
      
      int int1 = 1247;
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowKey(1247);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1247, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnIndex(integer0);
      assertEquals((-1), int0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      String string0 = Integer.toUnsignedString((-1));
      assertEquals("4294967295", string0);
      assertNotNull(string0);
      
      int int1 = defaultMultiValueCategoryDataset0.getRowIndex((-1));
      assertEquals((-1), int1);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(int1 == int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertNotNull(keyedObjects2D0);
      
      defaultMultiValueCategoryDataset0.data = keyedObjects2D0;
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.data.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.data.getRowCount());
      
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultMultiValueCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      long long0 = Short.toUnsignedLong((short) (-2439));
      assertEquals(63097L, long0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnIndex(short0);
      assertEquals((-1), int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      
      int int1 = Short.compare((short)1, (short)1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals(short0);
      assertFalse(boolean0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      
      List list1 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      List list2 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      
      int int2 = defaultMultiValueCategoryDataset0.getRowIndex(short0);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue(0, (-2404));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultMultiValueCategoryDataset0.getGroup();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultMultiValueCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultMultiValueCategoryDataset0.setNotify(false);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertFalse(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List list1 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      Comparable<KeyedObjects2D> comparable0 = (Comparable<KeyedObjects2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (null) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      double double0 = defaultMultiValueCategoryDataset0.getRangeUpperBound(false);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals(defaultMultiValueCategoryDataset1);
      assertTrue(boolean0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      double double0 = 775.552367;
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      Double double1 = new Double(775.552367);
      assertEquals(775.552367, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues((Comparable) double1, (Comparable) double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (775.552367) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Comparable<KeyedObjects2D> comparable0 = (Comparable<KeyedObjects2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultMultiValueCategoryDataset0.getColumnIndex(comparable0);
      assertEquals((-1), int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      DatasetGroup datasetGroup0 = new DatasetGroup("*qGWO+T-0@lK|");
      assertEquals("*qGWO+T-0@lK|", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultMultiValueCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals("*qGWO+T-0@lK|", datasetGroup0.getID());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues((-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      Short short0 = new Short((short) (-2210));
      assertEquals((short) (-2210), (short)short0);
      assertNotNull(short0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset2 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset2.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset2.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset2.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset2);
      
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals(defaultMultiValueCategoryDataset2);
      assertTrue(boolean0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset2.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset2.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset2.getColumnCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = defaultMultiValueCategoryDataset0.equals(short0);
      assertFalse(boolean1);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertFalse(boolean1 == boolean0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertNotNull(keyedObjects2D0);
      
      defaultMultiValueCategoryDataset0.data = keyedObjects2D0;
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.data.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.data.getRowCount());
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((int) (short) (-2210), (int) (short) (-2210));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((-2020), (-2020));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      double double0 = defaultMultiValueCategoryDataset0.getRangeLowerBound(false);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyedObjects2D keyedObjects2D0 = defaultMultiValueCategoryDataset0.data;
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertNotNull(keyedObjects2D0);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultMultiValueCategoryDataset0));
      
      boolean boolean0 = linkedList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultMultiValueCategoryDataset0));
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      defaultMultiValueCategoryDataset0.add(linkedList0, double0, double0);
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultMultiValueCategoryDataset0));
      
      defaultMultiValueCategoryDataset0.data = keyedObjects2D0;
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, keyedObjects2D0.getRowCount());
      assertEquals(1, keyedObjects2D0.getColumnCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.data.getColumnCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.data.getRowCount());
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Long long0 = new Long((-473L));
      assertEquals((-473L), (long)long0);
      assertNotNull(long0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnIndex(long0);
      assertEquals((-1), int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertNotNull(keyedObjects2D0);
      
      Comparable<DefaultMultiValueCategoryDataset> comparable0 = (Comparable<DefaultMultiValueCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = keyedObjects2D0.getRowIndex(comparable0);
      assertEquals((-1), int0);
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      
      defaultMultiValueCategoryDataset0.data = keyedObjects2D0;
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getColumnCount());
      assertEquals(0, keyedObjects2D0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.data.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.data.getColumnCount());
      
      boolean boolean0 = true;
      double double0 = defaultMultiValueCategoryDataset0.getRangeLowerBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      Comparable<DefaultMultiValueCategoryDataset> comparable1 = (Comparable<DefaultMultiValueCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue(comparable1, comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (null) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultPieDatasetTest defaultPieDatasetTest0 = new DefaultPieDatasetTest();
      assertNotNull(defaultPieDatasetTest0);
      
      defaultPieDatasetTest0.testGetKey();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.addChangeListener(defaultPieDatasetTest0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultPieDatasetTest defaultPieDatasetTest0 = new DefaultPieDatasetTest();
      assertNotNull(defaultPieDatasetTest0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.addChangeListener(defaultPieDatasetTest0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals(defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      double double0 = defaultMultiValueCategoryDataset0.getRangeUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      defaultMultiValueCategoryDataset0.removeChangeListener(defaultPieDatasetTest0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      List list0 = defaultMultiValueCategoryDataset1.getRowKeys();
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = defaultMultiValueCategoryDataset0.hasListener(defaultPieDatasetTest0);
      assertFalse(boolean1);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset2 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset2.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset2.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset2.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset3 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset2.clone();
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset3.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset3.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset3.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset2.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset2.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset2.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset3.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset3.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset3.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset0);
      assertNotSame(defaultMultiValueCategoryDataset3, defaultMultiValueCategoryDataset0);
      assertNotSame(defaultMultiValueCategoryDataset3, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset3, defaultMultiValueCategoryDataset1);
      
      boolean boolean2 = defaultMultiValueCategoryDataset0.equals(defaultMultiValueCategoryDataset2);
      assertTrue(boolean2);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset3));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset3));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset2.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset2.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset2.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset3));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset3));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      
      int int1 = defaultMultiValueCategoryDataset0.getRowCount();
      assertEquals(0, int1);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset3));
      assertTrue(int1 == int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset4 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset3));
      assertTrue(defaultMultiValueCategoryDataset4.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset4.equals((Object)defaultMultiValueCategoryDataset3));
      assertTrue(defaultMultiValueCategoryDataset4.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset4.equals((Object)defaultMultiValueCategoryDataset0));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset4.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset4.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset4.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset4);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset4);
      assertNotSame(defaultMultiValueCategoryDataset4, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset4, defaultMultiValueCategoryDataset0);
      assertNotSame(defaultMultiValueCategoryDataset4, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset4, defaultMultiValueCategoryDataset1);
      
      double double1 = defaultMultiValueCategoryDataset0.getRangeLowerBound(true);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset4));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset3));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset4);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset5 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset1.clone();
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset4));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset3));
      assertTrue(defaultMultiValueCategoryDataset5.equals((Object)defaultMultiValueCategoryDataset3));
      assertTrue(defaultMultiValueCategoryDataset5.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset5.equals((Object)defaultMultiValueCategoryDataset4));
      assertTrue(defaultMultiValueCategoryDataset5.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset5.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset2));
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset3));
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset4));
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset5.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset5.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset5.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset5);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset4);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset5);
      assertNotSame(defaultMultiValueCategoryDataset5, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset5, defaultMultiValueCategoryDataset0);
      assertNotSame(defaultMultiValueCategoryDataset5, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset5, defaultMultiValueCategoryDataset4);
      assertNotSame(defaultMultiValueCategoryDataset5, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset5);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset4);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset3);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset2);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = 0;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      
      byte byte0 = (byte) (-99);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(""));
      
      boolean boolean1 = linkedList1.add("");
      assertTrue(boolean1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains(""));
      
      boolean boolean2 = linkedList0.retainAll(linkedList1);
      assertFalse(boolean2);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.contains(""));
      assertTrue(linkedList1.contains(""));
      
      Byte byte1 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      assertNull(mouseWheelListener1);
      
      MouseWheelListener mouseWheelListener2 = AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      assertNull(mouseWheelListener2);
      
      boolean boolean3 = defaultMultiValueCategoryDataset0.hasListener((EventListener) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      
      defaultMultiValueCategoryDataset0.add(linkedList0, byte1, byte1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.contains(""));
      
      Number number0 = defaultMultiValueCategoryDataset0.getValue(0, 0);
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNull(number0);
      
      Comparable<DefaultMultiValueCategoryDataset> comparable0 = (Comparable<DefaultMultiValueCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("Column key (").when(comparable0).toString();
      boolean boolean4 = defaultMultiValueCategoryDataset0.equals((Object) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, defaultMultiValueCategoryDataset0.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (Column key () not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.retainAll(linkedList1);
      Byte byte0 = new Byte((byte) (-99));
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      defaultMultiValueCategoryDataset0.add(linkedList0, byte0, byte0);
      defaultMultiValueCategoryDataset0.getValue(0, 0);
      defaultMultiValueCategoryDataset0.equals((Object) null);
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue(0, (int) (byte) (-99));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      KeyedObjects2D keyedObjects2D0 = defaultMultiValueCategoryDataset0.data;
      Double double0 = new Double(0.0);
      Double.isFinite((-1264.5878822805691));
      Double.max((-3028.83), 0.0);
      Double.isFinite((-4055.5703627898547));
      keyedObjects2D0.setObject(double0, double0, double0);
      Comparable<KeyedObjects2D> comparable0 = (Comparable<KeyedObjects2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      keyedObjects2D0.setObject(defaultMultiValueCategoryDataset0, comparable0, comparable0);
      defaultMultiValueCategoryDataset0.data = keyedObjects2D0;
      defaultMultiValueCategoryDataset0.setNotify(false);
      defaultMultiValueCategoryDataset0.getColumnIndex(double0);
      defaultMultiValueCategoryDataset0.getRowKeys();
      defaultMultiValueCategoryDataset0.getColumnKeys();
      keyedObjects2D0.getObject(0, 0);
      boolean boolean0 = true;
      defaultMultiValueCategoryDataset0.getRangeUpperBound(true);
      defaultMultiValueCategoryDataset0.getColumnKeys();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((-1), (-1134));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultPieDatasetTest defaultPieDatasetTest0 = new DefaultPieDatasetTest();
      defaultPieDatasetTest0.testGetKey();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(defaultPieDatasetTest0, defaultMultiValueCategoryDataset0);
      defaultPieDatasetTest0.testCloning();
      defaultPieDatasetTest0.datasetChanged(datasetChangeEvent0);
      defaultMultiValueCategoryDataset0.addChangeListener(defaultPieDatasetTest0);
      defaultMultiValueCategoryDataset0.clone();
      defaultMultiValueCategoryDataset0.getColumnCount();
      defaultMultiValueCategoryDataset0.getRangeBounds(true);
      Comparable<DefaultMultiValueCategoryDataset> comparable0 = (Comparable<DefaultMultiValueCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("QglR*-FVi_fyb5").when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (QglR*-FVi_fyb5) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues(29, 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.clone();
      DefaultPieDatasetTest defaultPieDatasetTest0 = new DefaultPieDatasetTest();
      defaultMultiValueCategoryDataset0.removeChangeListener(defaultPieDatasetTest0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.iterator();
      Long long0 = new Long(633L);
      linkedList0.add(long0);
      Long long1 = new Long(0L);
      linkedList0.push(long1);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultMultiValueCategoryDataset0.add(linkedList0, comparable0, comparable0);
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      defaultMultiValueCategoryDataset0.hasListener((EventListener) null);
      defaultMultiValueCategoryDataset0.getRangeLowerBound(false);
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getColumnKey(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
