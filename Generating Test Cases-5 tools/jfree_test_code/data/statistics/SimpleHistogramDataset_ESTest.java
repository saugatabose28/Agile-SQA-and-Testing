/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:35:31 GMT 2023
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.DomainOrder;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleHistogramDataset_ESTest extends SimpleHistogramDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("%ws6HCI5Yi", (String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.seriesChanged((SeriesChangeEvent) null);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(simpleHistogramBin0).accepts(anyDouble());
      doReturn(simpleHistogramDataset1).when(simpleHistogramBin0).clone();
      doReturn((-1)).when(simpleHistogramBin0).getItemCount();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3999.7);
      simpleHistogramDataset0.addObservations(doubleArray0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, doubleArray0.length);
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertArrayEquals(new double[] {(-3999.7)}, doubleArray0, 0.01);
      
      Comparable comparable1 = simpleHistogramDataset0.getSeriesKey(0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(comparable1);
      
      SimpleHistogramDataset simpleHistogramDataset2 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset2.getNotify());
      assertTrue(simpleHistogramDataset2.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset2.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset2);
      
      Comparable comparable2 = simpleHistogramDataset2.getSeriesKey((-1));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset0);
      assertSame(comparable2, comparable1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset2.getNotify());
      assertTrue(simpleHistogramDataset2.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset2.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset0));
      assertNotNull(comparable2);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset2.getStartX(0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.SimpleHistogramDataset cannot be cast to org.jfree.data.statistics.SimpleHistogramBin
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("4K$ces4ktYLN+a").when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Comparable<SimpleHistogramDataset> comparable1 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.clearObservations();
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset("4K$ces4ktYLN+a");
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      int int0 = simpleHistogramDataset1.indexOf((Comparable) null);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertEquals((-1), int0);
      
      simpleHistogramDataset1.addBin((SimpleHistogramBin) null);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(simpleHistogramBin0).accepts(anyDouble());
      doReturn(simpleHistogramDataset1, simpleHistogramDataset0).when(simpleHistogramBin0).clone();
      doReturn(4).when(simpleHistogramBin0).getItemCount();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      int int1 = simpleHistogramDataset0.indexOf(comparable1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(true);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset2 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset0);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset2.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset2.getNotify());
      assertEquals(1, simpleHistogramDataset2.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset0));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset1));
      assertNotNull(simpleHistogramDataset2);
      
      int int2 = simpleHistogramDataset0.getSeriesCount();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      SimpleHistogramDataset simpleHistogramDataset3 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset3);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset3, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset3, simpleHistogramDataset0);
      assertNotSame(simpleHistogramDataset3, simpleHistogramDataset2);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset3.getNotify());
      assertTrue(simpleHistogramDataset3.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset3.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset3.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset3.equals((Object)simpleHistogramDataset0));
      assertFalse(simpleHistogramDataset3.equals((Object)simpleHistogramDataset2));
      assertNotNull(simpleHistogramDataset3);
      
      simpleHistogramDataset0.removeChangeListener(datasetChangeListener0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset3);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset3));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset3);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset3));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.addObservation((-1.0), false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset3);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset3));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      int int3 = (-1);
      // Undeclared exception!
      try { 
        simpleHistogramDataset3.getEndX((-1), 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.SimpleHistogramDataset cannot be cast to org.jfree.data.statistics.SimpleHistogramBin
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("4K$ces4ktYLN+a").when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Comparable<SimpleHistogramDataset> comparable1 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.clearObservations();
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset("4K$ces4ktYLN+a");
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      simpleHistogramDataset1.addBin((SimpleHistogramBin) null);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      simpleHistogramDataset1.setNotify(true);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(simpleHistogramDataset1, simpleHistogramDataset0).when(simpleHistogramBin0).clone();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      int int0 = simpleHistogramDataset0.indexOf(comparable1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-1), int0);
      
      double double0 = (-1.0);
      boolean boolean0 = false;
      simpleHistogramDataset0.setNotify(true);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(true);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset2 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset2.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset2.getSeriesCount());
      assertTrue(simpleHistogramDataset2.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset2);
      
      int int1 = simpleHistogramDataset0.getSeriesCount();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(int1 == int0);
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertEquals(1, int1);
      
      SimpleHistogramDataset simpleHistogramDataset3 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset3, simpleHistogramDataset0);
      assertNotSame(simpleHistogramDataset3, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset3, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset3);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertTrue(simpleHistogramDataset3.getNotify());
      assertTrue(simpleHistogramDataset3.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset3.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset3.equals((Object)simpleHistogramDataset0));
      assertFalse(simpleHistogramDataset3.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset3.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertNotNull(simpleHistogramDataset3);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset3.clearObservations();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.SimpleHistogramDataset cannot be cast to org.jfree.data.statistics.SimpleHistogramBin
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("|3]l(-{y", "").when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      simpleHistogramDataset0.validateObject();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.seriesChanged(seriesChangeEvent0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(190).when(simpleHistogramBin0).getItemCount();
      doReturn(Double.NEGATIVE_INFINITY, (-1962.8905)).when(simpleHistogramBin0).getLowerBound();
      doReturn(997.0, (-1095.0)).when(simpleHistogramBin0).getUpperBound();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      DatasetGroup datasetGroup0 = simpleHistogramDataset0.getGroup();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      Comparable<SimpleHistogramBin> comparable1 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = simpleHistogramDataset0.indexOf(comparable1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-1), int0);
      
      double double0 = simpleHistogramDataset0.getYValue(0, 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals(0.0, double0, 0.01);
      
      int int1 = simpleHistogramDataset0.getSeriesCount();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Comparable comparable2 = simpleHistogramDataset0.getSeriesKey((-1));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(comparable2);
      
      double double1 = simpleHistogramDataset0.getXValue((-1), 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotEquals(double1, double0, 0.01);
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-1528.94525), double1, 0.01);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndX(0, (-1257));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(simpleHistogramBin0).accepts(anyDouble());
      doReturn(0).when(simpleHistogramBin0).getItemCount();
      doReturn((-708.82249)).when(simpleHistogramBin0).getLowerBound();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      int int0 = 0;
      simpleHistogramDataset0.validateObject();
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Number number0 = simpleHistogramDataset0.getStartX(0, 0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-708.82249), number0);
      assertNotNull(number0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.addObservations(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No bin.
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(simpleHistogramBin0).accepts(anyDouble());
      doReturn(0.0).when(simpleHistogramBin0).getLowerBound();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      int int0 = 0;
      simpleHistogramDataset0.validateObject();
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      Number number0 = simpleHistogramDataset0.getStartX(0, 0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.addObservations(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No bin.
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      simpleHistogramDataset0.validateObject();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.seriesChanged(seriesChangeEvent0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(simpleHistogramBin0).getItemCount();
      doReturn(0.0, (-290.20405917)).when(simpleHistogramBin0).getLowerBound();
      doReturn((-290.20405917), 0.0).when(simpleHistogramBin0).getUpperBound();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      DatasetGroup datasetGroup0 = simpleHistogramDataset0.getGroup();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      Comparable<SimpleHistogramBin> comparable1 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = simpleHistogramDataset0.indexOf(comparable1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-1), int0);
      
      double double0 = simpleHistogramDataset0.getYValue(0, 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-0.01722925590462202), double0, 0.01);
      
      int int1 = simpleHistogramDataset0.getSeriesCount();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Comparable comparable2 = simpleHistogramDataset0.getSeriesKey((-1));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(comparable2);
      
      double double1 = simpleHistogramDataset0.getXValue((-1), 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotEquals(double1, double0, 0.01);
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-145.102029585), double1, 0.01);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndX(0, (-1257));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<SimpleHistogramDataset> comparable0 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("p8.YSa$F/\\vz").when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(simpleHistogramBin0).accepts(anyDouble());
      doReturn(0).when(simpleHistogramBin0).getItemCount();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.removeChangeListener(datasetChangeListener0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      int int0 = simpleHistogramDataset0.getSeriesCount();
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, int0);
      
      int int1 = simpleHistogramDataset0.indexOf(1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      simpleHistogramDataset0.removeChangeListener(datasetChangeListener1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.setNotify(false);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener2 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      Comparable<SimpleHistogramBin> comparable1 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(comparable1);
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener3 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset1.removeChangeListener(datasetChangeListener3);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      boolean boolean0 = simpleHistogramDataset0.hasListener(simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertFalse(boolean0);
      
      simpleHistogramDataset0.removeChangeListener(datasetChangeListener2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.addChangeListener((DatasetChangeListener) null);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      DatasetChangeListener datasetChangeListener4 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.addObservation((double) 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.removeChangeListener((DatasetChangeListener) null);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.addChangeListener(datasetChangeListener4);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getStartXValue(0, (-511));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(simpleHistogramBin0).accepts(anyDouble());
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addChangeListener(datasetChangeListener0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      int int0 = simpleHistogramDataset0.getItemCount(1612);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, int0);
      
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(1);
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset1.addChangeListener(datasetChangeListener1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.addObservation((double) 1612);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No bin.
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<SimpleHistogramDataset> comparable0 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.addBin((SimpleHistogramBin) null);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      int int0 = 0;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      int int1 = simpleHistogramDataset0.getSeriesCount();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = simpleHistogramDataset0.indexOf(1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      simpleHistogramDataset0.removeChangeListener(datasetChangeListener1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.setNotify(false);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      DatasetChangeListener datasetChangeListener2 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      Comparable<SimpleHistogramBin> comparable1 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(comparable1);
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener3 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset1.removeChangeListener(datasetChangeListener3);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      simpleHistogramDataset1.seriesChanged(seriesChangeEvent0);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      boolean boolean0 = simpleHistogramDataset0.hasListener(simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertFalse(boolean0);
      
      simpleHistogramDataset0.removeChangeListener(datasetChangeListener2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      int int3 = (-511);
      DatasetChangeListener datasetChangeListener4 = null;
      simpleHistogramDataset0.addChangeListener((DatasetChangeListener) null);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      DatasetChangeListener datasetChangeListener5 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.addObservation((double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("4K$ces4ktYLN+a").when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      Comparable<SimpleHistogramDataset> comparable1 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.clearObservations();
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset("4K$ces4ktYLN+a");
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      simpleHistogramDataset1.addBin((SimpleHistogramBin) null);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(simpleHistogramBin0).accepts(anyDouble());
      doReturn(simpleHistogramDataset1, simpleHistogramDataset0).when(simpleHistogramBin0).clone();
      doReturn(0).when(simpleHistogramBin0).getItemCount();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      int int0 = simpleHistogramDataset0.indexOf(comparable1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-1), int0);
      
      simpleHistogramDataset0.setNotify(true);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(true);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset2 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset2.getSeriesCount());
      assertTrue(simpleHistogramDataset2.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset2.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset2);
      
      int int1 = simpleHistogramDataset0.getSeriesCount();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      SimpleHistogramDataset simpleHistogramDataset3 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset3);
      assertNotSame(simpleHistogramDataset3, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset3, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset3, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset3.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset3.getSeriesCount());
      assertTrue(simpleHistogramDataset3.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset3.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset3.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset3.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset3);
      
      simpleHistogramDataset0.removeChangeListener(datasetChangeListener0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset3);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset3));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset3);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset3));
      
      simpleHistogramDataset0.addObservation((-1.0), false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset3);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset3));
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndY((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(simpleHistogramBin0).getItemCount();
      doReturn((double)7).when(simpleHistogramBin0).getLowerBound();
      doReturn((double)7).when(simpleHistogramBin0).getUpperBound();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      double double0 = simpleHistogramDataset0.getYValue(2633, 0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getX(351, 351);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 351, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getStartX((-313), (-313));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("=B", "C1").when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      simpleHistogramDataset0.validateObject();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.seriesChanged(seriesChangeEvent0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn((-186)).when(simpleHistogramBin0).getItemCount();
      doReturn(0.0, (double)(-186)).when(simpleHistogramBin0).getLowerBound();
      doReturn((double)(-186), (double)(-186)).when(simpleHistogramBin0).getUpperBound();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      DatasetGroup datasetGroup0 = simpleHistogramDataset0.getGroup();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      Comparable<SimpleHistogramBin> comparable1 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = simpleHistogramDataset0.indexOf(comparable1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-1), int0);
      
      double double0 = simpleHistogramDataset0.getYValue(0, 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals(1.0, double0, 0.01);
      
      int int1 = simpleHistogramDataset0.getSeriesCount();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Comparable comparable2 = simpleHistogramDataset0.getSeriesKey((-1));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(comparable2);
      
      double double1 = simpleHistogramDataset0.getXValue((-1), 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertNotEquals(double1, double0, 0.01);
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-186.0), double1, 0.01);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndX(0, (-1257));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("6tV2'", "6tV2'").when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      simpleHistogramDataset0.validateObject();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.seriesChanged(seriesChangeEvent0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(1250).when(simpleHistogramBin0).getItemCount();
      doReturn(0.0, (double)1250).when(simpleHistogramBin0).getLowerBound();
      doReturn(0.0, 0.0).when(simpleHistogramBin0).getUpperBound();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      DatasetGroup datasetGroup0 = simpleHistogramDataset0.getGroup();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      Comparable<SimpleHistogramBin> comparable1 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = simpleHistogramDataset0.indexOf(comparable1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-1), int0);
      
      double double0 = simpleHistogramDataset0.getYValue(0, 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      int int1 = simpleHistogramDataset0.getSeriesCount();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Comparable comparable2 = simpleHistogramDataset0.getSeriesKey((-1));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(comparable2);
      
      double double1 = simpleHistogramDataset0.getXValue((-1), 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotEquals(double1, double0, 0.01);
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals(625.0, double1, 0.01);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndX(0, (-1257));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getStartXValue(1356, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.clearObservations();
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getY((-2892), (-132));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.setNotify(false);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.removeChangeListener(datasetChangeListener0);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Comparable comparable1 = simpleHistogramDataset0.getSeriesKey(0);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(comparable1);
      
      simpleHistogramDataset0.validateObject();
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(simpleHistogramBin0).getItemCount();
      doReturn(0.0).when(simpleHistogramBin0).getLowerBound();
      simpleHistogramDataset0.setAdjustForBinSize(false);
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      double double0 = simpleHistogramDataset0.getStartYValue(0, 0);
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = simpleHistogramDataset0.getStartXValue(449, 0);
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getStartY(0, (-1636));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.setAdjustForBinSize(true);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      int int0 = simpleHistogramDataset0.getSeriesCount();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getStartYValue(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<SimpleHistogramDataset> comparable0 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.removeAllBins();
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      DatasetGroup datasetGroup0 = simpleHistogramDataset0.getGroup();
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      
      simpleHistogramDataset0.setAdjustForBinSize(true);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.setAdjustForBinSize(true);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.addChangeListener((DatasetChangeListener) null);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.validateObject();
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Comparable comparable1 = simpleHistogramDataset0.getSeriesKey(754);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(comparable1);
      
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(comparable1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      boolean boolean0 = simpleHistogramDataset0.equals(simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset1.getX(754, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      simpleHistogramDataset0.validateObject();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.seriesChanged(seriesChangeEvent0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(simpleHistogramBin0).getItemCount();
      doReturn(0.0, 0.0).when(simpleHistogramBin0).getLowerBound();
      doReturn(0.0, 0.0).when(simpleHistogramBin0).getUpperBound();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      DatasetGroup datasetGroup0 = simpleHistogramDataset0.getGroup();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      Comparable<SimpleHistogramBin> comparable1 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = simpleHistogramDataset0.indexOf(comparable1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-1), int0);
      
      double double0 = simpleHistogramDataset0.getYValue(0, 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals(Double.NaN, double0, 0.01);
      
      int int1 = simpleHistogramDataset0.getSeriesCount();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Comparable comparable2 = simpleHistogramDataset0.getSeriesKey((-1));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(comparable2);
      
      double double1 = simpleHistogramDataset0.getXValue((-1), 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotEquals(double1, double0, 0.01);
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals(0.0, double1, 0.01);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndX(0, (-1257));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      DatasetGroup datasetGroup0 = simpleHistogramDataset0.getGroup();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset2 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset2.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset2.getNotify());
      assertEquals(1, simpleHistogramDataset2.getSeriesCount());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertTrue(simpleHistogramDataset2.equals((Object)simpleHistogramDataset0));
      assertTrue(simpleHistogramDataset2.equals((Object)simpleHistogramDataset1));
      assertNotNull(simpleHistogramDataset2);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndXValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(comparable1);
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      boolean boolean0 = simpleHistogramDataset0.hasListener(simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertFalse(boolean0);
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      boolean boolean1 = true;
      simpleHistogramDataset0.clearObservations();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setAdjustForBinSize(true);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.addObservations((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = simpleHistogramDataset0.indexOf(comparable1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-1), int0);
      
      simpleHistogramDataset0.setAdjustForBinSize(false);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      simpleHistogramDataset0.clearObservations();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      simpleHistogramDataset0.removeAllBins();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getXValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparable<SimpleHistogramDataset> comparable0 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.clearObservations();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.removeAllBins();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getStartYValue(227, (-2527));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      double double0 = (-7177.0925);
      SimpleHistogramBin simpleHistogramBin0 = null;
      simpleHistogramDataset0.addBin((SimpleHistogramBin) null);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.addObservation((-7177.0925), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.clearObservations();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(comparable1);
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      boolean boolean0 = simpleHistogramDataset0.equals(simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getX((-470), (-2604));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = (-1192);
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndXValue(0, (-1192));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(comparable1);
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      boolean boolean0 = simpleHistogramDataset0.equals(simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.clearObservations();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      Comparable<SimpleHistogramBin> comparable1 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.validateObject();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      int int0 = simpleHistogramDataset0.indexOf(comparable1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals((-1), int0);
      
      simpleHistogramDataset0.setAdjustForBinSize(false);
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      simpleHistogramDataset0.clearObservations();
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getStartY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getStartY(0, 550);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 550, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = simpleHistogramDataset0.getItemCount(10);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getX(10, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(simpleHistogramBin0).compareTo(any());
      doReturn(false).when(simpleHistogramBin0).overlapsWith(any(org.jfree.data.statistics.SimpleHistogramBin.class));
      simpleHistogramDataset0.setAdjustForBinSize(false);
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Comparable<SimpleHistogramBin> comparable1 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(comparable1);
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      boolean boolean0 = simpleHistogramDataset0.hasListener(simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertFalse(boolean0);
      
      SimpleHistogramBin simpleHistogramBin1 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.addBin(simpleHistogramBin1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SimpleHistogramBin simpleHistogramBin2 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(simpleHistogramBin2).compareTo(any());
      doReturn(false, false).when(simpleHistogramBin2).overlapsWith(any(org.jfree.data.statistics.SimpleHistogramBin.class));
      simpleHistogramDataset0.addBin(simpleHistogramBin2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      int int0 = (-3632);
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndY((-2846), (-3632));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparable<SimpleHistogramDataset> comparable0 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getYValue(1947, 1947);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1947, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = 0;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.removeChangeListener(datasetChangeListener0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      int int1 = 0;
      simpleHistogramDataset0.setNotify(true);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = 2003;
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(2003).when(simpleHistogramBin0).compareTo(any());
      doReturn(false).when(simpleHistogramBin0).overlapsWith(any(org.jfree.data.statistics.SimpleHistogramBin.class));
      simpleHistogramDataset0.setAdjustForBinSize(true);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Comparable<SimpleHistogramBin> comparable1 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(comparable1);
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      boolean boolean0 = simpleHistogramDataset0.hasListener(simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertFalse(boolean0);
      
      SimpleHistogramBin simpleHistogramBin1 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.addBin(simpleHistogramBin1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SimpleHistogramBin simpleHistogramBin2 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(simpleHistogramBin2).overlapsWith(any(org.jfree.data.statistics.SimpleHistogramBin.class));
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.addBin(simpleHistogramBin2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Overlapping bin
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.removeAllBins();
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = simpleHistogramDataset0.indexOf(comparable1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals((-1), int0);
      
      simpleHistogramDataset0.validateObject();
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      simpleHistogramDataset0.setAdjustForBinSize(true);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      simpleHistogramDataset0.setAdjustForBinSize(true);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.addBin((SimpleHistogramBin) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      simpleHistogramDataset0.seriesChanged((SeriesChangeEvent) null);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      Comparable comparable1 = simpleHistogramDataset0.getSeriesKey(0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(comparable1);
      
      int int0 = 10;
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndYValue(10, (-1148));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.setNotify(false);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.removeChangeListener(datasetChangeListener0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.removeChangeListener(datasetChangeListener1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset1.getNotify());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      DatasetGroup datasetGroup0 = simpleHistogramDataset0.getGroup();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      int int0 = 1257;
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndX((-998), 1257);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1257, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndX(10, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      DomainOrder domainOrder0 = simpleHistogramDataset0.getDomainOrder();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("DomainOrder.ASCENDING", domainOrder0.toString());
      assertNotNull(domainOrder0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = simpleHistogramDataset0.getSeriesCount();
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.setAdjustForBinSize(true);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(comparable1);
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      boolean boolean0 = simpleHistogramDataset0.hasListener(simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertFalse(boolean0);
      
      simpleHistogramDataset0.setAdjustForBinSize(true);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndYValue(10, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(simpleHistogramBin0).getItemCount();
      doReturn(0.0).when(simpleHistogramBin0).getLowerBound();
      doReturn(0.0).when(simpleHistogramBin0).getUpperBound();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      double double0 = simpleHistogramDataset0.getYValue(2633, 0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getX(351, 351);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 351, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Comparable<SimpleHistogramDataset> comparable0 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = 1537;
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      int int1 = 5;
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getXValue(1537, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.setNotify(true);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      int int0 = 0;
      int int1 = (-1);
      DatasetGroup datasetGroup0 = simpleHistogramDataset0.getGroup();
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.validateObject();
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getXValue(0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      boolean boolean0 = simpleHistogramDataset0.getAdjustForBinSize();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndY((-1822), 255);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 255, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.removeAllBins();
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      int int0 = 980;
      DatasetGroup datasetGroup0 = simpleHistogramDataset0.getGroup();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getStartX(980, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getYValue(0, (-176));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Comparable<SimpleHistogramDataset> comparable1 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.clearObservations();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(simpleHistogramBin0).accepts(anyDouble());
      doReturn((Object) null, (Object) null).when(simpleHistogramBin0).clone();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      int int0 = simpleHistogramDataset0.indexOf(comparable1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-1), int0);
      
      simpleHistogramDataset0.setNotify(true);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.setNotify(true);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      SimpleHistogramDataset simpleHistogramDataset2 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset2.getSeriesCount());
      assertTrue(simpleHistogramDataset2.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset2.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertTrue(simpleHistogramDataset2.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset2);
      
      simpleHistogramDataset0.removeChangeListener(datasetChangeListener0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.addObservation((-1.0), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No bin.
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      simpleHistogramDataset0.removeAllBins();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      int int0 = 631;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 631;
      doubleArray0[1] = (double) 631;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.addObservations(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No bin.
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Comparable<SimpleHistogramDataset> comparable0 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(simpleHistogramBin0).accepts(anyDouble());
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = simpleHistogramDataset0.indexOf(comparable1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.addObservation(4.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No bin.
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3520.8;
      doubleArray0[1] = (-1853.3291564);
      doubleArray0[2] = (-30.33130797749114);
      doubleArray0[3] = 2170.4939144805;
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.addObservations(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No bin.
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      double[] doubleArray0 = new double[0];
      simpleHistogramDataset0.addObservations(doubleArray0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      simpleHistogramDataset0.clearObservations();
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      boolean boolean0 = simpleHistogramDataset0.equals("`*a:");
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Comparable<SimpleHistogramDataset> comparable0 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      boolean boolean0 = simpleHistogramDataset0.equals((Object) null);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(boolean0);
      
      Comparable comparable1 = simpleHistogramDataset0.getSeriesKey((-708));
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(comparable1);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getStartXValue(0, (-1567));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Comparable<Object> comparable0 = null;
      SimpleHistogramDataset simpleHistogramDataset0 = null;
      try {
        simpleHistogramDataset0 = new SimpleHistogramDataset((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.addChangeListener(datasetChangeListener0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.addObservation(0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No bin.
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getStartX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.addChangeListener(datasetChangeListener0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      DatasetGroup datasetGroup0 = simpleHistogramDataset0.getGroup();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      
      simpleHistogramDataset0.removeAllBins();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      int int0 = simpleHistogramDataset0.indexOf(comparable1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-1), int0);
      
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset((-1));
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      Comparable comparable2 = simpleHistogramDataset0.getSeriesKey((-1));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(comparable2);
      
      int int1 = simpleHistogramDataset1.getItemCount((-1));
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      simpleHistogramDataset0.clearObservations();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset1.getY((-1), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = 955;
      simpleHistogramDataset0.clearObservations();
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getX(955, 955);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 955, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset2 = new SimpleHistogramDataset(comparable1);
      assertTrue(simpleHistogramDataset2.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset2.getNotify());
      assertEquals(1, simpleHistogramDataset2.getSeriesCount());
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset0));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset1));
      assertNotNull(simpleHistogramDataset2);
      
      boolean boolean0 = simpleHistogramDataset0.hasListener(simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset0);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset2.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset2.getNotify());
      assertEquals(1, simpleHistogramDataset2.getSeriesCount());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset0));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset1));
      assertFalse(boolean0);
      
      int int0 = (-1195);
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndYValue((-1195), (-1195));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.seriesChanged((SeriesChangeEvent) null);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(simpleHistogramBin0).accepts(anyDouble());
      doReturn((Object) null).when(simpleHistogramBin0).clone();
      doReturn(0).when(simpleHistogramBin0).getItemCount();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3999.7);
      simpleHistogramDataset0.addObservations(doubleArray0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-3999.7)}, doubleArray0, 0.01);
      
      Comparable comparable1 = simpleHistogramDataset0.getSeriesKey(0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(comparable1);
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      simpleHistogramDataset0.clearObservations();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getStartYValue(0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("S}.#jL-r<(?|", "S}.#jL-r<(?|").when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      simpleHistogramDataset0.validateObject();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.seriesChanged(seriesChangeEvent0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(simpleHistogramBin0).getItemCount();
      doReturn(0.0, (-1579.783)).when(simpleHistogramBin0).getLowerBound();
      doReturn((-2457.51423395), 5.0).when(simpleHistogramBin0).getUpperBound();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      DatasetGroup datasetGroup0 = simpleHistogramDataset0.getGroup();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      Comparable<SimpleHistogramBin> comparable1 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = simpleHistogramDataset0.indexOf(comparable1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-1), int0);
      
      double double0 = simpleHistogramDataset0.getYValue(0, 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-0.0032553219385189395), double0, 0.01);
      
      int int1 = simpleHistogramDataset0.getSeriesCount();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Comparable comparable2 = simpleHistogramDataset0.getSeriesKey((-1));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(comparable2);
      
      double double1 = simpleHistogramDataset0.getXValue((-1), 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertFalse(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotEquals(double1, double0, 0.01);
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-787.3915), double1, 0.01);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndX(0, (-1257));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Comparable<SimpleHistogramBin> comparable0 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("6tV2'", "6tV2'", (String) null).when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset1 = (SimpleHistogramDataset)simpleHistogramDataset0.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset1);
      
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(simpleHistogramBin0).clone();
      simpleHistogramDataset1.addBin(simpleHistogramBin0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      simpleHistogramDataset0.validateObject();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      int int0 = simpleHistogramDataset0.indexOf("6tV2'");
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-1), int0);
      
      simpleHistogramDataset0.seriesChanged(seriesChangeEvent0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      simpleHistogramDataset0.setNotify(false);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      SimpleHistogramBin simpleHistogramBin1 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(1250).when(simpleHistogramBin1).getItemCount();
      doReturn(0.0, (double)1250).when(simpleHistogramBin1).getLowerBound();
      doReturn(0.0, 0.0).when(simpleHistogramBin1).getUpperBound();
      simpleHistogramDataset0.addBin(simpleHistogramBin1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      DatasetGroup datasetGroup0 = simpleHistogramDataset0.getGroup();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      
      Comparable<SimpleHistogramBin> comparable1 = (Comparable<SimpleHistogramBin>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = simpleHistogramDataset0.indexOf(comparable1);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(int1 == int0);
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals((-1), int1);
      
      double double0 = simpleHistogramDataset0.getYValue(0, 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      int int2 = simpleHistogramDataset0.getSeriesCount();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      Comparable comparable2 = simpleHistogramDataset0.getSeriesKey((-1));
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotNull(comparable2);
      
      double double1 = simpleHistogramDataset0.getXValue((-1), 0);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(625.0, double1, 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset2 = (SimpleHistogramDataset)simpleHistogramDataset1.clone();
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset2.getNotify());
      assertEquals(1, simpleHistogramDataset2.getSeriesCount());
      assertTrue(simpleHistogramDataset2.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset0));
      assertNotNull(simpleHistogramDataset2);
      
      boolean boolean0 = simpleHistogramDataset0.equals(simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset0, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset2);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset1);
      assertNotSame(simpleHistogramDataset2, simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset1.getNotify());
      assertTrue(simpleHistogramDataset2.getNotify());
      assertEquals(1, simpleHistogramDataset2.getSeriesCount());
      assertTrue(simpleHistogramDataset2.getAdjustForBinSize());
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset0.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset2));
      assertFalse(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset1));
      assertFalse(simpleHistogramDataset2.equals((Object)simpleHistogramDataset0));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndX(0, (-1257));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      int int0 = 0;
      int int1 = 1;
      simpleHistogramDataset0.validateObject();
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getStartX(0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("4K$ces4ktYLN+a").when(comparable0).toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      Comparable<SimpleHistogramDataset> comparable1 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.clearObservations();
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset("4K$ces4ktYLN+a");
      simpleHistogramDataset1.addBin((SimpleHistogramBin) null);
      SimpleHistogramBin simpleHistogramBin0 = mock(SimpleHistogramBin.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(simpleHistogramBin0).accepts(anyDouble());
      doReturn(simpleHistogramDataset1, simpleHistogramDataset0).when(simpleHistogramBin0).clone();
      doReturn(4).when(simpleHistogramBin0).getItemCount();
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      simpleHistogramDataset0.indexOf(comparable1);
      simpleHistogramDataset0.setNotify(true);
      simpleHistogramDataset0.setNotify(true);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.clone();
      simpleHistogramDataset0.getSeriesCount();
      simpleHistogramDataset0.clone();
      simpleHistogramDataset0.removeChangeListener(datasetChangeListener0);
      simpleHistogramDataset0.setNotify(false);
      simpleHistogramDataset0.addObservation((-1.0), false);
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndY((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(comparable0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset0.addChangeListener(datasetChangeListener0);
      simpleHistogramDataset0.removeAllBins();
      simpleHistogramDataset0.getAdjustForBinSize();
      double double0 = Double.NaN;
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(comparable1);
      simpleHistogramDataset1.clearObservations();
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      simpleHistogramDataset1.seriesChanged(seriesChangeEvent0);
      simpleHistogramDataset0.hasListener(simpleHistogramDataset1);
      simpleHistogramDataset1.setAdjustForBinSize(false);
      simpleHistogramDataset1.validateObject();
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.addObservation(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No bin.
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }
}
