/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:11:36 GMT 2023
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.statistics.BoxAndWhiskerCalculator;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BoxAndWhiskerCalculator_ESTest extends BoxAndWhiskerCalculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = Short.valueOf((short)1210);
      linkedList0.add(short0);
      Short.toUnsignedLong((short)1210);
      linkedList0.add(short0);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Short.toUnsignedLong((short)1210);
      Double double0 = new Double((short)1210);
      Double.min((short)1210, 1211.359846906741);
      linkedList1.add(double0);
      Double double1 = new Double(1210.0);
      Short.toUnsignedLong((short)8);
      Short.toUnsignedLong((short)8);
      Double.max(1.5, 1.5);
      linkedList1.add(double1);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, false);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double2 = new Double(Double.NaN);
      linkedList2.add(double2);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList2, true);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList2);
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList1);
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(594.7589F);
      linkedList0.add(float0);
      Float float1 = new Float(0.0F);
      Float float2 = new Float(1.0F);
      Float.min(0.0F, 1775.332F);
      Float.min((-1.0F), 1775.332F);
      Float.sum(0.0F, 1.0F);
      Float.min(0.0F, (-3767.7F));
      Float float3 = new Float(0.0F);
      linkedList0.add(float3);
      Float.max(0.0F, 3027.7607F);
      linkedList0.add(float2);
      linkedList0.offerLast(float1);
      linkedList0.add(float2);
      linkedList0.spliterator();
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, false);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      BoxAndWhiskerCalculator.calculateQ3(linkedList1);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      short short0 = (short)3048;
      Short short1 = new Short((short)3048);
      Integer integer0 = new Integer((short)3048);
      linkedList0.push(integer0);
      Short.toUnsignedInt((short)3048);
      linkedList0.add((Object) short1);
      linkedList0.add((Object) short1);
      Short.toUnsignedLong((short)3048);
      Short.toUnsignedLong((short)3048);
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Short
         //
         verifyException("java.lang.Short", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Float float0 = new Float((-1420.5F));
      Float.isFinite(0.0F);
      linkedList0.iterator();
      Float.sum((-1420.5F), 1.0F);
      linkedList0.add(float0);
      List<Float> list0 = linkedList0.subList(0, 0);
      Float.sum(710.47F, (-1420.5F));
      Float.sum((-1420.5F), 710.47F);
      linkedList0.addLast(float0);
      UnaryOperator<Float> unaryOperator0 = (UnaryOperator<Float>) mock(UnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(float0, float0).when(unaryOperator0).apply(anyFloat());
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.pollLast();
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, false);
      linkedList0.pollFirst();
      linkedList0.poll();
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ3(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1597);
      linkedList0.offerLast(integer0);
      Integer integer1 = new Integer(1);
      linkedList0.add(integer1);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(predicate0).test(any());
      linkedList0.removeIf(predicate0);
      Integer.compare(1597, 1);
      Integer.sum(698, 0);
      Integer.remainderUnsigned(1597, 1);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List<Object> list0 = null;
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Object> list0 = null;
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ3((List) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, false);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("v|O*N&,kr#N");
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.removeFirst();
      String string0 = "D?|/B,0Ts";
      linkedList0.remove((Object) "D?|/B,0Ts");
      linkedList0.add("D?|/B,0Ts");
      linkedList0.add("");
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      linkedList0.add("D?|/B,0Ts");
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ3(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      UnaryOperator<Long> unaryOperator0 = (UnaryOperator<Long>) mock(UnaryOperator.class, new ViolatedAssumptionAnswer());
      linkedList0.clone();
      linkedList0.replaceAll(unaryOperator0);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      linkedList0.clone();
      linkedList0.pollFirst();
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      Long long0 = Long.getLong("]?ked%pPBu{<~P", (-54L));
      Long.max(0L, 1399L);
      linkedList0.add(long0);
      linkedList0.add((Long) null);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      linkedList0.stream();
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ3(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Float float0 = new Float((-1420.5F));
      Float.isFinite(0.0F);
      linkedList0.iterator();
      Float.sum((-1420.5F), 1.0F);
      linkedList0.add(float0);
      linkedList0.subList(0, 0);
      Float.sum((-1420.5F), 710.47F);
      linkedList0.addLast(float0);
      UnaryOperator<Float> unaryOperator0 = (UnaryOperator<Float>) mock(UnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(unaryOperator0).apply(anyFloat());
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.pollLast();
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<Object> list0 = null;
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-11));
      Byte.toUnsignedLong((byte) (-11));
      Byte.compare((byte) (-11), (byte)0);
      Byte.toUnsignedLong((byte) (-11));
      linkedList0.add(byte0);
      linkedList0.add((Byte) null);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      BoxAndWhiskerCalculator.calculateQ1(linkedList1);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.listIterator();
      linkedList1.add((Integer) null);
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ1(linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      linkedList0.add(integer0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(608.479382);
      linkedList0.offerLast(double0);
      linkedList0.add(double0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      linkedList0.sort(comparator0);
      linkedList0.clone();
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      linkedList0.add(double0);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      Double double1 = new Double(608.479382);
      linkedList0.addLast(double1);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      Double double2 = Double.valueOf(608.479382);
      linkedList0.addLast(double2);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      List<Byte> list0 = null;
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ1((List) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-2738.23652473));
      linkedList0.add(double0);
      Double double1 = new Double(0.0);
      linkedList0.add(double1);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("*INKToo");
      linkedList0.add("*INKToo");
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ1(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(2901.7762489);
      Double.min(1580.2355726, 0.0);
      linkedList0.add(double0);
      Double double1 = new Double(0.0);
      linkedList0.add(double1);
      Integer integer0 = new Integer((-647));
      linkedList0.removeLastOccurrence(integer0);
      Double double2 = new Double(0.0);
      Double.sum(2.0, 0.0);
      linkedList0.add(double2);
      Double.max(1580.2355726, 2.0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-739.0));
      linkedList0.add(double0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(Double.NaN);
      Short.toUnsignedLong((short)8);
      Double.min(Double.NaN, Double.NaN);
      Short.toUnsignedLong((short)8);
      Double.max(1.5, 1.5);
      linkedList1.add(double0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, false);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double1 = new Double(Double.NaN);
      linkedList2.add(double1);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList2);
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      BoxAndWhiskerCalculator.calculateQ3(linkedList2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(115.0F);
      linkedList0.add(float0);
      Float float1 = new Float(0.0F);
      Float float2 = new Float(1.0F);
      Float.min(0.0F, 2048.5125F);
      Float.min((-1.0F), 2048.5125F);
      Float.sum(0.0F, 1.0F);
      Float float3 = new Float(1.0F);
      linkedList0.add(float3);
      Float.max(0.0F, 3027.7607F);
      linkedList0.add(float2);
      linkedList0.offerLast(float1);
      linkedList0.add(float2);
      linkedList0.spliterator();
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, false);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      double double0 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals(1.0, double0, 0.01);
      
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      double double1 = BoxAndWhiskerCalculator.calculateQ3(linkedList1);
      assertEquals(Double.NaN, double1, 0.01);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.clone();
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      Long long0 = Long.getLong("]?ked%pPBu{<~P", (-54L));
      linkedList0.add(long0);
      linkedList0.add((Long) null);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ3(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }
}
